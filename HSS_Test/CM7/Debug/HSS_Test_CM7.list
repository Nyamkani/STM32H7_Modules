
HSS_Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002037c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f60  0802061c  0802061c  0003061c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802457c  0802457c  00040098  2**0
                  CONTENTS
  4 .ARM          00000000  0802457c  0802457c  00040098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802457c  0802457c  00040098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802457c  0802457c  0003457c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024580  08024580  00034580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  08024584  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f90c  24000098  0802461c  00040098  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2400f9a4  0802461c  0004f9a4  2**0
                  ALLOC
 11 .lwip_sec     00024b83  30020000  30020000  00050000  2**2
                  ALLOC
 12 .openamp_section 00000000  38000000  38000000  00040098  2**0
                  CONTENTS
 13 .ARM.attributes 0000002e  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00044e31  00000000  00000000  000400c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009832  00000000  00000000  00084ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002d08  00000000  00000000  0008e730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002ab0  00000000  00000000  00091438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000538c2  00000000  00000000  00093ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048f5b  00000000  00000000  000e77aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001d2186  00000000  00000000  00130705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0030288b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c33c  00000000  00000000  003028dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08020604 	.word	0x08020604

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08020604 	.word	0x08020604

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	; (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	; (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	; (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	; (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	; (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	; (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	; (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	; (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	; (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	; (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	; (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	; (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	; (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	; (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	; (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	; (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	; (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	; (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	; (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000464:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <StartTCPServerTask>:
/*-----------------------------------------------------------------------------------*/


/**** Send RESPONSE every time the client sends some data ******/
static void StartTCPServerTask(void const *arg)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]
	err_t err, accept_err;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2100      	movs	r1, #0
 80004c8:	2010      	movs	r0, #16
 80004ca:	f011 f971 	bl	80117b0 <netconn_new_with_proto_and_callback>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4a3e      	ldr	r2, [pc, #248]	; (80005cc <StartTCPServerTask+0x110>)
 80004d2:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 80004d4:	4b3d      	ldr	r3, [pc, #244]	; (80005cc <StartTCPServerTask+0x110>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d06f      	beq.n	80005bc <StartTCPServerTask+0x100>
	{
		/* Bind connection to the server port. */
		err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);
 80004dc:	4b3b      	ldr	r3, [pc, #236]	; (80005cc <StartTCPServerTask+0x110>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	220a      	movs	r2, #10
 80004e2:	493b      	ldr	r1, [pc, #236]	; (80005d0 <StartTCPServerTask+0x114>)
 80004e4:	4618      	mov	r0, r3
 80004e6:	f011 fa1d 	bl	8011924 <netconn_bind>
 80004ea:	4603      	mov	r3, r0
 80004ec:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 80004ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d15d      	bne.n	80005b2 <StartTCPServerTask+0xf6>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 80004f6:	4b35      	ldr	r3, [pc, #212]	; (80005cc <StartTCPServerTask+0x110>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	21ff      	movs	r1, #255	; 0xff
 80004fc:	4618      	mov	r0, r3
 80004fe:	f011 fa49 	bl	8011994 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8000502:	4b32      	ldr	r3, [pc, #200]	; (80005cc <StartTCPServerTask+0x110>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4933      	ldr	r1, [pc, #204]	; (80005d4 <StartTCPServerTask+0x118>)
 8000508:	4618      	mov	r0, r3
 800050a:	f011 fa6f 	bl	80119ec <netconn_accept>
 800050e:	4603      	mov	r3, r0
 8000510:	73bb      	strb	r3, [r7, #14]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8000512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f3      	bne.n	8000502 <StartTCPServerTask+0x46>
				{

					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 800051a:	e036      	b.n	800058a <StartTCPServerTask+0xce>
					{
						/* Extrct the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 800051c:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <StartTCPServerTask+0x11c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3308      	adds	r3, #8
 8000522:	4a2e      	ldr	r2, [pc, #184]	; (80005dc <StartTCPServerTask+0x120>)
 8000524:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 8000526:	4b2c      	ldr	r3, [pc, #176]	; (80005d8 <StartTCPServerTask+0x11c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	899a      	ldrh	r2, [r3, #12]
 800052c:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <StartTCPServerTask+0x124>)
 800052e:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{
							strncpy (msg, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <StartTCPServerTask+0x11c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6859      	ldr	r1, [r3, #4]
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <StartTCPServerTask+0x11c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	895b      	ldrh	r3, [r3, #10]
 8000540:	461a      	mov	r2, r3
 8000542:	4828      	ldr	r0, [pc, #160]	; (80005e4 <StartTCPServerTask+0x128>)
 8000544:	f01f fc10 	bl	801fd68 <strncpy>
							TcpServerParsingSeq();

							*/
							// Or modify the message received, so that we can send it back to the client
							//response
							int len = sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 8000548:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <StartTCPServerTask+0x128>)
 800054a:	4927      	ldr	r1, [pc, #156]	; (80005e8 <StartTCPServerTask+0x12c>)
 800054c:	4827      	ldr	r0, [pc, #156]	; (80005ec <StartTCPServerTask+0x130>)
 800054e:	f01f fb9b 	bl	801fc88 <siprintf>
 8000552:	60b8      	str	r0, [r7, #8]

							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <StartTCPServerTask+0x118>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	68ba      	ldr	r2, [r7, #8]
 800055a:	2300      	movs	r3, #0
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	4922      	ldr	r1, [pc, #136]	; (80005ec <StartTCPServerTask+0x130>)
 8000562:	f011 fcc5 	bl	8011ef0 <netconn_write_partly>

							memset (msg, '\0', sizeof(msg));  // clear the buffer
 8000566:	2264      	movs	r2, #100	; 0x64
 8000568:	2100      	movs	r1, #0
 800056a:	481e      	ldr	r0, [pc, #120]	; (80005e4 <StartTCPServerTask+0x128>)
 800056c:	f01e fe70 	bl	801f250 <memset>
						}
						while (netbuf_next(buf) >0);
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <StartTCPServerTask+0x11c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f016 faeb 	bl	8016b50 <netbuf_next>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	dcd7      	bgt.n	8000530 <StartTCPServerTask+0x74>

						netbuf_delete(buf);
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <StartTCPServerTask+0x11c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f016 fac3 	bl	8016b10 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <StartTCPServerTask+0x118>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4912      	ldr	r1, [pc, #72]	; (80005d8 <StartTCPServerTask+0x11c>)
 8000590:	4618      	mov	r0, r3
 8000592:	f011 fc33 	bl	8011dfc <netconn_recv>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0bf      	beq.n	800051c <StartTCPServerTask+0x60>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <StartTCPServerTask+0x118>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f011 fda7 	bl	80120f4 <netconn_close>
					netconn_delete(newconn);
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <StartTCPServerTask+0x118>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f011 f99e 	bl	80118ec <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 80005b0:	e7a7      	b.n	8000502 <StartTCPServerTask+0x46>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <StartTCPServerTask+0x110>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f011 f998 	bl	80118ec <netconn_delete>
		}
	}
	vTaskDelete(NULL);
 80005bc:	2000      	movs	r0, #0
 80005be:	f010 f9af 	bl	8010920 <vTaskDelete>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	240000b4 	.word	0x240000b4
 80005d0:	08024318 	.word	0x08024318
 80005d4:	240000b8 	.word	0x240000b8
 80005d8:	240000bc 	.word	0x240000bc
 80005dc:	240001ec 	.word	0x240001ec
 80005e0:	240001f0 	.word	0x240001f0
 80005e4:	240000c0 	.word	0x240000c0
 80005e8:	0802062c 	.word	0x0802062c
 80005ec:	24000124 	.word	0x24000124

080005f0 <TcpServerInit>:
	return;
}


void TcpServerInit(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
	if(newconn == NULL)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <TcpServerInit+0x38>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d110      	bne.n	8000620 <TcpServerInit+0x30>
	{
		/* definition and creation of TCPServerTask */
		osThreadDef(TCPServerTask, StartTCPServerTask, osPriorityNormal, 0, DEFAULT_THREAD_STACKSIZE);
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <TcpServerInit+0x3c>)
 8000600:	1d3c      	adds	r4, r7, #4
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		TcpServerHandle = osThreadCreate(osThread(TCPServerTask), NULL);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f00e f857 	bl	800e6c8 <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <TcpServerInit+0x40>)
 800061e:	6013      	str	r3, [r2, #0]
	}
}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	240000b8 	.word	0x240000b8
 800062c:	0802064c 	.word	0x0802064c
 8000630:	240001f4 	.word	0x240001f4

08000634 <BSPInit>:

static bool is_init_ = false;
char workBuffer[FF_MAX_SS];

static void BSPInit()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	if(!(is_init_)) BSP_SD_Init();
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <BSPInit+0x2c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	f083 0301 	eor.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <BSPInit+0x16>
 8000646:	f00a f817 	bl	800a678 <BSP_SD_Init>

	if(BSP_SD_IsDetected()) is_init_ = true;
 800064a:	f00a f8a1 	bl	800a790 <BSP_SD_IsDetected>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d003      	beq.n	800065c <BSPInit+0x28>
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <BSPInit+0x2c>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]

	return;
 800065a:	bf00      	nop
 800065c:	bf00      	nop
}
 800065e:	bd80      	pop	{r7, pc}
 8000660:	24000654 	.word	0x24000654

08000664 <FatFsInit>:



void FatFsInit()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800066a:	4911      	ldr	r1, [pc, #68]	; (80006b0 <FatFsInit+0x4c>)
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <FatFsInit+0x50>)
 800066e:	f00d ffcf 	bl	800e610 <FATFS_LinkDriver>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d115      	bne.n	80006a4 <FatFsInit+0x40>
	{
		BSPInit();
 8000678:	f7ff ffdc 	bl	8000634 <BSPInit>

		if(BSP_SD_IsDetected())
 800067c:	f00a f888 	bl	800a790 <BSP_SD_IsDetected>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d00e      	beq.n	80006a4 <FatFsInit+0x40>
		{
			FRESULT res;

			res = f_mkfs(SDPath, 0, workBuffer, sizeof(workBuffer));
 8000686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <FatFsInit+0x54>)
 800068c:	2100      	movs	r1, #0
 800068e:	4808      	ldr	r0, [pc, #32]	; (80006b0 <FatFsInit+0x4c>)
 8000690:	f00d fb36 	bl	800dd00 <f_mkfs>
 8000694:	4603      	mov	r3, r0
 8000696:	71fb      	strb	r3, [r7, #7]

			if(res != FR_OK) return; // Error_Handler();
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d104      	bne.n	80006a8 <FatFsInit+0x44>

			printf("Successfully formatted\n");
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <FatFsInit+0x58>)
 80006a0:	f01f fa32 	bl	801fb08 <puts>
		}

	}

	return;
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <FatFsInit+0x46>
			if(res != FR_OK) return; // Error_Handler();
 80006a8:	bf00      	nop
}
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	24000650 	.word	0x24000650
 80006b4:	080242b4 	.word	0x080242b4
 80006b8:	24000658 	.word	0x24000658
 80006bc:	08020668 	.word	0x08020668

080006c0 <FatFsTest>:



void FatFsTest(const char *filename)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0c6      	sub	sp, #280	; 0x118
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80006ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80006ce:	6018      	str	r0, [r3, #0]
  FRESULT res;
  uint32_t written_bytes=0 ,read_bytes= 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  char buf[50];
  char readbuf[200] =  {0.};
 80006dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80006e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	3304      	adds	r3, #4
 80006ea:	22c4      	movs	r2, #196	; 0xc4
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f01e fdae 	bl	801f250 <memset>

  int total_byte_ = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  const char *p = "FatFs example for STM32F747i-Dicovery!\r\n";
 80006fa:	4b8a      	ldr	r3, [pc, #552]	; (8000924 <FatFsTest+0x264>)
 80006fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK) return;
 8000700:	2201      	movs	r2, #1
 8000702:	4989      	ldr	r1, [pc, #548]	; (8000928 <FatFsTest+0x268>)
 8000704:	4889      	ldr	r0, [pc, #548]	; (800092c <FatFsTest+0x26c>)
 8000706:	f00c fccb 	bl	800d0a0 <f_mount>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	f040 8104 	bne.w	800091a <FatFsTest+0x25a>

  res = f_open(&SDFile, (const char*)filename, FA_CREATE_ALWAYS | FA_WRITE);
 8000712:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000716:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800071a:	220a      	movs	r2, #10
 800071c:	6819      	ldr	r1, [r3, #0]
 800071e:	4884      	ldr	r0, [pc, #528]	; (8000930 <FatFsTest+0x270>)
 8000720:	f00c fd08 	bl	800d134 <f_open>
 8000724:	4603      	mov	r3, r0
 8000726:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  //res = f_open(&SDFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);

  if(res == FR_OK){
 800072a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800072e:	2b00      	cmp	r3, #0
 8000730:	f040 80ec 	bne.w	800090c <FatFsTest+0x24c>
    sprintf(buf, "%s\r\n", p);
 8000734:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000738:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800073c:	497d      	ldr	r1, [pc, #500]	; (8000934 <FatFsTest+0x274>)
 800073e:	4618      	mov	r0, r3
 8000740:	f01f faa2 	bl	801fc88 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 8000744:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fdc9 	bl	80002e0 <strlen>
 800074e:	4602      	mov	r2, r0
 8000750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000754:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000758:	4875      	ldr	r0, [pc, #468]	; (8000930 <FatFsTest+0x270>)
 800075a:	f00c ffa6 	bl	800d6aa <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 800075e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000762:	4619      	mov	r1, r3
 8000764:	4874      	ldr	r0, [pc, #464]	; (8000938 <FatFsTest+0x278>)
 8000766:	f01f f949 	bl	801f9fc <iprintf>

    total_byte_ += written_bytes;
 800076a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800076e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000772:	4413      	add	r3, r2
 8000774:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "Filename : %s\r\n", filename);
 8000778:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800077c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000780:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	496d      	ldr	r1, [pc, #436]	; (800093c <FatFsTest+0x27c>)
 8000788:	f01f fa7e 	bl	801fc88 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 800078c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fda5 	bl	80002e0 <strlen>
 8000796:	4602      	mov	r2, r0
 8000798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800079c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80007a0:	4863      	ldr	r0, [pc, #396]	; (8000930 <FatFsTest+0x270>)
 80007a2:	f00c ff82 	bl	800d6aa <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 80007a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80007aa:	4619      	mov	r1, r3
 80007ac:	4862      	ldr	r0, [pc, #392]	; (8000938 <FatFsTest+0x278>)
 80007ae:	f01f f925 	bl	801f9fc <iprintf>

    total_byte_ += written_bytes;
 80007b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80007b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80007ba:	4413      	add	r3, r2
 80007bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "Tick : %ld\r\n", HAL_GetTick());
 80007c0:	f001 f84c 	bl	800185c <HAL_GetTick>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007ca:	495d      	ldr	r1, [pc, #372]	; (8000940 <FatFsTest+0x280>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f01f fa5b 	bl	801fc88 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 80007d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fd82 	bl	80002e0 <strlen>
 80007dc:	4602      	mov	r2, r0
 80007de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80007e2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80007e6:	4852      	ldr	r0, [pc, #328]	; (8000930 <FatFsTest+0x270>)
 80007e8:	f00c ff5f 	bl	800d6aa <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 80007ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80007f0:	4619      	mov	r1, r3
 80007f2:	4851      	ldr	r0, [pc, #324]	; (8000938 <FatFsTest+0x278>)
 80007f4:	f01f f902 	bl	801f9fc <iprintf>

    total_byte_ += written_bytes;
 80007f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80007fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000800:	4413      	add	r3, r2
 8000802:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "parameter1 : 3\r\n");
 8000806:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800080a:	494e      	ldr	r1, [pc, #312]	; (8000944 <FatFsTest+0x284>)
 800080c:	4618      	mov	r0, r3
 800080e:	f01f fa3b 	bl	801fc88 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 8000812:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fd62 	bl	80002e0 <strlen>
 800081c:	4602      	mov	r2, r0
 800081e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000822:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000826:	4842      	ldr	r0, [pc, #264]	; (8000930 <FatFsTest+0x270>)
 8000828:	f00c ff3f 	bl	800d6aa <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 800082c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000830:	4619      	mov	r1, r3
 8000832:	4841      	ldr	r0, [pc, #260]	; (8000938 <FatFsTest+0x278>)
 8000834:	f01f f8e2 	bl	801f9fc <iprintf>

    total_byte_ += written_bytes;
 8000838:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800083c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000840:	4413      	add	r3, r2
 8000842:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "parameter2 : 5\r\n");
 8000846:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800084a:	493f      	ldr	r1, [pc, #252]	; (8000948 <FatFsTest+0x288>)
 800084c:	4618      	mov	r0, r3
 800084e:	f01f fa1b 	bl	801fc88 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 8000852:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fd42 	bl	80002e0 <strlen>
 800085c:	4602      	mov	r2, r0
 800085e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000862:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000866:	4832      	ldr	r0, [pc, #200]	; (8000930 <FatFsTest+0x270>)
 8000868:	f00c ff1f 	bl	800d6aa <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 800086c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000870:	4619      	mov	r1, r3
 8000872:	4831      	ldr	r0, [pc, #196]	; (8000938 <FatFsTest+0x278>)
 8000874:	f01f f8c2 	bl	801f9fc <iprintf>

    total_byte_ += written_bytes;
 8000878:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800087c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000880:	4413      	add	r3, r2
 8000882:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    printf("total %d bytes written.\r\n", total_byte_);
 8000886:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800088a:	4830      	ldr	r0, [pc, #192]	; (800094c <FatFsTest+0x28c>)
 800088c:	f01f f8b6 	bl	801f9fc <iprintf>

    f_close(&SDFile);
 8000890:	4827      	ldr	r0, [pc, #156]	; (8000930 <FatFsTest+0x270>)
 8000892:	f00d f8f1 	bl	800da78 <f_close>

    res = f_open(&SDFile, (const char*)filename, FA_READ);
 8000896:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800089a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800089e:	2201      	movs	r2, #1
 80008a0:	6819      	ldr	r1, [r3, #0]
 80008a2:	4823      	ldr	r0, [pc, #140]	; (8000930 <FatFsTest+0x270>)
 80008a4:	f00c fc46 	bl	800d134 <f_open>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    if(res == FR_OK)
 80008ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d123      	bne.n	80008fe <FatFsTest+0x23e>
    {
        printf("\r\n---------------Reading Start-----------------\r\n");
 80008b6:	4826      	ldr	r0, [pc, #152]	; (8000950 <FatFsTest+0x290>)
 80008b8:	f01f f926 	bl	801fb08 <puts>
        res = f_read(&SDFile, readbuf, sizeof(readbuf), (unsigned int*)&read_bytes);
 80008bc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80008c0:	f107 0108 	add.w	r1, r7, #8
 80008c4:	22c8      	movs	r2, #200	; 0xc8
 80008c6:	481a      	ldr	r0, [pc, #104]	; (8000930 <FatFsTest+0x270>)
 80008c8:	f00c fdbc 	bl	800d444 <f_read>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

        if(res == FR_OK && read_bytes > 0) printf("%s",readbuf);
 80008d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d109      	bne.n	80008ee <FatFsTest+0x22e>
 80008da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d005      	beq.n	80008ee <FatFsTest+0x22e>
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	481a      	ldr	r0, [pc, #104]	; (8000954 <FatFsTest+0x294>)
 80008ea:	f01f f887 	bl	801f9fc <iprintf>

        printf("\r\n---------------Reading End-----------------\r\n");
 80008ee:	481a      	ldr	r0, [pc, #104]	; (8000958 <FatFsTest+0x298>)
 80008f0:	f01f f90a 	bl	801fb08 <puts>

        printf("total read bytes : %d\r\n", total_byte_);
 80008f4:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80008f8:	4818      	ldr	r0, [pc, #96]	; (800095c <FatFsTest+0x29c>)
 80008fa:	f01f f87f 	bl	801f9fc <iprintf>
    }



    f_close(&SDFile);
 80008fe:	480c      	ldr	r0, [pc, #48]	; (8000930 <FatFsTest+0x270>)
 8000900:	f00d f8ba 	bl	800da78 <f_close>

    printf("SD card Writing is successfully complete!\n");
 8000904:	4816      	ldr	r0, [pc, #88]	; (8000960 <FatFsTest+0x2a0>)
 8000906:	f01f f8ff 	bl	801fb08 <puts>
 800090a:	e007      	b.n	800091c <FatFsTest+0x25c>
  }else{
  	printf("[ERROR] f_open failed (%d)\r\n", (int)res);
 800090c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000910:	4619      	mov	r1, r3
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <FatFsTest+0x2a4>)
 8000914:	f01f f872 	bl	801f9fc <iprintf>
 8000918:	e000      	b.n	800091c <FatFsTest+0x25c>
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK) return;
 800091a:	bf00      	nop
  }
}
 800091c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	08020680 	.word	0x08020680
 8000928:	24000650 	.word	0x24000650
 800092c:	240001f8 	.word	0x240001f8
 8000930:	24000428 	.word	0x24000428
 8000934:	080206ac 	.word	0x080206ac
 8000938:	080206b4 	.word	0x080206b4
 800093c:	080206cc 	.word	0x080206cc
 8000940:	080206dc 	.word	0x080206dc
 8000944:	080206ec 	.word	0x080206ec
 8000948:	08020700 	.word	0x08020700
 800094c:	08020714 	.word	0x08020714
 8000950:	08020730 	.word	0x08020730
 8000954:	08020764 	.word	0x08020764
 8000958:	08020768 	.word	0x08020768
 800095c:	08020798 	.word	0x08020798
 8000960:	080207b0 	.word	0x080207b0
 8000964:	080207dc 	.word	0x080207dc

08000968 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000990:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000996:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	24000858 	.word	0x24000858
 80009b0:	2400090c 	.word	0x2400090c

080009b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d009      	beq.n	80009e0 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80009d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <ITM_SendChar+0x2c>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <ITM_SendChar+0x2e>
 80009e0:	2300      	movs	r3, #0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d010      	beq.n	8000a08 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <ITM_SendChar+0x4a>
    {
      __NOP();
 80009fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009fc:	e7f3      	b.n	80009e6 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <_write>:
extern "C"{
#endif


int _write(int file, char *ptr, int len)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	da0a      	bge.n	8000a44 <_write+0x2e>
  {
	  ITM_SendChar(*ptr++);
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	60ba      	str	r2, [r7, #8]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ffbc 	bl	80009b4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	e7f0      	b.n	8000a26 <_write+0x10>
  }
  return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b5b0      	push	{r4, r5, r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
 // int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a56:	f000 fa8f 	bl	8000f78 <_ZL10MPU_Configv>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a5a:	4b58      	ldr	r3, [pc, #352]	; (8000bbc <main+0x16c>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bf14      	ite	ne
 8000a66:	2301      	movne	r3, #1
 8000a68:	2300      	moveq	r3, #0
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d11b      	bne.n	8000aa8 <main+0x58>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a70:	f3bf 8f4f 	dsb	sy
}
 8000a74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a76:	f3bf 8f6f 	isb	sy
}
 8000a7a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a7c:	4b4f      	ldr	r3, [pc, #316]	; (8000bbc <main+0x16c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8a:	f3bf 8f6f 	isb	sy
}
 8000a8e:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a90:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <main+0x16c>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a49      	ldr	r2, [pc, #292]	; (8000bbc <main+0x16c>)
 8000a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a9c:	f3bf 8f4f 	dsb	sy
}
 8000aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aa2:	f3bf 8f6f 	isb	sy
}
 8000aa6:	e000      	b.n	8000aaa <main+0x5a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000aa8:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000aaa:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <main+0x16c>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	bf14      	ite	ne
 8000ab6:	2301      	movne	r3, #1
 8000ab8:	2300      	moveq	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d144      	bne.n	8000b4a <main+0xfa>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <main+0x16c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
}
 8000acc:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000ace:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <main+0x16c>)
 8000ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	0b5b      	lsrs	r3, r3, #13
 8000ada:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae2:	08db      	lsrs	r3, r3, #3
 8000ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aec:	015a      	lsls	r2, r3, #5
 8000aee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000af2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000af8:	4930      	ldr	r1, [pc, #192]	; (8000bbc <main+0x16c>)
 8000afa:	4313      	orrs	r3, r2
 8000afc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	627a      	str	r2, [r7, #36]	; 0x24
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d000      	beq.n	8000b16 <main+0xc6>
      do {
 8000b14:	e7e9      	b.n	8000aea <main+0x9a>
    } while(sets-- != 0U);
 8000b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b18:	1e5a      	subs	r2, r3, #1
 8000b1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf14      	ite	ne
 8000b20:	2301      	movne	r3, #1
 8000b22:	2300      	moveq	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d000      	beq.n	8000b2c <main+0xdc>
    do {
 8000b2a:	e7d9      	b.n	8000ae0 <main+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2c:	f3bf 8f4f 	dsb	sy
}
 8000b30:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <main+0x16c>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <main+0x16c>)
 8000b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b3e:	f3bf 8f4f 	dsb	sy
}
 8000b42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b44:	f3bf 8f6f 	isb	sy
}
 8000b48:	e000      	b.n	8000b4c <main+0xfc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b4a:	bf00      	nop
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fe36 	bl	80017bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f83c 	bl	8000bcc <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <main+0x170>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <main+0x170>)
 8000b5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <main+0x170>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f002 ff70 	bl	8003a58 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f002 ff86 	bl	8003a8c <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f000 f954 	bl	8000e2c <_ZL12MX_GPIO_Initv>
  MX_MDMA_Init();
 8000b84:	f000 f8e4 	bl	8000d50 <_ZL12MX_MDMA_Initv>
  MX_SDMMC1_SD_Init();
 8000b88:	f000 f8ba 	bl	8000d00 <_ZL17MX_SDMMC1_SD_Initv>
  MX_FATFS_Init();
 8000b8c:	f009 fd64 	bl	800a658 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, StartInitTask, osPriorityNormal, 0, 512);
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <main+0x174>)
 8000b92:	f107 0408 	add.w	r4, r7, #8
 8000b96:	461d      	mov	r5, r3
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00d fd8c 	bl	800e6c8 <osThreadCreate>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <main+0x178>)
 8000bb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bb6:	f00d fd64 	bl	800e682 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <main+0x16a>
 8000bbc:	e000ed00 	.word	0xe000ed00
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	08020808 	.word	0x08020808
 8000bc8:	240011f4 	.word	0x240011f4

08000bcc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09c      	sub	sp, #112	; 0x70
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	224c      	movs	r2, #76	; 0x4c
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f01e fb38 	bl	801f250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2220      	movs	r2, #32
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f01e fb32 	bl	801f250 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bec:	2004      	movs	r0, #4
 8000bee:	f003 fa17 	bl	8004020 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <_Z18SystemClock_Configv+0x128>)
 8000bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfa:	4a3e      	ldr	r2, [pc, #248]	; (8000cf4 <_Z18SystemClock_Configv+0x128>)
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <_Z18SystemClock_Configv+0x128>)
 8000c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <_Z18SystemClock_Configv+0x12c>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a39      	ldr	r2, [pc, #228]	; (8000cf8 <_Z18SystemClock_Configv+0x12c>)
 8000c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <_Z18SystemClock_Configv+0x12c>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <_Z18SystemClock_Configv+0x12c>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c30:	bf14      	ite	ne
 8000c32:	2301      	movne	r3, #1
 8000c34:	2300      	moveq	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d000      	beq.n	8000c3e <_Z18SystemClock_Configv+0x72>
 8000c3c:	e7f2      	b.n	8000c24 <_Z18SystemClock_Configv+0x58>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <_Z18SystemClock_Configv+0x130>)
 8000c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c42:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <_Z18SystemClock_Configv+0x130>)
 8000c44:	f023 0303 	bic.w	r3, r3, #3
 8000c48:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c4a:	230a      	movs	r3, #10
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c52:	2340      	movs	r3, #64	; 0x40
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c56:	2301      	movs	r3, #1
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c62:	2304      	movs	r3, #4
 8000c64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000c66:	2332      	movs	r3, #50	; 0x32
 8000c68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c76:	230c      	movs	r3, #12
 8000c78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 fa24 	bl	80040d4 <HAL_RCC_OscConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bf14      	ite	ne
 8000c92:	2301      	movne	r3, #1
 8000c94:	2300      	moveq	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000c9c:	f000 f9d0 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	233f      	movs	r3, #63	; 0x3f
 8000ca2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cac:	2308      	movs	r3, #8
 8000cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cb0:	2340      	movs	r3, #64	; 0x40
 8000cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cbe:	2340      	movs	r3, #64	; 0x40
 8000cc0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 fe5e 	bl	8004988 <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 8000cdc:	f000 f9b0 	bl	8001040 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000ce0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f004 f804 	bl	8004cf4 <HAL_RCC_MCOConfig>
}
 8000cec:	bf00      	nop
 8000cee:	3770      	adds	r7, #112	; 0x70
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	58000400 	.word	0x58000400
 8000cf8:	58024800 	.word	0x58024800
 8000cfc:	58024400 	.word	0x58024400

08000d00 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8000d08:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d1c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d2c:	f006 ff8c 	bl	8007c48 <HAL_SD_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf14      	ite	ne
 8000d36:	2301      	movne	r3, #1
 8000d38:	2300      	moveq	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <_ZL17MX_SDMMC1_SD_Initv+0x44>
  {
    Error_Handler();
 8000d40:	f000 f97e 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2400110c 	.word	0x2400110c
 8000d4c:	52007000 	.word	0x52007000

08000d50 <_ZL12MX_MDMA_Initv>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000d56:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <_ZL12MX_MDMA_Initv+0xd0>)
 8000d58:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d5c:	4a30      	ldr	r2, [pc, #192]	; (8000e20 <_ZL12MX_MDMA_Initv+0xd0>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d66:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <_ZL12MX_MDMA_Initv+0xd0>)
 8000d68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000d76:	4a2c      	ldr	r2, [pc, #176]	; (8000e28 <_ZL12MX_MDMA_Initv+0xd8>)
 8000d78:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000d7c:	221d      	movs	r2, #29
 8000d7e:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000d8c:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000d94:	2202      	movs	r2, #2
 8000d96:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000dd0:	4814      	ldr	r0, [pc, #80]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000dd2:	f002 fe9b 	bl	8003b0c <HAL_MDMA_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bf14      	ite	ne
 8000ddc:	2301      	movne	r3, #1
 8000dde:	2300      	moveq	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <_ZL12MX_MDMA_Initv+0x9a>
  {
    Error_Handler();
 8000de6:	f000 f92b 	bl	8001040 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <_ZL12MX_MDMA_Initv+0xd4>)
 8000df0:	f002 fed8 	bl	8003ba4 <HAL_MDMA_ConfigPostRequestMask>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf14      	ite	ne
 8000dfa:	2301      	movne	r3, #1
 8000dfc:	2300      	moveq	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <_ZL12MX_MDMA_Initv+0xb8>
  {
    Error_Handler();
 8000e04:	f000 f91c 	bl	8001040 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	207a      	movs	r0, #122	; 0x7a
 8000e0e:	f000 fe2d 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e12:	207a      	movs	r0, #122	; 0x7a
 8000e14:	f000 fe44 	bl	8001aa0 <HAL_NVIC_EnableIRQ>

}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	58024400 	.word	0x58024400
 8000e24:	24001188 	.word	0x24001188
 8000e28:	52000040 	.word	0x52000040

08000e2c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	4b3e      	ldr	r3, [pc, #248]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	4a3c      	ldr	r2, [pc, #240]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e52:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	4a35      	ldr	r2, [pc, #212]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e70:	4b32      	ldr	r3, [pc, #200]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	4a2d      	ldr	r2, [pc, #180]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eac:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <_ZL12MX_GPIO_Initv+0x110>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <_ZL12MX_GPIO_Initv+0x114>)
 8000f0c:	f002 fbdc 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <_ZL12MX_GPIO_Initv+0x118>)
 8000f2e:	f002 fbcb 	bl	80036c8 <HAL_GPIO_Init>

}
 8000f32:	bf00      	nop
 8000f34:	3730      	adds	r7, #48	; 0x30
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58022000 	.word	0x58022000
 8000f44:	58020000 	.word	0x58020000

08000f48 <_Z13StartInitTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void const * argument)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	  /* init code for LWIP */
	  MX_LWIP_Init();
 8000f50:	f009 fe4c 	bl	800abec <MX_LWIP_Init>
	  /* USER CODE BEGIN 5 */

	  TcpServerInit();
 8000f54:	f7ff fb4c 	bl	80005f0 <TcpServerInit>

	  printf("Hello World!\n");
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <_Z13StartInitTaskPKv+0x28>)
 8000f5a:	f01e fdd5 	bl	801fb08 <puts>

	  FatFsInit();
 8000f5e:	f7ff fb81 	bl	8000664 <FatFsInit>

	  FatFsTest("test.txt");
 8000f62:	4804      	ldr	r0, [pc, #16]	; (8000f74 <_Z13StartInitTaskPKv+0x2c>)
 8000f64:	f7ff fbac 	bl	80006c0 <FatFsTest>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f00d fbf9 	bl	800e760 <osDelay>
 8000f6e:	e7fb      	b.n	8000f68 <_Z13StartInitTaskPKv+0x20>
 8000f70:	08020824 	.word	0x08020824
 8000f74:	08020834 	.word	0x08020834

08000f78 <_ZL10MPU_Configv>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f8a:	f000 fd97 	bl	8001abc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f9a:	231f      	movs	r3, #31
 8000f9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f9e:	2387      	movs	r3, #135	; 0x87
 8000fa0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000faa:	2301      	movs	r3, #1
 8000fac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fdb5 	bl	8001b2c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_ZL10MPU_Configv+0x9c>)
 8000fc8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000fca:	2310      	movs	r3, #16
 8000fcc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fda3 	bl	8001b2c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <_ZL10MPU_Configv+0xa0>)
 8000fec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ffe:	463b      	mov	r3, r7
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fd93 	bl	8001b2c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001006:	2004      	movs	r0, #4
 8001008:	f000 fd70 	bl	8001aec <HAL_MPU_Enable>

}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	30020000 	.word	0x30020000
 8001018:	30040000 	.word	0x30040000

0800101c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800102e:	f000 fc01 	bl	8001834 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40001000 	.word	0x40001000

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	e7fe      	b.n	8001048 <Error_Handler+0x8>
	...

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_MspInit+0x48>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_MspInit+0x48>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_MspInit+0x48>)
 8001064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	210f      	movs	r1, #15
 8001074:	f06f 0001 	mvn.w	r0, #1
 8001078:	f000 fcf8 	bl	8001a6c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2105      	movs	r1, #5
 8001080:	207d      	movs	r0, #125	; 0x7d
 8001082:	f000 fcf3 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001086:	207d      	movs	r0, #125	; 0x7d
 8001088:	f000 fd0a 	bl	8001aa0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	58024400 	.word	0x58024400

08001098 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0be      	sub	sp, #248	; 0xf8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	22c8      	movs	r2, #200	; 0xc8
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f01e f8c9 	bl	801f250 <memset>
  if(hsd->Instance==SDMMC1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a46      	ldr	r2, [pc, #280]	; (80011dc <HAL_SD_MspInit+0x144>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	f040 8084 	bne.w	80011d2 <HAL_SD_MspInit+0x13a>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80010ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80010d6:	2304      	movs	r3, #4
 80010d8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80010da:	2309      	movs	r3, #9
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80010de:	2302      	movs	r3, #2
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010ea:	23c0      	movs	r3, #192	; 0xc0
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80010ee:	2320      	movs	r3, #32
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80010f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80010f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	4618      	mov	r0, r3
 8001104:	f004 f862 	bl	80051cc <HAL_RCCEx_PeriphCLKConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_SD_MspInit+0x7a>
    {
      Error_Handler();
 800110e:	f7ff ff97 	bl	8001040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_SD_MspInit+0x148>)
 8001114:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001118:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <HAL_SD_MspInit+0x148>)
 800111a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <HAL_SD_MspInit+0x148>)
 8001124:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001130:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <HAL_SD_MspInit+0x148>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	4a2a      	ldr	r2, [pc, #168]	; (80011e0 <HAL_SD_MspInit+0x148>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <HAL_SD_MspInit+0x148>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_SD_MspInit+0x148>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_SD_MspInit+0x148>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_SD_MspInit+0x148>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|GPIO_PIN_11|SDIO1_CK_Pin|SDIO1_D0_Pin
 800116c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001170:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001186:	230c      	movs	r3, #12
 8001188:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001190:	4619      	mov	r1, r3
 8001192:	4814      	ldr	r0, [pc, #80]	; (80011e4 <HAL_SD_MspInit+0x14c>)
 8001194:	f002 fa98 	bl	80036c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001198:	2304      	movs	r3, #4
 800119a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011b0:	230c      	movs	r3, #12
 80011b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011ba:	4619      	mov	r1, r3
 80011bc:	480a      	ldr	r0, [pc, #40]	; (80011e8 <HAL_SD_MspInit+0x150>)
 80011be:	f002 fa83 	bl	80036c8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2105      	movs	r1, #5
 80011c6:	2031      	movs	r0, #49	; 0x31
 80011c8:	f000 fc50 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011cc:	2031      	movs	r0, #49	; 0x31
 80011ce:	f000 fc67 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	37f8      	adds	r7, #248	; 0xf8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	52007000 	.word	0x52007000
 80011e0:	58024400 	.word	0x58024400
 80011e4:	58020800 	.word	0x58020800
 80011e8:	58020c00 	.word	0x58020c00

080011ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b090      	sub	sp, #64	; 0x40
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	d827      	bhi.n	800124a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80011fa:	2200      	movs	r2, #0
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	2036      	movs	r0, #54	; 0x36
 8001200:	f000 fc34 	bl	8001a6c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001204:	2036      	movs	r0, #54	; 0x36
 8001206:	f000 fc4b 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800120a:	4a29      	ldr	r2, [pc, #164]	; (80012b0 <HAL_InitTick+0xc4>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_InitTick+0xc8>)
 8001212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001216:	4a27      	ldr	r2, [pc, #156]	; (80012b4 <HAL_InitTick+0xc8>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_InitTick+0xc8>)
 8001222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800122e:	f107 0210 	add.w	r2, r7, #16
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f003 ff85 	bl	8005148 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001240:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001244:	2b00      	cmp	r3, #0
 8001246:	d106      	bne.n	8001256 <HAL_InitTick+0x6a>
 8001248:	e001      	b.n	800124e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e02b      	b.n	80012a6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800124e:	f003 ff65 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 8001252:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001254:	e004      	b.n	8001260 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001256:	f003 ff61 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 800125a:	4603      	mov	r3, r0
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001262:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <HAL_InitTick+0xcc>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	0c9b      	lsrs	r3, r3, #18
 800126a:	3b01      	subs	r3, #1
 800126c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_InitTick+0xd0>)
 8001270:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <HAL_InitTick+0xd4>)
 8001272:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_InitTick+0xd0>)
 8001276:	f240 32e7 	movw	r2, #999	; 0x3e7
 800127a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800127c:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <HAL_InitTick+0xd0>)
 800127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001280:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_InitTick+0xd0>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_InitTick+0xd0>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <HAL_InitTick+0xd0>)
 8001290:	f008 f93e 	bl	8009510 <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d104      	bne.n	80012a4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800129a:	4808      	ldr	r0, [pc, #32]	; (80012bc <HAL_InitTick+0xd0>)
 800129c:	f008 f99a 	bl	80095d4 <HAL_TIM_Base_Start_IT>
 80012a0:	4603      	mov	r3, r0
 80012a2:	e000      	b.n	80012a6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3740      	adds	r7, #64	; 0x40
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24000008 	.word	0x24000008
 80012b4:	58024400 	.word	0x58024400
 80012b8:	431bde83 	.word	0x431bde83
 80012bc:	240011f8 	.word	0x240011f8
 80012c0:	40001000 	.word	0x40001000

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <SDMMC1_IRQHandler+0x10>)
 80012f6:	f006 ff17 	bl	8008128 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2400110c 	.word	0x2400110c

08001304 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <TIM6_DAC_IRQHandler+0x10>)
 800130a:	f008 f9db 	bl	80096c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	240011f8 	.word	0x240011f8

08001318 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <ETH_IRQHandler+0x10>)
 800131e:	f001 f821 	bl	8002364 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	240012ac 	.word	0x240012ac

0800132c <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <MDMA_IRQHandler+0x10>)
 8001332:	f002 fc89 	bl	8003c48 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	24001188 	.word	0x24001188

08001340 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001344:	f002 fbc8 	bl	8003ad8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return 1;
 8001350:	2301      	movs	r3, #1
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_kill>:

int _kill(int pid, int sig)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <_kill+0x20>)
 8001368:	2216      	movs	r2, #22
 800136a:	601a      	str	r2, [r3, #0]
  return -1;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	2400f9a0 	.word	0x2400f9a0

08001380 <_exit>:

void _exit (int status)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001388:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ffe5 	bl	800135c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001392:	e7fe      	b.n	8001392 <_exit+0x12>

08001394 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e00a      	b.n	80013bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a6:	f3af 8000 	nop.w
 80013aa:	4601      	mov	r1, r0
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	b2ca      	uxtb	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf0      	blt.n	80013a6 <_read+0x12>
  }

  return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f6:	605a      	str	r2, [r3, #4]
  return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_isatty>:

int _isatty(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <_sbrk+0x5c>)
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <_sbrk+0x60>)
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <_sbrk+0x64>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <_sbrk+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d205      	bcs.n	8001474 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <_sbrk+0x6c>)
 800146a:	220c      	movs	r2, #12
 800146c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001472:	e009      	b.n	8001488 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a06      	ldr	r2, [pc, #24]	; (800149c <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	24080000 	.word	0x24080000
 8001498:	00000800 	.word	0x00000800
 800149c:	24001244 	.word	0x24001244
 80014a0:	2400f9a8 	.word	0x2400f9a8
 80014a4:	2400f9a0 	.word	0x2400f9a0

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014ac:	f7fe ff70 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	; (80014f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f01d fe53 	bl	801f180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff fab9 	bl	8000a50 <main>
  bx  lr
 80014de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014e8:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 80014ec:	08024584 	.word	0x08024584
  ldr r2, =_sbss
 80014f0:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 80014f4:	2400f9a4 	.word	0x2400f9a4

080014f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC3_IRQHandler>

080014fa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00b      	beq.n	8001522 <LAN8742_RegisterBusIO+0x28>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <LAN8742_RegisterBusIO+0x28>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <LAN8742_RegisterBusIO+0x28>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001526:	e014      	b.n	8001552 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d17c      	bne.n	8001678 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2220      	movs	r2, #32
 8001590:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e01c      	b.n	80015d2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f107 0208 	add.w	r2, r7, #8
 80015a0:	2112      	movs	r1, #18
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	4798      	blx	r3
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	da03      	bge.n	80015b4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80015ac:	f06f 0304 	mvn.w	r3, #4
 80015b0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80015b2:	e00b      	b.n	80015cc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d105      	bne.n	80015cc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
         break;
 80015ca:	e005      	b.n	80015d8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2b1f      	cmp	r3, #31
 80015d6:	d9df      	bls.n	8001598 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b1f      	cmp	r3, #31
 80015de:	d902      	bls.n	80015e6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80015e0:	f06f 0302 	mvn.w	r3, #2
 80015e4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d145      	bne.n	8001678 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6810      	ldr	r0, [r2, #0]
 80015f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015f8:	2100      	movs	r1, #0
 80015fa:	4798      	blx	r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db37      	blt.n	8001672 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6810      	ldr	r0, [r2, #0]
 800160a:	f107 0208 	add.w	r2, r7, #8
 800160e:	2100      	movs	r1, #0
 8001610:	4798      	blx	r3
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	db28      	blt.n	800166a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4798      	blx	r3
 800161e:	4603      	mov	r3, r0
 8001620:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001622:	e01c      	b.n	800165e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4798      	blx	r3
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001636:	d80e      	bhi.n	8001656 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6810      	ldr	r0, [r2, #0]
 8001640:	f107 0208 	add.w	r2, r7, #8
 8001644:	2100      	movs	r1, #0
 8001646:	4798      	blx	r3
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	da07      	bge.n	800165e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800164e:	f06f 0304 	mvn.w	r3, #4
 8001652:	613b      	str	r3, [r7, #16]
                 break;
 8001654:	e010      	b.n	8001678 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001656:	f06f 0301 	mvn.w	r3, #1
 800165a:	613b      	str	r3, [r7, #16]
               break;
 800165c:	e00c      	b.n	8001678 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1dd      	bne.n	8001624 <LAN8742_Init+0xc6>
 8001668:	e006      	b.n	8001678 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800166a:	f06f 0304 	mvn.w	r3, #4
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	e002      	b.n	8001678 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001672:	f06f 0303 	mvn.w	r3, #3
 8001676:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d112      	bne.n	80016a4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	4798      	blx	r3
 8001684:	4603      	mov	r3, r0
 8001686:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001688:	bf00      	nop
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4798      	blx	r3
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800169c:	d9f5      	bls.n	800168a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80016a4:	693b      	ldr	r3, [r7, #16]
 }
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6810      	ldr	r0, [r2, #0]
 80016c2:	f107 020c 	add.w	r2, r7, #12
 80016c6:	2101      	movs	r1, #1
 80016c8:	4798      	blx	r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da02      	bge.n	80016d6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016d0:	f06f 0304 	mvn.w	r3, #4
 80016d4:	e06e      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6810      	ldr	r0, [r2, #0]
 80016de:	f107 020c 	add.w	r2, r7, #12
 80016e2:	2101      	movs	r1, #1
 80016e4:	4798      	blx	r3
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da02      	bge.n	80016f2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016ec:	f06f 0304 	mvn.w	r3, #4
 80016f0:	e060      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80016fc:	2301      	movs	r3, #1
 80016fe:	e059      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6810      	ldr	r0, [r2, #0]
 8001708:	f107 020c 	add.w	r2, r7, #12
 800170c:	2100      	movs	r1, #0
 800170e:	4798      	blx	r3
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	da02      	bge.n	800171c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001716:	f06f 0304 	mvn.w	r3, #4
 800171a:	e04b      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d11b      	bne.n	800175e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <LAN8742_GetLinkState+0x90>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800173a:	2302      	movs	r3, #2
 800173c:	e03a      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001748:	2303      	movs	r3, #3
 800174a:	e033      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001756:	2304      	movs	r3, #4
 8001758:	e02c      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800175a:	2305      	movs	r3, #5
 800175c:	e02a      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6810      	ldr	r0, [r2, #0]
 8001766:	f107 020c 	add.w	r2, r7, #12
 800176a:	211f      	movs	r1, #31
 800176c:	4798      	blx	r3
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	da02      	bge.n	800177a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001774:	f06f 0304 	mvn.w	r3, #4
 8001778:	e01c      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001784:	2306      	movs	r3, #6
 8001786:	e015      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 031c 	and.w	r3, r3, #28
 800178e:	2b18      	cmp	r3, #24
 8001790:	d101      	bne.n	8001796 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001792:	2302      	movs	r3, #2
 8001794:	e00e      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f003 031c 	and.w	r3, r3, #28
 800179c:	2b08      	cmp	r3, #8
 800179e:	d101      	bne.n	80017a4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e007      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 031c 	and.w	r3, r3, #28
 80017aa:	2b14      	cmp	r3, #20
 80017ac:	d101      	bne.n	80017b2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017ae:	2304      	movs	r3, #4
 80017b0:	e000      	b.n	80017b4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017b2:	2305      	movs	r3, #5
    }				
  }
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c2:	2003      	movs	r0, #3
 80017c4:	f000 f947 	bl	8001a56 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017c8:	f003 fafe 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_Init+0x68>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	4913      	ldr	r1, [pc, #76]	; (8001828 <HAL_Init+0x6c>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_Init+0x68>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <HAL_Init+0x6c>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_Init+0x70>)
 80017fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_Init+0x74>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001806:	200f      	movs	r0, #15
 8001808:	f7ff fcf0 	bl	80011ec <HAL_InitTick>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e002      	b.n	800181c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001816:	f7ff fc19 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	58024400 	.word	0x58024400
 8001828:	080242a4 	.word	0x080242a4
 800182c:	24000004 	.word	0x24000004
 8001830:	24000000 	.word	0x24000000

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	2400000c 	.word	0x2400000c
 8001858:	24001248 	.word	0x24001248

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	24001248 	.word	0x24001248

08001874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800187c:	f7ff ffee 	bl	800185c <HAL_GetTick>
 8001880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800188c:	d005      	beq.n	800189a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_Delay+0x44>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800189a:	bf00      	nop
 800189c:	f7ff ffde 	bl	800185c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d8f7      	bhi.n	800189c <HAL_Delay+0x28>
  {
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2400000c 	.word	0x2400000c

080018bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_GetREVID+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0c1b      	lsrs	r3, r3, #16
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	5c001000 	.word	0x5c001000

080018d4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80018e4:	4904      	ldr	r1, [pc, #16]	; (80018f8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	58000400 	.word	0x58000400

080018fc <__NVIC_SetPriorityGrouping>:
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <__NVIC_SetPriorityGrouping+0x40>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	4313      	orrs	r3, r2
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x40>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00
 8001940:	05fa0000 	.word	0x05fa0000

08001944 <__NVIC_GetPriorityGrouping>:
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff4c 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7a:	f7ff ff63 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001a7e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	6978      	ldr	r0, [r7, #20]
 8001a86:	f7ff ffb3 	bl	80019f0 <NVIC_EncodePriority>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff82 	bl	800199c <__NVIC_SetPriority>
}
 8001a98:	bf00      	nop
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff56 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ac0:	f3bf 8f5f 	dmb	sy
}
 8001ac4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_MPU_Disable+0x28>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_MPU_Disable+0x28>)
 8001acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_MPU_Disable+0x2c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00
 8001ae8:	e000ed90 	.word	0xe000ed90

08001aec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001af4:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <HAL_MPU_Enable+0x38>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_MPU_Enable+0x3c>)
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_MPU_Enable+0x3c>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed90 	.word	0xe000ed90
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	785a      	ldrb	r2, [r3, #1]
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_MPU_ConfigRegion+0x84>)
 8001b3a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d029      	beq.n	8001b98 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001b44:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_MPU_ConfigRegion+0x84>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7b1b      	ldrb	r3, [r3, #12]
 8001b50:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7adb      	ldrb	r3, [r3, #11]
 8001b56:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7a9b      	ldrb	r3, [r3, #10]
 8001b5e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7b5b      	ldrb	r3, [r3, #13]
 8001b66:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7b9b      	ldrb	r3, [r3, #14]
 8001b6e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7bdb      	ldrb	r3, [r3, #15]
 8001b76:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7a5b      	ldrb	r3, [r3, #9]
 8001b7e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7a1b      	ldrb	r3, [r3, #8]
 8001b86:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b88:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b90:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b92:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b94:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001b96:	e005      	b.n	8001ba4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_MPU_ConfigRegion+0x84>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <HAL_MPU_ConfigRegion+0x84>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed90 	.word	0xe000ed90

08001bb4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <HAL_GetCurrentCPUID+0x24>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	2b07      	cmp	r3, #7
 8001bc4:	d101      	bne.n	8001bca <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e000      	b.n	8001bcc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001bca:	2301      	movs	r3, #1
  }
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0cf      	b.n	8001d8e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d106      	bne.n	8001c06 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2223      	movs	r2, #35	; 0x23
 8001bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f009 fc65 	bl	800b4d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	4b64      	ldr	r3, [pc, #400]	; (8001d98 <HAL_ETH_Init+0x1bc>)
 8001c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c0c:	4a62      	ldr	r2, [pc, #392]	; (8001d98 <HAL_ETH_Init+0x1bc>)
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c16:	4b60      	ldr	r3, [pc, #384]	; (8001d98 <HAL_ETH_Init+0x1bc>)
 8001c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7a1b      	ldrb	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d103      	bne.n	8001c34 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff fe51 	bl	80018d4 <HAL_SYSCFG_ETHInterfaceSelect>
 8001c32:	e003      	b.n	8001c3c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c38:	f7ff fe4c 	bl	80018d4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001c3c:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_ETH_Init+0x1c0>)
 8001c3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c58:	f7ff fe00 	bl	800185c <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c5e:	e011      	b.n	8001c84 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c60:	f7ff fdfc 	bl	800185c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c6e:	d909      	bls.n	8001c84 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2204      	movs	r2, #4
 8001c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	22e0      	movs	r2, #224	; 0xe0
 8001c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e084      	b.n	8001d8e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1e4      	bne.n	8001c60 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 ff3c 	bl	8002b14 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001c9c:	f003 fa0e 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a3f      	ldr	r2, [pc, #252]	; (8001da0 <HAL_ETH_Init+0x1c4>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	0c9a      	lsrs	r2, r3, #18
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3a01      	subs	r2, #1
 8001cb0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f001 f935 	bl	8002f24 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001cc6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cd6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	22e0      	movs	r2, #224	; 0xe0
 8001cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e049      	b.n	8001d8e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d02:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_ETH_Init+0x1c8>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6952      	ldr	r2, [r2, #20]
 8001d0e:	0051      	lsls	r1, r2, #1
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d1a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f001 f99d 	bl	800305e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f001 f9e3 	bl	80030f0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	3305      	adds	r3, #5
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	021a      	lsls	r2, r3, #8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	3303      	adds	r3, #3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	061a      	lsls	r2, r3, #24
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	3302      	adds	r3, #2
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	3301      	adds	r3, #1
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d68:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d76:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2210      	movs	r2, #16
 8001d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	58024400 	.word	0x58024400
 8001d9c:	58000400 	.word	0x58000400
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	ffff8001 	.word	0xffff8001

08001da8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d179      	bne.n	8001eae <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2223      	movs	r2, #35	; 0x23
 8001dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_ETH_Start_IT+0x110>)
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <HAL_ETH_Start_IT+0x114>)
 8001dea:	430b      	orrs	r3, r1
 8001dec:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2204      	movs	r2, #4
 8001df4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f9eb 	bl	80021d2 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0202 	orr.w	r2, r2, #2
 8001e0a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e38:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e48:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e64:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e70:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001e7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e80:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8c:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e9e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2223      	movs	r2, #35	; 0x23
 8001ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e000      	b.n	8001eb0 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
  }
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	0c020060 	.word	0x0c020060
 8001ebc:	0c20c000 	.word	0x0c20c000

08001ec0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ece:	2b23      	cmp	r3, #35	; 0x23
 8001ed0:	d165      	bne.n	8001f9e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2223      	movs	r2, #35	; 0x23
 8001ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee2:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_ETH_Stop_IT+0xec>)
 8001eec:	400b      	ands	r3, r1
 8001eee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ef2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001efe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f0e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f2a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0202 	bic.w	r2, r2, #2
 8001f60:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	e00e      	b.n	8001f86 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	3212      	adds	r2, #18
 8001f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f72:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3301      	adds	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d9ed      	bls.n	8001f68 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2210      	movs	r2, #16
 8001f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e000      	b.n	8001fa0 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
  }
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	ffff2f3e 	.word	0xffff2f3e

08001fb0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e03a      	b.n	800204a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fda:	2b23      	cmp	r3, #35	; 0x23
 8001fdc:	d134      	bne.n	8002048 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f001 f8de 	bl	80031ac <ETH_Prepare_Tx_Descriptors>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	f043 0202 	orr.w	r2, r3, #2
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e01f      	b.n	800204a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 800200a:	f3bf 8f4f 	dsb	sy
}
 800200e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	2b03      	cmp	r3, #3
 8002020:	d904      	bls.n	800202c <HAL_ETH_Transmit_IT+0x7c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	1f1a      	subs	r2, r3, #4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3106      	adds	r1, #6
 8002038:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800203c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002040:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	e000      	b.n	800204a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
  }
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b088      	sub	sp, #32
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0a5      	b.n	80021ca <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002084:	2b23      	cmp	r3, #35	; 0x23
 8002086:	d001      	beq.n	800208c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e09e      	b.n	80021ca <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	3212      	adds	r2, #18
 8002098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a2:	f1c3 0304 	rsb	r3, r3, #4
 80020a6:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020a8:	e067      	b.n	800217a <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d103      	bne.n	80020da <HAL_ETH_ReadData+0x88>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d03d      	beq.n	8002156 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002130:	461a      	mov	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	b29b      	uxth	r3, r3
 8002136:	f009 fafd 	bl	800b734 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	441a      	add	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d902      	bls.n	8002168 <HAL_ETH_ReadData+0x116>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b04      	subs	r3, #4
 8002166:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	3212      	adds	r2, #18
 800216e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002172:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	db06      	blt.n	8002190 <HAL_ETH_ReadData+0x13e>
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	429a      	cmp	r2, r3
 8002188:	d202      	bcs.n	8002190 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d08c      	beq.n	80020aa <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	441a      	add	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f814 	bl	80021d2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d108      	bne.n	80021c8 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b088      	sub	sp, #32
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80021de:	2301      	movs	r3, #1
 80021e0:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021e6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	3212      	adds	r2, #18
 80021ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f2:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f8:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80021fa:	e03b      	b.n	8002274 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d112      	bne.n	800222a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	4618      	mov	r0, r3
 800220a:	f009 fa63 	bl	800b6d4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	74fb      	strb	r3, [r7, #19]
 8002218:	e007      	b.n	800222a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	461a      	mov	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	461a      	mov	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d021      	beq.n	8002274 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002230:	f3bf 8f5f 	dmb	sy
}
 8002234:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	e003      	b.n	8002250 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800224e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3301      	adds	r3, #1
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d902      	bls.n	8002262 <ETH_UpdateDescriptor+0x90>
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	3b04      	subs	r3, #4
 8002260:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	3212      	adds	r2, #18
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	617b      	str	r3, [r7, #20]
      desccount--;
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	3b01      	subs	r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <ETH_UpdateDescriptor+0xae>
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1bd      	bne.n	80021fc <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	429a      	cmp	r2, r3
 8002288:	d00d      	beq.n	80022a6 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002292:	461a      	mov	r2, r3
 8002294:	2300      	movs	r3, #0
 8002296:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80022a6:	bf00      	nop
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3318      	adds	r3, #24
 80022ba:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80022cc:	e03f      	b.n	800234e <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	3304      	adds	r3, #4
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d106      	bne.n	80022f6 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80022f6:	7bbb      	ldrb	r3, [r7, #14]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d028      	beq.n	800234e <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68d9      	ldr	r1, [r3, #12]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db1b      	blt.n	800234a <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	3304      	adds	r3, #4
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4618      	mov	r0, r3
 8002320:	f009 fa70 	bl	800b804 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	3304      	adds	r3, #4
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	2200      	movs	r2, #0
 8002330:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3301      	adds	r3, #1
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c
 8002348:	e001      	b.n	800234e <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_ETH_ReleaseTxPacket+0xac>
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1b9      	bne.n	80022ce <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002374:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d115      	bne.n	80023ac <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002388:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d10b      	bne.n	80023ac <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239c:	461a      	mov	r2, r3
 800239e:	f248 0340 	movw	r3, #32832	; 0x8040
 80023a2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f008 fd52 	bl	800ae50 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d115      	bne.n	80023ec <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10b      	bne.n	80023ec <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	461a      	mov	r2, r3
 80023de:	f248 0301 	movw	r3, #32769	; 0x8001
 80023e2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f008 fd42 	bl	800ae70 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80023f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002400:	d153      	bne.n	80024aa <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002416:	d148      	bne.n	80024aa <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f043 0208 	orr.w	r2, r3, #8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002430:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243c:	d11e      	bne.n	800247c <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002446:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800244a:	f241 1302 	movw	r3, #4354	; 0x1102
 800244e:	4013      	ands	r3, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800246a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800246e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	22e0      	movs	r2, #224	; 0xe0
 8002476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800247a:	e013      	b.n	80024a4 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002484:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002488:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249a:	461a      	mov	r2, r3
 800249c:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 80024a0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f008 fcf3 	bl	800ae90 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80024b2:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d104      	bne.n	80024c8 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d019      	beq.n	80024fc <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f043 0210 	orr.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	22e0      	movs	r2, #224	; 0xe0
 80024ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f008 fcce 	bl	800ae90 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b10      	cmp	r3, #16
 800250a:	d10f      	bne.n	800252c <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002514:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f844 	bl	80025ac <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b20      	cmp	r3, #32
 800253a:	d10f      	bne.n	800255c <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f836 	bl	80025c0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800255c:	f7ff fb2a 	bl	8001bb4 <HAL_GetCurrentCPUID>
 8002560:	4603      	mov	r3, r0
 8002562:	2b03      	cmp	r3, #3
 8002564:	d10d      	bne.n	8002582 <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_ETH_IRQHandler+0x240>)
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d014      	beq.n	800259c <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <HAL_ETH_IRQHandler+0x240>)
 8002574:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002578:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f82a 	bl	80025d4 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8002580:	e00c      	b.n	800259c <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_ETH_IRQHandler+0x244>)
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_ETH_IRQHandler+0x244>)
 8002590:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002594:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f81c 	bl	80025d4 <HAL_ETH_WakeUpCallback>
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	58000080 	.word	0x58000080
 80025a8:	580000c0 	.word	0x580000c0

080025ac <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e03e      	b.n	8002688 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002612:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	055b      	lsls	r3, r3, #21
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f043 030c 	orr.w	r3, r3, #12
 8002636:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800264a:	f7ff f907 	bl	800185c <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002650:	e009      	b.n	8002666 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002652:	f7ff f903 	bl	800185c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002660:	d901      	bls.n	8002666 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e010      	b.n	8002688 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ed      	bne.n	8002652 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800267e:	b29b      	uxth	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e03c      	b.n	800272c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026ba:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	055b      	lsls	r3, r3, #21
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	041b      	lsls	r3, r3, #16
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f023 030c 	bic.w	r3, r3, #12
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_ETH_WritePHYRegister+0xa4>)
 80026f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_ETH_WritePHYRegister+0xa4>)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80026fe:	f7ff f8ad 	bl	800185c <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002704:	e009      	b.n	800271a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002706:	f7ff f8a9 	bl	800185c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002714:	d901      	bls.n	800271a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e008      	b.n	800272c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1ed      	bne.n	8002706 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40028000 	.word	0x40028000

08002738 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e1c3      	b.n	8002ad4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	bf0c      	ite	eq
 8002792:	2301      	moveq	r3, #1
 8002794:	2300      	movne	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80027da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bf14      	ite	ne
 80027e2:	2301      	movne	r3, #1
 80027e4:	2300      	moveq	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	bf14      	ite	ne
 8002832:	2301      	movne	r3, #1
 8002834:	2300      	moveq	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf0c      	ite	eq
 8002866:	2301      	moveq	r3, #1
 8002868:	2300      	movne	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002896:	2b00      	cmp	r3, #0
 8002898:	bf14      	ite	ne
 800289a:	2301      	movne	r3, #1
 800289c:	2300      	moveq	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80028c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf14      	ite	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	2300      	moveq	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf0c      	ite	eq
 800292c:	2301      	moveq	r3, #1
 800292e:	2300      	movne	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800295c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	0e5b      	lsrs	r3, r3, #25
 8002996:	f003 021f 	and.w	r2, r3, #31
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 020f 	and.w	r2, r3, #15
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bf14      	ite	ne
 80029d6:	2301      	movne	r3, #1
 80029d8:	2300      	moveq	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002a60:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a70:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bf14      	ite	ne
 8002aa6:	2301      	movne	r3, #1
 8002aa8:	2300      	moveq	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e00b      	b.n	8002b0c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d105      	bne.n	8002b0a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002afe:	6839      	ldr	r1, [r7, #0]
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f86d 	bl	8002be0 <ETH_SetMACConfig>

    return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e000      	b.n	8002b0c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
  }
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b2e:	f002 fac5 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 8002b32:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d908      	bls.n	8002b4e <HAL_ETH_SetMDIOClockRange+0x3a>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d804      	bhi.n	8002b4e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e027      	b.n	8002b9e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d908      	bls.n	8002b68 <HAL_ETH_SetMDIOClockRange+0x54>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4a17      	ldr	r2, [pc, #92]	; (8002bb8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d204      	bcs.n	8002b68 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	e01a      	b.n	8002b9e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d303      	bcc.n	8002b78 <HAL_ETH_SetMDIOClockRange+0x64>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d911      	bls.n	8002b9c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d908      	bls.n	8002b92 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d804      	bhi.n	8002b92 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e005      	b.n	8002b9e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	e000      	b.n	8002b9e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002b9c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	01312cff 	.word	0x01312cff
 8002bb4:	02160ebf 	.word	0x02160ebf
 8002bb8:	03938700 	.word	0x03938700
 8002bbc:	05f5e0ff 	.word	0x05f5e0ff
 8002bc0:	08f0d17f 	.word	0x08f0d17f

08002bc4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002bf2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	791b      	ldrb	r3, [r3, #4]
 8002bf8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002bfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	7b1b      	ldrb	r3, [r3, #12]
 8002c00:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	7b5b      	ldrb	r3, [r3, #13]
 8002c08:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	7b9b      	ldrb	r3, [r3, #14]
 8002c10:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	7bdb      	ldrb	r3, [r3, #15]
 8002c18:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	7c12      	ldrb	r2, [r2, #16]
 8002c20:	2a00      	cmp	r2, #0
 8002c22:	d102      	bne.n	8002c2a <ETH_SetMACConfig+0x4a>
 8002c24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c28:	e000      	b.n	8002c2c <ETH_SetMACConfig+0x4c>
 8002c2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c2c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	7c52      	ldrb	r2, [r2, #17]
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d102      	bne.n	8002c3c <ETH_SetMACConfig+0x5c>
 8002c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c3a:	e000      	b.n	8002c3e <ETH_SetMACConfig+0x5e>
 8002c3c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	7c9b      	ldrb	r3, [r3, #18]
 8002c44:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c46:	431a      	orrs	r2, r3
               macconf->Speed |
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002c4c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002c52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	7f1b      	ldrb	r3, [r3, #28]
 8002c58:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002c5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	7f5b      	ldrb	r3, [r3, #29]
 8002c60:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	7f92      	ldrb	r2, [r2, #30]
 8002c68:	2a00      	cmp	r2, #0
 8002c6a:	d102      	bne.n	8002c72 <ETH_SetMACConfig+0x92>
 8002c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c70:	e000      	b.n	8002c74 <ETH_SetMACConfig+0x94>
 8002c72:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	7fdb      	ldrb	r3, [r3, #31]
 8002c7a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002c7c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c84:	2a00      	cmp	r2, #0
 8002c86:	d102      	bne.n	8002c8e <ETH_SetMACConfig+0xae>
 8002c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c8c:	e000      	b.n	8002c90 <ETH_SetMACConfig+0xb0>
 8002c8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002c90:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002c96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c9e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002ca0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <ETH_SetMACConfig+0x22c>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	68f9      	ldr	r1, [r7, #12]
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ccc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cd4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002cd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002cde:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002ce0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002ce8:	2a00      	cmp	r2, #0
 8002cea:	d102      	bne.n	8002cf2 <ETH_SetMACConfig+0x112>
 8002cec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cf0:	e000      	b.n	8002cf4 <ETH_SetMACConfig+0x114>
 8002cf2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002cf4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4b42      	ldr	r3, [pc, #264]	; (8002e10 <ETH_SetMACConfig+0x230>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	68f9      	ldr	r1, [r7, #12]
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d18:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4b3a      	ldr	r3, [pc, #232]	; (8002e14 <ETH_SetMACConfig+0x234>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	68f9      	ldr	r1, [r7, #12]
 8002d32:	430b      	orrs	r3, r1
 8002d34:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d3c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d4a:	2a00      	cmp	r2, #0
 8002d4c:	d101      	bne.n	8002d52 <ETH_SetMACConfig+0x172>
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	e000      	b.n	8002d54 <ETH_SetMACConfig+0x174>
 8002d52:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002d54:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d66:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	68f9      	ldr	r1, [r7, #12]
 8002d72:	430b      	orrs	r3, r1
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002d7c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002d84:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d92:	f023 0103 	bic.w	r1, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002daa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002dc6:	2a00      	cmp	r2, #0
 8002dc8:	d101      	bne.n	8002dce <ETH_SetMACConfig+0x1ee>
 8002dca:	2240      	movs	r2, #64	; 0x40
 8002dcc:	e000      	b.n	8002dd0 <ETH_SetMACConfig+0x1f0>
 8002dce:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002dd0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002dd8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002dda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002de2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002df0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	00048083 	.word	0x00048083
 8002e10:	c0f88000 	.word	0xc0f88000
 8002e14:	fffffef0 	.word	0xfffffef0

08002e18 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <ETH_SetDMAConfig+0xf8>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	6811      	ldr	r1, [r2, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e3e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	791b      	ldrb	r3, [r3, #4]
 8002e44:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e4a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	7b1b      	ldrb	r3, [r3, #12]
 8002e50:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <ETH_SetDMAConfig+0xfc>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	68f9      	ldr	r1, [r7, #12]
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e70:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	7b5b      	ldrb	r3, [r3, #13]
 8002e76:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e88:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002e8c:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <ETH_SetDMAConfig+0x100>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	68f9      	ldr	r1, [r7, #12]
 8002e96:	430b      	orrs	r3, r1
 8002e98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e9c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	7d1b      	ldrb	r3, [r3, #20]
 8002ea8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002eaa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	7f5b      	ldrb	r3, [r3, #29]
 8002eb0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002ec2:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <ETH_SetDMAConfig+0x104>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	68f9      	ldr	r1, [r7, #12]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ed2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	7f1b      	ldrb	r3, [r3, #28]
 8002eda:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eec:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <ETH_SetDMAConfig+0x108>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	68f9      	ldr	r1, [r7, #12]
 8002efa:	430b      	orrs	r3, r1
 8002efc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f00:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	ffff87fd 	.word	0xffff87fd
 8002f14:	ffff2ffe 	.word	0xffff2ffe
 8002f18:	fffec000 	.word	0xfffec000
 8002f1c:	ffc0efef 	.word	0xffc0efef
 8002f20:	7fc0ffff 	.word	0x7fc0ffff

08002f24 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b0a4      	sub	sp, #144	; 0x90
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f32:	2300      	movs	r3, #0
 8002f34:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f64:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002f7c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002f80:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002fce:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002fd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fd8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002ffe:	2300      	movs	r3, #0
 8003000:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff fde6 	bl	8002be0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003014:	2301      	movs	r3, #1
 8003016:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003018:	2301      	movs	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800302e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003032:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003034:	2300      	movs	r3, #0
 8003036:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003038:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800303c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003044:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800304a:	f107 0308 	add.w	r3, r7, #8
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff fee1 	bl	8002e18 <ETH_SetDMAConfig>
}
 8003056:	bf00      	nop
 8003058:	3790      	adds	r7, #144	; 0x90
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800305e:	b480      	push	{r7}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e01d      	b.n	80030a8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68d9      	ldr	r1, [r3, #12]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2200      	movs	r2, #0
 8003088:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	3206      	adds	r2, #6
 800309e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3301      	adds	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d9de      	bls.n	800306c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030bc:	461a      	mov	r2, r3
 80030be:	2303      	movs	r3, #3
 80030c0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e023      	b.n	8003146 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6919      	ldr	r1, [r3, #16]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	440b      	add	r3, r1
 800310e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2200      	movs	r2, #0
 800311a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2200      	movs	r2, #0
 8003126:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2200      	movs	r2, #0
 8003132:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	3212      	adds	r2, #18
 800313c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d9d8      	bls.n	80030fe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003172:	461a      	mov	r2, r3
 8003174:	2303      	movs	r3, #3
 8003176:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003186:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800319a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b08d      	sub	sp, #52	; 0x34
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3318      	adds	r3, #24
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ee:	d007      	beq.n	8003200 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	3304      	adds	r3, #4
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003200:	2302      	movs	r3, #2
 8003202:	e259      	b.n	80036b8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d044      	beq.n	800329a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	4b75      	ldr	r3, [pc, #468]	; (80033ec <ETH_Prepare_Tx_Descriptors+0x240>)
 8003216:	4013      	ands	r3, r2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800321c:	431a      	orrs	r2, r3
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800323c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d027      	beq.n	800329a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	b29a      	uxth	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	431a      	orrs	r2, r3
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	431a      	orrs	r2, r3
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003288:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003298:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00e      	beq.n	80032c4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	4b51      	ldr	r3, [pc, #324]	; (80033f0 <ETH_Prepare_Tx_Descriptors+0x244>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	6992      	ldr	r2, [r2, #24]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d036      	beq.n	800334a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80032e8:	f3bf 8f5f 	dmb	sy
}
 80032ec:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	3301      	adds	r3, #1
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003302:	2b03      	cmp	r3, #3
 8003304:	d902      	bls.n	800330c <ETH_Prepare_Tx_Descriptors+0x160>
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	3b04      	subs	r3, #4
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003314:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	3301      	adds	r3, #1
 800331a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003328:	d10f      	bne.n	800334a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003332:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8003334:	f3bf 8f5f 	dmb	sy
}
 8003338:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003346:	2302      	movs	r3, #2
 8003348:	e1b6      	b.n	80036b8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	3301      	adds	r3, #1
 800334e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003360:	4013      	ands	r3, r2
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	6852      	ldr	r2, [r2, #4]
 8003366:	431a      	orrs	r2, r3
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d012      	beq.n	800339a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <ETH_Prepare_Tx_Descriptors+0x248>)
 800338a:	4013      	ands	r3, r2
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	6852      	ldr	r2, [r2, #4]
 8003390:	0412      	lsls	r2, r2, #16
 8003392:	431a      	orrs	r2, r3
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	e008      	b.n	80033ac <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2200      	movs	r2, #0
 800339e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <ETH_Prepare_Tx_Descriptors+0x248>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d021      	beq.n	80033fc <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	04db      	lsls	r3, r3, #19
 80033c6:	431a      	orrs	r2, r3
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	69d2      	ldr	r2, [r2, #28]
 80033d8:	431a      	orrs	r2, r3
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	e02e      	b.n	800344a <ETH_Prepare_Tx_Descriptors+0x29e>
 80033ec:	ffff0000 	.word	0xffff0000
 80033f0:	ffffc000 	.word	0xffffc000
 80033f4:	c000ffff 	.word	0xc000ffff
 80033f8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	4b7b      	ldr	r3, [pc, #492]	; (80035f0 <ETH_Prepare_Tx_Descriptors+0x444>)
 8003402:	4013      	ands	r3, r2
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	6852      	ldr	r2, [r2, #4]
 8003408:	431a      	orrs	r2, r3
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	431a      	orrs	r2, r3
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	431a      	orrs	r2, r3
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	431a      	orrs	r2, r3
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003480:	f3bf 8f5f 	dmb	sy
}
 8003484:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80da 	beq.w	8003654 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80034b2:	e0cf      	b.n	8003654 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	3301      	adds	r3, #1
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d902      	bls.n	80034d2 <ETH_Prepare_Tx_Descriptors+0x326>
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	3b04      	subs	r3, #4
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034da:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f4:	d007      	beq.n	8003506 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	3304      	adds	r3, #4
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d029      	beq.n	800355a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800350e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003512:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003514:	2300      	movs	r3, #0
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
 8003518:	e019      	b.n	800354e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800351a:	f3bf 8f5f 	dmb	sy
}
 800351e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	3301      	adds	r3, #1
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	2b03      	cmp	r3, #3
 8003536:	d902      	bls.n	800353e <ETH_Prepare_Tx_Descriptors+0x392>
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	3b04      	subs	r3, #4
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003546:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	3301      	adds	r3, #1
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
 800354e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	429a      	cmp	r2, r3
 8003554:	d3e1      	bcc.n	800351a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003556:	2302      	movs	r3, #2
 8003558:	e0ae      	b.n	80036b8 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	3301      	adds	r3, #1
 800355e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003576:	4013      	ands	r3, r2
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	6852      	ldr	r2, [r2, #4]
 800357c:	431a      	orrs	r2, r3
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d012      	beq.n	80035b0 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	6852      	ldr	r2, [r2, #4]
 80035a6:	0412      	lsls	r2, r2, #16
 80035a8:	431a      	orrs	r2, r3
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	e008      	b.n	80035c2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	2200      	movs	r2, #0
 80035b4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80035bc:	4013      	ands	r3, r2
 80035be:	6a3a      	ldr	r2, [r7, #32]
 80035c0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <ETH_Prepare_Tx_Descriptors+0x450>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	69d2      	ldr	r2, [r2, #28]
 80035da:	431a      	orrs	r2, r3
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	60da      	str	r2, [r3, #12]
 80035ec:	e020      	b.n	8003630 <ETH_Prepare_Tx_Descriptors+0x484>
 80035ee:	bf00      	nop
 80035f0:	ffff8000 	.word	0xffff8000
 80035f4:	ffffc000 	.word	0xffffc000
 80035f8:	c000ffff 	.word	0xc000ffff
 80035fc:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <ETH_Prepare_Tx_Descriptors+0x518>)
 8003606:	4013      	ands	r3, r2
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	6852      	ldr	r2, [r2, #4]
 800360c:	431a      	orrs	r2, r3
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	431a      	orrs	r2, r3
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	3301      	adds	r3, #1
 8003634:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003636:	f3bf 8f5f 	dmb	sy
}
 800363a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f af2b 	bne.w	80034b4 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d006      	beq.n	8003672 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	e005      	b.n	800367e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800368e:	6979      	ldr	r1, [r7, #20]
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	3304      	adds	r3, #4
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800369e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80036a0:	b672      	cpsid	i
}
 80036a2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	4413      	add	r3, r2
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80036b2:	b662      	cpsie	i
}
 80036b4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3734      	adds	r7, #52	; 0x34
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	ffff8000 	.word	0xffff8000

080036c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b089      	sub	sp, #36	; 0x24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036d6:	4b89      	ldr	r3, [pc, #548]	; (80038fc <HAL_GPIO_Init+0x234>)
 80036d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036da:	e194      	b.n	8003a06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2101      	movs	r1, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8186 	beq.w	8003a00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d005      	beq.n	800370c <HAL_GPIO_Init+0x44>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d130      	bne.n	800376e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003742:	2201      	movs	r2, #1
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 0201 	and.w	r2, r3, #1
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b03      	cmp	r3, #3
 8003778:	d017      	beq.n	80037aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	2203      	movs	r2, #3
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d123      	bne.n	80037fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	08da      	lsrs	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3208      	adds	r2, #8
 80037be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	220f      	movs	r2, #15
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	08da      	lsrs	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3208      	adds	r2, #8
 80037f8:	69b9      	ldr	r1, [r7, #24]
 80037fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	2203      	movs	r2, #3
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0203 	and.w	r2, r3, #3
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80e0 	beq.w	8003a00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003840:	4b2f      	ldr	r3, [pc, #188]	; (8003900 <HAL_GPIO_Init+0x238>)
 8003842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003846:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <HAL_GPIO_Init+0x238>)
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003850:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_GPIO_Init+0x238>)
 8003852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800385e:	4a29      	ldr	r2, [pc, #164]	; (8003904 <HAL_GPIO_Init+0x23c>)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	3302      	adds	r3, #2
 8003866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	220f      	movs	r2, #15
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a20      	ldr	r2, [pc, #128]	; (8003908 <HAL_GPIO_Init+0x240>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d052      	beq.n	8003930 <HAL_GPIO_Init+0x268>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1f      	ldr	r2, [pc, #124]	; (800390c <HAL_GPIO_Init+0x244>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d031      	beq.n	80038f6 <HAL_GPIO_Init+0x22e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_GPIO_Init+0x248>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02b      	beq.n	80038f2 <HAL_GPIO_Init+0x22a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <HAL_GPIO_Init+0x24c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d025      	beq.n	80038ee <HAL_GPIO_Init+0x226>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <HAL_GPIO_Init+0x250>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01f      	beq.n	80038ea <HAL_GPIO_Init+0x222>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1b      	ldr	r2, [pc, #108]	; (800391c <HAL_GPIO_Init+0x254>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d019      	beq.n	80038e6 <HAL_GPIO_Init+0x21e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1a      	ldr	r2, [pc, #104]	; (8003920 <HAL_GPIO_Init+0x258>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_GPIO_Init+0x21a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_GPIO_Init+0x25c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00d      	beq.n	80038de <HAL_GPIO_Init+0x216>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_GPIO_Init+0x260>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <HAL_GPIO_Init+0x212>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a17      	ldr	r2, [pc, #92]	; (800392c <HAL_GPIO_Init+0x264>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_GPIO_Init+0x20e>
 80038d2:	2309      	movs	r3, #9
 80038d4:	e02d      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038d6:	230a      	movs	r3, #10
 80038d8:	e02b      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038da:	2308      	movs	r3, #8
 80038dc:	e029      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038de:	2307      	movs	r3, #7
 80038e0:	e027      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038e2:	2306      	movs	r3, #6
 80038e4:	e025      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038e6:	2305      	movs	r3, #5
 80038e8:	e023      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038ea:	2304      	movs	r3, #4
 80038ec:	e021      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038ee:	2303      	movs	r3, #3
 80038f0:	e01f      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e01d      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e01b      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038fa:	bf00      	nop
 80038fc:	58000080 	.word	0x58000080
 8003900:	58024400 	.word	0x58024400
 8003904:	58000400 	.word	0x58000400
 8003908:	58020000 	.word	0x58020000
 800390c:	58020400 	.word	0x58020400
 8003910:	58020800 	.word	0x58020800
 8003914:	58020c00 	.word	0x58020c00
 8003918:	58021000 	.word	0x58021000
 800391c:	58021400 	.word	0x58021400
 8003920:	58021800 	.word	0x58021800
 8003924:	58021c00 	.word	0x58021c00
 8003928:	58022000 	.word	0x58022000
 800392c:	58022400 	.word	0x58022400
 8003930:	2300      	movs	r3, #0
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	f002 0203 	and.w	r2, r2, #3
 8003938:	0092      	lsls	r2, r2, #2
 800393a:	4093      	lsls	r3, r2
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003942:	4938      	ldr	r1, [pc, #224]	; (8003a24 <HAL_GPIO_Init+0x35c>)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3302      	adds	r3, #2
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	3301      	adds	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f47f ae63 	bne.w	80036dc <HAL_GPIO_Init+0x14>
  }
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	3724      	adds	r7, #36	; 0x24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	58000400 	.word	0x58000400

08003a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e001      	b.n	8003a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003a60:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <HAL_HSEM_FastTake+0x2c>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3320      	adds	r3, #32
 8003a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6a:	4a07      	ldr	r2, [pc, #28]	; (8003a88 <HAL_HSEM_FastTake+0x30>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d101      	bne.n	8003a74 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e000      	b.n	8003a76 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	58026400 	.word	0x58026400
 8003a88:	80000300 	.word	0x80000300

08003a8c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003a96:	4906      	ldr	r1, [pc, #24]	; (8003ab0 <HAL_HSEM_Release+0x24>)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	58026400 	.word	0x58026400

08003ab4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_HSEM_ActivateNotification+0x20>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4904      	ldr	r1, [pc, #16]	; (8003ad4 <HAL_HSEM_ActivateNotification+0x20>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]
#endif
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	58026500 	.word	0x58026500

08003ad8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <HAL_HSEM_IRQHandler+0x30>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <HAL_HSEM_IRQHandler+0x30>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	4906      	ldr	r1, [pc, #24]	; (8003b08 <HAL_HSEM_IRQHandler+0x30>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003af2:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <HAL_HSEM_IRQHandler+0x30>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f01b fa0b 	bl	801ef14 <HAL_HSEM_FreeCallback>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	58026500 	.word	0x58026500

08003b0c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b14:	f7fd fea2 	bl	800185c <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e03b      	b.n	8003b9c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003b44:	e00f      	b.n	8003b66 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003b46:	f7fd fe89 	bl	800185c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d908      	bls.n	8003b66 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2240      	movs	r2, #64	; 0x40
 8003b58:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e01a      	b.n	8003b9c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e8      	bne.n	8003b46 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f9bb 	bl	8003ef0 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e03e      	b.n	8003c3c <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_MDMA_ConfigPostRequestMask+0x28>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e037      	b.n	8003c3c <HAL_MDMA_ConfigPostRequestMask+0x98>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d126      	bne.n	8003c2e <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11c      	bne.n	8003c28 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d108      	bne.n	8003c16 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c12:	611a      	str	r2, [r3, #16]
 8003c14:	e00d      	b.n	8003c32 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c24:	611a      	str	r2, [r3, #16]
 8003c26:	e004      	b.n	8003c32 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
 8003c2c:	e001      	b.n	8003c32 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c54:	4b91      	ldr	r3, [pc, #580]	; (8003e9c <HAL_MDMA_IRQHandler+0x254>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a91      	ldr	r2, [pc, #580]	; (8003ea0 <HAL_MDMA_IRQHandler+0x258>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b8e      	ldr	r3, [pc, #568]	; (8003ea4 <HAL_MDMA_IRQHandler+0x25c>)
 8003c6a:	4413      	add	r3, r2
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	2201      	movs	r2, #1
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8003c7a:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 812d 	beq.w	8003ee4 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d054      	beq.n	8003d42 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d04d      	beq.n	8003d42 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0202 	bic.w	r2, r2, #2
 8003cb4:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ccc:	f043 0201 	orr.w	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	669a      	str	r2, [r3, #104]	; 0x68
 8003cd4:	e005      	b.n	8003ce2 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cda:	f043 0202 	orr.w	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf0:	f043 0204 	orr.w	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d06:	f043 0208 	orr.w	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d1c:	f043 0210 	orr.w	r2, r3, #16
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d012      	beq.n	8003d76 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2210      	movs	r2, #16
 8003d64:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d012      	beq.n	8003daa <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2208      	movs	r2, #8
 8003d98:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d012      	beq.n	8003dde <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2204      	movs	r2, #4
 8003dcc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d039      	beq.n	8003e60 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d032      	beq.n	8003e60 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8003e08:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d110      	bne.n	8003e38 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d05c      	beq.n	8003ee8 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
        }
        return;
 8003e36:	e057      	b.n	8003ee8 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d040      	beq.n	8003eea <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	3301      	adds	r3, #1
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d30d      	bcc.n	8003ea8 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f2      	bne.n	8003e80 <HAL_MDMA_IRQHandler+0x238>
 8003e9a:	e006      	b.n	8003eaa <HAL_MDMA_IRQHandler+0x262>
 8003e9c:	24000000 	.word	0x24000000
 8003ea0:	1b4e81b5 	.word	0x1b4e81b5
 8003ea4:	adffffc0 	.word	0xadffffc0
        break;
 8003ea8:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ec8:	e003      	b.n	8003ed2 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
 8003ee2:	e002      	b.n	8003eea <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8003ee4:	bf00      	nop
 8003ee6:	e000      	b.n	8003eea <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8003ee8:	bf00      	nop
    }
  }
}
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68d9      	ldr	r1, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003f16:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003f22:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003f2e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8003f38:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003f44:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003f46:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f50:	d107      	bne.n	8003f62 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8003f60:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2200      	movs	r2, #0
 8003f68:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	da11      	bge.n	8003f96 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f80:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f86:	425b      	negs	r3, r3
 8003f88:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	b292      	uxth	r2, r2
 8003f92:	621a      	str	r2, [r3, #32]
 8003f94:	e006      	b.n	8003fa4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	b292      	uxth	r2, r2
 8003fa2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	da15      	bge.n	8003fd8 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003fba:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	425b      	negs	r3, r3
 8003fc2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6a19      	ldr	r1, [r3, #32]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	041a      	lsls	r2, r3, #16
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	621a      	str	r2, [r3, #32]
 8003fd6:	e009      	b.n	8003fec <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6a19      	ldr	r1, [r3, #32]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	041a      	lsls	r2, r3, #16
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d006      	beq.n	8004004 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	629a      	str	r2, [r3, #40]	; 0x28
 8004002:	e003      	b.n	800400c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2200      	movs	r2, #0
 800400a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2200      	movs	r2, #0
 8004012:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004028:	4b29      	ldr	r3, [pc, #164]	; (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	2b06      	cmp	r3, #6
 8004032:	d00a      	beq.n	800404a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004034:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	d001      	beq.n	8004046 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e040      	b.n	80040c8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	e03e      	b.n	80040c8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800404a:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004052:	491f      	ldr	r1, [pc, #124]	; (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4313      	orrs	r3, r2
 8004058:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800405a:	f7fd fbff 	bl	800185c <HAL_GetTick>
 800405e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004060:	e009      	b.n	8004076 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004062:	f7fd fbfb 	bl	800185c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004070:	d901      	bls.n	8004076 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e028      	b.n	80040c8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004076:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800407e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004082:	d1ee      	bne.n	8004062 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b1e      	cmp	r3, #30
 8004088:	d008      	beq.n	800409c <HAL_PWREx_ConfigSupply+0x7c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b2e      	cmp	r3, #46	; 0x2e
 800408e:	d005      	beq.n	800409c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b1d      	cmp	r3, #29
 8004094:	d002      	beq.n	800409c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b2d      	cmp	r3, #45	; 0x2d
 800409a:	d114      	bne.n	80040c6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800409c:	f7fd fbde 	bl	800185c <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80040a2:	e009      	b.n	80040b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040a4:	f7fd fbda 	bl	800185c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b2:	d901      	bls.n	80040b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e007      	b.n	80040c8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d1ee      	bne.n	80040a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	58024800 	.word	0x58024800

080040d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08c      	sub	sp, #48	; 0x30
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f000 bc48 	b.w	8004978 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8088 	beq.w	8004206 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f6:	4b99      	ldr	r3, [pc, #612]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004100:	4b96      	ldr	r3, [pc, #600]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	2b10      	cmp	r3, #16
 800410a:	d007      	beq.n	800411c <HAL_RCC_OscConfig+0x48>
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	2b18      	cmp	r3, #24
 8004110:	d111      	bne.n	8004136 <HAL_RCC_OscConfig+0x62>
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d10c      	bne.n	8004136 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	4b8f      	ldr	r3, [pc, #572]	; (800435c <HAL_RCC_OscConfig+0x288>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d06d      	beq.n	8004204 <HAL_RCC_OscConfig+0x130>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d169      	bne.n	8004204 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f000 bc21 	b.w	8004978 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x7a>
 8004140:	4b86      	ldr	r3, [pc, #536]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a85      	ldr	r2, [pc, #532]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	e02e      	b.n	80041ac <HAL_RCC_OscConfig+0xd8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x9c>
 8004156:	4b81      	ldr	r3, [pc, #516]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a80      	ldr	r2, [pc, #512]	; (800435c <HAL_RCC_OscConfig+0x288>)
 800415c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b7e      	ldr	r3, [pc, #504]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a7d      	ldr	r2, [pc, #500]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e01d      	b.n	80041ac <HAL_RCC_OscConfig+0xd8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0xc0>
 800417a:	4b78      	ldr	r3, [pc, #480]	; (800435c <HAL_RCC_OscConfig+0x288>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a77      	ldr	r2, [pc, #476]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	4b75      	ldr	r3, [pc, #468]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a74      	ldr	r2, [pc, #464]	; (800435c <HAL_RCC_OscConfig+0x288>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e00b      	b.n	80041ac <HAL_RCC_OscConfig+0xd8>
 8004194:	4b71      	ldr	r3, [pc, #452]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a70      	ldr	r2, [pc, #448]	; (800435c <HAL_RCC_OscConfig+0x288>)
 800419a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	4b6e      	ldr	r3, [pc, #440]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a6d      	ldr	r2, [pc, #436]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80041a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d013      	beq.n	80041dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fb52 	bl	800185c <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fd fb4e 	bl	800185c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b64      	cmp	r3, #100	; 0x64
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e3d4      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ce:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0xe8>
 80041da:	e014      	b.n	8004206 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fb3e 	bl	800185c <HAL_GetTick>
 80041e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fd fb3a 	bl	800185c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e3c0      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041f6:	4b59      	ldr	r3, [pc, #356]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x110>
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80ca 	beq.w	80043a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004214:	4b51      	ldr	r3, [pc, #324]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800421c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800421e:	4b4f      	ldr	r3, [pc, #316]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_RCC_OscConfig+0x166>
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2b18      	cmp	r3, #24
 800422e:	d156      	bne.n	80042de <HAL_RCC_OscConfig+0x20a>
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d151      	bne.n	80042de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800423a:	4b48      	ldr	r3, [pc, #288]	; (800435c <HAL_RCC_OscConfig+0x288>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_RCC_OscConfig+0x17e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e392      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004252:	4b42      	ldr	r3, [pc, #264]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 0219 	bic.w	r2, r3, #25
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	493f      	ldr	r1, [pc, #252]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004260:	4313      	orrs	r3, r2
 8004262:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd fafa 	bl	800185c <HAL_GetTick>
 8004268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426c:	f7fd faf6 	bl	800185c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e37c      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800427e:	4b37      	ldr	r3, [pc, #220]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428a:	f7fd fb17 	bl	80018bc <HAL_GetREVID>
 800428e:	4603      	mov	r3, r0
 8004290:	f241 0203 	movw	r2, #4099	; 0x1003
 8004294:	4293      	cmp	r3, r2
 8004296:	d817      	bhi.n	80042c8 <HAL_RCC_OscConfig+0x1f4>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d108      	bne.n	80042b2 <HAL_RCC_OscConfig+0x1de>
 80042a0:	4b2e      	ldr	r3, [pc, #184]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042a8:	4a2c      	ldr	r2, [pc, #176]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80042aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b0:	e07a      	b.n	80043a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	031b      	lsls	r3, r3, #12
 80042c0:	4926      	ldr	r1, [pc, #152]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042c6:	e06f      	b.n	80043a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c8:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	061b      	lsls	r3, r3, #24
 80042d6:	4921      	ldr	r1, [pc, #132]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042dc:	e064      	b.n	80043a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d047      	beq.n	8004376 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042e6:	4b1d      	ldr	r3, [pc, #116]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 0219 	bic.w	r2, r3, #25
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	491a      	ldr	r1, [pc, #104]	; (800435c <HAL_RCC_OscConfig+0x288>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fd fab0 	bl	800185c <HAL_GetTick>
 80042fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004300:	f7fd faac 	bl	800185c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e332      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	f7fd facd 	bl	80018bc <HAL_GetREVID>
 8004322:	4603      	mov	r3, r0
 8004324:	f241 0203 	movw	r2, #4099	; 0x1003
 8004328:	4293      	cmp	r3, r2
 800432a:	d819      	bhi.n	8004360 <HAL_RCC_OscConfig+0x28c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d108      	bne.n	8004346 <HAL_RCC_OscConfig+0x272>
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800433c:	4a07      	ldr	r2, [pc, #28]	; (800435c <HAL_RCC_OscConfig+0x288>)
 800433e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004342:	6053      	str	r3, [r2, #4]
 8004344:	e030      	b.n	80043a8 <HAL_RCC_OscConfig+0x2d4>
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	031b      	lsls	r3, r3, #12
 8004354:	4901      	ldr	r1, [pc, #4]	; (800435c <HAL_RCC_OscConfig+0x288>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
 800435a:	e025      	b.n	80043a8 <HAL_RCC_OscConfig+0x2d4>
 800435c:	58024400 	.word	0x58024400
 8004360:	4b9a      	ldr	r3, [pc, #616]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	4997      	ldr	r1, [pc, #604]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]
 8004374:	e018      	b.n	80043a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004376:	4b95      	ldr	r3, [pc, #596]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a94      	ldr	r2, [pc, #592]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fd fa6b 	bl	800185c <HAL_GetTick>
 8004386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438a:	f7fd fa67 	bl	800185c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e2ed      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800439c:	4b8b      	ldr	r3, [pc, #556]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f0      	bne.n	800438a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80a9 	beq.w	8004508 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b6:	4b85      	ldr	r3, [pc, #532]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043c0:	4b82      	ldr	r3, [pc, #520]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d007      	beq.n	80043dc <HAL_RCC_OscConfig+0x308>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b18      	cmp	r3, #24
 80043d0:	d13a      	bne.n	8004448 <HAL_RCC_OscConfig+0x374>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d135      	bne.n	8004448 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043dc:	4b7b      	ldr	r3, [pc, #492]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_OscConfig+0x320>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e2c1      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043f4:	f7fd fa62 	bl	80018bc <HAL_GetREVID>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80043fe:	4293      	cmp	r3, r2
 8004400:	d817      	bhi.n	8004432 <HAL_RCC_OscConfig+0x35e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	2b20      	cmp	r3, #32
 8004408:	d108      	bne.n	800441c <HAL_RCC_OscConfig+0x348>
 800440a:	4b70      	ldr	r3, [pc, #448]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004412:	4a6e      	ldr	r2, [pc, #440]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004418:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800441a:	e075      	b.n	8004508 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800441c:	4b6b      	ldr	r3, [pc, #428]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	069b      	lsls	r3, r3, #26
 800442a:	4968      	ldr	r1, [pc, #416]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 800442c:	4313      	orrs	r3, r2
 800442e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004430:	e06a      	b.n	8004508 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004432:	4b66      	ldr	r3, [pc, #408]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	061b      	lsls	r3, r3, #24
 8004440:	4962      	ldr	r1, [pc, #392]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004446:	e05f      	b.n	8004508 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d042      	beq.n	80044d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004450:	4b5e      	ldr	r3, [pc, #376]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a5d      	ldr	r2, [pc, #372]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fd f9fe 	bl	800185c <HAL_GetTick>
 8004460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004464:	f7fd f9fa 	bl	800185c <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e280      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004476:	4b55      	ldr	r3, [pc, #340]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004482:	f7fd fa1b 	bl	80018bc <HAL_GetREVID>
 8004486:	4603      	mov	r3, r0
 8004488:	f241 0203 	movw	r2, #4099	; 0x1003
 800448c:	4293      	cmp	r3, r2
 800448e:	d817      	bhi.n	80044c0 <HAL_RCC_OscConfig+0x3ec>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	2b20      	cmp	r3, #32
 8004496:	d108      	bne.n	80044aa <HAL_RCC_OscConfig+0x3d6>
 8004498:	4b4c      	ldr	r3, [pc, #304]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044a0:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80044a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044a6:	6053      	str	r3, [r2, #4]
 80044a8:	e02e      	b.n	8004508 <HAL_RCC_OscConfig+0x434>
 80044aa:	4b48      	ldr	r3, [pc, #288]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	069b      	lsls	r3, r3, #26
 80044b8:	4944      	ldr	r1, [pc, #272]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]
 80044be:	e023      	b.n	8004508 <HAL_RCC_OscConfig+0x434>
 80044c0:	4b42      	ldr	r3, [pc, #264]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	493f      	ldr	r1, [pc, #252]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60cb      	str	r3, [r1, #12]
 80044d4:	e018      	b.n	8004508 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80044d6:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80044dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7fd f9bb 	bl	800185c <HAL_GetTick>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80044ea:	f7fd f9b7 	bl	800185c <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e23d      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044fc:	4b33      	ldr	r3, [pc, #204]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f0      	bne.n	80044ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d036      	beq.n	8004582 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d019      	beq.n	8004550 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451c:	4b2b      	ldr	r3, [pc, #172]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 800451e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004520:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fd f998 	bl	800185c <HAL_GetTick>
 800452c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004530:	f7fd f994 	bl	800185c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e21a      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004542:	4b22      	ldr	r3, [pc, #136]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x45c>
 800454e:	e018      	b.n	8004582 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fd f97e 	bl	800185c <HAL_GetTick>
 8004560:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004564:	f7fd f97a 	bl	800185c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e200      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d039      	beq.n	8004602 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d01c      	beq.n	80045d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a0c      	ldr	r2, [pc, #48]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 800459c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045a2:	f7fd f95b 	bl	800185c <HAL_GetTick>
 80045a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045aa:	f7fd f957 	bl	800185c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e1dd      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045bc:	4b03      	ldr	r3, [pc, #12]	; (80045cc <HAL_RCC_OscConfig+0x4f8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x4d6>
 80045c8:	e01b      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
 80045ca:	bf00      	nop
 80045cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045d0:	4b9b      	ldr	r3, [pc, #620]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a9a      	ldr	r2, [pc, #616]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80045d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045dc:	f7fd f93e 	bl	800185c <HAL_GetTick>
 80045e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045e4:	f7fd f93a 	bl	800185c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e1c0      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045f6:	4b92      	ldr	r3, [pc, #584]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8081 	beq.w	8004712 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004610:	4b8c      	ldr	r3, [pc, #560]	; (8004844 <HAL_RCC_OscConfig+0x770>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a8b      	ldr	r2, [pc, #556]	; (8004844 <HAL_RCC_OscConfig+0x770>)
 8004616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800461c:	f7fd f91e 	bl	800185c <HAL_GetTick>
 8004620:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004624:	f7fd f91a 	bl	800185c <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e1a0      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004636:	4b83      	ldr	r3, [pc, #524]	; (8004844 <HAL_RCC_OscConfig+0x770>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d106      	bne.n	8004658 <HAL_RCC_OscConfig+0x584>
 800464a:	4b7d      	ldr	r3, [pc, #500]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a7c      	ldr	r2, [pc, #496]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
 8004656:	e02d      	b.n	80046b4 <HAL_RCC_OscConfig+0x5e0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10c      	bne.n	800467a <HAL_RCC_OscConfig+0x5a6>
 8004660:	4b77      	ldr	r3, [pc, #476]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	4a76      	ldr	r2, [pc, #472]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	6713      	str	r3, [r2, #112]	; 0x70
 800466c:	4b74      	ldr	r3, [pc, #464]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	4a73      	ldr	r2, [pc, #460]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004672:	f023 0304 	bic.w	r3, r3, #4
 8004676:	6713      	str	r3, [r2, #112]	; 0x70
 8004678:	e01c      	b.n	80046b4 <HAL_RCC_OscConfig+0x5e0>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b05      	cmp	r3, #5
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x5c8>
 8004682:	4b6f      	ldr	r3, [pc, #444]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	4a6e      	ldr	r2, [pc, #440]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004688:	f043 0304 	orr.w	r3, r3, #4
 800468c:	6713      	str	r3, [r2, #112]	; 0x70
 800468e:	4b6c      	ldr	r3, [pc, #432]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a6b      	ldr	r2, [pc, #428]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
 800469a:	e00b      	b.n	80046b4 <HAL_RCC_OscConfig+0x5e0>
 800469c:	4b68      	ldr	r3, [pc, #416]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	4a67      	ldr	r2, [pc, #412]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70
 80046a8:	4b65      	ldr	r3, [pc, #404]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	4a64      	ldr	r2, [pc, #400]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80046ae:	f023 0304 	bic.w	r3, r3, #4
 80046b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7fd f8ce 	bl	800185c <HAL_GetTick>
 80046c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046c2:	e00a      	b.n	80046da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7fd f8ca 	bl	800185c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e14e      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046da:	4b59      	ldr	r3, [pc, #356]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0ee      	beq.n	80046c4 <HAL_RCC_OscConfig+0x5f0>
 80046e6:	e014      	b.n	8004712 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e8:	f7fd f8b8 	bl	800185c <HAL_GetTick>
 80046ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f7fd f8b4 	bl	800185c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e138      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004706:	4b4e      	ldr	r3, [pc, #312]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ee      	bne.n	80046f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 812d 	beq.w	8004976 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800471c:	4b48      	ldr	r3, [pc, #288]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004724:	2b18      	cmp	r3, #24
 8004726:	f000 80bd 	beq.w	80048a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b02      	cmp	r3, #2
 8004730:	f040 809e 	bne.w	8004870 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004734:	4b42      	ldr	r3, [pc, #264]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a41      	ldr	r2, [pc, #260]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 800473a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800473e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fd f88c 	bl	800185c <HAL_GetTick>
 8004744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004748:	f7fd f888 	bl	800185c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e10e      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800475a:	4b39      	ldr	r3, [pc, #228]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004766:	4b36      	ldr	r3, [pc, #216]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800476a:	4b37      	ldr	r3, [pc, #220]	; (8004848 <HAL_RCC_OscConfig+0x774>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004776:	0112      	lsls	r2, r2, #4
 8004778:	430a      	orrs	r2, r1
 800477a:	4931      	ldr	r1, [pc, #196]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	628b      	str	r3, [r1, #40]	; 0x28
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	3b01      	subs	r3, #1
 8004786:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478e:	3b01      	subs	r3, #1
 8004790:	025b      	lsls	r3, r3, #9
 8004792:	b29b      	uxth	r3, r3
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	3b01      	subs	r3, #1
 800479c:	041b      	lsls	r3, r3, #16
 800479e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a8:	3b01      	subs	r3, #1
 80047aa:	061b      	lsls	r3, r3, #24
 80047ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047b0:	4923      	ldr	r1, [pc, #140]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80047b6:	4b22      	ldr	r3, [pc, #136]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	4a21      	ldr	r2, [pc, #132]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047c2:	4b1f      	ldr	r3, [pc, #124]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80047c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c6:	4b21      	ldr	r3, [pc, #132]	; (800484c <HAL_RCC_OscConfig+0x778>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047ce:	00d2      	lsls	r2, r2, #3
 80047d0:	491b      	ldr	r1, [pc, #108]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80047d6:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	f023 020c 	bic.w	r2, r3, #12
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4917      	ldr	r1, [pc, #92]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80047e8:	4b15      	ldr	r3, [pc, #84]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	f023 0202 	bic.w	r2, r3, #2
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f4:	4912      	ldr	r1, [pc, #72]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047fa:	4b11      	ldr	r3, [pc, #68]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	4a10      	ldr	r2, [pc, #64]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	4a0d      	ldr	r2, [pc, #52]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 800480c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004810:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800481c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800481e:	4b08      	ldr	r3, [pc, #32]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	4a07      	ldr	r2, [pc, #28]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a04      	ldr	r2, [pc, #16]	; (8004840 <HAL_RCC_OscConfig+0x76c>)
 8004830:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fd f811 	bl	800185c <HAL_GetTick>
 800483a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800483c:	e011      	b.n	8004862 <HAL_RCC_OscConfig+0x78e>
 800483e:	bf00      	nop
 8004840:	58024400 	.word	0x58024400
 8004844:	58024800 	.word	0x58024800
 8004848:	fffffc0c 	.word	0xfffffc0c
 800484c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004850:	f7fd f804 	bl	800185c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e08a      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004862:	4b47      	ldr	r3, [pc, #284]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x77c>
 800486e:	e082      	b.n	8004976 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a42      	ldr	r2, [pc, #264]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 8004876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fc ffee 	bl	800185c <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004884:	f7fc ffea 	bl	800185c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e070      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004896:	4b3a      	ldr	r3, [pc, #232]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x7b0>
 80048a2:	e068      	b.n	8004976 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80048a4:	4b36      	ldr	r3, [pc, #216]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 80048a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048aa:	4b35      	ldr	r3, [pc, #212]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d031      	beq.n	800491c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f003 0203 	and.w	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d12a      	bne.n	800491c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d122      	bne.n	800491c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d11a      	bne.n	800491c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	0a5b      	lsrs	r3, r3, #9
 80048ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d111      	bne.n	800491c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	0c1b      	lsrs	r3, r3, #16
 80048fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d108      	bne.n	800491c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	0e1b      	lsrs	r3, r3, #24
 800490e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e02b      	b.n	8004978 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004920:	4b17      	ldr	r3, [pc, #92]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 8004922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800492a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	429a      	cmp	r2, r3
 8004934:	d01f      	beq.n	8004976 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	4a11      	ldr	r2, [pc, #68]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004942:	f7fc ff8b 	bl	800185c <HAL_GetTick>
 8004946:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004948:	bf00      	nop
 800494a:	f7fc ff87 	bl	800185c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	4293      	cmp	r3, r2
 8004954:	d0f9      	beq.n	800494a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 8004958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <HAL_RCC_OscConfig+0x8b0>)
 800495c:	4013      	ands	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004962:	00d2      	lsls	r2, r2, #3
 8004964:	4906      	ldr	r1, [pc, #24]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 8004966:	4313      	orrs	r3, r2
 8004968:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	4a04      	ldr	r2, [pc, #16]	; (8004980 <HAL_RCC_OscConfig+0x8ac>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3730      	adds	r7, #48	; 0x30
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	58024400 	.word	0x58024400
 8004984:	ffff0007 	.word	0xffff0007

08004988 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e19c      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800499c:	4b8a      	ldr	r3, [pc, #552]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d910      	bls.n	80049cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b87      	ldr	r3, [pc, #540]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 020f 	bic.w	r2, r3, #15
 80049b2:	4985      	ldr	r1, [pc, #532]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b83      	ldr	r3, [pc, #524]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e184      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d010      	beq.n	80049fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	4b7b      	ldr	r3, [pc, #492]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d908      	bls.n	80049fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049e8:	4b78      	ldr	r3, [pc, #480]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	4975      	ldr	r1, [pc, #468]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d010      	beq.n	8004a28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	4b70      	ldr	r3, [pc, #448]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d908      	bls.n	8004a28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a16:	4b6d      	ldr	r3, [pc, #436]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	496a      	ldr	r1, [pc, #424]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d010      	beq.n	8004a56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699a      	ldr	r2, [r3, #24]
 8004a38:	4b64      	ldr	r3, [pc, #400]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d908      	bls.n	8004a56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a44:	4b61      	ldr	r3, [pc, #388]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	495e      	ldr	r1, [pc, #376]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d010      	beq.n	8004a84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69da      	ldr	r2, [r3, #28]
 8004a66:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d908      	bls.n	8004a84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a72:	4b56      	ldr	r3, [pc, #344]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4953      	ldr	r1, [pc, #332]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d010      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	4b4d      	ldr	r3, [pc, #308]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d908      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b4a      	ldr	r3, [pc, #296]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f023 020f 	bic.w	r2, r3, #15
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4947      	ldr	r1, [pc, #284]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d055      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004abe:	4b43      	ldr	r3, [pc, #268]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	4940      	ldr	r1, [pc, #256]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ad8:	4b3c      	ldr	r3, [pc, #240]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d121      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e0f6      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d107      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004af0:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d115      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0ea      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d107      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b08:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0de      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b18:	4b2c      	ldr	r3, [pc, #176]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0d6      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b28:	4b28      	ldr	r3, [pc, #160]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f023 0207 	bic.w	r2, r3, #7
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4925      	ldr	r1, [pc, #148]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3a:	f7fc fe8f 	bl	800185c <HAL_GetTick>
 8004b3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b40:	e00a      	b.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b42:	f7fc fe8b 	bl	800185c <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e0be      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b58:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d1eb      	bne.n	8004b42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d010      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d208      	bcs.n	8004b98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f023 020f 	bic.w	r2, r3, #15
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	490e      	ldr	r1, [pc, #56]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d214      	bcs.n	8004bd0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 020f 	bic.w	r2, r3, #15
 8004bae:	4906      	ldr	r1, [pc, #24]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e086      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
 8004bc8:	52002000 	.word	0x52002000
 8004bcc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d010      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	4b3f      	ldr	r3, [pc, #252]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d208      	bcs.n	8004bfe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bec:	4b3c      	ldr	r3, [pc, #240]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	4939      	ldr	r1, [pc, #228]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d010      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695a      	ldr	r2, [r3, #20]
 8004c0e:	4b34      	ldr	r3, [pc, #208]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d208      	bcs.n	8004c2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c1a:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	492e      	ldr	r1, [pc, #184]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d010      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	4b28      	ldr	r3, [pc, #160]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d208      	bcs.n	8004c5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	4922      	ldr	r1, [pc, #136]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d010      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69da      	ldr	r2, [r3, #28]
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d208      	bcs.n	8004c88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c76:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	4917      	ldr	r1, [pc, #92]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c88:	f000 f89e 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	4912      	ldr	r1, [pc, #72]	; (8004ce4 <HAL_RCC_ClockConfig+0x35c>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <HAL_RCC_ClockConfig+0x35c>)
 8004cb0:	5cd3      	ldrb	r3, [r2, r3]
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbc:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <HAL_RCC_ClockConfig+0x360>)
 8004cbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <HAL_RCC_ClockConfig+0x364>)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <HAL_RCC_ClockConfig+0x368>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fc fa8e 	bl	80011ec <HAL_InitTick>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	58024400 	.word	0x58024400
 8004ce4:	080242a4 	.word	0x080242a4
 8004ce8:	24000004 	.word	0x24000004
 8004cec:	24000000 	.word	0x24000000
 8004cf0:	24000008 	.word	0x24000008

08004cf4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08c      	sub	sp, #48	; 0x30
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d12a      	bne.n	8004d5c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8004d06:	4b2d      	ldr	r3, [pc, #180]	; (8004dbc <HAL_RCC_MCOConfig+0xc8>)
 8004d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d0c:	4a2b      	ldr	r2, [pc, #172]	; (8004dbc <HAL_RCC_MCOConfig+0xc8>)
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d16:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <HAL_RCC_MCOConfig+0xc8>)
 8004d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004d36:	2300      	movs	r3, #0
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004d3a:	f107 031c 	add.w	r3, r7, #28
 8004d3e:	4619      	mov	r1, r3
 8004d40:	481f      	ldr	r0, [pc, #124]	; (8004dc0 <HAL_RCC_MCOConfig+0xcc>)
 8004d42:	f7fe fcc1 	bl	80036c8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004d46:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <HAL_RCC_MCOConfig+0xc8>)
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	430b      	orrs	r3, r1
 8004d54:	4919      	ldr	r1, [pc, #100]	; (8004dbc <HAL_RCC_MCOConfig+0xc8>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004d5a:	e02a      	b.n	8004db2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004d5c:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <HAL_RCC_MCOConfig+0xc8>)
 8004d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d62:	4a16      	ldr	r2, [pc, #88]	; (8004dbc <HAL_RCC_MCOConfig+0xc8>)
 8004d64:	f043 0304 	orr.w	r3, r3, #4
 8004d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_RCC_MCOConfig+0xc8>)
 8004d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d80:	2302      	movs	r3, #2
 8004d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d84:	2303      	movs	r3, #3
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004d90:	f107 031c 	add.w	r3, r7, #28
 8004d94:	4619      	mov	r1, r3
 8004d96:	480b      	ldr	r0, [pc, #44]	; (8004dc4 <HAL_RCC_MCOConfig+0xd0>)
 8004d98:	f7fe fc96 	bl	80036c8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004d9c:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <HAL_RCC_MCOConfig+0xc8>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	01d9      	lsls	r1, r3, #7
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	430b      	orrs	r3, r1
 8004dac:	4903      	ldr	r1, [pc, #12]	; (8004dbc <HAL_RCC_MCOConfig+0xc8>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	610b      	str	r3, [r1, #16]
}
 8004db2:	bf00      	nop
 8004db4:	3730      	adds	r7, #48	; 0x30
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	58020000 	.word	0x58020000
 8004dc4:	58020800 	.word	0x58020800

08004dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b089      	sub	sp, #36	; 0x24
 8004dcc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dce:	4bb3      	ldr	r3, [pc, #716]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dd6:	2b18      	cmp	r3, #24
 8004dd8:	f200 8155 	bhi.w	8005086 <HAL_RCC_GetSysClockFreq+0x2be>
 8004ddc:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004e49 	.word	0x08004e49
 8004de8:	08005087 	.word	0x08005087
 8004dec:	08005087 	.word	0x08005087
 8004df0:	08005087 	.word	0x08005087
 8004df4:	08005087 	.word	0x08005087
 8004df8:	08005087 	.word	0x08005087
 8004dfc:	08005087 	.word	0x08005087
 8004e00:	08005087 	.word	0x08005087
 8004e04:	08004e6f 	.word	0x08004e6f
 8004e08:	08005087 	.word	0x08005087
 8004e0c:	08005087 	.word	0x08005087
 8004e10:	08005087 	.word	0x08005087
 8004e14:	08005087 	.word	0x08005087
 8004e18:	08005087 	.word	0x08005087
 8004e1c:	08005087 	.word	0x08005087
 8004e20:	08005087 	.word	0x08005087
 8004e24:	08004e75 	.word	0x08004e75
 8004e28:	08005087 	.word	0x08005087
 8004e2c:	08005087 	.word	0x08005087
 8004e30:	08005087 	.word	0x08005087
 8004e34:	08005087 	.word	0x08005087
 8004e38:	08005087 	.word	0x08005087
 8004e3c:	08005087 	.word	0x08005087
 8004e40:	08005087 	.word	0x08005087
 8004e44:	08004e7b 	.word	0x08004e7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e48:	4b94      	ldr	r3, [pc, #592]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d009      	beq.n	8004e68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e54:	4b91      	ldr	r3, [pc, #580]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	08db      	lsrs	r3, r3, #3
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	4a90      	ldr	r2, [pc, #576]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
 8004e64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004e66:	e111      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e68:	4b8d      	ldr	r3, [pc, #564]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e6a:	61bb      	str	r3, [r7, #24]
      break;
 8004e6c:	e10e      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004e6e:	4b8d      	ldr	r3, [pc, #564]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e70:	61bb      	str	r3, [r7, #24]
      break;
 8004e72:	e10b      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004e74:	4b8c      	ldr	r3, [pc, #560]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e76:	61bb      	str	r3, [r7, #24]
      break;
 8004e78:	e108      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e7a:	4b88      	ldr	r3, [pc, #544]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e84:	4b85      	ldr	r3, [pc, #532]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e90:	4b82      	ldr	r3, [pc, #520]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e9a:	4b80      	ldr	r3, [pc, #512]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9e:	08db      	lsrs	r3, r3, #3
 8004ea0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	fb02 f303 	mul.w	r3, r2, r3
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80e1 	beq.w	8005080 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	f000 8083 	beq.w	8004fcc <HAL_RCC_GetSysClockFreq+0x204>
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	f200 80a1 	bhi.w	8005010 <HAL_RCC_GetSysClockFreq+0x248>
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0x114>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d056      	beq.n	8004f88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004eda:	e099      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004edc:	4b6f      	ldr	r3, [pc, #444]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d02d      	beq.n	8004f44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ee8:	4b6c      	ldr	r3, [pc, #432]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	08db      	lsrs	r3, r3, #3
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	4a6b      	ldr	r2, [pc, #428]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	ee07 3a90 	vmov	s15, r3
 8004f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f12:	4b62      	ldr	r3, [pc, #392]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f26:	eddf 5a61 	vldr	s11, [pc, #388]	; 80050ac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004f42:	e087      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80050b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f56:	4b51      	ldr	r3, [pc, #324]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80050ac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f86:	e065      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f92:	eddf 6a48 	vldr	s13, [pc, #288]	; 80050b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f9a:	4b40      	ldr	r3, [pc, #256]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80050ac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fca:	e043      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fde:	4b2f      	ldr	r3, [pc, #188]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ff2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80050ac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800500e:	e021      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80050b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800501e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005022:	4b1e      	ldr	r3, [pc, #120]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005032:	ed97 6a02 	vldr	s12, [r7, #8]
 8005036:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80050ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800503a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005052:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005054:	4b11      	ldr	r3, [pc, #68]	; (800509c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	0a5b      	lsrs	r3, r3, #9
 800505a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800505e:	3301      	adds	r3, #1
 8005060:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	ee07 3a90 	vmov	s15, r3
 8005068:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800506c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005078:	ee17 3a90 	vmov	r3, s15
 800507c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800507e:	e005      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	61bb      	str	r3, [r7, #24]
      break;
 8005084:	e002      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005086:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005088:	61bb      	str	r3, [r7, #24]
      break;
 800508a:	bf00      	nop
  }

  return sysclockfreq;
 800508c:	69bb      	ldr	r3, [r7, #24]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3724      	adds	r7, #36	; 0x24
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400
 80050a0:	03d09000 	.word	0x03d09000
 80050a4:	003d0900 	.word	0x003d0900
 80050a8:	017d7840 	.word	0x017d7840
 80050ac:	46000000 	.word	0x46000000
 80050b0:	4c742400 	.word	0x4c742400
 80050b4:	4a742400 	.word	0x4a742400
 80050b8:	4bbebc20 	.word	0x4bbebc20

080050bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050c2:	f7ff fe81 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 80050c6:	4602      	mov	r2, r0
 80050c8:	4b10      	ldr	r3, [pc, #64]	; (800510c <HAL_RCC_GetHCLKFreq+0x50>)
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	0a1b      	lsrs	r3, r3, #8
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	490f      	ldr	r1, [pc, #60]	; (8005110 <HAL_RCC_GetHCLKFreq+0x54>)
 80050d4:	5ccb      	ldrb	r3, [r1, r3]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	fa22 f303 	lsr.w	r3, r2, r3
 80050de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <HAL_RCC_GetHCLKFreq+0x50>)
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	4a09      	ldr	r2, [pc, #36]	; (8005110 <HAL_RCC_GetHCLKFreq+0x54>)
 80050ea:	5cd3      	ldrb	r3, [r2, r3]
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	fa22 f303 	lsr.w	r3, r2, r3
 80050f6:	4a07      	ldr	r2, [pc, #28]	; (8005114 <HAL_RCC_GetHCLKFreq+0x58>)
 80050f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050fa:	4a07      	ldr	r2, [pc, #28]	; (8005118 <HAL_RCC_GetHCLKFreq+0x5c>)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005100:	4b04      	ldr	r3, [pc, #16]	; (8005114 <HAL_RCC_GetHCLKFreq+0x58>)
 8005102:	681b      	ldr	r3, [r3, #0]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	58024400 	.word	0x58024400
 8005110:	080242a4 	.word	0x080242a4
 8005114:	24000004 	.word	0x24000004
 8005118:	24000000 	.word	0x24000000

0800511c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005120:	f7ff ffcc 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 8005124:	4602      	mov	r2, r0
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	4904      	ldr	r1, [pc, #16]	; (8005144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005132:	5ccb      	ldrb	r3, [r1, r3]
 8005134:	f003 031f 	and.w	r3, r3, #31
 8005138:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800513c:	4618      	mov	r0, r3
 800513e:	bd80      	pop	{r7, pc}
 8005140:	58024400 	.word	0x58024400
 8005144:	080242a4 	.word	0x080242a4

08005148 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	223f      	movs	r2, #63	; 0x3f
 8005156:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005158:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <HAL_RCC_GetClockConfig+0x7c>)
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0207 	and.w	r2, r3, #7
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005164:	4b17      	ldr	r3, [pc, #92]	; (80051c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005170:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	f003 020f 	and.w	r2, r3, #15
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800517c:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <HAL_RCC_GetClockConfig+0x7c>)
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005188:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <HAL_RCC_GetClockConfig+0x7c>)
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80051a0:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <HAL_RCC_GetClockConfig+0x7c>)
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <HAL_RCC_GetClockConfig+0x80>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	601a      	str	r2, [r3, #0]
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	58024400 	.word	0x58024400
 80051c8:	52002000 	.word	0x52002000

080051cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d0:	b0cc      	sub	sp, #304	; 0x130
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051d8:	2300      	movs	r3, #0
 80051da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80051f0:	2500      	movs	r5, #0
 80051f2:	ea54 0305 	orrs.w	r3, r4, r5
 80051f6:	d049      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80051f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005202:	d02f      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005204:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005208:	d828      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800520a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800520e:	d01a      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005214:	d822      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800521a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521e:	d007      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005220:	e01c      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005222:	4bb8      	ldr	r3, [pc, #736]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	4ab7      	ldr	r2, [pc, #732]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800522c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800522e:	e01a      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005230:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005234:	3308      	adds	r3, #8
 8005236:	2102      	movs	r1, #2
 8005238:	4618      	mov	r0, r3
 800523a:	f002 fba1 	bl	8007980 <RCCEx_PLL2_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005244:	e00f      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005246:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800524a:	3328      	adds	r3, #40	; 0x28
 800524c:	2102      	movs	r1, #2
 800524e:	4618      	mov	r0, r3
 8005250:	f002 fc48 	bl	8007ae4 <RCCEx_PLL3_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800525a:	e004      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005262:	e000      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005266:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800526e:	4ba5      	ldr	r3, [pc, #660]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005272:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005276:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800527a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527c:	4aa1      	ldr	r2, [pc, #644]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800527e:	430b      	orrs	r3, r1
 8005280:	6513      	str	r3, [r2, #80]	; 0x50
 8005282:	e003      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005284:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005288:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800528c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005298:	f04f 0900 	mov.w	r9, #0
 800529c:	ea58 0309 	orrs.w	r3, r8, r9
 80052a0:	d047      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d82a      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052c9 	.word	0x080052c9
 80052b8:	080052d7 	.word	0x080052d7
 80052bc:	080052ed 	.word	0x080052ed
 80052c0:	0800530b 	.word	0x0800530b
 80052c4:	0800530b 	.word	0x0800530b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c8:	4b8e      	ldr	r3, [pc, #568]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	4a8d      	ldr	r2, [pc, #564]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052d4:	e01a      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052da:	3308      	adds	r3, #8
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f002 fb4e 	bl	8007980 <RCCEx_PLL2_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052ea:	e00f      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052f0:	3328      	adds	r3, #40	; 0x28
 80052f2:	2100      	movs	r1, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f002 fbf5 	bl	8007ae4 <RCCEx_PLL3_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005300:	e004      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005308:	e000      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800530a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800530c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005314:	4b7b      	ldr	r3, [pc, #492]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005318:	f023 0107 	bic.w	r1, r3, #7
 800531c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005322:	4a78      	ldr	r2, [pc, #480]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005324:	430b      	orrs	r3, r1
 8005326:	6513      	str	r3, [r2, #80]	; 0x50
 8005328:	e003      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800532e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005332:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800533e:	f04f 0b00 	mov.w	fp, #0
 8005342:	ea5a 030b 	orrs.w	r3, sl, fp
 8005346:	d04c      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005348:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800534c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800534e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005352:	d030      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005358:	d829      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800535a:	2bc0      	cmp	r3, #192	; 0xc0
 800535c:	d02d      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800535e:	2bc0      	cmp	r3, #192	; 0xc0
 8005360:	d825      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	d018      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005366:	2b80      	cmp	r3, #128	; 0x80
 8005368:	d821      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d007      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005372:	e01c      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005374:	4b63      	ldr	r3, [pc, #396]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	4a62      	ldr	r2, [pc, #392]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800537a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005380:	e01c      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005382:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005386:	3308      	adds	r3, #8
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f002 faf8 	bl	8007980 <RCCEx_PLL2_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005396:	e011      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005398:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800539c:	3328      	adds	r3, #40	; 0x28
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f002 fb9f 	bl	8007ae4 <RCCEx_PLL3_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053ac:	e006      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80053b4:	e002      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053b6:	bf00      	nop
 80053b8:	e000      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80053c4:	4b4f      	ldr	r3, [pc, #316]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80053cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d2:	4a4c      	ldr	r2, [pc, #304]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6513      	str	r3, [r2, #80]	; 0x50
 80053d8:	e003      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80053ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80053f2:	2300      	movs	r3, #0
 80053f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80053f8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80053fc:	460b      	mov	r3, r1
 80053fe:	4313      	orrs	r3, r2
 8005400:	d053      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005402:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005406:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800540a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800540e:	d035      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005410:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005414:	d82e      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005416:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800541a:	d031      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800541c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005420:	d828      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005426:	d01a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800542c:	d822      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005436:	d007      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005438:	e01c      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543a:	4b32      	ldr	r3, [pc, #200]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	4a31      	ldr	r2, [pc, #196]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005446:	e01c      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005448:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800544c:	3308      	adds	r3, #8
 800544e:	2100      	movs	r1, #0
 8005450:	4618      	mov	r0, r3
 8005452:	f002 fa95 	bl	8007980 <RCCEx_PLL2_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800545c:	e011      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800545e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005462:	3328      	adds	r3, #40	; 0x28
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f002 fb3c 	bl	8007ae4 <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005472:	e006      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800547a:	e002      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800547c:	bf00      	nop
 800547e:	e000      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005482:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10b      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800548a:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005492:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005496:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800549a:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800549c:	430b      	orrs	r3, r1
 800549e:	6593      	str	r3, [r2, #88]	; 0x58
 80054a0:	e003      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80054a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80054aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80054b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054ba:	2300      	movs	r3, #0
 80054bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80054c4:	460b      	mov	r3, r1
 80054c6:	4313      	orrs	r3, r2
 80054c8:	d056      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80054ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054d6:	d038      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80054d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054dc:	d831      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054e2:	d034      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80054e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054e8:	d82b      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ee:	d01d      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80054f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054f4:	d825      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d006      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80054fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054fe:	d00a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005500:	e01f      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005502:	bf00      	nop
 8005504:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005508:	4ba2      	ldr	r3, [pc, #648]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	4aa1      	ldr	r2, [pc, #644]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800550e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005514:	e01c      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005516:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800551a:	3308      	adds	r3, #8
 800551c:	2100      	movs	r1, #0
 800551e:	4618      	mov	r0, r3
 8005520:	f002 fa2e 	bl	8007980 <RCCEx_PLL2_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800552a:	e011      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800552c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005530:	3328      	adds	r3, #40	; 0x28
 8005532:	2100      	movs	r1, #0
 8005534:	4618      	mov	r0, r3
 8005536:	f002 fad5 	bl	8007ae4 <RCCEx_PLL3_Config>
 800553a:	4603      	mov	r3, r0
 800553c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005540:	e006      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005548:	e002      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800554e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005550:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005558:	4b8e      	ldr	r3, [pc, #568]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005560:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005564:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005568:	4a8a      	ldr	r2, [pc, #552]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800556a:	430b      	orrs	r3, r1
 800556c:	6593      	str	r3, [r2, #88]	; 0x58
 800556e:	e003      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005574:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005578:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005584:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005588:	2300      	movs	r3, #0
 800558a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800558e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005592:	460b      	mov	r3, r1
 8005594:	4313      	orrs	r3, r2
 8005596:	d03a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005598:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559e:	2b30      	cmp	r3, #48	; 0x30
 80055a0:	d01f      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80055a2:	2b30      	cmp	r3, #48	; 0x30
 80055a4:	d819      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d00c      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d815      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d019      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80055b2:	2b10      	cmp	r3, #16
 80055b4:	d111      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b6:	4b77      	ldr	r3, [pc, #476]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	4a76      	ldr	r2, [pc, #472]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80055c2:	e011      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055c8:	3308      	adds	r3, #8
 80055ca:	2102      	movs	r1, #2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f002 f9d7 	bl	8007980 <RCCEx_PLL2_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80055d8:	e006      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80055e0:	e002      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80055e2:	bf00      	nop
 80055e4:	e000      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80055e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80055f0:	4b68      	ldr	r3, [pc, #416]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80055f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fe:	4a65      	ldr	r2, [pc, #404]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005600:	430b      	orrs	r3, r1
 8005602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005604:	e003      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005606:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800560a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800560e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800561a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800561e:	2300      	movs	r3, #0
 8005620:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005624:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005628:	460b      	mov	r3, r1
 800562a:	4313      	orrs	r3, r2
 800562c:	d051      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800562e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005638:	d035      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800563a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800563e:	d82e      	bhi.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005640:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005644:	d031      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005646:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800564a:	d828      	bhi.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800564c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005650:	d01a      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005656:	d822      	bhi.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800565c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005660:	d007      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005662:	e01c      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005664:	4b4b      	ldr	r3, [pc, #300]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	4a4a      	ldr	r2, [pc, #296]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800566a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800566e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005670:	e01c      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005672:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005676:	3308      	adds	r3, #8
 8005678:	2100      	movs	r1, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f002 f980 	bl	8007980 <RCCEx_PLL2_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005686:	e011      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005688:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800568c:	3328      	adds	r3, #40	; 0x28
 800568e:	2100      	movs	r1, #0
 8005690:	4618      	mov	r0, r3
 8005692:	f002 fa27 	bl	8007ae4 <RCCEx_PLL3_Config>
 8005696:	4603      	mov	r3, r0
 8005698:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800569c:	e006      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80056a4:	e002      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056a6:	bf00      	nop
 80056a8:	e000      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056b4:	4b37      	ldr	r3, [pc, #220]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80056bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c2:	4a34      	ldr	r2, [pc, #208]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056c4:	430b      	orrs	r3, r1
 80056c6:	6513      	str	r3, [r2, #80]	; 0x50
 80056c8:	e003      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80056de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056e2:	2300      	movs	r3, #0
 80056e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4313      	orrs	r3, r2
 80056f0:	d056      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80056f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056fc:	d033      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80056fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005702:	d82c      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005704:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005708:	d02f      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800570a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800570e:	d826      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005710:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005714:	d02b      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005716:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800571a:	d820      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800571c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005720:	d012      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005726:	d81a      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d022      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800572c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005730:	d115      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005732:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005736:	3308      	adds	r3, #8
 8005738:	2101      	movs	r1, #1
 800573a:	4618      	mov	r0, r3
 800573c:	f002 f920 	bl	8007980 <RCCEx_PLL2_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005746:	e015      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005748:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800574c:	3328      	adds	r3, #40	; 0x28
 800574e:	2101      	movs	r1, #1
 8005750:	4618      	mov	r0, r3
 8005752:	f002 f9c7 	bl	8007ae4 <RCCEx_PLL3_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800575c:	e00a      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005764:	e006      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005766:	bf00      	nop
 8005768:	e004      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800576a:	bf00      	nop
 800576c:	e002      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800576e:	bf00      	nop
 8005770:	e000      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005774:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10d      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800577e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005780:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005784:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800578a:	4a02      	ldr	r2, [pc, #8]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800578c:	430b      	orrs	r3, r1
 800578e:	6513      	str	r3, [r2, #80]	; 0x50
 8005790:	e006      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005792:	bf00      	nop
 8005794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005798:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800579c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80057ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057b0:	2300      	movs	r3, #0
 80057b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80057b6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80057ba:	460b      	mov	r3, r1
 80057bc:	4313      	orrs	r3, r2
 80057be:	d055      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80057c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057cc:	d033      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80057ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057d2:	d82c      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d8:	d02f      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80057da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057de:	d826      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057e4:	d02b      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80057e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057ea:	d820      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f0:	d012      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80057f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f6:	d81a      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d022      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80057fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005800:	d115      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005802:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005806:	3308      	adds	r3, #8
 8005808:	2101      	movs	r1, #1
 800580a:	4618      	mov	r0, r3
 800580c:	f002 f8b8 	bl	8007980 <RCCEx_PLL2_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005816:	e015      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005818:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800581c:	3328      	adds	r3, #40	; 0x28
 800581e:	2101      	movs	r1, #1
 8005820:	4618      	mov	r0, r3
 8005822:	f002 f95f 	bl	8007ae4 <RCCEx_PLL3_Config>
 8005826:	4603      	mov	r3, r0
 8005828:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800582c:	e00a      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005834:	e006      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005836:	bf00      	nop
 8005838:	e004      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800583a:	bf00      	nop
 800583c:	e002      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800583e:	bf00      	nop
 8005840:	e000      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005844:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10b      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800584c:	4bb6      	ldr	r3, [pc, #728]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800584e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005850:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005854:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005858:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800585c:	4ab2      	ldr	r2, [pc, #712]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800585e:	430b      	orrs	r3, r1
 8005860:	6593      	str	r3, [r2, #88]	; 0x58
 8005862:	e003      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005864:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005868:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800586c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800587c:	2300      	movs	r3, #0
 800587e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005882:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005886:	460b      	mov	r3, r1
 8005888:	4313      	orrs	r3, r2
 800588a:	d02a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800588c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005892:	2b00      	cmp	r3, #0
 8005894:	d011      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589a:	d10a      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800589c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058a0:	3308      	adds	r3, #8
 80058a2:	2101      	movs	r1, #1
 80058a4:	4618      	mov	r0, r3
 80058a6:	f002 f86b 	bl	8007980 <RCCEx_PLL2_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80058b0:	e004      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80058b8:	e000      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80058ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80058c4:	4b98      	ldr	r3, [pc, #608]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80058cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d2:	4a95      	ldr	r2, [pc, #596]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058d4:	430b      	orrs	r3, r1
 80058d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058d8:	e003      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80058de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80058ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058f2:	2300      	movs	r3, #0
 80058f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058f8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d037      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005902:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590c:	d00e      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800590e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005912:	d816      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d018      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800591c:	d111      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591e:	4b82      	ldr	r3, [pc, #520]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	4a81      	ldr	r2, [pc, #516]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005928:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800592a:	e00f      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800592c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005930:	3308      	adds	r3, #8
 8005932:	2101      	movs	r1, #1
 8005934:	4618      	mov	r0, r3
 8005936:	f002 f823 	bl	8007980 <RCCEx_PLL2_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005940:	e004      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005948:	e000      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800594a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800594c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005954:	4b74      	ldr	r3, [pc, #464]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005958:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800595c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005962:	4a71      	ldr	r2, [pc, #452]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005964:	430b      	orrs	r3, r1
 8005966:	6513      	str	r3, [r2, #80]	; 0x50
 8005968:	e003      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800596e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005972:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800597e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005982:	2300      	movs	r3, #0
 8005984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005988:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800598c:	460b      	mov	r3, r1
 800598e:	4313      	orrs	r3, r2
 8005990:	d03a      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005992:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005998:	2b03      	cmp	r3, #3
 800599a:	d81d      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059e1 	.word	0x080059e1
 80059a8:	080059b5 	.word	0x080059b5
 80059ac:	080059c3 	.word	0x080059c3
 80059b0:	080059e1 	.word	0x080059e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b4:	4b5c      	ldr	r3, [pc, #368]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4a5b      	ldr	r2, [pc, #364]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059c0:	e00f      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059c6:	3308      	adds	r3, #8
 80059c8:	2102      	movs	r1, #2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 ffd8 	bl	8007980 <RCCEx_PLL2_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059d6:	e004      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80059de:	e000      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80059e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80059ea:	4b4f      	ldr	r3, [pc, #316]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ee:	f023 0103 	bic.w	r1, r3, #3
 80059f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f8:	4a4b      	ldr	r2, [pc, #300]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059fa:	430b      	orrs	r3, r1
 80059fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059fe:	e003      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a04:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005a14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005a22:	460b      	mov	r3, r1
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f000 80a0 	beq.w	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a2a:	4b40      	ldr	r3, [pc, #256]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a3f      	ldr	r2, [pc, #252]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a36:	f7fb ff11 	bl	800185c <HAL_GetTick>
 8005a3a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a3e:	e00b      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a40:	f7fb ff0c 	bl	800185c <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b64      	cmp	r3, #100	; 0x64
 8005a4e:	d903      	bls.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005a56:	e005      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a58:	4b34      	ldr	r3, [pc, #208]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0ed      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005a64:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d17a      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a6c:	4b2e      	ldr	r3, [pc, #184]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a78:	4053      	eors	r3, r2
 8005a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d015      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a82:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a8e:	4b26      	ldr	r3, [pc, #152]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a92:	4a25      	ldr	r2, [pc, #148]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a98:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a9a:	4b23      	ldr	r3, [pc, #140]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9e:	4a22      	ldr	r2, [pc, #136]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005aa6:	4a20      	ldr	r2, [pc, #128]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005aa8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005aac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005aae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ab2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aba:	d118      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fb fece 	bl	800185c <HAL_GetTick>
 8005ac0:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ac4:	e00d      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac6:	f7fb fec9 	bl	800185c <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ad0:	1ad2      	subs	r2, r2, r3
 8005ad2:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d903      	bls.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8005ae0:	e005      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0eb      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005aee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d130      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005af6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005afa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b06:	d115      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005b08:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b18:	091a      	lsrs	r2, r3, #4
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	4a02      	ldr	r2, [pc, #8]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6113      	str	r3, [r2, #16]
 8005b24:	e00c      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005b26:	bf00      	nop
 8005b28:	58024400 	.word	0x58024400
 8005b2c:	58024800 	.word	0x58024800
 8005b30:	00ffffcf 	.word	0x00ffffcf
 8005b34:	4bd4      	ldr	r3, [pc, #848]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	4ad3      	ldr	r2, [pc, #844]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b3e:	6113      	str	r3, [r2, #16]
 8005b40:	4bd1      	ldr	r3, [pc, #836]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b42:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005b44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b50:	4acd      	ldr	r2, [pc, #820]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b52:	430b      	orrs	r3, r1
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
 8005b56:	e008      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b5c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8005b60:	e003      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b62:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b66:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f002 0301 	and.w	r3, r2, #1
 8005b76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f000 808b 	beq.w	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b94:	2b28      	cmp	r3, #40	; 0x28
 8005b96:	d86b      	bhi.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b98:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9e:	bf00      	nop
 8005ba0:	08005c79 	.word	0x08005c79
 8005ba4:	08005c71 	.word	0x08005c71
 8005ba8:	08005c71 	.word	0x08005c71
 8005bac:	08005c71 	.word	0x08005c71
 8005bb0:	08005c71 	.word	0x08005c71
 8005bb4:	08005c71 	.word	0x08005c71
 8005bb8:	08005c71 	.word	0x08005c71
 8005bbc:	08005c71 	.word	0x08005c71
 8005bc0:	08005c45 	.word	0x08005c45
 8005bc4:	08005c71 	.word	0x08005c71
 8005bc8:	08005c71 	.word	0x08005c71
 8005bcc:	08005c71 	.word	0x08005c71
 8005bd0:	08005c71 	.word	0x08005c71
 8005bd4:	08005c71 	.word	0x08005c71
 8005bd8:	08005c71 	.word	0x08005c71
 8005bdc:	08005c71 	.word	0x08005c71
 8005be0:	08005c5b 	.word	0x08005c5b
 8005be4:	08005c71 	.word	0x08005c71
 8005be8:	08005c71 	.word	0x08005c71
 8005bec:	08005c71 	.word	0x08005c71
 8005bf0:	08005c71 	.word	0x08005c71
 8005bf4:	08005c71 	.word	0x08005c71
 8005bf8:	08005c71 	.word	0x08005c71
 8005bfc:	08005c71 	.word	0x08005c71
 8005c00:	08005c79 	.word	0x08005c79
 8005c04:	08005c71 	.word	0x08005c71
 8005c08:	08005c71 	.word	0x08005c71
 8005c0c:	08005c71 	.word	0x08005c71
 8005c10:	08005c71 	.word	0x08005c71
 8005c14:	08005c71 	.word	0x08005c71
 8005c18:	08005c71 	.word	0x08005c71
 8005c1c:	08005c71 	.word	0x08005c71
 8005c20:	08005c79 	.word	0x08005c79
 8005c24:	08005c71 	.word	0x08005c71
 8005c28:	08005c71 	.word	0x08005c71
 8005c2c:	08005c71 	.word	0x08005c71
 8005c30:	08005c71 	.word	0x08005c71
 8005c34:	08005c71 	.word	0x08005c71
 8005c38:	08005c71 	.word	0x08005c71
 8005c3c:	08005c71 	.word	0x08005c71
 8005c40:	08005c79 	.word	0x08005c79
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c48:	3308      	adds	r3, #8
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 fe97 	bl	8007980 <RCCEx_PLL2_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c58:	e00f      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c5e:	3328      	adds	r3, #40	; 0x28
 8005c60:	2101      	movs	r1, #1
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 ff3e 	bl	8007ae4 <RCCEx_PLL3_Config>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c6e:	e004      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005c76:	e000      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c7a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c82:	4b81      	ldr	r3, [pc, #516]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c86:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c92:	4a7d      	ldr	r2, [pc, #500]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c94:	430b      	orrs	r3, r1
 8005c96:	6553      	str	r3, [r2, #84]	; 0x54
 8005c98:	e003      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c9e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f002 0302 	and.w	r3, r2, #2
 8005cae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005cb8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	d042      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005cc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc8:	2b05      	cmp	r3, #5
 8005cca:	d825      	bhi.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005d21 	.word	0x08005d21
 8005cd8:	08005ced 	.word	0x08005ced
 8005cdc:	08005d03 	.word	0x08005d03
 8005ce0:	08005d21 	.word	0x08005d21
 8005ce4:	08005d21 	.word	0x08005d21
 8005ce8:	08005d21 	.word	0x08005d21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 fe43 	bl	8007980 <RCCEx_PLL2_Config>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d00:	e00f      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d06:	3328      	adds	r3, #40	; 0x28
 8005d08:	2101      	movs	r1, #1
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 feea 	bl	8007ae4 <RCCEx_PLL3_Config>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d16:	e004      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005d1e:	e000      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10a      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d2a:	4b57      	ldr	r3, [pc, #348]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2e:	f023 0107 	bic.w	r1, r3, #7
 8005d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d38:	4a53      	ldr	r2, [pc, #332]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d3a:	430b      	orrs	r3, r1
 8005d3c:	6553      	str	r3, [r2, #84]	; 0x54
 8005d3e:	e003      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d44:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f002 0304 	and.w	r3, r2, #4
 8005d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4313      	orrs	r3, r2
 8005d66:	d044      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d70:	2b05      	cmp	r3, #5
 8005d72:	d825      	bhi.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005dc9 	.word	0x08005dc9
 8005d80:	08005d95 	.word	0x08005d95
 8005d84:	08005dab 	.word	0x08005dab
 8005d88:	08005dc9 	.word	0x08005dc9
 8005d8c:	08005dc9 	.word	0x08005dc9
 8005d90:	08005dc9 	.word	0x08005dc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d98:	3308      	adds	r3, #8
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 fdef 	bl	8007980 <RCCEx_PLL2_Config>
 8005da2:	4603      	mov	r3, r0
 8005da4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005da8:	e00f      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dae:	3328      	adds	r3, #40	; 0x28
 8005db0:	2101      	movs	r1, #1
 8005db2:	4618      	mov	r0, r3
 8005db4:	f001 fe96 	bl	8007ae4 <RCCEx_PLL3_Config>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005dbe:	e004      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005dc6:	e000      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10b      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dd2:	4b2d      	ldr	r3, [pc, #180]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd6:	f023 0107 	bic.w	r1, r3, #7
 8005dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005de2:	4a29      	ldr	r2, [pc, #164]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005de4:	430b      	orrs	r3, r1
 8005de6:	6593      	str	r3, [r2, #88]	; 0x58
 8005de8:	e003      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005dee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f002 0320 	and.w	r3, r2, #32
 8005dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e02:	2300      	movs	r3, #0
 8005e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	d057      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005e12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e1e:	d035      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e24:	d82c      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2a:	d031      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e30:	d826      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e36:	d02d      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005e38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e3c:	d820      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e42:	d012      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e48:	d81a      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d024      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e52:	d115      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e58:	3308      	adds	r3, #8
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 fd8f 	bl	8007980 <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e68:	e017      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e6e:	3328      	adds	r3, #40	; 0x28
 8005e70:	2102      	movs	r1, #2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f001 fe36 	bl	8007ae4 <RCCEx_PLL3_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e7e:	e00c      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005e86:	e008      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005e88:	58024400 	.word	0x58024400
        break;
 8005e8c:	bf00      	nop
 8005e8e:	e004      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005e90:	bf00      	nop
 8005e92:	e002      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005e94:	bf00      	nop
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10b      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ea2:	4bc2      	ldr	r3, [pc, #776]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005eaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb2:	4abe      	ldr	r2, [pc, #760]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	6553      	str	r3, [r2, #84]	; 0x54
 8005eb8:	e003      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ebe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ed8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	d055      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ee6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005eea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005eee:	d033      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005ef0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ef4:	d82c      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efa:	d02f      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	d826      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f06:	d02b      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005f08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f0c:	d820      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f12:	d012      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f18:	d81a      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d022      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f22:	d115      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f28:	3308      	adds	r3, #8
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 fd27 	bl	8007980 <RCCEx_PLL2_Config>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f38:	e015      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f3e:	3328      	adds	r3, #40	; 0x28
 8005f40:	2102      	movs	r1, #2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 fdce 	bl	8007ae4 <RCCEx_PLL3_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f4e:	e00a      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005f56:	e006      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005f58:	bf00      	nop
 8005f5a:	e004      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005f5c:	bf00      	nop
 8005f5e:	e002      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005f60:	bf00      	nop
 8005f62:	e000      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f66:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10b      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f6e:	4b8f      	ldr	r3, [pc, #572]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f72:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f7e:	4a8b      	ldr	r2, [pc, #556]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	6593      	str	r3, [r2, #88]	; 0x58
 8005f84:	e003      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f86:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f8a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005f9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fa4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4313      	orrs	r3, r2
 8005fac:	d055      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fba:	d033      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005fbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fc0:	d82c      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc6:	d02f      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fcc:	d826      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005fce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fd2:	d02b      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005fd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fd8:	d820      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fde:	d012      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fe4:	d81a      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d022      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fee:	d115      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 fcc1 	bl	8007980 <RCCEx_PLL2_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006004:	e015      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006006:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800600a:	3328      	adds	r3, #40	; 0x28
 800600c:	2102      	movs	r1, #2
 800600e:	4618      	mov	r0, r3
 8006010:	f001 fd68 	bl	8007ae4 <RCCEx_PLL3_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800601a:	e00a      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006022:	e006      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006024:	bf00      	nop
 8006026:	e004      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006028:	bf00      	nop
 800602a:	e002      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006032:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800603a:	4b5c      	ldr	r3, [pc, #368]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800603c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603e:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006042:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006046:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800604a:	4a58      	ldr	r2, [pc, #352]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800604c:	430b      	orrs	r3, r1
 800604e:	6593      	str	r3, [r2, #88]	; 0x58
 8006050:	e003      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006056:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800605a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f002 0308 	and.w	r3, r2, #8
 8006066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800606a:	2300      	movs	r3, #0
 800606c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006070:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006074:	460b      	mov	r3, r1
 8006076:	4313      	orrs	r3, r2
 8006078:	d01e      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800607a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006086:	d10c      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006088:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800608c:	3328      	adds	r3, #40	; 0x28
 800608e:	2102      	movs	r1, #2
 8006090:	4618      	mov	r0, r3
 8006092:	f001 fd27 	bl	8007ae4 <RCCEx_PLL3_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80060a2:	4b42      	ldr	r3, [pc, #264]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b2:	4a3e      	ldr	r2, [pc, #248]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060b4:	430b      	orrs	r3, r1
 80060b6:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	f002 0310 	and.w	r3, r2, #16
 80060c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060c8:	2300      	movs	r3, #0
 80060ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80060ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80060d2:	460b      	mov	r3, r1
 80060d4:	4313      	orrs	r3, r2
 80060d6:	d01e      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80060d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e4:	d10c      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060ea:	3328      	adds	r3, #40	; 0x28
 80060ec:	2102      	movs	r1, #2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 fcf8 	bl	8007ae4 <RCCEx_PLL3_Config>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006100:	4b2a      	ldr	r3, [pc, #168]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006104:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006108:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800610c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006110:	4a26      	ldr	r2, [pc, #152]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006112:	430b      	orrs	r3, r1
 8006114:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006116:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006122:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006126:	2300      	movs	r3, #0
 8006128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800612c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006130:	460b      	mov	r3, r1
 8006132:	4313      	orrs	r3, r2
 8006134:	d040      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006136:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800613a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800613e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006142:	d022      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006148:	d81b      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800614e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006152:	d00b      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006154:	e015      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006156:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800615a:	3308      	adds	r3, #8
 800615c:	2100      	movs	r1, #0
 800615e:	4618      	mov	r0, r3
 8006160:	f001 fc0e 	bl	8007980 <RCCEx_PLL2_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800616a:	e00f      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800616c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006170:	3328      	adds	r3, #40	; 0x28
 8006172:	2102      	movs	r1, #2
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fcb5 	bl	8007ae4 <RCCEx_PLL3_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006180:	e004      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006188:	e000      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800618a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10d      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006198:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800619c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061a4:	4a01      	ldr	r2, [pc, #4]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061a6:	430b      	orrs	r3, r1
 80061a8:	6593      	str	r3, [r2, #88]	; 0x58
 80061aa:	e005      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80061ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061b4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80061c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80061c6:	2300      	movs	r3, #0
 80061c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80061ce:	460b      	mov	r3, r1
 80061d0:	4313      	orrs	r3, r2
 80061d2:	d03b      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80061d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061e0:	d01f      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80061e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061e6:	d818      	bhi.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80061e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ec:	d003      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80061ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061f2:	d007      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80061f4:	e011      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061f6:	4b64      	ldr	r3, [pc, #400]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	4a63      	ldr	r2, [pc, #396]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006200:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006202:	e00f      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006204:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006208:	3328      	adds	r3, #40	; 0x28
 800620a:	2101      	movs	r1, #1
 800620c:	4618      	mov	r0, r3
 800620e:	f001 fc69 	bl	8007ae4 <RCCEx_PLL3_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006218:	e004      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006220:	e000      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006224:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800622c:	4b56      	ldr	r3, [pc, #344]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800622e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006230:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006234:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800623c:	4a52      	ldr	r2, [pc, #328]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800623e:	430b      	orrs	r3, r1
 8006240:	6553      	str	r3, [r2, #84]	; 0x54
 8006242:	e003      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006244:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006248:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800624c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006258:	673b      	str	r3, [r7, #112]	; 0x70
 800625a:	2300      	movs	r3, #0
 800625c:	677b      	str	r3, [r7, #116]	; 0x74
 800625e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006262:	460b      	mov	r3, r1
 8006264:	4313      	orrs	r3, r2
 8006266:	d031      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006268:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800626c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006276:	d007      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006278:	e011      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800627a:	4b43      	ldr	r3, [pc, #268]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627e:	4a42      	ldr	r2, [pc, #264]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006284:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006286:	e00e      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006288:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800628c:	3308      	adds	r3, #8
 800628e:	2102      	movs	r1, #2
 8006290:	4618      	mov	r0, r3
 8006292:	f001 fb75 	bl	8007980 <RCCEx_PLL2_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800629c:	e003      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80062a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80062ae:	4b36      	ldr	r3, [pc, #216]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062bc:	4a32      	ldr	r2, [pc, #200]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062be:	430b      	orrs	r3, r1
 80062c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062c2:	e003      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062c8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80062d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80062da:	2300      	movs	r3, #0
 80062dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80062e2:	460b      	mov	r3, r1
 80062e4:	4313      	orrs	r3, r2
 80062e6:	d00c      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062ec:	3328      	adds	r3, #40	; 0x28
 80062ee:	2102      	movs	r1, #2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 fbf7 	bl	8007ae4 <RCCEx_PLL3_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006302:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800630e:	663b      	str	r3, [r7, #96]	; 0x60
 8006310:	2300      	movs	r3, #0
 8006312:	667b      	str	r3, [r7, #100]	; 0x64
 8006314:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006318:	460b      	mov	r3, r1
 800631a:	4313      	orrs	r3, r2
 800631c:	d03a      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800631e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800632a:	d018      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800632c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006330:	d811      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006336:	d014      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800633c:	d80b      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d011      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006346:	d106      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	4a0e      	ldr	r2, [pc, #56]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800634e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006354:	e008      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800635c:	e004      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800635e:	bf00      	nop
 8006360:	e002      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006362:	bf00      	nop
 8006364:	e000      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006368:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10d      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006370:	4b05      	ldr	r3, [pc, #20]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006378:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800637c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006380:	4a01      	ldr	r2, [pc, #4]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006382:	430b      	orrs	r3, r1
 8006384:	6553      	str	r3, [r2, #84]	; 0x54
 8006386:	e005      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006388:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006390:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006394:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80063a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80063a2:	2300      	movs	r3, #0
 80063a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80063aa:	460b      	mov	r3, r1
 80063ac:	4313      	orrs	r3, r2
 80063ae:	d009      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063b0:	4baa      	ldr	r3, [pc, #680]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80063b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063be:	4aa7      	ldr	r2, [pc, #668]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063c0:	430b      	orrs	r3, r1
 80063c2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80063c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80063d0:	653b      	str	r3, [r7, #80]	; 0x50
 80063d2:	2300      	movs	r3, #0
 80063d4:	657b      	str	r3, [r7, #84]	; 0x54
 80063d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80063da:	460b      	mov	r3, r1
 80063dc:	4313      	orrs	r3, r2
 80063de:	d00a      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80063e0:	4b9e      	ldr	r3, [pc, #632]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80063e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80063f0:	4a9a      	ldr	r2, [pc, #616]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063f2:	430b      	orrs	r3, r1
 80063f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006402:	64bb      	str	r3, [r7, #72]	; 0x48
 8006404:	2300      	movs	r3, #0
 8006406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006408:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800640c:	460b      	mov	r3, r1
 800640e:	4313      	orrs	r3, r2
 8006410:	d009      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006412:	4b92      	ldr	r3, [pc, #584]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006416:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800641a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800641e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006420:	4a8e      	ldr	r2, [pc, #568]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006422:	430b      	orrs	r3, r1
 8006424:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006426:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006432:	643b      	str	r3, [r7, #64]	; 0x40
 8006434:	2300      	movs	r3, #0
 8006436:	647b      	str	r3, [r7, #68]	; 0x44
 8006438:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800643c:	460b      	mov	r3, r1
 800643e:	4313      	orrs	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006442:	4b86      	ldr	r3, [pc, #536]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	4a85      	ldr	r2, [pc, #532]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006448:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800644c:	6113      	str	r3, [r2, #16]
 800644e:	4b83      	ldr	r3, [pc, #524]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006450:	6919      	ldr	r1, [r3, #16]
 8006452:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006456:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800645a:	4a80      	ldr	r2, [pc, #512]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800645c:	430b      	orrs	r3, r1
 800645e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006460:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800646c:	63bb      	str	r3, [r7, #56]	; 0x38
 800646e:	2300      	movs	r3, #0
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006472:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006476:	460b      	mov	r3, r1
 8006478:	4313      	orrs	r3, r2
 800647a:	d009      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800647c:	4b77      	ldr	r3, [pc, #476]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800647e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006480:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006484:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648a:	4a74      	ldr	r2, [pc, #464]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800648c:	430b      	orrs	r3, r1
 800648e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006490:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800649c:	633b      	str	r3, [r7, #48]	; 0x30
 800649e:	2300      	movs	r3, #0
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
 80064a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80064a6:	460b      	mov	r3, r1
 80064a8:	4313      	orrs	r3, r2
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064ac:	4b6b      	ldr	r3, [pc, #428]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80064b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064bc:	4a67      	ldr	r2, [pc, #412]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064be:	430b      	orrs	r3, r1
 80064c0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80064c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ca:	2100      	movs	r1, #0
 80064cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80064d8:	460b      	mov	r3, r1
 80064da:	4313      	orrs	r3, r2
 80064dc:	d011      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064e2:	3308      	adds	r3, #8
 80064e4:	2100      	movs	r1, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 fa4a 	bl	8007980 <RCCEx_PLL2_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80064f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006502:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	2100      	movs	r1, #0
 800650c:	6239      	str	r1, [r7, #32]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
 8006514:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006518:	460b      	mov	r3, r1
 800651a:	4313      	orrs	r3, r2
 800651c:	d011      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800651e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006522:	3308      	adds	r3, #8
 8006524:	2101      	movs	r1, #1
 8006526:	4618      	mov	r0, r3
 8006528:	f001 fa2a 	bl	8007980 <RCCEx_PLL2_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006532:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800653e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006542:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	2100      	movs	r1, #0
 800654c:	61b9      	str	r1, [r7, #24]
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006558:	460b      	mov	r3, r1
 800655a:	4313      	orrs	r3, r2
 800655c:	d011      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800655e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006562:	3308      	adds	r3, #8
 8006564:	2102      	movs	r1, #2
 8006566:	4618      	mov	r0, r3
 8006568:	f001 fa0a 	bl	8007980 <RCCEx_PLL2_Config>
 800656c:	4603      	mov	r3, r0
 800656e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006572:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800657e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006582:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	2100      	movs	r1, #0
 800658c:	6139      	str	r1, [r7, #16]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006598:	460b      	mov	r3, r1
 800659a:	4313      	orrs	r3, r2
 800659c:	d011      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800659e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065a2:	3328      	adds	r3, #40	; 0x28
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 fa9c 	bl	8007ae4 <RCCEx_PLL3_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80065b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80065c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	2100      	movs	r1, #0
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065d8:	460b      	mov	r3, r1
 80065da:	4313      	orrs	r3, r2
 80065dc:	d011      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065e2:	3328      	adds	r3, #40	; 0x28
 80065e4:	2101      	movs	r1, #1
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fa7c 	bl	8007ae4 <RCCEx_PLL3_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80065f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006602:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	2100      	movs	r1, #0
 800660c:	6039      	str	r1, [r7, #0]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	607b      	str	r3, [r7, #4]
 8006614:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006618:	460b      	mov	r3, r1
 800661a:	4313      	orrs	r3, r2
 800661c:	d011      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800661e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006622:	3328      	adds	r3, #40	; 0x28
 8006624:	2102      	movs	r1, #2
 8006626:	4618      	mov	r0, r3
 8006628:	f001 fa5c 	bl	8007ae4 <RCCEx_PLL3_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006632:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800663e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8006642:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	e000      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
}
 8006650:	4618      	mov	r0, r3
 8006652:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006656:	46bd      	mov	sp, r7
 8006658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800665c:	58024400 	.word	0x58024400

08006660 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b090      	sub	sp, #64	; 0x40
 8006664:	af00      	add	r7, sp, #0
 8006666:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800666a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800666e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006672:	430b      	orrs	r3, r1
 8006674:	f040 8094 	bne.w	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006678:	4b9e      	ldr	r3, [pc, #632]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800667a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	2b04      	cmp	r3, #4
 8006686:	f200 8087 	bhi.w	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800668a:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	080066a5 	.word	0x080066a5
 8006694:	080066cd 	.word	0x080066cd
 8006698:	080066f5 	.word	0x080066f5
 800669c:	08006791 	.word	0x08006791
 80066a0:	0800671d 	.word	0x0800671d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066a4:	4b93      	ldr	r3, [pc, #588]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066b0:	d108      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 f810 	bl	80076dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066c0:	f000 bd45 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c8:	f000 bd41 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066cc:	4b89      	ldr	r3, [pc, #548]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d8:	d108      	bne.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066da:	f107 0318 	add.w	r3, r7, #24
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fd54 	bl	800718c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066e8:	f000 bd31 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066f0:	f000 bd2d 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066f4:	4b7f      	ldr	r3, [pc, #508]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006700:	d108      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006702:	f107 030c 	add.w	r3, r7, #12
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fe94 	bl	8007434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006710:	f000 bd1d 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006718:	f000 bd19 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800671c:	4b75      	ldr	r3, [pc, #468]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800671e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006724:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006726:	4b73      	ldr	r3, [pc, #460]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	2b04      	cmp	r3, #4
 8006730:	d10c      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006734:	2b00      	cmp	r3, #0
 8006736:	d109      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006738:	4b6e      	ldr	r3, [pc, #440]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	08db      	lsrs	r3, r3, #3
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	4a6d      	ldr	r2, [pc, #436]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006744:	fa22 f303 	lsr.w	r3, r2, r3
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800674a:	e01f      	b.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800674c:	4b69      	ldr	r3, [pc, #420]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006758:	d106      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006760:	d102      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006762:	4b66      	ldr	r3, [pc, #408]	; (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006766:	e011      	b.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006768:	4b62      	ldr	r3, [pc, #392]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006774:	d106      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677c:	d102      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800677e:	4b60      	ldr	r3, [pc, #384]	; (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006782:	e003      	b.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006788:	f000 bce1 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800678c:	f000 bcdf 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006790:	4b5c      	ldr	r3, [pc, #368]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006794:	f000 bcdb 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800679c:	f000 bcd7 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80067a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067a4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80067a8:	430b      	orrs	r3, r1
 80067aa:	f040 80ad 	bne.w	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80067ae:	4b51      	ldr	r3, [pc, #324]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80067b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067be:	d056      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c6:	f200 8090 	bhi.w	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	2bc0      	cmp	r3, #192	; 0xc0
 80067ce:	f000 8088 	beq.w	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	2bc0      	cmp	r3, #192	; 0xc0
 80067d6:	f200 8088 	bhi.w	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	2b80      	cmp	r3, #128	; 0x80
 80067de:	d032      	beq.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	2b80      	cmp	r3, #128	; 0x80
 80067e4:	f200 8081 	bhi.w	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	d014      	beq.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80067f4:	e079      	b.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067f6:	4b3f      	ldr	r3, [pc, #252]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006802:	d108      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006808:	4618      	mov	r0, r3
 800680a:	f000 ff67 	bl	80076dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006812:	f000 bc9c 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800681a:	f000 bc98 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800681e:	4b35      	ldr	r3, [pc, #212]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800682a:	d108      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800682c:	f107 0318 	add.w	r3, r7, #24
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fcab 	bl	800718c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800683a:	f000 bc88 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006842:	f000 bc84 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006846:	4b2b      	ldr	r3, [pc, #172]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800684e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006852:	d108      	bne.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006854:	f107 030c 	add.w	r3, r7, #12
 8006858:	4618      	mov	r0, r3
 800685a:	f000 fdeb 	bl	8007434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006862:	f000 bc74 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006866:	2300      	movs	r3, #0
 8006868:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800686a:	f000 bc70 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800686e:	4b21      	ldr	r3, [pc, #132]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006876:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006878:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b04      	cmp	r3, #4
 8006882:	d10c      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006886:	2b00      	cmp	r3, #0
 8006888:	d109      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800688a:	4b1a      	ldr	r3, [pc, #104]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	08db      	lsrs	r3, r3, #3
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	4a18      	ldr	r2, [pc, #96]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006896:	fa22 f303 	lsr.w	r3, r2, r3
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800689c:	e01f      	b.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800689e:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068aa:	d106      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80068ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068b2:	d102      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068b4:	4b11      	ldr	r3, [pc, #68]	; (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b8:	e011      	b.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068ba:	4b0e      	ldr	r3, [pc, #56]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068c6:	d106      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ce:	d102      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80068d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d4:	e003      	b.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80068da:	f000 bc38 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068de:	f000 bc36 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80068e2:	4b08      	ldr	r3, [pc, #32]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80068e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068e6:	f000 bc32 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ee:	f000 bc2e 	b.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068f2:	bf00      	nop
 80068f4:	58024400 	.word	0x58024400
 80068f8:	03d09000 	.word	0x03d09000
 80068fc:	003d0900 	.word	0x003d0900
 8006900:	017d7840 	.word	0x017d7840
 8006904:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800690c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006910:	430b      	orrs	r3, r1
 8006912:	f040 809c 	bne.w	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006916:	4b9e      	ldr	r3, [pc, #632]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800691e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006926:	d054      	beq.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800692e:	f200 808b 	bhi.w	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006938:	f000 8083 	beq.w	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006942:	f200 8081 	bhi.w	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800694c:	d02f      	beq.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006954:	d878      	bhi.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	2b00      	cmp	r3, #0
 800695a:	d004      	beq.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006962:	d012      	beq.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006964:	e070      	b.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006966:	4b8a      	ldr	r3, [pc, #552]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006972:	d107      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006978:	4618      	mov	r0, r3
 800697a:	f000 feaf 	bl	80076dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006982:	e3e4      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006988:	e3e1      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800698a:	4b81      	ldr	r3, [pc, #516]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006996:	d107      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006998:	f107 0318 	add.w	r3, r7, #24
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fbf5 	bl	800718c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a6:	e3d2      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ac:	e3cf      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069ae:	4b78      	ldr	r3, [pc, #480]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ba:	d107      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069bc:	f107 030c 	add.w	r3, r7, #12
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fd37 	bl	8007434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ca:	e3c0      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d0:	e3bd      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069d2:	4b6f      	ldr	r3, [pc, #444]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069dc:	4b6c      	ldr	r3, [pc, #432]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d10c      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80069e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069ee:	4b68      	ldr	r3, [pc, #416]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	08db      	lsrs	r3, r3, #3
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	4a66      	ldr	r2, [pc, #408]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80069fa:	fa22 f303 	lsr.w	r3, r2, r3
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a00:	e01e      	b.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a02:	4b63      	ldr	r3, [pc, #396]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0e:	d106      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a16:	d102      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a18:	4b5f      	ldr	r3, [pc, #380]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a1c:	e010      	b.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a1e:	4b5c      	ldr	r3, [pc, #368]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a2a:	d106      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a32:	d102      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a34:	4b59      	ldr	r3, [pc, #356]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a38:	e002      	b.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a3e:	e386      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a40:	e385      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a42:	4b57      	ldr	r3, [pc, #348]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a46:	e382      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a4c:	e37f      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a52:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006a56:	430b      	orrs	r3, r1
 8006a58:	f040 80a7 	bne.w	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006a5c:	4b4c      	ldr	r3, [pc, #304]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a60:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006a64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a6c:	d055      	beq.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a74:	f200 8096 	bhi.w	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a7e:	f000 8084 	beq.w	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a88:	f200 808c 	bhi.w	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a92:	d030      	beq.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a9a:	f200 8083 	bhi.w	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d004      	beq.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aaa:	d012      	beq.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006aac:	e07a      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006aae:	4b38      	ldr	r3, [pc, #224]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aba:	d107      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fe0b 	bl	80076dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aca:	e340      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ad0:	e33d      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ad2:	4b2f      	ldr	r3, [pc, #188]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ade:	d107      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae0:	f107 0318 	add.w	r3, r7, #24
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fb51 	bl	800718c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aee:	e32e      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af4:	e32b      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006af6:	4b26      	ldr	r3, [pc, #152]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b02:	d107      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b04:	f107 030c 	add.w	r3, r7, #12
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 fc93 	bl	8007434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b12:	e31c      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b18:	e319      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b1a:	4b1d      	ldr	r3, [pc, #116]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b24:	4b1a      	ldr	r3, [pc, #104]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d10c      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b36:	4b16      	ldr	r3, [pc, #88]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	08db      	lsrs	r3, r3, #3
 8006b3c:	f003 0303 	and.w	r3, r3, #3
 8006b40:	4a14      	ldr	r2, [pc, #80]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b42:	fa22 f303 	lsr.w	r3, r2, r3
 8006b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b48:	e01e      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b4a:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b56:	d106      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b5e:	d102      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b60:	4b0d      	ldr	r3, [pc, #52]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b64:	e010      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b66:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b72:	d106      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b7a:	d102      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b7c:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b80:	e002      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b86:	e2e2      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b88:	e2e1      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b8a:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b8e:	e2de      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b90:	58024400 	.word	0x58024400
 8006b94:	03d09000 	.word	0x03d09000
 8006b98:	003d0900 	.word	0x003d0900
 8006b9c:	017d7840 	.word	0x017d7840
 8006ba0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba8:	e2d1      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	f040 809c 	bne.w	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006bb8:	4b93      	ldr	r3, [pc, #588]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006bc0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bc8:	d054      	beq.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd0:	f200 808b 	bhi.w	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bda:	f000 8083 	beq.w	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006be4:	f200 8081 	bhi.w	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bee:	d02f      	beq.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf6:	d878      	bhi.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c04:	d012      	beq.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006c06:	e070      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c08:	4b7f      	ldr	r3, [pc, #508]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c14:	d107      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fd5e 	bl	80076dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c24:	e293      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c2a:	e290      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c2c:	4b76      	ldr	r3, [pc, #472]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c38:	d107      	bne.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c3a:	f107 0318 	add.w	r3, r7, #24
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 faa4 	bl	800718c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c48:	e281      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c4e:	e27e      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c50:	4b6d      	ldr	r3, [pc, #436]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c5c:	d107      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c5e:	f107 030c 	add.w	r3, r7, #12
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fbe6 	bl	8007434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c6c:	e26f      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c72:	e26c      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c74:	4b64      	ldr	r3, [pc, #400]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c7e:	4b62      	ldr	r3, [pc, #392]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d10c      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c90:	4b5d      	ldr	r3, [pc, #372]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	08db      	lsrs	r3, r3, #3
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	4a5c      	ldr	r2, [pc, #368]	; (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca2:	e01e      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ca4:	4b58      	ldr	r3, [pc, #352]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb0:	d106      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cb8:	d102      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cba:	4b55      	ldr	r3, [pc, #340]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cbe:	e010      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cc0:	4b51      	ldr	r3, [pc, #324]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ccc:	d106      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd4:	d102      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cd6:	4b4f      	ldr	r3, [pc, #316]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cda:	e002      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006ce0:	e235      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ce2:	e234      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ce4:	4b4c      	ldr	r3, [pc, #304]	; (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce8:	e231      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cee:	e22e      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cf4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	f040 808f 	bne.w	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006cfe:	4b42      	ldr	r3, [pc, #264]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d02:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006d06:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d0e:	d06b      	beq.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d16:	d874      	bhi.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d1e:	d056      	beq.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d26:	d86c      	bhi.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d2e:	d03b      	beq.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d36:	d864      	bhi.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d3e:	d021      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d46:	d85c      	bhi.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d004      	beq.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d54:	d004      	beq.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006d56:	e054      	b.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006d58:	f7fe f9e0 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 8006d5c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d5e:	e1f6      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d60:	4b29      	ldr	r3, [pc, #164]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d6c:	d107      	bne.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d6e:	f107 0318 	add.w	r3, r7, #24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fa0a 	bl	800718c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d7c:	e1e7      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d82:	e1e4      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d84:	4b20      	ldr	r3, [pc, #128]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d90:	d107      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d92:	f107 030c 	add.w	r3, r7, #12
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fb4c 	bl	8007434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006da0:	e1d5      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da6:	e1d2      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006da8:	4b17      	ldr	r3, [pc, #92]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d109      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006db4:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	08db      	lsrs	r3, r3, #3
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	4a13      	ldr	r2, [pc, #76]	; (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dc6:	e1c2      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dcc:	e1bf      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006dce:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dda:	d102      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006ddc:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de0:	e1b5      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de6:	e1b2      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006de8:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006df4:	d102      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006df6:	4b07      	ldr	r3, [pc, #28]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dfa:	e1a8      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e00:	e1a5      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e06:	e1a2      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e08:	58024400 	.word	0x58024400
 8006e0c:	03d09000 	.word	0x03d09000
 8006e10:	003d0900 	.word	0x003d0900
 8006e14:	017d7840 	.word	0x017d7840
 8006e18:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e20:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006e24:	430b      	orrs	r3, r1
 8006e26:	d173      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006e28:	4b9c      	ldr	r3, [pc, #624]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e38:	d02f      	beq.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e40:	d863      	bhi.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e4e:	d012      	beq.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006e50:	e05b      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e52:	4b92      	ldr	r3, [pc, #584]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e5e:	d107      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e60:	f107 0318 	add.w	r3, r7, #24
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 f991 	bl	800718c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e6e:	e16e      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e74:	e16b      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e76:	4b89      	ldr	r3, [pc, #548]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e82:	d107      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e84:	f107 030c 	add.w	r3, r7, #12
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fad3 	bl	8007434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e92:	e15c      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e98:	e159      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e9a:	4b80      	ldr	r3, [pc, #512]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ea4:	4b7d      	ldr	r3, [pc, #500]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d10c      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eb6:	4b79      	ldr	r3, [pc, #484]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	08db      	lsrs	r3, r3, #3
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	4a77      	ldr	r2, [pc, #476]	; (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec8:	e01e      	b.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eca:	4b74      	ldr	r3, [pc, #464]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed6:	d106      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ede:	d102      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ee0:	4b70      	ldr	r3, [pc, #448]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee4:	e010      	b.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ee6:	4b6d      	ldr	r3, [pc, #436]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef2:	d106      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006efa:	d102      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006efc:	4b6a      	ldr	r3, [pc, #424]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f00:	e002      	b.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006f06:	e122      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f08:	e121      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f0e:	e11e      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f14:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	d133      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006f1c:	4b5f      	ldr	r3, [pc, #380]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f24:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f32:	d012      	beq.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006f34:	e023      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f36:	4b59      	ldr	r3, [pc, #356]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f42:	d107      	bne.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fbc7 	bl	80076dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f52:	e0fc      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f58:	e0f9      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f5a:	4b50      	ldr	r3, [pc, #320]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f66:	d107      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f68:	f107 0318 	add.w	r3, r7, #24
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 f90d 	bl	800718c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f76:	e0ea      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f7c:	e0e7      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f82:	e0e4      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f88:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	f040 808d 	bne.w	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006f92:	4b42      	ldr	r3, [pc, #264]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f96:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006f9a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fa2:	d06b      	beq.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006faa:	d874      	bhi.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb2:	d056      	beq.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fba:	d86c      	bhi.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fc2:	d03b      	beq.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fca:	d864      	bhi.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd2:	d021      	beq.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fda:	d85c      	bhi.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fe8:	d004      	beq.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006fea:	e054      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006fec:	f000 f8b8 	bl	8007160 <HAL_RCCEx_GetD3PCLK1Freq>
 8006ff0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ff2:	e0ac      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ff4:	4b29      	ldr	r3, [pc, #164]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007000:	d107      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007002:	f107 0318 	add.w	r3, r7, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f000 f8c0 	bl	800718c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007010:	e09d      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007016:	e09a      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007018:	4b20      	ldr	r3, [pc, #128]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007024:	d107      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007026:	f107 030c 	add.w	r3, r7, #12
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fa02 	bl	8007434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007034:	e08b      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800703a:	e088      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800703c:	4b17      	ldr	r3, [pc, #92]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b04      	cmp	r3, #4
 8007046:	d109      	bne.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007048:	4b14      	ldr	r3, [pc, #80]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	08db      	lsrs	r3, r3, #3
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	4a13      	ldr	r2, [pc, #76]	; (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007054:	fa22 f303 	lsr.w	r3, r2, r3
 8007058:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800705a:	e078      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007060:	e075      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007062:	4b0e      	ldr	r3, [pc, #56]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706e:	d102      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007070:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007074:	e06b      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800707a:	e068      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800707c:	4b07      	ldr	r3, [pc, #28]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007088:	d102      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800708e:	e05e      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007094:	e05b      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800709a:	e058      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800709c:	58024400 	.word	0x58024400
 80070a0:	03d09000 	.word	0x03d09000
 80070a4:	003d0900 	.word	0x003d0900
 80070a8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80070ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80070b4:	430b      	orrs	r3, r1
 80070b6:	d148      	bne.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80070b8:	4b27      	ldr	r3, [pc, #156]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c8:	d02a      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d0:	d838      	bhi.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d004      	beq.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070de:	d00d      	beq.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80070e0:	e030      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070e2:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070ee:	d102      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80070f0:	4b1a      	ldr	r3, [pc, #104]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80070f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f4:	e02b      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070fa:	e028      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070fc:	4b16      	ldr	r3, [pc, #88]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007108:	d107      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800710a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fae4 	bl	80076dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007118:	e019      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800711e:	e016      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007120:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800712c:	d107      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800712e:	f107 0318 	add.w	r3, r7, #24
 8007132:	4618      	mov	r0, r3
 8007134:	f000 f82a 	bl	800718c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800713c:	e007      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007142:	e004      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007148:	e001      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800714e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007150:	4618      	mov	r0, r3
 8007152:	3740      	adds	r7, #64	; 0x40
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	58024400 	.word	0x58024400
 800715c:	017d7840 	.word	0x017d7840

08007160 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007164:	f7fd ffaa 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 8007168:	4602      	mov	r2, r0
 800716a:	4b06      	ldr	r3, [pc, #24]	; (8007184 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	091b      	lsrs	r3, r3, #4
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	4904      	ldr	r1, [pc, #16]	; (8007188 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007176:	5ccb      	ldrb	r3, [r1, r3]
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007180:	4618      	mov	r0, r3
 8007182:	bd80      	pop	{r7, pc}
 8007184:	58024400 	.word	0x58024400
 8007188:	080242a4 	.word	0x080242a4

0800718c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800718c:	b480      	push	{r7}
 800718e:	b089      	sub	sp, #36	; 0x24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007194:	4ba1      	ldr	r3, [pc, #644]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800719e:	4b9f      	ldr	r3, [pc, #636]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a2:	0b1b      	lsrs	r3, r3, #12
 80071a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071aa:	4b9c      	ldr	r3, [pc, #624]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	091b      	lsrs	r3, r3, #4
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80071b6:	4b99      	ldr	r3, [pc, #612]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	08db      	lsrs	r3, r3, #3
 80071bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	fb02 f303 	mul.w	r3, r2, r3
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8111 	beq.w	80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	f000 8083 	beq.w	80072e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	f200 80a1 	bhi.w	800732c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d056      	beq.n	80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071f6:	e099      	b.n	800732c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071f8:	4b88      	ldr	r3, [pc, #544]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b00      	cmp	r3, #0
 8007202:	d02d      	beq.n	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007204:	4b85      	ldr	r3, [pc, #532]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	08db      	lsrs	r3, r3, #3
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	4a84      	ldr	r2, [pc, #528]	; (8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
 8007214:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722e:	4b7b      	ldr	r3, [pc, #492]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007242:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800725e:	e087      	b.n	8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800726e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007272:	4b6a      	ldr	r3, [pc, #424]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007282:	ed97 6a03 	vldr	s12, [r7, #12]
 8007286:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800728a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072a2:	e065      	b.n	8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800742c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b6:	4b59      	ldr	r3, [pc, #356]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e6:	e043      	b.n	8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fa:	4b48      	ldr	r3, [pc, #288]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730a:	ed97 6a03 	vldr	s12, [r7, #12]
 800730e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800732a:	e021      	b.n	8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800742c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b37      	ldr	r3, [pc, #220]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007352:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800736e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007370:	4b2a      	ldr	r3, [pc, #168]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	0a5b      	lsrs	r3, r3, #9
 8007376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800738a:	edd7 6a07 	vldr	s13, [r7, #28]
 800738e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007396:	ee17 2a90 	vmov	r2, s15
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800739e:	4b1f      	ldr	r3, [pc, #124]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	0c1b      	lsrs	r3, r3, #16
 80073a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a8:	ee07 3a90 	vmov	s15, r3
 80073ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80073bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073c4:	ee17 2a90 	vmov	r2, s15
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80073cc:	4b13      	ldr	r3, [pc, #76]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	0e1b      	lsrs	r3, r3, #24
 80073d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073f2:	ee17 2a90 	vmov	r2, s15
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073fa:	e008      	b.n	800740e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	609a      	str	r2, [r3, #8]
}
 800740e:	bf00      	nop
 8007410:	3724      	adds	r7, #36	; 0x24
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	58024400 	.word	0x58024400
 8007420:	03d09000 	.word	0x03d09000
 8007424:	46000000 	.word	0x46000000
 8007428:	4c742400 	.word	0x4c742400
 800742c:	4a742400 	.word	0x4a742400
 8007430:	4bbebc20 	.word	0x4bbebc20

08007434 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007434:	b480      	push	{r7}
 8007436:	b089      	sub	sp, #36	; 0x24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800743c:	4ba1      	ldr	r3, [pc, #644]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007446:	4b9f      	ldr	r3, [pc, #636]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	0d1b      	lsrs	r3, r3, #20
 800744c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007450:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007452:	4b9c      	ldr	r3, [pc, #624]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	0a1b      	lsrs	r3, r3, #8
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800745e:	4b99      	ldr	r3, [pc, #612]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007462:	08db      	lsrs	r3, r3, #3
 8007464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	fb02 f303 	mul.w	r3, r2, r3
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007476:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8111 	beq.w	80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b02      	cmp	r3, #2
 8007486:	f000 8083 	beq.w	8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	2b02      	cmp	r3, #2
 800748e:	f200 80a1 	bhi.w	80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d056      	beq.n	800754c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800749e:	e099      	b.n	80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074a0:	4b88      	ldr	r3, [pc, #544]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d02d      	beq.n	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074ac:	4b85      	ldr	r3, [pc, #532]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	08db      	lsrs	r3, r3, #3
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	4a84      	ldr	r2, [pc, #528]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074b8:	fa22 f303 	lsr.w	r3, r2, r3
 80074bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	ee07 3a90 	vmov	s15, r3
 80074c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d6:	4b7b      	ldr	r3, [pc, #492]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007506:	e087      	b.n	8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751a:	4b6a      	ldr	r3, [pc, #424]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752a:	ed97 6a03 	vldr	s12, [r7, #12]
 800752e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800754a:	e065      	b.n	8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007556:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800755a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755e:	4b59      	ldr	r3, [pc, #356]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007572:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800758e:	e043      	b.n	8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800759e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a2:	4b48      	ldr	r3, [pc, #288]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075d2:	e021      	b.n	8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e6:	4b37      	ldr	r3, [pc, #220]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007616:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007618:	4b2a      	ldr	r3, [pc, #168]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761c:	0a5b      	lsrs	r3, r3, #9
 800761e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800762e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007632:	edd7 6a07 	vldr	s13, [r7, #28]
 8007636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800763a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800763e:	ee17 2a90 	vmov	r2, s15
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007646:	4b1f      	ldr	r3, [pc, #124]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	0c1b      	lsrs	r3, r3, #16
 800764c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007650:	ee07 3a90 	vmov	s15, r3
 8007654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007658:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800765c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007660:	edd7 6a07 	vldr	s13, [r7, #28]
 8007664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800766c:	ee17 2a90 	vmov	r2, s15
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007674:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	0e1b      	lsrs	r3, r3, #24
 800767a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800768a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800768e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800769a:	ee17 2a90 	vmov	r2, s15
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076a2:	e008      	b.n	80076b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	609a      	str	r2, [r3, #8]
}
 80076b6:	bf00      	nop
 80076b8:	3724      	adds	r7, #36	; 0x24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	58024400 	.word	0x58024400
 80076c8:	03d09000 	.word	0x03d09000
 80076cc:	46000000 	.word	0x46000000
 80076d0:	4c742400 	.word	0x4c742400
 80076d4:	4a742400 	.word	0x4a742400
 80076d8:	4bbebc20 	.word	0x4bbebc20

080076dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80076dc:	b480      	push	{r7}
 80076de:	b089      	sub	sp, #36	; 0x24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076e4:	4ba0      	ldr	r3, [pc, #640]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80076ee:	4b9e      	ldr	r3, [pc, #632]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f2:	091b      	lsrs	r3, r3, #4
 80076f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80076fa:	4b9b      	ldr	r3, [pc, #620]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007704:	4b98      	ldr	r3, [pc, #608]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007708:	08db      	lsrs	r3, r3, #3
 800770a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	fb02 f303 	mul.w	r3, r2, r3
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8111 	beq.w	800794a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	2b02      	cmp	r3, #2
 800772c:	f000 8083 	beq.w	8007836 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	2b02      	cmp	r3, #2
 8007734:	f200 80a1 	bhi.w	800787a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d056      	beq.n	80077f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007744:	e099      	b.n	800787a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007746:	4b88      	ldr	r3, [pc, #544]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b00      	cmp	r3, #0
 8007750:	d02d      	beq.n	80077ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007752:	4b85      	ldr	r3, [pc, #532]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	08db      	lsrs	r3, r3, #3
 8007758:	f003 0303 	and.w	r3, r3, #3
 800775c:	4a83      	ldr	r2, [pc, #524]	; (800796c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800775e:	fa22 f303 	lsr.w	r3, r2, r3
 8007762:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	ee07 3a90 	vmov	s15, r3
 8007774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777c:	4b7a      	ldr	r3, [pc, #488]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007790:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077ac:	e087      	b.n	80078be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	ee07 3a90 	vmov	s15, r3
 80077b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007974 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80077bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c0:	4b69      	ldr	r3, [pc, #420]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c8:	ee07 3a90 	vmov	s15, r3
 80077cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077f0:	e065      	b.n	80078be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	ee07 3a90 	vmov	s15, r3
 80077f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007978 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007804:	4b58      	ldr	r3, [pc, #352]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780c:	ee07 3a90 	vmov	s15, r3
 8007810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007814:	ed97 6a03 	vldr	s12, [r7, #12]
 8007818:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800781c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007824:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007830:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007834:	e043      	b.n	80078be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	ee07 3a90 	vmov	s15, r3
 800783c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007840:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800797c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007848:	4b47      	ldr	r3, [pc, #284]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007850:	ee07 3a90 	vmov	s15, r3
 8007854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007858:	ed97 6a03 	vldr	s12, [r7, #12]
 800785c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007860:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800786c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007874:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007878:	e021      	b.n	80078be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	ee07 3a90 	vmov	s15, r3
 8007880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007884:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007974 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788c:	4b36      	ldr	r3, [pc, #216]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800788e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007894:	ee07 3a90 	vmov	s15, r3
 8007898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789c:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80078be:	4b2a      	ldr	r3, [pc, #168]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c2:	0a5b      	lsrs	r3, r3, #9
 80078c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c8:	ee07 3a90 	vmov	s15, r3
 80078cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078e4:	ee17 2a90 	vmov	r2, s15
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80078ec:	4b1e      	ldr	r3, [pc, #120]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f0:	0c1b      	lsrs	r3, r3, #16
 80078f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007906:	edd7 6a07 	vldr	s13, [r7, #28]
 800790a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800790e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007912:	ee17 2a90 	vmov	r2, s15
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800791a:	4b13      	ldr	r3, [pc, #76]	; (8007968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800791c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791e:	0e1b      	lsrs	r3, r3, #24
 8007920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007924:	ee07 3a90 	vmov	s15, r3
 8007928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007930:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007934:	edd7 6a07 	vldr	s13, [r7, #28]
 8007938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800793c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007940:	ee17 2a90 	vmov	r2, s15
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007948:	e008      	b.n	800795c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	609a      	str	r2, [r3, #8]
}
 800795c:	bf00      	nop
 800795e:	3724      	adds	r7, #36	; 0x24
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	58024400 	.word	0x58024400
 800796c:	03d09000 	.word	0x03d09000
 8007970:	46000000 	.word	0x46000000
 8007974:	4c742400 	.word	0x4c742400
 8007978:	4a742400 	.word	0x4a742400
 800797c:	4bbebc20 	.word	0x4bbebc20

08007980 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800798e:	4b53      	ldr	r3, [pc, #332]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	2b03      	cmp	r3, #3
 8007998:	d101      	bne.n	800799e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e099      	b.n	8007ad2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800799e:	4b4f      	ldr	r3, [pc, #316]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a4e      	ldr	r2, [pc, #312]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 80079a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079aa:	f7f9 ff57 	bl	800185c <HAL_GetTick>
 80079ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079b0:	e008      	b.n	80079c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079b2:	f7f9 ff53 	bl	800185c <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d901      	bls.n	80079c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e086      	b.n	8007ad2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079c4:	4b45      	ldr	r3, [pc, #276]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1f0      	bne.n	80079b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079d0:	4b42      	ldr	r3, [pc, #264]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 80079d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	031b      	lsls	r3, r3, #12
 80079de:	493f      	ldr	r1, [pc, #252]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	628b      	str	r3, [r1, #40]	; 0x28
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	3b01      	subs	r3, #1
 80079f4:	025b      	lsls	r3, r3, #9
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	041b      	lsls	r3, r3, #16
 8007a02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	061b      	lsls	r3, r3, #24
 8007a10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a14:	4931      	ldr	r1, [pc, #196]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a1a:	4b30      	ldr	r3, [pc, #192]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	492d      	ldr	r1, [pc, #180]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a2c:	4b2b      	ldr	r3, [pc, #172]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	f023 0220 	bic.w	r2, r3, #32
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	4928      	ldr	r1, [pc, #160]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a3e:	4b27      	ldr	r3, [pc, #156]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	4a26      	ldr	r2, [pc, #152]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a44:	f023 0310 	bic.w	r3, r3, #16
 8007a48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a4a:	4b24      	ldr	r3, [pc, #144]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a4e:	4b24      	ldr	r3, [pc, #144]	; (8007ae0 <RCCEx_PLL2_Config+0x160>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	69d2      	ldr	r2, [r2, #28]
 8007a56:	00d2      	lsls	r2, r2, #3
 8007a58:	4920      	ldr	r1, [pc, #128]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a5e:	4b1f      	ldr	r3, [pc, #124]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	4a1e      	ldr	r2, [pc, #120]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a64:	f043 0310 	orr.w	r3, r3, #16
 8007a68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d106      	bne.n	8007a7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a70:	4b1a      	ldr	r3, [pc, #104]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	4a19      	ldr	r2, [pc, #100]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a7c:	e00f      	b.n	8007a9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d106      	bne.n	8007a92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a84:	4b15      	ldr	r3, [pc, #84]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	4a14      	ldr	r2, [pc, #80]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a90:	e005      	b.n	8007a9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a92:	4b12      	ldr	r3, [pc, #72]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a96:	4a11      	ldr	r2, [pc, #68]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a9e:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a0e      	ldr	r2, [pc, #56]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007aa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aaa:	f7f9 fed7 	bl	800185c <HAL_GetTick>
 8007aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ab0:	e008      	b.n	8007ac4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ab2:	f7f9 fed3 	bl	800185c <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d901      	bls.n	8007ac4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e006      	b.n	8007ad2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ac4:	4b05      	ldr	r3, [pc, #20]	; (8007adc <RCCEx_PLL2_Config+0x15c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0f0      	beq.n	8007ab2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	58024400 	.word	0x58024400
 8007ae0:	ffff0007 	.word	0xffff0007

08007ae4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007af2:	4b53      	ldr	r3, [pc, #332]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af6:	f003 0303 	and.w	r3, r3, #3
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d101      	bne.n	8007b02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e099      	b.n	8007c36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b02:	4b4f      	ldr	r3, [pc, #316]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a4e      	ldr	r2, [pc, #312]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b0e:	f7f9 fea5 	bl	800185c <HAL_GetTick>
 8007b12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b14:	e008      	b.n	8007b28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b16:	f7f9 fea1 	bl	800185c <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d901      	bls.n	8007b28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e086      	b.n	8007c36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b28:	4b45      	ldr	r3, [pc, #276]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f0      	bne.n	8007b16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b34:	4b42      	ldr	r3, [pc, #264]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	051b      	lsls	r3, r3, #20
 8007b42:	493f      	ldr	r1, [pc, #252]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	628b      	str	r3, [r1, #40]	; 0x28
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	025b      	lsls	r3, r3, #9
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	041b      	lsls	r3, r3, #16
 8007b66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	061b      	lsls	r3, r3, #24
 8007b74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b78:	4931      	ldr	r1, [pc, #196]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b7e:	4b30      	ldr	r3, [pc, #192]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	492d      	ldr	r1, [pc, #180]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b90:	4b2b      	ldr	r3, [pc, #172]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	4928      	ldr	r1, [pc, #160]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ba2:	4b27      	ldr	r3, [pc, #156]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	4a26      	ldr	r2, [pc, #152]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bae:	4b24      	ldr	r3, [pc, #144]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bb2:	4b24      	ldr	r3, [pc, #144]	; (8007c44 <RCCEx_PLL3_Config+0x160>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	69d2      	ldr	r2, [r2, #28]
 8007bba:	00d2      	lsls	r2, r2, #3
 8007bbc:	4920      	ldr	r1, [pc, #128]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007bc2:	4b1f      	ldr	r3, [pc, #124]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc6:	4a1e      	ldr	r2, [pc, #120]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d106      	bne.n	8007be2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007bd4:	4b1a      	ldr	r3, [pc, #104]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	4a19      	ldr	r2, [pc, #100]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007bda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007bde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007be0:	e00f      	b.n	8007c02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d106      	bne.n	8007bf6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007be8:	4b15      	ldr	r3, [pc, #84]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	4a14      	ldr	r2, [pc, #80]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007bee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bf4:	e005      	b.n	8007c02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007bf6:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	4a11      	ldr	r2, [pc, #68]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007bfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c02:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a0e      	ldr	r2, [pc, #56]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c0e:	f7f9 fe25 	bl	800185c <HAL_GetTick>
 8007c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c14:	e008      	b.n	8007c28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c16:	f7f9 fe21 	bl	800185c <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e006      	b.n	8007c36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c28:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <RCCEx_PLL3_Config+0x15c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0f0      	beq.n	8007c16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	58024400 	.word	0x58024400
 8007c44:	ffff0007 	.word	0xffff0007

08007c48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	; 0x28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e075      	b.n	8007d46 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d105      	bne.n	8007c72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7f9 fa13 	bl	8001098 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2204      	movs	r2, #4
 8007c76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f868 	bl	8007d50 <HAL_SD_InitCard>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e05d      	b.n	8007d46 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007c8a:	f107 0308 	add.w	r3, r7, #8
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fdaf 	bl	80087f4 <HAL_SD_GetCardStatus>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e052      	b.n	8007d46 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007ca0:	7e3b      	ldrb	r3, [r7, #24]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007ca6:	7e7b      	ldrb	r3, [r7, #25]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d10a      	bne.n	8007cca <HAL_SD_Init+0x82>
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d102      	bne.n	8007cc0 <HAL_SD_Init+0x78>
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d004      	beq.n	8007cca <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cc6:	659a      	str	r2, [r3, #88]	; 0x58
 8007cc8:	e00b      	b.n	8007ce2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d104      	bne.n	8007cdc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cd8:	659a      	str	r2, [r3, #88]	; 0x58
 8007cda:	e002      	b.n	8007ce2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fe6d 	bl	80089c8 <HAL_SD_ConfigWideBusOperation>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e026      	b.n	8007d46 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007cf8:	f7f9 fdb0 	bl	800185c <HAL_GetTick>
 8007cfc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007cfe:	e011      	b.n	8007d24 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d00:	f7f9 fdac 	bl	800185c <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d0e:	d109      	bne.n	8007d24 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d16:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e010      	b.n	8007d46 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 ff61 	bl	8008bec <HAL_SD_GetCardState>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d1e7      	bne.n	8007d00 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3728      	adds	r7, #40	; 0x28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d50:	b590      	push	{r4, r7, lr}
 8007d52:	b08d      	sub	sp, #52	; 0x34
 8007d54:	af02      	add	r7, sp, #8
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007d60:	2300      	movs	r3, #0
 8007d62:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007d68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007d6c:	f04f 0100 	mov.w	r1, #0
 8007d70:	f7fe fc76 	bl	8006660 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d74:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d109      	bne.n	8007d90 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d8a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e070      	b.n	8007e72 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	0a1b      	lsrs	r3, r3, #8
 8007d94:	4a39      	ldr	r2, [pc, #228]	; (8007e7c <HAL_SD_InitCard+0x12c>)
 8007d96:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9a:	091b      	lsrs	r3, r3, #4
 8007d9c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681c      	ldr	r4, [r3, #0]
 8007da2:	466a      	mov	r2, sp
 8007da4:	f107 0318 	add.w	r3, r7, #24
 8007da8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007dac:	e882 0003 	stmia.w	r2, {r0, r1}
 8007db0:	f107 030c 	add.w	r3, r7, #12
 8007db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007db6:	4620      	mov	r0, r4
 8007db8:	f001 fe84 	bl	8009ac4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f001 fec7 	bl	8009b54 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d005      	beq.n	8007dd8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007dde:	4a28      	ldr	r2, [pc, #160]	; (8007e80 <HAL_SD_InitCard+0x130>)
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de6:	3301      	adds	r3, #1
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7f9 fd43 	bl	8001874 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 ffea 	bl	8008dc8 <SD_PowerON>
 8007df4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e02e      	b.n	8007e72 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 ff09 	bl	8008c2c <SD_InitCard>
 8007e1a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00b      	beq.n	8007e3a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e01b      	b.n	8007e72 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e42:	4618      	mov	r0, r3
 8007e44:	f001 ff1c 	bl	8009c80 <SDMMC_CmdBlockLength>
 8007e48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00f      	beq.n	8007e70 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a0b      	ldr	r2, [pc, #44]	; (8007e84 <HAL_SD_InitCard+0x134>)
 8007e56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	372c      	adds	r7, #44	; 0x2c
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd90      	pop	{r4, r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	014f8b59 	.word	0x014f8b59
 8007e80:	00012110 	.word	0x00012110
 8007e84:	1fe00fff 	.word	0x1fe00fff

08007e88 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08c      	sub	sp, #48	; 0x30
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d107      	bne.n	8007eb0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e08d      	b.n	8007fcc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	f040 8086 	bne.w	8007fca <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	441a      	add	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d907      	bls.n	8007ee2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e074      	b.n	8007fcc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	025a      	lsls	r2, r3, #9
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d002      	beq.n	8007f0e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	025b      	lsls	r3, r3, #9
 8007f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f12:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	025b      	lsls	r3, r3, #9
 8007f18:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f1a:	2390      	movs	r3, #144	; 0x90
 8007f1c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f107 0210 	add.w	r2, r7, #16
 8007f32:	4611      	mov	r1, r2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 fe77 	bl	8009c28 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f48:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2201      	movs	r2, #1
 8007f58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d90a      	bls.n	8007f76 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2282      	movs	r2, #130	; 0x82
 8007f64:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 fecd 	bl	8009d0c <SDMMC_CmdReadMultiBlock>
 8007f72:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f74:	e009      	b.n	8007f8a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2281      	movs	r2, #129	; 0x81
 8007f7a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f82:	4618      	mov	r0, r3
 8007f84:	f001 fe9f 	bl	8009cc6 <SDMMC_CmdReadSingleBlock>
 8007f88:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d012      	beq.n	8007fb6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a0f      	ldr	r2, [pc, #60]	; (8007fd4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007f96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e00a      	b.n	8007fcc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007fc4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e000      	b.n	8007fcc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007fca:	2302      	movs	r3, #2
  }
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3730      	adds	r7, #48	; 0x30
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	1fe00fff 	.word	0x1fe00fff

08007fd8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08c      	sub	sp, #48	; 0x30
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d107      	bne.n	8008000 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e08d      	b.n	800811c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b01      	cmp	r3, #1
 800800a:	f040 8086 	bne.w	800811a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	441a      	add	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800801e:	429a      	cmp	r2, r3
 8008020:	d907      	bls.n	8008032 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008026:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e074      	b.n	800811c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2203      	movs	r2, #3
 8008036:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2200      	movs	r2, #0
 8008040:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	025a      	lsls	r2, r3, #9
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008054:	2b01      	cmp	r3, #1
 8008056:	d002      	beq.n	800805e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	025b      	lsls	r3, r3, #9
 800805c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800805e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008062:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	025b      	lsls	r3, r3, #9
 8008068:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800806a:	2390      	movs	r3, #144	; 0x90
 800806c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800806e:	2300      	movs	r3, #0
 8008070:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008072:	2300      	movs	r3, #0
 8008074:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008076:	2300      	movs	r3, #0
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f107 0210 	add.w	r2, r7, #16
 8008082:	4611      	mov	r1, r2
 8008084:	4618      	mov	r0, r3
 8008086:	f001 fdcf 	bl	8009c28 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68da      	ldr	r2, [r3, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008098:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2201      	movs	r2, #1
 80080a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d90a      	bls.n	80080c6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	22a0      	movs	r2, #160	; 0xa0
 80080b4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080bc:	4618      	mov	r0, r3
 80080be:	f001 fe6b 	bl	8009d98 <SDMMC_CmdWriteMultiBlock>
 80080c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80080c4:	e009      	b.n	80080da <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2290      	movs	r2, #144	; 0x90
 80080ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 fe3d 	bl	8009d52 <SDMMC_CmdWriteSingleBlock>
 80080d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d012      	beq.n	8008106 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a0f      	ldr	r2, [pc, #60]	; (8008124 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80080e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	431a      	orrs	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e00a      	b.n	800811c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008114:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	e000      	b.n	800811c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800811a:	2302      	movs	r3, #2
  }
}
 800811c:	4618      	mov	r0, r3
 800811e:	3730      	adds	r7, #48	; 0x30
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	1fe00fff 	.word	0x1fe00fff

08008128 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d008      	beq.n	8008156 <HAL_SD_IRQHandler+0x2e>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 f926 	bl	80093a0 <SD_Read_IT>
 8008154:	e19a      	b.n	800848c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 80ac 	beq.w	80082be <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800816e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b59      	ldr	r3, [pc, #356]	; (80082e0 <HAL_SD_IRQHandler+0x1b8>)
 800817c:	400b      	ands	r3, r1
 800817e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800818e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800819e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f003 0308 	and.w	r3, r3, #8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d038      	beq.n	800821c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d104      	bne.n	80081be <HAL_SD_IRQHandler+0x96>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d011      	beq.n	80081e2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f001 fe0c 	bl	8009de0 <SDMMC_CmdStopTransfer>
 80081c8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d008      	beq.n	80081e2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	431a      	orrs	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f95b 	bl	8008498 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a3f      	ldr	r2, [pc, #252]	; (80082e4 <HAL_SD_IRQHandler+0x1bc>)
 80081e8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d104      	bne.n	800820c <HAL_SD_IRQHandler+0xe4>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f002 fab5 	bl	800a77c <HAL_SD_RxCpltCallback>
 8008212:	e13b      	b.n	800848c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f002 faa7 	bl	800a768 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800821a:	e137      	b.n	800848c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 8132 	beq.w	800848c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2200      	movs	r2, #0
 800822e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2200      	movs	r2, #0
 8008236:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2200      	movs	r2, #0
 800823e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	2b00      	cmp	r3, #0
 8008248:	d104      	bne.n	8008254 <HAL_SD_IRQHandler+0x12c>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f003 0320 	and.w	r3, r3, #32
 8008250:	2b00      	cmp	r3, #0
 8008252:	d011      	beq.n	8008278 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f001 fdc1 	bl	8009de0 <SDMMC_CmdStopTransfer>
 800825e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d008      	beq.n	8008278 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f910 	bl	8008498 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	d104      	bne.n	800829a <HAL_SD_IRQHandler+0x172>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f002 fa64 	bl	800a768 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d105      	bne.n	80082b6 <HAL_SD_IRQHandler+0x18e>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 80eb 	beq.w	800848c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f002 fa60 	bl	800a77c <HAL_SD_RxCpltCallback>
}
 80082bc:	e0e6      	b.n	800848c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00d      	beq.n	80082e8 <HAL_SD_IRQHandler+0x1c0>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f003 0308 	and.w	r3, r3, #8
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d008      	beq.n	80082e8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 f8a8 	bl	800942c <SD_Write_IT>
 80082dc:	e0d6      	b.n	800848c <HAL_SD_IRQHandler+0x364>
 80082de:	bf00      	nop
 80082e0:	ffff3ec5 	.word	0xffff3ec5
 80082e4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ee:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 809d 	beq.w	8008432 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830a:	f043 0202 	orr.w	r2, r3, #2
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008324:	f043 0208 	orr.w	r2, r3, #8
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833e:	f043 0220 	orr.w	r2, r3, #32
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008358:	f043 0210 	orr.w	r2, r3, #16
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a4b      	ldr	r2, [pc, #300]	; (8008494 <HAL_SD_IRQHandler+0x36c>)
 8008366:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008376:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008386:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008396:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083a6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 fd17 	bl	8009de0 <SDMMC_CmdStopTransfer>
 80083b2:	4602      	mov	r2, r0
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083cc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f003 0308 	and.w	r3, r3, #8
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f851 	bl	8008498 <HAL_SD_ErrorCallback>
}
 80083f6:	e049      	b.n	800848c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d044      	beq.n	800848c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008406:	2b00      	cmp	r3, #0
 8008408:	d040      	beq.n	800848c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008418:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2200      	movs	r2, #0
 8008420:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f834 	bl	8008498 <HAL_SD_ErrorCallback>
}
 8008430:	e02c      	b.n	800848c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d025      	beq.n	800848c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008448:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008450:	f003 0304 	and.w	r3, r3, #4
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10c      	bne.n	8008472 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f003 0320 	and.w	r3, r3, #32
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f001 f84a 	bl	80094fc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008468:	e010      	b.n	800848c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 f832 	bl	80094d4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008470:	e00c      	b.n	800848c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 f833 	bl	80094e8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008482:	e003      	b.n	800848c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 f81b 	bl	80094c0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800848a:	e7ff      	b.n	800848c <HAL_SD_IRQHandler+0x364>
 800848c:	bf00      	nop
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	18000f3a 	.word	0x18000f3a

08008498 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ba:	0f9b      	lsrs	r3, r3, #30
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c6:	0e9b      	lsrs	r3, r3, #26
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	f003 030f 	and.w	r3, r3, #15
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d8:	0e1b      	lsrs	r3, r3, #24
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ea:	0c1b      	lsrs	r3, r3, #16
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f6:	0a1b      	lsrs	r3, r3, #8
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008502:	b2da      	uxtb	r2, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800850c:	0d1b      	lsrs	r3, r3, #20
 800850e:	b29a      	uxth	r2, r3
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008518:	0c1b      	lsrs	r3, r3, #16
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f003 030f 	and.w	r3, r3, #15
 8008520:	b2da      	uxtb	r2, r3
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852a:	0bdb      	lsrs	r3, r3, #15
 800852c:	b2db      	uxtb	r3, r3
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	b2da      	uxtb	r2, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800853c:	0b9b      	lsrs	r3, r3, #14
 800853e:	b2db      	uxtb	r3, r3
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	b2da      	uxtb	r2, r3
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854e:	0b5b      	lsrs	r3, r3, #13
 8008550:	b2db      	uxtb	r3, r3
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	b2da      	uxtb	r2, r3
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008560:	0b1b      	lsrs	r3, r3, #12
 8008562:	b2db      	uxtb	r3, r3
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	b2da      	uxtb	r2, r3
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2200      	movs	r2, #0
 8008572:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008578:	2b00      	cmp	r3, #0
 800857a:	d163      	bne.n	8008644 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008580:	009a      	lsls	r2, r3, #2
 8008582:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008586:	4013      	ands	r3, r2
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800858c:	0f92      	lsrs	r2, r2, #30
 800858e:	431a      	orrs	r2, r3
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008598:	0edb      	lsrs	r3, r3, #27
 800859a:	b2db      	uxtb	r3, r3
 800859c:	f003 0307 	and.w	r3, r3, #7
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085aa:	0e1b      	lsrs	r3, r3, #24
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085bc:	0d5b      	lsrs	r3, r3, #21
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ce:	0c9b      	lsrs	r3, r3, #18
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085e0:	0bdb      	lsrs	r3, r3, #15
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	f003 0307 	and.w	r3, r3, #7
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	7e1b      	ldrb	r3, [r3, #24]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	3302      	adds	r3, #2
 8008604:	2201      	movs	r2, #1
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800860e:	fb03 f202 	mul.w	r2, r3, r2
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	7a1b      	ldrb	r3, [r3, #8]
 800861a:	b2db      	uxtb	r3, r3
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	2201      	movs	r2, #1
 8008622:	409a      	lsls	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008630:	0a52      	lsrs	r2, r2, #9
 8008632:	fb03 f202 	mul.w	r2, r3, r2
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008640:	655a      	str	r2, [r3, #84]	; 0x54
 8008642:	e031      	b.n	80086a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008648:	2b01      	cmp	r3, #1
 800864a:	d11d      	bne.n	8008688 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008650:	041b      	lsls	r3, r3, #16
 8008652:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800865a:	0c1b      	lsrs	r3, r3, #16
 800865c:	431a      	orrs	r2, r3
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	3301      	adds	r3, #1
 8008668:	029a      	lsls	r2, r3, #10
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800867c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	655a      	str	r2, [r3, #84]	; 0x54
 8008686:	e00f      	b.n	80086a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a58      	ldr	r2, [pc, #352]	; (80087f0 <HAL_SD_GetCardCSD+0x344>)
 800868e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008694:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e09d      	b.n	80087e4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086ac:	0b9b      	lsrs	r3, r3, #14
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086be:	09db      	lsrs	r3, r3, #7
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086e0:	0fdb      	lsrs	r3, r3, #31
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086ec:	0f5b      	lsrs	r3, r3, #29
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f003 0303 	and.w	r3, r3, #3
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086fe:	0e9b      	lsrs	r3, r3, #26
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	b2da      	uxtb	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008710:	0d9b      	lsrs	r3, r3, #22
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	b2da      	uxtb	r2, r3
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008722:	0d5b      	lsrs	r3, r3, #21
 8008724:	b2db      	uxtb	r3, r3
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	b2da      	uxtb	r2, r3
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800873e:	0c1b      	lsrs	r3, r3, #16
 8008740:	b2db      	uxtb	r3, r3
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	b2da      	uxtb	r2, r3
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008752:	0bdb      	lsrs	r3, r3, #15
 8008754:	b2db      	uxtb	r3, r3
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	b2da      	uxtb	r2, r3
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008766:	0b9b      	lsrs	r3, r3, #14
 8008768:	b2db      	uxtb	r3, r3
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	b2da      	uxtb	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800877a:	0b5b      	lsrs	r3, r3, #13
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	b2da      	uxtb	r2, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800878e:	0b1b      	lsrs	r3, r3, #12
 8008790:	b2db      	uxtb	r3, r3
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	b2da      	uxtb	r2, r3
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087a2:	0a9b      	lsrs	r3, r3, #10
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087b6:	0a1b      	lsrs	r3, r3, #8
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ca:	085b      	lsrs	r3, r3, #1
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	1fe00fff 	.word	0x1fe00fff

080087f4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b094      	sub	sp, #80	; 0x50
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b03      	cmp	r3, #3
 800880e:	d101      	bne.n	8008814 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e0a7      	b.n	8008964 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008814:	f107 0308 	add.w	r3, r7, #8
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fb62 	bl	8008ee4 <SD_SendSDStatus>
 8008820:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008824:	2b00      	cmp	r3, #0
 8008826:	d011      	beq.n	800884c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a4f      	ldr	r2, [pc, #316]	; (800896c <HAL_SD_GetCardStatus+0x178>)
 800882e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800884a:	e070      	b.n	800892e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	099b      	lsrs	r3, r3, #6
 8008850:	b2db      	uxtb	r3, r3
 8008852:	f003 0303 	and.w	r3, r3, #3
 8008856:	b2da      	uxtb	r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	095b      	lsrs	r3, r3, #5
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	b2da      	uxtb	r2, r3
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	0a1b      	lsrs	r3, r3, #8
 8008870:	b29b      	uxth	r3, r3
 8008872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008876:	b29a      	uxth	r2, r3
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	0e1b      	lsrs	r3, r3, #24
 800887c:	b29b      	uxth	r3, r3
 800887e:	4313      	orrs	r3, r2
 8008880:	b29a      	uxth	r2, r3
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	061a      	lsls	r2, r3, #24
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008892:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	0a1b      	lsrs	r3, r3, #8
 8008898:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800889c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	0e1b      	lsrs	r3, r3, #24
 80088a2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	0d1b      	lsrs	r3, r3, #20
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	f003 030f 	and.w	r3, r3, #15
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	0c1b      	lsrs	r3, r3, #16
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	b29b      	uxth	r3, r3
 80088de:	4313      	orrs	r3, r2
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	0a9b      	lsrs	r3, r3, #10
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	0a1b      	lsrs	r3, r3, #8
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	b2da      	uxtb	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	091b      	lsrs	r3, r3, #4
 800890a:	b2db      	uxtb	r3, r3
 800890c:	f003 030f 	and.w	r3, r3, #15
 8008910:	b2da      	uxtb	r2, r3
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	f003 030f 	and.w	r3, r3, #15
 800891e:	b2da      	uxtb	r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	0e1b      	lsrs	r3, r3, #24
 8008928:	b2da      	uxtb	r2, r3
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008936:	4618      	mov	r0, r3
 8008938:	f001 f9a2 	bl	8009c80 <SDMMC_CmdBlockLength>
 800893c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800893e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00d      	beq.n	8008960 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a08      	ldr	r2, [pc, #32]	; (800896c <HAL_SD_GetCardStatus+0x178>)
 800894a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008950:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008960:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008964:	4618      	mov	r0, r3
 8008966:	3750      	adds	r7, #80	; 0x50
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	1fe00fff 	.word	0x1fe00fff

08008970 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b08d      	sub	sp, #52	; 0x34
 80089cc:	af02      	add	r7, sp, #8
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2203      	movs	r2, #3
 80089dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d02e      	beq.n	8008a46 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ee:	d106      	bne.n	80089fe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	635a      	str	r2, [r3, #52]	; 0x34
 80089fc:	e029      	b.n	8008a52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a04:	d10a      	bne.n	8008a1c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fb64 	bl	80090d4 <SD_WideBus_Enable>
 8008a0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	635a      	str	r2, [r3, #52]	; 0x34
 8008a1a:	e01a      	b.n	8008a52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10a      	bne.n	8008a38 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fba1 	bl	800916a <SD_WideBus_Disable>
 8008a28:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	431a      	orrs	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	635a      	str	r2, [r3, #52]	; 0x34
 8008a36:	e00c      	b.n	8008a52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	635a      	str	r2, [r3, #52]	; 0x34
 8008a44:	e005      	b.n	8008a52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d007      	beq.n	8008a6a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a5f      	ldr	r2, [pc, #380]	; (8008bdc <HAL_SD_ConfigWideBusOperation+0x214>)
 8008a60:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a68:	e096      	b.n	8008b98 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008a6a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008a6e:	f04f 0100 	mov.w	r1, #0
 8008a72:	f7fd fdf5 	bl	8006660 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a76:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 8083 	beq.w	8008b86 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	695a      	ldr	r2, [r3, #20]
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	4950      	ldr	r1, [pc, #320]	; (8008be0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008a9e:	fba1 1303 	umull	r1, r3, r1, r3
 8008aa2:	0e1b      	lsrs	r3, r3, #24
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d303      	bcc.n	8008ab0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	61bb      	str	r3, [r7, #24]
 8008aae:	e05a      	b.n	8008b66 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ab8:	d103      	bne.n	8008ac2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	61bb      	str	r3, [r7, #24]
 8008ac0:	e051      	b.n	8008b66 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aca:	d126      	bne.n	8008b1a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10e      	bne.n	8008af2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	4a43      	ldr	r2, [pc, #268]	; (8008be4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d906      	bls.n	8008aea <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	4a40      	ldr	r2, [pc, #256]	; (8008be0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae4:	0e5b      	lsrs	r3, r3, #25
 8008ae6:	61bb      	str	r3, [r7, #24]
 8008ae8:	e03d      	b.n	8008b66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	61bb      	str	r3, [r7, #24]
 8008af0:	e039      	b.n	8008b66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	69fa      	ldr	r2, [r7, #28]
 8008afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afe:	4a39      	ldr	r2, [pc, #228]	; (8008be4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d906      	bls.n	8008b12 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	4a36      	ldr	r2, [pc, #216]	; (8008be0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b08:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0c:	0e5b      	lsrs	r3, r3, #25
 8008b0e:	61bb      	str	r3, [r7, #24]
 8008b10:	e029      	b.n	8008b66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	61bb      	str	r3, [r7, #24]
 8008b18:	e025      	b.n	8008b66 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10e      	bne.n	8008b40 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	4a30      	ldr	r2, [pc, #192]	; (8008be8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d906      	bls.n	8008b38 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	4a2c      	ldr	r2, [pc, #176]	; (8008be0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b32:	0e1b      	lsrs	r3, r3, #24
 8008b34:	61bb      	str	r3, [r7, #24]
 8008b36:	e016      	b.n	8008b66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	61bb      	str	r3, [r7, #24]
 8008b3e:	e012      	b.n	8008b66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	005b      	lsls	r3, r3, #1
 8008b46:	69fa      	ldr	r2, [r7, #28]
 8008b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4c:	4a26      	ldr	r2, [pc, #152]	; (8008be8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d906      	bls.n	8008b60 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4a22      	ldr	r2, [pc, #136]	; (8008be0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b56:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5a:	0e1b      	lsrs	r3, r3, #24
 8008b5c:	61bb      	str	r3, [r7, #24]
 8008b5e:	e002      	b.n	8008b66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681c      	ldr	r4, [r3, #0]
 8008b6a:	466a      	mov	r2, sp
 8008b6c:	f107 0314 	add.w	r3, r7, #20
 8008b70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b74:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b78:	f107 0308 	add.w	r3, r7, #8
 8008b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f000 ffa0 	bl	8009ac4 <SDMMC_Init>
 8008b84:	e008      	b.n	8008b98 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f001 f86d 	bl	8009c80 <SDMMC_CmdBlockLength>
 8008ba6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00c      	beq.n	8008bc8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a0a      	ldr	r2, [pc, #40]	; (8008bdc <HAL_SD_ConfigWideBusOperation+0x214>)
 8008bb4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	372c      	adds	r7, #44	; 0x2c
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd90      	pop	{r4, r7, pc}
 8008bdc:	1fe00fff 	.word	0x1fe00fff
 8008be0:	55e63b89 	.word	0x55e63b89
 8008be4:	02faf080 	.word	0x02faf080
 8008be8:	017d7840 	.word	0x017d7840

08008bec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008bf8:	f107 030c 	add.w	r3, r7, #12
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa40 	bl	8009084 <SD_SendStatus>
 8008c04:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d005      	beq.n	8008c18 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	431a      	orrs	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	0a5b      	lsrs	r3, r3, #9
 8008c1c:	f003 030f 	and.w	r3, r3, #15
 8008c20:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c22:	693b      	ldr	r3, [r7, #16]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b090      	sub	sp, #64	; 0x40
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008c38:	f7f8 fe10 	bl	800185c <HAL_GetTick>
 8008c3c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 ff97 	bl	8009b76 <SDMMC_GetPowerState>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d102      	bne.n	8008c54 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c52:	e0b5      	b.n	8008dc0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d02e      	beq.n	8008cba <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f001 f9e2 	bl	800a02a <SDMMC_CmdSendCID>
 8008c66:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <SD_InitCard+0x46>
    {
      return errorstate;
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c70:	e0a6      	b.n	8008dc0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2100      	movs	r1, #0
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 ffc2 	bl	8009c02 <SDMMC_GetResponse>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2104      	movs	r1, #4
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 ffb9 	bl	8009c02 <SDMMC_GetResponse>
 8008c90:	4602      	mov	r2, r0
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2108      	movs	r1, #8
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 ffb0 	bl	8009c02 <SDMMC_GetResponse>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	210c      	movs	r1, #12
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 ffa7 	bl	8009c02 <SDMMC_GetResponse>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d01d      	beq.n	8008cfe <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008cc2:	e019      	b.n	8008cf8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f107 020a 	add.w	r2, r7, #10
 8008ccc:	4611      	mov	r1, r2
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 f9ea 	bl	800a0a8 <SDMMC_CmdSetRelAdd>
 8008cd4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	e06f      	b.n	8008dc0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008ce0:	f7f8 fdbc 	bl	800185c <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	f241 3287 	movw	r2, #4999	; 0x1387
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d902      	bls.n	8008cf8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008cf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cf6:	e063      	b.n	8008dc0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008cf8:	897b      	ldrh	r3, [r7, #10]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0e2      	beq.n	8008cc4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d036      	beq.n	8008d74 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d06:	897b      	ldrh	r3, [r7, #10]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d16:	041b      	lsls	r3, r3, #16
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f001 f9a4 	bl	800a068 <SDMMC_CmdSendCSD>
 8008d20:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <SD_InitCard+0x100>
    {
      return errorstate;
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	e049      	b.n	8008dc0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 ff65 	bl	8009c02 <SDMMC_GetResponse>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2104      	movs	r1, #4
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 ff5c 	bl	8009c02 <SDMMC_GetResponse>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2108      	movs	r1, #8
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 ff53 	bl	8009c02 <SDMMC_GetResponse>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	210c      	movs	r1, #12
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 ff4a 	bl	8009c02 <SDMMC_GetResponse>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2104      	movs	r1, #4
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 ff41 	bl	8009c02 <SDMMC_GetResponse>
 8008d80:	4603      	mov	r3, r0
 8008d82:	0d1a      	lsrs	r2, r3, #20
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d88:	f107 030c 	add.w	r3, r7, #12
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff fb8c 	bl	80084ac <HAL_SD_GetCardCSD>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d9e:	e00f      	b.n	8008dc0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da8:	041b      	lsls	r3, r3, #16
 8008daa:	4619      	mov	r1, r3
 8008dac:	4610      	mov	r0, r2
 8008dae:	f001 f853 	bl	8009e58 <SDMMC_CmdSelDesel>
 8008db2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <SD_InitCard+0x192>
  {
    return errorstate;
 8008dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbc:	e000      	b.n	8008dc0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3740      	adds	r7, #64	; 0x40
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 f85c 	bl	8009e9e <SDMMC_CmdGoIdleState>
 8008de6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	e072      	b.n	8008ed8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 f86f 	bl	8009eda <SDMMC_CmdOperCond>
 8008dfc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e04:	d10d      	bne.n	8008e22 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 f844 	bl	8009e9e <SDMMC_CmdGoIdleState>
 8008e16:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d004      	beq.n	8008e28 <SD_PowerON+0x60>
    {
      return errorstate;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	e05a      	b.n	8008ed8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d137      	bne.n	8008ea0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2100      	movs	r1, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f001 f86f 	bl	8009f1a <SDMMC_CmdAppCommand>
 8008e3c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d02d      	beq.n	8008ea0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e48:	e046      	b.n	8008ed8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2100      	movs	r1, #0
 8008e50:	4618      	mov	r0, r3
 8008e52:	f001 f862 	bl	8009f1a <SDMMC_CmdAppCommand>
 8008e56:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <SD_PowerON+0x9a>
    {
      return errorstate;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	e03a      	b.n	8008ed8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	491e      	ldr	r1, [pc, #120]	; (8008ee0 <SD_PowerON+0x118>)
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f001 f879 	bl	8009f60 <SDMMC_CmdAppOperCommand>
 8008e6e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e7a:	e02d      	b.n	8008ed8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 febd 	bl	8009c02 <SDMMC_GetResponse>
 8008e88:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	0fdb      	lsrs	r3, r3, #31
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d101      	bne.n	8008e96 <SD_PowerON+0xce>
 8008e92:	2301      	movs	r3, #1
 8008e94:	e000      	b.n	8008e98 <SD_PowerON+0xd0>
 8008e96:	2300      	movs	r3, #0
 8008e98:	613b      	str	r3, [r7, #16]

    count++;
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d802      	bhi.n	8008eb0 <SD_PowerON+0xe8>
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0cc      	beq.n	8008e4a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d902      	bls.n	8008ec0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008eba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ebe:	e00b      	b.n	8008ed8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	c1100000 	.word	0xc1100000

08008ee4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08c      	sub	sp, #48	; 0x30
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008eee:	f7f8 fcb5 	bl	800185c <HAL_GetTick>
 8008ef2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2100      	movs	r1, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fe7f 	bl	8009c02 <SDMMC_GetResponse>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f0e:	d102      	bne.n	8008f16 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f14:	e0b0      	b.n	8009078 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2140      	movs	r1, #64	; 0x40
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 feaf 	bl	8009c80 <SDMMC_CmdBlockLength>
 8008f22:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d005      	beq.n	8008f36 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	e0a0      	b.n	8009078 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3e:	041b      	lsls	r3, r3, #16
 8008f40:	4619      	mov	r1, r3
 8008f42:	4610      	mov	r0, r2
 8008f44:	f000 ffe9 	bl	8009f1a <SDMMC_CmdAppCommand>
 8008f48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d005      	beq.n	8008f5c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	e08d      	b.n	8009078 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f60:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008f62:	2340      	movs	r3, #64	; 0x40
 8008f64:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008f66:	2360      	movs	r3, #96	; 0x60
 8008f68:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f72:	2301      	movs	r3, #1
 8008f74:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f107 0208 	add.w	r2, r7, #8
 8008f7e:	4611      	mov	r1, r2
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fe51 	bl	8009c28 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f001 f8d1 	bl	800a132 <SDMMC_CmdStatusRegister>
 8008f90:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d02b      	beq.n	8008ff0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	e069      	b.n	8009078 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d013      	beq.n	8008fda <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fb6:	e00d      	b.n	8008fd4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 fdab 	bl	8009b18 <SDMMC_ReadFIFO>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	601a      	str	r2, [r3, #0]
        pData++;
 8008fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fca:	3304      	adds	r3, #4
 8008fcc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	2b07      	cmp	r3, #7
 8008fd8:	d9ee      	bls.n	8008fb8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fda:	f7f8 fc3f 	bl	800185c <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe8:	d102      	bne.n	8008ff0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008fea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fee:	e043      	b.n	8009078 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0d2      	beq.n	8008fa4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800900c:	2308      	movs	r3, #8
 800900e:	e033      	b.n	8009078 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800901e:	2302      	movs	r3, #2
 8009020:	e02a      	b.n	8009078 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d017      	beq.n	8009060 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009030:	2320      	movs	r3, #32
 8009032:	e021      	b.n	8009078 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fd6d 	bl	8009b18 <SDMMC_ReadFIFO>
 800903e:	4602      	mov	r2, r0
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	601a      	str	r2, [r3, #0]
    pData++;
 8009044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009046:	3304      	adds	r3, #4
 8009048:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800904a:	f7f8 fc07 	bl	800185c <HAL_GetTick>
 800904e:	4602      	mov	r2, r0
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009058:	d102      	bne.n	8009060 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800905a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800905e:	e00b      	b.n	8009078 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1e2      	bne.n	8009034 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a03      	ldr	r2, [pc, #12]	; (8009080 <SD_SendSDStatus+0x19c>)
 8009074:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3730      	adds	r7, #48	; 0x30
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	18000f3a 	.word	0x18000f3a

08009084 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d102      	bne.n	800909a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009094:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009098:	e018      	b.n	80090cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a2:	041b      	lsls	r3, r3, #16
 80090a4:	4619      	mov	r1, r3
 80090a6:	4610      	mov	r0, r2
 80090a8:	f001 f820 	bl	800a0ec <SDMMC_CmdSendStatus>
 80090ac:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	e009      	b.n	80090cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fd9f 	bl	8009c02 <SDMMC_GetResponse>
 80090c4:	4602      	mov	r2, r0
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80090dc:	2300      	movs	r3, #0
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	2300      	movs	r3, #0
 80090e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2100      	movs	r1, #0
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 fd89 	bl	8009c02 <SDMMC_GetResponse>
 80090f0:	4603      	mov	r3, r0
 80090f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090fa:	d102      	bne.n	8009102 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009100:	e02f      	b.n	8009162 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009102:	f107 030c 	add.w	r3, r7, #12
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f879 	bl	8009200 <SD_FindSCR>
 800910e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	e023      	b.n	8009162 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d01c      	beq.n	800915e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912c:	041b      	lsls	r3, r3, #16
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f000 fef2 	bl	8009f1a <SDMMC_CmdAppCommand>
 8009136:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	e00f      	b.n	8009162 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2102      	movs	r1, #2
 8009148:	4618      	mov	r0, r3
 800914a:	f000 ff29 	bl	8009fa0 <SDMMC_CmdBusWidth>
 800914e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	e003      	b.n	8009162 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800915a:	2300      	movs	r3, #0
 800915c:	e001      	b.n	8009162 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800915e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b086      	sub	sp, #24
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	2300      	movs	r3, #0
 8009178:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2100      	movs	r1, #0
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fd3e 	bl	8009c02 <SDMMC_GetResponse>
 8009186:	4603      	mov	r3, r0
 8009188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800918c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009190:	d102      	bne.n	8009198 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009196:	e02f      	b.n	80091f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009198:	f107 030c 	add.w	r3, r7, #12
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f82e 	bl	8009200 <SD_FindSCR>
 80091a4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	e023      	b.n	80091f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d01c      	beq.n	80091f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c2:	041b      	lsls	r3, r3, #16
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f000 fea7 	bl	8009f1a <SDMMC_CmdAppCommand>
 80091cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	e00f      	b.n	80091f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2100      	movs	r1, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fede 	bl	8009fa0 <SDMMC_CmdBusWidth>
 80091e4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	e003      	b.n	80091f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80091f0:	2300      	movs	r3, #0
 80091f2:	e001      	b.n	80091f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b08e      	sub	sp, #56	; 0x38
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800920a:	f7f8 fb27 	bl	800185c <HAL_GetTick>
 800920e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009214:	2300      	movs	r3, #0
 8009216:	60bb      	str	r3, [r7, #8]
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2108      	movs	r1, #8
 8009226:	4618      	mov	r0, r3
 8009228:	f000 fd2a 	bl	8009c80 <SDMMC_CmdBlockLength>
 800922c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009236:	e0ad      	b.n	8009394 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009240:	041b      	lsls	r3, r3, #16
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f000 fe68 	bl	8009f1a <SDMMC_CmdAppCommand>
 800924a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	e09e      	b.n	8009394 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800925a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800925c:	2308      	movs	r3, #8
 800925e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009260:	2330      	movs	r3, #48	; 0x30
 8009262:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009264:	2302      	movs	r3, #2
 8009266:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009268:	2300      	movs	r3, #0
 800926a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800926c:	2301      	movs	r3, #1
 800926e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f107 0210 	add.w	r2, r7, #16
 8009278:	4611      	mov	r1, r2
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fcd4 	bl	8009c28 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4618      	mov	r0, r3
 8009286:	f000 feae 	bl	8009fe6 <SDMMC_CmdSendSCR>
 800928a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	2b00      	cmp	r3, #0
 8009290:	d027      	beq.n	80092e2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	e07e      	b.n	8009394 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d113      	bne.n	80092cc <SD_FindSCR+0xcc>
 80092a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d110      	bne.n	80092cc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 fc32 	bl	8009b18 <SDMMC_ReadFIFO>
 80092b4:	4603      	mov	r3, r0
 80092b6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fc2b 	bl	8009b18 <SDMMC_ReadFIFO>
 80092c2:	4603      	mov	r3, r0
 80092c4:	60fb      	str	r3, [r7, #12]
      index++;
 80092c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c8:	3301      	adds	r3, #1
 80092ca:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092cc:	f7f8 fac6 	bl	800185c <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092da:	d102      	bne.n	80092e2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80092dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092e0:	e058      	b.n	8009394 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092e8:	f240 532a 	movw	r3, #1322	; 0x52a
 80092ec:	4013      	ands	r3, r2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0d1      	beq.n	8009296 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f8:	f003 0308 	and.w	r3, r3, #8
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2208      	movs	r2, #8
 8009306:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009308:	2308      	movs	r3, #8
 800930a:	e043      	b.n	8009394 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d005      	beq.n	8009326 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2202      	movs	r2, #2
 8009320:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009322:	2302      	movs	r3, #2
 8009324:	e036      	b.n	8009394 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932c:	f003 0320 	and.w	r3, r3, #32
 8009330:	2b00      	cmp	r3, #0
 8009332:	d005      	beq.n	8009340 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2220      	movs	r2, #32
 800933a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800933c:	2320      	movs	r3, #32
 800933e:	e029      	b.n	8009394 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a15      	ldr	r2, [pc, #84]	; (800939c <SD_FindSCR+0x19c>)
 8009346:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	061a      	lsls	r2, r3, #24
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009354:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	0a1b      	lsrs	r3, r3, #8
 800935a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800935e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	0e1b      	lsrs	r3, r3, #24
 8009364:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009368:	601a      	str	r2, [r3, #0]
    scr++;
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	3304      	adds	r3, #4
 800936e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	061a      	lsls	r2, r3, #24
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	021b      	lsls	r3, r3, #8
 8009378:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800937c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	0a1b      	lsrs	r3, r3, #8
 8009382:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009386:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	0e1b      	lsrs	r3, r3, #24
 800938c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3738      	adds	r7, #56	; 0x38
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	18000f3a 	.word	0x18000f3a

080093a0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	2b1f      	cmp	r3, #31
 80093b4:	d936      	bls.n	8009424 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80093b6:	2300      	movs	r3, #0
 80093b8:	617b      	str	r3, [r7, #20]
 80093ba:	e027      	b.n	800940c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fba9 	bl	8009b18 <SDMMC_ReadFIFO>
 80093c6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	3301      	adds	r3, #1
 80093d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	0a1b      	lsrs	r3, r3, #8
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	3301      	adds	r3, #1
 80093e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	0c1b      	lsrs	r3, r3, #16
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	3301      	adds	r3, #1
 80093f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	0e1b      	lsrs	r3, r3, #24
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	3301      	adds	r3, #1
 8009404:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	3301      	adds	r3, #1
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2b07      	cmp	r3, #7
 8009410:	d9d4      	bls.n	80093bc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941c:	f1a3 0220 	sub.w	r2, r3, #32
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8009424:	bf00      	nop
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	69db      	ldr	r3, [r3, #28]
 8009438:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	2b1f      	cmp	r3, #31
 8009440:	d93a      	bls.n	80094b8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8009442:	2300      	movs	r3, #0
 8009444:	617b      	str	r3, [r7, #20]
 8009446:	e02b      	b.n	80094a0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	3301      	adds	r3, #1
 8009452:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	021a      	lsls	r2, r3, #8
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4313      	orrs	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	3301      	adds	r3, #1
 8009464:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	041a      	lsls	r2, r3, #16
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4313      	orrs	r3, r2
 8009470:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	3301      	adds	r3, #1
 8009476:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	061a      	lsls	r2, r3, #24
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4313      	orrs	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	3301      	adds	r3, #1
 8009488:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f107 020c 	add.w	r2, r7, #12
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fb4c 	bl	8009b32 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	3301      	adds	r3, #1
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	2b07      	cmp	r3, #7
 80094a4:	d9d0      	bls.n	8009448 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	f1a3 0220 	sub.w	r2, r3, #32
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	621a      	str	r2, [r3, #32]
  }
}
 80094b8:	bf00      	nop
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e049      	b.n	80095b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d106      	bne.n	800953c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f841 	bl	80095be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2202      	movs	r2, #2
 8009540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	3304      	adds	r3, #4
 800954c:	4619      	mov	r1, r3
 800954e:	4610      	mov	r0, r2
 8009550:	f000 fa00 	bl	8009954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80095be:	b480      	push	{r7}
 80095c0:	b083      	sub	sp, #12
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
	...

080095d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d001      	beq.n	80095ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e054      	b.n	8009696 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2202      	movs	r2, #2
 80095f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f042 0201 	orr.w	r2, r2, #1
 8009602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a26      	ldr	r2, [pc, #152]	; (80096a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d022      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x80>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009616:	d01d      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x80>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a22      	ldr	r2, [pc, #136]	; (80096a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d018      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x80>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a21      	ldr	r2, [pc, #132]	; (80096ac <HAL_TIM_Base_Start_IT+0xd8>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d013      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x80>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a1f      	ldr	r2, [pc, #124]	; (80096b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d00e      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x80>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a1e      	ldr	r2, [pc, #120]	; (80096b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d009      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x80>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a1c      	ldr	r2, [pc, #112]	; (80096b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d004      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x80>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a1b      	ldr	r2, [pc, #108]	; (80096bc <HAL_TIM_Base_Start_IT+0xe8>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d115      	bne.n	8009680 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	4b19      	ldr	r3, [pc, #100]	; (80096c0 <HAL_TIM_Base_Start_IT+0xec>)
 800965c:	4013      	ands	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b06      	cmp	r3, #6
 8009664:	d015      	beq.n	8009692 <HAL_TIM_Base_Start_IT+0xbe>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800966c:	d011      	beq.n	8009692 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f042 0201 	orr.w	r2, r2, #1
 800967c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800967e:	e008      	b.n	8009692 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0201 	orr.w	r2, r2, #1
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	e000      	b.n	8009694 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009692:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	40010000 	.word	0x40010000
 80096a8:	40000400 	.word	0x40000400
 80096ac:	40000800 	.word	0x40000800
 80096b0:	40000c00 	.word	0x40000c00
 80096b4:	40010400 	.word	0x40010400
 80096b8:	40001800 	.word	0x40001800
 80096bc:	40014000 	.word	0x40014000
 80096c0:	00010007 	.word	0x00010007

080096c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	f003 0302 	and.w	r3, r3, #2
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d122      	bne.n	8009720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d11b      	bne.n	8009720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f06f 0202 	mvn.w	r2, #2
 80096f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	f003 0303 	and.w	r3, r3, #3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d003      	beq.n	800970e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f905 	bl	8009916 <HAL_TIM_IC_CaptureCallback>
 800970c:	e005      	b.n	800971a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f8f7 	bl	8009902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f908 	bl	800992a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	f003 0304 	and.w	r3, r3, #4
 800972a:	2b04      	cmp	r3, #4
 800972c:	d122      	bne.n	8009774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b04      	cmp	r3, #4
 800973a:	d11b      	bne.n	8009774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f06f 0204 	mvn.w	r2, #4
 8009744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2202      	movs	r2, #2
 800974a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f8db 	bl	8009916 <HAL_TIM_IC_CaptureCallback>
 8009760:	e005      	b.n	800976e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f8cd 	bl	8009902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f8de 	bl	800992a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	f003 0308 	and.w	r3, r3, #8
 800977e:	2b08      	cmp	r3, #8
 8009780:	d122      	bne.n	80097c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b08      	cmp	r3, #8
 800978e:	d11b      	bne.n	80097c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f06f 0208 	mvn.w	r2, #8
 8009798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2204      	movs	r2, #4
 800979e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	f003 0303 	and.w	r3, r3, #3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f8b1 	bl	8009916 <HAL_TIM_IC_CaptureCallback>
 80097b4:	e005      	b.n	80097c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f8a3 	bl	8009902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f8b4 	bl	800992a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	f003 0310 	and.w	r3, r3, #16
 80097d2:	2b10      	cmp	r3, #16
 80097d4:	d122      	bne.n	800981c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b10      	cmp	r3, #16
 80097e2:	d11b      	bne.n	800981c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f06f 0210 	mvn.w	r2, #16
 80097ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2208      	movs	r2, #8
 80097f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	69db      	ldr	r3, [r3, #28]
 80097fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f887 	bl	8009916 <HAL_TIM_IC_CaptureCallback>
 8009808:	e005      	b.n	8009816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f879 	bl	8009902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f88a 	bl	800992a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b01      	cmp	r3, #1
 8009828:	d10e      	bne.n	8009848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b01      	cmp	r3, #1
 8009836:	d107      	bne.n	8009848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f06f 0201 	mvn.w	r2, #1
 8009840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7f7 fbea 	bl	800101c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009852:	2b80      	cmp	r3, #128	; 0x80
 8009854:	d10e      	bne.n	8009874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009860:	2b80      	cmp	r3, #128	; 0x80
 8009862:	d107      	bne.n	8009874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800986c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f914 	bl	8009a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009882:	d10e      	bne.n	80098a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800988e:	2b80      	cmp	r3, #128	; 0x80
 8009890:	d107      	bne.n	80098a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800989a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f907 	bl	8009ab0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ac:	2b40      	cmp	r3, #64	; 0x40
 80098ae:	d10e      	bne.n	80098ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ba:	2b40      	cmp	r3, #64	; 0x40
 80098bc:	d107      	bne.n	80098ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f838 	bl	800993e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f003 0320 	and.w	r3, r3, #32
 80098d8:	2b20      	cmp	r3, #32
 80098da:	d10e      	bne.n	80098fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d107      	bne.n	80098fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f06f 0220 	mvn.w	r2, #32
 80098f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f8c7 	bl	8009a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098fa:	bf00      	nop
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800990a:	bf00      	nop
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009932:	bf00      	nop
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800993e:	b480      	push	{r7}
 8009940:	b083      	sub	sp, #12
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
	...

08009954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a40      	ldr	r2, [pc, #256]	; (8009a68 <TIM_Base_SetConfig+0x114>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d013      	beq.n	8009994 <TIM_Base_SetConfig+0x40>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009972:	d00f      	beq.n	8009994 <TIM_Base_SetConfig+0x40>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a3d      	ldr	r2, [pc, #244]	; (8009a6c <TIM_Base_SetConfig+0x118>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d00b      	beq.n	8009994 <TIM_Base_SetConfig+0x40>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a3c      	ldr	r2, [pc, #240]	; (8009a70 <TIM_Base_SetConfig+0x11c>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d007      	beq.n	8009994 <TIM_Base_SetConfig+0x40>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a3b      	ldr	r2, [pc, #236]	; (8009a74 <TIM_Base_SetConfig+0x120>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d003      	beq.n	8009994 <TIM_Base_SetConfig+0x40>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a3a      	ldr	r2, [pc, #232]	; (8009a78 <TIM_Base_SetConfig+0x124>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d108      	bne.n	80099a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a2f      	ldr	r2, [pc, #188]	; (8009a68 <TIM_Base_SetConfig+0x114>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d01f      	beq.n	80099ee <TIM_Base_SetConfig+0x9a>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b4:	d01b      	beq.n	80099ee <TIM_Base_SetConfig+0x9a>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a2c      	ldr	r2, [pc, #176]	; (8009a6c <TIM_Base_SetConfig+0x118>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d017      	beq.n	80099ee <TIM_Base_SetConfig+0x9a>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a2b      	ldr	r2, [pc, #172]	; (8009a70 <TIM_Base_SetConfig+0x11c>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d013      	beq.n	80099ee <TIM_Base_SetConfig+0x9a>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a2a      	ldr	r2, [pc, #168]	; (8009a74 <TIM_Base_SetConfig+0x120>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d00f      	beq.n	80099ee <TIM_Base_SetConfig+0x9a>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a29      	ldr	r2, [pc, #164]	; (8009a78 <TIM_Base_SetConfig+0x124>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d00b      	beq.n	80099ee <TIM_Base_SetConfig+0x9a>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a28      	ldr	r2, [pc, #160]	; (8009a7c <TIM_Base_SetConfig+0x128>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d007      	beq.n	80099ee <TIM_Base_SetConfig+0x9a>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a27      	ldr	r2, [pc, #156]	; (8009a80 <TIM_Base_SetConfig+0x12c>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d003      	beq.n	80099ee <TIM_Base_SetConfig+0x9a>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a26      	ldr	r2, [pc, #152]	; (8009a84 <TIM_Base_SetConfig+0x130>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d108      	bne.n	8009a00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	689a      	ldr	r2, [r3, #8]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a10      	ldr	r2, [pc, #64]	; (8009a68 <TIM_Base_SetConfig+0x114>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d00f      	beq.n	8009a4c <TIM_Base_SetConfig+0xf8>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a12      	ldr	r2, [pc, #72]	; (8009a78 <TIM_Base_SetConfig+0x124>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d00b      	beq.n	8009a4c <TIM_Base_SetConfig+0xf8>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a11      	ldr	r2, [pc, #68]	; (8009a7c <TIM_Base_SetConfig+0x128>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d007      	beq.n	8009a4c <TIM_Base_SetConfig+0xf8>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a10      	ldr	r2, [pc, #64]	; (8009a80 <TIM_Base_SetConfig+0x12c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d003      	beq.n	8009a4c <TIM_Base_SetConfig+0xf8>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a0f      	ldr	r2, [pc, #60]	; (8009a84 <TIM_Base_SetConfig+0x130>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d103      	bne.n	8009a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	691a      	ldr	r2, [r3, #16]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	615a      	str	r2, [r3, #20]
}
 8009a5a:	bf00      	nop
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	40010000 	.word	0x40010000
 8009a6c:	40000400 	.word	0x40000400
 8009a70:	40000800 	.word	0x40000800
 8009a74:	40000c00 	.word	0x40000c00
 8009a78:	40010400 	.word	0x40010400
 8009a7c:	40014000 	.word	0x40014000
 8009a80:	40014400 	.word	0x40014400
 8009a84:	40014800 	.word	0x40014800

08009a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	b480      	push	{r7}
 8009ac8:	b085      	sub	sp, #20
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	f107 001c 	add.w	r0, r7, #28
 8009ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009ada:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009adc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009ade:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009ae2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009ae6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009aea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	4b07      	ldr	r3, [pc, #28]	; (8009b14 <SDMMC_Init+0x50>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	431a      	orrs	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	b004      	add	sp, #16
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	ffc02c00 	.word	0xffc02c00

08009b18 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f043 0203 	orr.w	r2, r3, #3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b083      	sub	sp, #12
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0303 	and.w	r3, r3, #3
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
	...

08009b94 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009bb2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009bb8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009bbe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68da      	ldr	r2, [r3, #12]
 8009bca:	4b06      	ldr	r3, [pc, #24]	; (8009be4 <SDMMC_SendCommand+0x50>)
 8009bcc:	4013      	ands	r3, r2
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	fffee0c0 	.word	0xfffee0c0

08009be8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	b2db      	uxtb	r3, r3
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3314      	adds	r3, #20
 8009c10:	461a      	mov	r2, r3
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	4413      	add	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009c4e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009c54:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009c5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	431a      	orrs	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0

}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009c8e:	2310      	movs	r3, #16
 8009c90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ca0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ca2:	f107 0308 	add.w	r3, r7, #8
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7ff ff73 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb2:	2110      	movs	r1, #16
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fa5f 	bl	800a178 <SDMMC_GetCmdResp1>
 8009cba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3720      	adds	r7, #32
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b088      	sub	sp, #32
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009cd4:	2311      	movs	r3, #17
 8009cd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ce8:	f107 0308 	add.w	r3, r7, #8
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7ff ff50 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf8:	2111      	movs	r1, #17
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fa3c 	bl	800a178 <SDMMC_GetCmdResp1>
 8009d00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d02:	69fb      	ldr	r3, [r7, #28]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3720      	adds	r7, #32
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009d1a:	2312      	movs	r3, #18
 8009d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d24:	2300      	movs	r3, #0
 8009d26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d2e:	f107 0308 	add.w	r3, r7, #8
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff ff2d 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d3e:	2112      	movs	r1, #18
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fa19 	bl	800a178 <SDMMC_GetCmdResp1>
 8009d46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d48:	69fb      	ldr	r3, [r7, #28]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3720      	adds	r7, #32
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b088      	sub	sp, #32
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009d60:	2318      	movs	r3, #24
 8009d62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d74:	f107 0308 	add.w	r3, r7, #8
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff ff0a 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d84:	2118      	movs	r1, #24
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f9f6 	bl	800a178 <SDMMC_GetCmdResp1>
 8009d8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d8e:	69fb      	ldr	r3, [r7, #28]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3720      	adds	r7, #32
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b088      	sub	sp, #32
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009da6:	2319      	movs	r3, #25
 8009da8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009db0:	2300      	movs	r3, #0
 8009db2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009db8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dba:	f107 0308 	add.w	r3, r7, #8
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff fee7 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dca:	2119      	movs	r1, #25
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f9d3 	bl	800a178 <SDMMC_GetCmdResp1>
 8009dd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3720      	adds	r7, #32
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
	...

08009de0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009dec:	230c      	movs	r3, #12
 8009dee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009df4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009df6:	2300      	movs	r3, #0
 8009df8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dfe:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e18:	f107 0308 	add.w	r3, r7, #8
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff feb8 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009e24:	4a0b      	ldr	r2, [pc, #44]	; (8009e54 <SDMMC_CmdStopTransfer+0x74>)
 8009e26:	210c      	movs	r1, #12
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f9a5 	bl	800a178 <SDMMC_GetCmdResp1>
 8009e2e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e42:	d101      	bne.n	8009e48 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009e44:	2300      	movs	r3, #0
 8009e46:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009e48:	69fb      	ldr	r3, [r7, #28]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3720      	adds	r7, #32
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	05f5e100 	.word	0x05f5e100

08009e58 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b088      	sub	sp, #32
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009e66:	2307      	movs	r3, #7
 8009e68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e70:	2300      	movs	r3, #0
 8009e72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e7a:	f107 0308 	add.w	r3, r7, #8
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7ff fe87 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e8a:	2107      	movs	r1, #7
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 f973 	bl	800a178 <SDMMC_GetCmdResp1>
 8009e92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e94:	69fb      	ldr	r3, [r7, #28]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3720      	adds	r7, #32
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b088      	sub	sp, #32
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ebc:	f107 0308 	add.w	r3, r7, #8
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff fe66 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fb97 	bl	800a5fc <SDMMC_GetCmdError>
 8009ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ed0:	69fb      	ldr	r3, [r7, #28]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3720      	adds	r7, #32
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b088      	sub	sp, #32
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009ee2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009ee8:	2308      	movs	r3, #8
 8009eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009efa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009efc:	f107 0308 	add.w	r3, r7, #8
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff fe46 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fb29 	bl	800a560 <SDMMC_GetCmdResp7>
 8009f0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f10:	69fb      	ldr	r3, [r7, #28]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3720      	adds	r7, #32
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b088      	sub	sp, #32
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009f28:	2337      	movs	r3, #55	; 0x37
 8009f2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f3c:	f107 0308 	add.w	r3, r7, #8
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7ff fe26 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f4c:	2137      	movs	r1, #55	; 0x37
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f912 	bl	800a178 <SDMMC_GetCmdResp1>
 8009f54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f56:	69fb      	ldr	r3, [r7, #28]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3720      	adds	r7, #32
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b088      	sub	sp, #32
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009f6e:	2329      	movs	r3, #41	; 0x29
 8009f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f82:	f107 0308 	add.w	r3, r7, #8
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff fe03 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fa2e 	bl	800a3f0 <SDMMC_GetCmdResp3>
 8009f94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f96:	69fb      	ldr	r3, [r7, #28]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3720      	adds	r7, #32
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b088      	sub	sp, #32
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009fae:	2306      	movs	r3, #6
 8009fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fc2:	f107 0308 	add.w	r3, r7, #8
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7ff fde3 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fd2:	2106      	movs	r1, #6
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f8cf 	bl	800a178 <SDMMC_GetCmdResp1>
 8009fda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3720      	adds	r7, #32
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b088      	sub	sp, #32
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009ff2:	2333      	movs	r3, #51	; 0x33
 8009ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a006:	f107 0308 	add.w	r3, r7, #8
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff fdc1 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a012:	f241 3288 	movw	r2, #5000	; 0x1388
 800a016:	2133      	movs	r1, #51	; 0x33
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f8ad 	bl	800a178 <SDMMC_GetCmdResp1>
 800a01e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a020:	69fb      	ldr	r3, [r7, #28]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3720      	adds	r7, #32
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b088      	sub	sp, #32
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a036:	2302      	movs	r3, #2
 800a038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a03a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a03e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a04a:	f107 0308 	add.w	r3, r7, #8
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff fd9f 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f980 	bl	800a35c <SDMMC_GetCmdResp2>
 800a05c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a05e:	69fb      	ldr	r3, [r7, #28]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3720      	adds	r7, #32
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a076:	2309      	movs	r3, #9
 800a078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a07a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a07e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a080:	2300      	movs	r3, #0
 800a082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a088:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a08a:	f107 0308 	add.w	r3, r7, #8
 800a08e:	4619      	mov	r1, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7ff fd7f 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f960 	bl	800a35c <SDMMC_GetCmdResp2>
 800a09c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a09e:	69fb      	ldr	r3, [r7, #28]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3720      	adds	r7, #32
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b088      	sub	sp, #32
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0ca:	f107 0308 	add.w	r3, r7, #8
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7ff fd5f 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	2103      	movs	r1, #3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f9c8 	bl	800a470 <SDMMC_GetCmdResp6>
 800a0e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0e2:	69fb      	ldr	r3, [r7, #28]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3720      	adds	r7, #32
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b088      	sub	sp, #32
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a0fa:	230d      	movs	r3, #13
 800a0fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a104:	2300      	movs	r3, #0
 800a106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a10c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a10e:	f107 0308 	add.w	r3, r7, #8
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff fd3d 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a11a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a11e:	210d      	movs	r1, #13
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f829 	bl	800a178 <SDMMC_GetCmdResp1>
 800a126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a128:	69fb      	ldr	r3, [r7, #28]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3720      	adds	r7, #32
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b088      	sub	sp, #32
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a13e:	230d      	movs	r3, #13
 800a140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a142:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a148:	2300      	movs	r3, #0
 800a14a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a14c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a152:	f107 0308 	add.w	r3, r7, #8
 800a156:	4619      	mov	r1, r3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff fd1b 	bl	8009b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a15e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a162:	210d      	movs	r1, #13
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f807 	bl	800a178 <SDMMC_GetCmdResp1>
 800a16a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a16c:	69fb      	ldr	r3, [r7, #28]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3720      	adds	r7, #32
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	460b      	mov	r3, r1
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a186:	4b70      	ldr	r3, [pc, #448]	; (800a348 <SDMMC_GetCmdResp1+0x1d0>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a70      	ldr	r2, [pc, #448]	; (800a34c <SDMMC_GetCmdResp1+0x1d4>)
 800a18c:	fba2 2303 	umull	r2, r3, r2, r3
 800a190:	0a5a      	lsrs	r2, r3, #9
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	fb02 f303 	mul.w	r3, r2, r3
 800a198:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	1e5a      	subs	r2, r3, #1
 800a19e:	61fa      	str	r2, [r7, #28]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1a8:	e0c9      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ae:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a1b0:	69ba      	ldr	r2, [r7, #24]
 800a1b2:	4b67      	ldr	r3, [pc, #412]	; (800a350 <SDMMC_GetCmdResp1+0x1d8>)
 800a1b4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0ef      	beq.n	800a19a <SDMMC_GetCmdResp1+0x22>
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1ea      	bne.n	800a19a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2204      	movs	r2, #4
 800a1d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1d6:	2304      	movs	r3, #4
 800a1d8:	e0b1      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d004      	beq.n	800a1f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e0a6      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4a58      	ldr	r2, [pc, #352]	; (800a354 <SDMMC_GetCmdResp1+0x1dc>)
 800a1f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff fcf6 	bl	8009be8 <SDMMC_GetCommandResponse>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	461a      	mov	r2, r3
 800a200:	7afb      	ldrb	r3, [r7, #11]
 800a202:	4293      	cmp	r3, r2
 800a204:	d001      	beq.n	800a20a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a206:	2301      	movs	r3, #1
 800a208:	e099      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a20a:	2100      	movs	r1, #0
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f7ff fcf8 	bl	8009c02 <SDMMC_GetResponse>
 800a212:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	4b50      	ldr	r3, [pc, #320]	; (800a358 <SDMMC_GetCmdResp1+0x1e0>)
 800a218:	4013      	ands	r3, r2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a21e:	2300      	movs	r3, #0
 800a220:	e08d      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	2b00      	cmp	r3, #0
 800a226:	da02      	bge.n	800a22e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a22c:	e087      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a238:	2340      	movs	r3, #64	; 0x40
 800a23a:	e080      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a246:	2380      	movs	r3, #128	; 0x80
 800a248:	e079      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a254:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a258:	e071      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a264:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a268:	e069      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a278:	e061      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a288:	e059      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a298:	e051      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2a8:	e049      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a2b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2b8:	e041      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a2c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2c8:	e039      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a2d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a2d8:	e031      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a2e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a2e8:	e029      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a2f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a2f8:	e021      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a304:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a308:	e019      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a314:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a318:	e011      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a324:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a328:	e009      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f003 0308 	and.w	r3, r3, #8
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a334:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a338:	e001      	b.n	800a33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a33a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3720      	adds	r7, #32
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	24000000 	.word	0x24000000
 800a34c:	10624dd3 	.word	0x10624dd3
 800a350:	00200045 	.word	0x00200045
 800a354:	002000c5 	.word	0x002000c5
 800a358:	fdffe008 	.word	0xfdffe008

0800a35c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a364:	4b1f      	ldr	r3, [pc, #124]	; (800a3e4 <SDMMC_GetCmdResp2+0x88>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a1f      	ldr	r2, [pc, #124]	; (800a3e8 <SDMMC_GetCmdResp2+0x8c>)
 800a36a:	fba2 2303 	umull	r2, r3, r2, r3
 800a36e:	0a5b      	lsrs	r3, r3, #9
 800a370:	f241 3288 	movw	r2, #5000	; 0x1388
 800a374:	fb02 f303 	mul.w	r3, r2, r3
 800a378:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	1e5a      	subs	r2, r3, #1
 800a37e:	60fa      	str	r2, [r7, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d102      	bne.n	800a38a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a384:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a388:	e026      	b.n	800a3d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a396:	2b00      	cmp	r3, #0
 800a398:	d0ef      	beq.n	800a37a <SDMMC_GetCmdResp2+0x1e>
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1ea      	bne.n	800a37a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d004      	beq.n	800a3ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2204      	movs	r2, #4
 800a3b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3b6:	2304      	movs	r3, #4
 800a3b8:	e00e      	b.n	800a3d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d004      	beq.n	800a3d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e003      	b.n	800a3d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a06      	ldr	r2, [pc, #24]	; (800a3ec <SDMMC_GetCmdResp2+0x90>)
 800a3d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	24000000 	.word	0x24000000
 800a3e8:	10624dd3 	.word	0x10624dd3
 800a3ec:	002000c5 	.word	0x002000c5

0800a3f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3f8:	4b1a      	ldr	r3, [pc, #104]	; (800a464 <SDMMC_GetCmdResp3+0x74>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a1a      	ldr	r2, [pc, #104]	; (800a468 <SDMMC_GetCmdResp3+0x78>)
 800a3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a402:	0a5b      	lsrs	r3, r3, #9
 800a404:	f241 3288 	movw	r2, #5000	; 0x1388
 800a408:	fb02 f303 	mul.w	r3, r2, r3
 800a40c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	1e5a      	subs	r2, r3, #1
 800a412:	60fa      	str	r2, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a418:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a41c:	e01b      	b.n	800a456 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a422:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0ef      	beq.n	800a40e <SDMMC_GetCmdResp3+0x1e>
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1ea      	bne.n	800a40e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	2b00      	cmp	r3, #0
 800a442:	d004      	beq.n	800a44e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2204      	movs	r2, #4
 800a448:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a44a:	2304      	movs	r3, #4
 800a44c:	e003      	b.n	800a456 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a06      	ldr	r2, [pc, #24]	; (800a46c <SDMMC_GetCmdResp3+0x7c>)
 800a452:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	24000000 	.word	0x24000000
 800a468:	10624dd3 	.word	0x10624dd3
 800a46c:	002000c5 	.word	0x002000c5

0800a470 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	460b      	mov	r3, r1
 800a47a:	607a      	str	r2, [r7, #4]
 800a47c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a47e:	4b35      	ldr	r3, [pc, #212]	; (800a554 <SDMMC_GetCmdResp6+0xe4>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a35      	ldr	r2, [pc, #212]	; (800a558 <SDMMC_GetCmdResp6+0xe8>)
 800a484:	fba2 2303 	umull	r2, r3, r2, r3
 800a488:	0a5b      	lsrs	r3, r3, #9
 800a48a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a48e:	fb02 f303 	mul.w	r3, r2, r3
 800a492:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	1e5a      	subs	r2, r3, #1
 800a498:	61fa      	str	r2, [r7, #28]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d102      	bne.n	800a4a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a49e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4a2:	e052      	b.n	800a54a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0ef      	beq.n	800a494 <SDMMC_GetCmdResp6+0x24>
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1ea      	bne.n	800a494 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c2:	f003 0304 	and.w	r3, r3, #4
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d004      	beq.n	800a4d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2204      	movs	r2, #4
 800a4ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4d0:	2304      	movs	r3, #4
 800a4d2:	e03a      	b.n	800a54a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d004      	beq.n	800a4ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e02f      	b.n	800a54a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f7ff fb7c 	bl	8009be8 <SDMMC_GetCommandResponse>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	7afb      	ldrb	r3, [r7, #11]
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d001      	beq.n	800a4fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e025      	b.n	800a54a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4a16      	ldr	r2, [pc, #88]	; (800a55c <SDMMC_GetCmdResp6+0xec>)
 800a502:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a504:	2100      	movs	r1, #0
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f7ff fb7b 	bl	8009c02 <SDMMC_GetResponse>
 800a50c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d106      	bne.n	800a526 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	0c1b      	lsrs	r3, r3, #16
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a522:	2300      	movs	r3, #0
 800a524:	e011      	b.n	800a54a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a534:	e009      	b.n	800a54a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a544:	e001      	b.n	800a54a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3720      	adds	r7, #32
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	24000000 	.word	0x24000000
 800a558:	10624dd3 	.word	0x10624dd3
 800a55c:	002000c5 	.word	0x002000c5

0800a560 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a568:	4b22      	ldr	r3, [pc, #136]	; (800a5f4 <SDMMC_GetCmdResp7+0x94>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a22      	ldr	r2, [pc, #136]	; (800a5f8 <SDMMC_GetCmdResp7+0x98>)
 800a56e:	fba2 2303 	umull	r2, r3, r2, r3
 800a572:	0a5b      	lsrs	r3, r3, #9
 800a574:	f241 3288 	movw	r2, #5000	; 0x1388
 800a578:	fb02 f303 	mul.w	r3, r2, r3
 800a57c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	1e5a      	subs	r2, r3, #1
 800a582:	60fa      	str	r2, [r7, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d102      	bne.n	800a58e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a58c:	e02c      	b.n	800a5e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a592:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d0ef      	beq.n	800a57e <SDMMC_GetCmdResp7+0x1e>
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1ea      	bne.n	800a57e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ac:	f003 0304 	and.w	r3, r3, #4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d004      	beq.n	800a5be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2204      	movs	r2, #4
 800a5b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5ba:	2304      	movs	r3, #4
 800a5bc:	e014      	b.n	800a5e8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d004      	beq.n	800a5d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e009      	b.n	800a5e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2240      	movs	r2, #64	; 0x40
 800a5e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5e6:	2300      	movs	r3, #0

}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	24000000 	.word	0x24000000
 800a5f8:	10624dd3 	.word	0x10624dd3

0800a5fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a604:	4b11      	ldr	r3, [pc, #68]	; (800a64c <SDMMC_GetCmdError+0x50>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a11      	ldr	r2, [pc, #68]	; (800a650 <SDMMC_GetCmdError+0x54>)
 800a60a:	fba2 2303 	umull	r2, r3, r2, r3
 800a60e:	0a5b      	lsrs	r3, r3, #9
 800a610:	f241 3288 	movw	r2, #5000	; 0x1388
 800a614:	fb02 f303 	mul.w	r3, r2, r3
 800a618:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	1e5a      	subs	r2, r3, #1
 800a61e:	60fa      	str	r2, [r7, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d102      	bne.n	800a62a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a624:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a628:	e009      	b.n	800a63e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a632:	2b00      	cmp	r3, #0
 800a634:	d0f1      	beq.n	800a61a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a06      	ldr	r2, [pc, #24]	; (800a654 <SDMMC_GetCmdError+0x58>)
 800a63a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	24000000 	.word	0x24000000
 800a650:	10624dd3 	.word	0x10624dd3
 800a654:	002000c5 	.word	0x002000c5

0800a658 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a658:	b480      	push	{r7}
 800a65a:	af00      	add	r7, sp, #0
  //retSD = FATFS_LinkDriver(&SD_Driver, SDPath);

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a65c:	bf00      	nop
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a666:	b480      	push	{r7}
 800a668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a66a:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
	...

0800a678 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a682:	f000 f885 	bl	800a790 <BSP_SD_IsDetected>
 800a686:	4603      	mov	r3, r0
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d001      	beq.n	800a690 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a68c:	2302      	movs	r3, #2
 800a68e:	e012      	b.n	800a6b6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a690:	480b      	ldr	r0, [pc, #44]	; (800a6c0 <BSP_SD_Init+0x48>)
 800a692:	f7fd fad9 	bl	8007c48 <HAL_SD_Init>
 800a696:	4603      	mov	r3, r0
 800a698:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d109      	bne.n	800a6b4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a6a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a6a4:	4806      	ldr	r0, [pc, #24]	; (800a6c0 <BSP_SD_Init+0x48>)
 800a6a6:	f7fe f98f 	bl	80089c8 <HAL_SD_ConfigWideBusOperation>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	2400110c 	.word	0x2400110c

0800a6c4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	68f9      	ldr	r1, [r7, #12]
 800a6da:	4806      	ldr	r0, [pc, #24]	; (800a6f4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a6dc:	f7fd fbd4 	bl	8007e88 <HAL_SD_ReadBlocks_DMA>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	2400110c 	.word	0x2400110c

0800a6f8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	68f9      	ldr	r1, [r7, #12]
 800a70e:	4806      	ldr	r0, [pc, #24]	; (800a728 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a710:	f7fd fc62 	bl	8007fd8 <HAL_SD_WriteBlocks_DMA>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3718      	adds	r7, #24
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	2400110c 	.word	0x2400110c

0800a72c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a730:	4805      	ldr	r0, [pc, #20]	; (800a748 <BSP_SD_GetCardState+0x1c>)
 800a732:	f7fe fa5b 	bl	8008bec <HAL_SD_GetCardState>
 800a736:	4603      	mov	r3, r0
 800a738:	2b04      	cmp	r3, #4
 800a73a:	bf14      	ite	ne
 800a73c:	2301      	movne	r3, #1
 800a73e:	2300      	moveq	r3, #0
 800a740:	b2db      	uxtb	r3, r3
}
 800a742:	4618      	mov	r0, r3
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	2400110c 	.word	0x2400110c

0800a74c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	4803      	ldr	r0, [pc, #12]	; (800a764 <BSP_SD_GetCardInfo+0x18>)
 800a758:	f7fe f90a 	bl	8008970 <HAL_SD_GetCardInfo>
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	2400110c 	.word	0x2400110c

0800a768 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a770:	f000 fa20 	bl	800abb4 <BSP_SD_WriteCpltCallback>
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a784:	f000 fa24 	bl	800abd0 <BSP_SD_ReadCpltCallback>
}
 800a788:	bf00      	nop
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a796:	2301      	movs	r3, #1
 800a798:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a79a:	f000 f80b 	bl	800a7b4 <BSP_PlatformIsDetected>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a7a8:	79fb      	ldrb	r3, [r7, #7]
 800a7aa:	b2db      	uxtb	r3, r3
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a7be:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7c2:	4806      	ldr	r0, [pc, #24]	; (800a7dc <BSP_PlatformIsDetected+0x28>)
 800a7c4:	f7f9 f930 	bl	8003a28 <HAL_GPIO_ReadPin>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a7d2:	79fb      	ldrb	r3, [r7, #7]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	58022000 	.word	0x58022000

0800a7e0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800a7e8:	f003 ff5e 	bl	800e6a8 <osKernelSysTick>
 800a7ec:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800a7ee:	e006      	b.n	800a7fe <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a7f0:	f7ff ff9c 	bl	800a72c <BSP_SD_GetCardState>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d101      	bne.n	800a7fe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	e009      	b.n	800a812 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800a7fe:	f003 ff53 	bl	800e6a8 <osKernelSysTick>
 800a802:	4602      	mov	r2, r0
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d8f0      	bhi.n	800a7f0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a80e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a826:	4b0b      	ldr	r3, [pc, #44]	; (800a854 <SD_CheckStatus+0x38>)
 800a828:	2201      	movs	r2, #1
 800a82a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a82c:	f7ff ff7e 	bl	800a72c <BSP_SD_GetCardState>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d107      	bne.n	800a846 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a836:	4b07      	ldr	r3, [pc, #28]	; (800a854 <SD_CheckStatus+0x38>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	f023 0301 	bic.w	r3, r3, #1
 800a840:	b2da      	uxtb	r2, r3
 800a842:	4b04      	ldr	r3, [pc, #16]	; (800a854 <SD_CheckStatus+0x38>)
 800a844:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a846:	4b03      	ldr	r3, [pc, #12]	; (800a854 <SD_CheckStatus+0x38>)
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	b2db      	uxtb	r3, r3
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	2400000d 	.word	0x2400000d

0800a858 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a858:	b590      	push	{r4, r7, lr}
 800a85a:	b087      	sub	sp, #28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a862:	4b20      	ldr	r3, [pc, #128]	; (800a8e4 <SD_initialize+0x8c>)
 800a864:	2201      	movs	r2, #1
 800a866:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800a868:	f003 ff12 	bl	800e690 <osKernelRunning>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d030      	beq.n	800a8d4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a872:	f7ff ff01 	bl	800a678 <BSP_SD_Init>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d107      	bne.n	800a88c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a87c:	79fb      	ldrb	r3, [r7, #7]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff ffcc 	bl	800a81c <SD_CheckStatus>
 800a884:	4603      	mov	r3, r0
 800a886:	461a      	mov	r2, r3
 800a888:	4b16      	ldr	r3, [pc, #88]	; (800a8e4 <SD_initialize+0x8c>)
 800a88a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a88c:	4b15      	ldr	r3, [pc, #84]	; (800a8e4 <SD_initialize+0x8c>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b01      	cmp	r3, #1
 800a894:	d01e      	beq.n	800a8d4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800a896:	4b14      	ldr	r3, [pc, #80]	; (800a8e8 <SD_initialize+0x90>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10e      	bne.n	800a8bc <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800a89e:	4b13      	ldr	r3, [pc, #76]	; (800a8ec <SD_initialize+0x94>)
 800a8a0:	f107 0408 	add.w	r4, r7, #8
 800a8a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a8a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800a8aa:	f107 0308 	add.w	r3, r7, #8
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f004 f8ce 	bl	800ea52 <osMessageCreate>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4a0b      	ldr	r2, [pc, #44]	; (800a8e8 <SD_initialize+0x90>)
 800a8ba:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <SD_initialize+0x90>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d107      	bne.n	800a8d4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800a8c4:	4b07      	ldr	r3, [pc, #28]	; (800a8e4 <SD_initialize+0x8c>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	f043 0301 	orr.w	r3, r3, #1
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	4b04      	ldr	r3, [pc, #16]	; (800a8e4 <SD_initialize+0x8c>)
 800a8d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a8d4:	4b03      	ldr	r3, [pc, #12]	; (800a8e4 <SD_initialize+0x8c>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	b2db      	uxtb	r3, r3
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	371c      	adds	r7, #28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd90      	pop	{r4, r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	2400000d 	.word	0x2400000d
 800a8e8:	2400124c 	.word	0x2400124c
 800a8ec:	08020840 	.word	0x08020840

0800a8f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a8fa:	79fb      	ldrb	r3, [r7, #7]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7ff ff8d 	bl	800a81c <SD_CheckStatus>
 800a902:	4603      	mov	r3, r0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b08e      	sub	sp, #56	; 0x38
 800a910:	af00      	add	r7, sp, #0
 800a912:	60b9      	str	r1, [r7, #8]
 800a914:	607a      	str	r2, [r7, #4]
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	4603      	mov	r3, r0
 800a91a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a922:	f247 5030 	movw	r0, #30000	; 0x7530
 800a926:	f7ff ff5b 	bl	800a7e0 <SD_CheckStatusWithTimeout>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	da02      	bge.n	800a936 <SD_read+0x2a>
  {
    return res;
 800a930:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a934:	e061      	b.n	800a9fa <SD_read+0xee>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	68b8      	ldr	r0, [r7, #8]
 800a93c:	f7ff fec2 	bl	800a6c4 <BSP_SD_ReadBlocks_DMA>
 800a940:	4603      	mov	r3, r0
 800a942:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    if (ret == MSD_OK) {
 800a946:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d153      	bne.n	800a9f6 <SD_read+0xea>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a94e:	4b2d      	ldr	r3, [pc, #180]	; (800aa04 <SD_read+0xf8>)
 800a950:	6819      	ldr	r1, [r3, #0]
 800a952:	f107 0310 	add.w	r3, r7, #16
 800a956:	f247 5230 	movw	r2, #30000	; 0x7530
 800a95a:	4618      	mov	r0, r3
 800a95c:	f004 f8e2 	bl	800eb24 <osMessageGet>

    if (event.status == osEventMessage)
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	2b10      	cmp	r3, #16
 800a964:	d147      	bne.n	800a9f6 <SD_read+0xea>
    {
      if (event.value.v == READ_CPLT_MSG)
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d144      	bne.n	800a9f6 <SD_read+0xea>
      {
        timer = osKernelSysTick();
 800a96c:	f003 fe9c 	bl	800e6a8 <osKernelSysTick>
 800a970:	6338      	str	r0, [r7, #48]	; 0x30
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800a972:	e037      	b.n	800a9e4 <SD_read+0xd8>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a974:	f7ff feda 	bl	800a72c <BSP_SD_GetCardState>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d132      	bne.n	800a9e4 <SD_read+0xd8>
              {
                res = RES_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
                /*
                the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	f023 031f 	bic.w	r3, r3, #31
 800a98a:	62fb      	str	r3, [r7, #44]	; 0x2c
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	0251      	lsls	r1, r2, #9
 800a992:	68b8      	ldr	r0, [r7, #8]
 800a994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a996:	1a82      	subs	r2, r0, r2
 800a998:	440a      	add	r2, r1
 800a99a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a99c:	627a      	str	r2, [r7, #36]	; 0x24
    if ( dsize > 0 ) { 
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	dd1d      	ble.n	800a9e0 <SD_read+0xd4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	f003 021f 	and.w	r2, r3, #31
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ac:	4413      	add	r3, r2
 800a9ae:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 800a9b4:	f3bf 8f4f 	dsb	sy
}
 800a9b8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800a9ba:	4a13      	ldr	r2, [pc, #76]	; (800aa08 <SD_read+0xfc>)
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	3320      	adds	r3, #32
 800a9c6:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	3b20      	subs	r3, #32
 800a9cc:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dcf2      	bgt.n	800a9ba <SD_read+0xae>
  __ASM volatile ("dsb 0xF":::"memory");
 800a9d4:	f3bf 8f4f 	dsb	sy
}
 800a9d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a9da:	f3bf 8f6f 	isb	sy
}
 800a9de:	bf00      	nop
}
 800a9e0:	bf00      	nop
#endif
                break;
 800a9e2:	e008      	b.n	800a9f6 <SD_read+0xea>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800a9e4:	f003 fe60 	bl	800e6a8 <osKernelSysTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d9be      	bls.n	800a974 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a9f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3738      	adds	r7, #56	; 0x38
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	2400124c 	.word	0x2400124c
 800aa08:	e000ed00 	.word	0xe000ed00

0800aa0c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b08e      	sub	sp, #56	; 0x38
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60b9      	str	r1, [r7, #8]
 800aa14:	607a      	str	r2, [r7, #4]
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa22:	f247 5030 	movw	r0, #30000	; 0x7530
 800aa26:	f7ff fedb 	bl	800a7e0 <SD_CheckStatusWithTimeout>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	da02      	bge.n	800aa36 <SD_write+0x2a>
  {
    return res;
 800aa30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa34:	e05d      	b.n	800aaf2 <SD_write+0xe6>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	f023 031f 	bic.w	r3, r3, #31
 800aa3c:	633b      	str	r3, [r7, #48]	; 0x30
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	0251      	lsls	r1, r2, #9
 800aa44:	68b8      	ldr	r0, [r7, #8]
 800aa46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa48:	1a82      	subs	r2, r0, r2
 800aa4a:	440a      	add	r2, r1
 800aa4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa4e:	627a      	str	r2, [r7, #36]	; 0x24
    if ( dsize > 0 ) { 
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	dd1d      	ble.n	800aa92 <SD_write+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	f003 021f 	and.w	r2, r3, #31
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	4413      	add	r3, r2
 800aa60:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 800aa66:	f3bf 8f4f 	dsb	sy
}
 800aa6a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800aa6c:	4a23      	ldr	r2, [pc, #140]	; (800aafc <SD_write+0xf0>)
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	3320      	adds	r3, #32
 800aa78:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	3b20      	subs	r3, #32
 800aa7e:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	dcf2      	bgt.n	800aa6c <SD_write+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 800aa86:	f3bf 8f4f 	dsb	sy
}
 800aa8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aa8c:	f3bf 8f6f 	isb	sy
}
 800aa90:	bf00      	nop
}
 800aa92:	bf00      	nop
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	68b8      	ldr	r0, [r7, #8]
 800aa9a:	f7ff fe2d 	bl	800a6f8 <BSP_SD_WriteBlocks_DMA>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d124      	bne.n	800aaee <SD_write+0xe2>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800aaa4:	4b16      	ldr	r3, [pc, #88]	; (800ab00 <SD_write+0xf4>)
 800aaa6:	6819      	ldr	r1, [r3, #0]
 800aaa8:	f107 0310 	add.w	r3, r7, #16
 800aaac:	f247 5230 	movw	r2, #30000	; 0x7530
 800aab0:	4618      	mov	r0, r3
 800aab2:	f004 f837 	bl	800eb24 <osMessageGet>

    if (event.status == osEventMessage)
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b10      	cmp	r3, #16
 800aaba:	d118      	bne.n	800aaee <SD_write+0xe2>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d115      	bne.n	800aaee <SD_write+0xe2>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800aac2:	f003 fdf1 	bl	800e6a8 <osKernelSysTick>
 800aac6:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800aac8:	e008      	b.n	800aadc <SD_write+0xd0>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aaca:	f7ff fe2f 	bl	800a72c <BSP_SD_GetCardState>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d103      	bne.n	800aadc <SD_write+0xd0>
          {
            res = RES_OK;
 800aad4:	2300      	movs	r3, #0
 800aad6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 800aada:	e008      	b.n	800aaee <SD_write+0xe2>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800aadc:	f003 fde4 	bl	800e6a8 <osKernelSysTick>
 800aae0:	4602      	mov	r2, r0
 800aae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	f247 522f 	movw	r2, #29999	; 0x752f
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d9ed      	bls.n	800aaca <SD_write+0xbe>
    }

  }
#endif

  return res;
 800aaee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3738      	adds	r7, #56	; 0x38
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	e000ed00 	.word	0xe000ed00
 800ab00:	2400124c 	.word	0x2400124c

0800ab04 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08c      	sub	sp, #48	; 0x30
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	603a      	str	r2, [r7, #0]
 800ab0e:	71fb      	strb	r3, [r7, #7]
 800ab10:	460b      	mov	r3, r1
 800ab12:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ab1a:	4b25      	ldr	r3, [pc, #148]	; (800abb0 <SD_ioctl+0xac>)
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	f003 0301 	and.w	r3, r3, #1
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <SD_ioctl+0x28>
 800ab28:	2303      	movs	r3, #3
 800ab2a:	e03c      	b.n	800aba6 <SD_ioctl+0xa2>

  switch (cmd)
 800ab2c:	79bb      	ldrb	r3, [r7, #6]
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	d834      	bhi.n	800ab9c <SD_ioctl+0x98>
 800ab32:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <SD_ioctl+0x34>)
 800ab34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab38:	0800ab49 	.word	0x0800ab49
 800ab3c:	0800ab51 	.word	0x0800ab51
 800ab40:	0800ab69 	.word	0x0800ab69
 800ab44:	0800ab83 	.word	0x0800ab83
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab4e:	e028      	b.n	800aba2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab50:	f107 0308 	add.w	r3, r7, #8
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff fdf9 	bl	800a74c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ab5a:	6a3a      	ldr	r2, [r7, #32]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab66:	e01c      	b.n	800aba2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab68:	f107 0308 	add.w	r3, r7, #8
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7ff fded 	bl	800a74c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab80:	e00f      	b.n	800aba2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab82:	f107 0308 	add.w	r3, r7, #8
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7ff fde0 	bl	800a74c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8e:	0a5a      	lsrs	r2, r3, #9
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab9a:	e002      	b.n	800aba2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ab9c:	2304      	movs	r3, #4
 800ab9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800aba2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3730      	adds	r7, #48	; 0x30
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	2400000d 	.word	0x2400000d

0800abb4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800abb8:	4b04      	ldr	r3, [pc, #16]	; (800abcc <BSP_SD_WriteCpltCallback+0x18>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2200      	movs	r2, #0
 800abbe:	2102      	movs	r1, #2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f003 ff6f 	bl	800eaa4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800abc6:	bf00      	nop
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	2400124c 	.word	0x2400124c

0800abd0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800abd4:	4b04      	ldr	r3, [pc, #16]	; (800abe8 <BSP_SD_ReadCpltCallback+0x18>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2200      	movs	r2, #0
 800abda:	2101      	movs	r1, #1
 800abdc:	4618      	mov	r0, r3
 800abde:	f003 ff61 	bl	800eaa4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800abe2:	bf00      	nop
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	2400124c 	.word	0x2400124c

0800abec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800abf2:	4b88      	ldr	r3, [pc, #544]	; (800ae14 <MX_LWIP_Init+0x228>)
 800abf4:	22c0      	movs	r2, #192	; 0xc0
 800abf6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800abf8:	4b86      	ldr	r3, [pc, #536]	; (800ae14 <MX_LWIP_Init+0x228>)
 800abfa:	22a8      	movs	r2, #168	; 0xa8
 800abfc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800abfe:	4b85      	ldr	r3, [pc, #532]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac00:	2201      	movs	r2, #1
 800ac02:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 30;
 800ac04:	4b83      	ldr	r3, [pc, #524]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac06:	221e      	movs	r2, #30
 800ac08:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ac0a:	4b83      	ldr	r3, [pc, #524]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ac0c:	22ff      	movs	r2, #255	; 0xff
 800ac0e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ac10:	4b81      	ldr	r3, [pc, #516]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ac12:	22ff      	movs	r2, #255	; 0xff
 800ac14:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ac16:	4b80      	ldr	r3, [pc, #512]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ac18:	22ff      	movs	r2, #255	; 0xff
 800ac1a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ac1c:	4b7e      	ldr	r3, [pc, #504]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ac1e:	2200      	movs	r2, #0
 800ac20:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800ac22:	4b7e      	ldr	r3, [pc, #504]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800ac28:	4b7c      	ldr	r3, [pc, #496]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800ac2e:	4b7b      	ldr	r3, [pc, #492]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800ac34:	4b79      	ldr	r3, [pc, #484]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	f013 fc81 	bl	801e544 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ac42:	4b74      	ldr	r3, [pc, #464]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	061a      	lsls	r2, r3, #24
 800ac48:	4b72      	ldr	r3, [pc, #456]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac4a:	785b      	ldrb	r3, [r3, #1]
 800ac4c:	041b      	lsls	r3, r3, #16
 800ac4e:	431a      	orrs	r2, r3
 800ac50:	4b70      	ldr	r3, [pc, #448]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac52:	789b      	ldrb	r3, [r3, #2]
 800ac54:	021b      	lsls	r3, r3, #8
 800ac56:	4313      	orrs	r3, r2
 800ac58:	4a6e      	ldr	r2, [pc, #440]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac5a:	78d2      	ldrb	r2, [r2, #3]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	061a      	lsls	r2, r3, #24
 800ac60:	4b6c      	ldr	r3, [pc, #432]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	0619      	lsls	r1, r3, #24
 800ac66:	4b6b      	ldr	r3, [pc, #428]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac68:	785b      	ldrb	r3, [r3, #1]
 800ac6a:	041b      	lsls	r3, r3, #16
 800ac6c:	4319      	orrs	r1, r3
 800ac6e:	4b69      	ldr	r3, [pc, #420]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac70:	789b      	ldrb	r3, [r3, #2]
 800ac72:	021b      	lsls	r3, r3, #8
 800ac74:	430b      	orrs	r3, r1
 800ac76:	4967      	ldr	r1, [pc, #412]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac78:	78c9      	ldrb	r1, [r1, #3]
 800ac7a:	430b      	orrs	r3, r1
 800ac7c:	021b      	lsls	r3, r3, #8
 800ac7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac82:	431a      	orrs	r2, r3
 800ac84:	4b63      	ldr	r3, [pc, #396]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	0619      	lsls	r1, r3, #24
 800ac8a:	4b62      	ldr	r3, [pc, #392]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac8c:	785b      	ldrb	r3, [r3, #1]
 800ac8e:	041b      	lsls	r3, r3, #16
 800ac90:	4319      	orrs	r1, r3
 800ac92:	4b60      	ldr	r3, [pc, #384]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac94:	789b      	ldrb	r3, [r3, #2]
 800ac96:	021b      	lsls	r3, r3, #8
 800ac98:	430b      	orrs	r3, r1
 800ac9a:	495e      	ldr	r1, [pc, #376]	; (800ae14 <MX_LWIP_Init+0x228>)
 800ac9c:	78c9      	ldrb	r1, [r1, #3]
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	0a1b      	lsrs	r3, r3, #8
 800aca2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aca6:	431a      	orrs	r2, r3
 800aca8:	4b5a      	ldr	r3, [pc, #360]	; (800ae14 <MX_LWIP_Init+0x228>)
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	0619      	lsls	r1, r3, #24
 800acae:	4b59      	ldr	r3, [pc, #356]	; (800ae14 <MX_LWIP_Init+0x228>)
 800acb0:	785b      	ldrb	r3, [r3, #1]
 800acb2:	041b      	lsls	r3, r3, #16
 800acb4:	4319      	orrs	r1, r3
 800acb6:	4b57      	ldr	r3, [pc, #348]	; (800ae14 <MX_LWIP_Init+0x228>)
 800acb8:	789b      	ldrb	r3, [r3, #2]
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	430b      	orrs	r3, r1
 800acbe:	4955      	ldr	r1, [pc, #340]	; (800ae14 <MX_LWIP_Init+0x228>)
 800acc0:	78c9      	ldrb	r1, [r1, #3]
 800acc2:	430b      	orrs	r3, r1
 800acc4:	0e1b      	lsrs	r3, r3, #24
 800acc6:	4313      	orrs	r3, r2
 800acc8:	4a55      	ldr	r2, [pc, #340]	; (800ae20 <MX_LWIP_Init+0x234>)
 800acca:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800accc:	4b52      	ldr	r3, [pc, #328]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	061a      	lsls	r2, r3, #24
 800acd2:	4b51      	ldr	r3, [pc, #324]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800acd4:	785b      	ldrb	r3, [r3, #1]
 800acd6:	041b      	lsls	r3, r3, #16
 800acd8:	431a      	orrs	r2, r3
 800acda:	4b4f      	ldr	r3, [pc, #316]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800acdc:	789b      	ldrb	r3, [r3, #2]
 800acde:	021b      	lsls	r3, r3, #8
 800ace0:	4313      	orrs	r3, r2
 800ace2:	4a4d      	ldr	r2, [pc, #308]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ace4:	78d2      	ldrb	r2, [r2, #3]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	061a      	lsls	r2, r3, #24
 800acea:	4b4b      	ldr	r3, [pc, #300]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	0619      	lsls	r1, r3, #24
 800acf0:	4b49      	ldr	r3, [pc, #292]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800acf2:	785b      	ldrb	r3, [r3, #1]
 800acf4:	041b      	lsls	r3, r3, #16
 800acf6:	4319      	orrs	r1, r3
 800acf8:	4b47      	ldr	r3, [pc, #284]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800acfa:	789b      	ldrb	r3, [r3, #2]
 800acfc:	021b      	lsls	r3, r3, #8
 800acfe:	430b      	orrs	r3, r1
 800ad00:	4945      	ldr	r1, [pc, #276]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ad02:	78c9      	ldrb	r1, [r1, #3]
 800ad04:	430b      	orrs	r3, r1
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad0c:	431a      	orrs	r2, r3
 800ad0e:	4b42      	ldr	r3, [pc, #264]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	0619      	lsls	r1, r3, #24
 800ad14:	4b40      	ldr	r3, [pc, #256]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ad16:	785b      	ldrb	r3, [r3, #1]
 800ad18:	041b      	lsls	r3, r3, #16
 800ad1a:	4319      	orrs	r1, r3
 800ad1c:	4b3e      	ldr	r3, [pc, #248]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ad1e:	789b      	ldrb	r3, [r3, #2]
 800ad20:	021b      	lsls	r3, r3, #8
 800ad22:	430b      	orrs	r3, r1
 800ad24:	493c      	ldr	r1, [pc, #240]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ad26:	78c9      	ldrb	r1, [r1, #3]
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	0a1b      	lsrs	r3, r3, #8
 800ad2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ad30:	431a      	orrs	r2, r3
 800ad32:	4b39      	ldr	r3, [pc, #228]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	0619      	lsls	r1, r3, #24
 800ad38:	4b37      	ldr	r3, [pc, #220]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ad3a:	785b      	ldrb	r3, [r3, #1]
 800ad3c:	041b      	lsls	r3, r3, #16
 800ad3e:	4319      	orrs	r1, r3
 800ad40:	4b35      	ldr	r3, [pc, #212]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ad42:	789b      	ldrb	r3, [r3, #2]
 800ad44:	021b      	lsls	r3, r3, #8
 800ad46:	430b      	orrs	r3, r1
 800ad48:	4933      	ldr	r1, [pc, #204]	; (800ae18 <MX_LWIP_Init+0x22c>)
 800ad4a:	78c9      	ldrb	r1, [r1, #3]
 800ad4c:	430b      	orrs	r3, r1
 800ad4e:	0e1b      	lsrs	r3, r3, #24
 800ad50:	4313      	orrs	r3, r2
 800ad52:	4a34      	ldr	r2, [pc, #208]	; (800ae24 <MX_LWIP_Init+0x238>)
 800ad54:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ad56:	4b31      	ldr	r3, [pc, #196]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	061a      	lsls	r2, r3, #24
 800ad5c:	4b2f      	ldr	r3, [pc, #188]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ad5e:	785b      	ldrb	r3, [r3, #1]
 800ad60:	041b      	lsls	r3, r3, #16
 800ad62:	431a      	orrs	r2, r3
 800ad64:	4b2d      	ldr	r3, [pc, #180]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ad66:	789b      	ldrb	r3, [r3, #2]
 800ad68:	021b      	lsls	r3, r3, #8
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	4a2b      	ldr	r2, [pc, #172]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ad6e:	78d2      	ldrb	r2, [r2, #3]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	061a      	lsls	r2, r3, #24
 800ad74:	4b29      	ldr	r3, [pc, #164]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	0619      	lsls	r1, r3, #24
 800ad7a:	4b28      	ldr	r3, [pc, #160]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ad7c:	785b      	ldrb	r3, [r3, #1]
 800ad7e:	041b      	lsls	r3, r3, #16
 800ad80:	4319      	orrs	r1, r3
 800ad82:	4b26      	ldr	r3, [pc, #152]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ad84:	789b      	ldrb	r3, [r3, #2]
 800ad86:	021b      	lsls	r3, r3, #8
 800ad88:	430b      	orrs	r3, r1
 800ad8a:	4924      	ldr	r1, [pc, #144]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ad8c:	78c9      	ldrb	r1, [r1, #3]
 800ad8e:	430b      	orrs	r3, r1
 800ad90:	021b      	lsls	r3, r3, #8
 800ad92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad96:	431a      	orrs	r2, r3
 800ad98:	4b20      	ldr	r3, [pc, #128]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	0619      	lsls	r1, r3, #24
 800ad9e:	4b1f      	ldr	r3, [pc, #124]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ada0:	785b      	ldrb	r3, [r3, #1]
 800ada2:	041b      	lsls	r3, r3, #16
 800ada4:	4319      	orrs	r1, r3
 800ada6:	4b1d      	ldr	r3, [pc, #116]	; (800ae1c <MX_LWIP_Init+0x230>)
 800ada8:	789b      	ldrb	r3, [r3, #2]
 800adaa:	021b      	lsls	r3, r3, #8
 800adac:	430b      	orrs	r3, r1
 800adae:	491b      	ldr	r1, [pc, #108]	; (800ae1c <MX_LWIP_Init+0x230>)
 800adb0:	78c9      	ldrb	r1, [r1, #3]
 800adb2:	430b      	orrs	r3, r1
 800adb4:	0a1b      	lsrs	r3, r3, #8
 800adb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800adba:	431a      	orrs	r2, r3
 800adbc:	4b17      	ldr	r3, [pc, #92]	; (800ae1c <MX_LWIP_Init+0x230>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	0619      	lsls	r1, r3, #24
 800adc2:	4b16      	ldr	r3, [pc, #88]	; (800ae1c <MX_LWIP_Init+0x230>)
 800adc4:	785b      	ldrb	r3, [r3, #1]
 800adc6:	041b      	lsls	r3, r3, #16
 800adc8:	4319      	orrs	r1, r3
 800adca:	4b14      	ldr	r3, [pc, #80]	; (800ae1c <MX_LWIP_Init+0x230>)
 800adcc:	789b      	ldrb	r3, [r3, #2]
 800adce:	021b      	lsls	r3, r3, #8
 800add0:	430b      	orrs	r3, r1
 800add2:	4912      	ldr	r1, [pc, #72]	; (800ae1c <MX_LWIP_Init+0x230>)
 800add4:	78c9      	ldrb	r1, [r1, #3]
 800add6:	430b      	orrs	r3, r1
 800add8:	0e1b      	lsrs	r3, r3, #24
 800adda:	4313      	orrs	r3, r2
 800addc:	4a12      	ldr	r2, [pc, #72]	; (800ae28 <MX_LWIP_Init+0x23c>)
 800adde:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800ade0:	4b12      	ldr	r3, [pc, #72]	; (800ae2c <MX_LWIP_Init+0x240>)
 800ade2:	9302      	str	r3, [sp, #8]
 800ade4:	4b12      	ldr	r3, [pc, #72]	; (800ae30 <MX_LWIP_Init+0x244>)
 800ade6:	9301      	str	r3, [sp, #4]
 800ade8:	2300      	movs	r3, #0
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	4b0e      	ldr	r3, [pc, #56]	; (800ae28 <MX_LWIP_Init+0x23c>)
 800adee:	4a0d      	ldr	r2, [pc, #52]	; (800ae24 <MX_LWIP_Init+0x238>)
 800adf0:	490b      	ldr	r1, [pc, #44]	; (800ae20 <MX_LWIP_Init+0x234>)
 800adf2:	4810      	ldr	r0, [pc, #64]	; (800ae34 <MX_LWIP_Init+0x248>)
 800adf4:	f00b fee4 	bl	8016bc0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800adf8:	480e      	ldr	r0, [pc, #56]	; (800ae34 <MX_LWIP_Init+0x248>)
 800adfa:	f00c f893 	bl	8016f24 <netif_set_default>

  netif_set_down(&gnetif);
 800adfe:	480d      	ldr	r0, [pc, #52]	; (800ae34 <MX_LWIP_Init+0x248>)
 800ae00:	f00c f90c 	bl	801701c <netif_set_down>
//    /* When the netif link is down this function must be called */
//    netif_set_down(&gnetif);
//  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800ae04:	490c      	ldr	r1, [pc, #48]	; (800ae38 <MX_LWIP_Init+0x24c>)
 800ae06:	480b      	ldr	r0, [pc, #44]	; (800ae34 <MX_LWIP_Init+0x248>)
 800ae08:	f00c f99e 	bl	8017148 <netif_set_link_callback>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ae0c:	bf00      	nop
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	24001290 	.word	0x24001290
 800ae18:	24001294 	.word	0x24001294
 800ae1c:	24001298 	.word	0x24001298
 800ae20:	24001284 	.word	0x24001284
 800ae24:	24001288 	.word	0x24001288
 800ae28:	2400128c 	.word	0x2400128c
 800ae2c:	0801e455 	.word	0x0801e455
 800ae30:	0800b425 	.word	0x0800b425
 800ae34:	24001250 	.word	0x24001250
 800ae38:	0800ae3d 	.word	0x0800ae3d

0800ae3c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <HAL_ETH_RxCpltCallback+0x1c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f003 fdaf 	bl	800e9c0 <osSemaphoreRelease>
}
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	240012a4 	.word	0x240012a4

0800ae70 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800ae78:	4b04      	ldr	r3, [pc, #16]	; (800ae8c <HAL_ETH_TxCpltCallback+0x1c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f003 fd9f 	bl	800e9c0 <osSemaphoreRelease>
}
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	240012a8 	.word	0x240012a8

0800ae90 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7f7 fe93 	bl	8002bc4 <HAL_ETH_GetDMAError>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea4:	2b80      	cmp	r3, #128	; 0x80
 800aea6:	d104      	bne.n	800aeb2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800aea8:	4b04      	ldr	r3, [pc, #16]	; (800aebc <HAL_ETH_ErrorCallback+0x2c>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f003 fd87 	bl	800e9c0 <osSemaphoreRelease>
  }
}
 800aeb2:	bf00      	nop
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	240012a4 	.word	0x240012a4

0800aec0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800aec0:	b5b0      	push	{r4, r5, r7, lr}
 800aec2:	b0a8      	sub	sp, #160	; 0xa0
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800aeda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aede:	2264      	movs	r2, #100	; 0x64
 800aee0:	2100      	movs	r1, #0
 800aee2:	4618      	mov	r0, r3
 800aee4:	f014 f9b4 	bl	801f250 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800aee8:	4b84      	ldr	r3, [pc, #528]	; (800b0fc <low_level_init+0x23c>)
 800aeea:	4a85      	ldr	r2, [pc, #532]	; (800b100 <low_level_init+0x240>)
 800aeec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800aeee:	2300      	movs	r3, #0
 800aef0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800aef4:	2380      	movs	r3, #128	; 0x80
 800aef6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800aefa:	23e1      	movs	r3, #225	; 0xe1
 800aefc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 800af00:	2300      	movs	r3, #0
 800af02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800af06:	2300      	movs	r3, #0
 800af08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 800af0c:	2300      	movs	r3, #0
 800af0e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800af12:	4a7a      	ldr	r2, [pc, #488]	; (800b0fc <low_level_init+0x23c>)
 800af14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af18:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800af1a:	4b78      	ldr	r3, [pc, #480]	; (800b0fc <low_level_init+0x23c>)
 800af1c:	2201      	movs	r2, #1
 800af1e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800af20:	4b76      	ldr	r3, [pc, #472]	; (800b0fc <low_level_init+0x23c>)
 800af22:	4a78      	ldr	r2, [pc, #480]	; (800b104 <low_level_init+0x244>)
 800af24:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800af26:	4b75      	ldr	r3, [pc, #468]	; (800b0fc <low_level_init+0x23c>)
 800af28:	4a77      	ldr	r2, [pc, #476]	; (800b108 <low_level_init+0x248>)
 800af2a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800af2c:	4b73      	ldr	r3, [pc, #460]	; (800b0fc <low_level_init+0x23c>)
 800af2e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800af32:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800af34:	4871      	ldr	r0, [pc, #452]	; (800b0fc <low_level_init+0x23c>)
 800af36:	f7f6 fe51 	bl	8001bdc <HAL_ETH_Init>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800af40:	2238      	movs	r2, #56	; 0x38
 800af42:	2100      	movs	r1, #0
 800af44:	4871      	ldr	r0, [pc, #452]	; (800b10c <low_level_init+0x24c>)
 800af46:	f014 f983 	bl	801f250 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800af4a:	4b70      	ldr	r3, [pc, #448]	; (800b10c <low_level_init+0x24c>)
 800af4c:	2221      	movs	r2, #33	; 0x21
 800af4e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800af50:	4b6e      	ldr	r3, [pc, #440]	; (800b10c <low_level_init+0x24c>)
 800af52:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800af56:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800af58:	4b6c      	ldr	r3, [pc, #432]	; (800b10c <low_level_init+0x24c>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800af5e:	486c      	ldr	r0, [pc, #432]	; (800b110 <low_level_init+0x250>)
 800af60:	f00b fc98 	bl	8016894 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2206      	movs	r2, #6
 800af68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800af6c:	4b63      	ldr	r3, [pc, #396]	; (800b0fc <low_level_init+0x23c>)
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	781a      	ldrb	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800af78:	4b60      	ldr	r3, [pc, #384]	; (800b0fc <low_level_init+0x23c>)
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	785a      	ldrb	r2, [r3, #1]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800af84:	4b5d      	ldr	r3, [pc, #372]	; (800b0fc <low_level_init+0x23c>)
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	789a      	ldrb	r2, [r3, #2]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800af90:	4b5a      	ldr	r3, [pc, #360]	; (800b0fc <low_level_init+0x23c>)
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	78da      	ldrb	r2, [r3, #3]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800af9c:	4b57      	ldr	r3, [pc, #348]	; (800b0fc <low_level_init+0x23c>)
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	791a      	ldrb	r2, [r3, #4]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800afa8:	4b54      	ldr	r3, [pc, #336]	; (800b0fc <low_level_init+0x23c>)
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	795a      	ldrb	r2, [r3, #5]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800afba:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afc2:	f043 030a 	orr.w	r3, r3, #10
 800afc6:	b2da      	uxtb	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800afce:	2203      	movs	r2, #3
 800afd0:	2100      	movs	r1, #0
 800afd2:	2001      	movs	r0, #1
 800afd4:	f004 fc10 	bl	800f7f8 <xQueueGenericCreate>
 800afd8:	4603      	mov	r3, r0
 800afda:	4a4e      	ldr	r2, [pc, #312]	; (800b114 <low_level_init+0x254>)
 800afdc:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800afde:	2203      	movs	r2, #3
 800afe0:	2100      	movs	r1, #0
 800afe2:	2001      	movs	r0, #1
 800afe4:	f004 fc08 	bl	800f7f8 <xQueueGenericCreate>
 800afe8:	4603      	mov	r3, r0
 800afea:	4a4b      	ldr	r2, [pc, #300]	; (800b118 <low_level_init+0x258>)
 800afec:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800afee:	4b4b      	ldr	r3, [pc, #300]	; (800b11c <low_level_init+0x25c>)
 800aff0:	f107 0408 	add.w	r4, r7, #8
 800aff4:	461d      	mov	r5, r3
 800aff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800affa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800affe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b002:	f107 0308 	add.w	r3, r7, #8
 800b006:	6879      	ldr	r1, [r7, #4]
 800b008:	4618      	mov	r0, r3
 800b00a:	f003 fb5d 	bl	800e6c8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b00e:	4944      	ldr	r1, [pc, #272]	; (800b120 <low_level_init+0x260>)
 800b010:	4844      	ldr	r0, [pc, #272]	; (800b124 <low_level_init+0x264>)
 800b012:	f7f6 fa72 	bl	80014fa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b016:	4843      	ldr	r0, [pc, #268]	; (800b124 <low_level_init+0x264>)
 800b018:	f7f6 faa1 	bl	800155e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b01c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b020:	2b00      	cmp	r3, #0
 800b022:	d164      	bne.n	800b0ee <low_level_init+0x22e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b024:	483f      	ldr	r0, [pc, #252]	; (800b124 <low_level_init+0x264>)
 800b026:	f7f6 fb42 	bl	80016ae <LAN8742_GetLinkState>
 800b02a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b02e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b032:	2b01      	cmp	r3, #1
 800b034:	dc06      	bgt.n	800b044 <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f00c f856 	bl	80170e8 <netif_set_link_down>
      netif_set_down(netif);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f00b ffed 	bl	801701c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b042:	e056      	b.n	800b0f2 <low_level_init+0x232>
      switch (PHYLinkState)
 800b044:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b048:	3b02      	subs	r3, #2
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d82a      	bhi.n	800b0a4 <low_level_init+0x1e4>
 800b04e:	a201      	add	r2, pc, #4	; (adr r2, 800b054 <low_level_init+0x194>)
 800b050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b054:	0800b065 	.word	0x0800b065
 800b058:	0800b077 	.word	0x0800b077
 800b05c:	0800b087 	.word	0x0800b087
 800b060:	0800b097 	.word	0x0800b097
        duplex = ETH_FULLDUPLEX_MODE;
 800b064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800b06c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b074:	e01f      	b.n	800b0b6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 800b076:	2300      	movs	r3, #0
 800b078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800b07c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b084:	e017      	b.n	800b0b6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 800b086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b08a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800b08e:	2300      	movs	r3, #0
 800b090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b094:	e00f      	b.n	800b0b6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 800b096:	2300      	movs	r3, #0
 800b098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800b09c:	2300      	movs	r3, #0
 800b09e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b0a2:	e008      	b.n	800b0b6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 800b0a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800b0ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b0b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b0b4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b0b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	480f      	ldr	r0, [pc, #60]	; (800b0fc <low_level_init+0x23c>)
 800b0be:	f7f7 fb3b 	bl	8002738 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b0c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b0c6:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800b0c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0cc:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b0ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4809      	ldr	r0, [pc, #36]	; (800b0fc <low_level_init+0x23c>)
 800b0d6:	f7f7 fd03 	bl	8002ae0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800b0da:	4808      	ldr	r0, [pc, #32]	; (800b0fc <low_level_init+0x23c>)
 800b0dc:	f7f6 fe64 	bl	8001da8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f00b ff2f 	bl	8016f44 <netif_set_up>
    netif_set_link_up(netif);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f00b ffca 	bl	8017080 <netif_set_link_up>
}
 800b0ec:	e001      	b.n	800b0f2 <low_level_init+0x232>
    Error_Handler();
 800b0ee:	f7f5 ffa7 	bl	8001040 <Error_Handler>
}
 800b0f2:	bf00      	nop
 800b0f4:	37a0      	adds	r7, #160	; 0xa0
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bdb0      	pop	{r4, r5, r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	240012ac 	.word	0x240012ac
 800b100:	40028000 	.word	0x40028000
 800b104:	30040060 	.word	0x30040060
 800b108:	30040000 	.word	0x30040000
 800b10c:	2400135c 	.word	0x2400135c
 800b110:	080242c8 	.word	0x080242c8
 800b114:	240012a4 	.word	0x240012a4
 800b118:	240012a8 	.word	0x240012a8
 800b11c:	08020858 	.word	0x08020858
 800b120:	24000010 	.word	0x24000010
 800b124:	24001394 	.word	0x24001394

0800b128 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b092      	sub	sp, #72	; 0x48
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b132:	2300      	movs	r3, #0
 800b134:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800b136:	2300      	movs	r3, #0
 800b138:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b140:	f107 030c 	add.w	r3, r7, #12
 800b144:	2230      	movs	r2, #48	; 0x30
 800b146:	2100      	movs	r1, #0
 800b148:	4618      	mov	r0, r3
 800b14a:	f014 f881 	bl	801f250 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b14e:	f107 030c 	add.w	r3, r7, #12
 800b152:	2230      	movs	r2, #48	; 0x30
 800b154:	2100      	movs	r1, #0
 800b156:	4618      	mov	r0, r3
 800b158:	f014 f87a 	bl	801f250 <memset>

  for(q = p; q != NULL; q = q->next)
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	643b      	str	r3, [r7, #64]	; 0x40
 800b160:	e045      	b.n	800b1ee <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b164:	2b03      	cmp	r3, #3
 800b166:	d902      	bls.n	800b16e <low_level_output+0x46>
      return ERR_IF;
 800b168:	f06f 030b 	mvn.w	r3, #11
 800b16c:	e065      	b.n	800b23a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800b16e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b170:	6859      	ldr	r1, [r3, #4]
 800b172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b174:	4613      	mov	r3, r2
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	4413      	add	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	3348      	adds	r3, #72	; 0x48
 800b17e:	443b      	add	r3, r7
 800b180:	3b3c      	subs	r3, #60	; 0x3c
 800b182:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b186:	895b      	ldrh	r3, [r3, #10]
 800b188:	4619      	mov	r1, r3
 800b18a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b18c:	4613      	mov	r3, r2
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	3348      	adds	r3, #72	; 0x48
 800b196:	443b      	add	r3, r7
 800b198:	3b38      	subs	r3, #56	; 0x38
 800b19a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b19c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d011      	beq.n	800b1c6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b1a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a4:	1e5a      	subs	r2, r3, #1
 800b1a6:	f107 000c 	add.w	r0, r7, #12
 800b1aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	005b      	lsls	r3, r3, #1
 800b1b0:	440b      	add	r3, r1
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	18c1      	adds	r1, r0, r3
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	005b      	lsls	r3, r3, #1
 800b1ba:	4413      	add	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	3348      	adds	r3, #72	; 0x48
 800b1c0:	443b      	add	r3, r7
 800b1c2:	3b34      	subs	r3, #52	; 0x34
 800b1c4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d109      	bne.n	800b1e2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b1ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	005b      	lsls	r3, r3, #1
 800b1d4:	4413      	add	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	3348      	adds	r3, #72	; 0x48
 800b1da:	443b      	add	r3, r7
 800b1dc:	3b34      	subs	r3, #52	; 0x34
 800b1de:	2200      	movs	r2, #0
 800b1e0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b1e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	643b      	str	r3, [r7, #64]	; 0x40
 800b1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1b6      	bne.n	800b162 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	891b      	ldrh	r3, [r3, #8]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4b12      	ldr	r3, [pc, #72]	; (800b244 <low_level_output+0x11c>)
 800b1fc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b1fe:	4a11      	ldr	r2, [pc, #68]	; (800b244 <low_level_output+0x11c>)
 800b200:	f107 030c 	add.w	r3, r7, #12
 800b204:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b206:	4a0f      	ldr	r2, [pc, #60]	; (800b244 <low_level_output+0x11c>)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800b20c:	6838      	ldr	r0, [r7, #0]
 800b20e:	f00c fbef 	bl	80179f0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800b212:	490c      	ldr	r1, [pc, #48]	; (800b244 <low_level_output+0x11c>)
 800b214:	480c      	ldr	r0, [pc, #48]	; (800b248 <low_level_output+0x120>)
 800b216:	f7f6 fecb 	bl	8001fb0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800b21a:	bf00      	nop
 800b21c:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <low_level_output+0x124>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b224:	4618      	mov	r0, r3
 800b226:	f003 fb7d 	bl	800e924 <osSemaphoreWait>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1f5      	bne.n	800b21c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800b230:	4805      	ldr	r0, [pc, #20]	; (800b248 <low_level_output+0x120>)
 800b232:	f7f7 f83c 	bl	80022ae <HAL_ETH_ReleaseTxPacket>

  return errval;
 800b236:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3748      	adds	r7, #72	; 0x48
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	2400135c 	.word	0x2400135c
 800b248:	240012ac 	.word	0x240012ac
 800b24c:	240012a8 	.word	0x240012a8

0800b250 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b258:	2300      	movs	r3, #0
 800b25a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b25c:	4b07      	ldr	r3, [pc, #28]	; (800b27c <low_level_input+0x2c>)
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d105      	bne.n	800b270 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b264:	f107 030c 	add.w	r3, r7, #12
 800b268:	4619      	mov	r1, r3
 800b26a:	4805      	ldr	r0, [pc, #20]	; (800b280 <low_level_input+0x30>)
 800b26c:	f7f6 fef1 	bl	8002052 <HAL_ETH_ReadData>
  }

  return p;
 800b270:	68fb      	ldr	r3, [r7, #12]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	240012a0 	.word	0x240012a0
 800b280:	240012ac 	.word	0x240012ac

0800b284 <ethernetif_input>:
 * @param netif the lwip network interface structure for this ethernetif
 */
extern struct netif gnetif;

static void ethernetif_input(void const * argument)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b0a2      	sub	sp, #136	; 0x88
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]

	ETH_MACConfigTypeDef MACConf = {0};
 800b28c:	f107 030c 	add.w	r3, r7, #12
 800b290:	2264      	movs	r2, #100	; 0x64
 800b292:	2100      	movs	r1, #0
 800b294:	4618      	mov	r0, r3
 800b296:	f013 ffdb 	bl	801f250 <memset>
	int32_t PHYLinkState = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	67fb      	str	r3, [r7, #124]	; 0x7c

	struct pbuf *p = NULL;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	677b      	str	r3, [r7, #116]	; 0x74
	struct netif *netif = (struct netif *) argument;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	673b      	str	r3, [r7, #112]	; 0x70

  for( ;; )
  {
	  //TIME_WAITING_FOR_INPUT
    if (osSemaphoreWait(RxPktSemaphore, (uint32_t)5000UL) == osOK)
 800b2b6:	4b57      	ldr	r3, [pc, #348]	; (800b414 <ethernetif_input+0x190>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f241 3188 	movw	r1, #5000	; 0x1388
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f003 fb30 	bl	800e924 <osSemaphoreWait>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d115      	bne.n	800b2f6 <ethernetif_input+0x72>
    {
      do
      {
        p = low_level_input( netif );
 800b2ca:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b2cc:	f7ff ffc0 	bl	800b250 <low_level_input>
 800b2d0:	6778      	str	r0, [r7, #116]	; 0x74
        if (p != NULL)
 800b2d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00a      	beq.n	800b2ee <ethernetif_input+0x6a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b2d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b2de:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b2e0:	4798      	blx	r3
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <ethernetif_input+0x6a>
          {
            pbuf_free(p);
 800b2e8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b2ea:	f00c fadb 	bl	80178a4 <pbuf_free>
          }
        }

      } while(p!=NULL);
 800b2ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1ea      	bne.n	800b2ca <ethernetif_input+0x46>
 800b2f4:	e089      	b.n	800b40a <ethernetif_input+0x186>
    }
    else
    {

	  if (netif_is_link_up(&gnetif))
 800b2f6:	4b48      	ldr	r3, [pc, #288]	; (800b418 <ethernetif_input+0x194>)
 800b2f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2fc:	089b      	lsrs	r3, r3, #2
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	b2db      	uxtb	r3, r3
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <ethernetif_input+0x8c>
	  {
	    /* When the netif is fully configured this function must be called */
	    netif_set_up(&gnetif);
 800b308:	4843      	ldr	r0, [pc, #268]	; (800b418 <ethernetif_input+0x194>)
 800b30a:	f00b fe1b 	bl	8016f44 <netif_set_up>
 800b30e:	e002      	b.n	800b316 <ethernetif_input+0x92>
	  }
	  else
	  {
	    /* When the netif link is down this function must be called */
	    netif_set_down(&gnetif);
 800b310:	4841      	ldr	r0, [pc, #260]	; (800b418 <ethernetif_input+0x194>)
 800b312:	f00b fe83 	bl	801701c <netif_set_down>
	  }

  	  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b316:	4841      	ldr	r0, [pc, #260]	; (800b41c <ethernetif_input+0x198>)
 800b318:	f7f6 f9c9 	bl	80016ae <LAN8742_GetLinkState>
 800b31c:	67b8      	str	r0, [r7, #120]	; 0x78

  	  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b31e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b320:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b324:	089b      	lsrs	r3, r3, #2
 800b326:	f003 0301 	and.w	r3, r3, #1
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00c      	beq.n	800b34a <ethernetif_input+0xc6>
 800b330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b332:	2b01      	cmp	r3, #1
 800b334:	dc09      	bgt.n	800b34a <ethernetif_input+0xc6>
  	  {
  		HAL_ETH_Stop_IT(&heth);
 800b336:	483a      	ldr	r0, [pc, #232]	; (800b420 <ethernetif_input+0x19c>)
 800b338:	f7f6 fdc2 	bl	8001ec0 <HAL_ETH_Stop_IT>
  		netif_set_down(netif);
 800b33c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b33e:	f00b fe6d 	bl	801701c <netif_set_down>
  		netif_set_link_down(netif);
 800b342:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b344:	f00b fed0 	bl	80170e8 <netif_set_link_down>
 800b348:	e05f      	b.n	800b40a <ethernetif_input+0x186>
  	  }
  	  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b34a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b34c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d158      	bne.n	800b40a <ethernetif_input+0x186>
 800b358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	dd55      	ble.n	800b40a <ethernetif_input+0x186>
  	  {
  		switch (PHYLinkState)
 800b35e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b360:	3b02      	subs	r3, #2
 800b362:	2b03      	cmp	r3, #3
 800b364:	d832      	bhi.n	800b3cc <ethernetif_input+0x148>
 800b366:	a201      	add	r2, pc, #4	; (adr r2, 800b36c <ethernetif_input+0xe8>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b37d 	.word	0x0800b37d
 800b370:	0800b393 	.word	0x0800b393
 800b374:	0800b3a7 	.word	0x0800b3a7
 800b378:	0800b3bb 	.word	0x0800b3bb
  		{
  		case LAN8742_STATUS_100MBITS_FULLDUPLEX:
  		  duplex = ETH_FULLDUPLEX_MODE;
 800b37c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b380:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_100M;
 800b382:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b386:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b38a:	2301      	movs	r3, #1
 800b38c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b390:	e01d      	b.n	800b3ce <ethernetif_input+0x14a>
  		case LAN8742_STATUS_100MBITS_HALFDUPLEX:
  		  duplex = ETH_HALFDUPLEX_MODE;
 800b392:	2300      	movs	r3, #0
 800b394:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_100M;
 800b396:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b39a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b3a4:	e013      	b.n	800b3ce <ethernetif_input+0x14a>
  		case LAN8742_STATUS_10MBITS_FULLDUPLEX:
  		  duplex = ETH_FULLDUPLEX_MODE;
 800b3a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_10M;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b3b8:	e009      	b.n	800b3ce <ethernetif_input+0x14a>
  		case LAN8742_STATUS_10MBITS_HALFDUPLEX:
  		  duplex = ETH_HALFDUPLEX_MODE;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_10M;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b3ca:	e000      	b.n	800b3ce <ethernetif_input+0x14a>
  		default:
  		  break;
 800b3cc:	bf00      	nop
  		}

  		if(linkchanged)
 800b3ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d019      	beq.n	800b40a <ethernetif_input+0x186>
  		{
  		  /* Get MAC Config MAC */
  		  HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b3d6:	f107 030c 	add.w	r3, r7, #12
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4810      	ldr	r0, [pc, #64]	; (800b420 <ethernetif_input+0x19c>)
 800b3de:	f7f7 f9ab 	bl	8002738 <HAL_ETH_GetMACConfig>
  		  MACConf.DuplexMode = duplex;
 800b3e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b3e4:	627b      	str	r3, [r7, #36]	; 0x24
  		  MACConf.Speed = speed;
 800b3e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b3ea:	623b      	str	r3, [r7, #32]
  		  HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b3ec:	f107 030c 	add.w	r3, r7, #12
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	480b      	ldr	r0, [pc, #44]	; (800b420 <ethernetif_input+0x19c>)
 800b3f4:	f7f7 fb74 	bl	8002ae0 <HAL_ETH_SetMACConfig>
  		  HAL_ETH_Start_IT(&heth);
 800b3f8:	4809      	ldr	r0, [pc, #36]	; (800b420 <ethernetif_input+0x19c>)
 800b3fa:	f7f6 fcd5 	bl	8001da8 <HAL_ETH_Start_IT>
  		  netif_set_up(netif);
 800b3fe:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b400:	f00b fda0 	bl	8016f44 <netif_set_up>
  		  netif_set_link_up(netif);
 800b404:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b406:	f00b fe3b 	bl	8017080 <netif_set_link_up>
  		}
  	  }
    }
	osDelay(1);
 800b40a:	2001      	movs	r0, #1
 800b40c:	f003 f9a8 	bl	800e760 <osDelay>
    if (osSemaphoreWait(RxPktSemaphore, (uint32_t)5000UL) == osOK)
 800b410:	e751      	b.n	800b2b6 <ethernetif_input+0x32>
 800b412:	bf00      	nop
 800b414:	240012a4 	.word	0x240012a4
 800b418:	24001250 	.word	0x24001250
 800b41c:	24001394 	.word	0x24001394
 800b420:	240012ac 	.word	0x240012ac

0800b424 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d106      	bne.n	800b440 <ethernetif_init+0x1c>
 800b432:	4b0e      	ldr	r3, [pc, #56]	; (800b46c <ethernetif_init+0x48>)
 800b434:	f240 2243 	movw	r2, #579	; 0x243
 800b438:	490d      	ldr	r1, [pc, #52]	; (800b470 <ethernetif_init+0x4c>)
 800b43a:	480e      	ldr	r0, [pc, #56]	; (800b474 <ethernetif_init+0x50>)
 800b43c:	f014 fade 	bl	801f9fc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2273      	movs	r2, #115	; 0x73
 800b444:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2274      	movs	r2, #116	; 0x74
 800b44c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a09      	ldr	r2, [pc, #36]	; (800b478 <ethernetif_init+0x54>)
 800b454:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a08      	ldr	r2, [pc, #32]	; (800b47c <ethernetif_init+0x58>)
 800b45a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7ff fd2f 	bl	800aec0 <low_level_init>

  return ERR_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	08020874 	.word	0x08020874
 800b470:	08020890 	.word	0x08020890
 800b474:	080208a0 	.word	0x080208a0
 800b478:	080141f1 	.word	0x080141f1
 800b47c:	0800b129 	.word	0x0800b129

0800b480 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b48c:	68f9      	ldr	r1, [r7, #12]
 800b48e:	4809      	ldr	r0, [pc, #36]	; (800b4b4 <pbuf_free_custom+0x34>)
 800b490:	f00b faf0 	bl	8016a74 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b494:	4b08      	ldr	r3, [pc, #32]	; (800b4b8 <pbuf_free_custom+0x38>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d107      	bne.n	800b4ac <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b49c:	4b06      	ldr	r3, [pc, #24]	; (800b4b8 <pbuf_free_custom+0x38>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800b4a2:	4b06      	ldr	r3, [pc, #24]	; (800b4bc <pbuf_free_custom+0x3c>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f003 fa8a 	bl	800e9c0 <osSemaphoreRelease>
  }
}
 800b4ac:	bf00      	nop
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	080242c8 	.word	0x080242c8
 800b4b8:	240012a0 	.word	0x240012a0
 800b4bc:	240012a4 	.word	0x240012a4

0800b4c0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b4c4:	f7f6 f9ca 	bl	800185c <HAL_GetTick>
 800b4c8:	4603      	mov	r3, r0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	bd80      	pop	{r7, pc}
	...

0800b4d0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08e      	sub	sp, #56	; 0x38
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4dc:	2200      	movs	r2, #0
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	605a      	str	r2, [r3, #4]
 800b4e2:	609a      	str	r2, [r3, #8]
 800b4e4:	60da      	str	r2, [r3, #12]
 800b4e6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a4d      	ldr	r2, [pc, #308]	; (800b624 <HAL_ETH_MspInit+0x154>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	f040 8093 	bne.w	800b61a <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800b4f4:	4b4c      	ldr	r3, [pc, #304]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b4f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b4fa:	4a4b      	ldr	r2, [pc, #300]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b4fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b500:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b504:	4b48      	ldr	r3, [pc, #288]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b506:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b50a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b50e:	623b      	str	r3, [r7, #32]
 800b510:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800b512:	4b45      	ldr	r3, [pc, #276]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b518:	4a43      	ldr	r2, [pc, #268]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b51a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b51e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b522:	4b41      	ldr	r3, [pc, #260]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b52c:	61fb      	str	r3, [r7, #28]
 800b52e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800b530:	4b3d      	ldr	r3, [pc, #244]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b532:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b536:	4a3c      	ldr	r2, [pc, #240]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b53c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b540:	4b39      	ldr	r3, [pc, #228]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b542:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b54a:	61bb      	str	r3, [r7, #24]
 800b54c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b54e:	4b36      	ldr	r3, [pc, #216]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b554:	4a34      	ldr	r2, [pc, #208]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b55a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b55e:	4b32      	ldr	r3, [pc, #200]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b568:	617b      	str	r3, [r7, #20]
 800b56a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b56c:	4b2e      	ldr	r3, [pc, #184]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b56e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b572:	4a2d      	ldr	r2, [pc, #180]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b574:	f043 0304 	orr.w	r3, r3, #4
 800b578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b57c:	4b2a      	ldr	r3, [pc, #168]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b57e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b582:	f003 0304 	and.w	r3, r3, #4
 800b586:	613b      	str	r3, [r7, #16]
 800b588:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b58a:	4b27      	ldr	r3, [pc, #156]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b58c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b590:	4a25      	ldr	r2, [pc, #148]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b592:	f043 0301 	orr.w	r3, r3, #1
 800b596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b59a:	4b23      	ldr	r3, [pc, #140]	; (800b628 <HAL_ETH_MspInit+0x158>)
 800b59c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5a0:	f003 0301 	and.w	r3, r3, #1
 800b5a4:	60fb      	str	r3, [r7, #12]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 800b5a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b5ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b5ba:	230b      	movs	r3, #11
 800b5bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b5be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	4819      	ldr	r0, [pc, #100]	; (800b62c <HAL_ETH_MspInit+0x15c>)
 800b5c6:	f7f8 f87f 	bl	80036c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 800b5ca:	2332      	movs	r3, #50	; 0x32
 800b5cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5ce:	2302      	movs	r3, #2
 800b5d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b5da:	230b      	movs	r3, #11
 800b5dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b5de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4812      	ldr	r0, [pc, #72]	; (800b630 <HAL_ETH_MspInit+0x160>)
 800b5e6:	f7f8 f86f 	bl	80036c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 800b5ea:	2386      	movs	r3, #134	; 0x86
 800b5ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5ee:	2302      	movs	r3, #2
 800b5f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b5fa:	230b      	movs	r3, #11
 800b5fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b602:	4619      	mov	r1, r3
 800b604:	480b      	ldr	r0, [pc, #44]	; (800b634 <HAL_ETH_MspInit+0x164>)
 800b606:	f7f8 f85f 	bl	80036c8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b60a:	2200      	movs	r2, #0
 800b60c:	2105      	movs	r1, #5
 800b60e:	203d      	movs	r0, #61	; 0x3d
 800b610:	f7f6 fa2c 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b614:	203d      	movs	r0, #61	; 0x3d
 800b616:	f7f6 fa43 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b61a:	bf00      	nop
 800b61c:	3738      	adds	r7, #56	; 0x38
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	40028000 	.word	0x40028000
 800b628:	58024400 	.word	0x58024400
 800b62c:	58021800 	.word	0x58021800
 800b630:	58020800 	.word	0x58020800
 800b634:	58020000 	.word	0x58020000

0800b638 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b63c:	4802      	ldr	r0, [pc, #8]	; (800b648 <ETH_PHY_IO_Init+0x10>)
 800b63e:	f7f7 fa69 	bl	8002b14 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	bd80      	pop	{r7, pc}
 800b648:	240012ac 	.word	0x240012ac

0800b64c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
  return 0;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	68f9      	ldr	r1, [r7, #12]
 800b66e:	4807      	ldr	r0, [pc, #28]	; (800b68c <ETH_PHY_IO_ReadReg+0x30>)
 800b670:	f7f6 ffba 	bl	80025e8 <HAL_ETH_ReadPHYRegister>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d002      	beq.n	800b680 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b67a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b67e:	e000      	b.n	800b682 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	240012ac 	.word	0x240012ac

0800b690 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	68f9      	ldr	r1, [r7, #12]
 800b6a2:	4807      	ldr	r0, [pc, #28]	; (800b6c0 <ETH_PHY_IO_WriteReg+0x30>)
 800b6a4:	f7f6 fff4 	bl	8002690 <HAL_ETH_WritePHYRegister>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d002      	beq.n	800b6b4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b6ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6b2:	e000      	b.n	800b6b6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	240012ac 	.word	0x240012ac

0800b6c4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b6c8:	f7f6 f8c8 	bl	800185c <HAL_GetTick>
 800b6cc:	4603      	mov	r3, r0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af02      	add	r7, sp, #8
 800b6da:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b6dc:	4812      	ldr	r0, [pc, #72]	; (800b728 <HAL_ETH_RxAllocateCallback+0x54>)
 800b6de:	f00b f955 	bl	801698c <memp_malloc_pool>
 800b6e2:	60f8      	str	r0, [r7, #12]
  if (p)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d014      	beq.n	800b714 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f103 0220 	add.w	r2, r3, #32
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	4a0d      	ldr	r2, [pc, #52]	; (800b72c <HAL_ETH_RxAllocateCallback+0x58>)
 800b6f8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b702:	9201      	str	r2, [sp, #4]
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2241      	movs	r2, #65	; 0x41
 800b70a:	2100      	movs	r1, #0
 800b70c:	2000      	movs	r0, #0
 800b70e:	f00b ff11 	bl	8017534 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b712:	e005      	b.n	800b720 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b714:	4b06      	ldr	r3, [pc, #24]	; (800b730 <HAL_ETH_RxAllocateCallback+0x5c>)
 800b716:	2201      	movs	r2, #1
 800b718:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	601a      	str	r2, [r3, #0]
}
 800b720:	bf00      	nop
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	080242c8 	.word	0x080242c8
 800b72c:	0800b481 	.word	0x0800b481
 800b730:	240012a0 	.word	0x240012a0

0800b734 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b734:	b480      	push	{r7}
 800b736:	b08d      	sub	sp, #52	; 0x34
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800b74a:	2300      	movs	r3, #0
 800b74c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	3b20      	subs	r3, #32
 800b752:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b756:	2200      	movs	r2, #0
 800b758:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75c:	2200      	movs	r2, #0
 800b75e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b762:	887a      	ldrh	r2, [r7, #2]
 800b764:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d103      	bne.n	800b776 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	e003      	b.n	800b77e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b77c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b782:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b78a:	e009      	b.n	800b7a0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78e:	891a      	ldrh	r2, [r3, #8]
 800b790:	887b      	ldrh	r3, [r7, #2]
 800b792:	4413      	add	r3, r2
 800b794:	b29a      	uxth	r2, r3
 800b796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b798:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1f2      	bne.n	800b78c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800b7a6:	887b      	ldrh	r3, [r7, #2]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	623a      	str	r2, [r7, #32]
 800b7ac:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	dd1d      	ble.n	800b7f0 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	f003 021f 	and.w	r2, r3, #31
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	4413      	add	r3, r2
 800b7be:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800b7c4:	f3bf 8f4f 	dsb	sy
}
 800b7c8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800b7ca:	4a0d      	ldr	r2, [pc, #52]	; (800b800 <HAL_ETH_RxLinkCallback+0xcc>)
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	3320      	adds	r3, #32
 800b7d6:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	3b20      	subs	r3, #32
 800b7dc:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	dcf2      	bgt.n	800b7ca <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800b7e4:	f3bf 8f4f 	dsb	sy
}
 800b7e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b7ea:	f3bf 8f6f 	isb	sy
}
 800b7ee:	bf00      	nop
}
 800b7f0:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b7f2:	bf00      	nop
 800b7f4:	3734      	adds	r7, #52	; 0x34
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	e000ed00 	.word	0xe000ed00

0800b804 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f00c f849 	bl	80178a4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800b812:	bf00      	nop
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
	...

0800b81c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	4603      	mov	r3, r0
 800b824:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b826:	79fb      	ldrb	r3, [r7, #7]
 800b828:	4a08      	ldr	r2, [pc, #32]	; (800b84c <disk_status+0x30>)
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	79fa      	ldrb	r2, [r7, #7]
 800b834:	4905      	ldr	r1, [pc, #20]	; (800b84c <disk_status+0x30>)
 800b836:	440a      	add	r2, r1
 800b838:	7a12      	ldrb	r2, [r2, #8]
 800b83a:	4610      	mov	r0, r2
 800b83c:	4798      	blx	r3
 800b83e:	4603      	mov	r3, r0
 800b840:	73fb      	strb	r3, [r7, #15]
	return stat;
 800b842:	7bfb      	ldrb	r3, [r7, #15]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	240013bc 	.word	0x240013bc

0800b850 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	71fb      	strb	r3, [r7, #7]
	 DSTATUS stat = RES_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]

	  if(disk.is_initialized[pdrv] == 0)
 800b85e:	79fb      	ldrb	r3, [r7, #7]
 800b860:	4a0d      	ldr	r2, [pc, #52]	; (800b898 <disk_initialize+0x48>)
 800b862:	5cd3      	ldrb	r3, [r2, r3]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d111      	bne.n	800b88c <disk_initialize+0x3c>
	  {
	    disk.is_initialized[pdrv] = 1;
 800b868:	79fb      	ldrb	r3, [r7, #7]
 800b86a:	4a0b      	ldr	r2, [pc, #44]	; (800b898 <disk_initialize+0x48>)
 800b86c:	2101      	movs	r1, #1
 800b86e:	54d1      	strb	r1, [r2, r3]
	    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b870:	79fb      	ldrb	r3, [r7, #7]
 800b872:	4a09      	ldr	r2, [pc, #36]	; (800b898 <disk_initialize+0x48>)
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4413      	add	r3, r2
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	79fa      	ldrb	r2, [r7, #7]
 800b87e:	4906      	ldr	r1, [pc, #24]	; (800b898 <disk_initialize+0x48>)
 800b880:	440a      	add	r2, r1
 800b882:	7a12      	ldrb	r2, [r2, #8]
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	4603      	mov	r3, r0
 800b88a:	73fb      	strb	r3, [r7, #15]
	  }
	  return stat;
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	240013bc 	.word	0x240013bc

0800b89c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b89c:	b590      	push	{r4, r7, lr}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	607a      	str	r2, [r7, #4]
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	73fb      	strb	r3, [r7, #15]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	4a0a      	ldr	r2, [pc, #40]	; (800b8d8 <disk_read+0x3c>)
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	4413      	add	r3, r2
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	689c      	ldr	r4, [r3, #8]
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ba:	4a07      	ldr	r2, [pc, #28]	; (800b8d8 <disk_read+0x3c>)
 800b8bc:	4413      	add	r3, r2
 800b8be:	7a18      	ldrb	r0, [r3, #8]
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	68b9      	ldr	r1, [r7, #8]
 800b8c6:	47a0      	blx	r4
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	75fb      	strb	r3, [r7, #23]
	  return res;
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	371c      	adds	r7, #28
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd90      	pop	{r4, r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	240013bc 	.word	0x240013bc

0800b8dc <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 800b8dc:	b590      	push	{r4, r7, lr}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	607a      	str	r2, [r7, #4]
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	73fb      	strb	r3, [r7, #15]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	4a0a      	ldr	r2, [pc, #40]	; (800b918 <disk_write+0x3c>)
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4413      	add	r3, r2
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	68dc      	ldr	r4, [r3, #12]
 800b8f8:	7bfb      	ldrb	r3, [r7, #15]
 800b8fa:	4a07      	ldr	r2, [pc, #28]	; (800b918 <disk_write+0x3c>)
 800b8fc:	4413      	add	r3, r2
 800b8fe:	7a18      	ldrb	r0, [r3, #8]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	68b9      	ldr	r1, [r7, #8]
 800b906:	47a0      	blx	r4
 800b908:	4603      	mov	r3, r0
 800b90a:	75fb      	strb	r3, [r7, #23]
	  return res;
 800b90c:	7dfb      	ldrb	r3, [r7, #23]

}
 800b90e:	4618      	mov	r0, r3
 800b910:	371c      	adds	r7, #28
 800b912:	46bd      	mov	sp, r7
 800b914:	bd90      	pop	{r4, r7, pc}
 800b916:	bf00      	nop
 800b918:	240013bc 	.word	0x240013bc

0800b91c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	4603      	mov	r3, r0
 800b924:	603a      	str	r2, [r7, #0]
 800b926:	71fb      	strb	r3, [r7, #7]
 800b928:	460b      	mov	r3, r1
 800b92a:	71bb      	strb	r3, [r7, #6]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b92c:	79fb      	ldrb	r3, [r7, #7]
 800b92e:	4a09      	ldr	r2, [pc, #36]	; (800b954 <disk_ioctl+0x38>)
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	79fa      	ldrb	r2, [r7, #7]
 800b93a:	4906      	ldr	r1, [pc, #24]	; (800b954 <disk_ioctl+0x38>)
 800b93c:	440a      	add	r2, r1
 800b93e:	7a10      	ldrb	r0, [r2, #8]
 800b940:	79b9      	ldrb	r1, [r7, #6]
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	4798      	blx	r3
 800b946:	4603      	mov	r3, r0
 800b948:	73fb      	strb	r3, [r7, #15]
	  return res;
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3710      	adds	r7, #16
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	240013bc 	.word	0x240013bc

0800b958 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3301      	adds	r3, #1
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b968:	89fb      	ldrh	r3, [r7, #14]
 800b96a:	021b      	lsls	r3, r3, #8
 800b96c:	b21a      	sxth	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	b21b      	sxth	r3, r3
 800b974:	4313      	orrs	r3, r2
 800b976:	b21b      	sxth	r3, r3
 800b978:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b97a:	89fb      	ldrh	r3, [r7, #14]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	3303      	adds	r3, #3
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	021b      	lsls	r3, r3, #8
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	3202      	adds	r2, #2
 800b9a0:	7812      	ldrb	r2, [r2, #0]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	021b      	lsls	r3, r3, #8
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	3201      	adds	r2, #1
 800b9ae:	7812      	ldrb	r2, [r2, #0]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	021b      	lsls	r3, r3, #8
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	7812      	ldrb	r2, [r2, #0]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	60fb      	str	r3, [r7, #12]
	return rv;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b083      	sub	sp, #12
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	1c5a      	adds	r2, r3, #1
 800b9de:	607a      	str	r2, [r7, #4]
 800b9e0:	887a      	ldrh	r2, [r7, #2]
 800b9e2:	b2d2      	uxtb	r2, r2
 800b9e4:	701a      	strb	r2, [r3, #0]
 800b9e6:	887b      	ldrh	r3, [r7, #2]
 800b9e8:	0a1b      	lsrs	r3, r3, #8
 800b9ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	607a      	str	r2, [r7, #4]
 800b9f2:	887a      	ldrh	r2, [r7, #2]
 800b9f4:	b2d2      	uxtb	r2, r2
 800b9f6:	701a      	strb	r2, [r3, #0]
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	1c5a      	adds	r2, r3, #1
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	683a      	ldr	r2, [r7, #0]
 800ba16:	b2d2      	uxtb	r2, r2
 800ba18:	701a      	strb	r2, [r3, #0]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	0a1b      	lsrs	r3, r3, #8
 800ba1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	1c5a      	adds	r2, r3, #1
 800ba24:	607a      	str	r2, [r7, #4]
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	b2d2      	uxtb	r2, r2
 800ba2a:	701a      	strb	r2, [r3, #0]
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	0a1b      	lsrs	r3, r3, #8
 800ba30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	b2d2      	uxtb	r2, r2
 800ba3c:	701a      	strb	r2, [r3, #0]
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	0a1b      	lsrs	r3, r3, #8
 800ba42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	1c5a      	adds	r2, r3, #1
 800ba48:	607a      	str	r2, [r7, #4]
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	b2d2      	uxtb	r2, r2
 800ba4e:	701a      	strb	r2, [r3, #0]
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4603      	mov	r3, r0
 800ba64:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 800ba66:	2281      	movs	r2, #129	; 0x81
 800ba68:	79fb      	ldrb	r3, [r7, #7]
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d30f      	bcc.n	800ba8e <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 800ba6e:	229f      	movs	r2, #159	; 0x9f
 800ba70:	79fb      	ldrb	r3, [r7, #7]
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d801      	bhi.n	800ba7a <dbc_1st+0x1e>
 800ba76:	2301      	movs	r3, #1
 800ba78:	e00a      	b.n	800ba90 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 800ba7a:	22e0      	movs	r2, #224	; 0xe0
 800ba7c:	79fb      	ldrb	r3, [r7, #7]
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d305      	bcc.n	800ba8e <dbc_1st+0x32>
 800ba82:	22fc      	movs	r2, #252	; 0xfc
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d801      	bhi.n	800ba8e <dbc_1st+0x32>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e000      	b.n	800ba90 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	4603      	mov	r3, r0
 800baa4:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 800baa6:	2240      	movs	r2, #64	; 0x40
 800baa8:	79fb      	ldrb	r3, [r7, #7]
 800baaa:	4293      	cmp	r3, r2
 800baac:	d319      	bcc.n	800bae2 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 800baae:	227e      	movs	r2, #126	; 0x7e
 800bab0:	79fb      	ldrb	r3, [r7, #7]
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d801      	bhi.n	800baba <dbc_2nd+0x1e>
 800bab6:	2301      	movs	r3, #1
 800bab8:	e014      	b.n	800bae4 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 800baba:	2280      	movs	r2, #128	; 0x80
 800babc:	79fb      	ldrb	r3, [r7, #7]
 800babe:	4293      	cmp	r3, r2
 800bac0:	d305      	bcc.n	800bace <dbc_2nd+0x32>
 800bac2:	22fc      	movs	r2, #252	; 0xfc
 800bac4:	79fb      	ldrb	r3, [r7, #7]
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d801      	bhi.n	800bace <dbc_2nd+0x32>
 800baca:	2301      	movs	r3, #1
 800bacc:	e00a      	b.n	800bae4 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 800bace:	2200      	movs	r2, #0
 800bad0:	79fb      	ldrb	r3, [r7, #7]
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d305      	bcc.n	800bae2 <dbc_2nd+0x46>
 800bad6:	2200      	movs	r2, #0
 800bad8:	79fb      	ldrb	r3, [r7, #7]
 800bada:	4293      	cmp	r3, r2
 800badc:	d801      	bhi.n	800bae2 <dbc_2nd+0x46>
 800bade:	2301      	movs	r3, #1
 800bae0:	e000      	b.n	800bae4 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	791b      	ldrb	r3, [r3, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d02c      	beq.n	800bb5e <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	7858      	ldrb	r0, [r3, #1]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb12:	2301      	movs	r3, #1
 800bb14:	f7ff fee2 	bl	800b8dc <disk_write>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d11d      	bne.n	800bb5a <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a1b      	ldr	r3, [r3, #32]
 800bb2c:	1ad2      	subs	r2, r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d213      	bcs.n	800bb5e <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	78db      	ldrb	r3, [r3, #3]
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d10f      	bne.n	800bb5e <sync_window+0x6e>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	7858      	ldrb	r0, [r3, #1]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	441a      	add	r2, r3
 800bb52:	2301      	movs	r3, #1
 800bb54:	f7ff fec2 	bl	800b8dc <disk_write>
 800bb58:	e001      	b.n	800bb5e <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800bb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d01b      	beq.n	800bbb8 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7ff ffb5 	bl	800baf0 <sync_window>
 800bb86:	4603      	mov	r3, r0
 800bb88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d113      	bne.n	800bbb8 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7858      	ldrb	r0, [r3, #1]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	f7ff fe7d 	bl	800b89c <disk_read>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d004      	beq.n	800bbb2 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800bba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	683a      	ldr	r2, [r7, #0]
 800bbb6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7ff ff8f 	bl	800baf0 <sync_window>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d158      	bne.n	800bc8e <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d148      	bne.n	800bc76 <sync_fs+0xb2>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	795b      	ldrb	r3, [r3, #5]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d144      	bne.n	800bc76 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	3330      	adds	r3, #48	; 0x30
 800bbf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f013 fb2a 	bl	801f250 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	3330      	adds	r3, #48	; 0x30
 800bc00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc04:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7ff fee0 	bl	800b9ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	3330      	adds	r3, #48	; 0x30
 800bc12:	4921      	ldr	r1, [pc, #132]	; (800bc98 <sync_fs+0xd4>)
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7ff fef5 	bl	800ba04 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	3330      	adds	r3, #48	; 0x30
 800bc1e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc22:	491e      	ldr	r1, [pc, #120]	; (800bc9c <sync_fs+0xd8>)
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7ff feed 	bl	800ba04 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	3330      	adds	r3, #48	; 0x30
 800bc2e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	4619      	mov	r1, r3
 800bc38:	4610      	mov	r0, r2
 800bc3a:	f7ff fee3 	bl	800ba04 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	3330      	adds	r3, #48	; 0x30
 800bc42:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	f7ff fed9 	bl	800ba04 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	69db      	ldr	r3, [r3, #28]
 800bc56:	1c5a      	adds	r2, r3, #1
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	7858      	ldrb	r0, [r3, #1]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	f7ff fe36 	bl	800b8dc <disk_write>
			fs->fsi_flag = 0;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	785b      	ldrb	r3, [r3, #1]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7ff fe4c 	bl	800b91c <disk_ioctl>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <sync_fs+0xca>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	41615252 	.word	0x41615252
 800bc9c:	61417272 	.word	0x61417272

0800bca0 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	3b02      	subs	r3, #2
 800bcae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	695b      	ldr	r3, [r3, #20]
 800bcb4:	3b02      	subs	r3, #2
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d301      	bcc.n	800bcc0 <clst2sect+0x20>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	e008      	b.n	800bcd2 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	895b      	ldrh	r3, [r3, #10]
 800bcc8:	4619      	mov	r1, r3
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	fb01 f303 	mul.w	r3, r1, r3
 800bcd0:	4413      	add	r3, r2
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b086      	sub	sp, #24
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d904      	bls.n	800bcfe <get_fat+0x20>
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	695b      	ldr	r3, [r3, #20]
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d302      	bcc.n	800bd04 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bcfe:	2301      	movs	r3, #1
 800bd00:	617b      	str	r3, [r7, #20]
 800bd02:	e08f      	b.n	800be24 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bd04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd08:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d062      	beq.n	800bdd8 <get_fat+0xfa>
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	dc7c      	bgt.n	800be10 <get_fat+0x132>
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d002      	beq.n	800bd20 <get_fat+0x42>
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d042      	beq.n	800bda4 <get_fat+0xc6>
 800bd1e:	e077      	b.n	800be10 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	085b      	lsrs	r3, r3, #1
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	6a1a      	ldr	r2, [r3, #32]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	0a5b      	lsrs	r3, r3, #9
 800bd36:	4413      	add	r3, r2
 800bd38:	4619      	mov	r1, r3
 800bd3a:	6938      	ldr	r0, [r7, #16]
 800bd3c:	f7ff ff14 	bl	800bb68 <move_window>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d167      	bne.n	800be16 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	1c5a      	adds	r2, r3, #1
 800bd4a:	60fa      	str	r2, [r7, #12]
 800bd4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd50:	693a      	ldr	r2, [r7, #16]
 800bd52:	4413      	add	r3, r2
 800bd54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	6a1a      	ldr	r2, [r3, #32]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	0a5b      	lsrs	r3, r3, #9
 800bd62:	4413      	add	r3, r2
 800bd64:	4619      	mov	r1, r3
 800bd66:	6938      	ldr	r0, [r7, #16]
 800bd68:	f7ff fefe 	bl	800bb68 <move_window>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d153      	bne.n	800be1a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd78:	693a      	ldr	r2, [r7, #16]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd80:	021b      	lsls	r3, r3, #8
 800bd82:	461a      	mov	r2, r3
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d002      	beq.n	800bd9a <get_fat+0xbc>
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	091b      	lsrs	r3, r3, #4
 800bd98:	e002      	b.n	800bda0 <get_fat+0xc2>
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bda0:	617b      	str	r3, [r7, #20]
			break;
 800bda2:	e03f      	b.n	800be24 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	6a1a      	ldr	r2, [r3, #32]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	0a1b      	lsrs	r3, r3, #8
 800bdac:	4413      	add	r3, r2
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6938      	ldr	r0, [r7, #16]
 800bdb2:	f7ff fed9 	bl	800bb68 <move_window>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d130      	bne.n	800be1e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bdca:	4413      	add	r3, r2
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7ff fdc3 	bl	800b958 <ld_word>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	617b      	str	r3, [r7, #20]
			break;
 800bdd6:	e025      	b.n	800be24 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	6a1a      	ldr	r2, [r3, #32]
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	09db      	lsrs	r3, r3, #7
 800bde0:	4413      	add	r3, r2
 800bde2:	4619      	mov	r1, r3
 800bde4:	6938      	ldr	r0, [r7, #16]
 800bde6:	f7ff febf 	bl	800bb68 <move_window>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d118      	bne.n	800be22 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bdfe:	4413      	add	r3, r2
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff fdc1 	bl	800b988 <ld_dword>
 800be06:	4603      	mov	r3, r0
 800be08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800be0c:	617b      	str	r3, [r7, #20]
			break;
 800be0e:	e009      	b.n	800be24 <get_fat+0x146>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 800be10:	2301      	movs	r3, #1
 800be12:	617b      	str	r3, [r7, #20]
 800be14:	e006      	b.n	800be24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be16:	bf00      	nop
 800be18:	e004      	b.n	800be24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be1a:	bf00      	nop
 800be1c:	e002      	b.n	800be24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be1e:	bf00      	nop
 800be20:	e000      	b.n	800be24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be22:	bf00      	nop
		}
	}

	return val;
 800be24:	697b      	ldr	r3, [r7, #20]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800be2e:	b590      	push	{r4, r7, lr}
 800be30:	b089      	sub	sp, #36	; 0x24
 800be32:	af00      	add	r7, sp, #0
 800be34:	60f8      	str	r0, [r7, #12]
 800be36:	60b9      	str	r1, [r7, #8]
 800be38:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800be3a:	2302      	movs	r3, #2
 800be3c:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	2b01      	cmp	r3, #1
 800be42:	f240 80d2 	bls.w	800bfea <put_fat+0x1bc>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	f080 80cc 	bcs.w	800bfea <put_fat+0x1bc>
		switch (fs->fs_type) {
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b03      	cmp	r3, #3
 800be58:	f000 8096 	beq.w	800bf88 <put_fat+0x15a>
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	f300 80cd 	bgt.w	800bffc <put_fat+0x1ce>
 800be62:	2b01      	cmp	r3, #1
 800be64:	d002      	beq.n	800be6c <put_fat+0x3e>
 800be66:	2b02      	cmp	r3, #2
 800be68:	d06e      	beq.n	800bf48 <put_fat+0x11a>
 800be6a:	e0c7      	b.n	800bffc <put_fat+0x1ce>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	61bb      	str	r3, [r7, #24]
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	085b      	lsrs	r3, r3, #1
 800be74:	69ba      	ldr	r2, [r7, #24]
 800be76:	4413      	add	r3, r2
 800be78:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6a1a      	ldr	r2, [r3, #32]
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	0a5b      	lsrs	r3, r3, #9
 800be82:	4413      	add	r3, r2
 800be84:	4619      	mov	r1, r3
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f7ff fe6e 	bl	800bb68 <move_window>
 800be8c:	4603      	mov	r3, r0
 800be8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be90:	7ffb      	ldrb	r3, [r7, #31]
 800be92:	2b00      	cmp	r3, #0
 800be94:	f040 80ab 	bne.w	800bfee <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	1c59      	adds	r1, r3, #1
 800bea2:	61b9      	str	r1, [r7, #24]
 800bea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea8:	4413      	add	r3, r2
 800beaa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	f003 0301 	and.w	r3, r3, #1
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00d      	beq.n	800bed2 <put_fat+0xa4>
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	b25b      	sxtb	r3, r3
 800bebc:	f003 030f 	and.w	r3, r3, #15
 800bec0:	b25a      	sxtb	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	011b      	lsls	r3, r3, #4
 800bec8:	b25b      	sxtb	r3, r3
 800beca:	4313      	orrs	r3, r2
 800becc:	b25b      	sxtb	r3, r3
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	e001      	b.n	800bed6 <put_fat+0xa8>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2201      	movs	r2, #1
 800bede:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6a1a      	ldr	r2, [r3, #32]
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	0a5b      	lsrs	r3, r3, #9
 800bee8:	4413      	add	r3, r2
 800beea:	4619      	mov	r1, r3
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f7ff fe3b 	bl	800bb68 <move_window>
 800bef2:	4603      	mov	r3, r0
 800bef4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bef6:	7ffb      	ldrb	r3, [r7, #31]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d17a      	bne.n	800bff2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf08:	4413      	add	r3, r2
 800bf0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <put_fat+0xf0>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	091b      	lsrs	r3, r3, #4
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	e00e      	b.n	800bf3c <put_fat+0x10e>
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	b25b      	sxtb	r3, r3
 800bf24:	f023 030f 	bic.w	r3, r3, #15
 800bf28:	b25a      	sxtb	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	0a1b      	lsrs	r3, r3, #8
 800bf2e:	b25b      	sxtb	r3, r3
 800bf30:	f003 030f 	and.w	r3, r3, #15
 800bf34:	b25b      	sxtb	r3, r3
 800bf36:	4313      	orrs	r3, r2
 800bf38:	b25b      	sxtb	r3, r3
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	697a      	ldr	r2, [r7, #20]
 800bf3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2201      	movs	r2, #1
 800bf44:	711a      	strb	r2, [r3, #4]
			break;
 800bf46:	e059      	b.n	800bffc <put_fat+0x1ce>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6a1a      	ldr	r2, [r3, #32]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	0a1b      	lsrs	r3, r3, #8
 800bf50:	4413      	add	r3, r2
 800bf52:	4619      	mov	r1, r3
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f7ff fe07 	bl	800bb68 <move_window>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf5e:	7ffb      	ldrb	r3, [r7, #31]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d148      	bne.n	800bff6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bf72:	4413      	add	r3, r2
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	b292      	uxth	r2, r2
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7ff fd27 	bl	800b9ce <st_word>
			fs->wflag = 1;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2201      	movs	r2, #1
 800bf84:	711a      	strb	r2, [r3, #4]
			break;
 800bf86:	e039      	b.n	800bffc <put_fat+0x1ce>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6a1a      	ldr	r2, [r3, #32]
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	09db      	lsrs	r3, r3, #7
 800bf90:	4413      	add	r3, r2
 800bf92:	4619      	mov	r1, r3
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f7ff fde7 	bl	800bb68 <move_window>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf9e:	7ffb      	ldrb	r3, [r7, #31]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d12a      	bne.n	800bffa <put_fat+0x1cc>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bfb8:	4413      	add	r3, r2
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7ff fce4 	bl	800b988 <ld_dword>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bfc6:	4323      	orrs	r3, r4
 800bfc8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bfd8:	4413      	add	r3, r2
 800bfda:	6879      	ldr	r1, [r7, #4]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7ff fd11 	bl	800ba04 <st_dword>
			fs->wflag = 1;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	711a      	strb	r2, [r3, #4]
			break;
 800bfe8:	e008      	b.n	800bffc <put_fat+0x1ce>
		}
	}
 800bfea:	bf00      	nop
 800bfec:	e006      	b.n	800bffc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bfee:	bf00      	nop
 800bff0:	e004      	b.n	800bffc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bff2:	bf00      	nop
 800bff4:	e002      	b.n	800bffc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bff6:	bf00      	nop
 800bff8:	e000      	b.n	800bffc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bffa:	bf00      	nop
	return res;
 800bffc:	7ffb      	ldrb	r3, [r7, #31]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3724      	adds	r7, #36	; 0x24
 800c002:	46bd      	mov	sp, r7
 800c004:	bd90      	pop	{r4, r7, pc}

0800c006 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b088      	sub	sp, #32
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	60f8      	str	r0, [r7, #12]
 800c00e:	60b9      	str	r1, [r7, #8]
 800c010:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c012:	2300      	movs	r3, #0
 800c014:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d904      	bls.n	800c02c <remove_chain+0x26>
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d301      	bcc.n	800c030 <remove_chain+0x2a>
 800c02c:	2302      	movs	r3, #2
 800c02e:	e04b      	b.n	800c0c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00c      	beq.n	800c050 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c03a:	6879      	ldr	r1, [r7, #4]
 800c03c:	69b8      	ldr	r0, [r7, #24]
 800c03e:	f7ff fef6 	bl	800be2e <put_fat>
 800c042:	4603      	mov	r3, r0
 800c044:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c046:	7ffb      	ldrb	r3, [r7, #31]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d001      	beq.n	800c050 <remove_chain+0x4a>
 800c04c:	7ffb      	ldrb	r3, [r7, #31]
 800c04e:	e03b      	b.n	800c0c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c050:	68b9      	ldr	r1, [r7, #8]
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f7ff fe43 	bl	800bcde <get_fat>
 800c058:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d031      	beq.n	800c0c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	2b01      	cmp	r3, #1
 800c064:	d101      	bne.n	800c06a <remove_chain+0x64>
 800c066:	2302      	movs	r3, #2
 800c068:	e02e      	b.n	800c0c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c070:	d101      	bne.n	800c076 <remove_chain+0x70>
 800c072:	2301      	movs	r3, #1
 800c074:	e028      	b.n	800c0c8 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c076:	2200      	movs	r2, #0
 800c078:	68b9      	ldr	r1, [r7, #8]
 800c07a:	69b8      	ldr	r0, [r7, #24]
 800c07c:	f7ff fed7 	bl	800be2e <put_fat>
 800c080:	4603      	mov	r3, r0
 800c082:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c084:	7ffb      	ldrb	r3, [r7, #31]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <remove_chain+0x88>
 800c08a:	7ffb      	ldrb	r3, [r7, #31]
 800c08c:	e01c      	b.n	800c0c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	691a      	ldr	r2, [r3, #16]
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	695b      	ldr	r3, [r3, #20]
 800c096:	3b02      	subs	r3, #2
 800c098:	429a      	cmp	r2, r3
 800c09a:	d20b      	bcs.n	800c0b4 <remove_chain+0xae>
			fs->free_clst++;
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	1c5a      	adds	r2, r3, #1
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	795b      	ldrb	r3, [r3, #5]
 800c0aa:	f043 0301 	orr.w	r3, r3, #1
 800c0ae:	b2da      	uxtb	r2, r3
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	695b      	ldr	r3, [r3, #20]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d3c6      	bcc.n	800c050 <remove_chain+0x4a>
 800c0c2:	e000      	b.n	800c0c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c0c4:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3720      	adds	r7, #32
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10d      	bne.n	800c102 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d004      	beq.n	800c0fc <create_chain+0x2c>
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	69ba      	ldr	r2, [r7, #24]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d31b      	bcc.n	800c134 <create_chain+0x64>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	61bb      	str	r3, [r7, #24]
 800c100:	e018      	b.n	800c134 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7ff fdea 	bl	800bcde <get_fat>
 800c10a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d801      	bhi.n	800c116 <create_chain+0x46>
 800c112:	2301      	movs	r3, #1
 800c114:	e0a9      	b.n	800c26a <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c11c:	d101      	bne.n	800c122 <create_chain+0x52>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	e0a3      	b.n	800c26a <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d201      	bcs.n	800c130 <create_chain+0x60>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	e09c      	b.n	800c26a <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d101      	bne.n	800c140 <create_chain+0x70>
 800c13c:	2300      	movs	r3, #0
 800c13e:	e094      	b.n	800c26a <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800c140:	2300      	movs	r3, #0
 800c142:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800c144:	69ba      	ldr	r2, [r7, #24]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d129      	bne.n	800c1a0 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	3301      	adds	r3, #1
 800c150:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	69fa      	ldr	r2, [r7, #28]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d301      	bcc.n	800c160 <create_chain+0x90>
 800c15c:	2302      	movs	r3, #2
 800c15e:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800c160:	69f9      	ldr	r1, [r7, #28]
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7ff fdbb 	bl	800bcde <get_fat>
 800c168:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d003      	beq.n	800c178 <create_chain+0xa8>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c176:	d101      	bne.n	800c17c <create_chain+0xac>
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	e076      	b.n	800c26a <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00e      	beq.n	800c1a0 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d906      	bls.n	800c19c <create_chain+0xcc>
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	695b      	ldr	r3, [r3, #20]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	429a      	cmp	r2, r3
 800c196:	d201      	bcs.n	800c19c <create_chain+0xcc>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800c19c:	2300      	movs	r3, #0
 800c19e:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d129      	bne.n	800c1fa <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	69fa      	ldr	r2, [r7, #28]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d307      	bcc.n	800c1ca <create_chain+0xfa>
					ncl = 2;
 800c1ba:	2302      	movs	r3, #2
 800c1bc:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800c1be:	69fa      	ldr	r2, [r7, #28]
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d901      	bls.n	800c1ca <create_chain+0xfa>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	e04f      	b.n	800c26a <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c1ca:	69f9      	ldr	r1, [r7, #28]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff fd86 	bl	800bcde <get_fat>
 800c1d2:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00e      	beq.n	800c1f8 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d003      	beq.n	800c1e8 <create_chain+0x118>
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1e6:	d101      	bne.n	800c1ec <create_chain+0x11c>
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	e03e      	b.n	800c26a <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800c1ec:	69fa      	ldr	r2, [r7, #28]
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d1da      	bne.n	800c1aa <create_chain+0xda>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	e038      	b.n	800c26a <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800c1f8:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800c1fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1fe:	69f9      	ldr	r1, [r7, #28]
 800c200:	6938      	ldr	r0, [r7, #16]
 800c202:	f7ff fe14 	bl	800be2e <put_fat>
 800c206:	4603      	mov	r3, r0
 800c208:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d109      	bne.n	800c224 <create_chain+0x154>
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d006      	beq.n	800c224 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800c216:	69fa      	ldr	r2, [r7, #28]
 800c218:	6839      	ldr	r1, [r7, #0]
 800c21a:	6938      	ldr	r0, [r7, #16]
 800c21c:	f7ff fe07 	bl	800be2e <put_fat>
 800c220:	4603      	mov	r3, r0
 800c222:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c224:	7dfb      	ldrb	r3, [r7, #23]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d116      	bne.n	800c258 <create_chain+0x188>
		fs->last_clst = ncl;
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	69fa      	ldr	r2, [r7, #28]
 800c22e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	691a      	ldr	r2, [r3, #16]
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	3b02      	subs	r3, #2
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d804      	bhi.n	800c248 <create_chain+0x178>
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	1e5a      	subs	r2, r3, #1
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	795b      	ldrb	r3, [r3, #5]
 800c24c:	f043 0301 	orr.w	r3, r3, #1
 800c250:	b2da      	uxtb	r2, r3
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	715a      	strb	r2, [r3, #5]
 800c256:	e007      	b.n	800c268 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c258:	7dfb      	ldrb	r3, [r7, #23]
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d102      	bne.n	800c264 <create_chain+0x194>
 800c25e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c262:	e000      	b.n	800c266 <create_chain+0x196>
 800c264:	2301      	movs	r3, #1
 800c266:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c268:	69fb      	ldr	r3, [r7, #28]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3720      	adds	r7, #32
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b086      	sub	sp, #24
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7ff fc37 	bl	800baf0 <sync_window>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <dir_clear+0x1a>
 800c288:	2301      	movs	r3, #1
 800c28a:	e036      	b.n	800c2fa <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7ff fd06 	bl	800bca0 <clst2sect>
 800c294:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	693a      	ldr	r2, [r7, #16]
 800c29a:	62da      	str	r2, [r3, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3330      	adds	r3, #48	; 0x30
 800c2a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f012 ffd2 	bl	801f250 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	3330      	adds	r3, #48	; 0x30
 800c2b0:	60fb      	str	r3, [r7, #12]
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	617b      	str	r3, [r7, #20]
 800c2ba:	e003      	b.n	800c2c4 <dir_clear+0x52>
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	617b      	str	r3, [r7, #20]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	895b      	ldrh	r3, [r3, #10]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d20b      	bcs.n	800c2e8 <dir_clear+0x76>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7858      	ldrb	r0, [r3, #1]
 800c2d4:	693a      	ldr	r2, [r7, #16]
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	441a      	add	r2, r3
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	68f9      	ldr	r1, [r7, #12]
 800c2de:	f7ff fafd 	bl	800b8dc <disk_write>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d0e9      	beq.n	800c2bc <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	895b      	ldrh	r3, [r3, #10]
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	bf14      	ite	ne
 800c2f4:	2301      	movne	r3, #1
 800c2f6:	2300      	moveq	r3, #0
 800c2f8:	b2db      	uxtb	r3, r3
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b086      	sub	sp, #24
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c318:	d204      	bcs.n	800c324 <dir_sdi+0x22>
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	f003 031f 	and.w	r3, r3, #31
 800c320:	2b00      	cmp	r3, #0
 800c322:	d001      	beq.n	800c328 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c324:	2302      	movs	r3, #2
 800c326:	e063      	b.n	800c3f0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <dir_sdi+0x46>
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	2b02      	cmp	r3, #2
 800c340:	d902      	bls.n	800c348 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c346:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10c      	bne.n	800c368 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	095b      	lsrs	r3, r3, #5
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	8912      	ldrh	r2, [r2, #8]
 800c356:	4293      	cmp	r3, r2
 800c358:	d301      	bcc.n	800c35e <dir_sdi+0x5c>
 800c35a:	2302      	movs	r3, #2
 800c35c:	e048      	b.n	800c3f0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	619a      	str	r2, [r3, #24]
 800c366:	e029      	b.n	800c3bc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	895b      	ldrh	r3, [r3, #10]
 800c36c:	025b      	lsls	r3, r3, #9
 800c36e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c370:	e019      	b.n	800c3a6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6979      	ldr	r1, [r7, #20]
 800c376:	4618      	mov	r0, r3
 800c378:	f7ff fcb1 	bl	800bcde <get_fat>
 800c37c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c384:	d101      	bne.n	800c38a <dir_sdi+0x88>
 800c386:	2301      	movs	r3, #1
 800c388:	e032      	b.n	800c3f0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d904      	bls.n	800c39a <dir_sdi+0x98>
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	695b      	ldr	r3, [r3, #20]
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	429a      	cmp	r2, r3
 800c398:	d301      	bcc.n	800c39e <dir_sdi+0x9c>
 800c39a:	2302      	movs	r3, #2
 800c39c:	e028      	b.n	800c3f0 <dir_sdi+0xee>
			ofs -= csz;
 800c39e:	683a      	ldr	r2, [r7, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d2e1      	bcs.n	800c372 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 800c3ae:	6979      	ldr	r1, [r7, #20]
 800c3b0:	6938      	ldr	r0, [r7, #16]
 800c3b2:	f7ff fc75 	bl	800bca0 <clst2sect>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	699b      	ldr	r3, [r3, #24]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d101      	bne.n	800c3ce <dir_sdi+0xcc>
 800c3ca:	2302      	movs	r3, #2
 800c3cc:	e010      	b.n	800c3f0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	699a      	ldr	r2, [r3, #24]
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	0a5b      	lsrs	r3, r3, #9
 800c3d6:	441a      	add	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e8:	441a      	add	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3718      	adds	r7, #24
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	3320      	adds	r3, #32
 800c40e:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c416:	d302      	bcc.n	800c41e <dir_next+0x26>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	699b      	ldr	r3, [r3, #24]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <dir_next+0x32>
 800c426:	2304      	movs	r3, #4
 800c428:	e078      	b.n	800c51c <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c430:	2b00      	cmp	r3, #0
 800c432:	d166      	bne.n	800c502 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	699b      	ldr	r3, [r3, #24]
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10a      	bne.n	800c45c <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	095b      	lsrs	r3, r3, #5
 800c44a:	693a      	ldr	r2, [r7, #16]
 800c44c:	8912      	ldrh	r2, [r2, #8]
 800c44e:	4293      	cmp	r3, r2
 800c450:	d357      	bcc.n	800c502 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	619a      	str	r2, [r3, #24]
 800c458:	2304      	movs	r3, #4
 800c45a:	e05f      	b.n	800c51c <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	0a5b      	lsrs	r3, r3, #9
 800c460:	693a      	ldr	r2, [r7, #16]
 800c462:	8952      	ldrh	r2, [r2, #10]
 800c464:	3a01      	subs	r2, #1
 800c466:	4013      	ands	r3, r2
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d14a      	bne.n	800c502 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	4619      	mov	r1, r3
 800c474:	4610      	mov	r0, r2
 800c476:	f7ff fc32 	bl	800bcde <get_fat>
 800c47a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d801      	bhi.n	800c486 <dir_next+0x8e>
 800c482:	2302      	movs	r3, #2
 800c484:	e04a      	b.n	800c51c <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c48c:	d101      	bne.n	800c492 <dir_next+0x9a>
 800c48e:	2301      	movs	r3, #1
 800c490:	e044      	b.n	800c51c <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	697a      	ldr	r2, [r7, #20]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d328      	bcc.n	800c4ee <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d104      	bne.n	800c4ac <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	619a      	str	r2, [r3, #24]
 800c4a8:	2304      	movs	r3, #4
 800c4aa:	e037      	b.n	800c51c <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	f7ff fe0b 	bl	800c0d0 <create_chain>
 800c4ba:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <dir_next+0xce>
 800c4c2:	2307      	movs	r3, #7
 800c4c4:	e02a      	b.n	800c51c <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d101      	bne.n	800c4d0 <dir_next+0xd8>
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	e025      	b.n	800c51c <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4d6:	d101      	bne.n	800c4dc <dir_next+0xe4>
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e01f      	b.n	800c51c <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800c4dc:	6979      	ldr	r1, [r7, #20]
 800c4de:	6938      	ldr	r0, [r7, #16]
 800c4e0:	f7ff fec7 	bl	800c272 <dir_clear>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <dir_next+0xf6>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e016      	b.n	800c51c <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 800c4f4:	6979      	ldr	r1, [r7, #20]
 800c4f6:	6938      	ldr	r0, [r7, #16]
 800c4f8:	f7ff fbd2 	bl	800bca0 <clst2sect>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c514:	441a      	add	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c534:	2100      	movs	r1, #0
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff fee3 	bl	800c302 <dir_sdi>
 800c53c:	4603      	mov	r3, r0
 800c53e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c540:	7dfb      	ldrb	r3, [r7, #23]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d12b      	bne.n	800c59e <dir_alloc+0x7a>
		n = 0;
 800c546:	2300      	movs	r3, #0
 800c548:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	4619      	mov	r1, r3
 800c550:	68f8      	ldr	r0, [r7, #12]
 800c552:	f7ff fb09 	bl	800bb68 <move_window>
 800c556:	4603      	mov	r3, r0
 800c558:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c55a:	7dfb      	ldrb	r3, [r7, #23]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d11d      	bne.n	800c59c <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	69db      	ldr	r3, [r3, #28]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	2be5      	cmp	r3, #229	; 0xe5
 800c568:	d004      	beq.n	800c574 <dir_alloc+0x50>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	69db      	ldr	r3, [r3, #28]
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d107      	bne.n	800c584 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	3301      	adds	r3, #1
 800c578:	613b      	str	r3, [r7, #16]
 800c57a:	693a      	ldr	r2, [r7, #16]
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d102      	bne.n	800c588 <dir_alloc+0x64>
 800c582:	e00c      	b.n	800c59e <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800c584:	2300      	movs	r3, #0
 800c586:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800c588:	2101      	movs	r1, #1
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7ff ff34 	bl	800c3f8 <dir_next>
 800c590:	4603      	mov	r3, r0
 800c592:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c594:	7dfb      	ldrb	r3, [r7, #23]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0d7      	beq.n	800c54a <dir_alloc+0x26>
 800c59a:	e000      	b.n	800c59e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c59c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c59e:	7dfb      	ldrb	r3, [r7, #23]
 800c5a0:	2b04      	cmp	r3, #4
 800c5a2:	d101      	bne.n	800c5a8 <dir_alloc+0x84>
 800c5a4:	2307      	movs	r3, #7
 800c5a6:	75fb      	strb	r3, [r7, #23]
	return res;
 800c5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b084      	sub	sp, #16
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	331a      	adds	r3, #26
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7ff f9c9 	bl	800b958 <ld_word>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	2b03      	cmp	r3, #3
 800c5d0:	d109      	bne.n	800c5e6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	3314      	adds	r3, #20
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7ff f9be 	bl	800b958 <ld_word>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	041b      	lsls	r3, r3, #16
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	331a      	adds	r3, #26
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	b292      	uxth	r2, r2
 800c604:	4611      	mov	r1, r2
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff f9e1 	bl	800b9ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	2b03      	cmp	r3, #3
 800c612:	d109      	bne.n	800c628 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	f103 0214 	add.w	r2, r3, #20
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	0c1b      	lsrs	r3, r3, #16
 800c61e:	b29b      	uxth	r3, r3
 800c620:	4619      	mov	r1, r3
 800c622:	4610      	mov	r0, r2
 800c624:	f7ff f9d3 	bl	800b9ce <st_word>
	}
}
 800c628:	bf00      	nop
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b086      	sub	sp, #24
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c63e:	2100      	movs	r1, #0
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff fe5e 	bl	800c302 <dir_sdi>
 800c646:	4603      	mov	r3, r0
 800c648:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d001      	beq.n	800c654 <dir_find+0x24>
 800c650:	7dfb      	ldrb	r3, [r7, #23]
 800c652:	e03e      	b.n	800c6d2 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	699b      	ldr	r3, [r3, #24]
 800c658:	4619      	mov	r1, r3
 800c65a:	6938      	ldr	r0, [r7, #16]
 800c65c:	f7ff fa84 	bl	800bb68 <move_window>
 800c660:	4603      	mov	r3, r0
 800c662:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c664:	7dfb      	ldrb	r3, [r7, #23]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d12f      	bne.n	800c6ca <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c672:	7bfb      	ldrb	r3, [r7, #15]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d102      	bne.n	800c67e <dir_find+0x4e>
 800c678:	2304      	movs	r3, #4
 800c67a:	75fb      	strb	r3, [r7, #23]
 800c67c:	e028      	b.n	800c6d0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	69db      	ldr	r3, [r3, #28]
 800c682:	330b      	adds	r3, #11
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c68a:	b2da      	uxtb	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	69db      	ldr	r3, [r3, #28]
 800c694:	330b      	adds	r3, #11
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	f003 0308 	and.w	r3, r3, #8
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10a      	bne.n	800c6b6 <dir_find+0x86>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	69d8      	ldr	r0, [r3, #28]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	3320      	adds	r3, #32
 800c6a8:	220b      	movs	r2, #11
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	f012 fd98 	bl	801f1e0 <memcmp>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00b      	beq.n	800c6ce <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff fe9d 	bl	800c3f8 <dir_next>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c6c2:	7dfb      	ldrb	r3, [r7, #23]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d0c5      	beq.n	800c654 <dir_find+0x24>
 800c6c8:	e002      	b.n	800c6d0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c6ca:	bf00      	nop
 800c6cc:	e000      	b.n	800c6d0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c6ce:	bf00      	nop

	return res;
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7ff ff1a 	bl	800c524 <dir_alloc>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d11c      	bne.n	800c734 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	699b      	ldr	r3, [r3, #24]
 800c6fe:	4619      	mov	r1, r3
 800c700:	68b8      	ldr	r0, [r7, #8]
 800c702:	f7ff fa31 	bl	800bb68 <move_window>
 800c706:	4603      	mov	r3, r0
 800c708:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d111      	bne.n	800c734 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	69db      	ldr	r3, [r3, #28]
 800c714:	2220      	movs	r2, #32
 800c716:	2100      	movs	r1, #0
 800c718:	4618      	mov	r0, r3
 800c71a:	f012 fd99 	bl	801f250 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	69d8      	ldr	r0, [r3, #28]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	3320      	adds	r3, #32
 800c726:	220b      	movs	r2, #11
 800c728:	4619      	mov	r1, r3
 800c72a:	f012 fd69 	bl	801f200 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2201      	movs	r2, #1
 800c732:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800c734:	7bfb      	ldrb	r3, [r7, #15]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
	...

0800c740 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b08a      	sub	sp, #40	; 0x28
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	617b      	str	r3, [r7, #20]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	3320      	adds	r3, #32
 800c754:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 800c756:	220b      	movs	r2, #11
 800c758:	2120      	movs	r1, #32
 800c75a:	6938      	ldr	r0, [r7, #16]
 800c75c:	f012 fd78 	bl	801f250 <memset>
	si = i = 0; ni = 8;
 800c760:	2300      	movs	r3, #0
 800c762:	61bb      	str	r3, [r7, #24]
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	61fb      	str	r3, [r7, #28]
 800c768:	2308      	movs	r3, #8
 800c76a:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	1c5a      	adds	r2, r3, #1
 800c770:	61fa      	str	r2, [r7, #28]
 800c772:	697a      	ldr	r2, [r7, #20]
 800c774:	4413      	add	r3, r2
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c780:	2b20      	cmp	r3, #32
 800c782:	d97c      	bls.n	800c87e <create_name+0x13e>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 800c784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c788:	2b2f      	cmp	r3, #47	; 0x2f
 800c78a:	d007      	beq.n	800c79c <create_name+0x5c>
 800c78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c790:	2b5c      	cmp	r3, #92	; 0x5c
 800c792:	d110      	bne.n	800c7b6 <create_name+0x76>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800c794:	e002      	b.n	800c79c <create_name+0x5c>
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	3301      	adds	r3, #1
 800c79a:	61fb      	str	r3, [r7, #28]
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	2b2f      	cmp	r3, #47	; 0x2f
 800c7a6:	d0f6      	beq.n	800c796 <create_name+0x56>
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	2b5c      	cmp	r3, #92	; 0x5c
 800c7b2:	d0f0      	beq.n	800c796 <create_name+0x56>
			break;
 800c7b4:	e064      	b.n	800c880 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 800c7b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7ba:	2b2e      	cmp	r3, #46	; 0x2e
 800c7bc:	d003      	beq.n	800c7c6 <create_name+0x86>
 800c7be:	69ba      	ldr	r2, [r7, #24]
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d30d      	bcc.n	800c7e2 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	2b0b      	cmp	r3, #11
 800c7ca:	d003      	beq.n	800c7d4 <create_name+0x94>
 800c7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7d0:	2b2e      	cmp	r3, #46	; 0x2e
 800c7d2:	d001      	beq.n	800c7d8 <create_name+0x98>
 800c7d4:	2306      	movs	r3, #6
 800c7d6:	e075      	b.n	800c8c4 <create_name+0x184>
			i = 8; ni = 11;				/* Enter file extension field */
 800c7d8:	2308      	movs	r3, #8
 800c7da:	61bb      	str	r3, [r7, #24]
 800c7dc:	230b      	movs	r3, #11
 800c7de:	623b      	str	r3, [r7, #32]
			continue;
 800c7e0:	e04c      	b.n	800c87c <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 800c7e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff f938 	bl	800ba5c <dbc_1st>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d024      	beq.n	800c83c <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	1c5a      	adds	r2, r3, #1
 800c7f6:	61fa      	str	r2, [r7, #28]
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800c800:	7bfb      	ldrb	r3, [r7, #15]
 800c802:	4618      	mov	r0, r3
 800c804:	f7ff f94a 	bl	800ba9c <dbc_2nd>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d004      	beq.n	800c818 <create_name+0xd8>
 800c80e:	6a3b      	ldr	r3, [r7, #32]
 800c810:	3b01      	subs	r3, #1
 800c812:	69ba      	ldr	r2, [r7, #24]
 800c814:	429a      	cmp	r2, r3
 800c816:	d301      	bcc.n	800c81c <create_name+0xdc>
 800c818:	2306      	movs	r3, #6
 800c81a:	e053      	b.n	800c8c4 <create_name+0x184>
			sfn[i++] = c;
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	61ba      	str	r2, [r7, #24]
 800c822:	693a      	ldr	r2, [r7, #16]
 800c824:	4413      	add	r3, r2
 800c826:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c82a:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	1c5a      	adds	r2, r3, #1
 800c830:	61ba      	str	r2, [r7, #24]
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	4413      	add	r3, r2
 800c836:	7bfa      	ldrb	r2, [r7, #15]
 800c838:	701a      	strb	r2, [r3, #0]
 800c83a:	e797      	b.n	800c76c <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c840:	4619      	mov	r1, r3
 800c842:	4822      	ldr	r0, [pc, #136]	; (800c8cc <create_name+0x18c>)
 800c844:	f013 fa83 	bl	801fd4e <strchr>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d001      	beq.n	800c852 <create_name+0x112>
 800c84e:	2306      	movs	r3, #6
 800c850:	e038      	b.n	800c8c4 <create_name+0x184>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c856:	2b60      	cmp	r3, #96	; 0x60
 800c858:	d908      	bls.n	800c86c <create_name+0x12c>
 800c85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c85e:	2b7a      	cmp	r3, #122	; 0x7a
 800c860:	d804      	bhi.n	800c86c <create_name+0x12c>
 800c862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c866:	3b20      	subs	r3, #32
 800c868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	1c5a      	adds	r2, r3, #1
 800c870:	61ba      	str	r2, [r7, #24]
 800c872:	693a      	ldr	r2, [r7, #16]
 800c874:	4413      	add	r3, r2
 800c876:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c87a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 800c87c:	e776      	b.n	800c76c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c87e:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	441a      	add	r2, r3
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d101      	bne.n	800c894 <create_name+0x154>
 800c890:	2306      	movs	r3, #6
 800c892:	e017      	b.n	800c8c4 <create_name+0x184>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	2be5      	cmp	r3, #229	; 0xe5
 800c89a:	d102      	bne.n	800c8a2 <create_name+0x162>
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	2205      	movs	r2, #5
 800c8a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 800c8a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8a6:	2b20      	cmp	r3, #32
 800c8a8:	d905      	bls.n	800c8b6 <create_name+0x176>
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	4413      	add	r3, r2
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	2b20      	cmp	r3, #32
 800c8b4:	d801      	bhi.n	800c8ba <create_name+0x17a>
 800c8b6:	2204      	movs	r2, #4
 800c8b8:	e000      	b.n	800c8bc <create_name+0x17c>
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	330b      	adds	r3, #11
 800c8c0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c8c2:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3728      	adds	r7, #40	; 0x28
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	080208c8 	.word	0x080208c8

0800c8d0 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800c8e0:	e002      	b.n	800c8e8 <follow_path+0x18>
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	603b      	str	r3, [r7, #0]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b2f      	cmp	r3, #47	; 0x2f
 800c8ee:	d0f8      	beq.n	800c8e2 <follow_path+0x12>
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	2b5c      	cmp	r3, #92	; 0x5c
 800c8f6:	d0f4      	beq.n	800c8e2 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b1f      	cmp	r3, #31
 800c904:	d80a      	bhi.n	800c91c <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2280      	movs	r2, #128	; 0x80
 800c90a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800c90e:	2100      	movs	r1, #0
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff fcf6 	bl	800c302 <dir_sdi>
 800c916:	4603      	mov	r3, r0
 800c918:	75fb      	strb	r3, [r7, #23]
 800c91a:	e043      	b.n	800c9a4 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c91c:	463b      	mov	r3, r7
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7ff ff0d 	bl	800c740 <create_name>
 800c926:	4603      	mov	r3, r0
 800c928:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c92a:	7dfb      	ldrb	r3, [r7, #23]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d134      	bne.n	800c99a <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7ff fe7d 	bl	800c630 <dir_find>
 800c936:	4603      	mov	r3, r0
 800c938:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c940:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800c942:	7dfb      	ldrb	r3, [r7, #23]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00a      	beq.n	800c95e <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c948:	7dfb      	ldrb	r3, [r7, #23]
 800c94a:	2b04      	cmp	r3, #4
 800c94c:	d127      	bne.n	800c99e <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
 800c950:	f003 0304 	and.w	r3, r3, #4
 800c954:	2b00      	cmp	r3, #0
 800c956:	d122      	bne.n	800c99e <follow_path+0xce>
 800c958:	2305      	movs	r3, #5
 800c95a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c95c:	e01f      	b.n	800c99e <follow_path+0xce>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
 800c960:	f003 0304 	and.w	r3, r3, #4
 800c964:	2b00      	cmp	r3, #0
 800c966:	d11c      	bne.n	800c9a2 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	799b      	ldrb	r3, [r3, #6]
 800c96c:	f003 0310 	and.w	r3, r3, #16
 800c970:	2b00      	cmp	r3, #0
 800c972:	d102      	bne.n	800c97a <follow_path+0xaa>
				res = FR_NO_PATH; break;
 800c974:	2305      	movs	r3, #5
 800c976:	75fb      	strb	r3, [r7, #23]
 800c978:	e014      	b.n	800c9a4 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	691b      	ldr	r3, [r3, #16]
 800c984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c988:	4413      	add	r3, r2
 800c98a:	4619      	mov	r1, r3
 800c98c:	6938      	ldr	r0, [r7, #16]
 800c98e:	f7ff fe10 	bl	800c5b2 <ld_clust>
 800c992:	4602      	mov	r2, r0
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c998:	e7c0      	b.n	800c91c <follow_path+0x4c>
			if (res != FR_OK) break;
 800c99a:	bf00      	nop
 800c99c:	e002      	b.n	800c9a4 <follow_path+0xd4>
				break;
 800c99e:	bf00      	nop
 800c9a0:	e000      	b.n	800c9a4 <follow_path+0xd4>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800c9a2:	bf00      	nop
			}
		}
	}

	return res;
 800c9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3718      	adds	r7, #24
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b089      	sub	sp, #36	; 0x24
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 800c9b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9ba:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	613b      	str	r3, [r7, #16]
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d101      	bne.n	800c9d0 <get_ldnumber+0x22>
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	e02d      	b.n	800ca2c <get_ldnumber+0x7e>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	1c5a      	adds	r2, r3, #1
 800c9d4:	61fa      	str	r2, [r7, #28]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 800c9da:	7bfb      	ldrb	r3, [r7, #15]
 800c9dc:	2b20      	cmp	r3, #32
 800c9de:	d902      	bls.n	800c9e6 <get_ldnumber+0x38>
 800c9e0:	7bfb      	ldrb	r3, [r7, #15]
 800c9e2:	2b3a      	cmp	r3, #58	; 0x3a
 800c9e4:	d1f4      	bne.n	800c9d0 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800c9e6:	7bfb      	ldrb	r3, [r7, #15]
 800c9e8:	2b3a      	cmp	r3, #58	; 0x3a
 800c9ea:	d11c      	bne.n	800ca26 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	2b2f      	cmp	r3, #47	; 0x2f
 800c9f6:	d90c      	bls.n	800ca12 <get_ldnumber+0x64>
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b39      	cmp	r3, #57	; 0x39
 800c9fe:	d808      	bhi.n	800ca12 <get_ldnumber+0x64>
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	3302      	adds	r3, #2
 800ca04:	69fa      	ldr	r2, [r7, #28]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d103      	bne.n	800ca12 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	3b30      	subs	r3, #48	; 0x30
 800ca10:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	dc04      	bgt.n	800ca22 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	69fa      	ldr	r2, [r7, #28]
 800ca20:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	e002      	b.n	800ca2c <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800ca26:	2300      	movs	r3, #0
 800ca28:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800ca2a:	697b      	ldr	r3, [r7, #20]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3724      	adds	r7, #36	; 0x24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	711a      	strb	r2, [r3, #4]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca4e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7ff f888 	bl	800bb68 <move_window>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d001      	beq.n	800ca62 <check_fs+0x2a>
 800ca5e:	2304      	movs	r3, #4
 800ca60:	e088      	b.n	800cb74 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	3330      	adds	r3, #48	; 0x30
 800ca66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fe ff74 	bl	800b958 <ld_word>
 800ca70:	4603      	mov	r3, r0
 800ca72:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca7a:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800ca7c:	7b7b      	ldrb	r3, [r7, #13]
 800ca7e:	2beb      	cmp	r3, #235	; 0xeb
 800ca80:	d005      	beq.n	800ca8e <check_fs+0x56>
 800ca82:	7b7b      	ldrb	r3, [r7, #13]
 800ca84:	2be9      	cmp	r3, #233	; 0xe9
 800ca86:	d002      	beq.n	800ca8e <check_fs+0x56>
 800ca88:	7b7b      	ldrb	r3, [r7, #13]
 800ca8a:	2be8      	cmp	r3, #232	; 0xe8
 800ca8c:	d16a      	bne.n	800cb64 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800ca8e:	89fb      	ldrh	r3, [r7, #14]
 800ca90:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d10c      	bne.n	800cab2 <check_fs+0x7a>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3330      	adds	r3, #48	; 0x30
 800ca9c:	3352      	adds	r3, #82	; 0x52
 800ca9e:	2208      	movs	r2, #8
 800caa0:	4936      	ldr	r1, [pc, #216]	; (800cb7c <check_fs+0x144>)
 800caa2:	4618      	mov	r0, r3
 800caa4:	f012 fb9c 	bl	801f1e0 <memcmp>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d101      	bne.n	800cab2 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800caae:	2300      	movs	r3, #0
 800cab0:	e060      	b.n	800cb74 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3330      	adds	r3, #48	; 0x30
 800cab6:	330b      	adds	r3, #11
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fe ff4d 	bl	800b958 <ld_word>
 800cabe:	4603      	mov	r3, r0
 800cac0:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cac8:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800caca:	897a      	ldrh	r2, [r7, #10]
 800cacc:	897b      	ldrh	r3, [r7, #10]
 800cace:	3b01      	subs	r3, #1
 800cad0:	4013      	ands	r3, r2
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d146      	bne.n	800cb64 <check_fs+0x12c>
 800cad6:	897b      	ldrh	r3, [r7, #10]
 800cad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cadc:	d342      	bcc.n	800cb64 <check_fs+0x12c>
 800cade:	897b      	ldrh	r3, [r7, #10]
 800cae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cae4:	d83e      	bhi.n	800cb64 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800cae6:	7b7b      	ldrb	r3, [r7, #13]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d03b      	beq.n	800cb64 <check_fs+0x12c>
 800caec:	7b7a      	ldrb	r2, [r7, #13]
 800caee:	7b7b      	ldrb	r3, [r7, #13]
 800caf0:	3b01      	subs	r3, #1
 800caf2:	4013      	ands	r3, r2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d135      	bne.n	800cb64 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3330      	adds	r3, #48	; 0x30
 800cafc:	330e      	adds	r3, #14
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fe ff2a 	bl	800b958 <ld_word>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d02c      	beq.n	800cb64 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb10:	3b01      	subs	r3, #1
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d826      	bhi.n	800cb64 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3330      	adds	r3, #48	; 0x30
 800cb1a:	3311      	adds	r3, #17
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fe ff1b 	bl	800b958 <ld_word>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d01d      	beq.n	800cb64 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3330      	adds	r3, #48	; 0x30
 800cb2c:	3313      	adds	r3, #19
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fe ff12 	bl	800b958 <ld_word>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b7f      	cmp	r3, #127	; 0x7f
 800cb38:	d809      	bhi.n	800cb4e <check_fs+0x116>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	3330      	adds	r3, #48	; 0x30
 800cb3e:	3320      	adds	r3, #32
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fe ff21 	bl	800b988 <ld_dword>
 800cb46:	4603      	mov	r3, r0
 800cb48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb4c:	d30a      	bcc.n	800cb64 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	3330      	adds	r3, #48	; 0x30
 800cb52:	3316      	adds	r3, #22
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fe feff 	bl	800b958 <ld_word>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 800cb60:	2300      	movs	r3, #0
 800cb62:	e007      	b.n	800cb74 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800cb64:	89fb      	ldrh	r3, [r7, #14]
 800cb66:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d101      	bne.n	800cb72 <check_fs+0x13a>
 800cb6e:	2302      	movs	r3, #2
 800cb70:	e000      	b.n	800cb74 <check_fs+0x13c>
 800cb72:	2303      	movs	r3, #3
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	080208d8 	.word	0x080208d8

0800cb80 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b088      	sub	sp, #32
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7ff ff53 	bl	800ca38 <check_fs>
 800cb92:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d007      	beq.n	800cbaa <find_volume+0x2a>
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d802      	bhi.n	800cba6 <find_volume+0x26>
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d101      	bne.n	800cbaa <find_volume+0x2a>
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	e045      	b.n	800cc36 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800cbaa:	2300      	movs	r3, #0
 800cbac:	61fb      	str	r3, [r7, #28]
 800cbae:	e014      	b.n	800cbda <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	011b      	lsls	r3, r3, #4
 800cbba:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800cbbe:	4413      	add	r3, r2
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fe fee1 	bl	800b988 <ld_dword>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	3320      	adds	r3, #32
 800cbce:	443b      	add	r3, r7
 800cbd0:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	61fb      	str	r3, [r7, #28]
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	2b03      	cmp	r3, #3
 800cbde:	d9e7      	bls.n	800cbb0 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d002      	beq.n	800cbec <find_volume+0x6c>
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	e000      	b.n	800cbee <find_volume+0x6e>
 800cbec:	2300      	movs	r3, #0
 800cbee:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	3320      	adds	r3, #32
 800cbf6:	443b      	add	r3, r7
 800cbf8:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00b      	beq.n	800cc18 <find_volume+0x98>
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	3320      	adds	r3, #32
 800cc06:	443b      	add	r3, r7
 800cc08:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7ff ff12 	bl	800ca38 <check_fs>
 800cc14:	4603      	mov	r3, r0
 800cc16:	e000      	b.n	800cc1a <find_volume+0x9a>
 800cc18:	2303      	movs	r3, #3
 800cc1a:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d108      	bne.n	800cc34 <find_volume+0xb4>
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d905      	bls.n	800cc34 <find_volume+0xb4>
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	61fb      	str	r3, [r7, #28]
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	2b03      	cmp	r3, #3
 800cc32:	d9dd      	bls.n	800cbf0 <find_volume+0x70>
	return fmt;
 800cc34:	69bb      	ldr	r3, [r7, #24]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3720      	adds	r7, #32
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
	...

0800cc40 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b090      	sub	sp, #64	; 0x40
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2200      	movs	r2, #0
 800cc52:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f7ff feaa 	bl	800c9ae <get_ldnumber>
 800cc5a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	da01      	bge.n	800cc66 <mount_volume+0x26>
 800cc62:	230b      	movs	r3, #11
 800cc64:	e1dc      	b.n	800d020 <mount_volume+0x3e0>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800cc66:	4a9d      	ldr	r2, [pc, #628]	; (800cedc <mount_volume+0x29c>)
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc6e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800cc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d101      	bne.n	800cc7a <mount_volume+0x3a>
 800cc76:	230c      	movs	r3, #12
 800cc78:	e1d2      	b.n	800d020 <mount_volume+0x3e0>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc7e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	f023 0301 	bic.w	r3, r3, #1
 800cc86:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800cc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d01a      	beq.n	800ccc6 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 800cc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc92:	785b      	ldrb	r3, [r3, #1]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fe fdc1 	bl	800b81c <disk_status>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cca4:	f003 0301 	and.w	r3, r3, #1
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10c      	bne.n	800ccc6 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ccac:	79fb      	ldrb	r3, [r7, #7]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d007      	beq.n	800ccc2 <mount_volume+0x82>
 800ccb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb6:	f003 0304 	and.w	r3, r3, #4
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ccbe:	230a      	movs	r3, #10
 800ccc0:	e1ae      	b.n	800d020 <mount_volume+0x3e0>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	e1ac      	b.n	800d020 <mount_volume+0x3e0>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800ccc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc8:	2200      	movs	r2, #0
 800ccca:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	785b      	ldrb	r3, [r3, #1]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7fe fdbd 	bl	800b850 <disk_initialize>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ccdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cce0:	f003 0301 	and.w	r3, r3, #1
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d001      	beq.n	800ccec <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cce8:	2303      	movs	r3, #3
 800ccea:	e199      	b.n	800d020 <mount_volume+0x3e0>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d007      	beq.n	800cd02 <mount_volume+0xc2>
 800ccf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccf6:	f003 0304 	and.w	r3, r3, #4
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800ccfe:	230a      	movs	r3, #10
 800cd00:	e18e      	b.n	800d020 <mount_volume+0x3e0>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800cd02:	2100      	movs	r1, #0
 800cd04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd06:	f7ff ff3b 	bl	800cb80 <find_volume>
 800cd0a:	6338      	str	r0, [r7, #48]	; 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800cd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0e:	2b04      	cmp	r3, #4
 800cd10:	d101      	bne.n	800cd16 <mount_volume+0xd6>
 800cd12:	2301      	movs	r3, #1
 800cd14:	e184      	b.n	800d020 <mount_volume+0x3e0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d901      	bls.n	800cd20 <mount_volume+0xe0>
 800cd1c:	230d      	movs	r3, #13
 800cd1e:	e17f      	b.n	800d020 <mount_volume+0x3e0>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd24:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd28:	3330      	adds	r3, #48	; 0x30
 800cd2a:	330b      	adds	r3, #11
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fe fe13 	bl	800b958 <ld_word>
 800cd32:	4603      	mov	r3, r0
 800cd34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd38:	d001      	beq.n	800cd3e <mount_volume+0xfe>
 800cd3a:	230d      	movs	r3, #13
 800cd3c:	e170      	b.n	800d020 <mount_volume+0x3e0>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd40:	3330      	adds	r3, #48	; 0x30
 800cd42:	3316      	adds	r3, #22
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fe fe07 	bl	800b958 <ld_word>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	63bb      	str	r3, [r7, #56]	; 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d106      	bne.n	800cd62 <mount_volume+0x122>
 800cd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd56:	3330      	adds	r3, #48	; 0x30
 800cd58:	3324      	adds	r3, #36	; 0x24
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fe fe14 	bl	800b988 <ld_dword>
 800cd60:	63b8      	str	r0, [r7, #56]	; 0x38
		fs->fsize = fasize;
 800cd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd66:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800cd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd70:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd74:	78db      	ldrb	r3, [r3, #3]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d005      	beq.n	800cd86 <mount_volume+0x146>
 800cd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7c:	78db      	ldrb	r3, [r3, #3]
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d001      	beq.n	800cd86 <mount_volume+0x146>
 800cd82:	230d      	movs	r3, #13
 800cd84:	e14c      	b.n	800d020 <mount_volume+0x3e0>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd88:	78db      	ldrb	r3, [r3, #3]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8e:	fb02 f303 	mul.w	r3, r2, r3
 800cd92:	63bb      	str	r3, [r7, #56]	; 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	895b      	ldrh	r3, [r3, #10]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d008      	beq.n	800cdba <mount_volume+0x17a>
 800cda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdaa:	895b      	ldrh	r3, [r3, #10]
 800cdac:	461a      	mov	r2, r3
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	895b      	ldrh	r3, [r3, #10]
 800cdb2:	3b01      	subs	r3, #1
 800cdb4:	4013      	ands	r3, r2
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d001      	beq.n	800cdbe <mount_volume+0x17e>
 800cdba:	230d      	movs	r3, #13
 800cdbc:	e130      	b.n	800d020 <mount_volume+0x3e0>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc0:	3330      	adds	r3, #48	; 0x30
 800cdc2:	3311      	adds	r3, #17
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7fe fdc7 	bl	800b958 <ld_word>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	461a      	mov	r2, r3
 800cdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd0:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd4:	891b      	ldrh	r3, [r3, #8]
 800cdd6:	f003 030f 	and.w	r3, r3, #15
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d001      	beq.n	800cde4 <mount_volume+0x1a4>
 800cde0:	230d      	movs	r3, #13
 800cde2:	e11d      	b.n	800d020 <mount_volume+0x3e0>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde6:	3330      	adds	r3, #48	; 0x30
 800cde8:	3313      	adds	r3, #19
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe fdb4 	bl	800b958 <ld_word>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cdf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <mount_volume+0x1c8>
 800cdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfc:	3330      	adds	r3, #48	; 0x30
 800cdfe:	3320      	adds	r3, #32
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fe fdc1 	bl	800b988 <ld_dword>
 800ce06:	63f8      	str	r0, [r7, #60]	; 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ce08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0a:	3330      	adds	r3, #48	; 0x30
 800ce0c:	330e      	adds	r3, #14
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fe fda2 	bl	800b958 <ld_word>
 800ce14:	4603      	mov	r3, r0
 800ce16:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ce18:	8bfb      	ldrh	r3, [r7, #30]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d101      	bne.n	800ce22 <mount_volume+0x1e2>
 800ce1e:	230d      	movs	r3, #13
 800ce20:	e0fe      	b.n	800d020 <mount_volume+0x3e0>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ce22:	8bfa      	ldrh	r2, [r7, #30]
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	4413      	add	r3, r2
 800ce28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce2a:	8912      	ldrh	r2, [r2, #8]
 800ce2c:	0912      	lsrs	r2, r2, #4
 800ce2e:	b292      	uxth	r2, r2
 800ce30:	4413      	add	r3, r2
 800ce32:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ce34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d201      	bcs.n	800ce40 <mount_volume+0x200>
 800ce3c:	230d      	movs	r3, #13
 800ce3e:	e0ef      	b.n	800d020 <mount_volume+0x3e0>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce48:	8952      	ldrh	r2, [r2, #10]
 800ce4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce4e:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d101      	bne.n	800ce5a <mount_volume+0x21a>
 800ce56:	230d      	movs	r3, #13
 800ce58:	e0e2      	b.n	800d020 <mount_volume+0x3e0>
		fmt = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	4a1f      	ldr	r2, [pc, #124]	; (800cee0 <mount_volume+0x2a0>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d801      	bhi.n	800ce6a <mount_volume+0x22a>
 800ce66:	2303      	movs	r3, #3
 800ce68:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d801      	bhi.n	800ce78 <mount_volume+0x238>
 800ce74:	2302      	movs	r3, #2
 800ce76:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d801      	bhi.n	800ce86 <mount_volume+0x246>
 800ce82:	2301      	movs	r3, #1
 800ce84:	633b      	str	r3, [r7, #48]	; 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800ce86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d101      	bne.n	800ce90 <mount_volume+0x250>
 800ce8c:	230d      	movs	r3, #13
 800ce8e:	e0c7      	b.n	800d020 <mount_volume+0x3e0>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	1c9a      	adds	r2, r3, #2
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	6a3a      	ldr	r2, [r7, #32]
 800ce9c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ce9e:	8bfa      	ldrh	r2, [r7, #30]
 800cea0:	6a3b      	ldr	r3, [r7, #32]
 800cea2:	441a      	add	r2, r3
 800cea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cea8:	6a3a      	ldr	r2, [r7, #32]
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	441a      	add	r2, r3
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	2b03      	cmp	r3, #3
 800ceb6:	d123      	bne.n	800cf00 <mount_volume+0x2c0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ceb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceba:	3330      	adds	r3, #48	; 0x30
 800cebc:	332a      	adds	r3, #42	; 0x2a
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fe fd4a 	bl	800b958 <ld_word>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <mount_volume+0x28e>
 800ceca:	230d      	movs	r3, #13
 800cecc:	e0a8      	b.n	800d020 <mount_volume+0x3e0>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced0:	891b      	ldrh	r3, [r3, #8]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d006      	beq.n	800cee4 <mount_volume+0x2a4>
 800ced6:	230d      	movs	r3, #13
 800ced8:	e0a2      	b.n	800d020 <mount_volume+0x3e0>
 800ceda:	bf00      	nop
 800cedc:	240013b4 	.word	0x240013b4
 800cee0:	0ffffff5 	.word	0x0ffffff5
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee6:	3330      	adds	r3, #48	; 0x30
 800cee8:	332c      	adds	r3, #44	; 0x2c
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fe fd4c 	bl	800b988 <ld_dword>
 800cef0:	4602      	mov	r2, r0
 800cef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef8:	695b      	ldr	r3, [r3, #20]
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	637b      	str	r3, [r7, #52]	; 0x34
 800cefe:	e01e      	b.n	800cf3e <mount_volume+0x2fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800cf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf02:	891b      	ldrh	r3, [r3, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d101      	bne.n	800cf0c <mount_volume+0x2cc>
 800cf08:	230d      	movs	r3, #13
 800cf0a:	e089      	b.n	800d020 <mount_volume+0x3e0>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0e:	6a1a      	ldr	r2, [r3, #32]
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	441a      	add	r2, r3
 800cf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf16:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1a:	2b02      	cmp	r3, #2
 800cf1c:	d103      	bne.n	800cf26 <mount_volume+0x2e6>
 800cf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf20:	695b      	ldr	r3, [r3, #20]
 800cf22:	005b      	lsls	r3, r3, #1
 800cf24:	e00a      	b.n	800cf3c <mount_volume+0x2fc>
 800cf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf28:	695a      	ldr	r2, [r3, #20]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	005b      	lsls	r3, r3, #1
 800cf2e:	4413      	add	r3, r2
 800cf30:	085a      	lsrs	r2, r3, #1
 800cf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf34:	695b      	ldr	r3, [r3, #20]
 800cf36:	f003 0301 	and.w	r3, r3, #1
 800cf3a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cf3c:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf40:	699a      	ldr	r2, [r3, #24]
 800cf42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf44:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cf48:	0a5b      	lsrs	r3, r3, #9
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d201      	bcs.n	800cf52 <mount_volume+0x312>
 800cf4e:	230d      	movs	r3, #13
 800cf50:	e066      	b.n	800d020 <mount_volume+0x3e0>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf58:	611a      	str	r2, [r3, #16]
 800cf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5c:	691a      	ldr	r2, [r3, #16]
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf64:	2280      	movs	r2, #128	; 0x80
 800cf66:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	2b03      	cmp	r3, #3
 800cf6c:	d149      	bne.n	800d002 <mount_volume+0x3c2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf70:	3330      	adds	r3, #48	; 0x30
 800cf72:	3330      	adds	r3, #48	; 0x30
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7fe fcef 	bl	800b958 <ld_word>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d140      	bne.n	800d002 <mount_volume+0x3c2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cf80:	6a3b      	ldr	r3, [r7, #32]
 800cf82:	3301      	adds	r3, #1
 800cf84:	4619      	mov	r1, r3
 800cf86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf88:	f7fe fdee 	bl	800bb68 <move_window>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d137      	bne.n	800d002 <mount_volume+0x3c2>
		{
			fs->fsi_flag = 0;
 800cf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf94:	2200      	movs	r2, #0
 800cf96:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9a:	3330      	adds	r3, #48	; 0x30
 800cf9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fe fcd9 	bl	800b958 <ld_word>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d127      	bne.n	800d002 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb4:	3330      	adds	r3, #48	; 0x30
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fe fce6 	bl	800b988 <ld_dword>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	4a1a      	ldr	r2, [pc, #104]	; (800d028 <mount_volume+0x3e8>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d11e      	bne.n	800d002 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	3330      	adds	r3, #48	; 0x30
 800cfc8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7fe fcdb 	bl	800b988 <ld_dword>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	4a15      	ldr	r2, [pc, #84]	; (800d02c <mount_volume+0x3ec>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d113      	bne.n	800d002 <mount_volume+0x3c2>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfdc:	3330      	adds	r3, #48	; 0x30
 800cfde:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fe fcd0 	bl	800b988 <ld_dword>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfec:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff0:	3330      	adds	r3, #48	; 0x30
 800cff2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fe fcc6 	bl	800b988 <ld_dword>
 800cffc:	4602      	mov	r2, r0
 800cffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d000:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	b2da      	uxtb	r2, r3
 800d006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d008:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800d00a:	4b09      	ldr	r3, [pc, #36]	; (800d030 <mount_volume+0x3f0>)
 800d00c:	881b      	ldrh	r3, [r3, #0]
 800d00e:	3301      	adds	r3, #1
 800d010:	b29a      	uxth	r2, r3
 800d012:	4b07      	ldr	r3, [pc, #28]	; (800d030 <mount_volume+0x3f0>)
 800d014:	801a      	strh	r2, [r3, #0]
 800d016:	4b06      	ldr	r3, [pc, #24]	; (800d030 <mount_volume+0x3f0>)
 800d018:	881a      	ldrh	r2, [r3, #0]
 800d01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01c:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 800d01e:	2300      	movs	r3, #0
}
 800d020:	4618      	mov	r0, r3
 800d022:	3740      	adds	r7, #64	; 0x40
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	41615252 	.word	0x41615252
 800d02c:	61417272 	.word	0x61417272
 800d030:	240013b8 	.word	0x240013b8

0800d034 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d03e:	2309      	movs	r3, #9
 800d040:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d01c      	beq.n	800d082 <validate+0x4e>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d018      	beq.n	800d082 <validate+0x4e>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d013      	beq.n	800d082 <validate+0x4e>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	889a      	ldrh	r2, [r3, #4]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	88db      	ldrh	r3, [r3, #6]
 800d064:	429a      	cmp	r2, r3
 800d066:	d10c      	bne.n	800d082 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	785b      	ldrb	r3, [r3, #1]
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fe fbd4 	bl	800b81c <disk_status>
 800d074:	4603      	mov	r3, r0
 800d076:	f003 0301 	and.w	r3, r3, #1
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d101      	bne.n	800d082 <validate+0x4e>
			res = FR_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800d082:	7bfb      	ldrb	r3, [r7, #15]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d102      	bne.n	800d08e <validate+0x5a>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	e000      	b.n	800d090 <validate+0x5c>
 800d08e:	2300      	movs	r3, #0
 800d090:	683a      	ldr	r2, [r7, #0]
 800d092:	6013      	str	r3, [r2, #0]
	return res;
 800d094:	7bfb      	ldrb	r3, [r7, #15]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
	...

0800d0a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b088      	sub	sp, #32
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800d0b2:	f107 0310 	add.w	r3, r7, #16
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7ff fc79 	bl	800c9ae <get_ldnumber>
 800d0bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	da01      	bge.n	800d0c8 <f_mount+0x28>
 800d0c4:	230b      	movs	r3, #11
 800d0c6:	e02e      	b.n	800d126 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800d0c8:	4a19      	ldr	r2, [pc, #100]	; (800d130 <f_mount+0x90>)
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d007      	beq.n	800d0e8 <f_mount+0x48>
		FatFs[vol] = 0;
 800d0d8:	4a15      	ldr	r2, [pc, #84]	; (800d130 <f_mount+0x90>)
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	2100      	movs	r1, #0
 800d0de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00b      	beq.n	800d106 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	69fa      	ldr	r2, [r7, #28]
 800d0f2:	b2d2      	uxtb	r2, r2
 800d0f4:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	490c      	ldr	r1, [pc, #48]	; (800d130 <f_mount+0x90>)
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800d106:	79fb      	ldrb	r3, [r7, #7]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d101      	bne.n	800d110 <f_mount+0x70>
 800d10c:	2300      	movs	r3, #0
 800d10e:	e00a      	b.n	800d126 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d110:	f107 010c 	add.w	r1, r7, #12
 800d114:	f107 0308 	add.w	r3, r7, #8
 800d118:	2200      	movs	r2, #0
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7ff fd90 	bl	800cc40 <mount_volume>
 800d120:	4603      	mov	r3, r0
 800d122:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d124:	7dfb      	ldrb	r3, [r7, #23]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3720      	adds	r7, #32
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	240013b4 	.word	0x240013b4

0800d134 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b098      	sub	sp, #96	; 0x60
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	4613      	mov	r3, r2
 800d140:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d101      	bne.n	800d14c <f_open+0x18>
 800d148:	2309      	movs	r3, #9
 800d14a:	e177      	b.n	800d43c <f_open+0x308>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800d14c:	79fb      	ldrb	r3, [r7, #7]
 800d14e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d152:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 800d154:	79fa      	ldrb	r2, [r7, #7]
 800d156:	f107 0114 	add.w	r1, r7, #20
 800d15a:	f107 0308 	add.w	r3, r7, #8
 800d15e:	4618      	mov	r0, r3
 800d160:	f7ff fd6e 	bl	800cc40 <mount_volume>
 800d164:	4603      	mov	r3, r0
 800d166:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d16a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f040 815b 	bne.w	800d42a <f_open+0x2f6>
		dj.obj.fs = fs;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d178:	68ba      	ldr	r2, [r7, #8]
 800d17a:	f107 0318 	add.w	r3, r7, #24
 800d17e:	4611      	mov	r1, r2
 800d180:	4618      	mov	r0, r3
 800d182:	f7ff fba5 	bl	800c8d0 <follow_path>
 800d186:	4603      	mov	r3, r0
 800d188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800d18c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d190:	2b00      	cmp	r3, #0
 800d192:	d107      	bne.n	800d1a4 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d194:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d198:	b25b      	sxtb	r3, r3
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	da02      	bge.n	800d1a4 <f_open+0x70>
				res = FR_INVALID_NAME;
 800d19e:	2306      	movs	r3, #6
 800d1a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	f003 031c 	and.w	r3, r3, #28
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d078      	beq.n	800d2a0 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 800d1ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d010      	beq.n	800d1d8 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d1b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1ba:	2b04      	cmp	r3, #4
 800d1bc:	d107      	bne.n	800d1ce <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800d1be:	f107 0318 	add.w	r3, r7, #24
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7ff fa89 	bl	800c6da <dir_register>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d1ce:	79fb      	ldrb	r3, [r7, #7]
 800d1d0:	f043 0308 	orr.w	r3, r3, #8
 800d1d4:	71fb      	strb	r3, [r7, #7]
 800d1d6:	e010      	b.n	800d1fa <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d1d8:	7fbb      	ldrb	r3, [r7, #30]
 800d1da:	f003 0311 	and.w	r3, r3, #17
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d003      	beq.n	800d1ea <f_open+0xb6>
					res = FR_DENIED;
 800d1e2:	2307      	movs	r3, #7
 800d1e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d1e8:	e007      	b.n	800d1fa <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
 800d1ec:	f003 0304 	and.w	r3, r3, #4
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d002      	beq.n	800d1fa <f_open+0xc6>
 800d1f4:	2308      	movs	r3, #8
 800d1f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800d1fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d168      	bne.n	800d2d4 <f_open+0x1a0>
 800d202:	79fb      	ldrb	r3, [r7, #7]
 800d204:	f003 0308 	and.w	r3, r3, #8
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d063      	beq.n	800d2d4 <f_open+0x1a0>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800d20c:	f7fd fa2b 	bl	800a666 <get_fattime>
 800d210:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 800d212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d214:	330e      	adds	r3, #14
 800d216:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d218:	4618      	mov	r0, r3
 800d21a:	f7fe fbf3 	bl	800ba04 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800d21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d220:	3316      	adds	r3, #22
 800d222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d224:	4618      	mov	r0, r3
 800d226:	f7fe fbed 	bl	800ba04 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d22e:	4611      	mov	r1, r2
 800d230:	4618      	mov	r0, r3
 800d232:	f7ff f9be 	bl	800c5b2 <ld_clust>
 800d236:	64f8      	str	r0, [r7, #76]	; 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d23a:	330b      	adds	r3, #11
 800d23c:	2220      	movs	r2, #32
 800d23e:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d244:	2200      	movs	r2, #0
 800d246:	4618      	mov	r0, r3
 800d248:	f7ff f9d2 	bl	800c5f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d24e:	331c      	adds	r3, #28
 800d250:	2100      	movs	r1, #0
 800d252:	4618      	mov	r0, r3
 800d254:	f7fe fbd6 	bl	800ba04 <st_dword>
					fs->wflag = 1;
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	2201      	movs	r2, #1
 800d25c:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800d25e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d260:	2b00      	cmp	r3, #0
 800d262:	d037      	beq.n	800d2d4 <f_open+0x1a0>
						sc = fs->winsect;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d268:	64bb      	str	r3, [r7, #72]	; 0x48
						res = remove_chain(&dj.obj, cl, 0);
 800d26a:	f107 0318 	add.w	r3, r7, #24
 800d26e:	2200      	movs	r2, #0
 800d270:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d272:	4618      	mov	r0, r3
 800d274:	f7fe fec7 	bl	800c006 <remove_chain>
 800d278:	4603      	mov	r3, r0
 800d27a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d27e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d282:	2b00      	cmp	r3, #0
 800d284:	d126      	bne.n	800d2d4 <f_open+0x1a0>
							res = move_window(fs, sc);
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fe fc6c 	bl	800bb68 <move_window>
 800d290:	4603      	mov	r3, r0
 800d292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d29a:	3a01      	subs	r2, #1
 800d29c:	60da      	str	r2, [r3, #12]
 800d29e:	e019      	b.n	800d2d4 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800d2a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d115      	bne.n	800d2d4 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800d2a8:	7fbb      	ldrb	r3, [r7, #30]
 800d2aa:	f003 0310 	and.w	r3, r3, #16
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d003      	beq.n	800d2ba <f_open+0x186>
					res = FR_NO_FILE;
 800d2b2:	2304      	movs	r3, #4
 800d2b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d2b8:	e00c      	b.n	800d2d4 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800d2ba:	79fb      	ldrb	r3, [r7, #7]
 800d2bc:	f003 0302 	and.w	r3, r3, #2
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d007      	beq.n	800d2d4 <f_open+0x1a0>
 800d2c4:	7fbb      	ldrb	r3, [r7, #30]
 800d2c6:	f003 0301 	and.w	r3, r3, #1
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <f_open+0x1a0>
						res = FR_DENIED;
 800d2ce:	2307      	movs	r3, #7
 800d2d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d2d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d10f      	bne.n	800d2fc <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800d2dc:	79fb      	ldrb	r3, [r7, #7]
 800d2de:	f003 0308 	and.w	r3, r3, #8
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d003      	beq.n	800d2ee <f_open+0x1ba>
 800d2e6:	79fb      	ldrb	r3, [r7, #7]
 800d2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 800d2f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d2fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d300:	2b00      	cmp	r3, #0
 800d302:	f040 8092 	bne.w	800d42a <f_open+0x2f6>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d30a:	4611      	mov	r1, r2
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7ff f950 	bl	800c5b2 <ld_clust>
 800d312:	4602      	mov	r2, r0
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31a:	331c      	adds	r3, #28
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7fe fb33 	bl	800b988 <ld_dword>
 800d322:	4602      	mov	r2, r0
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 800d328:	697a      	ldr	r2, [r7, #20]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	88da      	ldrh	r2, [r3, #6]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	79fa      	ldrb	r2, [r7, #7]
 800d33a:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2200      	movs	r2, #0
 800d346:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2200      	movs	r2, #0
 800d34c:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3328      	adds	r3, #40	; 0x28
 800d352:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d356:	2100      	movs	r1, #0
 800d358:	4618      	mov	r0, r3
 800d35a:	f011 ff79 	bl	801f250 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d35e:	79fb      	ldrb	r3, [r7, #7]
 800d360:	f003 0320 	and.w	r3, r3, #32
 800d364:	2b00      	cmp	r3, #0
 800d366:	d060      	beq.n	800d42a <f_open+0x2f6>
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d05c      	beq.n	800d42a <f_open+0x2f6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	68da      	ldr	r2, [r3, #12]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	895b      	ldrh	r3, [r3, #10]
 800d37c:	025b      	lsls	r3, r3, #9
 800d37e:	647b      	str	r3, [r7, #68]	; 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	657b      	str	r3, [r7, #84]	; 0x54
 800d38c:	e016      	b.n	800d3bc <f_open+0x288>
					clst = get_fat(&fp->obj, clst);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe fca3 	bl	800bcde <get_fat>
 800d398:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d39a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d802      	bhi.n	800d3a6 <f_open+0x272>
 800d3a0:	2302      	movs	r3, #2
 800d3a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d3a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3ac:	d102      	bne.n	800d3b4 <f_open+0x280>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d3b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3b8:	1ad3      	subs	r3, r2, r3
 800d3ba:	657b      	str	r3, [r7, #84]	; 0x54
 800d3bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d103      	bne.n	800d3cc <f_open+0x298>
 800d3c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d8e0      	bhi.n	800d38e <f_open+0x25a>
				}
				fp->clust = clst;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3d0:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d3d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d127      	bne.n	800d42a <f_open+0x2f6>
 800d3da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d022      	beq.n	800d42a <f_open+0x2f6>
					sc = clst2sect(fs, clst);
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fe fc59 	bl	800bca0 <clst2sect>
 800d3ee:	64b8      	str	r0, [r7, #72]	; 0x48
					if (sc == 0) {
 800d3f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d103      	bne.n	800d3fe <f_open+0x2ca>
						res = FR_INT_ERR;
 800d3f6:	2302      	movs	r3, #2
 800d3f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d3fc:	e015      	b.n	800d42a <f_open+0x2f6>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d3fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d400:	0a5a      	lsrs	r2, r3, #9
 800d402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d404:	441a      	add	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	7858      	ldrb	r0, [r3, #1]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	69da      	ldr	r2, [r3, #28]
 800d418:	2301      	movs	r3, #1
 800d41a:	f7fe fa3f 	bl	800b89c <disk_read>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <f_open+0x2f6>
 800d424:	2301      	movs	r3, #1
 800d426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d42a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d002      	beq.n	800d438 <f_open+0x304>
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3760      	adds	r7, #96	; 0x60
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b08e      	sub	sp, #56	; 0x38
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	2200      	movs	r2, #0
 800d45a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f107 0214 	add.w	r2, r7, #20
 800d462:	4611      	mov	r1, r2
 800d464:	4618      	mov	r0, r3
 800d466:	f7ff fde5 	bl	800d034 <validate>
 800d46a:	4603      	mov	r3, r0
 800d46c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d470:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d474:	2b00      	cmp	r3, #0
 800d476:	d107      	bne.n	800d488 <f_read+0x44>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	7c5b      	ldrb	r3, [r3, #17]
 800d47c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d480:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d484:	2b00      	cmp	r3, #0
 800d486:	d002      	beq.n	800d48e <f_read+0x4a>
 800d488:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d48c:	e109      	b.n	800d6a2 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	7c1b      	ldrb	r3, [r3, #16]
 800d492:	f003 0301 	and.w	r3, r3, #1
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <f_read+0x5a>
 800d49a:	2307      	movs	r3, #7
 800d49c:	e101      	b.n	800d6a2 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	68da      	ldr	r2, [r3, #12]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	695b      	ldr	r3, [r3, #20]
 800d4a6:	1ad3      	subs	r3, r2, r3
 800d4a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	6a3b      	ldr	r3, [r7, #32]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	f240 80f2 	bls.w	800d698 <f_read+0x254>
 800d4b4:	6a3b      	ldr	r3, [r7, #32]
 800d4b6:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800d4b8:	e0ee      	b.n	800d698 <f_read+0x254>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	f040 80ba 	bne.w	800d63c <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	695b      	ldr	r3, [r3, #20]
 800d4cc:	0a5b      	lsrs	r3, r3, #9
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	8952      	ldrh	r2, [r2, #10]
 800d4d2:	3a01      	subs	r2, #1
 800d4d4:	4013      	ands	r3, r2
 800d4d6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d123      	bne.n	800d526 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	695b      	ldr	r3, [r3, #20]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d103      	bne.n	800d4ee <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	633b      	str	r3, [r7, #48]	; 0x30
 800d4ec:	e007      	b.n	800d4fe <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	699b      	ldr	r3, [r3, #24]
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	f7fe fbf1 	bl	800bcde <get_fat>
 800d4fc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d500:	2b01      	cmp	r3, #1
 800d502:	d804      	bhi.n	800d50e <f_read+0xca>
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2202      	movs	r2, #2
 800d508:	745a      	strb	r2, [r3, #17]
 800d50a:	2302      	movs	r3, #2
 800d50c:	e0c9      	b.n	800d6a2 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d514:	d104      	bne.n	800d520 <f_read+0xdc>
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2201      	movs	r2, #1
 800d51a:	745a      	strb	r2, [r3, #17]
 800d51c:	2301      	movs	r3, #1
 800d51e:	e0c0      	b.n	800d6a2 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d524:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800d526:	697a      	ldr	r2, [r7, #20]
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	4619      	mov	r1, r3
 800d52e:	4610      	mov	r0, r2
 800d530:	f7fe fbb6 	bl	800bca0 <clst2sect>
 800d534:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d104      	bne.n	800d546 <f_read+0x102>
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2202      	movs	r2, #2
 800d540:	745a      	strb	r2, [r3, #17]
 800d542:	2302      	movs	r3, #2
 800d544:	e0ad      	b.n	800d6a2 <f_read+0x25e>
			sect += csect;
 800d546:	69ba      	ldr	r2, [r7, #24]
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	4413      	add	r3, r2
 800d54c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	0a5b      	lsrs	r3, r3, #9
 800d552:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800d554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d556:	2b00      	cmp	r3, #0
 800d558:	d039      	beq.n	800d5ce <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d55a:	69fa      	ldr	r2, [r7, #28]
 800d55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55e:	4413      	add	r3, r2
 800d560:	697a      	ldr	r2, [r7, #20]
 800d562:	8952      	ldrh	r2, [r2, #10]
 800d564:	4293      	cmp	r3, r2
 800d566:	d905      	bls.n	800d574 <f_read+0x130>
					cc = fs->csize - csect;
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	895b      	ldrh	r3, [r3, #10]
 800d56c:	461a      	mov	r2, r3
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	7858      	ldrb	r0, [r3, #1]
 800d578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57a:	69ba      	ldr	r2, [r7, #24]
 800d57c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d57e:	f7fe f98d 	bl	800b89c <disk_read>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d004      	beq.n	800d592 <f_read+0x14e>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2201      	movs	r2, #1
 800d58c:	745a      	strb	r2, [r3, #17]
 800d58e:	2301      	movs	r3, #1
 800d590:	e087      	b.n	800d6a2 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	7c1b      	ldrb	r3, [r3, #16]
 800d596:	b25b      	sxtb	r3, r3
 800d598:	2b00      	cmp	r3, #0
 800d59a:	da14      	bge.n	800d5c6 <f_read+0x182>
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	69da      	ldr	r2, [r3, #28]
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d90d      	bls.n	800d5c6 <f_read+0x182>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	69da      	ldr	r2, [r3, #28]
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	025b      	lsls	r3, r3, #9
 800d5b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5b6:	18d0      	adds	r0, r2, r3
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	3328      	adds	r3, #40	; 0x28
 800d5bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	f011 fe1d 	bl	801f200 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c8:	025b      	lsls	r3, r3, #9
 800d5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d5cc:	e050      	b.n	800d670 <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	69db      	ldr	r3, [r3, #28]
 800d5d2:	69ba      	ldr	r2, [r7, #24]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d02e      	beq.n	800d636 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	7c1b      	ldrb	r3, [r3, #16]
 800d5dc:	b25b      	sxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	da18      	bge.n	800d614 <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	7858      	ldrb	r0, [r3, #1]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	69da      	ldr	r2, [r3, #28]
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f7fe f973 	bl	800b8dc <disk_write>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d004      	beq.n	800d606 <f_read+0x1c2>
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2201      	movs	r2, #1
 800d600:	745a      	strb	r2, [r3, #17]
 800d602:	2301      	movs	r3, #1
 800d604:	e04d      	b.n	800d6a2 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	7c1b      	ldrb	r3, [r3, #16]
 800d60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	7858      	ldrb	r0, [r3, #1]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d61e:	2301      	movs	r3, #1
 800d620:	69ba      	ldr	r2, [r7, #24]
 800d622:	f7fe f93b 	bl	800b89c <disk_read>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d004      	beq.n	800d636 <f_read+0x1f2>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2201      	movs	r2, #1
 800d630:	745a      	strb	r2, [r3, #17]
 800d632:	2301      	movs	r3, #1
 800d634:	e035      	b.n	800d6a2 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	69ba      	ldr	r2, [r7, #24]
 800d63a:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	695b      	ldr	r3, [r3, #20]
 800d640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d644:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d648:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d64a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d901      	bls.n	800d656 <f_read+0x212>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	695b      	ldr	r3, [r3, #20]
 800d660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d664:	4413      	add	r3, r2
 800d666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d668:	4619      	mov	r1, r3
 800d66a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d66c:	f011 fdc8 	bl	801f200 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	607b      	str	r3, [r7, #4]
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	441a      	add	r2, r3
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	601a      	str	r2, [r3, #0]
 800d684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d688:	4413      	add	r3, r2
 800d68a:	627b      	str	r3, [r7, #36]	; 0x24
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	695a      	ldr	r2, [r3, #20]
 800d690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d692:	441a      	add	r2, r3
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	615a      	str	r2, [r3, #20]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f47f af0d 	bne.w	800d4ba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3738      	adds	r7, #56	; 0x38
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b08c      	sub	sp, #48	; 0x30
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	60f8      	str	r0, [r7, #12]
 800d6b2:	60b9      	str	r1, [r7, #8]
 800d6b4:	607a      	str	r2, [r7, #4]
 800d6b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f107 0210 	add.w	r2, r7, #16
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7ff fcb2 	bl	800d034 <validate>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d6d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d107      	bne.n	800d6ee <f_write+0x44>
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	7c5b      	ldrb	r3, [r3, #17]
 800d6e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d6e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d002      	beq.n	800d6f4 <f_write+0x4a>
 800d6ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6f2:	e13f      	b.n	800d974 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	7c1b      	ldrb	r3, [r3, #16]
 800d6f8:	f003 0302 	and.w	r3, r3, #2
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <f_write+0x5a>
 800d700:	2307      	movs	r3, #7
 800d702:	e137      	b.n	800d974 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	695a      	ldr	r2, [r3, #20]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	441a      	add	r2, r3
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	695b      	ldr	r3, [r3, #20]
 800d710:	429a      	cmp	r2, r3
 800d712:	f080 8121 	bcs.w	800d958 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	43db      	mvns	r3, r3
 800d71c:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800d71e:	e11b      	b.n	800d958 <f_write+0x2ae>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f040 80d7 	bne.w	800d8dc <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	0a5b      	lsrs	r3, r3, #9
 800d734:	693a      	ldr	r2, [r7, #16]
 800d736:	8952      	ldrh	r2, [r2, #10]
 800d738:	3a01      	subs	r2, #1
 800d73a:	4013      	ands	r3, r2
 800d73c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d137      	bne.n	800d7b4 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	695b      	ldr	r3, [r3, #20]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10c      	bne.n	800d766 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	2b00      	cmp	r3, #0
 800d756:	d10e      	bne.n	800d776 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2100      	movs	r1, #0
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fe fcb7 	bl	800c0d0 <create_chain>
 800d762:	62b8      	str	r0, [r7, #40]	; 0x28
 800d764:	e007      	b.n	800d776 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	699b      	ldr	r3, [r3, #24]
 800d76c:	4619      	mov	r1, r3
 800d76e:	4610      	mov	r0, r2
 800d770:	f7fe fcae 	bl	800c0d0 <create_chain>
 800d774:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 80f2 	beq.w	800d962 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	2b01      	cmp	r3, #1
 800d782:	d104      	bne.n	800d78e <f_write+0xe4>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2202      	movs	r2, #2
 800d788:	745a      	strb	r2, [r3, #17]
 800d78a:	2302      	movs	r3, #2
 800d78c:	e0f2      	b.n	800d974 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d794:	d104      	bne.n	800d7a0 <f_write+0xf6>
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2201      	movs	r2, #1
 800d79a:	745a      	strb	r2, [r3, #17]
 800d79c:	2301      	movs	r3, #1
 800d79e:	e0e9      	b.n	800d974 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7a4:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d102      	bne.n	800d7b4 <f_write+0x10a>
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7b2:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	7c1b      	ldrb	r3, [r3, #16]
 800d7b8:	b25b      	sxtb	r3, r3
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	da18      	bge.n	800d7f0 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	7858      	ldrb	r0, [r3, #1]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	69da      	ldr	r2, [r3, #28]
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	f7fe f885 	bl	800b8dc <disk_write>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d004      	beq.n	800d7e2 <f_write+0x138>
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	745a      	strb	r2, [r3, #17]
 800d7de:	2301      	movs	r3, #1
 800d7e0:	e0c8      	b.n	800d974 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	7c1b      	ldrb	r3, [r3, #16]
 800d7e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800d7f0:	693a      	ldr	r2, [r7, #16]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	4610      	mov	r0, r2
 800d7fa:	f7fe fa51 	bl	800bca0 <clst2sect>
 800d7fe:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d104      	bne.n	800d810 <f_write+0x166>
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2202      	movs	r2, #2
 800d80a:	745a      	strb	r2, [r3, #17]
 800d80c:	2302      	movs	r3, #2
 800d80e:	e0b1      	b.n	800d974 <f_write+0x2ca>
			sect += csect;
 800d810:	697a      	ldr	r2, [r7, #20]
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	4413      	add	r3, r2
 800d816:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	0a5b      	lsrs	r3, r3, #9
 800d81c:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800d81e:	6a3b      	ldr	r3, [r7, #32]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d03c      	beq.n	800d89e <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d824:	69ba      	ldr	r2, [r7, #24]
 800d826:	6a3b      	ldr	r3, [r7, #32]
 800d828:	4413      	add	r3, r2
 800d82a:	693a      	ldr	r2, [r7, #16]
 800d82c:	8952      	ldrh	r2, [r2, #10]
 800d82e:	4293      	cmp	r3, r2
 800d830:	d905      	bls.n	800d83e <f_write+0x194>
					cc = fs->csize - csect;
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	895b      	ldrh	r3, [r3, #10]
 800d836:	461a      	mov	r2, r3
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	1ad3      	subs	r3, r2, r3
 800d83c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	7858      	ldrb	r0, [r3, #1]
 800d842:	6a3b      	ldr	r3, [r7, #32]
 800d844:	697a      	ldr	r2, [r7, #20]
 800d846:	69f9      	ldr	r1, [r7, #28]
 800d848:	f7fe f848 	bl	800b8dc <disk_write>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d004      	beq.n	800d85c <f_write+0x1b2>
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2201      	movs	r2, #1
 800d856:	745a      	strb	r2, [r3, #17]
 800d858:	2301      	movs	r3, #1
 800d85a:	e08b      	b.n	800d974 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	69da      	ldr	r2, [r3, #28]
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	1ad3      	subs	r3, r2, r3
 800d864:	6a3a      	ldr	r2, [r7, #32]
 800d866:	429a      	cmp	r2, r3
 800d868:	d915      	bls.n	800d896 <f_write+0x1ec>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	69da      	ldr	r2, [r3, #28]
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	025b      	lsls	r3, r3, #9
 800d87a:	69fa      	ldr	r2, [r7, #28]
 800d87c:	4413      	add	r3, r2
 800d87e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d882:	4619      	mov	r1, r3
 800d884:	f011 fcbc 	bl	801f200 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	7c1b      	ldrb	r3, [r3, #16]
 800d88c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d890:	b2da      	uxtb	r2, r3
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d896:	6a3b      	ldr	r3, [r7, #32]
 800d898:	025b      	lsls	r3, r3, #9
 800d89a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d89c:	e03f      	b.n	800d91e <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	69db      	ldr	r3, [r3, #28]
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d016      	beq.n	800d8d6 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	695a      	ldr	r2, [r3, #20]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d210      	bcs.n	800d8d6 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	7858      	ldrb	r0, [r3, #1]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d8be:	2301      	movs	r3, #1
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	f7fd ffeb 	bl	800b89c <disk_read>
 800d8c6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d004      	beq.n	800d8d6 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	745a      	strb	r2, [r3, #17]
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e04e      	b.n	800d974 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	697a      	ldr	r2, [r7, #20]
 800d8da:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	695b      	ldr	r3, [r3, #20]
 800d8e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8e4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d8e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d8ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d901      	bls.n	800d8f6 <f_write+0x24c>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	695b      	ldr	r3, [r3, #20]
 800d900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d904:	4413      	add	r3, r2
 800d906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d908:	69f9      	ldr	r1, [r7, #28]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f011 fc78 	bl	801f200 <memcpy>
		fp->flag |= FA_DIRTY;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	7c1b      	ldrb	r3, [r3, #16]
 800d914:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d922:	1ad3      	subs	r3, r2, r3
 800d924:	607b      	str	r3, [r7, #4]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	441a      	add	r2, r3
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	601a      	str	r2, [r3, #0]
 800d932:	69fa      	ldr	r2, [r7, #28]
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	4413      	add	r3, r2
 800d938:	61fb      	str	r3, [r7, #28]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	695a      	ldr	r2, [r3, #20]
 800d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d940:	441a      	add	r2, r3
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	615a      	str	r2, [r3, #20]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	68da      	ldr	r2, [r3, #12]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	695b      	ldr	r3, [r3, #20]
 800d94e:	429a      	cmp	r2, r3
 800d950:	bf38      	it	cc
 800d952:	461a      	movcc	r2, r3
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	60da      	str	r2, [r3, #12]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	f47f aee0 	bne.w	800d720 <f_write+0x76>
 800d960:	e000      	b.n	800d964 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d962:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	7c1b      	ldrb	r3, [r3, #16]
 800d968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	3730      	adds	r7, #48	; 0x30
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b086      	sub	sp, #24
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f107 0208 	add.w	r2, r7, #8
 800d98a:	4611      	mov	r1, r2
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7ff fb51 	bl	800d034 <validate>
 800d992:	4603      	mov	r3, r0
 800d994:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d996:	7dfb      	ldrb	r3, [r7, #23]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d168      	bne.n	800da6e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	7c1b      	ldrb	r3, [r3, #16]
 800d9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d062      	beq.n	800da6e <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	7c1b      	ldrb	r3, [r3, #16]
 800d9ac:	b25b      	sxtb	r3, r3
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	da15      	bge.n	800d9de <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	7858      	ldrb	r0, [r3, #1]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	69da      	ldr	r2, [r3, #28]
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	f7fd ff8b 	bl	800b8dc <disk_write>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d001      	beq.n	800d9d0 <f_sync+0x54>
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e04f      	b.n	800da70 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	7c1b      	ldrb	r3, [r3, #16]
 800d9d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d9de:	f7fc fe42 	bl	800a666 <get_fattime>
 800d9e2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d9e4:	68ba      	ldr	r2, [r7, #8]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a1b      	ldr	r3, [r3, #32]
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	f7fe f8bb 	bl	800bb68 <move_window>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d9f6:	7dfb      	ldrb	r3, [r7, #23]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d138      	bne.n	800da6e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da00:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	330b      	adds	r3, #11
 800da06:	781a      	ldrb	r2, [r3, #0]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	330b      	adds	r3, #11
 800da0c:	f042 0220 	orr.w	r2, r2, #32
 800da10:	b2d2      	uxtb	r2, r2
 800da12:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6818      	ldr	r0, [r3, #0]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	461a      	mov	r2, r3
 800da1e:	68f9      	ldr	r1, [r7, #12]
 800da20:	f7fe fde6 	bl	800c5f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f103 021c 	add.w	r2, r3, #28
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	4619      	mov	r1, r3
 800da30:	4610      	mov	r0, r2
 800da32:	f7fd ffe7 	bl	800ba04 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	3316      	adds	r3, #22
 800da3a:	6939      	ldr	r1, [r7, #16]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fd ffe1 	bl	800ba04 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	3312      	adds	r3, #18
 800da46:	2100      	movs	r1, #0
 800da48:	4618      	mov	r0, r3
 800da4a:	f7fd ffc0 	bl	800b9ce <st_word>
					fs->wflag = 1;
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	2201      	movs	r2, #1
 800da52:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	4618      	mov	r0, r3
 800da58:	f7fe f8b4 	bl	800bbc4 <sync_fs>
 800da5c:	4603      	mov	r3, r0
 800da5e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	7c1b      	ldrb	r3, [r3, #16]
 800da64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da68:	b2da      	uxtb	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800da6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3718      	adds	r7, #24
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff ff7b 	bl	800d97c <f_sync>
 800da86:	4603      	mov	r3, r0
 800da88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800da8a:	7bfb      	ldrb	r3, [r7, #15]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d10e      	bne.n	800daae <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f107 0208 	add.w	r2, r7, #8
 800da96:	4611      	mov	r1, r2
 800da98:	4618      	mov	r0, r3
 800da9a:	f7ff facb 	bl	800d034 <validate>
 800da9e:	4603      	mov	r3, r0
 800daa0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800daa2:	7bfb      	ldrb	r3, [r7, #15]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d102      	bne.n	800daae <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800daae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b08e      	sub	sp, #56	; 0x38
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60b9      	str	r1, [r7, #8]
 800dac0:	607b      	str	r3, [r7, #4]
 800dac2:	4603      	mov	r3, r0
 800dac4:	73fb      	strb	r3, [r7, #15]
 800dac6:	4613      	mov	r3, r2
 800dac8:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800daca:	f107 0210 	add.w	r2, r7, #16
 800dace:	7bfb      	ldrb	r3, [r7, #15]
 800dad0:	2101      	movs	r1, #1
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fd ff22 	bl	800b91c <disk_ioctl>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d001      	beq.n	800dae2 <create_partition+0x2a>
 800dade:	2301      	movs	r3, #1
 800dae0:	e108      	b.n	800dcf4 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800dae6:	233f      	movs	r3, #63	; 0x3f
 800dae8:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800daea:	2308      	movs	r3, #8
 800daec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800daf0:	e004      	b.n	800dafc <create_partition+0x44>
 800daf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daf6:	005b      	lsls	r3, r3, #1
 800daf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00a      	beq.n	800db1a <create_partition+0x62>
 800db04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db08:	6a3a      	ldr	r2, [r7, #32]
 800db0a:	fbb2 f2f3 	udiv	r2, r2, r3
 800db0e:	7ffb      	ldrb	r3, [r7, #31]
 800db10:	fbb2 f3f3 	udiv	r3, r2, r3
 800db14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db18:	d8eb      	bhi.n	800daf2 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800db1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d102      	bne.n	800db28 <create_partition+0x70>
 800db22:	23ff      	movs	r3, #255	; 0xff
 800db24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800db28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db2c:	2100      	movs	r1, #0
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f011 fb8e 	bl	801f250 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800db3a:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800db3c:	2300      	movs	r3, #0
 800db3e:	637b      	str	r3, [r7, #52]	; 0x34
 800db40:	7ffb      	ldrb	r3, [r7, #31]
 800db42:	633b      	str	r3, [r7, #48]	; 0x30
 800db44:	e0b5      	b.n	800dcb2 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800db46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	4413      	add	r3, r2
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db54:	2b64      	cmp	r3, #100	; 0x64
 800db56:	d80d      	bhi.n	800db74 <create_partition+0xbc>
 800db58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5a:	2b64      	cmp	r3, #100	; 0x64
 800db5c:	d008      	beq.n	800db70 <create_partition+0xb8>
 800db5e:	6a3b      	ldr	r3, [r7, #32]
 800db60:	4a66      	ldr	r2, [pc, #408]	; (800dcfc <create_partition+0x244>)
 800db62:	fba2 2303 	umull	r2, r3, r2, r3
 800db66:	095b      	lsrs	r3, r3, #5
 800db68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db6a:	fb02 f303 	mul.w	r3, r2, r3
 800db6e:	e000      	b.n	800db72 <create_partition+0xba>
 800db70:	6a3b      	ldr	r3, [r7, #32]
 800db72:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800db74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db78:	4413      	add	r3, r2
 800db7a:	6a3a      	ldr	r2, [r7, #32]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d305      	bcc.n	800db8c <create_partition+0xd4>
 800db80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db84:	4413      	add	r3, r2
 800db86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db88:	429a      	cmp	r2, r3
 800db8a:	d903      	bls.n	800db94 <create_partition+0xdc>
 800db8c:	6a3a      	ldr	r2, [r7, #32]
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	2b00      	cmp	r3, #0
 800db98:	f000 8097 	beq.w	800dcca <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800db9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9e:	3308      	adds	r3, #8
 800dba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fd ff2e 	bl	800ba04 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	330c      	adds	r3, #12
 800dbac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fd ff28 	bl	800ba04 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800dbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	7bba      	ldrb	r2, [r7, #14]
 800dbba:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800dbbc:	7ffb      	ldrb	r3, [r7, #31]
 800dbbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbc0:	fbb2 f2f3 	udiv	r2, r2, r3
 800dbc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbcc:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800dbce:	7ffb      	ldrb	r3, [r7, #31]
 800dbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbd6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dbda:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbde:	fb01 f202 	mul.w	r2, r1, r2
 800dbe2:	1a9b      	subs	r3, r3, r2
 800dbe4:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800dbe6:	7ffa      	ldrb	r2, [r7, #31]
 800dbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbea:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbee:	fb01 f202 	mul.w	r2, r1, r2
 800dbf2:	1a9b      	subs	r3, r3, r2
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800dbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	7dfa      	ldrb	r2, [r7, #23]
 800dc00:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	089b      	lsrs	r3, r3, #2
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dc0c:	b2d9      	uxtb	r1, r3
 800dc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc10:	3302      	adds	r3, #2
 800dc12:	7dba      	ldrb	r2, [r7, #22]
 800dc14:	430a      	orrs	r2, r1
 800dc16:	b2d2      	uxtb	r2, r2
 800dc18:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800dc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1c:	3303      	adds	r3, #3
 800dc1e:	69ba      	ldr	r2, [r7, #24]
 800dc20:	b2d2      	uxtb	r2, r2
 800dc22:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800dc24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc28:	4413      	add	r3, r2
 800dc2a:	1e5a      	subs	r2, r3, #1
 800dc2c:	7ffb      	ldrb	r3, [r7, #31]
 800dc2e:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc36:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc3a:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800dc3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc40:	4413      	add	r3, r2
 800dc42:	1e5a      	subs	r2, r3, #1
 800dc44:	7ffb      	ldrb	r3, [r7, #31]
 800dc46:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dc4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc52:	fb01 f202 	mul.w	r2, r1, r2
 800dc56:	1a9b      	subs	r3, r3, r2
 800dc58:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800dc5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5e:	4413      	add	r3, r2
 800dc60:	3b01      	subs	r3, #1
 800dc62:	7ffa      	ldrb	r2, [r7, #31]
 800dc64:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc68:	fb01 f202 	mul.w	r2, r1, r2
 800dc6c:	1a9b      	subs	r3, r3, r2
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	3301      	adds	r3, #1
 800dc72:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc76:	3305      	adds	r3, #5
 800dc78:	7dfa      	ldrb	r2, [r7, #23]
 800dc7a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	089b      	lsrs	r3, r3, #2
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dc86:	b2d9      	uxtb	r1, r3
 800dc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8a:	3306      	adds	r3, #6
 800dc8c:	7dba      	ldrb	r2, [r7, #22]
 800dc8e:	430a      	orrs	r2, r1
 800dc90:	b2d2      	uxtb	r2, r2
 800dc92:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	3307      	adds	r3, #7
 800dc98:	69ba      	ldr	r2, [r7, #24]
 800dc9a:	b2d2      	uxtb	r2, r2
 800dc9c:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800dc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca0:	3310      	adds	r3, #16
 800dca2:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800dca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca6:	3301      	adds	r3, #1
 800dca8:	637b      	str	r3, [r7, #52]	; 0x34
 800dcaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcae:	4413      	add	r3, r2
 800dcb0:	633b      	str	r3, [r7, #48]	; 0x30
 800dcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb4:	2b03      	cmp	r3, #3
 800dcb6:	d809      	bhi.n	800dccc <create_partition+0x214>
 800dcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d006      	beq.n	800dccc <create_partition+0x214>
 800dcbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcc0:	6a3b      	ldr	r3, [r7, #32]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	f4ff af3f 	bcc.w	800db46 <create_partition+0x8e>
 800dcc8:	e000      	b.n	800dccc <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800dcca:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dcd2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fd fe79 	bl	800b9ce <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800dcdc:	7bf8      	ldrb	r0, [r7, #15]
 800dcde:	2301      	movs	r3, #1
 800dce0:	2200      	movs	r2, #0
 800dce2:	6879      	ldr	r1, [r7, #4]
 800dce4:	f7fd fdfa 	bl	800b8dc <disk_write>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d001      	beq.n	800dcf2 <create_partition+0x23a>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e000      	b.n	800dcf4 <create_partition+0x23c>
	}

	return FR_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3738      	adds	r7, #56	; 0x38
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	51eb851f 	.word	0x51eb851f

0800dd00 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b0a0      	sub	sp, #128	; 0x80
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
 800dd0c:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800dd0e:	f107 030c 	add.w	r3, r7, #12
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7fe fe4b 	bl	800c9ae <get_ldnumber>
 800dd18:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	da02      	bge.n	800dd26 <f_mkfs+0x26>
 800dd20:	230b      	movs	r3, #11
 800dd22:	f000 bc1b 	b.w	800e55c <f_mkfs+0x85c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800dd26:	4aa2      	ldr	r2, [pc, #648]	; (800dfb0 <f_mkfs+0x2b0>)
 800dd28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d005      	beq.n	800dd3e <f_mkfs+0x3e>
 800dd32:	4a9f      	ldr	r2, [pc, #636]	; (800dfb0 <f_mkfs+0x2b0>)
 800dd34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800dd3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd40:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800dd44:	2300      	movs	r3, #0
 800dd46:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800dd4a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fd fd7e 	bl	800b850 <disk_initialize>
 800dd54:	4603      	mov	r3, r0
 800dd56:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800dd5a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800dd5e:	f003 0301 	and.w	r3, r3, #1
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <f_mkfs+0x6a>
 800dd66:	2303      	movs	r3, #3
 800dd68:	e3f8      	b.n	800e55c <f_mkfs+0x85c>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800dd6a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800dd6e:	f003 0304 	and.w	r3, r3, #4
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d001      	beq.n	800dd7a <f_mkfs+0x7a>
 800dd76:	230a      	movs	r3, #10
 800dd78:	e3f0      	b.n	800e55c <f_mkfs+0x85c>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d101      	bne.n	800dd84 <f_mkfs+0x84>
 800dd80:	4b8c      	ldr	r3, [pc, #560]	; (800dfb4 <f_mkfs+0x2b4>)
 800dd82:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	623b      	str	r3, [r7, #32]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800dd8a:	6a3b      	ldr	r3, [r7, #32]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d107      	bne.n	800dda0 <f_mkfs+0xa0>
 800dd90:	f107 0220 	add.w	r2, r7, #32
 800dd94:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800dd98:	2103      	movs	r1, #3
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7fd fdbe 	bl	800b91c <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800dda0:	6a3b      	ldr	r3, [r7, #32]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d009      	beq.n	800ddba <f_mkfs+0xba>
 800dda6:	6a3b      	ldr	r3, [r7, #32]
 800dda8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddac:	d805      	bhi.n	800ddba <f_mkfs+0xba>
 800ddae:	6a3b      	ldr	r3, [r7, #32]
 800ddb0:	1e5a      	subs	r2, r3, #1
 800ddb2:	6a3b      	ldr	r3, [r7, #32]
 800ddb4:	4013      	ands	r3, r2
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d001      	beq.n	800ddbe <f_mkfs+0xbe>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	623b      	str	r3, [r7, #32]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
 800ddbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	f003 030f 	and.w	r3, r3, #15
 800ddce:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	785b      	ldrb	r3, [r3, #1]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d006      	beq.n	800dde8 <f_mkfs+0xe8>
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	785b      	ldrb	r3, [r3, #1]
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	d802      	bhi.n	800dde8 <f_mkfs+0xe8>
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	785b      	ldrb	r3, [r3, #1]
 800dde6:	e000      	b.n	800ddea <f_mkfs+0xea>
 800dde8:	2301      	movs	r3, #1
 800ddea:	643b      	str	r3, [r7, #64]	; 0x40
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	689b      	ldr	r3, [r3, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d014      	beq.n	800de1e <f_mkfs+0x11e>
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddfc:	d80f      	bhi.n	800de1e <f_mkfs+0x11e>
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800de06:	0952      	lsrs	r2, r2, #5
 800de08:	b292      	uxth	r2, r2
 800de0a:	fbb3 f1f2 	udiv	r1, r3, r2
 800de0e:	fb01 f202 	mul.w	r2, r1, r2
 800de12:	1a9b      	subs	r3, r3, r2
 800de14:	2b00      	cmp	r3, #0
 800de16:	d102      	bne.n	800de1e <f_mkfs+0x11e>
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	e001      	b.n	800de22 <f_mkfs+0x122>
 800de1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de22:	63fb      	str	r3, [r7, #60]	; 0x3c
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	68db      	ldr	r3, [r3, #12]
 800de28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de2c:	d80a      	bhi.n	800de44 <f_mkfs+0x144>
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	68da      	ldr	r2, [r3, #12]
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	3b01      	subs	r3, #1
 800de38:	4013      	ands	r3, r2
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d102      	bne.n	800de44 <f_mkfs+0x144>
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	e000      	b.n	800de46 <f_mkfs+0x146>
 800de44:	2300      	movs	r3, #0
 800de46:	657b      	str	r3, [r7, #84]	; 0x54
	sz_au /= ss;	/* Byte --> Sector */
 800de48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800de52:	657b      	str	r3, [r7, #84]	; 0x54

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800de54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de58:	683a      	ldr	r2, [r7, #0]
 800de5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800de60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de62:	2b00      	cmp	r3, #0
 800de64:	d101      	bne.n	800de6a <f_mkfs+0x16a>
 800de66:	2311      	movs	r3, #17
 800de68:	e378      	b.n	800e55c <f_mkfs+0x85c>
	buf = (BYTE*)work;		/* Working buffer */
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	637b      	str	r3, [r7, #52]	; 0x34
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800de6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de70:	2b00      	cmp	r3, #0
 800de72:	d101      	bne.n	800de78 <f_mkfs+0x178>
 800de74:	2311      	movs	r3, #17
 800de76:	e371      	b.n	800e55c <f_mkfs+0x85c>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800de78:	2300      	movs	r3, #0
 800de7a:	61fb      	str	r3, [r7, #28]
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	677b      	str	r3, [r7, #116]	; 0x74
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800de80:	f107 021c 	add.w	r2, r7, #28
 800de84:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800de88:	2101      	movs	r1, #1
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fd fd46 	bl	800b91c <disk_ioctl>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d001      	beq.n	800de9a <f_mkfs+0x19a>
 800de96:	2301      	movs	r3, #1
 800de98:	e360      	b.n	800e55c <f_mkfs+0x85c>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800de9a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800de9e:	f003 0308 	and.w	r3, r3, #8
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d108      	bne.n	800deb8 <f_mkfs+0x1b8>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	2b3f      	cmp	r3, #63	; 0x3f
 800deaa:	d905      	bls.n	800deb8 <f_mkfs+0x1b8>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800deac:	233f      	movs	r3, #63	; 0x3f
 800deae:	677b      	str	r3, [r7, #116]	; 0x74
 800deb0:	69fa      	ldr	r2, [r7, #28]
 800deb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	61fb      	str	r3, [r7, #28]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	2b7f      	cmp	r3, #127	; 0x7f
 800debc:	d801      	bhi.n	800dec2 <f_mkfs+0x1c2>
 800debe:	230e      	movs	r3, #14
 800dec0:	e34c      	b.n	800e55c <f_mkfs+0x85c>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800dec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dec4:	2b80      	cmp	r3, #128	; 0x80
 800dec6:	d901      	bls.n	800decc <f_mkfs+0x1cc>
 800dec8:	2380      	movs	r3, #128	; 0x80
 800deca:	657b      	str	r3, [r7, #84]	; 0x54
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800decc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ded0:	f003 0302 	and.w	r3, r3, #2
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d009      	beq.n	800deec <f_mkfs+0x1ec>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800ded8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800dedc:	f003 0301 	and.w	r3, r3, #1
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d103      	bne.n	800deec <f_mkfs+0x1ec>
				fsty = FS_FAT32; break;
 800dee4:	2303      	movs	r3, #3
 800dee6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800deea:	e00a      	b.n	800df02 <f_mkfs+0x202>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800deec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800def0:	f003 0301 	and.w	r3, r3, #1
 800def4:	2b00      	cmp	r3, #0
 800def6:	d101      	bne.n	800defc <f_mkfs+0x1fc>
 800def8:	2313      	movs	r3, #19
 800defa:	e32f      	b.n	800e55c <f_mkfs+0x85c>
		fsty = FS_FAT16;
 800defc:	2302      	movs	r3, #2
 800defe:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800df02:	f7fc fbb0 	bl	800a666 <get_fattime>
 800df06:	4602      	mov	r2, r0
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	4413      	add	r3, r2
 800df0c:	633b      	str	r3, [r7, #48]	; 0x30

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800df0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df10:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800df12:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800df16:	2b03      	cmp	r3, #3
 800df18:	d13e      	bne.n	800df98 <f_mkfs+0x298>
				if (pau == 0) {	/* AU auto-selection */
 800df1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d11b      	bne.n	800df58 <f_mkfs+0x258>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	0c5b      	lsrs	r3, r3, #17
 800df24:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800df26:	2300      	movs	r3, #0
 800df28:	653b      	str	r3, [r7, #80]	; 0x50
 800df2a:	2301      	movs	r3, #1
 800df2c:	66bb      	str	r3, [r7, #104]	; 0x68
 800df2e:	e005      	b.n	800df3c <f_mkfs+0x23c>
 800df30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df32:	3301      	adds	r3, #1
 800df34:	653b      	str	r3, [r7, #80]	; 0x50
 800df36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df38:	005b      	lsls	r3, r3, #1
 800df3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800df3c:	4a1e      	ldr	r2, [pc, #120]	; (800dfb8 <f_mkfs+0x2b8>)
 800df3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d007      	beq.n	800df58 <f_mkfs+0x258>
 800df48:	4a1b      	ldr	r2, [pc, #108]	; (800dfb8 <f_mkfs+0x2b8>)
 800df4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df50:	461a      	mov	r2, r3
 800df52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df54:	4293      	cmp	r3, r2
 800df56:	d2eb      	bcs.n	800df30 <f_mkfs+0x230>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800df58:	69fa      	ldr	r2, [r7, #28]
 800df5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800df60:	62fb      	str	r3, [r7, #44]	; 0x2c
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800df62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df64:	3302      	adds	r3, #2
 800df66:	009a      	lsls	r2, r3, #2
 800df68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800df6c:	4413      	add	r3, r2
 800df6e:	1e5a      	subs	r2, r3, #1
 800df70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800df74:	fbb2 f3f3 	udiv	r3, r2, r3
 800df78:	65fb      	str	r3, [r7, #92]	; 0x5c
				sz_rsv = 32;	/* Number of reserved sectors */
 800df7a:	2320      	movs	r3, #32
 800df7c:	67fb      	str	r3, [r7, #124]	; 0x7c
				sz_dir = 0;		/* No static directory */
 800df7e:	2300      	movs	r3, #0
 800df80:	65bb      	str	r3, [r7, #88]	; 0x58
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800df82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df84:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800df88:	4293      	cmp	r3, r2
 800df8a:	d903      	bls.n	800df94 <f_mkfs+0x294>
 800df8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8e:	4a0b      	ldr	r2, [pc, #44]	; (800dfbc <f_mkfs+0x2bc>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d956      	bls.n	800e042 <f_mkfs+0x342>
 800df94:	230e      	movs	r3, #14
 800df96:	e2e1      	b.n	800e55c <f_mkfs+0x85c>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800df98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d124      	bne.n	800dfe8 <f_mkfs+0x2e8>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	0b1b      	lsrs	r3, r3, #12
 800dfa2:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	653b      	str	r3, [r7, #80]	; 0x50
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800dfac:	e00e      	b.n	800dfcc <f_mkfs+0x2cc>
 800dfae:	bf00      	nop
 800dfb0:	240013b4 	.word	0x240013b4
 800dfb4:	080242d4 	.word	0x080242d4
 800dfb8:	080242e4 	.word	0x080242e4
 800dfbc:	0ffffff5 	.word	0x0ffffff5
 800dfc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	653b      	str	r3, [r7, #80]	; 0x50
 800dfc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dfc8:	005b      	lsls	r3, r3, #1
 800dfca:	66bb      	str	r3, [r7, #104]	; 0x68
 800dfcc:	4a99      	ldr	r2, [pc, #612]	; (800e234 <f_mkfs+0x534>)
 800dfce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d007      	beq.n	800dfe8 <f_mkfs+0x2e8>
 800dfd8:	4a96      	ldr	r2, [pc, #600]	; (800e234 <f_mkfs+0x534>)
 800dfda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d2eb      	bcs.n	800dfc0 <f_mkfs+0x2c0>
				}
				n_clst = (DWORD)sz_vol / pau;
 800dfe8:	69fa      	ldr	r2, [r7, #28]
 800dfea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dfec:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff0:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (n_clst > MAX_FAT12) {
 800dff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d904      	bls.n	800e006 <f_mkfs+0x306>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800dffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffe:	3302      	adds	r3, #2
 800e000:	005b      	lsls	r3, r3, #1
 800e002:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e004:	e00a      	b.n	800e01c <f_mkfs+0x31c>
				} else {
					fsty = FS_FAT12;
 800e006:	2301      	movs	r3, #1
 800e008:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e00e:	4613      	mov	r3, r2
 800e010:	005b      	lsls	r3, r3, #1
 800e012:	4413      	add	r3, r2
 800e014:	3301      	adds	r3, #1
 800e016:	085b      	lsrs	r3, r3, #1
 800e018:	3303      	adds	r3, #3
 800e01a:	66fb      	str	r3, [r7, #108]	; 0x6c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e01c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e022:	4413      	add	r3, r2
 800e024:	1e5a      	subs	r2, r3, #1
 800e026:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e02e:	65fb      	str	r3, [r7, #92]	; 0x5c
				sz_rsv = 1;						/* Number of reserved sectors */
 800e030:	2301      	movs	r3, #1
 800e032:	67fb      	str	r3, [r7, #124]	; 0x7c
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800e034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e036:	015a      	lsls	r2, r3, #5
 800e038:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e03c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e040:	65bb      	str	r3, [r7, #88]	; 0x58
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e042:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e046:	4413      	add	r3, r2
 800e048:	673b      	str	r3, [r7, #112]	; 0x70
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800e04a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e04c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e04e:	fb03 f202 	mul.w	r2, r3, r2
 800e052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e054:	4413      	add	r3, r2
 800e056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e058:	4413      	add	r3, r2
 800e05a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800e05c:	6a3a      	ldr	r2, [r7, #32]
 800e05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e060:	4413      	add	r3, r2
 800e062:	1e5a      	subs	r2, r3, #1
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	425b      	negs	r3, r3
 800e068:	401a      	ands	r2, r3
 800e06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06c:	1ad3      	subs	r3, r2, r3
 800e06e:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800e070:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e074:	2b03      	cmp	r3, #3
 800e076:	d108      	bne.n	800e08a <f_mkfs+0x38a>
				sz_rsv += n; b_fat += n;
 800e078:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e07c:	4413      	add	r3, r2
 800e07e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e080:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e084:	4413      	add	r3, r2
 800e086:	673b      	str	r3, [r7, #112]	; 0x70
 800e088:	e019      	b.n	800e0be <f_mkfs+0x3be>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800e08a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e08c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e08e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e092:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e094:	fb01 f202 	mul.w	r2, r1, r2
 800e098:	1a9b      	subs	r3, r3, r2
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d008      	beq.n	800e0b0 <f_mkfs+0x3b0>
					n--; sz_rsv++; b_fat++;
 800e09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e0a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e0aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	673b      	str	r3, [r7, #112]	; 0x70
				}
				sz_fat += n / n_fat;
 800e0b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0ba:	4413      	add	r3, r2
 800e0bc:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800e0be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0c0:	011a      	lsls	r2, r3, #4
 800e0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c4:	441a      	add	r2, r3
 800e0c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e0c8:	1ad2      	subs	r2, r2, r3
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d901      	bls.n	800e0d4 <f_mkfs+0x3d4>
 800e0d0:	230e      	movs	r3, #14
 800e0d2:	e243      	b.n	800e55c <f_mkfs+0x85c>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800e0d4:	69fa      	ldr	r2, [r7, #28]
 800e0d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e0d8:	1ad2      	subs	r2, r2, r3
 800e0da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e0de:	fb01 f303 	mul.w	r3, r1, r3
 800e0e2:	1ad2      	subs	r2, r2, r3
 800e0e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0e6:	1ad2      	subs	r2, r2, r3
 800e0e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (fsty == FS_FAT32) {
 800e0f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e0f4:	2b03      	cmp	r3, #3
 800e0f6:	d10f      	bne.n	800e118 <f_mkfs+0x418>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d80a      	bhi.n	800e118 <f_mkfs+0x418>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e104:	2b00      	cmp	r3, #0
 800e106:	d105      	bne.n	800e114 <f_mkfs+0x414>
 800e108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e10a:	085b      	lsrs	r3, r3, #1
 800e10c:	657b      	str	r3, [r7, #84]	; 0x54
 800e10e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e110:	2b00      	cmp	r3, #0
 800e112:	d145      	bne.n	800e1a0 <f_mkfs+0x4a0>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800e114:	230e      	movs	r3, #14
 800e116:	e221      	b.n	800e55c <f_mkfs+0x85c>
				}
			}
			if (fsty == FS_FAT16) {
 800e118:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d134      	bne.n	800e18a <f_mkfs+0x48a>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e122:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e126:	4293      	cmp	r3, r2
 800e128:	d91f      	bls.n	800e16a <f_mkfs+0x46a>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800e12a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d107      	bne.n	800e140 <f_mkfs+0x440>
 800e130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	2b40      	cmp	r3, #64	; 0x40
 800e136:	d803      	bhi.n	800e140 <f_mkfs+0x440>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800e138:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e13a:	005b      	lsls	r3, r3, #1
 800e13c:	657b      	str	r3, [r7, #84]	; 0x54
 800e13e:	e034      	b.n	800e1aa <f_mkfs+0x4aa>
					}
					if ((fsopt & FM_FAT32)) {
 800e140:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e144:	f003 0302 	and.w	r3, r3, #2
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d003      	beq.n	800e154 <f_mkfs+0x454>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e14c:	2303      	movs	r3, #3
 800e14e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800e152:	e02a      	b.n	800e1aa <f_mkfs+0x4aa>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e156:	2b00      	cmp	r3, #0
 800e158:	d105      	bne.n	800e166 <f_mkfs+0x466>
 800e15a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	657b      	str	r3, [r7, #84]	; 0x54
 800e160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e162:	2b80      	cmp	r3, #128	; 0x80
 800e164:	d91e      	bls.n	800e1a4 <f_mkfs+0x4a4>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800e166:	230e      	movs	r3, #14
 800e168:	e1f8      	b.n	800e55c <f_mkfs+0x85c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e170:	4293      	cmp	r3, r2
 800e172:	d80a      	bhi.n	800e18a <f_mkfs+0x48a>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e176:	2b00      	cmp	r3, #0
 800e178:	d105      	bne.n	800e186 <f_mkfs+0x486>
 800e17a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e17c:	005b      	lsls	r3, r3, #1
 800e17e:	657b      	str	r3, [r7, #84]	; 0x54
 800e180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e182:	2b80      	cmp	r3, #128	; 0x80
 800e184:	d910      	bls.n	800e1a8 <f_mkfs+0x4a8>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800e186:	230e      	movs	r3, #14
 800e188:	e1e8      	b.n	800e55c <f_mkfs+0x85c>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800e18a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d10c      	bne.n	800e1ac <f_mkfs+0x4ac>
 800e192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e194:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e198:	4293      	cmp	r3, r2
 800e19a:	d907      	bls.n	800e1ac <f_mkfs+0x4ac>
 800e19c:	230e      	movs	r3, #14
 800e19e:	e1dd      	b.n	800e55c <f_mkfs+0x85c>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e1a0:	bf00      	nop
 800e1a2:	e6b4      	b.n	800df0e <f_mkfs+0x20e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e1a4:	bf00      	nop
 800e1a6:	e6b2      	b.n	800df0e <f_mkfs+0x20e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e1a8:	bf00      	nop
			pau = sz_au;
 800e1aa:	e6b0      	b.n	800df0e <f_mkfs+0x20e>

			/* Ok, it is the valid cluster configuration */
			break;
 800e1ac:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800e1ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	2100      	movs	r1, #0
 800e1b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e1b8:	f011 f84a 	bl	801f250 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800e1bc:	220b      	movs	r2, #11
 800e1be:	491e      	ldr	r1, [pc, #120]	; (800e238 <f_mkfs+0x538>)
 800e1c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e1c2:	f011 f81d 	bl	801f200 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c8:	330b      	adds	r3, #11
 800e1ca:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e1ce:	4611      	mov	r1, r2
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fd fbfc 	bl	800b9ce <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1d8:	330d      	adds	r3, #13
 800e1da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e1dc:	b2d2      	uxtb	r2, r2
 800e1de:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1e2:	330e      	adds	r3, #14
 800e1e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e1e6:	b292      	uxth	r2, r2
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fd fbef 	bl	800b9ce <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800e1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1f2:	3310      	adds	r3, #16
 800e1f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1f6:	b2d2      	uxtb	r2, r2
 800e1f8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800e1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1fc:	f103 0211 	add.w	r2, r3, #17
 800e200:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e204:	2b03      	cmp	r3, #3
 800e206:	d002      	beq.n	800e20e <f_mkfs+0x50e>
 800e208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	e000      	b.n	800e210 <f_mkfs+0x510>
 800e20e:	2300      	movs	r3, #0
 800e210:	4619      	mov	r1, r3
 800e212:	4610      	mov	r0, r2
 800e214:	f7fd fbdb 	bl	800b9ce <st_word>
		if (sz_vol < 0x10000) {
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e21e:	d20d      	bcs.n	800e23c <f_mkfs+0x53c>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e222:	3313      	adds	r3, #19
 800e224:	69fa      	ldr	r2, [r7, #28]
 800e226:	b292      	uxth	r2, r2
 800e228:	4611      	mov	r1, r2
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fd fbcf 	bl	800b9ce <st_word>
 800e230:	e00b      	b.n	800e24a <f_mkfs+0x54a>
 800e232:	bf00      	nop
 800e234:	080242f4 	.word	0x080242f4
 800e238:	080208e4 	.word	0x080208e4
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800e23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23e:	3320      	adds	r3, #32
 800e240:	69fa      	ldr	r2, [r7, #28]
 800e242:	4611      	mov	r1, r2
 800e244:	4618      	mov	r0, r3
 800e246:	f7fd fbdd 	bl	800ba04 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e24c:	3315      	adds	r3, #21
 800e24e:	22f8      	movs	r2, #248	; 0xf8
 800e250:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e254:	3318      	adds	r3, #24
 800e256:	213f      	movs	r1, #63	; 0x3f
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fd fbb8 	bl	800b9ce <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e260:	331a      	adds	r3, #26
 800e262:	21ff      	movs	r1, #255	; 0xff
 800e264:	4618      	mov	r0, r3
 800e266:	f7fd fbb2 	bl	800b9ce <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800e26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26c:	331c      	adds	r3, #28
 800e26e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e270:	4618      	mov	r0, r3
 800e272:	f7fd fbc7 	bl	800ba04 <st_dword>
		if (fsty == FS_FAT32) {
 800e276:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e27a:	2b03      	cmp	r3, #3
 800e27c:	d12d      	bne.n	800e2da <f_mkfs+0x5da>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800e27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e280:	3343      	adds	r3, #67	; 0x43
 800e282:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e284:	4618      	mov	r0, r3
 800e286:	f7fd fbbd 	bl	800ba04 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e28c:	3324      	adds	r3, #36	; 0x24
 800e28e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e290:	4618      	mov	r0, r3
 800e292:	f7fd fbb7 	bl	800ba04 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e298:	332c      	adds	r3, #44	; 0x2c
 800e29a:	2102      	movs	r1, #2
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7fd fbb1 	bl	800ba04 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2a4:	3330      	adds	r3, #48	; 0x30
 800e2a6:	2101      	movs	r1, #1
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7fd fb90 	bl	800b9ce <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2b0:	3332      	adds	r3, #50	; 0x32
 800e2b2:	2106      	movs	r1, #6
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fd fb8a 	bl	800b9ce <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2bc:	3340      	adds	r3, #64	; 0x40
 800e2be:	2280      	movs	r2, #128	; 0x80
 800e2c0:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2c4:	3342      	adds	r3, #66	; 0x42
 800e2c6:	2229      	movs	r2, #41	; 0x29
 800e2c8:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2cc:	3347      	adds	r3, #71	; 0x47
 800e2ce:	2213      	movs	r2, #19
 800e2d0:	49a4      	ldr	r1, [pc, #656]	; (800e564 <f_mkfs+0x864>)
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f010 ff94 	bl	801f200 <memcpy>
 800e2d8:	e01c      	b.n	800e314 <f_mkfs+0x614>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800e2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2dc:	3327      	adds	r3, #39	; 0x27
 800e2de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fd fb8f 	bl	800ba04 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2e8:	3316      	adds	r3, #22
 800e2ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e2ec:	b292      	uxth	r2, r2
 800e2ee:	4611      	mov	r1, r2
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fd fb6c 	bl	800b9ce <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f8:	3324      	adds	r3, #36	; 0x24
 800e2fa:	2280      	movs	r2, #128	; 0x80
 800e2fc:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e300:	3326      	adds	r3, #38	; 0x26
 800e302:	2229      	movs	r2, #41	; 0x29
 800e304:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e308:	332b      	adds	r3, #43	; 0x2b
 800e30a:	2213      	movs	r2, #19
 800e30c:	4996      	ldr	r1, [pc, #600]	; (800e568 <f_mkfs+0x868>)
 800e30e:	4618      	mov	r0, r3
 800e310:	f010 ff76 	bl	801f200 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e316:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e31a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fd fb55 	bl	800b9ce <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800e324:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e328:	2301      	movs	r3, #1
 800e32a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e32c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e32e:	f7fd fad5 	bl	800b8dc <disk_write>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d001      	beq.n	800e33c <f_mkfs+0x63c>
 800e338:	2301      	movs	r3, #1
 800e33a:	e10f      	b.n	800e55c <f_mkfs+0x85c>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800e33c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e340:	2b03      	cmp	r3, #3
 800e342:	d141      	bne.n	800e3c8 <f_mkfs+0x6c8>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e346:	1d9a      	adds	r2, r3, #6
 800e348:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e34c:	2301      	movs	r3, #1
 800e34e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e350:	f7fd fac4 	bl	800b8dc <disk_write>
			memset(buf, 0, ss);
 800e354:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e358:	461a      	mov	r2, r3
 800e35a:	2100      	movs	r1, #0
 800e35c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e35e:	f010 ff77 	bl	801f250 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e362:	4982      	ldr	r1, [pc, #520]	; (800e56c <f_mkfs+0x86c>)
 800e364:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e366:	f7fd fb4d 	bl	800ba04 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e36c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e370:	497f      	ldr	r1, [pc, #508]	; (800e570 <f_mkfs+0x870>)
 800e372:	4618      	mov	r0, r3
 800e374:	f7fd fb46 	bl	800ba04 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e37a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e380:	3b01      	subs	r3, #1
 800e382:	4619      	mov	r1, r3
 800e384:	4610      	mov	r0, r2
 800e386:	f7fd fb3d 	bl	800ba04 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e38c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e390:	2102      	movs	r1, #2
 800e392:	4618      	mov	r0, r3
 800e394:	f7fd fb36 	bl	800ba04 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e39a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e39e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fd fb13 	bl	800b9ce <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e3a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3aa:	1dda      	adds	r2, r3, #7
 800e3ac:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e3b4:	f7fd fa92 	bl	800b8dc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e3b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3ba:	1c5a      	adds	r2, r3, #1
 800e3bc:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e3c4:	f7fd fa8a 	bl	800b8dc <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800e3c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e3cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3ce:	fb02 f303 	mul.w	r3, r2, r3
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3d8:	f010 ff3a 	bl	801f250 <memset>
		sect = b_fat;		/* FAT start sector */
 800e3dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3de:	67bb      	str	r3, [r7, #120]	; 0x78
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	653b      	str	r3, [r7, #80]	; 0x50
 800e3e4:	e04c      	b.n	800e480 <f_mkfs+0x780>
			if (fsty == FS_FAT32) {
 800e3e6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e3ea:	2b03      	cmp	r3, #3
 800e3ec:	d113      	bne.n	800e416 <f_mkfs+0x716>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800e3ee:	f06f 0107 	mvn.w	r1, #7
 800e3f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3f4:	f7fd fb06 	bl	800ba04 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800e3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3fa:	3304      	adds	r3, #4
 800e3fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e400:	4618      	mov	r0, r3
 800e402:	f7fd faff 	bl	800ba04 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800e406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e408:	3308      	adds	r3, #8
 800e40a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fd faf8 	bl	800ba04 <st_dword>
 800e414:	e00b      	b.n	800e42e <f_mkfs+0x72e>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800e416:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d101      	bne.n	800e422 <f_mkfs+0x722>
 800e41e:	4b55      	ldr	r3, [pc, #340]	; (800e574 <f_mkfs+0x874>)
 800e420:	e001      	b.n	800e426 <f_mkfs+0x726>
 800e422:	f06f 0307 	mvn.w	r3, #7
 800e426:	4619      	mov	r1, r3
 800e428:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e42a:	f7fd faeb 	bl	800ba04 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e42e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e430:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e432:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e436:	4293      	cmp	r3, r2
 800e438:	bf28      	it	cs
 800e43a:	4613      	movcs	r3, r2
 800e43c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800e43e:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e444:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e446:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e448:	f7fd fa48 	bl	800b8dc <disk_write>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d001      	beq.n	800e456 <f_mkfs+0x756>
 800e452:	2301      	movs	r3, #1
 800e454:	e082      	b.n	800e55c <f_mkfs+0x85c>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800e456:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e45a:	461a      	mov	r2, r3
 800e45c:	2100      	movs	r1, #0
 800e45e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e460:	f010 fef6 	bl	801f250 <memset>
				sect += n; nsect -= n;
 800e464:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e468:	4413      	add	r3, r2
 800e46a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e46c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800e474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e476:	2b00      	cmp	r3, #0
 800e478:	d1db      	bne.n	800e432 <f_mkfs+0x732>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800e47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e47c:	3301      	adds	r3, #1
 800e47e:	653b      	str	r3, [r7, #80]	; 0x50
 800e480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e484:	429a      	cmp	r2, r3
 800e486:	d3ae      	bcc.n	800e3e6 <f_mkfs+0x6e6>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e488:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e48c:	2b03      	cmp	r3, #3
 800e48e:	d101      	bne.n	800e494 <f_mkfs+0x794>
 800e490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e492:	e000      	b.n	800e496 <f_mkfs+0x796>
 800e494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e496:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e498:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49c:	4293      	cmp	r3, r2
 800e49e:	bf28      	it	cs
 800e4a0:	4613      	movcs	r3, r2
 800e4a2:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800e4a4:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e4ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e4ae:	f7fd fa15 	bl	800b8dc <disk_write>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d001      	beq.n	800e4bc <f_mkfs+0x7bc>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	e04f      	b.n	800e55c <f_mkfs+0x85c>
			sect += n; nsect -= n;
 800e4bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e4be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4c0:	4413      	add	r3, r2
 800e4c2:	67bb      	str	r3, [r7, #120]	; 0x78
 800e4c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e4c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800e4cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e2      	bne.n	800e498 <f_mkfs+0x798>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800e4d2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e4d6:	2b03      	cmp	r3, #3
 800e4d8:	d103      	bne.n	800e4e2 <f_mkfs+0x7e2>
		sys = 0x0C;		/* FAT32X */
 800e4da:	230c      	movs	r3, #12
 800e4dc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800e4e0:	e012      	b.n	800e508 <f_mkfs+0x808>
	} else if (sz_vol >= 0x10000) {
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4e8:	d303      	bcc.n	800e4f2 <f_mkfs+0x7f2>
		sys = 0x06;		/* FAT12/16 (large) */
 800e4ea:	2306      	movs	r3, #6
 800e4ec:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800e4f0:	e00a      	b.n	800e508 <f_mkfs+0x808>
	} else if (fsty == FS_FAT16) {
 800e4f2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	d103      	bne.n	800e502 <f_mkfs+0x802>
		sys = 0x04;		/* FAT16 */
 800e4fa:	2304      	movs	r3, #4
 800e4fc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800e500:	e002      	b.n	800e508 <f_mkfs+0x808>
	} else {
		sys = 0x01;		/* FAT12 */
 800e502:	2301      	movs	r3, #1
 800e504:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800e508:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e50c:	f003 0308 	and.w	r3, r3, #8
 800e510:	2b00      	cmp	r3, #0
 800e512:	d116      	bne.n	800e542 <f_mkfs+0x842>
			lba[0] = sz_vol; lba[1] = 0;
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	617b      	str	r3, [r7, #20]
 800e518:	2300      	movs	r3, #0
 800e51a:	61bb      	str	r3, [r7, #24]
			res = create_partition(pdrv, lba, sys, buf);
 800e51c:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 800e520:	f107 0114 	add.w	r1, r7, #20
 800e524:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e52a:	f7ff fac5 	bl	800dab8 <create_partition>
 800e52e:	4603      	mov	r3, r0
 800e530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) LEAVE_MKFS(res);
 800e534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <f_mkfs+0x842>
 800e53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e540:	e00c      	b.n	800e55c <f_mkfs+0x85c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800e542:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e546:	2200      	movs	r2, #0
 800e548:	2100      	movs	r1, #0
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fd f9e6 	bl	800b91c <disk_ioctl>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d001      	beq.n	800e55a <f_mkfs+0x85a>
 800e556:	2301      	movs	r3, #1
 800e558:	e000      	b.n	800e55c <f_mkfs+0x85c>

	LEAVE_MKFS(FR_OK);
 800e55a:	2300      	movs	r3, #0
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3780      	adds	r7, #128	; 0x80
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}
 800e564:	080208f0 	.word	0x080208f0
 800e568:	08020904 	.word	0x08020904
 800e56c:	41615252 	.word	0x41615252
 800e570:	61417272 	.word	0x61417272
 800e574:	00fffff8 	.word	0x00fffff8

0800e578 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e578:	b480      	push	{r7}
 800e57a:	b087      	sub	sp, #28
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	4613      	mov	r3, r2
 800e584:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e586:	2301      	movs	r3, #1
 800e588:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e58a:	2300      	movs	r3, #0
 800e58c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < FF_VOLUMES)
 800e58e:	4b1f      	ldr	r3, [pc, #124]	; (800e60c <FATFS_LinkDriverEx+0x94>)
 800e590:	7a5b      	ldrb	r3, [r3, #9]
 800e592:	b2db      	uxtb	r3, r3
 800e594:	2b00      	cmp	r3, #0
 800e596:	d131      	bne.n	800e5fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e598:	4b1c      	ldr	r3, [pc, #112]	; (800e60c <FATFS_LinkDriverEx+0x94>)
 800e59a:	7a5b      	ldrb	r3, [r3, #9]
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	461a      	mov	r2, r3
 800e5a0:	4b1a      	ldr	r3, [pc, #104]	; (800e60c <FATFS_LinkDriverEx+0x94>)
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e5a6:	4b19      	ldr	r3, [pc, #100]	; (800e60c <FATFS_LinkDriverEx+0x94>)
 800e5a8:	7a5b      	ldrb	r3, [r3, #9]
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	4a17      	ldr	r2, [pc, #92]	; (800e60c <FATFS_LinkDriverEx+0x94>)
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	4413      	add	r3, r2
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e5b6:	4b15      	ldr	r3, [pc, #84]	; (800e60c <FATFS_LinkDriverEx+0x94>)
 800e5b8:	7a5b      	ldrb	r3, [r3, #9]
 800e5ba:	b2db      	uxtb	r3, r3
 800e5bc:	461a      	mov	r2, r3
 800e5be:	4b13      	ldr	r3, [pc, #76]	; (800e60c <FATFS_LinkDriverEx+0x94>)
 800e5c0:	4413      	add	r3, r2
 800e5c2:	79fa      	ldrb	r2, [r7, #7]
 800e5c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e5c6:	4b11      	ldr	r3, [pc, #68]	; (800e60c <FATFS_LinkDriverEx+0x94>)
 800e5c8:	7a5b      	ldrb	r3, [r3, #9]
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	1c5a      	adds	r2, r3, #1
 800e5ce:	b2d1      	uxtb	r1, r2
 800e5d0:	4a0e      	ldr	r2, [pc, #56]	; (800e60c <FATFS_LinkDriverEx+0x94>)
 800e5d2:	7251      	strb	r1, [r2, #9]
 800e5d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e5d6:	7dbb      	ldrb	r3, [r7, #22]
 800e5d8:	3330      	adds	r3, #48	; 0x30
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	223a      	movs	r2, #58	; 0x3a
 800e5e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	3302      	adds	r3, #2
 800e5ec:	222f      	movs	r2, #47	; 0x2f
 800e5ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	3303      	adds	r3, #3
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	371c      	adds	r7, #28
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	240013bc 	.word	0x240013bc

0800e610 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e61a:	2200      	movs	r2, #0
 800e61c:	6839      	ldr	r1, [r7, #0]
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7ff ffaa 	bl	800e578 <FATFS_LinkDriverEx>
 800e624:	4603      	mov	r3, r0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}

0800e62e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e62e:	b480      	push	{r7}
 800e630:	b085      	sub	sp, #20
 800e632:	af00      	add	r7, sp, #0
 800e634:	4603      	mov	r3, r0
 800e636:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e638:	2300      	movs	r3, #0
 800e63a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e63c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e640:	2b84      	cmp	r3, #132	; 0x84
 800e642:	d005      	beq.n	800e650 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e644:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	4413      	add	r3, r2
 800e64c:	3303      	adds	r3, #3
 800e64e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e650:	68fb      	ldr	r3, [r7, #12]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3714      	adds	r7, #20
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr

0800e65e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e65e:	b480      	push	{r7}
 800e660:	b083      	sub	sp, #12
 800e662:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e664:	f3ef 8305 	mrs	r3, IPSR
 800e668:	607b      	str	r3, [r7, #4]
  return(result);
 800e66a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	bf14      	ite	ne
 800e670:	2301      	movne	r3, #1
 800e672:	2300      	moveq	r3, #0
 800e674:	b2db      	uxtb	r3, r3
}
 800e676:	4618      	mov	r0, r3
 800e678:	370c      	adds	r7, #12
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr

0800e682 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e682:	b580      	push	{r7, lr}
 800e684:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e686:	f002 fa0f 	bl	8010aa8 <vTaskStartScheduler>
  
  return osOK;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800e694:	f002 fe4c 	bl	8011330 <xTaskGetSchedulerState>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d101      	bne.n	800e6a2 <osKernelRunning+0x12>
    return 0;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	e000      	b.n	800e6a4 <osKernelRunning+0x14>
  else
    return 1;
 800e6a2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800e6ac:	f7ff ffd7 	bl	800e65e <inHandlerMode>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d003      	beq.n	800e6be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800e6b6:	f002 fb1b 	bl	8010cf0 <xTaskGetTickCountFromISR>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	e002      	b.n	800e6c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800e6be:	f002 fb07 	bl	8010cd0 <xTaskGetTickCount>
 800e6c2:	4603      	mov	r3, r0
  }
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ca:	b089      	sub	sp, #36	; 0x24
 800e6cc:	af04      	add	r7, sp, #16
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	695b      	ldr	r3, [r3, #20]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d020      	beq.n	800e71c <osThreadCreate+0x54>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	699b      	ldr	r3, [r3, #24]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d01c      	beq.n	800e71c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	685c      	ldr	r4, [r3, #4]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681d      	ldr	r5, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	691e      	ldr	r6, [r3, #16]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7ff ff9a 	bl	800e62e <makeFreeRtosPriority>
 800e6fa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	695b      	ldr	r3, [r3, #20]
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e704:	9202      	str	r2, [sp, #8]
 800e706:	9301      	str	r3, [sp, #4]
 800e708:	9100      	str	r1, [sp, #0]
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	4632      	mov	r2, r6
 800e70e:	4629      	mov	r1, r5
 800e710:	4620      	mov	r0, r4
 800e712:	f001 ff5b 	bl	80105cc <xTaskCreateStatic>
 800e716:	4603      	mov	r3, r0
 800e718:	60fb      	str	r3, [r7, #12]
 800e71a:	e01c      	b.n	800e756 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	685c      	ldr	r4, [r3, #4]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e728:	b29e      	uxth	r6, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e730:	4618      	mov	r0, r3
 800e732:	f7ff ff7c 	bl	800e62e <makeFreeRtosPriority>
 800e736:	4602      	mov	r2, r0
 800e738:	f107 030c 	add.w	r3, r7, #12
 800e73c:	9301      	str	r3, [sp, #4]
 800e73e:	9200      	str	r2, [sp, #0]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	4632      	mov	r2, r6
 800e744:	4629      	mov	r1, r5
 800e746:	4620      	mov	r0, r4
 800e748:	f001 ff9d 	bl	8010686 <xTaskCreate>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d001      	beq.n	800e756 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e752:	2300      	movs	r3, #0
 800e754:	e000      	b.n	800e758 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e756:	68fb      	ldr	r3, [r7, #12]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e760 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d001      	beq.n	800e776 <osDelay+0x16>
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	e000      	b.n	800e778 <osDelay+0x18>
 800e776:	2301      	movs	r3, #1
 800e778:	4618      	mov	r0, r3
 800e77a:	f002 f961 	bl	8010a40 <vTaskDelay>
  
  return osOK;
 800e77e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e780:	4618      	mov	r0, r3
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d007      	beq.n	800e7a8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	685b      	ldr	r3, [r3, #4]
 800e79c:	4619      	mov	r1, r3
 800e79e:	2001      	movs	r0, #1
 800e7a0:	f001 f8b5 	bl	800f90e <xQueueCreateMutexStatic>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	e003      	b.n	800e7b0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800e7a8:	2001      	movs	r0, #1
 800e7aa:	f001 f898 	bl	800f8de <xQueueCreateMutex>
 800e7ae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d101      	bne.n	800e7d0 <osMutexWait+0x18>
    return osErrorParameter;
 800e7cc:	2380      	movs	r3, #128	; 0x80
 800e7ce:	e03a      	b.n	800e846 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7da:	d103      	bne.n	800e7e4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800e7dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7e0:	60fb      	str	r3, [r7, #12]
 800e7e2:	e009      	b.n	800e7f8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d006      	beq.n	800e7f8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d101      	bne.n	800e7f8 <osMutexWait+0x40>
      ticks = 1;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e7f8:	f7ff ff31 	bl	800e65e <inHandlerMode>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d017      	beq.n	800e832 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800e802:	f107 0308 	add.w	r3, r7, #8
 800e806:	461a      	mov	r2, r3
 800e808:	2100      	movs	r1, #0
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f001 fcac 	bl	8010168 <xQueueReceiveFromISR>
 800e810:	4603      	mov	r3, r0
 800e812:	2b01      	cmp	r3, #1
 800e814:	d001      	beq.n	800e81a <osMutexWait+0x62>
      return osErrorOS;
 800e816:	23ff      	movs	r3, #255	; 0xff
 800e818:	e015      	b.n	800e846 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d011      	beq.n	800e844 <osMutexWait+0x8c>
 800e820:	4b0b      	ldr	r3, [pc, #44]	; (800e850 <osMutexWait+0x98>)
 800e822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e826:	601a      	str	r2, [r3, #0]
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	e008      	b.n	800e844 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800e832:	68f9      	ldr	r1, [r7, #12]
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f001 fb8b 	bl	800ff50 <xQueueSemaphoreTake>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d001      	beq.n	800e844 <osMutexWait+0x8c>
    return osErrorOS;
 800e840:	23ff      	movs	r3, #255	; 0xff
 800e842:	e000      	b.n	800e846 <osMutexWait+0x8e>
  }
  
  return osOK;
 800e844:	2300      	movs	r3, #0
}
 800e846:	4618      	mov	r0, r3
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	e000ed04 	.word	0xe000ed04

0800e854 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e85c:	2300      	movs	r3, #0
 800e85e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e860:	2300      	movs	r3, #0
 800e862:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800e864:	f7ff fefb 	bl	800e65e <inHandlerMode>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d016      	beq.n	800e89c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800e86e:	f107 0308 	add.w	r3, r7, #8
 800e872:	4619      	mov	r1, r3
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f001 f9fe 	bl	800fc76 <xQueueGiveFromISR>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d001      	beq.n	800e884 <osMutexRelease+0x30>
      return osErrorOS;
 800e880:	23ff      	movs	r3, #255	; 0xff
 800e882:	e017      	b.n	800e8b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d013      	beq.n	800e8b2 <osMutexRelease+0x5e>
 800e88a:	4b0c      	ldr	r3, [pc, #48]	; (800e8bc <osMutexRelease+0x68>)
 800e88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e890:	601a      	str	r2, [r3, #0]
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	e00a      	b.n	800e8b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800e89c:	2300      	movs	r3, #0
 800e89e:	2200      	movs	r2, #0
 800e8a0:	2100      	movs	r1, #0
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f001 f84e 	bl	800f944 <xQueueGenericSend>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d001      	beq.n	800e8b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800e8ae:	23ff      	movs	r3, #255	; 0xff
 800e8b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3710      	adds	r7, #16
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	e000ed04 	.word	0xe000ed04

0800e8c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b086      	sub	sp, #24
 800e8c4:	af02      	add	r7, sp, #8
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d00f      	beq.n	800e8f2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d10a      	bne.n	800e8ee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	2203      	movs	r2, #3
 800e8de:	9200      	str	r2, [sp, #0]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	2100      	movs	r1, #0
 800e8e4:	2001      	movs	r0, #1
 800e8e6:	f000 ff0f 	bl	800f708 <xQueueGenericCreateStatic>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	e016      	b.n	800e91c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	e014      	b.n	800e91c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d110      	bne.n	800e91a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800e8f8:	2203      	movs	r2, #3
 800e8fa:	2100      	movs	r1, #0
 800e8fc:	2001      	movs	r0, #1
 800e8fe:	f000 ff7b 	bl	800f7f8 <xQueueGenericCreate>
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d005      	beq.n	800e916 <osSemaphoreCreate+0x56>
 800e90a:	2300      	movs	r3, #0
 800e90c:	2200      	movs	r2, #0
 800e90e:	2100      	movs	r1, #0
 800e910:	68f8      	ldr	r0, [r7, #12]
 800e912:	f001 f817 	bl	800f944 <xQueueGenericSend>
      return sema;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	e000      	b.n	800e91c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800e91a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e92e:	2300      	movs	r3, #0
 800e930:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d101      	bne.n	800e93c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800e938:	2380      	movs	r3, #128	; 0x80
 800e93a:	e03a      	b.n	800e9b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800e93c:	2300      	movs	r3, #0
 800e93e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e946:	d103      	bne.n	800e950 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800e948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e94c:	60fb      	str	r3, [r7, #12]
 800e94e:	e009      	b.n	800e964 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d006      	beq.n	800e964 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d101      	bne.n	800e964 <osSemaphoreWait+0x40>
      ticks = 1;
 800e960:	2301      	movs	r3, #1
 800e962:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e964:	f7ff fe7b 	bl	800e65e <inHandlerMode>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d017      	beq.n	800e99e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e96e:	f107 0308 	add.w	r3, r7, #8
 800e972:	461a      	mov	r2, r3
 800e974:	2100      	movs	r1, #0
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f001 fbf6 	bl	8010168 <xQueueReceiveFromISR>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d001      	beq.n	800e986 <osSemaphoreWait+0x62>
      return osErrorOS;
 800e982:	23ff      	movs	r3, #255	; 0xff
 800e984:	e015      	b.n	800e9b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d011      	beq.n	800e9b0 <osSemaphoreWait+0x8c>
 800e98c:	4b0b      	ldr	r3, [pc, #44]	; (800e9bc <osSemaphoreWait+0x98>)
 800e98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e992:	601a      	str	r2, [r3, #0]
 800e994:	f3bf 8f4f 	dsb	sy
 800e998:	f3bf 8f6f 	isb	sy
 800e99c:	e008      	b.n	800e9b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e99e:	68f9      	ldr	r1, [r7, #12]
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f001 fad5 	bl	800ff50 <xQueueSemaphoreTake>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d001      	beq.n	800e9b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800e9ac:	23ff      	movs	r3, #255	; 0xff
 800e9ae:	e000      	b.n	800e9b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	e000ed04 	.word	0xe000ed04

0800e9c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800e9d0:	f7ff fe45 	bl	800e65e <inHandlerMode>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d016      	beq.n	800ea08 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e9da:	f107 0308 	add.w	r3, r7, #8
 800e9de:	4619      	mov	r1, r3
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f001 f948 	bl	800fc76 <xQueueGiveFromISR>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d001      	beq.n	800e9f0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800e9ec:	23ff      	movs	r3, #255	; 0xff
 800e9ee:	e017      	b.n	800ea20 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d013      	beq.n	800ea1e <osSemaphoreRelease+0x5e>
 800e9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ea28 <osSemaphoreRelease+0x68>)
 800e9f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9fc:	601a      	str	r2, [r3, #0]
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	f3bf 8f6f 	isb	sy
 800ea06:	e00a      	b.n	800ea1e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ea08:	2300      	movs	r3, #0
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 ff98 	bl	800f944 <xQueueGenericSend>
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	d001      	beq.n	800ea1e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ea1a:	23ff      	movs	r3, #255	; 0xff
 800ea1c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	e000ed04 	.word	0xe000ed04

0800ea2c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ea34:	f7ff fe13 	bl	800e65e <inHandlerMode>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800ea3e:	2382      	movs	r3, #130	; 0x82
 800ea40:	e003      	b.n	800ea4a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f001 fc4c 	bl	80102e0 <vQueueDelete>

  return osOK; 
 800ea48:	2300      	movs	r3, #0
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ea52:	b590      	push	{r4, r7, lr}
 800ea54:	b085      	sub	sp, #20
 800ea56:	af02      	add	r7, sp, #8
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d011      	beq.n	800ea88 <osMessageCreate+0x36>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	68db      	ldr	r3, [r3, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00d      	beq.n	800ea88 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6818      	ldr	r0, [r3, #0]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6859      	ldr	r1, [r3, #4]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	689a      	ldr	r2, [r3, #8]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	2400      	movs	r4, #0
 800ea7e:	9400      	str	r4, [sp, #0]
 800ea80:	f000 fe42 	bl	800f708 <xQueueGenericCreateStatic>
 800ea84:	4603      	mov	r3, r0
 800ea86:	e008      	b.n	800ea9a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6818      	ldr	r0, [r3, #0]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	4619      	mov	r1, r3
 800ea94:	f000 feb0 	bl	800f7f8 <xQueueGenericCreate>
 800ea98:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd90      	pop	{r4, r7, pc}
	...

0800eaa4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800eab0:	2300      	movs	r3, #0
 800eab2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d101      	bne.n	800eac2 <osMessagePut+0x1e>
    ticks = 1;
 800eabe:	2301      	movs	r3, #1
 800eac0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800eac2:	f7ff fdcc 	bl	800e65e <inHandlerMode>
 800eac6:	4603      	mov	r3, r0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d018      	beq.n	800eafe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800eacc:	f107 0210 	add.w	r2, r7, #16
 800ead0:	f107 0108 	add.w	r1, r7, #8
 800ead4:	2300      	movs	r3, #0
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f001 f832 	bl	800fb40 <xQueueGenericSendFromISR>
 800eadc:	4603      	mov	r3, r0
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d001      	beq.n	800eae6 <osMessagePut+0x42>
      return osErrorOS;
 800eae2:	23ff      	movs	r3, #255	; 0xff
 800eae4:	e018      	b.n	800eb18 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d014      	beq.n	800eb16 <osMessagePut+0x72>
 800eaec:	4b0c      	ldr	r3, [pc, #48]	; (800eb20 <osMessagePut+0x7c>)
 800eaee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf2:	601a      	str	r2, [r3, #0]
 800eaf4:	f3bf 8f4f 	dsb	sy
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	e00b      	b.n	800eb16 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800eafe:	f107 0108 	add.w	r1, r7, #8
 800eb02:	2300      	movs	r3, #0
 800eb04:	697a      	ldr	r2, [r7, #20]
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f000 ff1c 	bl	800f944 <xQueueGenericSend>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d001      	beq.n	800eb16 <osMessagePut+0x72>
      return osErrorOS;
 800eb12:	23ff      	movs	r3, #255	; 0xff
 800eb14:	e000      	b.n	800eb18 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3718      	adds	r7, #24
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	e000ed04 	.word	0xe000ed04

0800eb24 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800eb24:	b590      	push	{r4, r7, lr}
 800eb26:	b08b      	sub	sp, #44	; 0x2c
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800eb34:	2300      	movs	r3, #0
 800eb36:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d10a      	bne.n	800eb54 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800eb3e:	2380      	movs	r3, #128	; 0x80
 800eb40:	617b      	str	r3, [r7, #20]
    return event;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	461c      	mov	r4, r3
 800eb46:	f107 0314 	add.w	r3, r7, #20
 800eb4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eb4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eb52:	e054      	b.n	800ebfe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800eb54:	2300      	movs	r3, #0
 800eb56:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb62:	d103      	bne.n	800eb6c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800eb64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb68:	627b      	str	r3, [r7, #36]	; 0x24
 800eb6a:	e009      	b.n	800eb80 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d006      	beq.n	800eb80 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800eb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d101      	bne.n	800eb80 <osMessageGet+0x5c>
      ticks = 1;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800eb80:	f7ff fd6d 	bl	800e65e <inHandlerMode>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d01c      	beq.n	800ebc4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800eb8a:	f107 0220 	add.w	r2, r7, #32
 800eb8e:	f107 0314 	add.w	r3, r7, #20
 800eb92:	3304      	adds	r3, #4
 800eb94:	4619      	mov	r1, r3
 800eb96:	68b8      	ldr	r0, [r7, #8]
 800eb98:	f001 fae6 	bl	8010168 <xQueueReceiveFromISR>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d102      	bne.n	800eba8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800eba2:	2310      	movs	r3, #16
 800eba4:	617b      	str	r3, [r7, #20]
 800eba6:	e001      	b.n	800ebac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ebac:	6a3b      	ldr	r3, [r7, #32]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d01d      	beq.n	800ebee <osMessageGet+0xca>
 800ebb2:	4b15      	ldr	r3, [pc, #84]	; (800ec08 <osMessageGet+0xe4>)
 800ebb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebb8:	601a      	str	r2, [r3, #0]
 800ebba:	f3bf 8f4f 	dsb	sy
 800ebbe:	f3bf 8f6f 	isb	sy
 800ebc2:	e014      	b.n	800ebee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ebc4:	f107 0314 	add.w	r3, r7, #20
 800ebc8:	3304      	adds	r3, #4
 800ebca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebcc:	4619      	mov	r1, r3
 800ebce:	68b8      	ldr	r0, [r7, #8]
 800ebd0:	f001 f8de 	bl	800fd90 <xQueueReceive>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b01      	cmp	r3, #1
 800ebd8:	d102      	bne.n	800ebe0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ebda:	2310      	movs	r3, #16
 800ebdc:	617b      	str	r3, [r7, #20]
 800ebde:	e006      	b.n	800ebee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d101      	bne.n	800ebea <osMessageGet+0xc6>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	e000      	b.n	800ebec <osMessageGet+0xc8>
 800ebea:	2340      	movs	r3, #64	; 0x40
 800ebec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	461c      	mov	r4, r3
 800ebf2:	f107 0314 	add.w	r3, r7, #20
 800ebf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ebfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	372c      	adds	r7, #44	; 0x2c
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd90      	pop	{r4, r7, pc}
 800ec06:	bf00      	nop
 800ec08:	e000ed04 	.word	0xe000ed04

0800ec0c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ec14:	f7ff fd23 	bl	800e65e <inHandlerMode>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d004      	beq.n	800ec28 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f001 fb40 	bl	80102a4 <uxQueueMessagesWaitingFromISR>
 800ec24:	4603      	mov	r3, r0
 800ec26:	e003      	b.n	800ec30 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f001 fb1d 	bl	8010268 <uxQueueMessagesWaiting>
 800ec2e:	4603      	mov	r3, r0
  }
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ec40:	f7ff fd0d 	bl	800e65e <inHandlerMode>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d001      	beq.n	800ec4e <osMessageDelete+0x16>
    return osErrorISR;
 800ec4a:	2382      	movs	r3, #130	; 0x82
 800ec4c:	e003      	b.n	800ec56 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f001 fb46 	bl	80102e0 <vQueueDelete>

  return osOK; 
 800ec54:	2300      	movs	r3, #0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3708      	adds	r7, #8
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
	...

0800ec60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b08a      	sub	sp, #40	; 0x28
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ec6c:	f001 ff86 	bl	8010b7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ec70:	4b5b      	ldr	r3, [pc, #364]	; (800ede0 <pvPortMalloc+0x180>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d101      	bne.n	800ec7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ec78:	f000 f920 	bl	800eebc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ec7c:	4b59      	ldr	r3, [pc, #356]	; (800ede4 <pvPortMalloc+0x184>)
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4013      	ands	r3, r2
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f040 8093 	bne.w	800edb0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d01d      	beq.n	800eccc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ec90:	2208      	movs	r2, #8
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4413      	add	r3, r2
 800ec96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f003 0307 	and.w	r3, r3, #7
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d014      	beq.n	800eccc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f023 0307 	bic.w	r3, r3, #7
 800eca8:	3308      	adds	r3, #8
 800ecaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f003 0307 	and.w	r3, r3, #7
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00a      	beq.n	800eccc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ecb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ecc8:	bf00      	nop
 800ecca:	e7fe      	b.n	800ecca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d06e      	beq.n	800edb0 <pvPortMalloc+0x150>
 800ecd2:	4b45      	ldr	r3, [pc, #276]	; (800ede8 <pvPortMalloc+0x188>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d869      	bhi.n	800edb0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ecdc:	4b43      	ldr	r3, [pc, #268]	; (800edec <pvPortMalloc+0x18c>)
 800ecde:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ece0:	4b42      	ldr	r3, [pc, #264]	; (800edec <pvPortMalloc+0x18c>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ece6:	e004      	b.n	800ecf2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ece8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ecf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d903      	bls.n	800ed04 <pvPortMalloc+0xa4>
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d1f1      	bne.n	800ece8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed04:	4b36      	ldr	r3, [pc, #216]	; (800ede0 <pvPortMalloc+0x180>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d050      	beq.n	800edb0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed0e:	6a3b      	ldr	r3, [r7, #32]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2208      	movs	r2, #8
 800ed14:	4413      	add	r3, r2
 800ed16:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	6a3b      	ldr	r3, [r7, #32]
 800ed1e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed22:	685a      	ldr	r2, [r3, #4]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	1ad2      	subs	r2, r2, r3
 800ed28:	2308      	movs	r3, #8
 800ed2a:	005b      	lsls	r3, r3, #1
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d91f      	bls.n	800ed70 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4413      	add	r3, r2
 800ed36:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	f003 0307 	and.w	r3, r3, #7
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00a      	beq.n	800ed58 <pvPortMalloc+0xf8>
	__asm volatile
 800ed42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	613b      	str	r3, [r7, #16]
}
 800ed54:	bf00      	nop
 800ed56:	e7fe      	b.n	800ed56 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5a:	685a      	ldr	r2, [r3, #4]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	1ad2      	subs	r2, r2, r3
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ed6a:	69b8      	ldr	r0, [r7, #24]
 800ed6c:	f000 f908 	bl	800ef80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed70:	4b1d      	ldr	r3, [pc, #116]	; (800ede8 <pvPortMalloc+0x188>)
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	1ad3      	subs	r3, r2, r3
 800ed7a:	4a1b      	ldr	r2, [pc, #108]	; (800ede8 <pvPortMalloc+0x188>)
 800ed7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed7e:	4b1a      	ldr	r3, [pc, #104]	; (800ede8 <pvPortMalloc+0x188>)
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	4b1b      	ldr	r3, [pc, #108]	; (800edf0 <pvPortMalloc+0x190>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d203      	bcs.n	800ed92 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed8a:	4b17      	ldr	r3, [pc, #92]	; (800ede8 <pvPortMalloc+0x188>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a18      	ldr	r2, [pc, #96]	; (800edf0 <pvPortMalloc+0x190>)
 800ed90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed94:	685a      	ldr	r2, [r3, #4]
 800ed96:	4b13      	ldr	r3, [pc, #76]	; (800ede4 <pvPortMalloc+0x184>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	431a      	orrs	r2, r3
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda2:	2200      	movs	r2, #0
 800eda4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eda6:	4b13      	ldr	r3, [pc, #76]	; (800edf4 <pvPortMalloc+0x194>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	3301      	adds	r3, #1
 800edac:	4a11      	ldr	r2, [pc, #68]	; (800edf4 <pvPortMalloc+0x194>)
 800edae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800edb0:	f001 fef2 	bl	8010b98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	f003 0307 	and.w	r3, r3, #7
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d00a      	beq.n	800edd4 <pvPortMalloc+0x174>
	__asm volatile
 800edbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc2:	f383 8811 	msr	BASEPRI, r3
 800edc6:	f3bf 8f6f 	isb	sy
 800edca:	f3bf 8f4f 	dsb	sy
 800edce:	60fb      	str	r3, [r7, #12]
}
 800edd0:	bf00      	nop
 800edd2:	e7fe      	b.n	800edd2 <pvPortMalloc+0x172>
	return pvReturn;
 800edd4:	69fb      	ldr	r3, [r7, #28]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3728      	adds	r7, #40	; 0x28
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	24008bd0 	.word	0x24008bd0
 800ede4:	24008be4 	.word	0x24008be4
 800ede8:	24008bd4 	.word	0x24008bd4
 800edec:	24008bc8 	.word	0x24008bc8
 800edf0:	24008bd8 	.word	0x24008bd8
 800edf4:	24008bdc 	.word	0x24008bdc

0800edf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d04d      	beq.n	800eea6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee0a:	2308      	movs	r3, #8
 800ee0c:	425b      	negs	r3, r3
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	4413      	add	r3, r2
 800ee12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	685a      	ldr	r2, [r3, #4]
 800ee1c:	4b24      	ldr	r3, [pc, #144]	; (800eeb0 <vPortFree+0xb8>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4013      	ands	r3, r2
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10a      	bne.n	800ee3c <vPortFree+0x44>
	__asm volatile
 800ee26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2a:	f383 8811 	msr	BASEPRI, r3
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	60fb      	str	r3, [r7, #12]
}
 800ee38:	bf00      	nop
 800ee3a:	e7fe      	b.n	800ee3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d00a      	beq.n	800ee5a <vPortFree+0x62>
	__asm volatile
 800ee44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee48:	f383 8811 	msr	BASEPRI, r3
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	60bb      	str	r3, [r7, #8]
}
 800ee56:	bf00      	nop
 800ee58:	e7fe      	b.n	800ee58 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	685a      	ldr	r2, [r3, #4]
 800ee5e:	4b14      	ldr	r3, [pc, #80]	; (800eeb0 <vPortFree+0xb8>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4013      	ands	r3, r2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d01e      	beq.n	800eea6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d11a      	bne.n	800eea6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	685a      	ldr	r2, [r3, #4]
 800ee74:	4b0e      	ldr	r3, [pc, #56]	; (800eeb0 <vPortFree+0xb8>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	43db      	mvns	r3, r3
 800ee7a:	401a      	ands	r2, r3
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ee80:	f001 fe7c 	bl	8010b7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	685a      	ldr	r2, [r3, #4]
 800ee88:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <vPortFree+0xbc>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	4a09      	ldr	r2, [pc, #36]	; (800eeb4 <vPortFree+0xbc>)
 800ee90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee92:	6938      	ldr	r0, [r7, #16]
 800ee94:	f000 f874 	bl	800ef80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ee98:	4b07      	ldr	r3, [pc, #28]	; (800eeb8 <vPortFree+0xc0>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	4a06      	ldr	r2, [pc, #24]	; (800eeb8 <vPortFree+0xc0>)
 800eea0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eea2:	f001 fe79 	bl	8010b98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eea6:	bf00      	nop
 800eea8:	3718      	adds	r7, #24
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	24008be4 	.word	0x24008be4
 800eeb4:	24008bd4 	.word	0x24008bd4
 800eeb8:	24008be0 	.word	0x24008be0

0800eebc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eec2:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800eec6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eec8:	4b27      	ldr	r3, [pc, #156]	; (800ef68 <prvHeapInit+0xac>)
 800eeca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f003 0307 	and.w	r3, r3, #7
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d00c      	beq.n	800eef0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	3307      	adds	r3, #7
 800eeda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f023 0307 	bic.w	r3, r3, #7
 800eee2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eee4:	68ba      	ldr	r2, [r7, #8]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	1ad3      	subs	r3, r2, r3
 800eeea:	4a1f      	ldr	r2, [pc, #124]	; (800ef68 <prvHeapInit+0xac>)
 800eeec:	4413      	add	r3, r2
 800eeee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eef4:	4a1d      	ldr	r2, [pc, #116]	; (800ef6c <prvHeapInit+0xb0>)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eefa:	4b1c      	ldr	r3, [pc, #112]	; (800ef6c <prvHeapInit+0xb0>)
 800eefc:	2200      	movs	r2, #0
 800eefe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	4413      	add	r3, r2
 800ef06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef08:	2208      	movs	r2, #8
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	1a9b      	subs	r3, r3, r2
 800ef0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f023 0307 	bic.w	r3, r3, #7
 800ef16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	4a15      	ldr	r2, [pc, #84]	; (800ef70 <prvHeapInit+0xb4>)
 800ef1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef1e:	4b14      	ldr	r3, [pc, #80]	; (800ef70 <prvHeapInit+0xb4>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2200      	movs	r2, #0
 800ef24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef26:	4b12      	ldr	r3, [pc, #72]	; (800ef70 <prvHeapInit+0xb4>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	1ad2      	subs	r2, r2, r3
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef3c:	4b0c      	ldr	r3, [pc, #48]	; (800ef70 <prvHeapInit+0xb4>)
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	4a0a      	ldr	r2, [pc, #40]	; (800ef74 <prvHeapInit+0xb8>)
 800ef4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	4a09      	ldr	r2, [pc, #36]	; (800ef78 <prvHeapInit+0xbc>)
 800ef52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ef54:	4b09      	ldr	r3, [pc, #36]	; (800ef7c <prvHeapInit+0xc0>)
 800ef56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ef5a:	601a      	str	r2, [r3, #0]
}
 800ef5c:	bf00      	nop
 800ef5e:	3714      	adds	r7, #20
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	240013c8 	.word	0x240013c8
 800ef6c:	24008bc8 	.word	0x24008bc8
 800ef70:	24008bd0 	.word	0x24008bd0
 800ef74:	24008bd8 	.word	0x24008bd8
 800ef78:	24008bd4 	.word	0x24008bd4
 800ef7c:	24008be4 	.word	0x24008be4

0800ef80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ef80:	b480      	push	{r7}
 800ef82:	b085      	sub	sp, #20
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ef88:	4b28      	ldr	r3, [pc, #160]	; (800f02c <prvInsertBlockIntoFreeList+0xac>)
 800ef8a:	60fb      	str	r3, [r7, #12]
 800ef8c:	e002      	b.n	800ef94 <prvInsertBlockIntoFreeList+0x14>
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	60fb      	str	r3, [r7, #12]
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d8f7      	bhi.n	800ef8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	68ba      	ldr	r2, [r7, #8]
 800efa8:	4413      	add	r3, r2
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	429a      	cmp	r2, r3
 800efae:	d108      	bne.n	800efc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	685a      	ldr	r2, [r3, #4]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	441a      	add	r2, r3
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	68ba      	ldr	r2, [r7, #8]
 800efcc:	441a      	add	r2, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d118      	bne.n	800f008 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	4b15      	ldr	r3, [pc, #84]	; (800f030 <prvInsertBlockIntoFreeList+0xb0>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d00d      	beq.n	800effe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	685a      	ldr	r2, [r3, #4]
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	441a      	add	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	601a      	str	r2, [r3, #0]
 800effc:	e008      	b.n	800f010 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800effe:	4b0c      	ldr	r3, [pc, #48]	; (800f030 <prvInsertBlockIntoFreeList+0xb0>)
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	601a      	str	r2, [r3, #0]
 800f006:	e003      	b.n	800f010 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f010:	68fa      	ldr	r2, [r7, #12]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	429a      	cmp	r2, r3
 800f016:	d002      	beq.n	800f01e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f01e:	bf00      	nop
 800f020:	3714      	adds	r7, #20
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop
 800f02c:	24008bc8 	.word	0x24008bc8
 800f030:	24008bd0 	.word	0x24008bd0

0800f034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f103 0208 	add.w	r2, r3, #8
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f04c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f103 0208 	add.w	r2, r3, #8
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f103 0208 	add.w	r2, r3, #8
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2200      	movs	r2, #0
 800f066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f068:	bf00      	nop
 800f06a:	370c      	adds	r7, #12
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr

0800f074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f074:	b480      	push	{r7}
 800f076:	b083      	sub	sp, #12
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2200      	movs	r2, #0
 800f080:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f082:	bf00      	nop
 800f084:	370c      	adds	r7, #12
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f08e:	b480      	push	{r7}
 800f090:	b085      	sub	sp, #20
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
 800f096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	689a      	ldr	r2, [r3, #8]
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	689b      	ldr	r3, [r3, #8]
 800f0b0:	683a      	ldr	r2, [r7, #0]
 800f0b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	683a      	ldr	r2, [r7, #0]
 800f0b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	1c5a      	adds	r2, r3, #1
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	601a      	str	r2, [r3, #0]
}
 800f0ca:	bf00      	nop
 800f0cc:	3714      	adds	r7, #20
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d4:	4770      	bx	lr

0800f0d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f0d6:	b480      	push	{r7}
 800f0d8:	b085      	sub	sp, #20
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
 800f0de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0ec:	d103      	bne.n	800f0f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	60fb      	str	r3, [r7, #12]
 800f0f4:	e00c      	b.n	800f110 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	3308      	adds	r3, #8
 800f0fa:	60fb      	str	r3, [r7, #12]
 800f0fc:	e002      	b.n	800f104 <vListInsert+0x2e>
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	60fb      	str	r3, [r7, #12]
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d2f6      	bcs.n	800f0fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	685a      	ldr	r2, [r3, #4]
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	683a      	ldr	r2, [r7, #0]
 800f11e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	683a      	ldr	r2, [r7, #0]
 800f12a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	1c5a      	adds	r2, r3, #1
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	601a      	str	r2, [r3, #0]
}
 800f13c:	bf00      	nop
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	691b      	ldr	r3, [r3, #16]
 800f154:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	6892      	ldr	r2, [r2, #8]
 800f15e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	6852      	ldr	r2, [r2, #4]
 800f168:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	429a      	cmp	r2, r3
 800f172:	d103      	bne.n	800f17c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	689a      	ldr	r2, [r3, #8]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	1e5a      	subs	r2, r3, #1
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
}
 800f190:	4618      	mov	r0, r3
 800f192:	3714      	adds	r7, #20
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f19c:	b480      	push	{r7}
 800f19e:	b085      	sub	sp, #20
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	3b04      	subs	r3, #4
 800f1ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f1b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	3b04      	subs	r3, #4
 800f1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	f023 0201 	bic.w	r2, r3, #1
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	3b04      	subs	r3, #4
 800f1ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f1cc:	4a0c      	ldr	r2, [pc, #48]	; (800f200 <pxPortInitialiseStack+0x64>)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	3b14      	subs	r3, #20
 800f1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	3b04      	subs	r3, #4
 800f1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f06f 0202 	mvn.w	r2, #2
 800f1ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	3b20      	subs	r3, #32
 800f1f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr
 800f200:	0800f205 	.word	0x0800f205

0800f204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f20a:	2300      	movs	r3, #0
 800f20c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f20e:	4b12      	ldr	r3, [pc, #72]	; (800f258 <prvTaskExitError+0x54>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f216:	d00a      	beq.n	800f22e <prvTaskExitError+0x2a>
	__asm volatile
 800f218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21c:	f383 8811 	msr	BASEPRI, r3
 800f220:	f3bf 8f6f 	isb	sy
 800f224:	f3bf 8f4f 	dsb	sy
 800f228:	60fb      	str	r3, [r7, #12]
}
 800f22a:	bf00      	nop
 800f22c:	e7fe      	b.n	800f22c <prvTaskExitError+0x28>
	__asm volatile
 800f22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f232:	f383 8811 	msr	BASEPRI, r3
 800f236:	f3bf 8f6f 	isb	sy
 800f23a:	f3bf 8f4f 	dsb	sy
 800f23e:	60bb      	str	r3, [r7, #8]
}
 800f240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f242:	bf00      	nop
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d0fc      	beq.n	800f244 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f24a:	bf00      	nop
 800f24c:	bf00      	nop
 800f24e:	3714      	adds	r7, #20
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	24000024 	.word	0x24000024
 800f25c:	00000000 	.word	0x00000000

0800f260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f260:	4b07      	ldr	r3, [pc, #28]	; (800f280 <pxCurrentTCBConst2>)
 800f262:	6819      	ldr	r1, [r3, #0]
 800f264:	6808      	ldr	r0, [r1, #0]
 800f266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f26a:	f380 8809 	msr	PSP, r0
 800f26e:	f3bf 8f6f 	isb	sy
 800f272:	f04f 0000 	mov.w	r0, #0
 800f276:	f380 8811 	msr	BASEPRI, r0
 800f27a:	4770      	bx	lr
 800f27c:	f3af 8000 	nop.w

0800f280 <pxCurrentTCBConst2>:
 800f280:	24008c30 	.word	0x24008c30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f284:	bf00      	nop
 800f286:	bf00      	nop

0800f288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f288:	4808      	ldr	r0, [pc, #32]	; (800f2ac <prvPortStartFirstTask+0x24>)
 800f28a:	6800      	ldr	r0, [r0, #0]
 800f28c:	6800      	ldr	r0, [r0, #0]
 800f28e:	f380 8808 	msr	MSP, r0
 800f292:	f04f 0000 	mov.w	r0, #0
 800f296:	f380 8814 	msr	CONTROL, r0
 800f29a:	b662      	cpsie	i
 800f29c:	b661      	cpsie	f
 800f29e:	f3bf 8f4f 	dsb	sy
 800f2a2:	f3bf 8f6f 	isb	sy
 800f2a6:	df00      	svc	0
 800f2a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f2aa:	bf00      	nop
 800f2ac:	e000ed08 	.word	0xe000ed08

0800f2b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b086      	sub	sp, #24
 800f2b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f2b6:	4b46      	ldr	r3, [pc, #280]	; (800f3d0 <xPortStartScheduler+0x120>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	4a46      	ldr	r2, [pc, #280]	; (800f3d4 <xPortStartScheduler+0x124>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d10a      	bne.n	800f2d6 <xPortStartScheduler+0x26>
	__asm volatile
 800f2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c4:	f383 8811 	msr	BASEPRI, r3
 800f2c8:	f3bf 8f6f 	isb	sy
 800f2cc:	f3bf 8f4f 	dsb	sy
 800f2d0:	613b      	str	r3, [r7, #16]
}
 800f2d2:	bf00      	nop
 800f2d4:	e7fe      	b.n	800f2d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f2d6:	4b3e      	ldr	r3, [pc, #248]	; (800f3d0 <xPortStartScheduler+0x120>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a3f      	ldr	r2, [pc, #252]	; (800f3d8 <xPortStartScheduler+0x128>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d10a      	bne.n	800f2f6 <xPortStartScheduler+0x46>
	__asm volatile
 800f2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e4:	f383 8811 	msr	BASEPRI, r3
 800f2e8:	f3bf 8f6f 	isb	sy
 800f2ec:	f3bf 8f4f 	dsb	sy
 800f2f0:	60fb      	str	r3, [r7, #12]
}
 800f2f2:	bf00      	nop
 800f2f4:	e7fe      	b.n	800f2f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f2f6:	4b39      	ldr	r3, [pc, #228]	; (800f3dc <xPortStartScheduler+0x12c>)
 800f2f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	22ff      	movs	r2, #255	; 0xff
 800f306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f310:	78fb      	ldrb	r3, [r7, #3]
 800f312:	b2db      	uxtb	r3, r3
 800f314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f318:	b2da      	uxtb	r2, r3
 800f31a:	4b31      	ldr	r3, [pc, #196]	; (800f3e0 <xPortStartScheduler+0x130>)
 800f31c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f31e:	4b31      	ldr	r3, [pc, #196]	; (800f3e4 <xPortStartScheduler+0x134>)
 800f320:	2207      	movs	r2, #7
 800f322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f324:	e009      	b.n	800f33a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f326:	4b2f      	ldr	r3, [pc, #188]	; (800f3e4 <xPortStartScheduler+0x134>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	3b01      	subs	r3, #1
 800f32c:	4a2d      	ldr	r2, [pc, #180]	; (800f3e4 <xPortStartScheduler+0x134>)
 800f32e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f330:	78fb      	ldrb	r3, [r7, #3]
 800f332:	b2db      	uxtb	r3, r3
 800f334:	005b      	lsls	r3, r3, #1
 800f336:	b2db      	uxtb	r3, r3
 800f338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f33a:	78fb      	ldrb	r3, [r7, #3]
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f342:	2b80      	cmp	r3, #128	; 0x80
 800f344:	d0ef      	beq.n	800f326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f346:	4b27      	ldr	r3, [pc, #156]	; (800f3e4 <xPortStartScheduler+0x134>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f1c3 0307 	rsb	r3, r3, #7
 800f34e:	2b04      	cmp	r3, #4
 800f350:	d00a      	beq.n	800f368 <xPortStartScheduler+0xb8>
	__asm volatile
 800f352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f356:	f383 8811 	msr	BASEPRI, r3
 800f35a:	f3bf 8f6f 	isb	sy
 800f35e:	f3bf 8f4f 	dsb	sy
 800f362:	60bb      	str	r3, [r7, #8]
}
 800f364:	bf00      	nop
 800f366:	e7fe      	b.n	800f366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f368:	4b1e      	ldr	r3, [pc, #120]	; (800f3e4 <xPortStartScheduler+0x134>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	021b      	lsls	r3, r3, #8
 800f36e:	4a1d      	ldr	r2, [pc, #116]	; (800f3e4 <xPortStartScheduler+0x134>)
 800f370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f372:	4b1c      	ldr	r3, [pc, #112]	; (800f3e4 <xPortStartScheduler+0x134>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f37a:	4a1a      	ldr	r2, [pc, #104]	; (800f3e4 <xPortStartScheduler+0x134>)
 800f37c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	b2da      	uxtb	r2, r3
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f386:	4b18      	ldr	r3, [pc, #96]	; (800f3e8 <xPortStartScheduler+0x138>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4a17      	ldr	r2, [pc, #92]	; (800f3e8 <xPortStartScheduler+0x138>)
 800f38c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f392:	4b15      	ldr	r3, [pc, #84]	; (800f3e8 <xPortStartScheduler+0x138>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	4a14      	ldr	r2, [pc, #80]	; (800f3e8 <xPortStartScheduler+0x138>)
 800f398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f39c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f39e:	f000 f8dd 	bl	800f55c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f3a2:	4b12      	ldr	r3, [pc, #72]	; (800f3ec <xPortStartScheduler+0x13c>)
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f3a8:	f000 f8fc 	bl	800f5a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f3ac:	4b10      	ldr	r3, [pc, #64]	; (800f3f0 <xPortStartScheduler+0x140>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a0f      	ldr	r2, [pc, #60]	; (800f3f0 <xPortStartScheduler+0x140>)
 800f3b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f3b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f3b8:	f7ff ff66 	bl	800f288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f3bc:	f001 fd62 	bl	8010e84 <vTaskSwitchContext>
	prvTaskExitError();
 800f3c0:	f7ff ff20 	bl	800f204 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f3c4:	2300      	movs	r3, #0
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3718      	adds	r7, #24
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	e000ed00 	.word	0xe000ed00
 800f3d4:	410fc271 	.word	0x410fc271
 800f3d8:	410fc270 	.word	0x410fc270
 800f3dc:	e000e400 	.word	0xe000e400
 800f3e0:	24008be8 	.word	0x24008be8
 800f3e4:	24008bec 	.word	0x24008bec
 800f3e8:	e000ed20 	.word	0xe000ed20
 800f3ec:	24000024 	.word	0x24000024
 800f3f0:	e000ef34 	.word	0xe000ef34

0800f3f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b083      	sub	sp, #12
 800f3f8:	af00      	add	r7, sp, #0
	__asm volatile
 800f3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3fe:	f383 8811 	msr	BASEPRI, r3
 800f402:	f3bf 8f6f 	isb	sy
 800f406:	f3bf 8f4f 	dsb	sy
 800f40a:	607b      	str	r3, [r7, #4]
}
 800f40c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f40e:	4b0f      	ldr	r3, [pc, #60]	; (800f44c <vPortEnterCritical+0x58>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	3301      	adds	r3, #1
 800f414:	4a0d      	ldr	r2, [pc, #52]	; (800f44c <vPortEnterCritical+0x58>)
 800f416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f418:	4b0c      	ldr	r3, [pc, #48]	; (800f44c <vPortEnterCritical+0x58>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	d10f      	bne.n	800f440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f420:	4b0b      	ldr	r3, [pc, #44]	; (800f450 <vPortEnterCritical+0x5c>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	b2db      	uxtb	r3, r3
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00a      	beq.n	800f440 <vPortEnterCritical+0x4c>
	__asm volatile
 800f42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f42e:	f383 8811 	msr	BASEPRI, r3
 800f432:	f3bf 8f6f 	isb	sy
 800f436:	f3bf 8f4f 	dsb	sy
 800f43a:	603b      	str	r3, [r7, #0]
}
 800f43c:	bf00      	nop
 800f43e:	e7fe      	b.n	800f43e <vPortEnterCritical+0x4a>
	}
}
 800f440:	bf00      	nop
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr
 800f44c:	24000024 	.word	0x24000024
 800f450:	e000ed04 	.word	0xe000ed04

0800f454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f454:	b480      	push	{r7}
 800f456:	b083      	sub	sp, #12
 800f458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f45a:	4b12      	ldr	r3, [pc, #72]	; (800f4a4 <vPortExitCritical+0x50>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d10a      	bne.n	800f478 <vPortExitCritical+0x24>
	__asm volatile
 800f462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f466:	f383 8811 	msr	BASEPRI, r3
 800f46a:	f3bf 8f6f 	isb	sy
 800f46e:	f3bf 8f4f 	dsb	sy
 800f472:	607b      	str	r3, [r7, #4]
}
 800f474:	bf00      	nop
 800f476:	e7fe      	b.n	800f476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f478:	4b0a      	ldr	r3, [pc, #40]	; (800f4a4 <vPortExitCritical+0x50>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	3b01      	subs	r3, #1
 800f47e:	4a09      	ldr	r2, [pc, #36]	; (800f4a4 <vPortExitCritical+0x50>)
 800f480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f482:	4b08      	ldr	r3, [pc, #32]	; (800f4a4 <vPortExitCritical+0x50>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d105      	bne.n	800f496 <vPortExitCritical+0x42>
 800f48a:	2300      	movs	r3, #0
 800f48c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f496:	bf00      	nop
 800f498:	370c      	adds	r7, #12
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr
 800f4a2:	bf00      	nop
 800f4a4:	24000024 	.word	0x24000024
	...

0800f4b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f4b0:	f3ef 8009 	mrs	r0, PSP
 800f4b4:	f3bf 8f6f 	isb	sy
 800f4b8:	4b15      	ldr	r3, [pc, #84]	; (800f510 <pxCurrentTCBConst>)
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	f01e 0f10 	tst.w	lr, #16
 800f4c0:	bf08      	it	eq
 800f4c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f4c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ca:	6010      	str	r0, [r2, #0]
 800f4cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f4d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f4d4:	f380 8811 	msr	BASEPRI, r0
 800f4d8:	f3bf 8f4f 	dsb	sy
 800f4dc:	f3bf 8f6f 	isb	sy
 800f4e0:	f001 fcd0 	bl	8010e84 <vTaskSwitchContext>
 800f4e4:	f04f 0000 	mov.w	r0, #0
 800f4e8:	f380 8811 	msr	BASEPRI, r0
 800f4ec:	bc09      	pop	{r0, r3}
 800f4ee:	6819      	ldr	r1, [r3, #0]
 800f4f0:	6808      	ldr	r0, [r1, #0]
 800f4f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f6:	f01e 0f10 	tst.w	lr, #16
 800f4fa:	bf08      	it	eq
 800f4fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f500:	f380 8809 	msr	PSP, r0
 800f504:	f3bf 8f6f 	isb	sy
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop
 800f50c:	f3af 8000 	nop.w

0800f510 <pxCurrentTCBConst>:
 800f510:	24008c30 	.word	0x24008c30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f514:	bf00      	nop
 800f516:	bf00      	nop

0800f518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
	__asm volatile
 800f51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	607b      	str	r3, [r7, #4]
}
 800f530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f532:	f001 fbef 	bl	8010d14 <xTaskIncrementTick>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d003      	beq.n	800f544 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f53c:	4b06      	ldr	r3, [pc, #24]	; (800f558 <SysTick_Handler+0x40>)
 800f53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f542:	601a      	str	r2, [r3, #0]
 800f544:	2300      	movs	r3, #0
 800f546:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	f383 8811 	msr	BASEPRI, r3
}
 800f54e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f550:	bf00      	nop
 800f552:	3708      	adds	r7, #8
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	e000ed04 	.word	0xe000ed04

0800f55c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f55c:	b480      	push	{r7}
 800f55e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f560:	4b0b      	ldr	r3, [pc, #44]	; (800f590 <vPortSetupTimerInterrupt+0x34>)
 800f562:	2200      	movs	r2, #0
 800f564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f566:	4b0b      	ldr	r3, [pc, #44]	; (800f594 <vPortSetupTimerInterrupt+0x38>)
 800f568:	2200      	movs	r2, #0
 800f56a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f56c:	4b0a      	ldr	r3, [pc, #40]	; (800f598 <vPortSetupTimerInterrupt+0x3c>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4a0a      	ldr	r2, [pc, #40]	; (800f59c <vPortSetupTimerInterrupt+0x40>)
 800f572:	fba2 2303 	umull	r2, r3, r2, r3
 800f576:	099b      	lsrs	r3, r3, #6
 800f578:	4a09      	ldr	r2, [pc, #36]	; (800f5a0 <vPortSetupTimerInterrupt+0x44>)
 800f57a:	3b01      	subs	r3, #1
 800f57c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f57e:	4b04      	ldr	r3, [pc, #16]	; (800f590 <vPortSetupTimerInterrupt+0x34>)
 800f580:	2207      	movs	r2, #7
 800f582:	601a      	str	r2, [r3, #0]
}
 800f584:	bf00      	nop
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr
 800f58e:	bf00      	nop
 800f590:	e000e010 	.word	0xe000e010
 800f594:	e000e018 	.word	0xe000e018
 800f598:	24000000 	.word	0x24000000
 800f59c:	10624dd3 	.word	0x10624dd3
 800f5a0:	e000e014 	.word	0xe000e014

0800f5a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f5a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f5b4 <vPortEnableVFP+0x10>
 800f5a8:	6801      	ldr	r1, [r0, #0]
 800f5aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f5ae:	6001      	str	r1, [r0, #0]
 800f5b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f5b2:	bf00      	nop
 800f5b4:	e000ed88 	.word	0xe000ed88

0800f5b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b085      	sub	sp, #20
 800f5bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f5be:	f3ef 8305 	mrs	r3, IPSR
 800f5c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2b0f      	cmp	r3, #15
 800f5c8:	d914      	bls.n	800f5f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f5ca:	4a17      	ldr	r2, [pc, #92]	; (800f628 <vPortValidateInterruptPriority+0x70>)
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f5d4:	4b15      	ldr	r3, [pc, #84]	; (800f62c <vPortValidateInterruptPriority+0x74>)
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	7afa      	ldrb	r2, [r7, #11]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d20a      	bcs.n	800f5f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	607b      	str	r3, [r7, #4]
}
 800f5f0:	bf00      	nop
 800f5f2:	e7fe      	b.n	800f5f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f5f4:	4b0e      	ldr	r3, [pc, #56]	; (800f630 <vPortValidateInterruptPriority+0x78>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f5fc:	4b0d      	ldr	r3, [pc, #52]	; (800f634 <vPortValidateInterruptPriority+0x7c>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	429a      	cmp	r2, r3
 800f602:	d90a      	bls.n	800f61a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f608:	f383 8811 	msr	BASEPRI, r3
 800f60c:	f3bf 8f6f 	isb	sy
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	603b      	str	r3, [r7, #0]
}
 800f616:	bf00      	nop
 800f618:	e7fe      	b.n	800f618 <vPortValidateInterruptPriority+0x60>
	}
 800f61a:	bf00      	nop
 800f61c:	3714      	adds	r7, #20
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr
 800f626:	bf00      	nop
 800f628:	e000e3f0 	.word	0xe000e3f0
 800f62c:	24008be8 	.word	0x24008be8
 800f630:	e000ed0c 	.word	0xe000ed0c
 800f634:	24008bec 	.word	0x24008bec

0800f638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d10a      	bne.n	800f662 <xQueueGenericReset+0x2a>
	__asm volatile
 800f64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	60bb      	str	r3, [r7, #8]
}
 800f65e:	bf00      	nop
 800f660:	e7fe      	b.n	800f660 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f662:	f7ff fec7 	bl	800f3f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f66e:	68f9      	ldr	r1, [r7, #12]
 800f670:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f672:	fb01 f303 	mul.w	r3, r1, r3
 800f676:	441a      	add	r2, r3
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f692:	3b01      	subs	r3, #1
 800f694:	68f9      	ldr	r1, [r7, #12]
 800f696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f698:	fb01 f303 	mul.w	r3, r1, r3
 800f69c:	441a      	add	r2, r3
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	22ff      	movs	r2, #255	; 0xff
 800f6a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	22ff      	movs	r2, #255	; 0xff
 800f6ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d114      	bne.n	800f6e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	691b      	ldr	r3, [r3, #16]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d01a      	beq.n	800f6f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	3310      	adds	r3, #16
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f001 fc73 	bl	8010fb0 <xTaskRemoveFromEventList>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d012      	beq.n	800f6f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f6d0:	4b0c      	ldr	r3, [pc, #48]	; (800f704 <xQueueGenericReset+0xcc>)
 800f6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6d6:	601a      	str	r2, [r3, #0]
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	f3bf 8f6f 	isb	sy
 800f6e0:	e009      	b.n	800f6f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	3310      	adds	r3, #16
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7ff fca4 	bl	800f034 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	3324      	adds	r3, #36	; 0x24
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7ff fc9f 	bl	800f034 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f6f6:	f7ff fead 	bl	800f454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f6fa:	2301      	movs	r3, #1
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3710      	adds	r7, #16
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	e000ed04 	.word	0xe000ed04

0800f708 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b08e      	sub	sp, #56	; 0x38
 800f70c:	af02      	add	r7, sp, #8
 800f70e:	60f8      	str	r0, [r7, #12]
 800f710:	60b9      	str	r1, [r7, #8]
 800f712:	607a      	str	r2, [r7, #4]
 800f714:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d10a      	bne.n	800f732 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f720:	f383 8811 	msr	BASEPRI, r3
 800f724:	f3bf 8f6f 	isb	sy
 800f728:	f3bf 8f4f 	dsb	sy
 800f72c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f72e:	bf00      	nop
 800f730:	e7fe      	b.n	800f730 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d10a      	bne.n	800f74e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f73c:	f383 8811 	msr	BASEPRI, r3
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	f3bf 8f4f 	dsb	sy
 800f748:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f74a:	bf00      	nop
 800f74c:	e7fe      	b.n	800f74c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d002      	beq.n	800f75a <xQueueGenericCreateStatic+0x52>
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d001      	beq.n	800f75e <xQueueGenericCreateStatic+0x56>
 800f75a:	2301      	movs	r3, #1
 800f75c:	e000      	b.n	800f760 <xQueueGenericCreateStatic+0x58>
 800f75e:	2300      	movs	r3, #0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d10a      	bne.n	800f77a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f768:	f383 8811 	msr	BASEPRI, r3
 800f76c:	f3bf 8f6f 	isb	sy
 800f770:	f3bf 8f4f 	dsb	sy
 800f774:	623b      	str	r3, [r7, #32]
}
 800f776:	bf00      	nop
 800f778:	e7fe      	b.n	800f778 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d102      	bne.n	800f786 <xQueueGenericCreateStatic+0x7e>
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d101      	bne.n	800f78a <xQueueGenericCreateStatic+0x82>
 800f786:	2301      	movs	r3, #1
 800f788:	e000      	b.n	800f78c <xQueueGenericCreateStatic+0x84>
 800f78a:	2300      	movs	r3, #0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d10a      	bne.n	800f7a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f794:	f383 8811 	msr	BASEPRI, r3
 800f798:	f3bf 8f6f 	isb	sy
 800f79c:	f3bf 8f4f 	dsb	sy
 800f7a0:	61fb      	str	r3, [r7, #28]
}
 800f7a2:	bf00      	nop
 800f7a4:	e7fe      	b.n	800f7a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f7a6:	2348      	movs	r3, #72	; 0x48
 800f7a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	2b48      	cmp	r3, #72	; 0x48
 800f7ae:	d00a      	beq.n	800f7c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b4:	f383 8811 	msr	BASEPRI, r3
 800f7b8:	f3bf 8f6f 	isb	sy
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	61bb      	str	r3, [r7, #24]
}
 800f7c2:	bf00      	nop
 800f7c4:	e7fe      	b.n	800f7c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f7c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00d      	beq.n	800f7ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f7da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e0:	9300      	str	r3, [sp, #0]
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	68b9      	ldr	r1, [r7, #8]
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f000 f83f 	bl	800f86c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3730      	adds	r7, #48	; 0x30
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b08a      	sub	sp, #40	; 0x28
 800f7fc:	af02      	add	r7, sp, #8
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	4613      	mov	r3, r2
 800f804:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d10a      	bne.n	800f822 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f810:	f383 8811 	msr	BASEPRI, r3
 800f814:	f3bf 8f6f 	isb	sy
 800f818:	f3bf 8f4f 	dsb	sy
 800f81c:	613b      	str	r3, [r7, #16]
}
 800f81e:	bf00      	nop
 800f820:	e7fe      	b.n	800f820 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	68ba      	ldr	r2, [r7, #8]
 800f826:	fb02 f303 	mul.w	r3, r2, r3
 800f82a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	3348      	adds	r3, #72	; 0x48
 800f830:	4618      	mov	r0, r3
 800f832:	f7ff fa15 	bl	800ec60 <pvPortMalloc>
 800f836:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f838:	69bb      	ldr	r3, [r7, #24]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d011      	beq.n	800f862 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	3348      	adds	r3, #72	; 0x48
 800f846:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f848:	69bb      	ldr	r3, [r7, #24]
 800f84a:	2200      	movs	r2, #0
 800f84c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f850:	79fa      	ldrb	r2, [r7, #7]
 800f852:	69bb      	ldr	r3, [r7, #24]
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	4613      	mov	r3, r2
 800f858:	697a      	ldr	r2, [r7, #20]
 800f85a:	68b9      	ldr	r1, [r7, #8]
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	f000 f805 	bl	800f86c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f862:	69bb      	ldr	r3, [r7, #24]
	}
 800f864:	4618      	mov	r0, r3
 800f866:	3720      	adds	r7, #32
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b084      	sub	sp, #16
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
 800f878:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d103      	bne.n	800f888 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f880:	69bb      	ldr	r3, [r7, #24]
 800f882:	69ba      	ldr	r2, [r7, #24]
 800f884:	601a      	str	r2, [r3, #0]
 800f886:	e002      	b.n	800f88e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f888:	69bb      	ldr	r3, [r7, #24]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f88e:	69bb      	ldr	r3, [r7, #24]
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	68ba      	ldr	r2, [r7, #8]
 800f898:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f89a:	2101      	movs	r1, #1
 800f89c:	69b8      	ldr	r0, [r7, #24]
 800f89e:	f7ff fecb 	bl	800f638 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f8a2:	bf00      	nop
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b082      	sub	sp, #8
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00e      	beq.n	800f8d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 f837 	bl	800f944 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f8d6:	bf00      	nop
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b086      	sub	sp, #24
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	617b      	str	r3, [r7, #20]
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f8f0:	79fb      	ldrb	r3, [r7, #7]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	6939      	ldr	r1, [r7, #16]
 800f8f6:	6978      	ldr	r0, [r7, #20]
 800f8f8:	f7ff ff7e 	bl	800f7f8 <xQueueGenericCreate>
 800f8fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f8fe:	68f8      	ldr	r0, [r7, #12]
 800f900:	f7ff ffd3 	bl	800f8aa <prvInitialiseMutex>

		return xNewQueue;
 800f904:	68fb      	ldr	r3, [r7, #12]
	}
 800f906:	4618      	mov	r0, r3
 800f908:	3718      	adds	r7, #24
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}

0800f90e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f90e:	b580      	push	{r7, lr}
 800f910:	b088      	sub	sp, #32
 800f912:	af02      	add	r7, sp, #8
 800f914:	4603      	mov	r3, r0
 800f916:	6039      	str	r1, [r7, #0]
 800f918:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f91a:	2301      	movs	r3, #1
 800f91c:	617b      	str	r3, [r7, #20]
 800f91e:	2300      	movs	r3, #0
 800f920:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f922:	79fb      	ldrb	r3, [r7, #7]
 800f924:	9300      	str	r3, [sp, #0]
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	2200      	movs	r2, #0
 800f92a:	6939      	ldr	r1, [r7, #16]
 800f92c:	6978      	ldr	r0, [r7, #20]
 800f92e:	f7ff feeb 	bl	800f708 <xQueueGenericCreateStatic>
 800f932:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f7ff ffb8 	bl	800f8aa <prvInitialiseMutex>

		return xNewQueue;
 800f93a:	68fb      	ldr	r3, [r7, #12]
	}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3718      	adds	r7, #24
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b08e      	sub	sp, #56	; 0x38
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	607a      	str	r2, [r7, #4]
 800f950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f952:	2300      	movs	r3, #0
 800f954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d10a      	bne.n	800f976 <xQueueGenericSend+0x32>
	__asm volatile
 800f960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f964:	f383 8811 	msr	BASEPRI, r3
 800f968:	f3bf 8f6f 	isb	sy
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f972:	bf00      	nop
 800f974:	e7fe      	b.n	800f974 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d103      	bne.n	800f984 <xQueueGenericSend+0x40>
 800f97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f980:	2b00      	cmp	r3, #0
 800f982:	d101      	bne.n	800f988 <xQueueGenericSend+0x44>
 800f984:	2301      	movs	r3, #1
 800f986:	e000      	b.n	800f98a <xQueueGenericSend+0x46>
 800f988:	2300      	movs	r3, #0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d10a      	bne.n	800f9a4 <xQueueGenericSend+0x60>
	__asm volatile
 800f98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f992:	f383 8811 	msr	BASEPRI, r3
 800f996:	f3bf 8f6f 	isb	sy
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f9a0:	bf00      	nop
 800f9a2:	e7fe      	b.n	800f9a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	d103      	bne.n	800f9b2 <xQueueGenericSend+0x6e>
 800f9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	d101      	bne.n	800f9b6 <xQueueGenericSend+0x72>
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	e000      	b.n	800f9b8 <xQueueGenericSend+0x74>
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d10a      	bne.n	800f9d2 <xQueueGenericSend+0x8e>
	__asm volatile
 800f9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c0:	f383 8811 	msr	BASEPRI, r3
 800f9c4:	f3bf 8f6f 	isb	sy
 800f9c8:	f3bf 8f4f 	dsb	sy
 800f9cc:	623b      	str	r3, [r7, #32]
}
 800f9ce:	bf00      	nop
 800f9d0:	e7fe      	b.n	800f9d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f9d2:	f001 fcad 	bl	8011330 <xTaskGetSchedulerState>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d102      	bne.n	800f9e2 <xQueueGenericSend+0x9e>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d101      	bne.n	800f9e6 <xQueueGenericSend+0xa2>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e000      	b.n	800f9e8 <xQueueGenericSend+0xa4>
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d10a      	bne.n	800fa02 <xQueueGenericSend+0xbe>
	__asm volatile
 800f9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f0:	f383 8811 	msr	BASEPRI, r3
 800f9f4:	f3bf 8f6f 	isb	sy
 800f9f8:	f3bf 8f4f 	dsb	sy
 800f9fc:	61fb      	str	r3, [r7, #28]
}
 800f9fe:	bf00      	nop
 800fa00:	e7fe      	b.n	800fa00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa02:	f7ff fcf7 	bl	800f3f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d302      	bcc.n	800fa18 <xQueueGenericSend+0xd4>
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	2b02      	cmp	r3, #2
 800fa16:	d129      	bne.n	800fa6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fa18:	683a      	ldr	r2, [r7, #0]
 800fa1a:	68b9      	ldr	r1, [r7, #8]
 800fa1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa1e:	f000 fc9a 	bl	8010356 <prvCopyDataToQueue>
 800fa22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d010      	beq.n	800fa4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2e:	3324      	adds	r3, #36	; 0x24
 800fa30:	4618      	mov	r0, r3
 800fa32:	f001 fabd 	bl	8010fb0 <xTaskRemoveFromEventList>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d013      	beq.n	800fa64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fa3c:	4b3f      	ldr	r3, [pc, #252]	; (800fb3c <xQueueGenericSend+0x1f8>)
 800fa3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa42:	601a      	str	r2, [r3, #0]
 800fa44:	f3bf 8f4f 	dsb	sy
 800fa48:	f3bf 8f6f 	isb	sy
 800fa4c:	e00a      	b.n	800fa64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d007      	beq.n	800fa64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fa54:	4b39      	ldr	r3, [pc, #228]	; (800fb3c <xQueueGenericSend+0x1f8>)
 800fa56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa5a:	601a      	str	r2, [r3, #0]
 800fa5c:	f3bf 8f4f 	dsb	sy
 800fa60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fa64:	f7ff fcf6 	bl	800f454 <vPortExitCritical>
				return pdPASS;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	e063      	b.n	800fb34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d103      	bne.n	800fa7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fa72:	f7ff fcef 	bl	800f454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fa76:	2300      	movs	r3, #0
 800fa78:	e05c      	b.n	800fb34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fa7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d106      	bne.n	800fa8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fa80:	f107 0314 	add.w	r3, r7, #20
 800fa84:	4618      	mov	r0, r3
 800fa86:	f001 faf5 	bl	8011074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa8e:	f7ff fce1 	bl	800f454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa92:	f001 f873 	bl	8010b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa96:	f7ff fcad 	bl	800f3f4 <vPortEnterCritical>
 800fa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800faa0:	b25b      	sxtb	r3, r3
 800faa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800faa6:	d103      	bne.n	800fab0 <xQueueGenericSend+0x16c>
 800faa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faaa:	2200      	movs	r2, #0
 800faac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fab6:	b25b      	sxtb	r3, r3
 800fab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fabc:	d103      	bne.n	800fac6 <xQueueGenericSend+0x182>
 800fabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac0:	2200      	movs	r2, #0
 800fac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fac6:	f7ff fcc5 	bl	800f454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800faca:	1d3a      	adds	r2, r7, #4
 800facc:	f107 0314 	add.w	r3, r7, #20
 800fad0:	4611      	mov	r1, r2
 800fad2:	4618      	mov	r0, r3
 800fad4:	f001 fae4 	bl	80110a0 <xTaskCheckForTimeOut>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d124      	bne.n	800fb28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fae0:	f000 fd31 	bl	8010546 <prvIsQueueFull>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d018      	beq.n	800fb1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800faea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faec:	3310      	adds	r3, #16
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	4611      	mov	r1, r2
 800faf2:	4618      	mov	r0, r3
 800faf4:	f001 fa38 	bl	8010f68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800faf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fafa:	f000 fcbc 	bl	8010476 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fafe:	f001 f84b 	bl	8010b98 <xTaskResumeAll>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	f47f af7c 	bne.w	800fa02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fb0a:	4b0c      	ldr	r3, [pc, #48]	; (800fb3c <xQueueGenericSend+0x1f8>)
 800fb0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb10:	601a      	str	r2, [r3, #0]
 800fb12:	f3bf 8f4f 	dsb	sy
 800fb16:	f3bf 8f6f 	isb	sy
 800fb1a:	e772      	b.n	800fa02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fb1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb1e:	f000 fcaa 	bl	8010476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fb22:	f001 f839 	bl	8010b98 <xTaskResumeAll>
 800fb26:	e76c      	b.n	800fa02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fb28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb2a:	f000 fca4 	bl	8010476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb2e:	f001 f833 	bl	8010b98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fb32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3738      	adds	r7, #56	; 0x38
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	e000ed04 	.word	0xe000ed04

0800fb40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b090      	sub	sp, #64	; 0x40
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	607a      	str	r2, [r7, #4]
 800fb4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d10a      	bne.n	800fb6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5c:	f383 8811 	msr	BASEPRI, r3
 800fb60:	f3bf 8f6f 	isb	sy
 800fb64:	f3bf 8f4f 	dsb	sy
 800fb68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fb6a:	bf00      	nop
 800fb6c:	e7fe      	b.n	800fb6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d103      	bne.n	800fb7c <xQueueGenericSendFromISR+0x3c>
 800fb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d101      	bne.n	800fb80 <xQueueGenericSendFromISR+0x40>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e000      	b.n	800fb82 <xQueueGenericSendFromISR+0x42>
 800fb80:	2300      	movs	r3, #0
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d10a      	bne.n	800fb9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8a:	f383 8811 	msr	BASEPRI, r3
 800fb8e:	f3bf 8f6f 	isb	sy
 800fb92:	f3bf 8f4f 	dsb	sy
 800fb96:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb98:	bf00      	nop
 800fb9a:	e7fe      	b.n	800fb9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d103      	bne.n	800fbaa <xQueueGenericSendFromISR+0x6a>
 800fba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d101      	bne.n	800fbae <xQueueGenericSendFromISR+0x6e>
 800fbaa:	2301      	movs	r3, #1
 800fbac:	e000      	b.n	800fbb0 <xQueueGenericSendFromISR+0x70>
 800fbae:	2300      	movs	r3, #0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d10a      	bne.n	800fbca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb8:	f383 8811 	msr	BASEPRI, r3
 800fbbc:	f3bf 8f6f 	isb	sy
 800fbc0:	f3bf 8f4f 	dsb	sy
 800fbc4:	623b      	str	r3, [r7, #32]
}
 800fbc6:	bf00      	nop
 800fbc8:	e7fe      	b.n	800fbc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fbca:	f7ff fcf5 	bl	800f5b8 <vPortValidateInterruptPriority>
	__asm volatile
 800fbce:	f3ef 8211 	mrs	r2, BASEPRI
 800fbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd6:	f383 8811 	msr	BASEPRI, r3
 800fbda:	f3bf 8f6f 	isb	sy
 800fbde:	f3bf 8f4f 	dsb	sy
 800fbe2:	61fa      	str	r2, [r7, #28]
 800fbe4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800fbe6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fbe8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d302      	bcc.n	800fbfc <xQueueGenericSendFromISR+0xbc>
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	2b02      	cmp	r3, #2
 800fbfa:	d12f      	bne.n	800fc5c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fc0c:	683a      	ldr	r2, [r7, #0]
 800fc0e:	68b9      	ldr	r1, [r7, #8]
 800fc10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc12:	f000 fba0 	bl	8010356 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fc16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fc1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc1e:	d112      	bne.n	800fc46 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d016      	beq.n	800fc56 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2a:	3324      	adds	r3, #36	; 0x24
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f001 f9bf 	bl	8010fb0 <xTaskRemoveFromEventList>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d00e      	beq.n	800fc56 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d00b      	beq.n	800fc56 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2201      	movs	r2, #1
 800fc42:	601a      	str	r2, [r3, #0]
 800fc44:	e007      	b.n	800fc56 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fc46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	b25a      	sxtb	r2, r3
 800fc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fc56:	2301      	movs	r3, #1
 800fc58:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fc5a:	e001      	b.n	800fc60 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc62:	617b      	str	r3, [r7, #20]
	__asm volatile
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	f383 8811 	msr	BASEPRI, r3
}
 800fc6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3740      	adds	r7, #64	; 0x40
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b08e      	sub	sp, #56	; 0x38
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
 800fc7e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d10a      	bne.n	800fca0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800fc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8e:	f383 8811 	msr	BASEPRI, r3
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	f3bf 8f4f 	dsb	sy
 800fc9a:	623b      	str	r3, [r7, #32]
}
 800fc9c:	bf00      	nop
 800fc9e:	e7fe      	b.n	800fc9e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d00a      	beq.n	800fcbe <xQueueGiveFromISR+0x48>
	__asm volatile
 800fca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcac:	f383 8811 	msr	BASEPRI, r3
 800fcb0:	f3bf 8f6f 	isb	sy
 800fcb4:	f3bf 8f4f 	dsb	sy
 800fcb8:	61fb      	str	r3, [r7, #28]
}
 800fcba:	bf00      	nop
 800fcbc:	e7fe      	b.n	800fcbc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d103      	bne.n	800fcce <xQueueGiveFromISR+0x58>
 800fcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc8:	689b      	ldr	r3, [r3, #8]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d101      	bne.n	800fcd2 <xQueueGiveFromISR+0x5c>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	e000      	b.n	800fcd4 <xQueueGiveFromISR+0x5e>
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d10a      	bne.n	800fcee <xQueueGiveFromISR+0x78>
	__asm volatile
 800fcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcdc:	f383 8811 	msr	BASEPRI, r3
 800fce0:	f3bf 8f6f 	isb	sy
 800fce4:	f3bf 8f4f 	dsb	sy
 800fce8:	61bb      	str	r3, [r7, #24]
}
 800fcea:	bf00      	nop
 800fcec:	e7fe      	b.n	800fcec <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcee:	f7ff fc63 	bl	800f5b8 <vPortValidateInterruptPriority>
	__asm volatile
 800fcf2:	f3ef 8211 	mrs	r2, BASEPRI
 800fcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfa:	f383 8811 	msr	BASEPRI, r3
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f3bf 8f4f 	dsb	sy
 800fd06:	617a      	str	r2, [r7, #20]
 800fd08:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fd0a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd12:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d22b      	bcs.n	800fd76 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2a:	1c5a      	adds	r2, r3, #1
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fd30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd38:	d112      	bne.n	800fd60 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d016      	beq.n	800fd70 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd44:	3324      	adds	r3, #36	; 0x24
 800fd46:	4618      	mov	r0, r3
 800fd48:	f001 f932 	bl	8010fb0 <xTaskRemoveFromEventList>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d00e      	beq.n	800fd70 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d00b      	beq.n	800fd70 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	e007      	b.n	800fd70 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd64:	3301      	adds	r3, #1
 800fd66:	b2db      	uxtb	r3, r3
 800fd68:	b25a      	sxtb	r2, r3
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fd70:	2301      	movs	r3, #1
 800fd72:	637b      	str	r3, [r7, #52]	; 0x34
 800fd74:	e001      	b.n	800fd7a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fd76:	2300      	movs	r3, #0
 800fd78:	637b      	str	r3, [r7, #52]	; 0x34
 800fd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f383 8811 	msr	BASEPRI, r3
}
 800fd84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3738      	adds	r7, #56	; 0x38
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b08c      	sub	sp, #48	; 0x30
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d10a      	bne.n	800fdc0 <xQueueReceive+0x30>
	__asm volatile
 800fdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdae:	f383 8811 	msr	BASEPRI, r3
 800fdb2:	f3bf 8f6f 	isb	sy
 800fdb6:	f3bf 8f4f 	dsb	sy
 800fdba:	623b      	str	r3, [r7, #32]
}
 800fdbc:	bf00      	nop
 800fdbe:	e7fe      	b.n	800fdbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d103      	bne.n	800fdce <xQueueReceive+0x3e>
 800fdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d101      	bne.n	800fdd2 <xQueueReceive+0x42>
 800fdce:	2301      	movs	r3, #1
 800fdd0:	e000      	b.n	800fdd4 <xQueueReceive+0x44>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d10a      	bne.n	800fdee <xQueueReceive+0x5e>
	__asm volatile
 800fdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fddc:	f383 8811 	msr	BASEPRI, r3
 800fde0:	f3bf 8f6f 	isb	sy
 800fde4:	f3bf 8f4f 	dsb	sy
 800fde8:	61fb      	str	r3, [r7, #28]
}
 800fdea:	bf00      	nop
 800fdec:	e7fe      	b.n	800fdec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fdee:	f001 fa9f 	bl	8011330 <xTaskGetSchedulerState>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d102      	bne.n	800fdfe <xQueueReceive+0x6e>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d101      	bne.n	800fe02 <xQueueReceive+0x72>
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e000      	b.n	800fe04 <xQueueReceive+0x74>
 800fe02:	2300      	movs	r3, #0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d10a      	bne.n	800fe1e <xQueueReceive+0x8e>
	__asm volatile
 800fe08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0c:	f383 8811 	msr	BASEPRI, r3
 800fe10:	f3bf 8f6f 	isb	sy
 800fe14:	f3bf 8f4f 	dsb	sy
 800fe18:	61bb      	str	r3, [r7, #24]
}
 800fe1a:	bf00      	nop
 800fe1c:	e7fe      	b.n	800fe1c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe1e:	f7ff fae9 	bl	800f3f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d01f      	beq.n	800fe6e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fe2e:	68b9      	ldr	r1, [r7, #8]
 800fe30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe32:	f000 fafa 	bl	801042a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fe36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe38:	1e5a      	subs	r2, r3, #1
 800fe3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe40:	691b      	ldr	r3, [r3, #16]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d00f      	beq.n	800fe66 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe48:	3310      	adds	r3, #16
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f001 f8b0 	bl	8010fb0 <xTaskRemoveFromEventList>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d007      	beq.n	800fe66 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fe56:	4b3d      	ldr	r3, [pc, #244]	; (800ff4c <xQueueReceive+0x1bc>)
 800fe58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe5c:	601a      	str	r2, [r3, #0]
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fe66:	f7ff faf5 	bl	800f454 <vPortExitCritical>
				return pdPASS;
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	e069      	b.n	800ff42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d103      	bne.n	800fe7c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fe74:	f7ff faee 	bl	800f454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	e062      	b.n	800ff42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fe7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d106      	bne.n	800fe90 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe82:	f107 0310 	add.w	r3, r7, #16
 800fe86:	4618      	mov	r0, r3
 800fe88:	f001 f8f4 	bl	8011074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fe90:	f7ff fae0 	bl	800f454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fe94:	f000 fe72 	bl	8010b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fe98:	f7ff faac 	bl	800f3f4 <vPortEnterCritical>
 800fe9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fea2:	b25b      	sxtb	r3, r3
 800fea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fea8:	d103      	bne.n	800feb2 <xQueueReceive+0x122>
 800feaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feac:	2200      	movs	r2, #0
 800feae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800feb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800feb8:	b25b      	sxtb	r3, r3
 800feba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800febe:	d103      	bne.n	800fec8 <xQueueReceive+0x138>
 800fec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec2:	2200      	movs	r2, #0
 800fec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fec8:	f7ff fac4 	bl	800f454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fecc:	1d3a      	adds	r2, r7, #4
 800fece:	f107 0310 	add.w	r3, r7, #16
 800fed2:	4611      	mov	r1, r2
 800fed4:	4618      	mov	r0, r3
 800fed6:	f001 f8e3 	bl	80110a0 <xTaskCheckForTimeOut>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d123      	bne.n	800ff28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fee2:	f000 fb1a 	bl	801051a <prvIsQueueEmpty>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d017      	beq.n	800ff1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800feec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feee:	3324      	adds	r3, #36	; 0x24
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	4611      	mov	r1, r2
 800fef4:	4618      	mov	r0, r3
 800fef6:	f001 f837 	bl	8010f68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fefa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fefc:	f000 fabb 	bl	8010476 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ff00:	f000 fe4a 	bl	8010b98 <xTaskResumeAll>
 800ff04:	4603      	mov	r3, r0
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d189      	bne.n	800fe1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ff0a:	4b10      	ldr	r3, [pc, #64]	; (800ff4c <xQueueReceive+0x1bc>)
 800ff0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff10:	601a      	str	r2, [r3, #0]
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	e780      	b.n	800fe1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ff1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff1e:	f000 faaa 	bl	8010476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff22:	f000 fe39 	bl	8010b98 <xTaskResumeAll>
 800ff26:	e77a      	b.n	800fe1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ff28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff2a:	f000 faa4 	bl	8010476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ff2e:	f000 fe33 	bl	8010b98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ff32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff34:	f000 faf1 	bl	801051a <prvIsQueueEmpty>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f43f af6f 	beq.w	800fe1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ff40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3730      	adds	r7, #48	; 0x30
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	e000ed04 	.word	0xe000ed04

0800ff50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b08e      	sub	sp, #56	; 0x38
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ff62:	2300      	movs	r3, #0
 800ff64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ff66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d10a      	bne.n	800ff82 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	f383 8811 	msr	BASEPRI, r3
 800ff74:	f3bf 8f6f 	isb	sy
 800ff78:	f3bf 8f4f 	dsb	sy
 800ff7c:	623b      	str	r3, [r7, #32]
}
 800ff7e:	bf00      	nop
 800ff80:	e7fe      	b.n	800ff80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ff82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00a      	beq.n	800ffa0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ff8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff8e:	f383 8811 	msr	BASEPRI, r3
 800ff92:	f3bf 8f6f 	isb	sy
 800ff96:	f3bf 8f4f 	dsb	sy
 800ff9a:	61fb      	str	r3, [r7, #28]
}
 800ff9c:	bf00      	nop
 800ff9e:	e7fe      	b.n	800ff9e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ffa0:	f001 f9c6 	bl	8011330 <xTaskGetSchedulerState>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d102      	bne.n	800ffb0 <xQueueSemaphoreTake+0x60>
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d101      	bne.n	800ffb4 <xQueueSemaphoreTake+0x64>
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	e000      	b.n	800ffb6 <xQueueSemaphoreTake+0x66>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d10a      	bne.n	800ffd0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ffba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffbe:	f383 8811 	msr	BASEPRI, r3
 800ffc2:	f3bf 8f6f 	isb	sy
 800ffc6:	f3bf 8f4f 	dsb	sy
 800ffca:	61bb      	str	r3, [r7, #24]
}
 800ffcc:	bf00      	nop
 800ffce:	e7fe      	b.n	800ffce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffd0:	f7ff fa10 	bl	800f3f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ffd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffd8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ffda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d024      	beq.n	801002a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ffe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe2:	1e5a      	subs	r2, r3, #1
 800ffe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d104      	bne.n	800fffa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fff0:	f001 fb46 	bl	8011680 <pvTaskIncrementMutexHeldCount>
 800fff4:	4602      	mov	r2, r0
 800fff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fffc:	691b      	ldr	r3, [r3, #16]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d00f      	beq.n	8010022 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010004:	3310      	adds	r3, #16
 8010006:	4618      	mov	r0, r3
 8010008:	f000 ffd2 	bl	8010fb0 <xTaskRemoveFromEventList>
 801000c:	4603      	mov	r3, r0
 801000e:	2b00      	cmp	r3, #0
 8010010:	d007      	beq.n	8010022 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010012:	4b54      	ldr	r3, [pc, #336]	; (8010164 <xQueueSemaphoreTake+0x214>)
 8010014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010018:	601a      	str	r2, [r3, #0]
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010022:	f7ff fa17 	bl	800f454 <vPortExitCritical>
				return pdPASS;
 8010026:	2301      	movs	r3, #1
 8010028:	e097      	b.n	801015a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d111      	bne.n	8010054 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010032:	2b00      	cmp	r3, #0
 8010034:	d00a      	beq.n	801004c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003a:	f383 8811 	msr	BASEPRI, r3
 801003e:	f3bf 8f6f 	isb	sy
 8010042:	f3bf 8f4f 	dsb	sy
 8010046:	617b      	str	r3, [r7, #20]
}
 8010048:	bf00      	nop
 801004a:	e7fe      	b.n	801004a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801004c:	f7ff fa02 	bl	800f454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010050:	2300      	movs	r3, #0
 8010052:	e082      	b.n	801015a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010056:	2b00      	cmp	r3, #0
 8010058:	d106      	bne.n	8010068 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801005a:	f107 030c 	add.w	r3, r7, #12
 801005e:	4618      	mov	r0, r3
 8010060:	f001 f808 	bl	8011074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010064:	2301      	movs	r3, #1
 8010066:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010068:	f7ff f9f4 	bl	800f454 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801006c:	f000 fd86 	bl	8010b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010070:	f7ff f9c0 	bl	800f3f4 <vPortEnterCritical>
 8010074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801007a:	b25b      	sxtb	r3, r3
 801007c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010080:	d103      	bne.n	801008a <xQueueSemaphoreTake+0x13a>
 8010082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010084:	2200      	movs	r2, #0
 8010086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801008a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010090:	b25b      	sxtb	r3, r3
 8010092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010096:	d103      	bne.n	80100a0 <xQueueSemaphoreTake+0x150>
 8010098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009a:	2200      	movs	r2, #0
 801009c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80100a0:	f7ff f9d8 	bl	800f454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80100a4:	463a      	mov	r2, r7
 80100a6:	f107 030c 	add.w	r3, r7, #12
 80100aa:	4611      	mov	r1, r2
 80100ac:	4618      	mov	r0, r3
 80100ae:	f000 fff7 	bl	80110a0 <xTaskCheckForTimeOut>
 80100b2:	4603      	mov	r3, r0
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d132      	bne.n	801011e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80100b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100ba:	f000 fa2e 	bl	801051a <prvIsQueueEmpty>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d026      	beq.n	8010112 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80100c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d109      	bne.n	80100e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80100cc:	f7ff f992 	bl	800f3f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80100d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d2:	689b      	ldr	r3, [r3, #8]
 80100d4:	4618      	mov	r0, r3
 80100d6:	f001 f949 	bl	801136c <xTaskPriorityInherit>
 80100da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80100dc:	f7ff f9ba 	bl	800f454 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80100e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e2:	3324      	adds	r3, #36	; 0x24
 80100e4:	683a      	ldr	r2, [r7, #0]
 80100e6:	4611      	mov	r1, r2
 80100e8:	4618      	mov	r0, r3
 80100ea:	f000 ff3d 	bl	8010f68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80100ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100f0:	f000 f9c1 	bl	8010476 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80100f4:	f000 fd50 	bl	8010b98 <xTaskResumeAll>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	f47f af68 	bne.w	800ffd0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010100:	4b18      	ldr	r3, [pc, #96]	; (8010164 <xQueueSemaphoreTake+0x214>)
 8010102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010106:	601a      	str	r2, [r3, #0]
 8010108:	f3bf 8f4f 	dsb	sy
 801010c:	f3bf 8f6f 	isb	sy
 8010110:	e75e      	b.n	800ffd0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010112:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010114:	f000 f9af 	bl	8010476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010118:	f000 fd3e 	bl	8010b98 <xTaskResumeAll>
 801011c:	e758      	b.n	800ffd0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801011e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010120:	f000 f9a9 	bl	8010476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010124:	f000 fd38 	bl	8010b98 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801012a:	f000 f9f6 	bl	801051a <prvIsQueueEmpty>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	f43f af4d 	beq.w	800ffd0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00d      	beq.n	8010158 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801013c:	f7ff f95a 	bl	800f3f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010140:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010142:	f000 f8f0 	bl	8010326 <prvGetDisinheritPriorityAfterTimeout>
 8010146:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801014e:	4618      	mov	r0, r3
 8010150:	f001 fa08 	bl	8011564 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010154:	f7ff f97e 	bl	800f454 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010158:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801015a:	4618      	mov	r0, r3
 801015c:	3738      	adds	r7, #56	; 0x38
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	e000ed04 	.word	0xe000ed04

08010168 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b08e      	sub	sp, #56	; 0x38
 801016c:	af00      	add	r7, sp, #0
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017a:	2b00      	cmp	r3, #0
 801017c:	d10a      	bne.n	8010194 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801017e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010182:	f383 8811 	msr	BASEPRI, r3
 8010186:	f3bf 8f6f 	isb	sy
 801018a:	f3bf 8f4f 	dsb	sy
 801018e:	623b      	str	r3, [r7, #32]
}
 8010190:	bf00      	nop
 8010192:	e7fe      	b.n	8010192 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d103      	bne.n	80101a2 <xQueueReceiveFromISR+0x3a>
 801019a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d101      	bne.n	80101a6 <xQueueReceiveFromISR+0x3e>
 80101a2:	2301      	movs	r3, #1
 80101a4:	e000      	b.n	80101a8 <xQueueReceiveFromISR+0x40>
 80101a6:	2300      	movs	r3, #0
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d10a      	bne.n	80101c2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80101ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b0:	f383 8811 	msr	BASEPRI, r3
 80101b4:	f3bf 8f6f 	isb	sy
 80101b8:	f3bf 8f4f 	dsb	sy
 80101bc:	61fb      	str	r3, [r7, #28]
}
 80101be:	bf00      	nop
 80101c0:	e7fe      	b.n	80101c0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101c2:	f7ff f9f9 	bl	800f5b8 <vPortValidateInterruptPriority>
	__asm volatile
 80101c6:	f3ef 8211 	mrs	r2, BASEPRI
 80101ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ce:	f383 8811 	msr	BASEPRI, r3
 80101d2:	f3bf 8f6f 	isb	sy
 80101d6:	f3bf 8f4f 	dsb	sy
 80101da:	61ba      	str	r2, [r7, #24]
 80101dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80101de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80101e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80101e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d02f      	beq.n	801024e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80101ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80101f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80101f8:	68b9      	ldr	r1, [r7, #8]
 80101fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101fc:	f000 f915 	bl	801042a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010202:	1e5a      	subs	r2, r3, #1
 8010204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010206:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010208:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801020c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010210:	d112      	bne.n	8010238 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010214:	691b      	ldr	r3, [r3, #16]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d016      	beq.n	8010248 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801021a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021c:	3310      	adds	r3, #16
 801021e:	4618      	mov	r0, r3
 8010220:	f000 fec6 	bl	8010fb0 <xTaskRemoveFromEventList>
 8010224:	4603      	mov	r3, r0
 8010226:	2b00      	cmp	r3, #0
 8010228:	d00e      	beq.n	8010248 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00b      	beq.n	8010248 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2201      	movs	r2, #1
 8010234:	601a      	str	r2, [r3, #0]
 8010236:	e007      	b.n	8010248 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801023c:	3301      	adds	r3, #1
 801023e:	b2db      	uxtb	r3, r3
 8010240:	b25a      	sxtb	r2, r3
 8010242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010248:	2301      	movs	r3, #1
 801024a:	637b      	str	r3, [r7, #52]	; 0x34
 801024c:	e001      	b.n	8010252 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801024e:	2300      	movs	r3, #0
 8010250:	637b      	str	r3, [r7, #52]	; 0x34
 8010252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010254:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	f383 8811 	msr	BASEPRI, r3
}
 801025c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801025e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010260:	4618      	mov	r0, r3
 8010262:	3738      	adds	r7, #56	; 0x38
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d10a      	bne.n	801028c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8010276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027a:	f383 8811 	msr	BASEPRI, r3
 801027e:	f3bf 8f6f 	isb	sy
 8010282:	f3bf 8f4f 	dsb	sy
 8010286:	60bb      	str	r3, [r7, #8]
}
 8010288:	bf00      	nop
 801028a:	e7fe      	b.n	801028a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 801028c:	f7ff f8b2 	bl	800f3f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010294:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8010296:	f7ff f8dd 	bl	800f454 <vPortExitCritical>

	return uxReturn;
 801029a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801029c:	4618      	mov	r0, r3
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80102a4:	b480      	push	{r7}
 80102a6:	b087      	sub	sp, #28
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d10a      	bne.n	80102cc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80102b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	60fb      	str	r3, [r7, #12]
}
 80102c8:	bf00      	nop
 80102ca:	e7fe      	b.n	80102ca <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102d0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80102d2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80102d4:	4618      	mov	r0, r3
 80102d6:	371c      	adds	r7, #28
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b084      	sub	sp, #16
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d10a      	bne.n	8010308 <vQueueDelete+0x28>
	__asm volatile
 80102f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f6:	f383 8811 	msr	BASEPRI, r3
 80102fa:	f3bf 8f6f 	isb	sy
 80102fe:	f3bf 8f4f 	dsb	sy
 8010302:	60bb      	str	r3, [r7, #8]
}
 8010304:	bf00      	nop
 8010306:	e7fe      	b.n	8010306 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f000 f935 	bl	8010578 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010314:	2b00      	cmp	r3, #0
 8010316:	d102      	bne.n	801031e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	f7fe fd6d 	bl	800edf8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801031e:	bf00      	nop
 8010320:	3710      	adds	r7, #16
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010326:	b480      	push	{r7}
 8010328:	b085      	sub	sp, #20
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010332:	2b00      	cmp	r3, #0
 8010334:	d006      	beq.n	8010344 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f1c3 0307 	rsb	r3, r3, #7
 8010340:	60fb      	str	r3, [r7, #12]
 8010342:	e001      	b.n	8010348 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010344:	2300      	movs	r3, #0
 8010346:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010348:	68fb      	ldr	r3, [r7, #12]
	}
 801034a:	4618      	mov	r0, r3
 801034c:	3714      	adds	r7, #20
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr

08010356 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010356:	b580      	push	{r7, lr}
 8010358:	b086      	sub	sp, #24
 801035a:	af00      	add	r7, sp, #0
 801035c:	60f8      	str	r0, [r7, #12]
 801035e:	60b9      	str	r1, [r7, #8]
 8010360:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010362:	2300      	movs	r3, #0
 8010364:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801036a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010370:	2b00      	cmp	r3, #0
 8010372:	d10d      	bne.n	8010390 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d14d      	bne.n	8010418 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	689b      	ldr	r3, [r3, #8]
 8010380:	4618      	mov	r0, r3
 8010382:	f001 f869 	bl	8011458 <xTaskPriorityDisinherit>
 8010386:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2200      	movs	r2, #0
 801038c:	609a      	str	r2, [r3, #8]
 801038e:	e043      	b.n	8010418 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d119      	bne.n	80103ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	6858      	ldr	r0, [r3, #4]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801039e:	461a      	mov	r2, r3
 80103a0:	68b9      	ldr	r1, [r7, #8]
 80103a2:	f00e ff2d 	bl	801f200 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	685a      	ldr	r2, [r3, #4]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ae:	441a      	add	r2, r3
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	685a      	ldr	r2, [r3, #4]
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	689b      	ldr	r3, [r3, #8]
 80103bc:	429a      	cmp	r2, r3
 80103be:	d32b      	bcc.n	8010418 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	605a      	str	r2, [r3, #4]
 80103c8:	e026      	b.n	8010418 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	68d8      	ldr	r0, [r3, #12]
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103d2:	461a      	mov	r2, r3
 80103d4:	68b9      	ldr	r1, [r7, #8]
 80103d6:	f00e ff13 	bl	801f200 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	68da      	ldr	r2, [r3, #12]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103e2:	425b      	negs	r3, r3
 80103e4:	441a      	add	r2, r3
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	68da      	ldr	r2, [r3, #12]
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d207      	bcs.n	8010406 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	689a      	ldr	r2, [r3, #8]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103fe:	425b      	negs	r3, r3
 8010400:	441a      	add	r2, r3
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2b02      	cmp	r3, #2
 801040a:	d105      	bne.n	8010418 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d002      	beq.n	8010418 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	3b01      	subs	r3, #1
 8010416:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	1c5a      	adds	r2, r3, #1
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010420:	697b      	ldr	r3, [r7, #20]
}
 8010422:	4618      	mov	r0, r3
 8010424:	3718      	adds	r7, #24
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}

0801042a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801042a:	b580      	push	{r7, lr}
 801042c:	b082      	sub	sp, #8
 801042e:	af00      	add	r7, sp, #0
 8010430:	6078      	str	r0, [r7, #4]
 8010432:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010438:	2b00      	cmp	r3, #0
 801043a:	d018      	beq.n	801046e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	68da      	ldr	r2, [r3, #12]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010444:	441a      	add	r2, r3
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	68da      	ldr	r2, [r3, #12]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	689b      	ldr	r3, [r3, #8]
 8010452:	429a      	cmp	r2, r3
 8010454:	d303      	bcc.n	801045e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681a      	ldr	r2, [r3, #0]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	68d9      	ldr	r1, [r3, #12]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010466:	461a      	mov	r2, r3
 8010468:	6838      	ldr	r0, [r7, #0]
 801046a:	f00e fec9 	bl	801f200 <memcpy>
	}
}
 801046e:	bf00      	nop
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}

08010476 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010476:	b580      	push	{r7, lr}
 8010478:	b084      	sub	sp, #16
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801047e:	f7fe ffb9 	bl	800f3f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010488:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801048a:	e011      	b.n	80104b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010490:	2b00      	cmp	r3, #0
 8010492:	d012      	beq.n	80104ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	3324      	adds	r3, #36	; 0x24
 8010498:	4618      	mov	r0, r3
 801049a:	f000 fd89 	bl	8010fb0 <xTaskRemoveFromEventList>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d001      	beq.n	80104a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80104a4:	f000 fe5e 	bl	8011164 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80104a8:	7bfb      	ldrb	r3, [r7, #15]
 80104aa:	3b01      	subs	r3, #1
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80104b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	dce9      	bgt.n	801048c <prvUnlockQueue+0x16>
 80104b8:	e000      	b.n	80104bc <prvUnlockQueue+0x46>
					break;
 80104ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	22ff      	movs	r2, #255	; 0xff
 80104c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80104c4:	f7fe ffc6 	bl	800f454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80104c8:	f7fe ff94 	bl	800f3f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80104d4:	e011      	b.n	80104fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	691b      	ldr	r3, [r3, #16]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d012      	beq.n	8010504 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	3310      	adds	r3, #16
 80104e2:	4618      	mov	r0, r3
 80104e4:	f000 fd64 	bl	8010fb0 <xTaskRemoveFromEventList>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d001      	beq.n	80104f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80104ee:	f000 fe39 	bl	8011164 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80104f2:	7bbb      	ldrb	r3, [r7, #14]
 80104f4:	3b01      	subs	r3, #1
 80104f6:	b2db      	uxtb	r3, r3
 80104f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80104fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	dce9      	bgt.n	80104d6 <prvUnlockQueue+0x60>
 8010502:	e000      	b.n	8010506 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010504:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	22ff      	movs	r2, #255	; 0xff
 801050a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801050e:	f7fe ffa1 	bl	800f454 <vPortExitCritical>
}
 8010512:	bf00      	nop
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}

0801051a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801051a:	b580      	push	{r7, lr}
 801051c:	b084      	sub	sp, #16
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010522:	f7fe ff67 	bl	800f3f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801052a:	2b00      	cmp	r3, #0
 801052c:	d102      	bne.n	8010534 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801052e:	2301      	movs	r3, #1
 8010530:	60fb      	str	r3, [r7, #12]
 8010532:	e001      	b.n	8010538 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010534:	2300      	movs	r3, #0
 8010536:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010538:	f7fe ff8c 	bl	800f454 <vPortExitCritical>

	return xReturn;
 801053c:	68fb      	ldr	r3, [r7, #12]
}
 801053e:	4618      	mov	r0, r3
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010546:	b580      	push	{r7, lr}
 8010548:	b084      	sub	sp, #16
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801054e:	f7fe ff51 	bl	800f3f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801055a:	429a      	cmp	r2, r3
 801055c:	d102      	bne.n	8010564 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801055e:	2301      	movs	r3, #1
 8010560:	60fb      	str	r3, [r7, #12]
 8010562:	e001      	b.n	8010568 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010564:	2300      	movs	r3, #0
 8010566:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010568:	f7fe ff74 	bl	800f454 <vPortExitCritical>

	return xReturn;
 801056c:	68fb      	ldr	r3, [r7, #12]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3710      	adds	r7, #16
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
	...

08010578 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010580:	2300      	movs	r3, #0
 8010582:	60fb      	str	r3, [r7, #12]
 8010584:	e016      	b.n	80105b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010586:	4a10      	ldr	r2, [pc, #64]	; (80105c8 <vQueueUnregisterQueue+0x50>)
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	00db      	lsls	r3, r3, #3
 801058c:	4413      	add	r3, r2
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	687a      	ldr	r2, [r7, #4]
 8010592:	429a      	cmp	r2, r3
 8010594:	d10b      	bne.n	80105ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010596:	4a0c      	ldr	r2, [pc, #48]	; (80105c8 <vQueueUnregisterQueue+0x50>)
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2100      	movs	r1, #0
 801059c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80105a0:	4a09      	ldr	r2, [pc, #36]	; (80105c8 <vQueueUnregisterQueue+0x50>)
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	00db      	lsls	r3, r3, #3
 80105a6:	4413      	add	r3, r2
 80105a8:	2200      	movs	r2, #0
 80105aa:	605a      	str	r2, [r3, #4]
				break;
 80105ac:	e006      	b.n	80105bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	3301      	adds	r3, #1
 80105b2:	60fb      	str	r3, [r7, #12]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2b07      	cmp	r3, #7
 80105b8:	d9e5      	bls.n	8010586 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80105ba:	bf00      	nop
 80105bc:	bf00      	nop
 80105be:	3714      	adds	r7, #20
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr
 80105c8:	24008bf0 	.word	0x24008bf0

080105cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b08e      	sub	sp, #56	; 0x38
 80105d0:	af04      	add	r7, sp, #16
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	60b9      	str	r1, [r7, #8]
 80105d6:	607a      	str	r2, [r7, #4]
 80105d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80105da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d10a      	bne.n	80105f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80105e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e4:	f383 8811 	msr	BASEPRI, r3
 80105e8:	f3bf 8f6f 	isb	sy
 80105ec:	f3bf 8f4f 	dsb	sy
 80105f0:	623b      	str	r3, [r7, #32]
}
 80105f2:	bf00      	nop
 80105f4:	e7fe      	b.n	80105f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80105f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d10a      	bne.n	8010612 <xTaskCreateStatic+0x46>
	__asm volatile
 80105fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010600:	f383 8811 	msr	BASEPRI, r3
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	f3bf 8f4f 	dsb	sy
 801060c:	61fb      	str	r3, [r7, #28]
}
 801060e:	bf00      	nop
 8010610:	e7fe      	b.n	8010610 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010612:	23b4      	movs	r3, #180	; 0xb4
 8010614:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	2bb4      	cmp	r3, #180	; 0xb4
 801061a:	d00a      	beq.n	8010632 <xTaskCreateStatic+0x66>
	__asm volatile
 801061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010620:	f383 8811 	msr	BASEPRI, r3
 8010624:	f3bf 8f6f 	isb	sy
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	61bb      	str	r3, [r7, #24]
}
 801062e:	bf00      	nop
 8010630:	e7fe      	b.n	8010630 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010632:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010636:	2b00      	cmp	r3, #0
 8010638:	d01e      	beq.n	8010678 <xTaskCreateStatic+0xac>
 801063a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063c:	2b00      	cmp	r3, #0
 801063e:	d01b      	beq.n	8010678 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010642:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010648:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064c:	2202      	movs	r2, #2
 801064e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010652:	2300      	movs	r3, #0
 8010654:	9303      	str	r3, [sp, #12]
 8010656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010658:	9302      	str	r3, [sp, #8]
 801065a:	f107 0314 	add.w	r3, r7, #20
 801065e:	9301      	str	r3, [sp, #4]
 8010660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010662:	9300      	str	r3, [sp, #0]
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	68b9      	ldr	r1, [r7, #8]
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f000 f850 	bl	8010710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010672:	f000 f8eb 	bl	801084c <prvAddNewTaskToReadyList>
 8010676:	e001      	b.n	801067c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010678:	2300      	movs	r3, #0
 801067a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801067c:	697b      	ldr	r3, [r7, #20]
	}
 801067e:	4618      	mov	r0, r3
 8010680:	3728      	adds	r7, #40	; 0x28
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010686:	b580      	push	{r7, lr}
 8010688:	b08c      	sub	sp, #48	; 0x30
 801068a:	af04      	add	r7, sp, #16
 801068c:	60f8      	str	r0, [r7, #12]
 801068e:	60b9      	str	r1, [r7, #8]
 8010690:	603b      	str	r3, [r7, #0]
 8010692:	4613      	mov	r3, r2
 8010694:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010696:	88fb      	ldrh	r3, [r7, #6]
 8010698:	009b      	lsls	r3, r3, #2
 801069a:	4618      	mov	r0, r3
 801069c:	f7fe fae0 	bl	800ec60 <pvPortMalloc>
 80106a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d00e      	beq.n	80106c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80106a8:	20b4      	movs	r0, #180	; 0xb4
 80106aa:	f7fe fad9 	bl	800ec60 <pvPortMalloc>
 80106ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80106b0:	69fb      	ldr	r3, [r7, #28]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d003      	beq.n	80106be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80106b6:	69fb      	ldr	r3, [r7, #28]
 80106b8:	697a      	ldr	r2, [r7, #20]
 80106ba:	631a      	str	r2, [r3, #48]	; 0x30
 80106bc:	e005      	b.n	80106ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80106be:	6978      	ldr	r0, [r7, #20]
 80106c0:	f7fe fb9a 	bl	800edf8 <vPortFree>
 80106c4:	e001      	b.n	80106ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80106c6:	2300      	movs	r3, #0
 80106c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80106ca:	69fb      	ldr	r3, [r7, #28]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d017      	beq.n	8010700 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	2200      	movs	r2, #0
 80106d4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80106d8:	88fa      	ldrh	r2, [r7, #6]
 80106da:	2300      	movs	r3, #0
 80106dc:	9303      	str	r3, [sp, #12]
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	9302      	str	r3, [sp, #8]
 80106e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e4:	9301      	str	r3, [sp, #4]
 80106e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e8:	9300      	str	r3, [sp, #0]
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	68b9      	ldr	r1, [r7, #8]
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f000 f80e 	bl	8010710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80106f4:	69f8      	ldr	r0, [r7, #28]
 80106f6:	f000 f8a9 	bl	801084c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80106fa:	2301      	movs	r3, #1
 80106fc:	61bb      	str	r3, [r7, #24]
 80106fe:	e002      	b.n	8010706 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010704:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010706:	69bb      	ldr	r3, [r7, #24]
	}
 8010708:	4618      	mov	r0, r3
 801070a:	3720      	adds	r7, #32
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b088      	sub	sp, #32
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
 801071c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801071e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010722:	6879      	ldr	r1, [r7, #4]
 8010724:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010728:	440b      	add	r3, r1
 801072a:	009b      	lsls	r3, r3, #2
 801072c:	4413      	add	r3, r2
 801072e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010730:	69bb      	ldr	r3, [r7, #24]
 8010732:	f023 0307 	bic.w	r3, r3, #7
 8010736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	f003 0307 	and.w	r3, r3, #7
 801073e:	2b00      	cmp	r3, #0
 8010740:	d00a      	beq.n	8010758 <prvInitialiseNewTask+0x48>
	__asm volatile
 8010742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010746:	f383 8811 	msr	BASEPRI, r3
 801074a:	f3bf 8f6f 	isb	sy
 801074e:	f3bf 8f4f 	dsb	sy
 8010752:	617b      	str	r3, [r7, #20]
}
 8010754:	bf00      	nop
 8010756:	e7fe      	b.n	8010756 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d01f      	beq.n	801079e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801075e:	2300      	movs	r3, #0
 8010760:	61fb      	str	r3, [r7, #28]
 8010762:	e012      	b.n	801078a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010764:	68ba      	ldr	r2, [r7, #8]
 8010766:	69fb      	ldr	r3, [r7, #28]
 8010768:	4413      	add	r3, r2
 801076a:	7819      	ldrb	r1, [r3, #0]
 801076c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	4413      	add	r3, r2
 8010772:	3334      	adds	r3, #52	; 0x34
 8010774:	460a      	mov	r2, r1
 8010776:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010778:	68ba      	ldr	r2, [r7, #8]
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	4413      	add	r3, r2
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d006      	beq.n	8010792 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	3301      	adds	r3, #1
 8010788:	61fb      	str	r3, [r7, #28]
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	2b0f      	cmp	r3, #15
 801078e:	d9e9      	bls.n	8010764 <prvInitialiseNewTask+0x54>
 8010790:	e000      	b.n	8010794 <prvInitialiseNewTask+0x84>
			{
				break;
 8010792:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010796:	2200      	movs	r2, #0
 8010798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801079c:	e003      	b.n	80107a6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801079e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a0:	2200      	movs	r2, #0
 80107a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80107a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a8:	2b06      	cmp	r3, #6
 80107aa:	d901      	bls.n	80107b0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80107ac:	2306      	movs	r3, #6
 80107ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80107b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80107b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80107bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107be:	2200      	movs	r2, #0
 80107c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	3304      	adds	r3, #4
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7fe fc54 	bl	800f074 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80107cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ce:	3318      	adds	r3, #24
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7fe fc4f 	bl	800f074 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80107d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107de:	f1c3 0207 	rsb	r2, r3, #7
 80107e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80107e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80107ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ee:	2200      	movs	r2, #0
 80107f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80107f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f6:	2200      	movs	r2, #0
 80107f8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80107fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fe:	334c      	adds	r3, #76	; 0x4c
 8010800:	2260      	movs	r2, #96	; 0x60
 8010802:	2100      	movs	r1, #0
 8010804:	4618      	mov	r0, r3
 8010806:	f00e fd23 	bl	801f250 <memset>
 801080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080c:	4a0c      	ldr	r2, [pc, #48]	; (8010840 <prvInitialiseNewTask+0x130>)
 801080e:	651a      	str	r2, [r3, #80]	; 0x50
 8010810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010812:	4a0c      	ldr	r2, [pc, #48]	; (8010844 <prvInitialiseNewTask+0x134>)
 8010814:	655a      	str	r2, [r3, #84]	; 0x54
 8010816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010818:	4a0b      	ldr	r2, [pc, #44]	; (8010848 <prvInitialiseNewTask+0x138>)
 801081a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801081c:	683a      	ldr	r2, [r7, #0]
 801081e:	68f9      	ldr	r1, [r7, #12]
 8010820:	69b8      	ldr	r0, [r7, #24]
 8010822:	f7fe fcbb 	bl	800f19c <pxPortInitialiseStack>
 8010826:	4602      	mov	r2, r0
 8010828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082e:	2b00      	cmp	r3, #0
 8010830:	d002      	beq.n	8010838 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010836:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010838:	bf00      	nop
 801083a:	3720      	adds	r7, #32
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	08024490 	.word	0x08024490
 8010844:	080244b0 	.word	0x080244b0
 8010848:	08024470 	.word	0x08024470

0801084c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010854:	f7fe fdce 	bl	800f3f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010858:	4b2a      	ldr	r3, [pc, #168]	; (8010904 <prvAddNewTaskToReadyList+0xb8>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	3301      	adds	r3, #1
 801085e:	4a29      	ldr	r2, [pc, #164]	; (8010904 <prvAddNewTaskToReadyList+0xb8>)
 8010860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010862:	4b29      	ldr	r3, [pc, #164]	; (8010908 <prvAddNewTaskToReadyList+0xbc>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d109      	bne.n	801087e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801086a:	4a27      	ldr	r2, [pc, #156]	; (8010908 <prvAddNewTaskToReadyList+0xbc>)
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010870:	4b24      	ldr	r3, [pc, #144]	; (8010904 <prvAddNewTaskToReadyList+0xb8>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2b01      	cmp	r3, #1
 8010876:	d110      	bne.n	801089a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010878:	f000 fc98 	bl	80111ac <prvInitialiseTaskLists>
 801087c:	e00d      	b.n	801089a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801087e:	4b23      	ldr	r3, [pc, #140]	; (801090c <prvAddNewTaskToReadyList+0xc0>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d109      	bne.n	801089a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010886:	4b20      	ldr	r3, [pc, #128]	; (8010908 <prvAddNewTaskToReadyList+0xbc>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010890:	429a      	cmp	r2, r3
 8010892:	d802      	bhi.n	801089a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010894:	4a1c      	ldr	r2, [pc, #112]	; (8010908 <prvAddNewTaskToReadyList+0xbc>)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801089a:	4b1d      	ldr	r3, [pc, #116]	; (8010910 <prvAddNewTaskToReadyList+0xc4>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	3301      	adds	r3, #1
 80108a0:	4a1b      	ldr	r2, [pc, #108]	; (8010910 <prvAddNewTaskToReadyList+0xc4>)
 80108a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108a8:	2201      	movs	r2, #1
 80108aa:	409a      	lsls	r2, r3
 80108ac:	4b19      	ldr	r3, [pc, #100]	; (8010914 <prvAddNewTaskToReadyList+0xc8>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4313      	orrs	r3, r2
 80108b2:	4a18      	ldr	r2, [pc, #96]	; (8010914 <prvAddNewTaskToReadyList+0xc8>)
 80108b4:	6013      	str	r3, [r2, #0]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ba:	4613      	mov	r3, r2
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	4413      	add	r3, r2
 80108c0:	009b      	lsls	r3, r3, #2
 80108c2:	4a15      	ldr	r2, [pc, #84]	; (8010918 <prvAddNewTaskToReadyList+0xcc>)
 80108c4:	441a      	add	r2, r3
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	3304      	adds	r3, #4
 80108ca:	4619      	mov	r1, r3
 80108cc:	4610      	mov	r0, r2
 80108ce:	f7fe fbde 	bl	800f08e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80108d2:	f7fe fdbf 	bl	800f454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80108d6:	4b0d      	ldr	r3, [pc, #52]	; (801090c <prvAddNewTaskToReadyList+0xc0>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d00e      	beq.n	80108fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80108de:	4b0a      	ldr	r3, [pc, #40]	; (8010908 <prvAddNewTaskToReadyList+0xbc>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d207      	bcs.n	80108fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80108ec:	4b0b      	ldr	r3, [pc, #44]	; (801091c <prvAddNewTaskToReadyList+0xd0>)
 80108ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108f2:	601a      	str	r2, [r3, #0]
 80108f4:	f3bf 8f4f 	dsb	sy
 80108f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108fc:	bf00      	nop
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	24008d30 	.word	0x24008d30
 8010908:	24008c30 	.word	0x24008c30
 801090c:	24008d3c 	.word	0x24008d3c
 8010910:	24008d4c 	.word	0x24008d4c
 8010914:	24008d38 	.word	0x24008d38
 8010918:	24008c34 	.word	0x24008c34
 801091c:	e000ed04 	.word	0xe000ed04

08010920 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010920:	b580      	push	{r7, lr}
 8010922:	b084      	sub	sp, #16
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010928:	f7fe fd64 	bl	800f3f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d102      	bne.n	8010938 <vTaskDelete+0x18>
 8010932:	4b39      	ldr	r3, [pc, #228]	; (8010a18 <vTaskDelete+0xf8>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	e000      	b.n	801093a <vTaskDelete+0x1a>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	3304      	adds	r3, #4
 8010940:	4618      	mov	r0, r3
 8010942:	f7fe fc01 	bl	800f148 <uxListRemove>
 8010946:	4603      	mov	r3, r0
 8010948:	2b00      	cmp	r3, #0
 801094a:	d115      	bne.n	8010978 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010950:	4932      	ldr	r1, [pc, #200]	; (8010a1c <vTaskDelete+0xfc>)
 8010952:	4613      	mov	r3, r2
 8010954:	009b      	lsls	r3, r3, #2
 8010956:	4413      	add	r3, r2
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	440b      	add	r3, r1
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d10a      	bne.n	8010978 <vTaskDelete+0x58>
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010966:	2201      	movs	r2, #1
 8010968:	fa02 f303 	lsl.w	r3, r2, r3
 801096c:	43da      	mvns	r2, r3
 801096e:	4b2c      	ldr	r3, [pc, #176]	; (8010a20 <vTaskDelete+0x100>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	4013      	ands	r3, r2
 8010974:	4a2a      	ldr	r2, [pc, #168]	; (8010a20 <vTaskDelete+0x100>)
 8010976:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801097c:	2b00      	cmp	r3, #0
 801097e:	d004      	beq.n	801098a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	3318      	adds	r3, #24
 8010984:	4618      	mov	r0, r3
 8010986:	f7fe fbdf 	bl	800f148 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801098a:	4b26      	ldr	r3, [pc, #152]	; (8010a24 <vTaskDelete+0x104>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	3301      	adds	r3, #1
 8010990:	4a24      	ldr	r2, [pc, #144]	; (8010a24 <vTaskDelete+0x104>)
 8010992:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010994:	4b20      	ldr	r3, [pc, #128]	; (8010a18 <vTaskDelete+0xf8>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	68fa      	ldr	r2, [r7, #12]
 801099a:	429a      	cmp	r2, r3
 801099c:	d10b      	bne.n	80109b6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	3304      	adds	r3, #4
 80109a2:	4619      	mov	r1, r3
 80109a4:	4820      	ldr	r0, [pc, #128]	; (8010a28 <vTaskDelete+0x108>)
 80109a6:	f7fe fb72 	bl	800f08e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80109aa:	4b20      	ldr	r3, [pc, #128]	; (8010a2c <vTaskDelete+0x10c>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	3301      	adds	r3, #1
 80109b0:	4a1e      	ldr	r2, [pc, #120]	; (8010a2c <vTaskDelete+0x10c>)
 80109b2:	6013      	str	r3, [r2, #0]
 80109b4:	e009      	b.n	80109ca <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80109b6:	4b1e      	ldr	r3, [pc, #120]	; (8010a30 <vTaskDelete+0x110>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	3b01      	subs	r3, #1
 80109bc:	4a1c      	ldr	r2, [pc, #112]	; (8010a30 <vTaskDelete+0x110>)
 80109be:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80109c0:	68f8      	ldr	r0, [r7, #12]
 80109c2:	f000 fc61 	bl	8011288 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80109c6:	f000 fc93 	bl	80112f0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80109ca:	f7fe fd43 	bl	800f454 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80109ce:	4b19      	ldr	r3, [pc, #100]	; (8010a34 <vTaskDelete+0x114>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d01b      	beq.n	8010a0e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80109d6:	4b10      	ldr	r3, [pc, #64]	; (8010a18 <vTaskDelete+0xf8>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	68fa      	ldr	r2, [r7, #12]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d116      	bne.n	8010a0e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80109e0:	4b15      	ldr	r3, [pc, #84]	; (8010a38 <vTaskDelete+0x118>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d00a      	beq.n	80109fe <vTaskDelete+0xde>
	__asm volatile
 80109e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ec:	f383 8811 	msr	BASEPRI, r3
 80109f0:	f3bf 8f6f 	isb	sy
 80109f4:	f3bf 8f4f 	dsb	sy
 80109f8:	60bb      	str	r3, [r7, #8]
}
 80109fa:	bf00      	nop
 80109fc:	e7fe      	b.n	80109fc <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80109fe:	4b0f      	ldr	r3, [pc, #60]	; (8010a3c <vTaskDelete+0x11c>)
 8010a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a04:	601a      	str	r2, [r3, #0]
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010a0e:	bf00      	nop
 8010a10:	3710      	adds	r7, #16
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	bf00      	nop
 8010a18:	24008c30 	.word	0x24008c30
 8010a1c:	24008c34 	.word	0x24008c34
 8010a20:	24008d38 	.word	0x24008d38
 8010a24:	24008d4c 	.word	0x24008d4c
 8010a28:	24008d04 	.word	0x24008d04
 8010a2c:	24008d18 	.word	0x24008d18
 8010a30:	24008d30 	.word	0x24008d30
 8010a34:	24008d3c 	.word	0x24008d3c
 8010a38:	24008d58 	.word	0x24008d58
 8010a3c:	e000ed04 	.word	0xe000ed04

08010a40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d017      	beq.n	8010a82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010a52:	4b13      	ldr	r3, [pc, #76]	; (8010aa0 <vTaskDelay+0x60>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d00a      	beq.n	8010a70 <vTaskDelay+0x30>
	__asm volatile
 8010a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a5e:	f383 8811 	msr	BASEPRI, r3
 8010a62:	f3bf 8f6f 	isb	sy
 8010a66:	f3bf 8f4f 	dsb	sy
 8010a6a:	60bb      	str	r3, [r7, #8]
}
 8010a6c:	bf00      	nop
 8010a6e:	e7fe      	b.n	8010a6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010a70:	f000 f884 	bl	8010b7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010a74:	2100      	movs	r1, #0
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 fe16 	bl	80116a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010a7c:	f000 f88c 	bl	8010b98 <xTaskResumeAll>
 8010a80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d107      	bne.n	8010a98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010a88:	4b06      	ldr	r3, [pc, #24]	; (8010aa4 <vTaskDelay+0x64>)
 8010a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a8e:	601a      	str	r2, [r3, #0]
 8010a90:	f3bf 8f4f 	dsb	sy
 8010a94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010a98:	bf00      	nop
 8010a9a:	3710      	adds	r7, #16
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	24008d58 	.word	0x24008d58
 8010aa4:	e000ed04 	.word	0xe000ed04

08010aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b08a      	sub	sp, #40	; 0x28
 8010aac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010ab6:	463a      	mov	r2, r7
 8010ab8:	1d39      	adds	r1, r7, #4
 8010aba:	f107 0308 	add.w	r3, r7, #8
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7ef ff5e 	bl	8000980 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010ac4:	6839      	ldr	r1, [r7, #0]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	68ba      	ldr	r2, [r7, #8]
 8010aca:	9202      	str	r2, [sp, #8]
 8010acc:	9301      	str	r3, [sp, #4]
 8010ace:	2300      	movs	r3, #0
 8010ad0:	9300      	str	r3, [sp, #0]
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	460a      	mov	r2, r1
 8010ad6:	4921      	ldr	r1, [pc, #132]	; (8010b5c <vTaskStartScheduler+0xb4>)
 8010ad8:	4821      	ldr	r0, [pc, #132]	; (8010b60 <vTaskStartScheduler+0xb8>)
 8010ada:	f7ff fd77 	bl	80105cc <xTaskCreateStatic>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	4a20      	ldr	r2, [pc, #128]	; (8010b64 <vTaskStartScheduler+0xbc>)
 8010ae2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ae4:	4b1f      	ldr	r3, [pc, #124]	; (8010b64 <vTaskStartScheduler+0xbc>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d002      	beq.n	8010af2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010aec:	2301      	movs	r3, #1
 8010aee:	617b      	str	r3, [r7, #20]
 8010af0:	e001      	b.n	8010af6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010af2:	2300      	movs	r3, #0
 8010af4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d11b      	bne.n	8010b34 <vTaskStartScheduler+0x8c>
	__asm volatile
 8010afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b00:	f383 8811 	msr	BASEPRI, r3
 8010b04:	f3bf 8f6f 	isb	sy
 8010b08:	f3bf 8f4f 	dsb	sy
 8010b0c:	613b      	str	r3, [r7, #16]
}
 8010b0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010b10:	4b15      	ldr	r3, [pc, #84]	; (8010b68 <vTaskStartScheduler+0xc0>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	334c      	adds	r3, #76	; 0x4c
 8010b16:	4a15      	ldr	r2, [pc, #84]	; (8010b6c <vTaskStartScheduler+0xc4>)
 8010b18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010b1a:	4b15      	ldr	r3, [pc, #84]	; (8010b70 <vTaskStartScheduler+0xc8>)
 8010b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010b22:	4b14      	ldr	r3, [pc, #80]	; (8010b74 <vTaskStartScheduler+0xcc>)
 8010b24:	2201      	movs	r2, #1
 8010b26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010b28:	4b13      	ldr	r3, [pc, #76]	; (8010b78 <vTaskStartScheduler+0xd0>)
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010b2e:	f7fe fbbf 	bl	800f2b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010b32:	e00e      	b.n	8010b52 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b3a:	d10a      	bne.n	8010b52 <vTaskStartScheduler+0xaa>
	__asm volatile
 8010b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b40:	f383 8811 	msr	BASEPRI, r3
 8010b44:	f3bf 8f6f 	isb	sy
 8010b48:	f3bf 8f4f 	dsb	sy
 8010b4c:	60fb      	str	r3, [r7, #12]
}
 8010b4e:	bf00      	nop
 8010b50:	e7fe      	b.n	8010b50 <vTaskStartScheduler+0xa8>
}
 8010b52:	bf00      	nop
 8010b54:	3718      	adds	r7, #24
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	08020918 	.word	0x08020918
 8010b60:	0801117d 	.word	0x0801117d
 8010b64:	24008d54 	.word	0x24008d54
 8010b68:	24008c30 	.word	0x24008c30
 8010b6c:	24000034 	.word	0x24000034
 8010b70:	24008d50 	.word	0x24008d50
 8010b74:	24008d3c 	.word	0x24008d3c
 8010b78:	24008d34 	.word	0x24008d34

08010b7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010b80:	4b04      	ldr	r3, [pc, #16]	; (8010b94 <vTaskSuspendAll+0x18>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	3301      	adds	r3, #1
 8010b86:	4a03      	ldr	r2, [pc, #12]	; (8010b94 <vTaskSuspendAll+0x18>)
 8010b88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010b8a:	bf00      	nop
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b92:	4770      	bx	lr
 8010b94:	24008d58 	.word	0x24008d58

08010b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010ba6:	4b41      	ldr	r3, [pc, #260]	; (8010cac <xTaskResumeAll+0x114>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d10a      	bne.n	8010bc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8010bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb2:	f383 8811 	msr	BASEPRI, r3
 8010bb6:	f3bf 8f6f 	isb	sy
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	603b      	str	r3, [r7, #0]
}
 8010bc0:	bf00      	nop
 8010bc2:	e7fe      	b.n	8010bc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010bc4:	f7fe fc16 	bl	800f3f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010bc8:	4b38      	ldr	r3, [pc, #224]	; (8010cac <xTaskResumeAll+0x114>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	3b01      	subs	r3, #1
 8010bce:	4a37      	ldr	r2, [pc, #220]	; (8010cac <xTaskResumeAll+0x114>)
 8010bd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010bd2:	4b36      	ldr	r3, [pc, #216]	; (8010cac <xTaskResumeAll+0x114>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d161      	bne.n	8010c9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010bda:	4b35      	ldr	r3, [pc, #212]	; (8010cb0 <xTaskResumeAll+0x118>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d05d      	beq.n	8010c9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010be2:	e02e      	b.n	8010c42 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010be4:	4b33      	ldr	r3, [pc, #204]	; (8010cb4 <xTaskResumeAll+0x11c>)
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	3318      	adds	r3, #24
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fe faa9 	bl	800f148 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	3304      	adds	r3, #4
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7fe faa4 	bl	800f148 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c04:	2201      	movs	r2, #1
 8010c06:	409a      	lsls	r2, r3
 8010c08:	4b2b      	ldr	r3, [pc, #172]	; (8010cb8 <xTaskResumeAll+0x120>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	4a2a      	ldr	r2, [pc, #168]	; (8010cb8 <xTaskResumeAll+0x120>)
 8010c10:	6013      	str	r3, [r2, #0]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c16:	4613      	mov	r3, r2
 8010c18:	009b      	lsls	r3, r3, #2
 8010c1a:	4413      	add	r3, r2
 8010c1c:	009b      	lsls	r3, r3, #2
 8010c1e:	4a27      	ldr	r2, [pc, #156]	; (8010cbc <xTaskResumeAll+0x124>)
 8010c20:	441a      	add	r2, r3
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	3304      	adds	r3, #4
 8010c26:	4619      	mov	r1, r3
 8010c28:	4610      	mov	r0, r2
 8010c2a:	f7fe fa30 	bl	800f08e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c32:	4b23      	ldr	r3, [pc, #140]	; (8010cc0 <xTaskResumeAll+0x128>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d302      	bcc.n	8010c42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010c3c:	4b21      	ldr	r3, [pc, #132]	; (8010cc4 <xTaskResumeAll+0x12c>)
 8010c3e:	2201      	movs	r2, #1
 8010c40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c42:	4b1c      	ldr	r3, [pc, #112]	; (8010cb4 <xTaskResumeAll+0x11c>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d1cc      	bne.n	8010be4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d001      	beq.n	8010c54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010c50:	f000 fb4e 	bl	80112f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010c54:	4b1c      	ldr	r3, [pc, #112]	; (8010cc8 <xTaskResumeAll+0x130>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d010      	beq.n	8010c82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010c60:	f000 f858 	bl	8010d14 <xTaskIncrementTick>
 8010c64:	4603      	mov	r3, r0
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d002      	beq.n	8010c70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010c6a:	4b16      	ldr	r3, [pc, #88]	; (8010cc4 <xTaskResumeAll+0x12c>)
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	3b01      	subs	r3, #1
 8010c74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d1f1      	bne.n	8010c60 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010c7c:	4b12      	ldr	r3, [pc, #72]	; (8010cc8 <xTaskResumeAll+0x130>)
 8010c7e:	2200      	movs	r2, #0
 8010c80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010c82:	4b10      	ldr	r3, [pc, #64]	; (8010cc4 <xTaskResumeAll+0x12c>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d009      	beq.n	8010c9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010c8e:	4b0f      	ldr	r3, [pc, #60]	; (8010ccc <xTaskResumeAll+0x134>)
 8010c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c94:	601a      	str	r2, [r3, #0]
 8010c96:	f3bf 8f4f 	dsb	sy
 8010c9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010c9e:	f7fe fbd9 	bl	800f454 <vPortExitCritical>

	return xAlreadyYielded;
 8010ca2:	68bb      	ldr	r3, [r7, #8]
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3710      	adds	r7, #16
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	24008d58 	.word	0x24008d58
 8010cb0:	24008d30 	.word	0x24008d30
 8010cb4:	24008cf0 	.word	0x24008cf0
 8010cb8:	24008d38 	.word	0x24008d38
 8010cbc:	24008c34 	.word	0x24008c34
 8010cc0:	24008c30 	.word	0x24008c30
 8010cc4:	24008d44 	.word	0x24008d44
 8010cc8:	24008d40 	.word	0x24008d40
 8010ccc:	e000ed04 	.word	0xe000ed04

08010cd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010cd6:	4b05      	ldr	r3, [pc, #20]	; (8010cec <xTaskGetTickCount+0x1c>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010cdc:	687b      	ldr	r3, [r7, #4]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	370c      	adds	r7, #12
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce8:	4770      	bx	lr
 8010cea:	bf00      	nop
 8010cec:	24008d34 	.word	0x24008d34

08010cf0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cf6:	f7fe fc5f 	bl	800f5b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010cfe:	4b04      	ldr	r3, [pc, #16]	; (8010d10 <xTaskGetTickCountFromISR+0x20>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d04:	683b      	ldr	r3, [r7, #0]
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	24008d34 	.word	0x24008d34

08010d14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b086      	sub	sp, #24
 8010d18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d1e:	4b4e      	ldr	r3, [pc, #312]	; (8010e58 <xTaskIncrementTick+0x144>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	f040 808e 	bne.w	8010e44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010d28:	4b4c      	ldr	r3, [pc, #304]	; (8010e5c <xTaskIncrementTick+0x148>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010d30:	4a4a      	ldr	r2, [pc, #296]	; (8010e5c <xTaskIncrementTick+0x148>)
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d120      	bne.n	8010d7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010d3c:	4b48      	ldr	r3, [pc, #288]	; (8010e60 <xTaskIncrementTick+0x14c>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d00a      	beq.n	8010d5c <xTaskIncrementTick+0x48>
	__asm volatile
 8010d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d4a:	f383 8811 	msr	BASEPRI, r3
 8010d4e:	f3bf 8f6f 	isb	sy
 8010d52:	f3bf 8f4f 	dsb	sy
 8010d56:	603b      	str	r3, [r7, #0]
}
 8010d58:	bf00      	nop
 8010d5a:	e7fe      	b.n	8010d5a <xTaskIncrementTick+0x46>
 8010d5c:	4b40      	ldr	r3, [pc, #256]	; (8010e60 <xTaskIncrementTick+0x14c>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	60fb      	str	r3, [r7, #12]
 8010d62:	4b40      	ldr	r3, [pc, #256]	; (8010e64 <xTaskIncrementTick+0x150>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	4a3e      	ldr	r2, [pc, #248]	; (8010e60 <xTaskIncrementTick+0x14c>)
 8010d68:	6013      	str	r3, [r2, #0]
 8010d6a:	4a3e      	ldr	r2, [pc, #248]	; (8010e64 <xTaskIncrementTick+0x150>)
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	6013      	str	r3, [r2, #0]
 8010d70:	4b3d      	ldr	r3, [pc, #244]	; (8010e68 <xTaskIncrementTick+0x154>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	3301      	adds	r3, #1
 8010d76:	4a3c      	ldr	r2, [pc, #240]	; (8010e68 <xTaskIncrementTick+0x154>)
 8010d78:	6013      	str	r3, [r2, #0]
 8010d7a:	f000 fab9 	bl	80112f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010d7e:	4b3b      	ldr	r3, [pc, #236]	; (8010e6c <xTaskIncrementTick+0x158>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	693a      	ldr	r2, [r7, #16]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d348      	bcc.n	8010e1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d88:	4b35      	ldr	r3, [pc, #212]	; (8010e60 <xTaskIncrementTick+0x14c>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d104      	bne.n	8010d9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d92:	4b36      	ldr	r3, [pc, #216]	; (8010e6c <xTaskIncrementTick+0x158>)
 8010d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d98:	601a      	str	r2, [r3, #0]
					break;
 8010d9a:	e03e      	b.n	8010e1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d9c:	4b30      	ldr	r3, [pc, #192]	; (8010e60 <xTaskIncrementTick+0x14c>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	68db      	ldr	r3, [r3, #12]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010dac:	693a      	ldr	r2, [r7, #16]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d203      	bcs.n	8010dbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010db4:	4a2d      	ldr	r2, [pc, #180]	; (8010e6c <xTaskIncrementTick+0x158>)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010dba:	e02e      	b.n	8010e1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	3304      	adds	r3, #4
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7fe f9c1 	bl	800f148 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d004      	beq.n	8010dd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	3318      	adds	r3, #24
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fe f9b8 	bl	800f148 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ddc:	2201      	movs	r2, #1
 8010dde:	409a      	lsls	r2, r3
 8010de0:	4b23      	ldr	r3, [pc, #140]	; (8010e70 <xTaskIncrementTick+0x15c>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	4313      	orrs	r3, r2
 8010de6:	4a22      	ldr	r2, [pc, #136]	; (8010e70 <xTaskIncrementTick+0x15c>)
 8010de8:	6013      	str	r3, [r2, #0]
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dee:	4613      	mov	r3, r2
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	4413      	add	r3, r2
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	4a1f      	ldr	r2, [pc, #124]	; (8010e74 <xTaskIncrementTick+0x160>)
 8010df8:	441a      	add	r2, r3
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	3304      	adds	r3, #4
 8010dfe:	4619      	mov	r1, r3
 8010e00:	4610      	mov	r0, r2
 8010e02:	f7fe f944 	bl	800f08e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e0a:	4b1b      	ldr	r3, [pc, #108]	; (8010e78 <xTaskIncrementTick+0x164>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d3b9      	bcc.n	8010d88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010e14:	2301      	movs	r3, #1
 8010e16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e18:	e7b6      	b.n	8010d88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010e1a:	4b17      	ldr	r3, [pc, #92]	; (8010e78 <xTaskIncrementTick+0x164>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e20:	4914      	ldr	r1, [pc, #80]	; (8010e74 <xTaskIncrementTick+0x160>)
 8010e22:	4613      	mov	r3, r2
 8010e24:	009b      	lsls	r3, r3, #2
 8010e26:	4413      	add	r3, r2
 8010e28:	009b      	lsls	r3, r3, #2
 8010e2a:	440b      	add	r3, r1
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d901      	bls.n	8010e36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8010e32:	2301      	movs	r3, #1
 8010e34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010e36:	4b11      	ldr	r3, [pc, #68]	; (8010e7c <xTaskIncrementTick+0x168>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d007      	beq.n	8010e4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010e3e:	2301      	movs	r3, #1
 8010e40:	617b      	str	r3, [r7, #20]
 8010e42:	e004      	b.n	8010e4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010e44:	4b0e      	ldr	r3, [pc, #56]	; (8010e80 <xTaskIncrementTick+0x16c>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	3301      	adds	r3, #1
 8010e4a:	4a0d      	ldr	r2, [pc, #52]	; (8010e80 <xTaskIncrementTick+0x16c>)
 8010e4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010e4e:	697b      	ldr	r3, [r7, #20]
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3718      	adds	r7, #24
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	24008d58 	.word	0x24008d58
 8010e5c:	24008d34 	.word	0x24008d34
 8010e60:	24008ce8 	.word	0x24008ce8
 8010e64:	24008cec 	.word	0x24008cec
 8010e68:	24008d48 	.word	0x24008d48
 8010e6c:	24008d50 	.word	0x24008d50
 8010e70:	24008d38 	.word	0x24008d38
 8010e74:	24008c34 	.word	0x24008c34
 8010e78:	24008c30 	.word	0x24008c30
 8010e7c:	24008d44 	.word	0x24008d44
 8010e80:	24008d40 	.word	0x24008d40

08010e84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b086      	sub	sp, #24
 8010e88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010e8a:	4b31      	ldr	r3, [pc, #196]	; (8010f50 <vTaskSwitchContext+0xcc>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d003      	beq.n	8010e9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010e92:	4b30      	ldr	r3, [pc, #192]	; (8010f54 <vTaskSwitchContext+0xd0>)
 8010e94:	2201      	movs	r2, #1
 8010e96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010e98:	e055      	b.n	8010f46 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 8010e9a:	4b2e      	ldr	r3, [pc, #184]	; (8010f54 <vTaskSwitchContext+0xd0>)
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010ea0:	4b2d      	ldr	r3, [pc, #180]	; (8010f58 <vTaskSwitchContext+0xd4>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	4b2c      	ldr	r3, [pc, #176]	; (8010f58 <vTaskSwitchContext+0xd4>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d808      	bhi.n	8010ec2 <vTaskSwitchContext+0x3e>
 8010eb0:	4b29      	ldr	r3, [pc, #164]	; (8010f58 <vTaskSwitchContext+0xd4>)
 8010eb2:	681a      	ldr	r2, [r3, #0]
 8010eb4:	4b28      	ldr	r3, [pc, #160]	; (8010f58 <vTaskSwitchContext+0xd4>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	3334      	adds	r3, #52	; 0x34
 8010eba:	4619      	mov	r1, r3
 8010ebc:	4610      	mov	r0, r2
 8010ebe:	f7ef fd53 	bl	8000968 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ec2:	4b26      	ldr	r3, [pc, #152]	; (8010f5c <vTaskSwitchContext+0xd8>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	fab3 f383 	clz	r3, r3
 8010ece:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010ed0:	7afb      	ldrb	r3, [r7, #11]
 8010ed2:	f1c3 031f 	rsb	r3, r3, #31
 8010ed6:	617b      	str	r3, [r7, #20]
 8010ed8:	4921      	ldr	r1, [pc, #132]	; (8010f60 <vTaskSwitchContext+0xdc>)
 8010eda:	697a      	ldr	r2, [r7, #20]
 8010edc:	4613      	mov	r3, r2
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	4413      	add	r3, r2
 8010ee2:	009b      	lsls	r3, r3, #2
 8010ee4:	440b      	add	r3, r1
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d10a      	bne.n	8010f02 <vTaskSwitchContext+0x7e>
	__asm volatile
 8010eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef0:	f383 8811 	msr	BASEPRI, r3
 8010ef4:	f3bf 8f6f 	isb	sy
 8010ef8:	f3bf 8f4f 	dsb	sy
 8010efc:	607b      	str	r3, [r7, #4]
}
 8010efe:	bf00      	nop
 8010f00:	e7fe      	b.n	8010f00 <vTaskSwitchContext+0x7c>
 8010f02:	697a      	ldr	r2, [r7, #20]
 8010f04:	4613      	mov	r3, r2
 8010f06:	009b      	lsls	r3, r3, #2
 8010f08:	4413      	add	r3, r2
 8010f0a:	009b      	lsls	r3, r3, #2
 8010f0c:	4a14      	ldr	r2, [pc, #80]	; (8010f60 <vTaskSwitchContext+0xdc>)
 8010f0e:	4413      	add	r3, r2
 8010f10:	613b      	str	r3, [r7, #16]
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	685a      	ldr	r2, [r3, #4]
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	605a      	str	r2, [r3, #4]
 8010f1c:	693b      	ldr	r3, [r7, #16]
 8010f1e:	685a      	ldr	r2, [r3, #4]
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	3308      	adds	r3, #8
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d104      	bne.n	8010f32 <vTaskSwitchContext+0xae>
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	685a      	ldr	r2, [r3, #4]
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	605a      	str	r2, [r3, #4]
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	685b      	ldr	r3, [r3, #4]
 8010f36:	68db      	ldr	r3, [r3, #12]
 8010f38:	4a07      	ldr	r2, [pc, #28]	; (8010f58 <vTaskSwitchContext+0xd4>)
 8010f3a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010f3c:	4b06      	ldr	r3, [pc, #24]	; (8010f58 <vTaskSwitchContext+0xd4>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	334c      	adds	r3, #76	; 0x4c
 8010f42:	4a08      	ldr	r2, [pc, #32]	; (8010f64 <vTaskSwitchContext+0xe0>)
 8010f44:	6013      	str	r3, [r2, #0]
}
 8010f46:	bf00      	nop
 8010f48:	3718      	adds	r7, #24
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	24008d58 	.word	0x24008d58
 8010f54:	24008d44 	.word	0x24008d44
 8010f58:	24008c30 	.word	0x24008c30
 8010f5c:	24008d38 	.word	0x24008d38
 8010f60:	24008c34 	.word	0x24008c34
 8010f64:	24000034 	.word	0x24000034

08010f68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d10a      	bne.n	8010f8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7c:	f383 8811 	msr	BASEPRI, r3
 8010f80:	f3bf 8f6f 	isb	sy
 8010f84:	f3bf 8f4f 	dsb	sy
 8010f88:	60fb      	str	r3, [r7, #12]
}
 8010f8a:	bf00      	nop
 8010f8c:	e7fe      	b.n	8010f8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010f8e:	4b07      	ldr	r3, [pc, #28]	; (8010fac <vTaskPlaceOnEventList+0x44>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	3318      	adds	r3, #24
 8010f94:	4619      	mov	r1, r3
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f7fe f89d 	bl	800f0d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010f9c:	2101      	movs	r1, #1
 8010f9e:	6838      	ldr	r0, [r7, #0]
 8010fa0:	f000 fb82 	bl	80116a8 <prvAddCurrentTaskToDelayedList>
}
 8010fa4:	bf00      	nop
 8010fa6:	3710      	adds	r7, #16
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	24008c30 	.word	0x24008c30

08010fb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b086      	sub	sp, #24
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	68db      	ldr	r3, [r3, #12]
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d10a      	bne.n	8010fdc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fca:	f383 8811 	msr	BASEPRI, r3
 8010fce:	f3bf 8f6f 	isb	sy
 8010fd2:	f3bf 8f4f 	dsb	sy
 8010fd6:	60fb      	str	r3, [r7, #12]
}
 8010fd8:	bf00      	nop
 8010fda:	e7fe      	b.n	8010fda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	3318      	adds	r3, #24
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fe f8b1 	bl	800f148 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fe6:	4b1d      	ldr	r3, [pc, #116]	; (801105c <xTaskRemoveFromEventList+0xac>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d11c      	bne.n	8011028 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	3304      	adds	r3, #4
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7fe f8a8 	bl	800f148 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	409a      	lsls	r2, r3
 8011000:	4b17      	ldr	r3, [pc, #92]	; (8011060 <xTaskRemoveFromEventList+0xb0>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	4313      	orrs	r3, r2
 8011006:	4a16      	ldr	r2, [pc, #88]	; (8011060 <xTaskRemoveFromEventList+0xb0>)
 8011008:	6013      	str	r3, [r2, #0]
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801100e:	4613      	mov	r3, r2
 8011010:	009b      	lsls	r3, r3, #2
 8011012:	4413      	add	r3, r2
 8011014:	009b      	lsls	r3, r3, #2
 8011016:	4a13      	ldr	r2, [pc, #76]	; (8011064 <xTaskRemoveFromEventList+0xb4>)
 8011018:	441a      	add	r2, r3
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	3304      	adds	r3, #4
 801101e:	4619      	mov	r1, r3
 8011020:	4610      	mov	r0, r2
 8011022:	f7fe f834 	bl	800f08e <vListInsertEnd>
 8011026:	e005      	b.n	8011034 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	3318      	adds	r3, #24
 801102c:	4619      	mov	r1, r3
 801102e:	480e      	ldr	r0, [pc, #56]	; (8011068 <xTaskRemoveFromEventList+0xb8>)
 8011030:	f7fe f82d 	bl	800f08e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011038:	4b0c      	ldr	r3, [pc, #48]	; (801106c <xTaskRemoveFromEventList+0xbc>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801103e:	429a      	cmp	r2, r3
 8011040:	d905      	bls.n	801104e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011042:	2301      	movs	r3, #1
 8011044:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011046:	4b0a      	ldr	r3, [pc, #40]	; (8011070 <xTaskRemoveFromEventList+0xc0>)
 8011048:	2201      	movs	r2, #1
 801104a:	601a      	str	r2, [r3, #0]
 801104c:	e001      	b.n	8011052 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801104e:	2300      	movs	r3, #0
 8011050:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011052:	697b      	ldr	r3, [r7, #20]
}
 8011054:	4618      	mov	r0, r3
 8011056:	3718      	adds	r7, #24
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	24008d58 	.word	0x24008d58
 8011060:	24008d38 	.word	0x24008d38
 8011064:	24008c34 	.word	0x24008c34
 8011068:	24008cf0 	.word	0x24008cf0
 801106c:	24008c30 	.word	0x24008c30
 8011070:	24008d44 	.word	0x24008d44

08011074 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011074:	b480      	push	{r7}
 8011076:	b083      	sub	sp, #12
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801107c:	4b06      	ldr	r3, [pc, #24]	; (8011098 <vTaskInternalSetTimeOutState+0x24>)
 801107e:	681a      	ldr	r2, [r3, #0]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011084:	4b05      	ldr	r3, [pc, #20]	; (801109c <vTaskInternalSetTimeOutState+0x28>)
 8011086:	681a      	ldr	r2, [r3, #0]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	605a      	str	r2, [r3, #4]
}
 801108c:	bf00      	nop
 801108e:	370c      	adds	r7, #12
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr
 8011098:	24008d48 	.word	0x24008d48
 801109c:	24008d34 	.word	0x24008d34

080110a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b088      	sub	sp, #32
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d10a      	bne.n	80110c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80110b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b4:	f383 8811 	msr	BASEPRI, r3
 80110b8:	f3bf 8f6f 	isb	sy
 80110bc:	f3bf 8f4f 	dsb	sy
 80110c0:	613b      	str	r3, [r7, #16]
}
 80110c2:	bf00      	nop
 80110c4:	e7fe      	b.n	80110c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d10a      	bne.n	80110e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80110cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d0:	f383 8811 	msr	BASEPRI, r3
 80110d4:	f3bf 8f6f 	isb	sy
 80110d8:	f3bf 8f4f 	dsb	sy
 80110dc:	60fb      	str	r3, [r7, #12]
}
 80110de:	bf00      	nop
 80110e0:	e7fe      	b.n	80110e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80110e2:	f7fe f987 	bl	800f3f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80110e6:	4b1d      	ldr	r3, [pc, #116]	; (801115c <xTaskCheckForTimeOut+0xbc>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	69ba      	ldr	r2, [r7, #24]
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110fe:	d102      	bne.n	8011106 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011100:	2300      	movs	r3, #0
 8011102:	61fb      	str	r3, [r7, #28]
 8011104:	e023      	b.n	801114e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	4b15      	ldr	r3, [pc, #84]	; (8011160 <xTaskCheckForTimeOut+0xc0>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	429a      	cmp	r2, r3
 8011110:	d007      	beq.n	8011122 <xTaskCheckForTimeOut+0x82>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	69ba      	ldr	r2, [r7, #24]
 8011118:	429a      	cmp	r2, r3
 801111a:	d302      	bcc.n	8011122 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801111c:	2301      	movs	r3, #1
 801111e:	61fb      	str	r3, [r7, #28]
 8011120:	e015      	b.n	801114e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	697a      	ldr	r2, [r7, #20]
 8011128:	429a      	cmp	r2, r3
 801112a:	d20b      	bcs.n	8011144 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	681a      	ldr	r2, [r3, #0]
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	1ad2      	subs	r2, r2, r3
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f7ff ff9b 	bl	8011074 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801113e:	2300      	movs	r3, #0
 8011140:	61fb      	str	r3, [r7, #28]
 8011142:	e004      	b.n	801114e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	2200      	movs	r2, #0
 8011148:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801114a:	2301      	movs	r3, #1
 801114c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801114e:	f7fe f981 	bl	800f454 <vPortExitCritical>

	return xReturn;
 8011152:	69fb      	ldr	r3, [r7, #28]
}
 8011154:	4618      	mov	r0, r3
 8011156:	3720      	adds	r7, #32
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}
 801115c:	24008d34 	.word	0x24008d34
 8011160:	24008d48 	.word	0x24008d48

08011164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011164:	b480      	push	{r7}
 8011166:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011168:	4b03      	ldr	r3, [pc, #12]	; (8011178 <vTaskMissedYield+0x14>)
 801116a:	2201      	movs	r2, #1
 801116c:	601a      	str	r2, [r3, #0]
}
 801116e:	bf00      	nop
 8011170:	46bd      	mov	sp, r7
 8011172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011176:	4770      	bx	lr
 8011178:	24008d44 	.word	0x24008d44

0801117c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011184:	f000 f852 	bl	801122c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011188:	4b06      	ldr	r3, [pc, #24]	; (80111a4 <prvIdleTask+0x28>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	2b01      	cmp	r3, #1
 801118e:	d9f9      	bls.n	8011184 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011190:	4b05      	ldr	r3, [pc, #20]	; (80111a8 <prvIdleTask+0x2c>)
 8011192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011196:	601a      	str	r2, [r3, #0]
 8011198:	f3bf 8f4f 	dsb	sy
 801119c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80111a0:	e7f0      	b.n	8011184 <prvIdleTask+0x8>
 80111a2:	bf00      	nop
 80111a4:	24008c34 	.word	0x24008c34
 80111a8:	e000ed04 	.word	0xe000ed04

080111ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80111b2:	2300      	movs	r3, #0
 80111b4:	607b      	str	r3, [r7, #4]
 80111b6:	e00c      	b.n	80111d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80111b8:	687a      	ldr	r2, [r7, #4]
 80111ba:	4613      	mov	r3, r2
 80111bc:	009b      	lsls	r3, r3, #2
 80111be:	4413      	add	r3, r2
 80111c0:	009b      	lsls	r3, r3, #2
 80111c2:	4a12      	ldr	r2, [pc, #72]	; (801120c <prvInitialiseTaskLists+0x60>)
 80111c4:	4413      	add	r3, r2
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fd ff34 	bl	800f034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	3301      	adds	r3, #1
 80111d0:	607b      	str	r3, [r7, #4]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2b06      	cmp	r3, #6
 80111d6:	d9ef      	bls.n	80111b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80111d8:	480d      	ldr	r0, [pc, #52]	; (8011210 <prvInitialiseTaskLists+0x64>)
 80111da:	f7fd ff2b 	bl	800f034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80111de:	480d      	ldr	r0, [pc, #52]	; (8011214 <prvInitialiseTaskLists+0x68>)
 80111e0:	f7fd ff28 	bl	800f034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80111e4:	480c      	ldr	r0, [pc, #48]	; (8011218 <prvInitialiseTaskLists+0x6c>)
 80111e6:	f7fd ff25 	bl	800f034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80111ea:	480c      	ldr	r0, [pc, #48]	; (801121c <prvInitialiseTaskLists+0x70>)
 80111ec:	f7fd ff22 	bl	800f034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80111f0:	480b      	ldr	r0, [pc, #44]	; (8011220 <prvInitialiseTaskLists+0x74>)
 80111f2:	f7fd ff1f 	bl	800f034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80111f6:	4b0b      	ldr	r3, [pc, #44]	; (8011224 <prvInitialiseTaskLists+0x78>)
 80111f8:	4a05      	ldr	r2, [pc, #20]	; (8011210 <prvInitialiseTaskLists+0x64>)
 80111fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80111fc:	4b0a      	ldr	r3, [pc, #40]	; (8011228 <prvInitialiseTaskLists+0x7c>)
 80111fe:	4a05      	ldr	r2, [pc, #20]	; (8011214 <prvInitialiseTaskLists+0x68>)
 8011200:	601a      	str	r2, [r3, #0]
}
 8011202:	bf00      	nop
 8011204:	3708      	adds	r7, #8
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
 801120a:	bf00      	nop
 801120c:	24008c34 	.word	0x24008c34
 8011210:	24008cc0 	.word	0x24008cc0
 8011214:	24008cd4 	.word	0x24008cd4
 8011218:	24008cf0 	.word	0x24008cf0
 801121c:	24008d04 	.word	0x24008d04
 8011220:	24008d1c 	.word	0x24008d1c
 8011224:	24008ce8 	.word	0x24008ce8
 8011228:	24008cec 	.word	0x24008cec

0801122c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011232:	e019      	b.n	8011268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011234:	f7fe f8de 	bl	800f3f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011238:	4b10      	ldr	r3, [pc, #64]	; (801127c <prvCheckTasksWaitingTermination+0x50>)
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	3304      	adds	r3, #4
 8011244:	4618      	mov	r0, r3
 8011246:	f7fd ff7f 	bl	800f148 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801124a:	4b0d      	ldr	r3, [pc, #52]	; (8011280 <prvCheckTasksWaitingTermination+0x54>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	3b01      	subs	r3, #1
 8011250:	4a0b      	ldr	r2, [pc, #44]	; (8011280 <prvCheckTasksWaitingTermination+0x54>)
 8011252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011254:	4b0b      	ldr	r3, [pc, #44]	; (8011284 <prvCheckTasksWaitingTermination+0x58>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	3b01      	subs	r3, #1
 801125a:	4a0a      	ldr	r2, [pc, #40]	; (8011284 <prvCheckTasksWaitingTermination+0x58>)
 801125c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801125e:	f7fe f8f9 	bl	800f454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f000 f810 	bl	8011288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011268:	4b06      	ldr	r3, [pc, #24]	; (8011284 <prvCheckTasksWaitingTermination+0x58>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d1e1      	bne.n	8011234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011270:	bf00      	nop
 8011272:	bf00      	nop
 8011274:	3708      	adds	r7, #8
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	24008d04 	.word	0x24008d04
 8011280:	24008d30 	.word	0x24008d30
 8011284:	24008d18 	.word	0x24008d18

08011288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011288:	b580      	push	{r7, lr}
 801128a:	b084      	sub	sp, #16
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	334c      	adds	r3, #76	; 0x4c
 8011294:	4618      	mov	r0, r3
 8011296:	f00e fc8b 	bl	801fbb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d108      	bne.n	80112b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fd fda5 	bl	800edf8 <vPortFree>
				vPortFree( pxTCB );
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f7fd fda2 	bl	800edf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80112b4:	e018      	b.n	80112e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80112bc:	2b01      	cmp	r3, #1
 80112be:	d103      	bne.n	80112c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7fd fd99 	bl	800edf8 <vPortFree>
	}
 80112c6:	e00f      	b.n	80112e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80112ce:	2b02      	cmp	r3, #2
 80112d0:	d00a      	beq.n	80112e8 <prvDeleteTCB+0x60>
	__asm volatile
 80112d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d6:	f383 8811 	msr	BASEPRI, r3
 80112da:	f3bf 8f6f 	isb	sy
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	60fb      	str	r3, [r7, #12]
}
 80112e4:	bf00      	nop
 80112e6:	e7fe      	b.n	80112e6 <prvDeleteTCB+0x5e>
	}
 80112e8:	bf00      	nop
 80112ea:	3710      	adds	r7, #16
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112f6:	4b0c      	ldr	r3, [pc, #48]	; (8011328 <prvResetNextTaskUnblockTime+0x38>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d104      	bne.n	801130a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011300:	4b0a      	ldr	r3, [pc, #40]	; (801132c <prvResetNextTaskUnblockTime+0x3c>)
 8011302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011306:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011308:	e008      	b.n	801131c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801130a:	4b07      	ldr	r3, [pc, #28]	; (8011328 <prvResetNextTaskUnblockTime+0x38>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	68db      	ldr	r3, [r3, #12]
 8011312:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	4a04      	ldr	r2, [pc, #16]	; (801132c <prvResetNextTaskUnblockTime+0x3c>)
 801131a:	6013      	str	r3, [r2, #0]
}
 801131c:	bf00      	nop
 801131e:	370c      	adds	r7, #12
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr
 8011328:	24008ce8 	.word	0x24008ce8
 801132c:	24008d50 	.word	0x24008d50

08011330 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011330:	b480      	push	{r7}
 8011332:	b083      	sub	sp, #12
 8011334:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011336:	4b0b      	ldr	r3, [pc, #44]	; (8011364 <xTaskGetSchedulerState+0x34>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d102      	bne.n	8011344 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801133e:	2301      	movs	r3, #1
 8011340:	607b      	str	r3, [r7, #4]
 8011342:	e008      	b.n	8011356 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011344:	4b08      	ldr	r3, [pc, #32]	; (8011368 <xTaskGetSchedulerState+0x38>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d102      	bne.n	8011352 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801134c:	2302      	movs	r3, #2
 801134e:	607b      	str	r3, [r7, #4]
 8011350:	e001      	b.n	8011356 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011352:	2300      	movs	r3, #0
 8011354:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011356:	687b      	ldr	r3, [r7, #4]
	}
 8011358:	4618      	mov	r0, r3
 801135a:	370c      	adds	r7, #12
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr
 8011364:	24008d3c 	.word	0x24008d3c
 8011368:	24008d58 	.word	0x24008d58

0801136c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011378:	2300      	movs	r3, #0
 801137a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d05e      	beq.n	8011440 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011386:	4b31      	ldr	r3, [pc, #196]	; (801144c <xTaskPriorityInherit+0xe0>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801138c:	429a      	cmp	r2, r3
 801138e:	d24e      	bcs.n	801142e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	699b      	ldr	r3, [r3, #24]
 8011394:	2b00      	cmp	r3, #0
 8011396:	db06      	blt.n	80113a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011398:	4b2c      	ldr	r3, [pc, #176]	; (801144c <xTaskPriorityInherit+0xe0>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801139e:	f1c3 0207 	rsb	r2, r3, #7
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	6959      	ldr	r1, [r3, #20]
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113ae:	4613      	mov	r3, r2
 80113b0:	009b      	lsls	r3, r3, #2
 80113b2:	4413      	add	r3, r2
 80113b4:	009b      	lsls	r3, r3, #2
 80113b6:	4a26      	ldr	r2, [pc, #152]	; (8011450 <xTaskPriorityInherit+0xe4>)
 80113b8:	4413      	add	r3, r2
 80113ba:	4299      	cmp	r1, r3
 80113bc:	d12f      	bne.n	801141e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	3304      	adds	r3, #4
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7fd fec0 	bl	800f148 <uxListRemove>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d10a      	bne.n	80113e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d2:	2201      	movs	r2, #1
 80113d4:	fa02 f303 	lsl.w	r3, r2, r3
 80113d8:	43da      	mvns	r2, r3
 80113da:	4b1e      	ldr	r3, [pc, #120]	; (8011454 <xTaskPriorityInherit+0xe8>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	4013      	ands	r3, r2
 80113e0:	4a1c      	ldr	r2, [pc, #112]	; (8011454 <xTaskPriorityInherit+0xe8>)
 80113e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80113e4:	4b19      	ldr	r3, [pc, #100]	; (801144c <xTaskPriorityInherit+0xe0>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f2:	2201      	movs	r2, #1
 80113f4:	409a      	lsls	r2, r3
 80113f6:	4b17      	ldr	r3, [pc, #92]	; (8011454 <xTaskPriorityInherit+0xe8>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	4313      	orrs	r3, r2
 80113fc:	4a15      	ldr	r2, [pc, #84]	; (8011454 <xTaskPriorityInherit+0xe8>)
 80113fe:	6013      	str	r3, [r2, #0]
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011404:	4613      	mov	r3, r2
 8011406:	009b      	lsls	r3, r3, #2
 8011408:	4413      	add	r3, r2
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	4a10      	ldr	r2, [pc, #64]	; (8011450 <xTaskPriorityInherit+0xe4>)
 801140e:	441a      	add	r2, r3
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	3304      	adds	r3, #4
 8011414:	4619      	mov	r1, r3
 8011416:	4610      	mov	r0, r2
 8011418:	f7fd fe39 	bl	800f08e <vListInsertEnd>
 801141c:	e004      	b.n	8011428 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801141e:	4b0b      	ldr	r3, [pc, #44]	; (801144c <xTaskPriorityInherit+0xe0>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011428:	2301      	movs	r3, #1
 801142a:	60fb      	str	r3, [r7, #12]
 801142c:	e008      	b.n	8011440 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011432:	4b06      	ldr	r3, [pc, #24]	; (801144c <xTaskPriorityInherit+0xe0>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011438:	429a      	cmp	r2, r3
 801143a:	d201      	bcs.n	8011440 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801143c:	2301      	movs	r3, #1
 801143e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011440:	68fb      	ldr	r3, [r7, #12]
	}
 8011442:	4618      	mov	r0, r3
 8011444:	3710      	adds	r7, #16
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	24008c30 	.word	0x24008c30
 8011450:	24008c34 	.word	0x24008c34
 8011454:	24008d38 	.word	0x24008d38

08011458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011458:	b580      	push	{r7, lr}
 801145a:	b086      	sub	sp, #24
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011464:	2300      	movs	r3, #0
 8011466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d06e      	beq.n	801154c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801146e:	4b3a      	ldr	r3, [pc, #232]	; (8011558 <xTaskPriorityDisinherit+0x100>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	693a      	ldr	r2, [r7, #16]
 8011474:	429a      	cmp	r2, r3
 8011476:	d00a      	beq.n	801148e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147c:	f383 8811 	msr	BASEPRI, r3
 8011480:	f3bf 8f6f 	isb	sy
 8011484:	f3bf 8f4f 	dsb	sy
 8011488:	60fb      	str	r3, [r7, #12]
}
 801148a:	bf00      	nop
 801148c:	e7fe      	b.n	801148c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011492:	2b00      	cmp	r3, #0
 8011494:	d10a      	bne.n	80114ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149a:	f383 8811 	msr	BASEPRI, r3
 801149e:	f3bf 8f6f 	isb	sy
 80114a2:	f3bf 8f4f 	dsb	sy
 80114a6:	60bb      	str	r3, [r7, #8]
}
 80114a8:	bf00      	nop
 80114aa:	e7fe      	b.n	80114aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114b0:	1e5a      	subs	r2, r3, #1
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114be:	429a      	cmp	r2, r3
 80114c0:	d044      	beq.n	801154c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d140      	bne.n	801154c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	3304      	adds	r3, #4
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fd fe3a 	bl	800f148 <uxListRemove>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d115      	bne.n	8011506 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114de:	491f      	ldr	r1, [pc, #124]	; (801155c <xTaskPriorityDisinherit+0x104>)
 80114e0:	4613      	mov	r3, r2
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	4413      	add	r3, r2
 80114e6:	009b      	lsls	r3, r3, #2
 80114e8:	440b      	add	r3, r1
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d10a      	bne.n	8011506 <xTaskPriorityDisinherit+0xae>
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f4:	2201      	movs	r2, #1
 80114f6:	fa02 f303 	lsl.w	r3, r2, r3
 80114fa:	43da      	mvns	r2, r3
 80114fc:	4b18      	ldr	r3, [pc, #96]	; (8011560 <xTaskPriorityDisinherit+0x108>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4013      	ands	r3, r2
 8011502:	4a17      	ldr	r2, [pc, #92]	; (8011560 <xTaskPriorityDisinherit+0x108>)
 8011504:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011512:	f1c3 0207 	rsb	r2, r3, #7
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801151e:	2201      	movs	r2, #1
 8011520:	409a      	lsls	r2, r3
 8011522:	4b0f      	ldr	r3, [pc, #60]	; (8011560 <xTaskPriorityDisinherit+0x108>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	4313      	orrs	r3, r2
 8011528:	4a0d      	ldr	r2, [pc, #52]	; (8011560 <xTaskPriorityDisinherit+0x108>)
 801152a:	6013      	str	r3, [r2, #0]
 801152c:	693b      	ldr	r3, [r7, #16]
 801152e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011530:	4613      	mov	r3, r2
 8011532:	009b      	lsls	r3, r3, #2
 8011534:	4413      	add	r3, r2
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	4a08      	ldr	r2, [pc, #32]	; (801155c <xTaskPriorityDisinherit+0x104>)
 801153a:	441a      	add	r2, r3
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	3304      	adds	r3, #4
 8011540:	4619      	mov	r1, r3
 8011542:	4610      	mov	r0, r2
 8011544:	f7fd fda3 	bl	800f08e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011548:	2301      	movs	r3, #1
 801154a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801154c:	697b      	ldr	r3, [r7, #20]
	}
 801154e:	4618      	mov	r0, r3
 8011550:	3718      	adds	r7, #24
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop
 8011558:	24008c30 	.word	0x24008c30
 801155c:	24008c34 	.word	0x24008c34
 8011560:	24008d38 	.word	0x24008d38

08011564 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011564:	b580      	push	{r7, lr}
 8011566:	b088      	sub	sp, #32
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011572:	2301      	movs	r3, #1
 8011574:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d077      	beq.n	801166c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801157c:	69bb      	ldr	r3, [r7, #24]
 801157e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011580:	2b00      	cmp	r3, #0
 8011582:	d10a      	bne.n	801159a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011588:	f383 8811 	msr	BASEPRI, r3
 801158c:	f3bf 8f6f 	isb	sy
 8011590:	f3bf 8f4f 	dsb	sy
 8011594:	60fb      	str	r3, [r7, #12]
}
 8011596:	bf00      	nop
 8011598:	e7fe      	b.n	8011598 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801159a:	69bb      	ldr	r3, [r7, #24]
 801159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801159e:	683a      	ldr	r2, [r7, #0]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d902      	bls.n	80115aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	61fb      	str	r3, [r7, #28]
 80115a8:	e002      	b.n	80115b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80115aa:	69bb      	ldr	r3, [r7, #24]
 80115ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b4:	69fa      	ldr	r2, [r7, #28]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d058      	beq.n	801166c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80115ba:	69bb      	ldr	r3, [r7, #24]
 80115bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115be:	697a      	ldr	r2, [r7, #20]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d153      	bne.n	801166c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80115c4:	4b2b      	ldr	r3, [pc, #172]	; (8011674 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	69ba      	ldr	r2, [r7, #24]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d10a      	bne.n	80115e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80115ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d2:	f383 8811 	msr	BASEPRI, r3
 80115d6:	f3bf 8f6f 	isb	sy
 80115da:	f3bf 8f4f 	dsb	sy
 80115de:	60bb      	str	r3, [r7, #8]
}
 80115e0:	bf00      	nop
 80115e2:	e7fe      	b.n	80115e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80115e4:	69bb      	ldr	r3, [r7, #24]
 80115e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80115ea:	69bb      	ldr	r3, [r7, #24]
 80115ec:	69fa      	ldr	r2, [r7, #28]
 80115ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80115f0:	69bb      	ldr	r3, [r7, #24]
 80115f2:	699b      	ldr	r3, [r3, #24]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	db04      	blt.n	8011602 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115f8:	69fb      	ldr	r3, [r7, #28]
 80115fa:	f1c3 0207 	rsb	r2, r3, #7
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011602:	69bb      	ldr	r3, [r7, #24]
 8011604:	6959      	ldr	r1, [r3, #20]
 8011606:	693a      	ldr	r2, [r7, #16]
 8011608:	4613      	mov	r3, r2
 801160a:	009b      	lsls	r3, r3, #2
 801160c:	4413      	add	r3, r2
 801160e:	009b      	lsls	r3, r3, #2
 8011610:	4a19      	ldr	r2, [pc, #100]	; (8011678 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011612:	4413      	add	r3, r2
 8011614:	4299      	cmp	r1, r3
 8011616:	d129      	bne.n	801166c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011618:	69bb      	ldr	r3, [r7, #24]
 801161a:	3304      	adds	r3, #4
 801161c:	4618      	mov	r0, r3
 801161e:	f7fd fd93 	bl	800f148 <uxListRemove>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d10a      	bne.n	801163e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011628:	69bb      	ldr	r3, [r7, #24]
 801162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801162c:	2201      	movs	r2, #1
 801162e:	fa02 f303 	lsl.w	r3, r2, r3
 8011632:	43da      	mvns	r2, r3
 8011634:	4b11      	ldr	r3, [pc, #68]	; (801167c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	4013      	ands	r3, r2
 801163a:	4a10      	ldr	r2, [pc, #64]	; (801167c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801163c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801163e:	69bb      	ldr	r3, [r7, #24]
 8011640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011642:	2201      	movs	r2, #1
 8011644:	409a      	lsls	r2, r3
 8011646:	4b0d      	ldr	r3, [pc, #52]	; (801167c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	4313      	orrs	r3, r2
 801164c:	4a0b      	ldr	r2, [pc, #44]	; (801167c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801164e:	6013      	str	r3, [r2, #0]
 8011650:	69bb      	ldr	r3, [r7, #24]
 8011652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011654:	4613      	mov	r3, r2
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	4413      	add	r3, r2
 801165a:	009b      	lsls	r3, r3, #2
 801165c:	4a06      	ldr	r2, [pc, #24]	; (8011678 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801165e:	441a      	add	r2, r3
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	3304      	adds	r3, #4
 8011664:	4619      	mov	r1, r3
 8011666:	4610      	mov	r0, r2
 8011668:	f7fd fd11 	bl	800f08e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801166c:	bf00      	nop
 801166e:	3720      	adds	r7, #32
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}
 8011674:	24008c30 	.word	0x24008c30
 8011678:	24008c34 	.word	0x24008c34
 801167c:	24008d38 	.word	0x24008d38

08011680 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011680:	b480      	push	{r7}
 8011682:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011684:	4b07      	ldr	r3, [pc, #28]	; (80116a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d004      	beq.n	8011696 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801168c:	4b05      	ldr	r3, [pc, #20]	; (80116a4 <pvTaskIncrementMutexHeldCount+0x24>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011692:	3201      	adds	r2, #1
 8011694:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011696:	4b03      	ldr	r3, [pc, #12]	; (80116a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8011698:	681b      	ldr	r3, [r3, #0]
	}
 801169a:	4618      	mov	r0, r3
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr
 80116a4:	24008c30 	.word	0x24008c30

080116a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b084      	sub	sp, #16
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80116b2:	4b29      	ldr	r3, [pc, #164]	; (8011758 <prvAddCurrentTaskToDelayedList+0xb0>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116b8:	4b28      	ldr	r3, [pc, #160]	; (801175c <prvAddCurrentTaskToDelayedList+0xb4>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	3304      	adds	r3, #4
 80116be:	4618      	mov	r0, r3
 80116c0:	f7fd fd42 	bl	800f148 <uxListRemove>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d10b      	bne.n	80116e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80116ca:	4b24      	ldr	r3, [pc, #144]	; (801175c <prvAddCurrentTaskToDelayedList+0xb4>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116d0:	2201      	movs	r2, #1
 80116d2:	fa02 f303 	lsl.w	r3, r2, r3
 80116d6:	43da      	mvns	r2, r3
 80116d8:	4b21      	ldr	r3, [pc, #132]	; (8011760 <prvAddCurrentTaskToDelayedList+0xb8>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	4013      	ands	r3, r2
 80116de:	4a20      	ldr	r2, [pc, #128]	; (8011760 <prvAddCurrentTaskToDelayedList+0xb8>)
 80116e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116e8:	d10a      	bne.n	8011700 <prvAddCurrentTaskToDelayedList+0x58>
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d007      	beq.n	8011700 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80116f0:	4b1a      	ldr	r3, [pc, #104]	; (801175c <prvAddCurrentTaskToDelayedList+0xb4>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	3304      	adds	r3, #4
 80116f6:	4619      	mov	r1, r3
 80116f8:	481a      	ldr	r0, [pc, #104]	; (8011764 <prvAddCurrentTaskToDelayedList+0xbc>)
 80116fa:	f7fd fcc8 	bl	800f08e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80116fe:	e026      	b.n	801174e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011700:	68fa      	ldr	r2, [r7, #12]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	4413      	add	r3, r2
 8011706:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011708:	4b14      	ldr	r3, [pc, #80]	; (801175c <prvAddCurrentTaskToDelayedList+0xb4>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	68ba      	ldr	r2, [r7, #8]
 801170e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011710:	68ba      	ldr	r2, [r7, #8]
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	429a      	cmp	r2, r3
 8011716:	d209      	bcs.n	801172c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011718:	4b13      	ldr	r3, [pc, #76]	; (8011768 <prvAddCurrentTaskToDelayedList+0xc0>)
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	4b0f      	ldr	r3, [pc, #60]	; (801175c <prvAddCurrentTaskToDelayedList+0xb4>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	3304      	adds	r3, #4
 8011722:	4619      	mov	r1, r3
 8011724:	4610      	mov	r0, r2
 8011726:	f7fd fcd6 	bl	800f0d6 <vListInsert>
}
 801172a:	e010      	b.n	801174e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801172c:	4b0f      	ldr	r3, [pc, #60]	; (801176c <prvAddCurrentTaskToDelayedList+0xc4>)
 801172e:	681a      	ldr	r2, [r3, #0]
 8011730:	4b0a      	ldr	r3, [pc, #40]	; (801175c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	3304      	adds	r3, #4
 8011736:	4619      	mov	r1, r3
 8011738:	4610      	mov	r0, r2
 801173a:	f7fd fccc 	bl	800f0d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801173e:	4b0c      	ldr	r3, [pc, #48]	; (8011770 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	68ba      	ldr	r2, [r7, #8]
 8011744:	429a      	cmp	r2, r3
 8011746:	d202      	bcs.n	801174e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011748:	4a09      	ldr	r2, [pc, #36]	; (8011770 <prvAddCurrentTaskToDelayedList+0xc8>)
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	6013      	str	r3, [r2, #0]
}
 801174e:	bf00      	nop
 8011750:	3710      	adds	r7, #16
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	24008d34 	.word	0x24008d34
 801175c:	24008c30 	.word	0x24008c30
 8011760:	24008d38 	.word	0x24008d38
 8011764:	24008d1c 	.word	0x24008d1c
 8011768:	24008cec 	.word	0x24008cec
 801176c:	24008ce8 	.word	0x24008ce8
 8011770:	24008d50 	.word	0x24008d50

08011774 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b084      	sub	sp, #16
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
 801177c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	330c      	adds	r3, #12
 8011784:	461a      	mov	r2, r3
 8011786:	6839      	ldr	r1, [r7, #0]
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f00c fec5 	bl	801e518 <tcpip_send_msg_wait_sem>
 801178e:	4603      	mov	r3, r0
 8011790:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d103      	bne.n	80117a2 <netconn_apimsg+0x2e>
    return apimsg->err;
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80117a0:	e001      	b.n	80117a6 <netconn_apimsg+0x32>
  }
  return err;
 80117a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	3710      	adds	r7, #16
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd80      	pop	{r7, pc}
	...

080117b0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b08c      	sub	sp, #48	; 0x30
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	4603      	mov	r3, r0
 80117b8:	603a      	str	r2, [r7, #0]
 80117ba:	71fb      	strb	r3, [r7, #7]
 80117bc:	460b      	mov	r3, r1
 80117be:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80117c0:	79fb      	ldrb	r3, [r7, #7]
 80117c2:	6839      	ldr	r1, [r7, #0]
 80117c4:	4618      	mov	r0, r3
 80117c6:	f001 f927 	bl	8012a18 <netconn_alloc>
 80117ca:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80117cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d054      	beq.n	801187c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80117d2:	79bb      	ldrb	r3, [r7, #6]
 80117d4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80117d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80117da:	f107 0308 	add.w	r3, r7, #8
 80117de:	4619      	mov	r1, r3
 80117e0:	4829      	ldr	r0, [pc, #164]	; (8011888 <netconn_new_with_proto_and_callback+0xd8>)
 80117e2:	f7ff ffc7 	bl	8011774 <netconn_apimsg>
 80117e6:	4603      	mov	r3, r0
 80117e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80117ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d043      	beq.n	801187c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80117f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d005      	beq.n	8011808 <netconn_new_with_proto_and_callback+0x58>
 80117fc:	4b23      	ldr	r3, [pc, #140]	; (801188c <netconn_new_with_proto_and_callback+0xdc>)
 80117fe:	22a3      	movs	r2, #163	; 0xa3
 8011800:	4923      	ldr	r1, [pc, #140]	; (8011890 <netconn_new_with_proto_and_callback+0xe0>)
 8011802:	4824      	ldr	r0, [pc, #144]	; (8011894 <netconn_new_with_proto_and_callback+0xe4>)
 8011804:	f00e f8fa 	bl	801f9fc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8011808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801180a:	3310      	adds	r3, #16
 801180c:	4618      	mov	r0, r3
 801180e:	f006 fb8c 	bl	8017f2a <sys_mbox_valid>
 8011812:	4603      	mov	r3, r0
 8011814:	2b00      	cmp	r3, #0
 8011816:	d105      	bne.n	8011824 <netconn_new_with_proto_and_callback+0x74>
 8011818:	4b1c      	ldr	r3, [pc, #112]	; (801188c <netconn_new_with_proto_and_callback+0xdc>)
 801181a:	22a4      	movs	r2, #164	; 0xa4
 801181c:	491e      	ldr	r1, [pc, #120]	; (8011898 <netconn_new_with_proto_and_callback+0xe8>)
 801181e:	481d      	ldr	r0, [pc, #116]	; (8011894 <netconn_new_with_proto_and_callback+0xe4>)
 8011820:	f00e f8ec 	bl	801f9fc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8011824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011826:	3314      	adds	r3, #20
 8011828:	4618      	mov	r0, r3
 801182a:	f006 fb7e 	bl	8017f2a <sys_mbox_valid>
 801182e:	4603      	mov	r3, r0
 8011830:	2b00      	cmp	r3, #0
 8011832:	d005      	beq.n	8011840 <netconn_new_with_proto_and_callback+0x90>
 8011834:	4b15      	ldr	r3, [pc, #84]	; (801188c <netconn_new_with_proto_and_callback+0xdc>)
 8011836:	22a6      	movs	r2, #166	; 0xa6
 8011838:	4918      	ldr	r1, [pc, #96]	; (801189c <netconn_new_with_proto_and_callback+0xec>)
 801183a:	4816      	ldr	r0, [pc, #88]	; (8011894 <netconn_new_with_proto_and_callback+0xe4>)
 801183c:	f00e f8de 	bl	801f9fc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8011840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011842:	330c      	adds	r3, #12
 8011844:	4618      	mov	r0, r3
 8011846:	f006 fc01 	bl	801804c <sys_sem_valid>
 801184a:	4603      	mov	r3, r0
 801184c:	2b00      	cmp	r3, #0
 801184e:	d105      	bne.n	801185c <netconn_new_with_proto_and_callback+0xac>
 8011850:	4b0e      	ldr	r3, [pc, #56]	; (801188c <netconn_new_with_proto_and_callback+0xdc>)
 8011852:	22a9      	movs	r2, #169	; 0xa9
 8011854:	4912      	ldr	r1, [pc, #72]	; (80118a0 <netconn_new_with_proto_and_callback+0xf0>)
 8011856:	480f      	ldr	r0, [pc, #60]	; (8011894 <netconn_new_with_proto_and_callback+0xe4>)
 8011858:	f00e f8d0 	bl	801f9fc <iprintf>
      sys_sem_free(&conn->op_completed);
 801185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801185e:	330c      	adds	r3, #12
 8011860:	4618      	mov	r0, r3
 8011862:	f006 fbe6 	bl	8018032 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8011866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011868:	3310      	adds	r3, #16
 801186a:	4618      	mov	r0, r3
 801186c:	f006 fad6 	bl	8017e1c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011872:	2007      	movs	r0, #7
 8011874:	f005 f922 	bl	8016abc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8011878:	2300      	movs	r3, #0
 801187a:	e000      	b.n	801187e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 801187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801187e:	4618      	mov	r0, r3
 8011880:	3730      	adds	r7, #48	; 0x30
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	080129ed 	.word	0x080129ed
 801188c:	08020920 	.word	0x08020920
 8011890:	08020998 	.word	0x08020998
 8011894:	080209bc 	.word	0x080209bc
 8011898:	080209e4 	.word	0x080209e4
 801189c:	080209fc 	.word	0x080209fc
 80118a0:	08020a20 	.word	0x08020a20

080118a4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b08c      	sub	sp, #48	; 0x30
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d101      	bne.n	80118b6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 80118b2:	2300      	movs	r3, #0
 80118b4:	e014      	b.n	80118e0 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80118ba:	2329      	movs	r3, #41	; 0x29
 80118bc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80118be:	f107 030c 	add.w	r3, r7, #12
 80118c2:	4619      	mov	r1, r3
 80118c4:	4808      	ldr	r0, [pc, #32]	; (80118e8 <netconn_prepare_delete+0x44>)
 80118c6:	f7ff ff55 	bl	8011774 <netconn_apimsg>
 80118ca:	4603      	mov	r3, r0
 80118cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80118d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d002      	beq.n	80118de <netconn_prepare_delete+0x3a>
    return err;
 80118d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80118dc:	e000      	b.n	80118e0 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80118de:	2300      	movs	r3, #0
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3730      	adds	r7, #48	; 0x30
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}
 80118e8:	08012f59 	.word	0x08012f59

080118ec <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d101      	bne.n	80118fe <netconn_delete+0x12>
    return ERR_OK;
 80118fa:	2300      	movs	r3, #0
 80118fc:	e00d      	b.n	801191a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f7ff ffd0 	bl	80118a4 <netconn_prepare_delete>
 8011904:	4603      	mov	r3, r0
 8011906:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8011908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d102      	bne.n	8011916 <netconn_delete+0x2a>
    netconn_free(conn);
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f001 f8ef 	bl	8012af4 <netconn_free>
  }
  return err;
 8011916:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801191a:	4618      	mov	r0, r3
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
	...

08011924 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b08e      	sub	sp, #56	; 0x38
 8011928:	af00      	add	r7, sp, #0
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	4613      	mov	r3, r2
 8011930:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d109      	bne.n	801194c <netconn_bind+0x28>
 8011938:	4b11      	ldr	r3, [pc, #68]	; (8011980 <netconn_bind+0x5c>)
 801193a:	f44f 729c 	mov.w	r2, #312	; 0x138
 801193e:	4911      	ldr	r1, [pc, #68]	; (8011984 <netconn_bind+0x60>)
 8011940:	4811      	ldr	r0, [pc, #68]	; (8011988 <netconn_bind+0x64>)
 8011942:	f00e f85b 	bl	801f9fc <iprintf>
 8011946:	f06f 030f 	mvn.w	r3, #15
 801194a:	e015      	b.n	8011978 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d101      	bne.n	8011956 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8011952:	4b0e      	ldr	r3, [pc, #56]	; (801198c <netconn_bind+0x68>)
 8011954:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801195e:	88fb      	ldrh	r3, [r7, #6]
 8011960:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8011962:	f107 0314 	add.w	r3, r7, #20
 8011966:	4619      	mov	r1, r3
 8011968:	4809      	ldr	r0, [pc, #36]	; (8011990 <netconn_bind+0x6c>)
 801196a:	f7ff ff03 	bl	8011774 <netconn_apimsg>
 801196e:	4603      	mov	r3, r0
 8011970:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011974:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8011978:	4618      	mov	r0, r3
 801197a:	3738      	adds	r7, #56	; 0x38
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	08020920 	.word	0x08020920
 8011984:	08020a9c 	.word	0x08020a9c
 8011988:	080209bc 	.word	0x080209bc
 801198c:	08024318 	.word	0x08024318
 8011990:	08013121 	.word	0x08013121

08011994 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b08c      	sub	sp, #48	; 0x30
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	460b      	mov	r3, r1
 801199e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d109      	bne.n	80119ba <netconn_listen_with_backlog+0x26>
 80119a6:	4b0d      	ldr	r3, [pc, #52]	; (80119dc <netconn_listen_with_backlog+0x48>)
 80119a8:	f240 12bb 	movw	r2, #443	; 0x1bb
 80119ac:	490c      	ldr	r1, [pc, #48]	; (80119e0 <netconn_listen_with_backlog+0x4c>)
 80119ae:	480d      	ldr	r0, [pc, #52]	; (80119e4 <netconn_listen_with_backlog+0x50>)
 80119b0:	f00e f824 	bl	801f9fc <iprintf>
 80119b4:	f06f 030f 	mvn.w	r3, #15
 80119b8:	e00c      	b.n	80119d4 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80119be:	f107 030c 	add.w	r3, r7, #12
 80119c2:	4619      	mov	r1, r3
 80119c4:	4808      	ldr	r0, [pc, #32]	; (80119e8 <netconn_listen_with_backlog+0x54>)
 80119c6:	f7ff fed5 	bl	8011774 <netconn_apimsg>
 80119ca:	4603      	mov	r3, r0
 80119cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80119d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3730      	adds	r7, #48	; 0x30
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	08020920 	.word	0x08020920
 80119e0:	08020b1c 	.word	0x08020b1c
 80119e4:	080209bc 	.word	0x080209bc
 80119e8:	08013195 	.word	0x08013195

080119ec <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b086      	sub	sp, #24
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d109      	bne.n	8011a10 <netconn_accept+0x24>
 80119fc:	4b3d      	ldr	r3, [pc, #244]	; (8011af4 <netconn_accept+0x108>)
 80119fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011a02:	493d      	ldr	r1, [pc, #244]	; (8011af8 <netconn_accept+0x10c>)
 8011a04:	483d      	ldr	r0, [pc, #244]	; (8011afc <netconn_accept+0x110>)
 8011a06:	f00d fff9 	bl	801f9fc <iprintf>
 8011a0a:	f06f 030f 	mvn.w	r3, #15
 8011a0e:	e06c      	b.n	8011aea <netconn_accept+0xfe>
  *new_conn = NULL;
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	2200      	movs	r2, #0
 8011a14:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d109      	bne.n	8011a30 <netconn_accept+0x44>
 8011a1c:	4b35      	ldr	r3, [pc, #212]	; (8011af4 <netconn_accept+0x108>)
 8011a1e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8011a22:	4937      	ldr	r1, [pc, #220]	; (8011b00 <netconn_accept+0x114>)
 8011a24:	4835      	ldr	r0, [pc, #212]	; (8011afc <netconn_accept+0x110>)
 8011a26:	f00d ffe9 	bl	801f9fc <iprintf>
 8011a2a:	f06f 030f 	mvn.w	r3, #15
 8011a2e:	e05c      	b.n	8011aea <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f000 fb6c 	bl	801210e <netconn_err>
 8011a36:	4603      	mov	r3, r0
 8011a38:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8011a3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d002      	beq.n	8011a48 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8011a42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a46:	e050      	b.n	8011aea <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	3314      	adds	r3, #20
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f006 fa6c 	bl	8017f2a <sys_mbox_valid>
 8011a52:	4603      	mov	r3, r0
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d005      	beq.n	8011a64 <netconn_accept+0x78>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	7f1b      	ldrb	r3, [r3, #28]
 8011a5c:	f003 0301 	and.w	r3, r3, #1
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d002      	beq.n	8011a6a <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8011a64:	f06f 030e 	mvn.w	r3, #14
 8011a68:	e03f      	b.n	8011aea <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	7f1b      	ldrb	r3, [r3, #28]
 8011a6e:	f003 0302 	and.w	r3, r3, #2
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d00e      	beq.n	8011a94 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	3314      	adds	r3, #20
 8011a7a:	f107 020c 	add.w	r2, r7, #12
 8011a7e:	4611      	mov	r1, r2
 8011a80:	4618      	mov	r0, r3
 8011a82:	f006 fa36 	bl	8017ef2 <sys_arch_mbox_tryfetch>
 8011a86:	4603      	mov	r3, r0
 8011a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a8c:	d10a      	bne.n	8011aa4 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8011a8e:	f06f 0306 	mvn.w	r3, #6
 8011a92:	e02a      	b.n	8011aea <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	3314      	adds	r3, #20
 8011a98:	f107 010c 	add.w	r1, r7, #12
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f006 f9e8 	bl	8017e74 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d005      	beq.n	8011ab8 <netconn_accept+0xcc>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	2101      	movs	r1, #1
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f107 0213 	add.w	r2, r7, #19
 8011abe:	4611      	mov	r1, r2
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f000 fb75 	bl	80121b0 <lwip_netconn_is_err_msg>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d002      	beq.n	8011ad2 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8011acc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ad0:	e00b      	b.n	8011aea <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d102      	bne.n	8011ade <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8011ad8:	f06f 030e 	mvn.w	r3, #14
 8011adc:	e005      	b.n	8011aea <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	697a      	ldr	r2, [r7, #20]
 8011ae6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011ae8:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3718      	adds	r7, #24
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
 8011af2:	bf00      	nop
 8011af4:	08020920 	.word	0x08020920
 8011af8:	08020b3c 	.word	0x08020b3c
 8011afc:	080209bc 	.word	0x080209bc
 8011b00:	08020b5c 	.word	0x08020b5c

08011b04 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b088      	sub	sp, #32
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	60f8      	str	r0, [r7, #12]
 8011b0c:	60b9      	str	r1, [r7, #8]
 8011b0e:	4613      	mov	r3, r2
 8011b10:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8011b12:	2300      	movs	r3, #0
 8011b14:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d109      	bne.n	8011b30 <netconn_recv_data+0x2c>
 8011b1c:	4b58      	ldr	r3, [pc, #352]	; (8011c80 <netconn_recv_data+0x17c>)
 8011b1e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8011b22:	4958      	ldr	r1, [pc, #352]	; (8011c84 <netconn_recv_data+0x180>)
 8011b24:	4858      	ldr	r0, [pc, #352]	; (8011c88 <netconn_recv_data+0x184>)
 8011b26:	f00d ff69 	bl	801f9fc <iprintf>
 8011b2a:	f06f 030f 	mvn.w	r3, #15
 8011b2e:	e0a2      	b.n	8011c76 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	2200      	movs	r2, #0
 8011b34:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d109      	bne.n	8011b50 <netconn_recv_data+0x4c>
 8011b3c:	4b50      	ldr	r3, [pc, #320]	; (8011c80 <netconn_recv_data+0x17c>)
 8011b3e:	f240 224a 	movw	r2, #586	; 0x24a
 8011b42:	4952      	ldr	r1, [pc, #328]	; (8011c8c <netconn_recv_data+0x188>)
 8011b44:	4850      	ldr	r0, [pc, #320]	; (8011c88 <netconn_recv_data+0x184>)
 8011b46:	f00d ff59 	bl	801f9fc <iprintf>
 8011b4a:	f06f 030f 	mvn.w	r3, #15
 8011b4e:	e092      	b.n	8011c76 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	3310      	adds	r3, #16
 8011b54:	4618      	mov	r0, r3
 8011b56:	f006 f9e8 	bl	8017f2a <sys_mbox_valid>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d10e      	bne.n	8011b7e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011b60:	68f8      	ldr	r0, [r7, #12]
 8011b62:	f000 fad4 	bl	801210e <netconn_err>
 8011b66:	4603      	mov	r3, r0
 8011b68:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8011b6a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d002      	beq.n	8011b78 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8011b72:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011b76:	e07e      	b.n	8011c76 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8011b78:	f06f 030a 	mvn.w	r3, #10
 8011b7c:	e07b      	b.n	8011c76 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	7f1b      	ldrb	r3, [r3, #28]
 8011b82:	f003 0302 	and.w	r3, r3, #2
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d10f      	bne.n	8011baa <netconn_recv_data+0xa6>
 8011b8a:	79fb      	ldrb	r3, [r7, #7]
 8011b8c:	f003 0304 	and.w	r3, r3, #4
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d10a      	bne.n	8011baa <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	7f1b      	ldrb	r3, [r3, #28]
 8011b98:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d104      	bne.n	8011baa <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d023      	beq.n	8011bf2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	3310      	adds	r3, #16
 8011bae:	f107 0218 	add.w	r2, r7, #24
 8011bb2:	4611      	mov	r1, r2
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f006 f99c 	bl	8017ef2 <sys_arch_mbox_tryfetch>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bc0:	d11f      	bne.n	8011c02 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8011bc2:	68f8      	ldr	r0, [r7, #12]
 8011bc4:	f000 faa3 	bl	801210e <netconn_err>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8011bcc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d002      	beq.n	8011bda <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8011bd4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011bd8:	e04d      	b.n	8011c76 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	7f1b      	ldrb	r3, [r3, #28]
 8011bde:	f003 0301 	and.w	r3, r3, #1
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d002      	beq.n	8011bec <netconn_recv_data+0xe8>
        return ERR_CONN;
 8011be6:	f06f 030a 	mvn.w	r3, #10
 8011bea:	e044      	b.n	8011c76 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8011bec:	f06f 0306 	mvn.w	r3, #6
 8011bf0:	e041      	b.n	8011c76 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	3310      	adds	r3, #16
 8011bf6:	f107 0118 	add.w	r1, r7, #24
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f006 f939 	bl	8017e74 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c0a:	2b10      	cmp	r3, #16
 8011c0c:	d117      	bne.n	8011c3e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	f107 0217 	add.w	r2, r7, #23
 8011c14:	4611      	mov	r1, r2
 8011c16:	4618      	mov	r0, r3
 8011c18:	f000 faca 	bl	80121b0 <lwip_netconn_is_err_msg>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d009      	beq.n	8011c36 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8011c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c26:	f113 0f0f 	cmn.w	r3, #15
 8011c2a:	d101      	bne.n	8011c30 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	e022      	b.n	8011c76 <netconn_recv_data+0x172>
      }
      return err;
 8011c30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c34:	e01f      	b.n	8011c76 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8011c36:	69bb      	ldr	r3, [r7, #24]
 8011c38:	891b      	ldrh	r3, [r3, #8]
 8011c3a:	83fb      	strh	r3, [r7, #30]
 8011c3c:	e00d      	b.n	8011c5a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8011c3e:	69bb      	ldr	r3, [r7, #24]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d106      	bne.n	8011c52 <netconn_recv_data+0x14e>
 8011c44:	4b0e      	ldr	r3, [pc, #56]	; (8011c80 <netconn_recv_data+0x17c>)
 8011c46:	f240 2291 	movw	r2, #657	; 0x291
 8011c4a:	4911      	ldr	r1, [pc, #68]	; (8011c90 <netconn_recv_data+0x18c>)
 8011c4c:	480e      	ldr	r0, [pc, #56]	; (8011c88 <netconn_recv_data+0x184>)
 8011c4e:	f00d fed5 	bl	801f9fc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8011c52:	69bb      	ldr	r3, [r7, #24]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	891b      	ldrh	r3, [r3, #8]
 8011c58:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d005      	beq.n	8011c6e <netconn_recv_data+0x16a>
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c66:	8bfa      	ldrh	r2, [r7, #30]
 8011c68:	2101      	movs	r1, #1
 8011c6a:	68f8      	ldr	r0, [r7, #12]
 8011c6c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8011c6e:	69ba      	ldr	r2, [r7, #24]
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011c74:	2300      	movs	r3, #0
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3720      	adds	r7, #32
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	08020920 	.word	0x08020920
 8011c84:	08020b7c 	.word	0x08020b7c
 8011c88:	080209bc 	.word	0x080209bc
 8011c8c:	08020b9c 	.word	0x08020b9c
 8011c90:	08020bb8 	.word	0x08020bb8

08011c94 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d005      	beq.n	8011cb2 <netconn_tcp_recvd_msg+0x1e>
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011cae:	2b10      	cmp	r3, #16
 8011cb0:	d009      	beq.n	8011cc6 <netconn_tcp_recvd_msg+0x32>
 8011cb2:	4b0c      	ldr	r3, [pc, #48]	; (8011ce4 <netconn_tcp_recvd_msg+0x50>)
 8011cb4:	f240 22a7 	movw	r2, #679	; 0x2a7
 8011cb8:	490b      	ldr	r1, [pc, #44]	; (8011ce8 <netconn_tcp_recvd_msg+0x54>)
 8011cba:	480c      	ldr	r0, [pc, #48]	; (8011cec <netconn_tcp_recvd_msg+0x58>)
 8011cbc:	f00d fe9e 	bl	801f9fc <iprintf>
 8011cc0:	f06f 030f 	mvn.w	r3, #15
 8011cc4:	e00a      	b.n	8011cdc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	68ba      	ldr	r2, [r7, #8]
 8011cd0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8011cd2:	6879      	ldr	r1, [r7, #4]
 8011cd4:	4806      	ldr	r0, [pc, #24]	; (8011cf0 <netconn_tcp_recvd_msg+0x5c>)
 8011cd6:	f7ff fd4d 	bl	8011774 <netconn_apimsg>
 8011cda:	4603      	mov	r3, r0
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3710      	adds	r7, #16
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}
 8011ce4:	08020920 	.word	0x08020920
 8011ce8:	08020bc4 	.word	0x08020bc4
 8011cec:	080209bc 	.word	0x080209bc
 8011cf0:	080132c5 	.word	0x080132c5

08011cf4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b090      	sub	sp, #64	; 0x40
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	3310      	adds	r3, #16
 8011d06:	4618      	mov	r0, r3
 8011d08:	f006 f90f 	bl	8017f2a <sys_mbox_valid>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d102      	bne.n	8011d18 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8011d12:	f06f 030a 	mvn.w	r3, #10
 8011d16:	e06d      	b.n	8011df4 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	7f1b      	ldrb	r3, [r3, #28]
 8011d1c:	b25b      	sxtb	r3, r3
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	da07      	bge.n	8011d32 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	7f1b      	ldrb	r3, [r3, #28]
 8011d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d2a:	b2da      	uxtb	r2, r3
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011d30:	e039      	b.n	8011da6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011d32:	79fb      	ldrb	r3, [r7, #7]
 8011d34:	461a      	mov	r2, r3
 8011d36:	68b9      	ldr	r1, [r7, #8]
 8011d38:	68f8      	ldr	r0, [r7, #12]
 8011d3a:	f7ff fee3 	bl	8011b04 <netconn_recv_data>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8011d44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d002      	beq.n	8011d52 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8011d4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011d50:	e050      	b.n	8011df4 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8011d58:	79fb      	ldrb	r3, [r7, #7]
 8011d5a:	f003 0308 	and.w	r3, r3, #8
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d10e      	bne.n	8011d80 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d002      	beq.n	8011d6e <netconn_recv_data_tcp+0x7a>
 8011d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6a:	891b      	ldrh	r3, [r3, #8]
 8011d6c:	e000      	b.n	8011d70 <netconn_recv_data_tcp+0x7c>
 8011d6e:	2301      	movs	r3, #1
 8011d70:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011d72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011d74:	f107 0214 	add.w	r2, r7, #20
 8011d78:	4619      	mov	r1, r3
 8011d7a:	68f8      	ldr	r0, [r7, #12]
 8011d7c:	f7ff ff8a 	bl	8011c94 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d134      	bne.n	8011df0 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8011d86:	79fb      	ldrb	r3, [r7, #7]
 8011d88:	f003 0310 	and.w	r3, r3, #16
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d009      	beq.n	8011da4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	7f1b      	ldrb	r3, [r3, #28]
 8011d94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8011d9e:	f06f 0306 	mvn.w	r3, #6
 8011da2:	e027      	b.n	8011df4 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8011da4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d005      	beq.n	8011dba <netconn_recv_data_tcp+0xc6>
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011db2:	2200      	movs	r2, #0
 8011db4:	2101      	movs	r1, #1
 8011db6:	68f8      	ldr	r0, [r7, #12]
 8011db8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d10f      	bne.n	8011de2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8011dc2:	68f8      	ldr	r0, [r7, #12]
 8011dc4:	f000 f9a3 	bl	801210e <netconn_err>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8011dce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d002      	beq.n	8011ddc <netconn_recv_data_tcp+0xe8>
          return err;
 8011dd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011dda:	e00b      	b.n	8011df4 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8011ddc:	f06f 030d 	mvn.w	r3, #13
 8011de0:	e008      	b.n	8011df4 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011de2:	2101      	movs	r1, #1
 8011de4:	68f8      	ldr	r0, [r7, #12]
 8011de6:	f000 f955 	bl	8012094 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8011dea:	f06f 030e 	mvn.w	r3, #14
 8011dee:	e001      	b.n	8011df4 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011df0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3740      	adds	r7, #64	; 0x40
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b086      	sub	sp, #24
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8011e06:	2300      	movs	r3, #0
 8011e08:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d109      	bne.n	8011e24 <netconn_recv+0x28>
 8011e10:	4b32      	ldr	r3, [pc, #200]	; (8011edc <netconn_recv+0xe0>)
 8011e12:	f240 3263 	movw	r2, #867	; 0x363
 8011e16:	4932      	ldr	r1, [pc, #200]	; (8011ee0 <netconn_recv+0xe4>)
 8011e18:	4832      	ldr	r0, [pc, #200]	; (8011ee4 <netconn_recv+0xe8>)
 8011e1a:	f00d fdef 	bl	801f9fc <iprintf>
 8011e1e:	f06f 030f 	mvn.w	r3, #15
 8011e22:	e056      	b.n	8011ed2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	2200      	movs	r2, #0
 8011e28:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d109      	bne.n	8011e44 <netconn_recv+0x48>
 8011e30:	4b2a      	ldr	r3, [pc, #168]	; (8011edc <netconn_recv+0xe0>)
 8011e32:	f240 3265 	movw	r2, #869	; 0x365
 8011e36:	492c      	ldr	r1, [pc, #176]	; (8011ee8 <netconn_recv+0xec>)
 8011e38:	482a      	ldr	r0, [pc, #168]	; (8011ee4 <netconn_recv+0xe8>)
 8011e3a:	f00d fddf 	bl	801f9fc <iprintf>
 8011e3e:	f06f 030f 	mvn.w	r3, #15
 8011e42:	e046      	b.n	8011ed2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e4c:	2b10      	cmp	r3, #16
 8011e4e:	d13a      	bne.n	8011ec6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011e50:	2300      	movs	r3, #0
 8011e52:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011e54:	2006      	movs	r0, #6
 8011e56:	f004 fdbb 	bl	80169d0 <memp_malloc>
 8011e5a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d102      	bne.n	8011e68 <netconn_recv+0x6c>
      return ERR_MEM;
 8011e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e66:	e034      	b.n	8011ed2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011e68:	f107 030c 	add.w	r3, r7, #12
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	4619      	mov	r1, r3
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f7ff ff3f 	bl	8011cf4 <netconn_recv_data_tcp>
 8011e76:	4603      	mov	r3, r0
 8011e78:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011e7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d006      	beq.n	8011e90 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8011e82:	6979      	ldr	r1, [r7, #20]
 8011e84:	2006      	movs	r0, #6
 8011e86:	f004 fe19 	bl	8016abc <memp_free>
      return err;
 8011e8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e8e:	e020      	b.n	8011ed2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d106      	bne.n	8011ea4 <netconn_recv+0xa8>
 8011e96:	4b11      	ldr	r3, [pc, #68]	; (8011edc <netconn_recv+0xe0>)
 8011e98:	f240 3279 	movw	r2, #889	; 0x379
 8011e9c:	4913      	ldr	r1, [pc, #76]	; (8011eec <netconn_recv+0xf0>)
 8011e9e:	4811      	ldr	r0, [pc, #68]	; (8011ee4 <netconn_recv+0xe8>)
 8011ea0:	f00d fdac 	bl	801f9fc <iprintf>

    buf->p = p;
 8011ea4:	68fa      	ldr	r2, [r7, #12]
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011eaa:	68fa      	ldr	r2, [r7, #12]
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	697a      	ldr	r2, [r7, #20]
 8011ec0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	e005      	b.n	8011ed2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	6839      	ldr	r1, [r7, #0]
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f7ff fe1a 	bl	8011b04 <netconn_recv_data>
 8011ed0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3718      	adds	r7, #24
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	08020920 	.word	0x08020920
 8011ee0:	08020b7c 	.word	0x08020b7c
 8011ee4:	080209bc 	.word	0x080209bc
 8011ee8:	08020b9c 	.word	0x08020b9c
 8011eec:	08020c14 	.word	0x08020c14

08011ef0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b088      	sub	sp, #32
 8011ef4:	af02      	add	r7, sp, #8
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	60b9      	str	r1, [r7, #8]
 8011efa:	607a      	str	r2, [r7, #4]
 8011efc:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8011f06:	78fa      	ldrb	r2, [r7, #3]
 8011f08:	f107 0110 	add.w	r1, r7, #16
 8011f0c:	6a3b      	ldr	r3, [r7, #32]
 8011f0e:	9300      	str	r3, [sp, #0]
 8011f10:	4613      	mov	r3, r2
 8011f12:	2201      	movs	r2, #1
 8011f14:	68f8      	ldr	r0, [r7, #12]
 8011f16:	f000 f805 	bl	8011f24 <netconn_write_vectors_partly>
 8011f1a:	4603      	mov	r3, r0
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3718      	adds	r7, #24
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}

08011f24 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b092      	sub	sp, #72	; 0x48
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	4611      	mov	r1, r2
 8011f30:	461a      	mov	r2, r3
 8011f32:	460b      	mov	r3, r1
 8011f34:	80fb      	strh	r3, [r7, #6]
 8011f36:	4613      	mov	r3, r2
 8011f38:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d109      	bne.n	8011f54 <netconn_write_vectors_partly+0x30>
 8011f40:	4b4e      	ldr	r3, [pc, #312]	; (801207c <netconn_write_vectors_partly+0x158>)
 8011f42:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011f46:	494e      	ldr	r1, [pc, #312]	; (8012080 <netconn_write_vectors_partly+0x15c>)
 8011f48:	484e      	ldr	r0, [pc, #312]	; (8012084 <netconn_write_vectors_partly+0x160>)
 8011f4a:	f00d fd57 	bl	801f9fc <iprintf>
 8011f4e:	f06f 030f 	mvn.w	r3, #15
 8011f52:	e08e      	b.n	8012072 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f5c:	2b10      	cmp	r3, #16
 8011f5e:	d009      	beq.n	8011f74 <netconn_write_vectors_partly+0x50>
 8011f60:	4b46      	ldr	r3, [pc, #280]	; (801207c <netconn_write_vectors_partly+0x158>)
 8011f62:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8011f66:	4948      	ldr	r1, [pc, #288]	; (8012088 <netconn_write_vectors_partly+0x164>)
 8011f68:	4846      	ldr	r0, [pc, #280]	; (8012084 <netconn_write_vectors_partly+0x160>)
 8011f6a:	f00d fd47 	bl	801f9fc <iprintf>
 8011f6e:	f06f 0305 	mvn.w	r3, #5
 8011f72:	e07e      	b.n	8012072 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	7f1b      	ldrb	r3, [r3, #28]
 8011f78:	f003 0302 	and.w	r3, r3, #2
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d104      	bne.n	8011f8a <netconn_write_vectors_partly+0x66>
 8011f80:	797b      	ldrb	r3, [r7, #5]
 8011f82:	f003 0304 	and.w	r3, r3, #4
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d001      	beq.n	8011f8e <netconn_write_vectors_partly+0x6a>
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	e000      	b.n	8011f90 <netconn_write_vectors_partly+0x6c>
 8011f8e:	2300      	movs	r3, #0
 8011f90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8011f94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d005      	beq.n	8011fa8 <netconn_write_vectors_partly+0x84>
 8011f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d102      	bne.n	8011fa8 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8011fa2:	f06f 0305 	mvn.w	r3, #5
 8011fa6:	e064      	b.n	8012072 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8011fac:	2300      	movs	r3, #0
 8011fae:	643b      	str	r3, [r7, #64]	; 0x40
 8011fb0:	e015      	b.n	8011fde <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8011fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fb4:	00db      	lsls	r3, r3, #3
 8011fb6:	68ba      	ldr	r2, [r7, #8]
 8011fb8:	4413      	add	r3, r2
 8011fba:	685b      	ldr	r3, [r3, #4]
 8011fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fbe:	4413      	add	r3, r2
 8011fc0:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8011fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fc4:	00db      	lsls	r3, r3, #3
 8011fc6:	68ba      	ldr	r2, [r7, #8]
 8011fc8:	4413      	add	r3, r2
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d202      	bcs.n	8011fd8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8011fd2:	f06f 0305 	mvn.w	r3, #5
 8011fd6:	e04c      	b.n	8012072 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8011fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fda:	3301      	adds	r3, #1
 8011fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8011fde:	88fb      	ldrh	r3, [r7, #6]
 8011fe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	dbe5      	blt.n	8011fb2 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8011fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d101      	bne.n	8011ff0 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8011fec:	2300      	movs	r3, #0
 8011fee:	e040      	b.n	8012072 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8011ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	da0a      	bge.n	801200c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8011ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d102      	bne.n	8012002 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8011ffc:	f06f 0305 	mvn.w	r3, #5
 8012000:	e037      	b.n	8012072 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8012002:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012006:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8012008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8012014:	88fb      	ldrh	r3, [r7, #6]
 8012016:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8012018:	2300      	movs	r3, #0
 801201a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 801201c:	797b      	ldrb	r3, [r7, #5]
 801201e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8012022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012024:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8012026:	2300      	movs	r3, #0
 8012028:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 801202a:	f107 0314 	add.w	r3, r7, #20
 801202e:	4619      	mov	r1, r3
 8012030:	4816      	ldr	r0, [pc, #88]	; (801208c <netconn_write_vectors_partly+0x168>)
 8012032:	f7ff fb9f 	bl	8011774 <netconn_apimsg>
 8012036:	4603      	mov	r3, r0
 8012038:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 801203c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012040:	2b00      	cmp	r3, #0
 8012042:	d114      	bne.n	801206e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8012044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012046:	2b00      	cmp	r3, #0
 8012048:	d002      	beq.n	8012050 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 801204a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801204c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801204e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8012050:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012054:	2b00      	cmp	r3, #0
 8012056:	d10a      	bne.n	801206e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8012058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801205c:	429a      	cmp	r2, r3
 801205e:	d006      	beq.n	801206e <netconn_write_vectors_partly+0x14a>
 8012060:	4b06      	ldr	r3, [pc, #24]	; (801207c <netconn_write_vectors_partly+0x158>)
 8012062:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012066:	490a      	ldr	r1, [pc, #40]	; (8012090 <netconn_write_vectors_partly+0x16c>)
 8012068:	4806      	ldr	r0, [pc, #24]	; (8012084 <netconn_write_vectors_partly+0x160>)
 801206a:	f00d fcc7 	bl	801f9fc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 801206e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8012072:	4618      	mov	r0, r3
 8012074:	3748      	adds	r7, #72	; 0x48
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	08020920 	.word	0x08020920
 8012080:	08020c3c 	.word	0x08020c3c
 8012084:	080209bc 	.word	0x080209bc
 8012088:	08020c58 	.word	0x08020c58
 801208c:	080136cd 	.word	0x080136cd
 8012090:	08020c7c 	.word	0x08020c7c

08012094 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b08c      	sub	sp, #48	; 0x30
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	460b      	mov	r3, r1
 801209e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d109      	bne.n	80120ba <netconn_close_shutdown+0x26>
 80120a6:	4b0f      	ldr	r3, [pc, #60]	; (80120e4 <netconn_close_shutdown+0x50>)
 80120a8:	f240 4247 	movw	r2, #1095	; 0x447
 80120ac:	490e      	ldr	r1, [pc, #56]	; (80120e8 <netconn_close_shutdown+0x54>)
 80120ae:	480f      	ldr	r0, [pc, #60]	; (80120ec <netconn_close_shutdown+0x58>)
 80120b0:	f00d fca4 	bl	801f9fc <iprintf>
 80120b4:	f06f 030f 	mvn.w	r3, #15
 80120b8:	e010      	b.n	80120dc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80120be:	78fb      	ldrb	r3, [r7, #3]
 80120c0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80120c2:	2329      	movs	r3, #41	; 0x29
 80120c4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80120c6:	f107 030c 	add.w	r3, r7, #12
 80120ca:	4619      	mov	r1, r3
 80120cc:	4808      	ldr	r0, [pc, #32]	; (80120f0 <netconn_close_shutdown+0x5c>)
 80120ce:	f7ff fb51 	bl	8011774 <netconn_apimsg>
 80120d2:	4603      	mov	r3, r0
 80120d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80120d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3730      	adds	r7, #48	; 0x30
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}
 80120e4:	08020920 	.word	0x08020920
 80120e8:	08020ca0 	.word	0x08020ca0
 80120ec:	080209bc 	.word	0x080209bc
 80120f0:	080137e5 	.word	0x080137e5

080120f4 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80120fc:	2103      	movs	r1, #3
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f7ff ffc8 	bl	8012094 <netconn_close_shutdown>
 8012104:	4603      	mov	r3, r0
}
 8012106:	4618      	mov	r0, r3
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 801210e:	b580      	push	{r7, lr}
 8012110:	b084      	sub	sp, #16
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d101      	bne.n	8012120 <netconn_err+0x12>
    return ERR_OK;
 801211c:	2300      	movs	r3, #0
 801211e:	e00d      	b.n	801213c <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8012120:	f006 f81e 	bl	8018160 <sys_arch_protect>
 8012124:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	7a1b      	ldrb	r3, [r3, #8]
 801212a:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2200      	movs	r2, #0
 8012130:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8012132:	68f8      	ldr	r0, [r7, #12]
 8012134:	f006 f822 	bl	801817c <sys_arch_unprotect>
  return err;
 8012138:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801213c:	4618      	mov	r0, r3
 801213e:	3710      	adds	r7, #16
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}

08012144 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b082      	sub	sp, #8
 8012148:	af00      	add	r7, sp, #0
 801214a:	4603      	mov	r3, r0
 801214c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 801214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012152:	f113 0f0d 	cmn.w	r3, #13
 8012156:	d009      	beq.n	801216c <lwip_netconn_err_to_msg+0x28>
 8012158:	f113 0f0d 	cmn.w	r3, #13
 801215c:	dc0c      	bgt.n	8012178 <lwip_netconn_err_to_msg+0x34>
 801215e:	f113 0f0f 	cmn.w	r3, #15
 8012162:	d007      	beq.n	8012174 <lwip_netconn_err_to_msg+0x30>
 8012164:	f113 0f0e 	cmn.w	r3, #14
 8012168:	d002      	beq.n	8012170 <lwip_netconn_err_to_msg+0x2c>
 801216a:	e005      	b.n	8012178 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 801216c:	4b0a      	ldr	r3, [pc, #40]	; (8012198 <lwip_netconn_err_to_msg+0x54>)
 801216e:	e00e      	b.n	801218e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8012170:	4b0a      	ldr	r3, [pc, #40]	; (801219c <lwip_netconn_err_to_msg+0x58>)
 8012172:	e00c      	b.n	801218e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8012174:	4b0a      	ldr	r3, [pc, #40]	; (80121a0 <lwip_netconn_err_to_msg+0x5c>)
 8012176:	e00a      	b.n	801218e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8012178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d005      	beq.n	801218c <lwip_netconn_err_to_msg+0x48>
 8012180:	4b08      	ldr	r3, [pc, #32]	; (80121a4 <lwip_netconn_err_to_msg+0x60>)
 8012182:	227d      	movs	r2, #125	; 0x7d
 8012184:	4908      	ldr	r1, [pc, #32]	; (80121a8 <lwip_netconn_err_to_msg+0x64>)
 8012186:	4809      	ldr	r0, [pc, #36]	; (80121ac <lwip_netconn_err_to_msg+0x68>)
 8012188:	f00d fc38 	bl	801f9fc <iprintf>
      return NULL;
 801218c:	2300      	movs	r3, #0
  }
}
 801218e:	4618      	mov	r0, r3
 8012190:	3708      	adds	r7, #8
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	08024302 	.word	0x08024302
 801219c:	08024303 	.word	0x08024303
 80121a0:	08024304 	.word	0x08024304
 80121a4:	08020cbc 	.word	0x08020cbc
 80121a8:	08020d34 	.word	0x08020d34
 80121ac:	08020d44 	.word	0x08020d44

080121b0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d105      	bne.n	80121cc <lwip_netconn_is_err_msg+0x1c>
 80121c0:	4b12      	ldr	r3, [pc, #72]	; (801220c <lwip_netconn_is_err_msg+0x5c>)
 80121c2:	2285      	movs	r2, #133	; 0x85
 80121c4:	4912      	ldr	r1, [pc, #72]	; (8012210 <lwip_netconn_is_err_msg+0x60>)
 80121c6:	4813      	ldr	r0, [pc, #76]	; (8012214 <lwip_netconn_is_err_msg+0x64>)
 80121c8:	f00d fc18 	bl	801f9fc <iprintf>

  if (msg == &netconn_aborted) {
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	4a12      	ldr	r2, [pc, #72]	; (8012218 <lwip_netconn_is_err_msg+0x68>)
 80121d0:	4293      	cmp	r3, r2
 80121d2:	d104      	bne.n	80121de <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	22f3      	movs	r2, #243	; 0xf3
 80121d8:	701a      	strb	r2, [r3, #0]
    return 1;
 80121da:	2301      	movs	r3, #1
 80121dc:	e012      	b.n	8012204 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	4a0e      	ldr	r2, [pc, #56]	; (801221c <lwip_netconn_is_err_msg+0x6c>)
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d104      	bne.n	80121f0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	22f2      	movs	r2, #242	; 0xf2
 80121ea:	701a      	strb	r2, [r3, #0]
    return 1;
 80121ec:	2301      	movs	r3, #1
 80121ee:	e009      	b.n	8012204 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	4a0b      	ldr	r2, [pc, #44]	; (8012220 <lwip_netconn_is_err_msg+0x70>)
 80121f4:	4293      	cmp	r3, r2
 80121f6:	d104      	bne.n	8012202 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	22f1      	movs	r2, #241	; 0xf1
 80121fc:	701a      	strb	r2, [r3, #0]
    return 1;
 80121fe:	2301      	movs	r3, #1
 8012200:	e000      	b.n	8012204 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8012202:	2300      	movs	r3, #0
}
 8012204:	4618      	mov	r0, r3
 8012206:	3708      	adds	r7, #8
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}
 801220c:	08020cbc 	.word	0x08020cbc
 8012210:	08020d6c 	.word	0x08020d6c
 8012214:	08020d44 	.word	0x08020d44
 8012218:	08024302 	.word	0x08024302
 801221c:	08024303 	.word	0x08024303
 8012220:	08024304 	.word	0x08024304

08012224 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b088      	sub	sp, #32
 8012228:	af00      	add	r7, sp, #0
 801222a:	60f8      	str	r0, [r7, #12]
 801222c:	60b9      	str	r1, [r7, #8]
 801222e:	607a      	str	r2, [r7, #4]
 8012230:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d105      	bne.n	8012244 <recv_udp+0x20>
 8012238:	4b34      	ldr	r3, [pc, #208]	; (801230c <recv_udp+0xe8>)
 801223a:	22e5      	movs	r2, #229	; 0xe5
 801223c:	4934      	ldr	r1, [pc, #208]	; (8012310 <recv_udp+0xec>)
 801223e:	4835      	ldr	r0, [pc, #212]	; (8012314 <recv_udp+0xf0>)
 8012240:	f00d fbdc 	bl	801f9fc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d105      	bne.n	8012256 <recv_udp+0x32>
 801224a:	4b30      	ldr	r3, [pc, #192]	; (801230c <recv_udp+0xe8>)
 801224c:	22e6      	movs	r2, #230	; 0xe6
 801224e:	4932      	ldr	r1, [pc, #200]	; (8012318 <recv_udp+0xf4>)
 8012250:	4830      	ldr	r0, [pc, #192]	; (8012314 <recv_udp+0xf0>)
 8012252:	f00d fbd3 	bl	801f9fc <iprintf>
  conn = (struct netconn *)arg;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801225a:	69fb      	ldr	r3, [r7, #28]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d103      	bne.n	8012268 <recv_udp+0x44>
    pbuf_free(p);
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f005 fb1f 	bl	80178a4 <pbuf_free>
    return;
 8012266:	e04d      	b.n	8012304 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8012268:	69fb      	ldr	r3, [r7, #28]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	68ba      	ldr	r2, [r7, #8]
 801226e:	429a      	cmp	r2, r3
 8012270:	d005      	beq.n	801227e <recv_udp+0x5a>
 8012272:	4b26      	ldr	r3, [pc, #152]	; (801230c <recv_udp+0xe8>)
 8012274:	22ee      	movs	r2, #238	; 0xee
 8012276:	4929      	ldr	r1, [pc, #164]	; (801231c <recv_udp+0xf8>)
 8012278:	4826      	ldr	r0, [pc, #152]	; (8012314 <recv_udp+0xf0>)
 801227a:	f00d fbbf 	bl	801f9fc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801227e:	69fb      	ldr	r3, [r7, #28]
 8012280:	3310      	adds	r3, #16
 8012282:	4618      	mov	r0, r3
 8012284:	f005 fe51 	bl	8017f2a <sys_mbox_valid>
 8012288:	4603      	mov	r3, r0
 801228a:	2b00      	cmp	r3, #0
 801228c:	d103      	bne.n	8012296 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f005 fb08 	bl	80178a4 <pbuf_free>
    return;
 8012294:	e036      	b.n	8012304 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012296:	2006      	movs	r0, #6
 8012298:	f004 fb9a 	bl	80169d0 <memp_malloc>
 801229c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 801229e:	69bb      	ldr	r3, [r7, #24]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d103      	bne.n	80122ac <recv_udp+0x88>
    pbuf_free(p);
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f005 fafd 	bl	80178a4 <pbuf_free>
    return;
 80122aa:	e02b      	b.n	8012304 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80122ac:	69bb      	ldr	r3, [r7, #24]
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80122b2:	69bb      	ldr	r3, [r7, #24]
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d002      	beq.n	80122c4 <recv_udp+0xa0>
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	e000      	b.n	80122c6 <recv_udp+0xa2>
 80122c4:	2300      	movs	r3, #0
 80122c6:	69ba      	ldr	r2, [r7, #24]
 80122c8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80122ca:	69bb      	ldr	r3, [r7, #24]
 80122cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80122ce:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	891b      	ldrh	r3, [r3, #8]
 80122d4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80122d6:	69fb      	ldr	r3, [r7, #28]
 80122d8:	3310      	adds	r3, #16
 80122da:	69b9      	ldr	r1, [r7, #24]
 80122dc:	4618      	mov	r0, r3
 80122de:	f005 fdaf 	bl	8017e40 <sys_mbox_trypost>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d003      	beq.n	80122f0 <recv_udp+0xcc>
    netbuf_delete(buf);
 80122e8:	69b8      	ldr	r0, [r7, #24]
 80122ea:	f004 fc11 	bl	8016b10 <netbuf_delete>
    return;
 80122ee:	e009      	b.n	8012304 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80122f0:	69fb      	ldr	r3, [r7, #28]
 80122f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d005      	beq.n	8012304 <recv_udp+0xe0>
 80122f8:	69fb      	ldr	r3, [r7, #28]
 80122fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122fc:	8afa      	ldrh	r2, [r7, #22]
 80122fe:	2100      	movs	r1, #0
 8012300:	69f8      	ldr	r0, [r7, #28]
 8012302:	4798      	blx	r3
  }
}
 8012304:	3720      	adds	r7, #32
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	08020cbc 	.word	0x08020cbc
 8012310:	08020d78 	.word	0x08020d78
 8012314:	08020d44 	.word	0x08020d44
 8012318:	08020d9c 	.word	0x08020d9c
 801231c:	08020dbc 	.word	0x08020dbc

08012320 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b088      	sub	sp, #32
 8012324:	af00      	add	r7, sp, #0
 8012326:	60f8      	str	r0, [r7, #12]
 8012328:	60b9      	str	r1, [r7, #8]
 801232a:	607a      	str	r2, [r7, #4]
 801232c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d106      	bne.n	8012342 <recv_tcp+0x22>
 8012334:	4b36      	ldr	r3, [pc, #216]	; (8012410 <recv_tcp+0xf0>)
 8012336:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801233a:	4936      	ldr	r1, [pc, #216]	; (8012414 <recv_tcp+0xf4>)
 801233c:	4836      	ldr	r0, [pc, #216]	; (8012418 <recv_tcp+0xf8>)
 801233e:	f00d fb5d 	bl	801f9fc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d106      	bne.n	8012356 <recv_tcp+0x36>
 8012348:	4b31      	ldr	r3, [pc, #196]	; (8012410 <recv_tcp+0xf0>)
 801234a:	f240 122d 	movw	r2, #301	; 0x12d
 801234e:	4933      	ldr	r1, [pc, #204]	; (801241c <recv_tcp+0xfc>)
 8012350:	4831      	ldr	r0, [pc, #196]	; (8012418 <recv_tcp+0xf8>)
 8012352:	f00d fb53 	bl	801f9fc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8012356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d006      	beq.n	801236c <recv_tcp+0x4c>
 801235e:	4b2c      	ldr	r3, [pc, #176]	; (8012410 <recv_tcp+0xf0>)
 8012360:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8012364:	492e      	ldr	r1, [pc, #184]	; (8012420 <recv_tcp+0x100>)
 8012366:	482c      	ldr	r0, [pc, #176]	; (8012418 <recv_tcp+0xf8>)
 8012368:	f00d fb48 	bl	801f9fc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d102      	bne.n	801237c <recv_tcp+0x5c>
    return ERR_VAL;
 8012376:	f06f 0305 	mvn.w	r3, #5
 801237a:	e045      	b.n	8012408 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	685b      	ldr	r3, [r3, #4]
 8012380:	68ba      	ldr	r2, [r7, #8]
 8012382:	429a      	cmp	r2, r3
 8012384:	d006      	beq.n	8012394 <recv_tcp+0x74>
 8012386:	4b22      	ldr	r3, [pc, #136]	; (8012410 <recv_tcp+0xf0>)
 8012388:	f240 1235 	movw	r2, #309	; 0x135
 801238c:	4925      	ldr	r1, [pc, #148]	; (8012424 <recv_tcp+0x104>)
 801238e:	4822      	ldr	r0, [pc, #136]	; (8012418 <recv_tcp+0xf8>)
 8012390:	f00d fb34 	bl	801f9fc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	3310      	adds	r3, #16
 8012398:	4618      	mov	r0, r3
 801239a:	f005 fdc6 	bl	8017f2a <sys_mbox_valid>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d10d      	bne.n	80123c0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d008      	beq.n	80123bc <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	891b      	ldrh	r3, [r3, #8]
 80123ae:	4619      	mov	r1, r3
 80123b0:	68b8      	ldr	r0, [r7, #8]
 80123b2:	f006 fc11 	bl	8018bd8 <tcp_recved>
      pbuf_free(p);
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f005 fa74 	bl	80178a4 <pbuf_free>
    }
    return ERR_OK;
 80123bc:	2300      	movs	r3, #0
 80123be:	e023      	b.n	8012408 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d005      	beq.n	80123d2 <recv_tcp+0xb2>
    msg = p;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	891b      	ldrh	r3, [r3, #8]
 80123ce:	83fb      	strh	r3, [r7, #30]
 80123d0:	e003      	b.n	80123da <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80123d2:	4b15      	ldr	r3, [pc, #84]	; (8012428 <recv_tcp+0x108>)
 80123d4:	61bb      	str	r3, [r7, #24]
    len = 0;
 80123d6:	2300      	movs	r3, #0
 80123d8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	3310      	adds	r3, #16
 80123de:	69b9      	ldr	r1, [r7, #24]
 80123e0:	4618      	mov	r0, r3
 80123e2:	f005 fd2d 	bl	8017e40 <sys_mbox_trypost>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d002      	beq.n	80123f2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80123ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123f0:	e00a      	b.n	8012408 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d005      	beq.n	8012406 <recv_tcp+0xe6>
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123fe:	8bfa      	ldrh	r2, [r7, #30]
 8012400:	2100      	movs	r1, #0
 8012402:	6978      	ldr	r0, [r7, #20]
 8012404:	4798      	blx	r3
  }

  return ERR_OK;
 8012406:	2300      	movs	r3, #0
}
 8012408:	4618      	mov	r0, r3
 801240a:	3720      	adds	r7, #32
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	08020cbc 	.word	0x08020cbc
 8012414:	08020ddc 	.word	0x08020ddc
 8012418:	08020d44 	.word	0x08020d44
 801241c:	08020e00 	.word	0x08020e00
 8012420:	08020e20 	.word	0x08020e20
 8012424:	08020e38 	.word	0x08020e38
 8012428:	08024304 	.word	0x08024304

0801242c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b084      	sub	sp, #16
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d106      	bne.n	801244e <poll_tcp+0x22>
 8012440:	4b2a      	ldr	r3, [pc, #168]	; (80124ec <poll_tcp+0xc0>)
 8012442:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8012446:	492a      	ldr	r1, [pc, #168]	; (80124f0 <poll_tcp+0xc4>)
 8012448:	482a      	ldr	r0, [pc, #168]	; (80124f4 <poll_tcp+0xc8>)
 801244a:	f00d fad7 	bl	801f9fc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	785b      	ldrb	r3, [r3, #1]
 8012452:	2b01      	cmp	r3, #1
 8012454:	d104      	bne.n	8012460 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8012456:	2101      	movs	r1, #1
 8012458:	68f8      	ldr	r0, [r7, #12]
 801245a:	f000 ff69 	bl	8013330 <lwip_netconn_do_writemore>
 801245e:	e016      	b.n	801248e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	785b      	ldrb	r3, [r3, #1]
 8012464:	2b04      	cmp	r3, #4
 8012466:	d112      	bne.n	801248e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	6a1b      	ldr	r3, [r3, #32]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d00a      	beq.n	8012486 <poll_tcp+0x5a>
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	6a1b      	ldr	r3, [r3, #32]
 8012474:	7a5b      	ldrb	r3, [r3, #9]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d005      	beq.n	8012486 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	6a1b      	ldr	r3, [r3, #32]
 801247e:	7a5a      	ldrb	r2, [r3, #9]
 8012480:	3a01      	subs	r2, #1
 8012482:	b2d2      	uxtb	r2, r2
 8012484:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8012486:	2101      	movs	r1, #1
 8012488:	68f8      	ldr	r0, [r7, #12]
 801248a:	f000 fbfb 	bl	8012c84 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	7f1b      	ldrb	r3, [r3, #28]
 8012492:	f003 0310 	and.w	r3, r3, #16
 8012496:	2b00      	cmp	r3, #0
 8012498:	d022      	beq.n	80124e0 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d01e      	beq.n	80124e0 <poll_tcp+0xb4>
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80124aa:	f640 3269 	movw	r2, #2921	; 0xb69
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d916      	bls.n	80124e0 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	685b      	ldr	r3, [r3, #4]
 80124b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80124ba:	2b07      	cmp	r3, #7
 80124bc:	d810      	bhi.n	80124e0 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	7f1b      	ldrb	r3, [r3, #28]
 80124c2:	f023 0310 	bic.w	r3, r3, #16
 80124c6:	b2da      	uxtb	r2, r3
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d005      	beq.n	80124e0 <poll_tcp+0xb4>
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d8:	2200      	movs	r2, #0
 80124da:	2102      	movs	r1, #2
 80124dc:	68f8      	ldr	r0, [r7, #12]
 80124de:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80124e0:	2300      	movs	r3, #0
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3710      	adds	r7, #16
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	08020cbc 	.word	0x08020cbc
 80124f0:	08020e58 	.word	0x08020e58
 80124f4:	08020d44 	.word	0x08020d44

080124f8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b086      	sub	sp, #24
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	60f8      	str	r0, [r7, #12]
 8012500:	60b9      	str	r1, [r7, #8]
 8012502:	4613      	mov	r3, r2
 8012504:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d106      	bne.n	801251e <sent_tcp+0x26>
 8012510:	4b21      	ldr	r3, [pc, #132]	; (8012598 <sent_tcp+0xa0>)
 8012512:	f240 1293 	movw	r2, #403	; 0x193
 8012516:	4921      	ldr	r1, [pc, #132]	; (801259c <sent_tcp+0xa4>)
 8012518:	4821      	ldr	r0, [pc, #132]	; (80125a0 <sent_tcp+0xa8>)
 801251a:	f00d fa6f 	bl	801f9fc <iprintf>

  if (conn) {
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d033      	beq.n	801258c <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	785b      	ldrb	r3, [r3, #1]
 8012528:	2b01      	cmp	r3, #1
 801252a:	d104      	bne.n	8012536 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801252c:	2101      	movs	r1, #1
 801252e:	6978      	ldr	r0, [r7, #20]
 8012530:	f000 fefe 	bl	8013330 <lwip_netconn_do_writemore>
 8012534:	e007      	b.n	8012546 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	785b      	ldrb	r3, [r3, #1]
 801253a:	2b04      	cmp	r3, #4
 801253c:	d103      	bne.n	8012546 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801253e:	2101      	movs	r1, #1
 8012540:	6978      	ldr	r0, [r7, #20]
 8012542:	f000 fb9f 	bl	8012c84 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	685b      	ldr	r3, [r3, #4]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d01e      	beq.n	801258c <sent_tcp+0x94>
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012556:	f640 3269 	movw	r2, #2921	; 0xb69
 801255a:	4293      	cmp	r3, r2
 801255c:	d916      	bls.n	801258c <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012566:	2b07      	cmp	r3, #7
 8012568:	d810      	bhi.n	801258c <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	7f1b      	ldrb	r3, [r3, #28]
 801256e:	f023 0310 	bic.w	r3, r3, #16
 8012572:	b2da      	uxtb	r2, r3
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801257c:	2b00      	cmp	r3, #0
 801257e:	d005      	beq.n	801258c <sent_tcp+0x94>
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012584:	88fa      	ldrh	r2, [r7, #6]
 8012586:	2102      	movs	r1, #2
 8012588:	6978      	ldr	r0, [r7, #20]
 801258a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801258c:	2300      	movs	r3, #0
}
 801258e:	4618      	mov	r0, r3
 8012590:	3718      	adds	r7, #24
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}
 8012596:	bf00      	nop
 8012598:	08020cbc 	.word	0x08020cbc
 801259c:	08020e58 	.word	0x08020e58
 80125a0:	08020d44 	.word	0x08020d44

080125a4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b088      	sub	sp, #32
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	460b      	mov	r3, r1
 80125ae:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d106      	bne.n	80125c8 <err_tcp+0x24>
 80125ba:	4b5f      	ldr	r3, [pc, #380]	; (8012738 <err_tcp+0x194>)
 80125bc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80125c0:	495e      	ldr	r1, [pc, #376]	; (801273c <err_tcp+0x198>)
 80125c2:	485f      	ldr	r0, [pc, #380]	; (8012740 <err_tcp+0x19c>)
 80125c4:	f00d fa1a 	bl	801f9fc <iprintf>

  SYS_ARCH_PROTECT(lev);
 80125c8:	f005 fdca 	bl	8018160 <sys_arch_protect>
 80125cc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80125ce:	69fb      	ldr	r3, [r7, #28]
 80125d0:	2200      	movs	r2, #0
 80125d2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80125d4:	69fb      	ldr	r3, [r7, #28]
 80125d6:	78fa      	ldrb	r2, [r7, #3]
 80125d8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80125da:	69fb      	ldr	r3, [r7, #28]
 80125dc:	7f1b      	ldrb	r3, [r3, #28]
 80125de:	f043 0301 	orr.w	r3, r3, #1
 80125e2:	b2da      	uxtb	r2, r3
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80125e8:	69fb      	ldr	r3, [r7, #28]
 80125ea:	785b      	ldrb	r3, [r3, #1]
 80125ec:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80125ee:	69fb      	ldr	r3, [r7, #28]
 80125f0:	2200      	movs	r2, #0
 80125f2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80125f4:	69b8      	ldr	r0, [r7, #24]
 80125f6:	f005 fdc1 	bl	801817c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d005      	beq.n	801260e <err_tcp+0x6a>
 8012602:	69fb      	ldr	r3, [r7, #28]
 8012604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012606:	2200      	movs	r2, #0
 8012608:	2104      	movs	r1, #4
 801260a:	69f8      	ldr	r0, [r7, #28]
 801260c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801260e:	69fb      	ldr	r3, [r7, #28]
 8012610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012612:	2b00      	cmp	r3, #0
 8012614:	d005      	beq.n	8012622 <err_tcp+0x7e>
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801261a:	2200      	movs	r2, #0
 801261c:	2100      	movs	r1, #0
 801261e:	69f8      	ldr	r0, [r7, #28]
 8012620:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012622:	69fb      	ldr	r3, [r7, #28]
 8012624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012626:	2b00      	cmp	r3, #0
 8012628:	d005      	beq.n	8012636 <err_tcp+0x92>
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801262e:	2200      	movs	r2, #0
 8012630:	2102      	movs	r1, #2
 8012632:	69f8      	ldr	r0, [r7, #28]
 8012634:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8012636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801263a:	4618      	mov	r0, r3
 801263c:	f7ff fd82 	bl	8012144 <lwip_netconn_err_to_msg>
 8012640:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8012642:	69fb      	ldr	r3, [r7, #28]
 8012644:	3310      	adds	r3, #16
 8012646:	4618      	mov	r0, r3
 8012648:	f005 fc6f 	bl	8017f2a <sys_mbox_valid>
 801264c:	4603      	mov	r3, r0
 801264e:	2b00      	cmp	r3, #0
 8012650:	d005      	beq.n	801265e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	3310      	adds	r3, #16
 8012656:	6939      	ldr	r1, [r7, #16]
 8012658:	4618      	mov	r0, r3
 801265a:	f005 fbf1 	bl	8017e40 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	3314      	adds	r3, #20
 8012662:	4618      	mov	r0, r3
 8012664:	f005 fc61 	bl	8017f2a <sys_mbox_valid>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d005      	beq.n	801267a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	3314      	adds	r3, #20
 8012672:	6939      	ldr	r1, [r7, #16]
 8012674:	4618      	mov	r0, r3
 8012676:	f005 fbe3 	bl	8017e40 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801267a:	7dfb      	ldrb	r3, [r7, #23]
 801267c:	2b01      	cmp	r3, #1
 801267e:	d005      	beq.n	801268c <err_tcp+0xe8>
 8012680:	7dfb      	ldrb	r3, [r7, #23]
 8012682:	2b04      	cmp	r3, #4
 8012684:	d002      	beq.n	801268c <err_tcp+0xe8>
 8012686:	7dfb      	ldrb	r3, [r7, #23]
 8012688:	2b03      	cmp	r3, #3
 801268a:	d143      	bne.n	8012714 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	7f1b      	ldrb	r3, [r3, #28]
 8012690:	f003 0304 	and.w	r3, r3, #4
 8012694:	2b00      	cmp	r3, #0
 8012696:	bf14      	ite	ne
 8012698:	2301      	movne	r3, #1
 801269a:	2300      	moveq	r3, #0
 801269c:	b2db      	uxtb	r3, r3
 801269e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	7f1b      	ldrb	r3, [r3, #28]
 80126a4:	f023 0304 	bic.w	r3, r3, #4
 80126a8:	b2da      	uxtb	r2, r3
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d13b      	bne.n	801272c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	6a1b      	ldr	r3, [r3, #32]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d106      	bne.n	80126ca <err_tcp+0x126>
 80126bc:	4b1e      	ldr	r3, [pc, #120]	; (8012738 <err_tcp+0x194>)
 80126be:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80126c2:	4920      	ldr	r1, [pc, #128]	; (8012744 <err_tcp+0x1a0>)
 80126c4:	481e      	ldr	r0, [pc, #120]	; (8012740 <err_tcp+0x19c>)
 80126c6:	f00d f999 	bl	801f9fc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80126ca:	7dfb      	ldrb	r3, [r7, #23]
 80126cc:	2b04      	cmp	r3, #4
 80126ce:	d104      	bne.n	80126da <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80126d0:	69fb      	ldr	r3, [r7, #28]
 80126d2:	6a1b      	ldr	r3, [r3, #32]
 80126d4:	2200      	movs	r2, #0
 80126d6:	711a      	strb	r2, [r3, #4]
 80126d8:	e003      	b.n	80126e2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80126da:	69fb      	ldr	r3, [r7, #28]
 80126dc:	6a1b      	ldr	r3, [r3, #32]
 80126de:	78fa      	ldrb	r2, [r7, #3]
 80126e0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	6a1b      	ldr	r3, [r3, #32]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	330c      	adds	r3, #12
 80126ea:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80126ec:	68b8      	ldr	r0, [r7, #8]
 80126ee:	f005 fcad 	bl	801804c <sys_sem_valid>
 80126f2:	4603      	mov	r3, r0
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d106      	bne.n	8012706 <err_tcp+0x162>
 80126f8:	4b0f      	ldr	r3, [pc, #60]	; (8012738 <err_tcp+0x194>)
 80126fa:	f240 12ef 	movw	r2, #495	; 0x1ef
 80126fe:	4912      	ldr	r1, [pc, #72]	; (8012748 <err_tcp+0x1a4>)
 8012700:	480f      	ldr	r0, [pc, #60]	; (8012740 <err_tcp+0x19c>)
 8012702:	f00d f97b 	bl	801f9fc <iprintf>
      conn->current_msg = NULL;
 8012706:	69fb      	ldr	r3, [r7, #28]
 8012708:	2200      	movs	r2, #0
 801270a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 801270c:	68b8      	ldr	r0, [r7, #8]
 801270e:	f005 fc83 	bl	8018018 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8012712:	e00b      	b.n	801272c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	6a1b      	ldr	r3, [r3, #32]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d008      	beq.n	801272e <err_tcp+0x18a>
 801271c:	4b06      	ldr	r3, [pc, #24]	; (8012738 <err_tcp+0x194>)
 801271e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8012722:	490a      	ldr	r1, [pc, #40]	; (801274c <err_tcp+0x1a8>)
 8012724:	4806      	ldr	r0, [pc, #24]	; (8012740 <err_tcp+0x19c>)
 8012726:	f00d f969 	bl	801f9fc <iprintf>
  }
}
 801272a:	e000      	b.n	801272e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 801272c:	bf00      	nop
}
 801272e:	bf00      	nop
 8012730:	3720      	adds	r7, #32
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	bf00      	nop
 8012738:	08020cbc 	.word	0x08020cbc
 801273c:	08020e58 	.word	0x08020e58
 8012740:	08020d44 	.word	0x08020d44
 8012744:	08020e68 	.word	0x08020e68
 8012748:	08020e84 	.word	0x08020e84
 801274c:	08020ea0 	.word	0x08020ea0

08012750 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	685b      	ldr	r3, [r3, #4]
 801275c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801275e:	6879      	ldr	r1, [r7, #4]
 8012760:	68f8      	ldr	r0, [r7, #12]
 8012762:	f007 f903 	bl	801996c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8012766:	490a      	ldr	r1, [pc, #40]	; (8012790 <setup_tcp+0x40>)
 8012768:	68f8      	ldr	r0, [r7, #12]
 801276a:	f007 f911 	bl	8019990 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801276e:	4909      	ldr	r1, [pc, #36]	; (8012794 <setup_tcp+0x44>)
 8012770:	68f8      	ldr	r0, [r7, #12]
 8012772:	f007 f92f 	bl	80199d4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8012776:	2202      	movs	r2, #2
 8012778:	4907      	ldr	r1, [pc, #28]	; (8012798 <setup_tcp+0x48>)
 801277a:	68f8      	ldr	r0, [r7, #12]
 801277c:	f007 f986 	bl	8019a8c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8012780:	4906      	ldr	r1, [pc, #24]	; (801279c <setup_tcp+0x4c>)
 8012782:	68f8      	ldr	r0, [r7, #12]
 8012784:	f007 f948 	bl	8019a18 <tcp_err>
}
 8012788:	bf00      	nop
 801278a:	3710      	adds	r7, #16
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	08012321 	.word	0x08012321
 8012794:	080124f9 	.word	0x080124f9
 8012798:	0801242d 	.word	0x0801242d
 801279c:	080125a5 	.word	0x080125a5

080127a0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80127a0:	b590      	push	{r4, r7, lr}
 80127a2:	b089      	sub	sp, #36	; 0x24
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	60f8      	str	r0, [r7, #12]
 80127a8:	60b9      	str	r1, [r7, #8]
 80127aa:	4613      	mov	r3, r2
 80127ac:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d102      	bne.n	80127be <accept_function+0x1e>
    return ERR_VAL;
 80127b8:	f06f 0305 	mvn.w	r3, #5
 80127bc:	e0a1      	b.n	8012902 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	3314      	adds	r3, #20
 80127c2:	4618      	mov	r0, r3
 80127c4:	f005 fbb1 	bl	8017f2a <sys_mbox_valid>
 80127c8:	4603      	mov	r3, r0
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d102      	bne.n	80127d4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80127ce:	f06f 0305 	mvn.w	r3, #5
 80127d2:	e096      	b.n	8012902 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d11b      	bne.n	8012812 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80127da:	69fb      	ldr	r3, [r7, #28]
 80127dc:	f103 0414 	add.w	r4, r3, #20
 80127e0:	f06f 000c 	mvn.w	r0, #12
 80127e4:	f7ff fcae 	bl	8012144 <lwip_netconn_err_to_msg>
 80127e8:	4603      	mov	r3, r0
 80127ea:	4619      	mov	r1, r3
 80127ec:	4620      	mov	r0, r4
 80127ee:	f005 fb27 	bl	8017e40 <sys_mbox_trypost>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d109      	bne.n	801280c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80127f8:	69fb      	ldr	r3, [r7, #28]
 80127fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d005      	beq.n	801280c <accept_function+0x6c>
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012804:	2200      	movs	r2, #0
 8012806:	2100      	movs	r1, #0
 8012808:	69f8      	ldr	r0, [r7, #28]
 801280a:	4798      	blx	r3
    }
    return ERR_VAL;
 801280c:	f06f 0305 	mvn.w	r3, #5
 8012810:	e077      	b.n	8012902 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8012812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d006      	beq.n	8012828 <accept_function+0x88>
 801281a:	4b3c      	ldr	r3, [pc, #240]	; (801290c <accept_function+0x16c>)
 801281c:	f240 222a 	movw	r2, #554	; 0x22a
 8012820:	493b      	ldr	r1, [pc, #236]	; (8012910 <accept_function+0x170>)
 8012822:	483c      	ldr	r0, [pc, #240]	; (8012914 <accept_function+0x174>)
 8012824:	f00d f8ea 	bl	801f9fc <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	781a      	ldrb	r2, [r3, #0]
 801282c:	69fb      	ldr	r3, [r7, #28]
 801282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012830:	4619      	mov	r1, r3
 8012832:	4610      	mov	r0, r2
 8012834:	f000 f8f0 	bl	8012a18 <netconn_alloc>
 8012838:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 801283a:	69bb      	ldr	r3, [r7, #24]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d11b      	bne.n	8012878 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	f103 0414 	add.w	r4, r3, #20
 8012846:	f06f 000c 	mvn.w	r0, #12
 801284a:	f7ff fc7b 	bl	8012144 <lwip_netconn_err_to_msg>
 801284e:	4603      	mov	r3, r0
 8012850:	4619      	mov	r1, r3
 8012852:	4620      	mov	r0, r4
 8012854:	f005 faf4 	bl	8017e40 <sys_mbox_trypost>
 8012858:	4603      	mov	r3, r0
 801285a:	2b00      	cmp	r3, #0
 801285c:	d109      	bne.n	8012872 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012862:	2b00      	cmp	r3, #0
 8012864:	d005      	beq.n	8012872 <accept_function+0xd2>
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801286a:	2200      	movs	r2, #0
 801286c:	2100      	movs	r1, #0
 801286e:	69f8      	ldr	r0, [r7, #28]
 8012870:	4798      	blx	r3
    }
    return ERR_MEM;
 8012872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012876:	e044      	b.n	8012902 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	68ba      	ldr	r2, [r7, #8]
 801287c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 801287e:	69b8      	ldr	r0, [r7, #24]
 8012880:	f7ff ff66 	bl	8012750 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8012884:	69fb      	ldr	r3, [r7, #28]
 8012886:	3314      	adds	r3, #20
 8012888:	69b9      	ldr	r1, [r7, #24]
 801288a:	4618      	mov	r0, r3
 801288c:	f005 fad8 	bl	8017e40 <sys_mbox_trypost>
 8012890:	4603      	mov	r3, r0
 8012892:	2b00      	cmp	r3, #0
 8012894:	d02a      	beq.n	80128ec <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8012896:	69bb      	ldr	r3, [r7, #24]
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 801289c:	2100      	movs	r1, #0
 801289e:	6978      	ldr	r0, [r7, #20]
 80128a0:	f007 f864 	bl	801996c <tcp_arg>
    tcp_recv(pcb, NULL);
 80128a4:	2100      	movs	r1, #0
 80128a6:	6978      	ldr	r0, [r7, #20]
 80128a8:	f007 f872 	bl	8019990 <tcp_recv>
    tcp_sent(pcb, NULL);
 80128ac:	2100      	movs	r1, #0
 80128ae:	6978      	ldr	r0, [r7, #20]
 80128b0:	f007 f890 	bl	80199d4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80128b4:	2200      	movs	r2, #0
 80128b6:	2100      	movs	r1, #0
 80128b8:	6978      	ldr	r0, [r7, #20]
 80128ba:	f007 f8e7 	bl	8019a8c <tcp_poll>
    tcp_err(pcb, NULL);
 80128be:	2100      	movs	r1, #0
 80128c0:	6978      	ldr	r0, [r7, #20]
 80128c2:	f007 f8a9 	bl	8019a18 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	2200      	movs	r2, #0
 80128ca:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80128cc:	69bb      	ldr	r3, [r7, #24]
 80128ce:	3310      	adds	r3, #16
 80128d0:	4618      	mov	r0, r3
 80128d2:	f005 faa3 	bl	8017e1c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80128d6:	69bb      	ldr	r3, [r7, #24]
 80128d8:	3310      	adds	r3, #16
 80128da:	4618      	mov	r0, r3
 80128dc:	f005 fb36 	bl	8017f4c <sys_mbox_set_invalid>
    netconn_free(newconn);
 80128e0:	69b8      	ldr	r0, [r7, #24]
 80128e2:	f000 f907 	bl	8012af4 <netconn_free>
    return ERR_MEM;
 80128e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128ea:	e00a      	b.n	8012902 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d005      	beq.n	8012900 <accept_function+0x160>
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128f8:	2200      	movs	r2, #0
 80128fa:	2100      	movs	r1, #0
 80128fc:	69f8      	ldr	r0, [r7, #28]
 80128fe:	4798      	blx	r3
  }

  return ERR_OK;
 8012900:	2300      	movs	r3, #0
}
 8012902:	4618      	mov	r0, r3
 8012904:	3724      	adds	r7, #36	; 0x24
 8012906:	46bd      	mov	sp, r7
 8012908:	bd90      	pop	{r4, r7, pc}
 801290a:	bf00      	nop
 801290c:	08020cbc 	.word	0x08020cbc
 8012910:	08020ebc 	.word	0x08020ebc
 8012914:	08020d44 	.word	0x08020d44

08012918 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8012918:	b590      	push	{r4, r7, lr}
 801291a:	b085      	sub	sp, #20
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8012920:	2300      	movs	r3, #0
 8012922:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	685b      	ldr	r3, [r3, #4]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d006      	beq.n	801293c <pcb_new+0x24>
 801292e:	4b2b      	ldr	r3, [pc, #172]	; (80129dc <pcb_new+0xc4>)
 8012930:	f240 2265 	movw	r2, #613	; 0x265
 8012934:	492a      	ldr	r1, [pc, #168]	; (80129e0 <pcb_new+0xc8>)
 8012936:	482b      	ldr	r0, [pc, #172]	; (80129e4 <pcb_new+0xcc>)
 8012938:	f00d f860 	bl	801f9fc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012946:	2b10      	cmp	r3, #16
 8012948:	d022      	beq.n	8012990 <pcb_new+0x78>
 801294a:	2b20      	cmp	r3, #32
 801294c:	d133      	bne.n	80129b6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681c      	ldr	r4, [r3, #0]
 8012952:	7bfb      	ldrb	r3, [r7, #15]
 8012954:	4618      	mov	r0, r3
 8012956:	f00c faa0 	bl	801ee9a <udp_new_ip_type>
 801295a:	4603      	mov	r3, r0
 801295c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d02a      	beq.n	80129be <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	2b22      	cmp	r3, #34	; 0x22
 8012970:	d104      	bne.n	801297c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	2201      	movs	r2, #1
 801297a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	6858      	ldr	r0, [r3, #4]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	461a      	mov	r2, r3
 8012988:	4917      	ldr	r1, [pc, #92]	; (80129e8 <pcb_new+0xd0>)
 801298a:	f00c fa0d 	bl	801eda8 <udp_recv>
      }
      break;
 801298e:	e016      	b.n	80129be <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681c      	ldr	r4, [r3, #0]
 8012994:	7bfb      	ldrb	r3, [r7, #15]
 8012996:	4618      	mov	r0, r3
 8012998:	f006 ffda 	bl	8019950 <tcp_new_ip_type>
 801299c:	4603      	mov	r3, r0
 801299e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d00b      	beq.n	80129c2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7ff fece 	bl	8012750 <setup_tcp>
      }
      break;
 80129b4:	e005      	b.n	80129c2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	22fa      	movs	r2, #250	; 0xfa
 80129ba:	711a      	strb	r2, [r3, #4]
      return;
 80129bc:	e00a      	b.n	80129d4 <pcb_new+0xbc>
      break;
 80129be:	bf00      	nop
 80129c0:	e000      	b.n	80129c4 <pcb_new+0xac>
      break;
 80129c2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d102      	bne.n	80129d4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	22ff      	movs	r2, #255	; 0xff
 80129d2:	711a      	strb	r2, [r3, #4]
  }
}
 80129d4:	3714      	adds	r7, #20
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd90      	pop	{r4, r7, pc}
 80129da:	bf00      	nop
 80129dc:	08020cbc 	.word	0x08020cbc
 80129e0:	08020ee4 	.word	0x08020ee4
 80129e4:	08020d44 	.word	0x08020d44
 80129e8:	08012225 	.word	0x08012225

080129ec <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b084      	sub	sp, #16
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2200      	movs	r2, #0
 80129fc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d102      	bne.n	8012a0e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8012a08:	68f8      	ldr	r0, [r7, #12]
 8012a0a:	f7ff ff85 	bl	8012918 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8012a0e:	bf00      	nop
 8012a10:	3710      	adds	r7, #16
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
	...

08012a18 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b086      	sub	sp, #24
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	4603      	mov	r3, r0
 8012a20:	6039      	str	r1, [r7, #0]
 8012a22:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8012a24:	2300      	movs	r3, #0
 8012a26:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8012a28:	2007      	movs	r0, #7
 8012a2a:	f003 ffd1 	bl	80169d0 <memp_malloc>
 8012a2e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d101      	bne.n	8012a3a <netconn_alloc+0x22>
    return NULL;
 8012a36:	2300      	movs	r3, #0
 8012a38:	e052      	b.n	8012ae0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	79fa      	ldrb	r2, [r7, #7]
 8012a44:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8012a4c:	79fb      	ldrb	r3, [r7, #7]
 8012a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a52:	2b10      	cmp	r3, #16
 8012a54:	d004      	beq.n	8012a60 <netconn_alloc+0x48>
 8012a56:	2b20      	cmp	r3, #32
 8012a58:	d105      	bne.n	8012a66 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8012a5a:	2306      	movs	r3, #6
 8012a5c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8012a5e:	e00a      	b.n	8012a76 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8012a60:	2306      	movs	r3, #6
 8012a62:	617b      	str	r3, [r7, #20]
      break;
 8012a64:	e007      	b.n	8012a76 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8012a66:	4b20      	ldr	r3, [pc, #128]	; (8012ae8 <netconn_alloc+0xd0>)
 8012a68:	f240 22e5 	movw	r2, #741	; 0x2e5
 8012a6c:	491f      	ldr	r1, [pc, #124]	; (8012aec <netconn_alloc+0xd4>)
 8012a6e:	4820      	ldr	r0, [pc, #128]	; (8012af0 <netconn_alloc+0xd8>)
 8012a70:	f00c ffc4 	bl	801f9fc <iprintf>
      goto free_and_return;
 8012a74:	e02f      	b.n	8012ad6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	3310      	adds	r3, #16
 8012a7a:	6979      	ldr	r1, [r7, #20]
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f005 f9ab 	bl	8017dd8 <sys_mbox_new>
 8012a82:	4603      	mov	r3, r0
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d125      	bne.n	8012ad4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	330c      	adds	r3, #12
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f005 fa69 	bl	8017f66 <sys_sem_new>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d005      	beq.n	8012aa6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	3310      	adds	r3, #16
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f005 f9bc 	bl	8017e1c <sys_mbox_free>
    goto free_and_return;
 8012aa4:	e017      	b.n	8012ad6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	3314      	adds	r3, #20
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f005 fa4e 	bl	8017f4c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012abc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	683a      	ldr	r2, [r7, #0]
 8012ac2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	7cfa      	ldrb	r2, [r7, #19]
 8012ace:	771a      	strb	r2, [r3, #28]
  return conn;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	e005      	b.n	8012ae0 <netconn_alloc+0xc8>
    goto free_and_return;
 8012ad4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8012ad6:	68f9      	ldr	r1, [r7, #12]
 8012ad8:	2007      	movs	r0, #7
 8012ada:	f003 ffef 	bl	8016abc <memp_free>
  return NULL;
 8012ade:	2300      	movs	r3, #0
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3718      	adds	r7, #24
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	08020cbc 	.word	0x08020cbc
 8012aec:	08020f04 	.word	0x08020f04
 8012af0:	08020d44 	.word	0x08020d44

08012af4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	685b      	ldr	r3, [r3, #4]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d006      	beq.n	8012b12 <netconn_free+0x1e>
 8012b04:	4b1b      	ldr	r3, [pc, #108]	; (8012b74 <netconn_free+0x80>)
 8012b06:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012b0a:	491b      	ldr	r1, [pc, #108]	; (8012b78 <netconn_free+0x84>)
 8012b0c:	481b      	ldr	r0, [pc, #108]	; (8012b7c <netconn_free+0x88>)
 8012b0e:	f00c ff75 	bl	801f9fc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	3310      	adds	r3, #16
 8012b16:	4618      	mov	r0, r3
 8012b18:	f005 fa07 	bl	8017f2a <sys_mbox_valid>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d006      	beq.n	8012b30 <netconn_free+0x3c>
 8012b22:	4b14      	ldr	r3, [pc, #80]	; (8012b74 <netconn_free+0x80>)
 8012b24:	f240 3223 	movw	r2, #803	; 0x323
 8012b28:	4915      	ldr	r1, [pc, #84]	; (8012b80 <netconn_free+0x8c>)
 8012b2a:	4814      	ldr	r0, [pc, #80]	; (8012b7c <netconn_free+0x88>)
 8012b2c:	f00c ff66 	bl	801f9fc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	3314      	adds	r3, #20
 8012b34:	4618      	mov	r0, r3
 8012b36:	f005 f9f8 	bl	8017f2a <sys_mbox_valid>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d006      	beq.n	8012b4e <netconn_free+0x5a>
 8012b40:	4b0c      	ldr	r3, [pc, #48]	; (8012b74 <netconn_free+0x80>)
 8012b42:	f240 3226 	movw	r2, #806	; 0x326
 8012b46:	490f      	ldr	r1, [pc, #60]	; (8012b84 <netconn_free+0x90>)
 8012b48:	480c      	ldr	r0, [pc, #48]	; (8012b7c <netconn_free+0x88>)
 8012b4a:	f00c ff57 	bl	801f9fc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	330c      	adds	r3, #12
 8012b52:	4618      	mov	r0, r3
 8012b54:	f005 fa6d 	bl	8018032 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	330c      	adds	r3, #12
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f005 fa86 	bl	801806e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8012b62:	6879      	ldr	r1, [r7, #4]
 8012b64:	2007      	movs	r0, #7
 8012b66:	f003 ffa9 	bl	8016abc <memp_free>
}
 8012b6a:	bf00      	nop
 8012b6c:	3708      	adds	r7, #8
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}
 8012b72:	bf00      	nop
 8012b74:	08020cbc 	.word	0x08020cbc
 8012b78:	08020f2c 	.word	0x08020f2c
 8012b7c:	08020d44 	.word	0x08020d44
 8012b80:	08020f5c 	.word	0x08020f5c
 8012b84:	08020f98 	.word	0x08020f98

08012b88 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b086      	sub	sp, #24
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	3310      	adds	r3, #16
 8012b94:	4618      	mov	r0, r3
 8012b96:	f005 f9c8 	bl	8017f2a <sys_mbox_valid>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d02f      	beq.n	8012c00 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012ba0:	e018      	b.n	8012bd4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012baa:	2b10      	cmp	r3, #16
 8012bac:	d10e      	bne.n	8012bcc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	f107 020f 	add.w	r2, r7, #15
 8012bb4:	4611      	mov	r1, r2
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7ff fafa 	bl	80121b0 <lwip_netconn_is_err_msg>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d108      	bne.n	8012bd4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f004 fe6d 	bl	80178a4 <pbuf_free>
 8012bca:	e003      	b.n	8012bd4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8012bcc:	693b      	ldr	r3, [r7, #16]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f003 ff9e 	bl	8016b10 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	3310      	adds	r3, #16
 8012bd8:	f107 0210 	add.w	r2, r7, #16
 8012bdc:	4611      	mov	r1, r2
 8012bde:	4618      	mov	r0, r3
 8012be0:	f005 f987 	bl	8017ef2 <sys_arch_mbox_tryfetch>
 8012be4:	4603      	mov	r3, r0
 8012be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012bea:	d1da      	bne.n	8012ba2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	3310      	adds	r3, #16
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f005 f913 	bl	8017e1c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	3310      	adds	r3, #16
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f005 f9a6 	bl	8017f4c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	3314      	adds	r3, #20
 8012c04:	4618      	mov	r0, r3
 8012c06:	f005 f990 	bl	8017f2a <sys_mbox_valid>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d034      	beq.n	8012c7a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012c10:	e01d      	b.n	8012c4e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	f107 020e 	add.w	r2, r7, #14
 8012c18:	4611      	mov	r1, r2
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7ff fac8 	bl	80121b0 <lwip_netconn_is_err_msg>
 8012c20:	4603      	mov	r3, r0
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d113      	bne.n	8012c4e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8012c26:	693b      	ldr	r3, [r7, #16]
 8012c28:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8012c2a:	6978      	ldr	r0, [r7, #20]
 8012c2c:	f7ff ffac 	bl	8012b88 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d007      	beq.n	8012c48 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f005 fe03 	bl	8018848 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	2200      	movs	r2, #0
 8012c46:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8012c48:	6978      	ldr	r0, [r7, #20]
 8012c4a:	f7ff ff53 	bl	8012af4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	3314      	adds	r3, #20
 8012c52:	f107 0210 	add.w	r2, r7, #16
 8012c56:	4611      	mov	r1, r2
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f005 f94a 	bl	8017ef2 <sys_arch_mbox_tryfetch>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c64:	d1d5      	bne.n	8012c12 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	3314      	adds	r3, #20
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f005 f8d6 	bl	8017e1c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	3314      	adds	r3, #20
 8012c74:	4618      	mov	r0, r3
 8012c76:	f005 f969 	bl	8017f4c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8012c7a:	bf00      	nop
 8012c7c:	3718      	adds	r7, #24
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
	...

08012c84 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b086      	sub	sp, #24
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	460b      	mov	r3, r1
 8012c8e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8012c90:	2300      	movs	r3, #0
 8012c92:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d106      	bne.n	8012ca8 <lwip_netconn_do_close_internal+0x24>
 8012c9a:	4b87      	ldr	r3, [pc, #540]	; (8012eb8 <lwip_netconn_do_close_internal+0x234>)
 8012c9c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8012ca0:	4986      	ldr	r1, [pc, #536]	; (8012ebc <lwip_netconn_do_close_internal+0x238>)
 8012ca2:	4887      	ldr	r0, [pc, #540]	; (8012ec0 <lwip_netconn_do_close_internal+0x23c>)
 8012ca4:	f00c feaa 	bl	801f9fc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012cb0:	2b10      	cmp	r3, #16
 8012cb2:	d006      	beq.n	8012cc2 <lwip_netconn_do_close_internal+0x3e>
 8012cb4:	4b80      	ldr	r3, [pc, #512]	; (8012eb8 <lwip_netconn_do_close_internal+0x234>)
 8012cb6:	f240 32a3 	movw	r2, #931	; 0x3a3
 8012cba:	4982      	ldr	r1, [pc, #520]	; (8012ec4 <lwip_netconn_do_close_internal+0x240>)
 8012cbc:	4880      	ldr	r0, [pc, #512]	; (8012ec0 <lwip_netconn_do_close_internal+0x23c>)
 8012cbe:	f00c fe9d 	bl	801f9fc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	785b      	ldrb	r3, [r3, #1]
 8012cc6:	2b04      	cmp	r3, #4
 8012cc8:	d006      	beq.n	8012cd8 <lwip_netconn_do_close_internal+0x54>
 8012cca:	4b7b      	ldr	r3, [pc, #492]	; (8012eb8 <lwip_netconn_do_close_internal+0x234>)
 8012ccc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8012cd0:	497d      	ldr	r1, [pc, #500]	; (8012ec8 <lwip_netconn_do_close_internal+0x244>)
 8012cd2:	487b      	ldr	r0, [pc, #492]	; (8012ec0 <lwip_netconn_do_close_internal+0x23c>)
 8012cd4:	f00c fe92 	bl	801f9fc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	685b      	ldr	r3, [r3, #4]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d106      	bne.n	8012cee <lwip_netconn_do_close_internal+0x6a>
 8012ce0:	4b75      	ldr	r3, [pc, #468]	; (8012eb8 <lwip_netconn_do_close_internal+0x234>)
 8012ce2:	f240 32a5 	movw	r2, #933	; 0x3a5
 8012ce6:	4979      	ldr	r1, [pc, #484]	; (8012ecc <lwip_netconn_do_close_internal+0x248>)
 8012ce8:	4875      	ldr	r0, [pc, #468]	; (8012ec0 <lwip_netconn_do_close_internal+0x23c>)
 8012cea:	f00c fe87 	bl	801f9fc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6a1b      	ldr	r3, [r3, #32]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d106      	bne.n	8012d04 <lwip_netconn_do_close_internal+0x80>
 8012cf6:	4b70      	ldr	r3, [pc, #448]	; (8012eb8 <lwip_netconn_do_close_internal+0x234>)
 8012cf8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012cfc:	4974      	ldr	r1, [pc, #464]	; (8012ed0 <lwip_netconn_do_close_internal+0x24c>)
 8012cfe:	4870      	ldr	r0, [pc, #448]	; (8012ec0 <lwip_netconn_do_close_internal+0x23c>)
 8012d00:	f00c fe7c 	bl	801f9fc <iprintf>

  tpcb = conn->pcb.tcp;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6a1b      	ldr	r3, [r3, #32]
 8012d0e:	7a1b      	ldrb	r3, [r3, #8]
 8012d10:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8012d12:	7bfb      	ldrb	r3, [r7, #15]
 8012d14:	f003 0301 	and.w	r3, r3, #1
 8012d18:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8012d1a:	7bfb      	ldrb	r3, [r7, #15]
 8012d1c:	f003 0302 	and.w	r3, r3, #2
 8012d20:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8012d22:	7bfb      	ldrb	r3, [r7, #15]
 8012d24:	2b03      	cmp	r3, #3
 8012d26:	d102      	bne.n	8012d2e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8012d28:	2301      	movs	r3, #1
 8012d2a:	75bb      	strb	r3, [r7, #22]
 8012d2c:	e01f      	b.n	8012d6e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8012d2e:	7bbb      	ldrb	r3, [r7, #14]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d00e      	beq.n	8012d52 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8012d38:	2b05      	cmp	r3, #5
 8012d3a:	d007      	beq.n	8012d4c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8012d40:	2b06      	cmp	r3, #6
 8012d42:	d003      	beq.n	8012d4c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8012d48:	2b08      	cmp	r3, #8
 8012d4a:	d102      	bne.n	8012d52 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8012d4c:	2301      	movs	r3, #1
 8012d4e:	75bb      	strb	r3, [r7, #22]
 8012d50:	e00d      	b.n	8012d6e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8012d52:	7b7b      	ldrb	r3, [r7, #13]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d008      	beq.n	8012d6a <lwip_netconn_do_close_internal+0xe6>
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	8b5b      	ldrh	r3, [r3, #26]
 8012d5c:	f003 0310 	and.w	r3, r3, #16
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d002      	beq.n	8012d6a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8012d64:	2301      	movs	r3, #1
 8012d66:	75bb      	strb	r3, [r7, #22]
 8012d68:	e001      	b.n	8012d6e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8012d6e:	7dbb      	ldrb	r3, [r7, #22]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d003      	beq.n	8012d7c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8012d74:	2100      	movs	r1, #0
 8012d76:	6938      	ldr	r0, [r7, #16]
 8012d78:	f006 fdf8 	bl	801996c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	7d1b      	ldrb	r3, [r3, #20]
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d104      	bne.n	8012d8e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8012d84:	2100      	movs	r1, #0
 8012d86:	6938      	ldr	r0, [r7, #16]
 8012d88:	f006 fe68 	bl	8019a5c <tcp_accept>
 8012d8c:	e01d      	b.n	8012dca <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8012d8e:	7bbb      	ldrb	r3, [r7, #14]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d007      	beq.n	8012da4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8012d94:	2100      	movs	r1, #0
 8012d96:	6938      	ldr	r0, [r7, #16]
 8012d98:	f006 fdfa 	bl	8019990 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	6938      	ldr	r0, [r7, #16]
 8012da0:	f006 fe5c 	bl	8019a5c <tcp_accept>
    }
    if (shut_tx) {
 8012da4:	7b7b      	ldrb	r3, [r7, #13]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d003      	beq.n	8012db2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8012daa:	2100      	movs	r1, #0
 8012dac:	6938      	ldr	r0, [r7, #16]
 8012dae:	f006 fe11 	bl	80199d4 <tcp_sent>
    }
    if (shut_close) {
 8012db2:	7dbb      	ldrb	r3, [r7, #22]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d008      	beq.n	8012dca <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8012db8:	2200      	movs	r2, #0
 8012dba:	2100      	movs	r1, #0
 8012dbc:	6938      	ldr	r0, [r7, #16]
 8012dbe:	f006 fe65 	bl	8019a8c <tcp_poll>
      tcp_err(tpcb, NULL);
 8012dc2:	2100      	movs	r1, #0
 8012dc4:	6938      	ldr	r0, [r7, #16]
 8012dc6:	f006 fe27 	bl	8019a18 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8012dca:	7dbb      	ldrb	r3, [r7, #22]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d005      	beq.n	8012ddc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8012dd0:	6938      	ldr	r0, [r7, #16]
 8012dd2:	f005 fbf3 	bl	80185bc <tcp_close>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	75fb      	strb	r3, [r7, #23]
 8012dda:	e007      	b.n	8012dec <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8012ddc:	7bbb      	ldrb	r3, [r7, #14]
 8012dde:	7b7a      	ldrb	r2, [r7, #13]
 8012de0:	4619      	mov	r1, r3
 8012de2:	6938      	ldr	r0, [r7, #16]
 8012de4:	f005 fc16 	bl	8018614 <tcp_shutdown>
 8012de8:	4603      	mov	r3, r0
 8012dea:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012dec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d102      	bne.n	8012dfa <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8012df4:	2301      	movs	r3, #1
 8012df6:	757b      	strb	r3, [r7, #21]
 8012df8:	e016      	b.n	8012e28 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8012dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012e02:	d10f      	bne.n	8012e24 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6a1b      	ldr	r3, [r3, #32]
 8012e08:	7a5b      	ldrb	r3, [r3, #9]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d10c      	bne.n	8012e28 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8012e0e:	2301      	movs	r3, #1
 8012e10:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8012e12:	7dbb      	ldrb	r3, [r7, #22]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d007      	beq.n	8012e28 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8012e18:	6938      	ldr	r0, [r7, #16]
 8012e1a:	f005 fd15 	bl	8018848 <tcp_abort>
          err = ERR_OK;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	75fb      	strb	r3, [r7, #23]
 8012e22:	e001      	b.n	8012e28 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8012e24:	2301      	movs	r3, #1
 8012e26:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8012e28:	7d7b      	ldrb	r3, [r7, #21]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d052      	beq.n	8012ed4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	6a1b      	ldr	r3, [r3, #32]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	330c      	adds	r3, #12
 8012e36:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6a1b      	ldr	r3, [r3, #32]
 8012e3c:	7dfa      	ldrb	r2, [r7, #23]
 8012e3e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2200      	movs	r2, #0
 8012e44:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2200      	movs	r2, #0
 8012e4a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8012e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d129      	bne.n	8012ea8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8012e54:	7dbb      	ldrb	r3, [r7, #22]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00c      	beq.n	8012e74 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d005      	beq.n	8012e74 <lwip_netconn_do_close_internal+0x1f0>
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	2104      	movs	r1, #4
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	4798      	blx	r3
      }
      if (shut_rx) {
 8012e74:	7bbb      	ldrb	r3, [r7, #14]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d009      	beq.n	8012e8e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d005      	beq.n	8012e8e <lwip_netconn_do_close_internal+0x20a>
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e86:	2200      	movs	r2, #0
 8012e88:	2100      	movs	r1, #0
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	4798      	blx	r3
      }
      if (shut_tx) {
 8012e8e:	7b7b      	ldrb	r3, [r7, #13]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d009      	beq.n	8012ea8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d005      	beq.n	8012ea8 <lwip_netconn_do_close_internal+0x224>
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	2102      	movs	r1, #2
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012ea8:	78fb      	ldrb	r3, [r7, #3]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d002      	beq.n	8012eb4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012eae:	68b8      	ldr	r0, [r7, #8]
 8012eb0:	f005 f8b2 	bl	8018018 <sys_sem_signal>
    }
    return ERR_OK;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	e03c      	b.n	8012f32 <lwip_netconn_do_close_internal+0x2ae>
 8012eb8:	08020cbc 	.word	0x08020cbc
 8012ebc:	08020fd4 	.word	0x08020fd4
 8012ec0:	08020d44 	.word	0x08020d44
 8012ec4:	08020fe4 	.word	0x08020fe4
 8012ec8:	08021004 	.word	0x08021004
 8012ecc:	08021028 	.word	0x08021028
 8012ed0:	08020e68 	.word	0x08020e68
  }
  if (!close_finished) {
 8012ed4:	7d7b      	ldrb	r3, [r7, #21]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d11e      	bne.n	8012f18 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	7d1b      	ldrb	r3, [r3, #20]
 8012ede:	2b01      	cmp	r3, #1
 8012ee0:	d106      	bne.n	8012ef0 <lwip_netconn_do_close_internal+0x26c>
 8012ee2:	4b16      	ldr	r3, [pc, #88]	; (8012f3c <lwip_netconn_do_close_internal+0x2b8>)
 8012ee4:	f240 4241 	movw	r2, #1089	; 0x441
 8012ee8:	4915      	ldr	r1, [pc, #84]	; (8012f40 <lwip_netconn_do_close_internal+0x2bc>)
 8012eea:	4816      	ldr	r0, [pc, #88]	; (8012f44 <lwip_netconn_do_close_internal+0x2c0>)
 8012eec:	f00c fd86 	bl	801f9fc <iprintf>
    if (shut_tx) {
 8012ef0:	7b7b      	ldrb	r3, [r7, #13]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d003      	beq.n	8012efe <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8012ef6:	4914      	ldr	r1, [pc, #80]	; (8012f48 <lwip_netconn_do_close_internal+0x2c4>)
 8012ef8:	6938      	ldr	r0, [r7, #16]
 8012efa:	f006 fd6b 	bl	80199d4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8012efe:	2201      	movs	r2, #1
 8012f00:	4912      	ldr	r1, [pc, #72]	; (8012f4c <lwip_netconn_do_close_internal+0x2c8>)
 8012f02:	6938      	ldr	r0, [r7, #16]
 8012f04:	f006 fdc2 	bl	8019a8c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8012f08:	4911      	ldr	r1, [pc, #68]	; (8012f50 <lwip_netconn_do_close_internal+0x2cc>)
 8012f0a:	6938      	ldr	r0, [r7, #16]
 8012f0c:	f006 fd84 	bl	8019a18 <tcp_err>
    tcp_arg(tpcb, conn);
 8012f10:	6879      	ldr	r1, [r7, #4]
 8012f12:	6938      	ldr	r0, [r7, #16]
 8012f14:	f006 fd2a 	bl	801996c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8012f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d106      	bne.n	8012f2e <lwip_netconn_do_close_internal+0x2aa>
 8012f20:	4b06      	ldr	r3, [pc, #24]	; (8012f3c <lwip_netconn_do_close_internal+0x2b8>)
 8012f22:	f240 424d 	movw	r2, #1101	; 0x44d
 8012f26:	490b      	ldr	r1, [pc, #44]	; (8012f54 <lwip_netconn_do_close_internal+0x2d0>)
 8012f28:	4806      	ldr	r0, [pc, #24]	; (8012f44 <lwip_netconn_do_close_internal+0x2c0>)
 8012f2a:	f00c fd67 	bl	801f9fc <iprintf>
  return err;
 8012f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3718      	adds	r7, #24
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	08020cbc 	.word	0x08020cbc
 8012f40:	0802103c 	.word	0x0802103c
 8012f44:	08020d44 	.word	0x08020d44
 8012f48:	080124f9 	.word	0x080124f9
 8012f4c:	0801242d 	.word	0x0801242d
 8012f50:	080125a5 	.word	0x080125a5
 8012f54:	08021060 	.word	0x08021060

08012f58 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	785b      	ldrb	r3, [r3, #1]
 8012f6a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8012f6c:	7afb      	ldrb	r3, [r7, #11]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d00d      	beq.n	8012f8e <lwip_netconn_do_delconn+0x36>
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012f7c:	2b10      	cmp	r3, #16
 8012f7e:	d006      	beq.n	8012f8e <lwip_netconn_do_delconn+0x36>
 8012f80:	4b60      	ldr	r3, [pc, #384]	; (8013104 <lwip_netconn_do_delconn+0x1ac>)
 8012f82:	f240 425e 	movw	r2, #1118	; 0x45e
 8012f86:	4960      	ldr	r1, [pc, #384]	; (8013108 <lwip_netconn_do_delconn+0x1b0>)
 8012f88:	4860      	ldr	r0, [pc, #384]	; (801310c <lwip_netconn_do_delconn+0x1b4>)
 8012f8a:	f00c fd37 	bl	801f9fc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8012f8e:	7afb      	ldrb	r3, [r7, #11]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d005      	beq.n	8012fa0 <lwip_netconn_do_delconn+0x48>
 8012f94:	7afb      	ldrb	r3, [r7, #11]
 8012f96:	2b02      	cmp	r3, #2
 8012f98:	d002      	beq.n	8012fa0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8012f9a:	7afb      	ldrb	r3, [r7, #11]
 8012f9c:	2b03      	cmp	r3, #3
 8012f9e:	d109      	bne.n	8012fb4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8012fa0:	7afb      	ldrb	r3, [r7, #11]
 8012fa2:	2b03      	cmp	r3, #3
 8012fa4:	d10a      	bne.n	8012fbc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	7f1b      	ldrb	r3, [r3, #28]
 8012fac:	f003 0304 	and.w	r3, r3, #4
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d103      	bne.n	8012fbc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	22fb      	movs	r2, #251	; 0xfb
 8012fb8:	711a      	strb	r2, [r3, #4]
 8012fba:	e097      	b.n	80130ec <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8012fbc:	7afb      	ldrb	r3, [r7, #11]
 8012fbe:	2b03      	cmp	r3, #3
 8012fc0:	d10d      	bne.n	8012fde <lwip_netconn_do_delconn+0x86>
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	7f1b      	ldrb	r3, [r3, #28]
 8012fc8:	f003 0304 	and.w	r3, r3, #4
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d106      	bne.n	8012fde <lwip_netconn_do_delconn+0x86>
 8012fd0:	4b4c      	ldr	r3, [pc, #304]	; (8013104 <lwip_netconn_do_delconn+0x1ac>)
 8012fd2:	f240 427a 	movw	r2, #1146	; 0x47a
 8012fd6:	494e      	ldr	r1, [pc, #312]	; (8013110 <lwip_netconn_do_delconn+0x1b8>)
 8012fd8:	484c      	ldr	r0, [pc, #304]	; (801310c <lwip_netconn_do_delconn+0x1b4>)
 8012fda:	f00c fd0f 	bl	801f9fc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7ff fdcd 	bl	8012b88 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d05f      	beq.n	80130b8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013002:	2b10      	cmp	r3, #16
 8013004:	d00d      	beq.n	8013022 <lwip_netconn_do_delconn+0xca>
 8013006:	2b20      	cmp	r3, #32
 8013008:	d151      	bne.n	80130ae <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	685b      	ldr	r3, [r3, #4]
 8013010:	2200      	movs	r2, #0
 8013012:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	4618      	mov	r0, r3
 801301c:	f00b fee4 	bl	801ede8 <udp_remove>
          break;
 8013020:	e046      	b.n	80130b0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	6a1b      	ldr	r3, [r3, #32]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d006      	beq.n	801303a <lwip_netconn_do_delconn+0xe2>
 801302c:	4b35      	ldr	r3, [pc, #212]	; (8013104 <lwip_netconn_do_delconn+0x1ac>)
 801302e:	f240 4294 	movw	r2, #1172	; 0x494
 8013032:	4938      	ldr	r1, [pc, #224]	; (8013114 <lwip_netconn_do_delconn+0x1bc>)
 8013034:	4835      	ldr	r0, [pc, #212]	; (801310c <lwip_netconn_do_delconn+0x1b4>)
 8013036:	f00c fce1 	bl	801f9fc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	2204      	movs	r2, #4
 8013040:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	2203      	movs	r2, #3
 8013046:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	68fa      	ldr	r2, [r7, #12]
 801304e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	2100      	movs	r1, #0
 8013056:	4618      	mov	r0, r3
 8013058:	f7ff fe14 	bl	8012c84 <lwip_netconn_do_close_internal>
 801305c:	4603      	mov	r3, r0
 801305e:	2b00      	cmp	r3, #0
 8013060:	d04b      	beq.n	80130fa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	785b      	ldrb	r3, [r3, #1]
 8013068:	2b04      	cmp	r3, #4
 801306a:	d006      	beq.n	801307a <lwip_netconn_do_delconn+0x122>
 801306c:	4b25      	ldr	r3, [pc, #148]	; (8013104 <lwip_netconn_do_delconn+0x1ac>)
 801306e:	f240 429a 	movw	r2, #1178	; 0x49a
 8013072:	4929      	ldr	r1, [pc, #164]	; (8013118 <lwip_netconn_do_delconn+0x1c0>)
 8013074:	4825      	ldr	r0, [pc, #148]	; (801310c <lwip_netconn_do_delconn+0x1b4>)
 8013076:	f00c fcc1 	bl	801f9fc <iprintf>
            UNLOCK_TCPIP_CORE();
 801307a:	4828      	ldr	r0, [pc, #160]	; (801311c <lwip_netconn_do_delconn+0x1c4>)
 801307c:	f005 f83d 	bl	80180fa <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	330c      	adds	r3, #12
 8013086:	2100      	movs	r1, #0
 8013088:	4618      	mov	r0, r3
 801308a:	f004 ff94 	bl	8017fb6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801308e:	4823      	ldr	r0, [pc, #140]	; (801311c <lwip_netconn_do_delconn+0x1c4>)
 8013090:	f005 f824 	bl	80180dc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	785b      	ldrb	r3, [r3, #1]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d02d      	beq.n	80130fa <lwip_netconn_do_delconn+0x1a2>
 801309e:	4b19      	ldr	r3, [pc, #100]	; (8013104 <lwip_netconn_do_delconn+0x1ac>)
 80130a0:	f240 429e 	movw	r2, #1182	; 0x49e
 80130a4:	491c      	ldr	r1, [pc, #112]	; (8013118 <lwip_netconn_do_delconn+0x1c0>)
 80130a6:	4819      	ldr	r0, [pc, #100]	; (801310c <lwip_netconn_do_delconn+0x1b4>)
 80130a8:	f00c fca8 	bl	801f9fc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80130ac:	e025      	b.n	80130fa <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80130ae:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	2200      	movs	r2, #0
 80130b6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d007      	beq.n	80130d2 <lwip_netconn_do_delconn+0x17a>
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	6810      	ldr	r0, [r2, #0]
 80130cc:	2200      	movs	r2, #0
 80130ce:	2100      	movs	r1, #0
 80130d0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d007      	beq.n	80130ec <lwip_netconn_do_delconn+0x194>
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e2:	68fa      	ldr	r2, [r7, #12]
 80130e4:	6810      	ldr	r0, [r2, #0]
 80130e6:	2200      	movs	r2, #0
 80130e8:	2102      	movs	r1, #2
 80130ea:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	330c      	adds	r3, #12
 80130f2:	4618      	mov	r0, r3
 80130f4:	f004 ffaa 	bl	801804c <sys_sem_valid>
 80130f8:	e000      	b.n	80130fc <lwip_netconn_do_delconn+0x1a4>
          return;
 80130fa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80130fc:	3710      	adds	r7, #16
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	08020cbc 	.word	0x08020cbc
 8013108:	08021070 	.word	0x08021070
 801310c:	08020d44 	.word	0x08020d44
 8013110:	08021084 	.word	0x08021084
 8013114:	080210a4 	.word	0x080210a4
 8013118:	080210c0 	.word	0x080210c0
 801311c:	2400f97c 	.word	0x2400f97c

08013120 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b084      	sub	sp, #16
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d025      	beq.n	8013182 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013140:	2b10      	cmp	r3, #16
 8013142:	d00e      	beq.n	8013162 <lwip_netconn_do_bind+0x42>
 8013144:	2b20      	cmp	r3, #32
 8013146:	d119      	bne.n	801317c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	6858      	ldr	r0, [r3, #4]
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	6899      	ldr	r1, [r3, #8]
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	899b      	ldrh	r3, [r3, #12]
 8013156:	461a      	mov	r2, r3
 8013158:	f00b fd9e 	bl	801ec98 <udp_bind>
 801315c:	4603      	mov	r3, r0
 801315e:	73fb      	strb	r3, [r7, #15]
        break;
 8013160:	e011      	b.n	8013186 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	6858      	ldr	r0, [r3, #4]
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	6899      	ldr	r1, [r3, #8]
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	899b      	ldrh	r3, [r3, #12]
 8013170:	461a      	mov	r2, r3
 8013172:	f005 fb75 	bl	8018860 <tcp_bind>
 8013176:	4603      	mov	r3, r0
 8013178:	73fb      	strb	r3, [r7, #15]
        break;
 801317a:	e004      	b.n	8013186 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801317c:	23fa      	movs	r3, #250	; 0xfa
 801317e:	73fb      	strb	r3, [r7, #15]
        break;
 8013180:	e001      	b.n	8013186 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8013182:	23fa      	movs	r3, #250	; 0xfa
 8013184:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	7bfa      	ldrb	r2, [r7, #15]
 801318a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801318c:	bf00      	nop
 801318e:	3710      	adds	r7, #16
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b086      	sub	sp, #24
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d07f      	beq.n	80132aa <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80131b4:	2b10      	cmp	r3, #16
 80131b6:	d175      	bne.n	80132a4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	785b      	ldrb	r3, [r3, #1]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d165      	bne.n	801328e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	7d1b      	ldrb	r3, [r3, #20]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d002      	beq.n	80131d4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80131ce:	23fa      	movs	r3, #250	; 0xfa
 80131d0:	72fb      	strb	r3, [r7, #11]
 80131d2:	e06c      	b.n	80132ae <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80131d4:	23ff      	movs	r3, #255	; 0xff
 80131d6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	685b      	ldr	r3, [r3, #4]
 80131de:	f107 020b 	add.w	r2, r7, #11
 80131e2:	7cf9      	ldrb	r1, [r7, #19]
 80131e4:	4618      	mov	r0, r3
 80131e6:	f005 fbf3 	bl	80189d0 <tcp_listen_with_backlog_and_err>
 80131ea:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d05d      	beq.n	80132ae <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	3310      	adds	r3, #16
 80131f8:	4618      	mov	r0, r3
 80131fa:	f004 fe96 	bl	8017f2a <sys_mbox_valid>
 80131fe:	4603      	mov	r3, r0
 8013200:	2b00      	cmp	r3, #0
 8013202:	d00b      	beq.n	801321c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	3310      	adds	r3, #16
 801320a:	4618      	mov	r0, r3
 801320c:	f004 fe06 	bl	8017e1c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	3310      	adds	r3, #16
 8013216:	4618      	mov	r0, r3
 8013218:	f004 fe98 	bl	8017f4c <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 801321c:	2300      	movs	r3, #0
 801321e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	3314      	adds	r3, #20
 8013226:	4618      	mov	r0, r3
 8013228:	f004 fe7f 	bl	8017f2a <sys_mbox_valid>
 801322c:	4603      	mov	r3, r0
 801322e:	2b00      	cmp	r3, #0
 8013230:	d108      	bne.n	8013244 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	3314      	adds	r3, #20
 8013238:	2106      	movs	r1, #6
 801323a:	4618      	mov	r0, r3
 801323c:	f004 fdcc 	bl	8017dd8 <sys_mbox_new>
 8013240:	4603      	mov	r3, r0
 8013242:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8013244:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d118      	bne.n	801327e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2202      	movs	r2, #2
 8013252:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	68fa      	ldr	r2, [r7, #12]
 801325a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	685a      	ldr	r2, [r3, #4]
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	4619      	mov	r1, r3
 8013268:	4610      	mov	r0, r2
 801326a:	f006 fb7f 	bl	801996c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	685b      	ldr	r3, [r3, #4]
 8013274:	4912      	ldr	r1, [pc, #72]	; (80132c0 <lwip_netconn_do_listen+0x12c>)
 8013276:	4618      	mov	r0, r3
 8013278:	f006 fbf0 	bl	8019a5c <tcp_accept>
 801327c:	e017      	b.n	80132ae <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	f005 f99c 	bl	80185bc <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	2200      	movs	r2, #0
 801328a:	605a      	str	r2, [r3, #4]
 801328c:	e00f      	b.n	80132ae <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	785b      	ldrb	r3, [r3, #1]
 8013294:	2b02      	cmp	r3, #2
 8013296:	d102      	bne.n	801329e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8013298:	2300      	movs	r3, #0
 801329a:	72fb      	strb	r3, [r7, #11]
 801329c:	e007      	b.n	80132ae <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801329e:	23f5      	movs	r3, #245	; 0xf5
 80132a0:	72fb      	strb	r3, [r7, #11]
 80132a2:	e004      	b.n	80132ae <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80132a4:	23f0      	movs	r3, #240	; 0xf0
 80132a6:	72fb      	strb	r3, [r7, #11]
 80132a8:	e001      	b.n	80132ae <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80132aa:	23f5      	movs	r3, #245	; 0xf5
 80132ac:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80132ae:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80132b6:	bf00      	nop
 80132b8:	3718      	adds	r7, #24
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	080127a1 	.word	0x080127a1

080132c4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b086      	sub	sp, #24
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	2200      	movs	r2, #0
 80132d4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	685b      	ldr	r3, [r3, #4]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d022      	beq.n	8013326 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80132e0:	693b      	ldr	r3, [r7, #16]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80132ea:	2b10      	cmp	r3, #16
 80132ec:	d11b      	bne.n	8013326 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	689b      	ldr	r3, [r3, #8]
 80132f2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132fa:	d202      	bcs.n	8013302 <lwip_netconn_do_recv+0x3e>
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	b29b      	uxth	r3, r3
 8013300:	e001      	b.n	8013306 <lwip_netconn_do_recv+0x42>
 8013302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013306:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	685b      	ldr	r3, [r3, #4]
 801330e:	89fa      	ldrh	r2, [r7, #14]
 8013310:	4611      	mov	r1, r2
 8013312:	4618      	mov	r0, r3
 8013314:	f005 fc60 	bl	8018bd8 <tcp_recved>
        remaining -= recved;
 8013318:	89fb      	ldrh	r3, [r7, #14]
 801331a:	697a      	ldr	r2, [r7, #20]
 801331c:	1ad3      	subs	r3, r2, r3
 801331e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d1e6      	bne.n	80132f4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8013326:	bf00      	nop
 8013328:	3718      	adds	r7, #24
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
	...

08013330 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b088      	sub	sp, #32
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	460b      	mov	r3, r1
 801333a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801333c:	2300      	movs	r3, #0
 801333e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d106      	bne.n	8013354 <lwip_netconn_do_writemore+0x24>
 8013346:	4b96      	ldr	r3, [pc, #600]	; (80135a0 <lwip_netconn_do_writemore+0x270>)
 8013348:	f240 6273 	movw	r2, #1651	; 0x673
 801334c:	4995      	ldr	r1, [pc, #596]	; (80135a4 <lwip_netconn_do_writemore+0x274>)
 801334e:	4896      	ldr	r0, [pc, #600]	; (80135a8 <lwip_netconn_do_writemore+0x278>)
 8013350:	f00c fb54 	bl	801f9fc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	785b      	ldrb	r3, [r3, #1]
 8013358:	2b01      	cmp	r3, #1
 801335a:	d006      	beq.n	801336a <lwip_netconn_do_writemore+0x3a>
 801335c:	4b90      	ldr	r3, [pc, #576]	; (80135a0 <lwip_netconn_do_writemore+0x270>)
 801335e:	f240 6274 	movw	r2, #1652	; 0x674
 8013362:	4992      	ldr	r1, [pc, #584]	; (80135ac <lwip_netconn_do_writemore+0x27c>)
 8013364:	4890      	ldr	r0, [pc, #576]	; (80135a8 <lwip_netconn_do_writemore+0x278>)
 8013366:	f00c fb49 	bl	801f9fc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6a1b      	ldr	r3, [r3, #32]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d106      	bne.n	8013380 <lwip_netconn_do_writemore+0x50>
 8013372:	4b8b      	ldr	r3, [pc, #556]	; (80135a0 <lwip_netconn_do_writemore+0x270>)
 8013374:	f240 6275 	movw	r2, #1653	; 0x675
 8013378:	498d      	ldr	r1, [pc, #564]	; (80135b0 <lwip_netconn_do_writemore+0x280>)
 801337a:	488b      	ldr	r0, [pc, #556]	; (80135a8 <lwip_netconn_do_writemore+0x278>)
 801337c:	f00c fb3e 	bl	801f9fc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	685b      	ldr	r3, [r3, #4]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d106      	bne.n	8013396 <lwip_netconn_do_writemore+0x66>
 8013388:	4b85      	ldr	r3, [pc, #532]	; (80135a0 <lwip_netconn_do_writemore+0x270>)
 801338a:	f240 6276 	movw	r2, #1654	; 0x676
 801338e:	4989      	ldr	r1, [pc, #548]	; (80135b4 <lwip_netconn_do_writemore+0x284>)
 8013390:	4885      	ldr	r0, [pc, #532]	; (80135a8 <lwip_netconn_do_writemore+0x278>)
 8013392:	f00c fb33 	bl	801f9fc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6a1b      	ldr	r3, [r3, #32]
 801339a:	699a      	ldr	r2, [r3, #24]
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6a1b      	ldr	r3, [r3, #32]
 80133a0:	695b      	ldr	r3, [r3, #20]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d306      	bcc.n	80133b4 <lwip_netconn_do_writemore+0x84>
 80133a6:	4b7e      	ldr	r3, [pc, #504]	; (80135a0 <lwip_netconn_do_writemore+0x270>)
 80133a8:	f240 6277 	movw	r2, #1655	; 0x677
 80133ac:	4982      	ldr	r1, [pc, #520]	; (80135b8 <lwip_netconn_do_writemore+0x288>)
 80133ae:	487e      	ldr	r0, [pc, #504]	; (80135a8 <lwip_netconn_do_writemore+0x278>)
 80133b0:	f00c fb24 	bl	801f9fc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	6a1b      	ldr	r3, [r3, #32]
 80133b8:	899b      	ldrh	r3, [r3, #12]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d106      	bne.n	80133cc <lwip_netconn_do_writemore+0x9c>
 80133be:	4b78      	ldr	r3, [pc, #480]	; (80135a0 <lwip_netconn_do_writemore+0x270>)
 80133c0:	f240 6279 	movw	r2, #1657	; 0x679
 80133c4:	497d      	ldr	r1, [pc, #500]	; (80135bc <lwip_netconn_do_writemore+0x28c>)
 80133c6:	4878      	ldr	r0, [pc, #480]	; (80135a8 <lwip_netconn_do_writemore+0x278>)
 80133c8:	f00c fb18 	bl	801f9fc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6a1b      	ldr	r3, [r3, #32]
 80133d0:	7f1b      	ldrb	r3, [r3, #28]
 80133d2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	7f1b      	ldrb	r3, [r3, #28]
 80133d8:	f003 0302 	and.w	r3, r3, #2
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d104      	bne.n	80133ea <lwip_netconn_do_writemore+0xba>
 80133e0:	7ebb      	ldrb	r3, [r7, #26]
 80133e2:	f003 0304 	and.w	r3, r3, #4
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d001      	beq.n	80133ee <lwip_netconn_do_writemore+0xbe>
 80133ea:	2301      	movs	r3, #1
 80133ec:	e000      	b.n	80133f0 <lwip_netconn_do_writemore+0xc0>
 80133ee:	2300      	movs	r3, #0
 80133f0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6a1b      	ldr	r3, [r3, #32]
 80133f6:	689b      	ldr	r3, [r3, #8]
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6a1b      	ldr	r3, [r3, #32]
 80133fe:	691b      	ldr	r3, [r3, #16]
 8013400:	4413      	add	r3, r2
 8013402:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6a1b      	ldr	r3, [r3, #32]
 8013408:	689b      	ldr	r3, [r3, #8]
 801340a:	685a      	ldr	r2, [r3, #4]
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6a1b      	ldr	r3, [r3, #32]
 8013410:	691b      	ldr	r3, [r3, #16]
 8013412:	1ad3      	subs	r3, r2, r3
 8013414:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801341c:	d307      	bcc.n	801342e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801341e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013422:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8013424:	7ebb      	ldrb	r3, [r7, #26]
 8013426:	f043 0302 	orr.w	r3, r3, #2
 801342a:	76bb      	strb	r3, [r7, #26]
 801342c:	e001      	b.n	8013432 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801343a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801343c:	89fa      	ldrh	r2, [r7, #14]
 801343e:	8bbb      	ldrh	r3, [r7, #28]
 8013440:	429a      	cmp	r2, r3
 8013442:	d216      	bcs.n	8013472 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8013444:	89fb      	ldrh	r3, [r7, #14]
 8013446:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8013448:	7e3b      	ldrb	r3, [r7, #24]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d00d      	beq.n	801346a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801344e:	8bbb      	ldrh	r3, [r7, #28]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d10e      	bne.n	8013472 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	6a1b      	ldr	r3, [r3, #32]
 8013458:	699b      	ldr	r3, [r3, #24]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d102      	bne.n	8013464 <lwip_netconn_do_writemore+0x134>
 801345e:	f06f 0306 	mvn.w	r3, #6
 8013462:	e000      	b.n	8013466 <lwip_netconn_do_writemore+0x136>
 8013464:	2300      	movs	r3, #0
 8013466:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8013468:	e07d      	b.n	8013566 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801346a:	7ebb      	ldrb	r3, [r7, #26]
 801346c:	f043 0302 	orr.w	r3, r3, #2
 8013470:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6a1b      	ldr	r3, [r3, #32]
 8013476:	691a      	ldr	r2, [r3, #16]
 8013478:	8bbb      	ldrh	r3, [r7, #28]
 801347a:	441a      	add	r2, r3
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	6a1b      	ldr	r3, [r3, #32]
 8013480:	689b      	ldr	r3, [r3, #8]
 8013482:	685b      	ldr	r3, [r3, #4]
 8013484:	429a      	cmp	r2, r3
 8013486:	d906      	bls.n	8013496 <lwip_netconn_do_writemore+0x166>
 8013488:	4b45      	ldr	r3, [pc, #276]	; (80135a0 <lwip_netconn_do_writemore+0x270>)
 801348a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801348e:	494c      	ldr	r1, [pc, #304]	; (80135c0 <lwip_netconn_do_writemore+0x290>)
 8013490:	4845      	ldr	r0, [pc, #276]	; (80135a8 <lwip_netconn_do_writemore+0x278>)
 8013492:	f00c fab3 	bl	801f9fc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8013496:	8bbb      	ldrh	r3, [r7, #28]
 8013498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801349c:	4293      	cmp	r3, r2
 801349e:	d103      	bne.n	80134a8 <lwip_netconn_do_writemore+0x178>
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80134a6:	d209      	bcs.n	80134bc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80134a8:	693b      	ldr	r3, [r7, #16]
 80134aa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80134ac:	8bba      	ldrh	r2, [r7, #28]
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d10b      	bne.n	80134ca <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	6a1b      	ldr	r3, [r3, #32]
 80134b6:	899b      	ldrh	r3, [r3, #12]
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d906      	bls.n	80134ca <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80134bc:	2301      	movs	r3, #1
 80134be:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80134c0:	7ebb      	ldrb	r3, [r7, #26]
 80134c2:	f043 0302 	orr.w	r3, r3, #2
 80134c6:	76bb      	strb	r3, [r7, #26]
 80134c8:	e001      	b.n	80134ce <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80134ca:	2300      	movs	r3, #0
 80134cc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6858      	ldr	r0, [r3, #4]
 80134d2:	7ebb      	ldrb	r3, [r7, #26]
 80134d4:	8bba      	ldrh	r2, [r7, #28]
 80134d6:	6979      	ldr	r1, [r7, #20]
 80134d8:	f009 f98a 	bl	801c7f0 <tcp_write>
 80134dc:	4603      	mov	r3, r0
 80134de:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80134e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d12c      	bne.n	8013542 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6a1b      	ldr	r3, [r3, #32]
 80134ec:	6999      	ldr	r1, [r3, #24]
 80134ee:	8bba      	ldrh	r2, [r7, #28]
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6a1b      	ldr	r3, [r3, #32]
 80134f4:	440a      	add	r2, r1
 80134f6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6a1b      	ldr	r3, [r3, #32]
 80134fc:	6919      	ldr	r1, [r3, #16]
 80134fe:	8bba      	ldrh	r2, [r7, #28]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	6a1b      	ldr	r3, [r3, #32]
 8013504:	440a      	add	r2, r1
 8013506:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	6a1b      	ldr	r3, [r3, #32]
 801350c:	691a      	ldr	r2, [r3, #16]
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6a1b      	ldr	r3, [r3, #32]
 8013512:	689b      	ldr	r3, [r3, #8]
 8013514:	685b      	ldr	r3, [r3, #4]
 8013516:	429a      	cmp	r2, r3
 8013518:	d113      	bne.n	8013542 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6a1b      	ldr	r3, [r3, #32]
 801351e:	899a      	ldrh	r2, [r3, #12]
 8013520:	3a01      	subs	r2, #1
 8013522:	b292      	uxth	r2, r2
 8013524:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	6a1b      	ldr	r3, [r3, #32]
 801352a:	899b      	ldrh	r3, [r3, #12]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d008      	beq.n	8013542 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6a1b      	ldr	r3, [r3, #32]
 8013534:	689a      	ldr	r2, [r3, #8]
 8013536:	3208      	adds	r2, #8
 8013538:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6a1b      	ldr	r3, [r3, #32]
 801353e:	2200      	movs	r2, #0
 8013540:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8013542:	7e7b      	ldrb	r3, [r7, #25]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d004      	beq.n	8013552 <lwip_netconn_do_writemore+0x222>
 8013548:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801354c:	2b00      	cmp	r3, #0
 801354e:	f43f af50 	beq.w	80133f2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8013552:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d004      	beq.n	8013564 <lwip_netconn_do_writemore+0x234>
 801355a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801355e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013562:	d147      	bne.n	80135f4 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 8013564:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8013566:	7e3b      	ldrb	r3, [r7, #24]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d02b      	beq.n	80135c4 <lwip_netconn_do_writemore+0x294>
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6a1b      	ldr	r3, [r3, #32]
 8013570:	699a      	ldr	r2, [r3, #24]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	6a1b      	ldr	r3, [r3, #32]
 8013576:	695b      	ldr	r3, [r3, #20]
 8013578:	429a      	cmp	r2, r3
 801357a:	d223      	bcs.n	80135c4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013580:	2b00      	cmp	r3, #0
 8013582:	d005      	beq.n	8013590 <lwip_netconn_do_writemore+0x260>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013588:	2200      	movs	r2, #0
 801358a:	2103      	movs	r1, #3
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	7f1b      	ldrb	r3, [r3, #28]
 8013594:	f043 0310 	orr.w	r3, r3, #16
 8013598:	b2da      	uxtb	r2, r3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	771a      	strb	r2, [r3, #28]
 801359e:	e029      	b.n	80135f4 <lwip_netconn_do_writemore+0x2c4>
 80135a0:	08020cbc 	.word	0x08020cbc
 80135a4:	08020e58 	.word	0x08020e58
 80135a8:	08020d44 	.word	0x08020d44
 80135ac:	08021160 	.word	0x08021160
 80135b0:	08020e68 	.word	0x08020e68
 80135b4:	08021180 	.word	0x08021180
 80135b8:	08021198 	.word	0x08021198
 80135bc:	080211d8 	.word	0x080211d8
 80135c0:	08021200 	.word	0x08021200
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80135cc:	f640 3269 	movw	r2, #2921	; 0xb69
 80135d0:	4293      	cmp	r3, r2
 80135d2:	d905      	bls.n	80135e0 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	685b      	ldr	r3, [r3, #4]
 80135d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80135dc:	2b07      	cmp	r3, #7
 80135de:	d909      	bls.n	80135f4 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d005      	beq.n	80135f4 <lwip_netconn_do_writemore+0x2c4>
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ec:	2200      	movs	r2, #0
 80135ee:	2103      	movs	r1, #3
 80135f0:	6878      	ldr	r0, [r7, #4]
 80135f2:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80135f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d11d      	bne.n	8013638 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6a1b      	ldr	r3, [r3, #32]
 8013600:	699a      	ldr	r2, [r3, #24]
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6a1b      	ldr	r3, [r3, #32]
 8013606:	695b      	ldr	r3, [r3, #20]
 8013608:	429a      	cmp	r2, r3
 801360a:	d002      	beq.n	8013612 <lwip_netconn_do_writemore+0x2e2>
 801360c:	7e3b      	ldrb	r3, [r7, #24]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d001      	beq.n	8013616 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8013612:	2301      	movs	r3, #1
 8013614:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	4618      	mov	r0, r3
 801361c:	f009 fed2 	bl	801d3c4 <tcp_output>
 8013620:	4603      	mov	r3, r0
 8013622:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8013624:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8013628:	f113 0f04 	cmn.w	r3, #4
 801362c:	d12c      	bne.n	8013688 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801362e:	7b3b      	ldrb	r3, [r7, #12]
 8013630:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013632:	2301      	movs	r3, #1
 8013634:	76fb      	strb	r3, [r7, #27]
 8013636:	e027      	b.n	8013688 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 8013638:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801363c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013640:	d120      	bne.n	8013684 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	685b      	ldr	r3, [r3, #4]
 8013646:	4618      	mov	r0, r3
 8013648:	f009 febc 	bl	801d3c4 <tcp_output>
 801364c:	4603      	mov	r3, r0
 801364e:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8013650:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8013654:	f113 0f04 	cmn.w	r3, #4
 8013658:	d104      	bne.n	8013664 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801365a:	7b7b      	ldrb	r3, [r7, #13]
 801365c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801365e:	2301      	movs	r3, #1
 8013660:	76fb      	strb	r3, [r7, #27]
 8013662:	e011      	b.n	8013688 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 8013664:	7e3b      	ldrb	r3, [r7, #24]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d00e      	beq.n	8013688 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6a1b      	ldr	r3, [r3, #32]
 801366e:	699b      	ldr	r3, [r3, #24]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d102      	bne.n	801367a <lwip_netconn_do_writemore+0x34a>
 8013674:	f06f 0306 	mvn.w	r3, #6
 8013678:	e000      	b.n	801367c <lwip_netconn_do_writemore+0x34c>
 801367a:	2300      	movs	r3, #0
 801367c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801367e:	2301      	movs	r3, #1
 8013680:	76fb      	strb	r3, [r7, #27]
 8013682:	e001      	b.n	8013688 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8013684:	2301      	movs	r3, #1
 8013686:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8013688:	7efb      	ldrb	r3, [r7, #27]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d015      	beq.n	80136ba <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	6a1b      	ldr	r3, [r3, #32]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	330c      	adds	r3, #12
 8013696:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6a1b      	ldr	r3, [r3, #32]
 801369c:	7ffa      	ldrb	r2, [r7, #31]
 801369e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2200      	movs	r2, #0
 80136a4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	2200      	movs	r2, #0
 80136aa:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80136ac:	78fb      	ldrb	r3, [r7, #3]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d006      	beq.n	80136c0 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80136b2:	68b8      	ldr	r0, [r7, #8]
 80136b4:	f004 fcb0 	bl	8018018 <sys_sem_signal>
 80136b8:	e002      	b.n	80136c0 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80136ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136be:	e000      	b.n	80136c2 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 80136c0:	2300      	movs	r3, #0
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3720      	adds	r7, #32
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop

080136cc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b084      	sub	sp, #16
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	4618      	mov	r0, r3
 80136de:	f7fe fd16 	bl	801210e <netconn_err>
 80136e2:	4603      	mov	r3, r0
 80136e4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80136e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d166      	bne.n	80137bc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80136f8:	2b10      	cmp	r3, #16
 80136fa:	d15d      	bne.n	80137b8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	785b      	ldrb	r3, [r3, #1]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d002      	beq.n	801370c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8013706:	23fb      	movs	r3, #251	; 0xfb
 8013708:	73fb      	strb	r3, [r7, #15]
 801370a:	e057      	b.n	80137bc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d04d      	beq.n	80137b2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	2201      	movs	r2, #1
 801371c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	6a1b      	ldr	r3, [r3, #32]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d006      	beq.n	8013736 <lwip_netconn_do_write+0x6a>
 8013728:	4b28      	ldr	r3, [pc, #160]	; (80137cc <lwip_netconn_do_write+0x100>)
 801372a:	f240 7223 	movw	r2, #1827	; 0x723
 801372e:	4928      	ldr	r1, [pc, #160]	; (80137d0 <lwip_netconn_do_write+0x104>)
 8013730:	4828      	ldr	r0, [pc, #160]	; (80137d4 <lwip_netconn_do_write+0x108>)
 8013732:	f00c f963 	bl	801f9fc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	695b      	ldr	r3, [r3, #20]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d106      	bne.n	801374c <lwip_netconn_do_write+0x80>
 801373e:	4b23      	ldr	r3, [pc, #140]	; (80137cc <lwip_netconn_do_write+0x100>)
 8013740:	f240 7224 	movw	r2, #1828	; 0x724
 8013744:	4924      	ldr	r1, [pc, #144]	; (80137d8 <lwip_netconn_do_write+0x10c>)
 8013746:	4823      	ldr	r0, [pc, #140]	; (80137d4 <lwip_netconn_do_write+0x108>)
 8013748:	f00c f958 	bl	801f9fc <iprintf>
        msg->conn->current_msg = msg;
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	68ba      	ldr	r2, [r7, #8]
 8013752:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	2100      	movs	r1, #0
 801375a:	4618      	mov	r0, r3
 801375c:	f7ff fde8 	bl	8013330 <lwip_netconn_do_writemore>
 8013760:	4603      	mov	r3, r0
 8013762:	2b00      	cmp	r3, #0
 8013764:	d02e      	beq.n	80137c4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	785b      	ldrb	r3, [r3, #1]
 801376c:	2b01      	cmp	r3, #1
 801376e:	d006      	beq.n	801377e <lwip_netconn_do_write+0xb2>
 8013770:	4b16      	ldr	r3, [pc, #88]	; (80137cc <lwip_netconn_do_write+0x100>)
 8013772:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013776:	4919      	ldr	r1, [pc, #100]	; (80137dc <lwip_netconn_do_write+0x110>)
 8013778:	4816      	ldr	r0, [pc, #88]	; (80137d4 <lwip_netconn_do_write+0x108>)
 801377a:	f00c f93f 	bl	801f9fc <iprintf>
          UNLOCK_TCPIP_CORE();
 801377e:	4818      	ldr	r0, [pc, #96]	; (80137e0 <lwip_netconn_do_write+0x114>)
 8013780:	f004 fcbb 	bl	80180fa <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	330c      	adds	r3, #12
 801378a:	2100      	movs	r1, #0
 801378c:	4618      	mov	r0, r3
 801378e:	f004 fc12 	bl	8017fb6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8013792:	4813      	ldr	r0, [pc, #76]	; (80137e0 <lwip_netconn_do_write+0x114>)
 8013794:	f004 fca2 	bl	80180dc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	785b      	ldrb	r3, [r3, #1]
 801379e:	2b01      	cmp	r3, #1
 80137a0:	d110      	bne.n	80137c4 <lwip_netconn_do_write+0xf8>
 80137a2:	4b0a      	ldr	r3, [pc, #40]	; (80137cc <lwip_netconn_do_write+0x100>)
 80137a4:	f240 722c 	movw	r2, #1836	; 0x72c
 80137a8:	490c      	ldr	r1, [pc, #48]	; (80137dc <lwip_netconn_do_write+0x110>)
 80137aa:	480a      	ldr	r0, [pc, #40]	; (80137d4 <lwip_netconn_do_write+0x108>)
 80137ac:	f00c f926 	bl	801f9fc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80137b0:	e008      	b.n	80137c4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80137b2:	23f5      	movs	r3, #245	; 0xf5
 80137b4:	73fb      	strb	r3, [r7, #15]
 80137b6:	e001      	b.n	80137bc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80137b8:	23fa      	movs	r3, #250	; 0xfa
 80137ba:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	7bfa      	ldrb	r2, [r7, #15]
 80137c0:	711a      	strb	r2, [r3, #4]
 80137c2:	e000      	b.n	80137c6 <lwip_netconn_do_write+0xfa>
        return;
 80137c4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80137c6:	3710      	adds	r7, #16
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}
 80137cc:	08020cbc 	.word	0x08020cbc
 80137d0:	080210a4 	.word	0x080210a4
 80137d4:	08020d44 	.word	0x08020d44
 80137d8:	0802122c 	.word	0x0802122c
 80137dc:	080210c0 	.word	0x080210c0
 80137e0:	2400f97c 	.word	0x2400f97c

080137e4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b084      	sub	sp, #16
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	785b      	ldrb	r3, [r3, #1]
 80137f6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	685b      	ldr	r3, [r3, #4]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d069      	beq.n	80138d6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	781b      	ldrb	r3, [r3, #0]
 8013808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 801380c:	2b10      	cmp	r3, #16
 801380e:	d162      	bne.n	80138d6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013814:	2b03      	cmp	r3, #3
 8013816:	d002      	beq.n	801381e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8013818:	7afb      	ldrb	r3, [r7, #11]
 801381a:	2b02      	cmp	r3, #2
 801381c:	d05b      	beq.n	80138d6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801381e:	7afb      	ldrb	r3, [r7, #11]
 8013820:	2b03      	cmp	r3, #3
 8013822:	d103      	bne.n	801382c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	22f5      	movs	r2, #245	; 0xf5
 8013828:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801382a:	e059      	b.n	80138e0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 801382c:	7afb      	ldrb	r3, [r7, #11]
 801382e:	2b01      	cmp	r3, #1
 8013830:	d103      	bne.n	801383a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	22fb      	movs	r2, #251	; 0xfb
 8013836:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8013838:	e052      	b.n	80138e0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	7a1b      	ldrb	r3, [r3, #8]
 801383e:	f003 0301 	and.w	r3, r3, #1
 8013842:	2b00      	cmp	r3, #0
 8013844:	d004      	beq.n	8013850 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	4618      	mov	r0, r3
 801384c:	f7ff f99c 	bl	8012b88 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	6a1b      	ldr	r3, [r3, #32]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d006      	beq.n	8013868 <lwip_netconn_do_close+0x84>
 801385a:	4b23      	ldr	r3, [pc, #140]	; (80138e8 <lwip_netconn_do_close+0x104>)
 801385c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8013860:	4922      	ldr	r1, [pc, #136]	; (80138ec <lwip_netconn_do_close+0x108>)
 8013862:	4823      	ldr	r0, [pc, #140]	; (80138f0 <lwip_netconn_do_close+0x10c>)
 8013864:	f00c f8ca 	bl	801f9fc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	2204      	movs	r2, #4
 801386e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	68fa      	ldr	r2, [r7, #12]
 8013876:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	2100      	movs	r1, #0
 801387e:	4618      	mov	r0, r3
 8013880:	f7ff fa00 	bl	8012c84 <lwip_netconn_do_close_internal>
 8013884:	4603      	mov	r3, r0
 8013886:	2b00      	cmp	r3, #0
 8013888:	d029      	beq.n	80138de <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	785b      	ldrb	r3, [r3, #1]
 8013890:	2b04      	cmp	r3, #4
 8013892:	d006      	beq.n	80138a2 <lwip_netconn_do_close+0xbe>
 8013894:	4b14      	ldr	r3, [pc, #80]	; (80138e8 <lwip_netconn_do_close+0x104>)
 8013896:	f240 72c2 	movw	r2, #1986	; 0x7c2
 801389a:	4916      	ldr	r1, [pc, #88]	; (80138f4 <lwip_netconn_do_close+0x110>)
 801389c:	4814      	ldr	r0, [pc, #80]	; (80138f0 <lwip_netconn_do_close+0x10c>)
 801389e:	f00c f8ad 	bl	801f9fc <iprintf>
        UNLOCK_TCPIP_CORE();
 80138a2:	4815      	ldr	r0, [pc, #84]	; (80138f8 <lwip_netconn_do_close+0x114>)
 80138a4:	f004 fc29 	bl	80180fa <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	330c      	adds	r3, #12
 80138ae:	2100      	movs	r1, #0
 80138b0:	4618      	mov	r0, r3
 80138b2:	f004 fb80 	bl	8017fb6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80138b6:	4810      	ldr	r0, [pc, #64]	; (80138f8 <lwip_netconn_do_close+0x114>)
 80138b8:	f004 fc10 	bl	80180dc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	785b      	ldrb	r3, [r3, #1]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d00b      	beq.n	80138de <lwip_netconn_do_close+0xfa>
 80138c6:	4b08      	ldr	r3, [pc, #32]	; (80138e8 <lwip_netconn_do_close+0x104>)
 80138c8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80138cc:	4909      	ldr	r1, [pc, #36]	; (80138f4 <lwip_netconn_do_close+0x110>)
 80138ce:	4808      	ldr	r0, [pc, #32]	; (80138f0 <lwip_netconn_do_close+0x10c>)
 80138d0:	f00c f894 	bl	801f9fc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80138d4:	e003      	b.n	80138de <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	22f5      	movs	r2, #245	; 0xf5
 80138da:	711a      	strb	r2, [r3, #4]
 80138dc:	e000      	b.n	80138e0 <lwip_netconn_do_close+0xfc>
      return;
 80138de:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80138e0:	3710      	adds	r7, #16
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	08020cbc 	.word	0x08020cbc
 80138ec:	080210a4 	.word	0x080210a4
 80138f0:	08020d44 	.word	0x08020d44
 80138f4:	080210c0 	.word	0x080210c0
 80138f8:	2400f97c 	.word	0x2400f97c

080138fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80138fc:	b480      	push	{r7}
 80138fe:	b083      	sub	sp, #12
 8013900:	af00      	add	r7, sp, #0
 8013902:	4603      	mov	r3, r0
 8013904:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8013906:	88fb      	ldrh	r3, [r7, #6]
 8013908:	021b      	lsls	r3, r3, #8
 801390a:	b21a      	sxth	r2, r3
 801390c:	88fb      	ldrh	r3, [r7, #6]
 801390e:	0a1b      	lsrs	r3, r3, #8
 8013910:	b29b      	uxth	r3, r3
 8013912:	b21b      	sxth	r3, r3
 8013914:	4313      	orrs	r3, r2
 8013916:	b21b      	sxth	r3, r3
 8013918:	b29b      	uxth	r3, r3
}
 801391a:	4618      	mov	r0, r3
 801391c:	370c      	adds	r7, #12
 801391e:	46bd      	mov	sp, r7
 8013920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013924:	4770      	bx	lr

08013926 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013926:	b480      	push	{r7}
 8013928:	b083      	sub	sp, #12
 801392a:	af00      	add	r7, sp, #0
 801392c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	061a      	lsls	r2, r3, #24
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	021b      	lsls	r3, r3, #8
 8013936:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801393a:	431a      	orrs	r2, r3
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	0a1b      	lsrs	r3, r3, #8
 8013940:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013944:	431a      	orrs	r2, r3
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	0e1b      	lsrs	r3, r3, #24
 801394a:	4313      	orrs	r3, r2
}
 801394c:	4618      	mov	r0, r3
 801394e:	370c      	adds	r7, #12
 8013950:	46bd      	mov	sp, r7
 8013952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013956:	4770      	bx	lr

08013958 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013960:	4915      	ldr	r1, [pc, #84]	; (80139b8 <etharp_free_entry+0x60>)
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	4613      	mov	r3, r2
 8013966:	005b      	lsls	r3, r3, #1
 8013968:	4413      	add	r3, r2
 801396a:	00db      	lsls	r3, r3, #3
 801396c:	440b      	add	r3, r1
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d013      	beq.n	801399c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013974:	4910      	ldr	r1, [pc, #64]	; (80139b8 <etharp_free_entry+0x60>)
 8013976:	687a      	ldr	r2, [r7, #4]
 8013978:	4613      	mov	r3, r2
 801397a:	005b      	lsls	r3, r3, #1
 801397c:	4413      	add	r3, r2
 801397e:	00db      	lsls	r3, r3, #3
 8013980:	440b      	add	r3, r1
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	4618      	mov	r0, r3
 8013986:	f003 ff8d 	bl	80178a4 <pbuf_free>
    arp_table[i].q = NULL;
 801398a:	490b      	ldr	r1, [pc, #44]	; (80139b8 <etharp_free_entry+0x60>)
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	4613      	mov	r3, r2
 8013990:	005b      	lsls	r3, r3, #1
 8013992:	4413      	add	r3, r2
 8013994:	00db      	lsls	r3, r3, #3
 8013996:	440b      	add	r3, r1
 8013998:	2200      	movs	r2, #0
 801399a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801399c:	4906      	ldr	r1, [pc, #24]	; (80139b8 <etharp_free_entry+0x60>)
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	4613      	mov	r3, r2
 80139a2:	005b      	lsls	r3, r3, #1
 80139a4:	4413      	add	r3, r2
 80139a6:	00db      	lsls	r3, r3, #3
 80139a8:	440b      	add	r3, r1
 80139aa:	3314      	adds	r3, #20
 80139ac:	2200      	movs	r2, #0
 80139ae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80139b0:	bf00      	nop
 80139b2:	3708      	adds	r7, #8
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	24008d5c 	.word	0x24008d5c

080139bc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b082      	sub	sp, #8
 80139c0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80139c2:	2300      	movs	r3, #0
 80139c4:	607b      	str	r3, [r7, #4]
 80139c6:	e096      	b.n	8013af6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80139c8:	494f      	ldr	r1, [pc, #316]	; (8013b08 <etharp_tmr+0x14c>)
 80139ca:	687a      	ldr	r2, [r7, #4]
 80139cc:	4613      	mov	r3, r2
 80139ce:	005b      	lsls	r3, r3, #1
 80139d0:	4413      	add	r3, r2
 80139d2:	00db      	lsls	r3, r3, #3
 80139d4:	440b      	add	r3, r1
 80139d6:	3314      	adds	r3, #20
 80139d8:	781b      	ldrb	r3, [r3, #0]
 80139da:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80139dc:	78fb      	ldrb	r3, [r7, #3]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	f000 8086 	beq.w	8013af0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80139e4:	4948      	ldr	r1, [pc, #288]	; (8013b08 <etharp_tmr+0x14c>)
 80139e6:	687a      	ldr	r2, [r7, #4]
 80139e8:	4613      	mov	r3, r2
 80139ea:	005b      	lsls	r3, r3, #1
 80139ec:	4413      	add	r3, r2
 80139ee:	00db      	lsls	r3, r3, #3
 80139f0:	440b      	add	r3, r1
 80139f2:	3312      	adds	r3, #18
 80139f4:	881b      	ldrh	r3, [r3, #0]
 80139f6:	3301      	adds	r3, #1
 80139f8:	b298      	uxth	r0, r3
 80139fa:	4943      	ldr	r1, [pc, #268]	; (8013b08 <etharp_tmr+0x14c>)
 80139fc:	687a      	ldr	r2, [r7, #4]
 80139fe:	4613      	mov	r3, r2
 8013a00:	005b      	lsls	r3, r3, #1
 8013a02:	4413      	add	r3, r2
 8013a04:	00db      	lsls	r3, r3, #3
 8013a06:	440b      	add	r3, r1
 8013a08:	3312      	adds	r3, #18
 8013a0a:	4602      	mov	r2, r0
 8013a0c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013a0e:	493e      	ldr	r1, [pc, #248]	; (8013b08 <etharp_tmr+0x14c>)
 8013a10:	687a      	ldr	r2, [r7, #4]
 8013a12:	4613      	mov	r3, r2
 8013a14:	005b      	lsls	r3, r3, #1
 8013a16:	4413      	add	r3, r2
 8013a18:	00db      	lsls	r3, r3, #3
 8013a1a:	440b      	add	r3, r1
 8013a1c:	3312      	adds	r3, #18
 8013a1e:	881b      	ldrh	r3, [r3, #0]
 8013a20:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013a24:	d215      	bcs.n	8013a52 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013a26:	4938      	ldr	r1, [pc, #224]	; (8013b08 <etharp_tmr+0x14c>)
 8013a28:	687a      	ldr	r2, [r7, #4]
 8013a2a:	4613      	mov	r3, r2
 8013a2c:	005b      	lsls	r3, r3, #1
 8013a2e:	4413      	add	r3, r2
 8013a30:	00db      	lsls	r3, r3, #3
 8013a32:	440b      	add	r3, r1
 8013a34:	3314      	adds	r3, #20
 8013a36:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013a38:	2b01      	cmp	r3, #1
 8013a3a:	d10e      	bne.n	8013a5a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013a3c:	4932      	ldr	r1, [pc, #200]	; (8013b08 <etharp_tmr+0x14c>)
 8013a3e:	687a      	ldr	r2, [r7, #4]
 8013a40:	4613      	mov	r3, r2
 8013a42:	005b      	lsls	r3, r3, #1
 8013a44:	4413      	add	r3, r2
 8013a46:	00db      	lsls	r3, r3, #3
 8013a48:	440b      	add	r3, r1
 8013a4a:	3312      	adds	r3, #18
 8013a4c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013a4e:	2b04      	cmp	r3, #4
 8013a50:	d903      	bls.n	8013a5a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f7ff ff80 	bl	8013958 <etharp_free_entry>
 8013a58:	e04a      	b.n	8013af0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013a5a:	492b      	ldr	r1, [pc, #172]	; (8013b08 <etharp_tmr+0x14c>)
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	4613      	mov	r3, r2
 8013a60:	005b      	lsls	r3, r3, #1
 8013a62:	4413      	add	r3, r2
 8013a64:	00db      	lsls	r3, r3, #3
 8013a66:	440b      	add	r3, r1
 8013a68:	3314      	adds	r3, #20
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	2b03      	cmp	r3, #3
 8013a6e:	d10a      	bne.n	8013a86 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013a70:	4925      	ldr	r1, [pc, #148]	; (8013b08 <etharp_tmr+0x14c>)
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	4613      	mov	r3, r2
 8013a76:	005b      	lsls	r3, r3, #1
 8013a78:	4413      	add	r3, r2
 8013a7a:	00db      	lsls	r3, r3, #3
 8013a7c:	440b      	add	r3, r1
 8013a7e:	3314      	adds	r3, #20
 8013a80:	2204      	movs	r2, #4
 8013a82:	701a      	strb	r2, [r3, #0]
 8013a84:	e034      	b.n	8013af0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013a86:	4920      	ldr	r1, [pc, #128]	; (8013b08 <etharp_tmr+0x14c>)
 8013a88:	687a      	ldr	r2, [r7, #4]
 8013a8a:	4613      	mov	r3, r2
 8013a8c:	005b      	lsls	r3, r3, #1
 8013a8e:	4413      	add	r3, r2
 8013a90:	00db      	lsls	r3, r3, #3
 8013a92:	440b      	add	r3, r1
 8013a94:	3314      	adds	r3, #20
 8013a96:	781b      	ldrb	r3, [r3, #0]
 8013a98:	2b04      	cmp	r3, #4
 8013a9a:	d10a      	bne.n	8013ab2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013a9c:	491a      	ldr	r1, [pc, #104]	; (8013b08 <etharp_tmr+0x14c>)
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	005b      	lsls	r3, r3, #1
 8013aa4:	4413      	add	r3, r2
 8013aa6:	00db      	lsls	r3, r3, #3
 8013aa8:	440b      	add	r3, r1
 8013aaa:	3314      	adds	r3, #20
 8013aac:	2202      	movs	r2, #2
 8013aae:	701a      	strb	r2, [r3, #0]
 8013ab0:	e01e      	b.n	8013af0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013ab2:	4915      	ldr	r1, [pc, #84]	; (8013b08 <etharp_tmr+0x14c>)
 8013ab4:	687a      	ldr	r2, [r7, #4]
 8013ab6:	4613      	mov	r3, r2
 8013ab8:	005b      	lsls	r3, r3, #1
 8013aba:	4413      	add	r3, r2
 8013abc:	00db      	lsls	r3, r3, #3
 8013abe:	440b      	add	r3, r1
 8013ac0:	3314      	adds	r3, #20
 8013ac2:	781b      	ldrb	r3, [r3, #0]
 8013ac4:	2b01      	cmp	r3, #1
 8013ac6:	d113      	bne.n	8013af0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013ac8:	490f      	ldr	r1, [pc, #60]	; (8013b08 <etharp_tmr+0x14c>)
 8013aca:	687a      	ldr	r2, [r7, #4]
 8013acc:	4613      	mov	r3, r2
 8013ace:	005b      	lsls	r3, r3, #1
 8013ad0:	4413      	add	r3, r2
 8013ad2:	00db      	lsls	r3, r3, #3
 8013ad4:	440b      	add	r3, r1
 8013ad6:	3308      	adds	r3, #8
 8013ad8:	6818      	ldr	r0, [r3, #0]
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	4613      	mov	r3, r2
 8013ade:	005b      	lsls	r3, r3, #1
 8013ae0:	4413      	add	r3, r2
 8013ae2:	00db      	lsls	r3, r3, #3
 8013ae4:	4a08      	ldr	r2, [pc, #32]	; (8013b08 <etharp_tmr+0x14c>)
 8013ae6:	4413      	add	r3, r2
 8013ae8:	3304      	adds	r3, #4
 8013aea:	4619      	mov	r1, r3
 8013aec:	f000 fe6e 	bl	80147cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	3301      	adds	r3, #1
 8013af4:	607b      	str	r3, [r7, #4]
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2b09      	cmp	r3, #9
 8013afa:	f77f af65 	ble.w	80139c8 <etharp_tmr+0xc>
      }
    }
  }
}
 8013afe:	bf00      	nop
 8013b00:	bf00      	nop
 8013b02:	3708      	adds	r7, #8
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	24008d5c 	.word	0x24008d5c

08013b0c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b08a      	sub	sp, #40	; 0x28
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	60f8      	str	r0, [r7, #12]
 8013b14:	460b      	mov	r3, r1
 8013b16:	607a      	str	r2, [r7, #4]
 8013b18:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013b1a:	230a      	movs	r3, #10
 8013b1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013b1e:	230a      	movs	r3, #10
 8013b20:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013b22:	230a      	movs	r3, #10
 8013b24:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013b26:	2300      	movs	r3, #0
 8013b28:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013b2a:	230a      	movs	r3, #10
 8013b2c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	83bb      	strh	r3, [r7, #28]
 8013b32:	2300      	movs	r3, #0
 8013b34:	837b      	strh	r3, [r7, #26]
 8013b36:	2300      	movs	r3, #0
 8013b38:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	843b      	strh	r3, [r7, #32]
 8013b3e:	e0ae      	b.n	8013c9e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013b40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b44:	49a6      	ldr	r1, [pc, #664]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013b46:	4613      	mov	r3, r2
 8013b48:	005b      	lsls	r3, r3, #1
 8013b4a:	4413      	add	r3, r2
 8013b4c:	00db      	lsls	r3, r3, #3
 8013b4e:	440b      	add	r3, r1
 8013b50:	3314      	adds	r3, #20
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013b56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013b5a:	2b0a      	cmp	r3, #10
 8013b5c:	d105      	bne.n	8013b6a <etharp_find_entry+0x5e>
 8013b5e:	7dfb      	ldrb	r3, [r7, #23]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d102      	bne.n	8013b6a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013b64:	8c3b      	ldrh	r3, [r7, #32]
 8013b66:	847b      	strh	r3, [r7, #34]	; 0x22
 8013b68:	e095      	b.n	8013c96 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013b6a:	7dfb      	ldrb	r3, [r7, #23]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	f000 8092 	beq.w	8013c96 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013b72:	7dfb      	ldrb	r3, [r7, #23]
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	d009      	beq.n	8013b8c <etharp_find_entry+0x80>
 8013b78:	7dfb      	ldrb	r3, [r7, #23]
 8013b7a:	2b01      	cmp	r3, #1
 8013b7c:	d806      	bhi.n	8013b8c <etharp_find_entry+0x80>
 8013b7e:	4b99      	ldr	r3, [pc, #612]	; (8013de4 <etharp_find_entry+0x2d8>)
 8013b80:	f240 1223 	movw	r2, #291	; 0x123
 8013b84:	4998      	ldr	r1, [pc, #608]	; (8013de8 <etharp_find_entry+0x2dc>)
 8013b86:	4899      	ldr	r0, [pc, #612]	; (8013dec <etharp_find_entry+0x2e0>)
 8013b88:	f00b ff38 	bl	801f9fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d020      	beq.n	8013bd4 <etharp_find_entry+0xc8>
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	6819      	ldr	r1, [r3, #0]
 8013b96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b9a:	4891      	ldr	r0, [pc, #580]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013b9c:	4613      	mov	r3, r2
 8013b9e:	005b      	lsls	r3, r3, #1
 8013ba0:	4413      	add	r3, r2
 8013ba2:	00db      	lsls	r3, r3, #3
 8013ba4:	4403      	add	r3, r0
 8013ba6:	3304      	adds	r3, #4
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	4299      	cmp	r1, r3
 8013bac:	d112      	bne.n	8013bd4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d00c      	beq.n	8013bce <etharp_find_entry+0xc2>
 8013bb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013bb8:	4989      	ldr	r1, [pc, #548]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013bba:	4613      	mov	r3, r2
 8013bbc:	005b      	lsls	r3, r3, #1
 8013bbe:	4413      	add	r3, r2
 8013bc0:	00db      	lsls	r3, r3, #3
 8013bc2:	440b      	add	r3, r1
 8013bc4:	3308      	adds	r3, #8
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d102      	bne.n	8013bd4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013bce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013bd2:	e100      	b.n	8013dd6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013bd4:	7dfb      	ldrb	r3, [r7, #23]
 8013bd6:	2b01      	cmp	r3, #1
 8013bd8:	d140      	bne.n	8013c5c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013bda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013bde:	4980      	ldr	r1, [pc, #512]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013be0:	4613      	mov	r3, r2
 8013be2:	005b      	lsls	r3, r3, #1
 8013be4:	4413      	add	r3, r2
 8013be6:	00db      	lsls	r3, r3, #3
 8013be8:	440b      	add	r3, r1
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d01a      	beq.n	8013c26 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013bf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013bf4:	497a      	ldr	r1, [pc, #488]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013bf6:	4613      	mov	r3, r2
 8013bf8:	005b      	lsls	r3, r3, #1
 8013bfa:	4413      	add	r3, r2
 8013bfc:	00db      	lsls	r3, r3, #3
 8013bfe:	440b      	add	r3, r1
 8013c00:	3312      	adds	r3, #18
 8013c02:	881b      	ldrh	r3, [r3, #0]
 8013c04:	8bba      	ldrh	r2, [r7, #28]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d845      	bhi.n	8013c96 <etharp_find_entry+0x18a>
            old_queue = i;
 8013c0a:	8c3b      	ldrh	r3, [r7, #32]
 8013c0c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013c0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c12:	4973      	ldr	r1, [pc, #460]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013c14:	4613      	mov	r3, r2
 8013c16:	005b      	lsls	r3, r3, #1
 8013c18:	4413      	add	r3, r2
 8013c1a:	00db      	lsls	r3, r3, #3
 8013c1c:	440b      	add	r3, r1
 8013c1e:	3312      	adds	r3, #18
 8013c20:	881b      	ldrh	r3, [r3, #0]
 8013c22:	83bb      	strh	r3, [r7, #28]
 8013c24:	e037      	b.n	8013c96 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013c26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c2a:	496d      	ldr	r1, [pc, #436]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013c2c:	4613      	mov	r3, r2
 8013c2e:	005b      	lsls	r3, r3, #1
 8013c30:	4413      	add	r3, r2
 8013c32:	00db      	lsls	r3, r3, #3
 8013c34:	440b      	add	r3, r1
 8013c36:	3312      	adds	r3, #18
 8013c38:	881b      	ldrh	r3, [r3, #0]
 8013c3a:	8b7a      	ldrh	r2, [r7, #26]
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d82a      	bhi.n	8013c96 <etharp_find_entry+0x18a>
            old_pending = i;
 8013c40:	8c3b      	ldrh	r3, [r7, #32]
 8013c42:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013c44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c48:	4965      	ldr	r1, [pc, #404]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013c4a:	4613      	mov	r3, r2
 8013c4c:	005b      	lsls	r3, r3, #1
 8013c4e:	4413      	add	r3, r2
 8013c50:	00db      	lsls	r3, r3, #3
 8013c52:	440b      	add	r3, r1
 8013c54:	3312      	adds	r3, #18
 8013c56:	881b      	ldrh	r3, [r3, #0]
 8013c58:	837b      	strh	r3, [r7, #26]
 8013c5a:	e01c      	b.n	8013c96 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013c5c:	7dfb      	ldrb	r3, [r7, #23]
 8013c5e:	2b01      	cmp	r3, #1
 8013c60:	d919      	bls.n	8013c96 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013c62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c66:	495e      	ldr	r1, [pc, #376]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013c68:	4613      	mov	r3, r2
 8013c6a:	005b      	lsls	r3, r3, #1
 8013c6c:	4413      	add	r3, r2
 8013c6e:	00db      	lsls	r3, r3, #3
 8013c70:	440b      	add	r3, r1
 8013c72:	3312      	adds	r3, #18
 8013c74:	881b      	ldrh	r3, [r3, #0]
 8013c76:	8b3a      	ldrh	r2, [r7, #24]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d80c      	bhi.n	8013c96 <etharp_find_entry+0x18a>
            old_stable = i;
 8013c7c:	8c3b      	ldrh	r3, [r7, #32]
 8013c7e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013c80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c84:	4956      	ldr	r1, [pc, #344]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013c86:	4613      	mov	r3, r2
 8013c88:	005b      	lsls	r3, r3, #1
 8013c8a:	4413      	add	r3, r2
 8013c8c:	00db      	lsls	r3, r3, #3
 8013c8e:	440b      	add	r3, r1
 8013c90:	3312      	adds	r3, #18
 8013c92:	881b      	ldrh	r3, [r3, #0]
 8013c94:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013c96:	8c3b      	ldrh	r3, [r7, #32]
 8013c98:	3301      	adds	r3, #1
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	843b      	strh	r3, [r7, #32]
 8013c9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013ca2:	2b09      	cmp	r3, #9
 8013ca4:	f77f af4c 	ble.w	8013b40 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013ca8:	7afb      	ldrb	r3, [r7, #11]
 8013caa:	f003 0302 	and.w	r3, r3, #2
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d108      	bne.n	8013cc4 <etharp_find_entry+0x1b8>
 8013cb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013cb6:	2b0a      	cmp	r3, #10
 8013cb8:	d107      	bne.n	8013cca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013cba:	7afb      	ldrb	r3, [r7, #11]
 8013cbc:	f003 0301 	and.w	r3, r3, #1
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d102      	bne.n	8013cca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013cc8:	e085      	b.n	8013dd6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013cca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013cce:	2b09      	cmp	r3, #9
 8013cd0:	dc02      	bgt.n	8013cd8 <etharp_find_entry+0x1cc>
    i = empty;
 8013cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013cd4:	843b      	strh	r3, [r7, #32]
 8013cd6:	e039      	b.n	8013d4c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013cd8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013cdc:	2b09      	cmp	r3, #9
 8013cde:	dc14      	bgt.n	8013d0a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013ce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ce2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013ce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ce8:	493d      	ldr	r1, [pc, #244]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013cea:	4613      	mov	r3, r2
 8013cec:	005b      	lsls	r3, r3, #1
 8013cee:	4413      	add	r3, r2
 8013cf0:	00db      	lsls	r3, r3, #3
 8013cf2:	440b      	add	r3, r1
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d018      	beq.n	8013d2c <etharp_find_entry+0x220>
 8013cfa:	4b3a      	ldr	r3, [pc, #232]	; (8013de4 <etharp_find_entry+0x2d8>)
 8013cfc:	f240 126d 	movw	r2, #365	; 0x16d
 8013d00:	493b      	ldr	r1, [pc, #236]	; (8013df0 <etharp_find_entry+0x2e4>)
 8013d02:	483a      	ldr	r0, [pc, #232]	; (8013dec <etharp_find_entry+0x2e0>)
 8013d04:	f00b fe7a 	bl	801f9fc <iprintf>
 8013d08:	e010      	b.n	8013d2c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013d0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013d0e:	2b09      	cmp	r3, #9
 8013d10:	dc02      	bgt.n	8013d18 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013d12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013d14:	843b      	strh	r3, [r7, #32]
 8013d16:	e009      	b.n	8013d2c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013d18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013d1c:	2b09      	cmp	r3, #9
 8013d1e:	dc02      	bgt.n	8013d26 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013d20:	8bfb      	ldrh	r3, [r7, #30]
 8013d22:	843b      	strh	r3, [r7, #32]
 8013d24:	e002      	b.n	8013d2c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d2a:	e054      	b.n	8013dd6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013d2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013d30:	2b09      	cmp	r3, #9
 8013d32:	dd06      	ble.n	8013d42 <etharp_find_entry+0x236>
 8013d34:	4b2b      	ldr	r3, [pc, #172]	; (8013de4 <etharp_find_entry+0x2d8>)
 8013d36:	f240 127f 	movw	r2, #383	; 0x17f
 8013d3a:	492e      	ldr	r1, [pc, #184]	; (8013df4 <etharp_find_entry+0x2e8>)
 8013d3c:	482b      	ldr	r0, [pc, #172]	; (8013dec <etharp_find_entry+0x2e0>)
 8013d3e:	f00b fe5d 	bl	801f9fc <iprintf>
    etharp_free_entry(i);
 8013d42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7ff fe06 	bl	8013958 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013d4c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013d50:	2b09      	cmp	r3, #9
 8013d52:	dd06      	ble.n	8013d62 <etharp_find_entry+0x256>
 8013d54:	4b23      	ldr	r3, [pc, #140]	; (8013de4 <etharp_find_entry+0x2d8>)
 8013d56:	f240 1283 	movw	r2, #387	; 0x183
 8013d5a:	4926      	ldr	r1, [pc, #152]	; (8013df4 <etharp_find_entry+0x2e8>)
 8013d5c:	4823      	ldr	r0, [pc, #140]	; (8013dec <etharp_find_entry+0x2e0>)
 8013d5e:	f00b fe4d 	bl	801f9fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013d62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d66:	491e      	ldr	r1, [pc, #120]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013d68:	4613      	mov	r3, r2
 8013d6a:	005b      	lsls	r3, r3, #1
 8013d6c:	4413      	add	r3, r2
 8013d6e:	00db      	lsls	r3, r3, #3
 8013d70:	440b      	add	r3, r1
 8013d72:	3314      	adds	r3, #20
 8013d74:	781b      	ldrb	r3, [r3, #0]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d006      	beq.n	8013d88 <etharp_find_entry+0x27c>
 8013d7a:	4b1a      	ldr	r3, [pc, #104]	; (8013de4 <etharp_find_entry+0x2d8>)
 8013d7c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013d80:	491d      	ldr	r1, [pc, #116]	; (8013df8 <etharp_find_entry+0x2ec>)
 8013d82:	481a      	ldr	r0, [pc, #104]	; (8013dec <etharp_find_entry+0x2e0>)
 8013d84:	f00b fe3a 	bl	801f9fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d00b      	beq.n	8013da6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013d8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	6819      	ldr	r1, [r3, #0]
 8013d96:	4812      	ldr	r0, [pc, #72]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013d98:	4613      	mov	r3, r2
 8013d9a:	005b      	lsls	r3, r3, #1
 8013d9c:	4413      	add	r3, r2
 8013d9e:	00db      	lsls	r3, r3, #3
 8013da0:	4403      	add	r3, r0
 8013da2:	3304      	adds	r3, #4
 8013da4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013da6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013daa:	490d      	ldr	r1, [pc, #52]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013dac:	4613      	mov	r3, r2
 8013dae:	005b      	lsls	r3, r3, #1
 8013db0:	4413      	add	r3, r2
 8013db2:	00db      	lsls	r3, r3, #3
 8013db4:	440b      	add	r3, r1
 8013db6:	3312      	adds	r3, #18
 8013db8:	2200      	movs	r2, #0
 8013dba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013dbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dc0:	4907      	ldr	r1, [pc, #28]	; (8013de0 <etharp_find_entry+0x2d4>)
 8013dc2:	4613      	mov	r3, r2
 8013dc4:	005b      	lsls	r3, r3, #1
 8013dc6:	4413      	add	r3, r2
 8013dc8:	00db      	lsls	r3, r3, #3
 8013dca:	440b      	add	r3, r1
 8013dcc:	3308      	adds	r3, #8
 8013dce:	687a      	ldr	r2, [r7, #4]
 8013dd0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013dd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3728      	adds	r7, #40	; 0x28
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}
 8013dde:	bf00      	nop
 8013de0:	24008d5c 	.word	0x24008d5c
 8013de4:	08021258 	.word	0x08021258
 8013de8:	080212d4 	.word	0x080212d4
 8013dec:	08021314 	.word	0x08021314
 8013df0:	0802133c 	.word	0x0802133c
 8013df4:	08021354 	.word	0x08021354
 8013df8:	08021368 	.word	0x08021368

08013dfc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b088      	sub	sp, #32
 8013e00:	af02      	add	r7, sp, #8
 8013e02:	60f8      	str	r0, [r7, #12]
 8013e04:	60b9      	str	r1, [r7, #8]
 8013e06:	607a      	str	r2, [r7, #4]
 8013e08:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013e10:	2b06      	cmp	r3, #6
 8013e12:	d006      	beq.n	8013e22 <etharp_update_arp_entry+0x26>
 8013e14:	4b48      	ldr	r3, [pc, #288]	; (8013f38 <etharp_update_arp_entry+0x13c>)
 8013e16:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013e1a:	4948      	ldr	r1, [pc, #288]	; (8013f3c <etharp_update_arp_entry+0x140>)
 8013e1c:	4848      	ldr	r0, [pc, #288]	; (8013f40 <etharp_update_arp_entry+0x144>)
 8013e1e:	f00b fded 	bl	801f9fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d012      	beq.n	8013e4e <etharp_update_arp_entry+0x52>
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d00e      	beq.n	8013e4e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	68f9      	ldr	r1, [r7, #12]
 8013e36:	4618      	mov	r0, r3
 8013e38:	f001 face 	bl	80153d8 <ip4_addr_isbroadcast_u32>
 8013e3c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d105      	bne.n	8013e4e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013e4a:	2be0      	cmp	r3, #224	; 0xe0
 8013e4c:	d102      	bne.n	8013e54 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013e4e:	f06f 030f 	mvn.w	r3, #15
 8013e52:	e06c      	b.n	8013f2e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013e54:	78fb      	ldrb	r3, [r7, #3]
 8013e56:	68fa      	ldr	r2, [r7, #12]
 8013e58:	4619      	mov	r1, r3
 8013e5a:	68b8      	ldr	r0, [r7, #8]
 8013e5c:	f7ff fe56 	bl	8013b0c <etharp_find_entry>
 8013e60:	4603      	mov	r3, r0
 8013e62:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013e64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	da02      	bge.n	8013e72 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013e6c:	8afb      	ldrh	r3, [r7, #22]
 8013e6e:	b25b      	sxtb	r3, r3
 8013e70:	e05d      	b.n	8013f2e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013e72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013e76:	4933      	ldr	r1, [pc, #204]	; (8013f44 <etharp_update_arp_entry+0x148>)
 8013e78:	4613      	mov	r3, r2
 8013e7a:	005b      	lsls	r3, r3, #1
 8013e7c:	4413      	add	r3, r2
 8013e7e:	00db      	lsls	r3, r3, #3
 8013e80:	440b      	add	r3, r1
 8013e82:	3314      	adds	r3, #20
 8013e84:	2202      	movs	r2, #2
 8013e86:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013e88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013e8c:	492d      	ldr	r1, [pc, #180]	; (8013f44 <etharp_update_arp_entry+0x148>)
 8013e8e:	4613      	mov	r3, r2
 8013e90:	005b      	lsls	r3, r3, #1
 8013e92:	4413      	add	r3, r2
 8013e94:	00db      	lsls	r3, r3, #3
 8013e96:	440b      	add	r3, r1
 8013e98:	3308      	adds	r3, #8
 8013e9a:	68fa      	ldr	r2, [r7, #12]
 8013e9c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013e9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	005b      	lsls	r3, r3, #1
 8013ea6:	4413      	add	r3, r2
 8013ea8:	00db      	lsls	r3, r3, #3
 8013eaa:	3308      	adds	r3, #8
 8013eac:	4a25      	ldr	r2, [pc, #148]	; (8013f44 <etharp_update_arp_entry+0x148>)
 8013eae:	4413      	add	r3, r2
 8013eb0:	3304      	adds	r3, #4
 8013eb2:	2206      	movs	r2, #6
 8013eb4:	6879      	ldr	r1, [r7, #4]
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f00b f9a2 	bl	801f200 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013ebc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ec0:	4920      	ldr	r1, [pc, #128]	; (8013f44 <etharp_update_arp_entry+0x148>)
 8013ec2:	4613      	mov	r3, r2
 8013ec4:	005b      	lsls	r3, r3, #1
 8013ec6:	4413      	add	r3, r2
 8013ec8:	00db      	lsls	r3, r3, #3
 8013eca:	440b      	add	r3, r1
 8013ecc:	3312      	adds	r3, #18
 8013ece:	2200      	movs	r2, #0
 8013ed0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013ed2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ed6:	491b      	ldr	r1, [pc, #108]	; (8013f44 <etharp_update_arp_entry+0x148>)
 8013ed8:	4613      	mov	r3, r2
 8013eda:	005b      	lsls	r3, r3, #1
 8013edc:	4413      	add	r3, r2
 8013ede:	00db      	lsls	r3, r3, #3
 8013ee0:	440b      	add	r3, r1
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d021      	beq.n	8013f2c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013ee8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013eec:	4915      	ldr	r1, [pc, #84]	; (8013f44 <etharp_update_arp_entry+0x148>)
 8013eee:	4613      	mov	r3, r2
 8013ef0:	005b      	lsls	r3, r3, #1
 8013ef2:	4413      	add	r3, r2
 8013ef4:	00db      	lsls	r3, r3, #3
 8013ef6:	440b      	add	r3, r1
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013efc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f00:	4910      	ldr	r1, [pc, #64]	; (8013f44 <etharp_update_arp_entry+0x148>)
 8013f02:	4613      	mov	r3, r2
 8013f04:	005b      	lsls	r3, r3, #1
 8013f06:	4413      	add	r3, r2
 8013f08:	00db      	lsls	r3, r3, #3
 8013f0a:	440b      	add	r3, r1
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013f16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013f1a:	9300      	str	r3, [sp, #0]
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6939      	ldr	r1, [r7, #16]
 8013f20:	68f8      	ldr	r0, [r7, #12]
 8013f22:	f000 fcf3 	bl	801490c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013f26:	6938      	ldr	r0, [r7, #16]
 8013f28:	f003 fcbc 	bl	80178a4 <pbuf_free>
  }
  return ERR_OK;
 8013f2c:	2300      	movs	r3, #0
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3718      	adds	r7, #24
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
 8013f36:	bf00      	nop
 8013f38:	08021258 	.word	0x08021258
 8013f3c:	08021394 	.word	0x08021394
 8013f40:	08021314 	.word	0x08021314
 8013f44:	24008d5c 	.word	0x24008d5c

08013f48 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b084      	sub	sp, #16
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f50:	2300      	movs	r3, #0
 8013f52:	60fb      	str	r3, [r7, #12]
 8013f54:	e01e      	b.n	8013f94 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013f56:	4913      	ldr	r1, [pc, #76]	; (8013fa4 <etharp_cleanup_netif+0x5c>)
 8013f58:	68fa      	ldr	r2, [r7, #12]
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	005b      	lsls	r3, r3, #1
 8013f5e:	4413      	add	r3, r2
 8013f60:	00db      	lsls	r3, r3, #3
 8013f62:	440b      	add	r3, r1
 8013f64:	3314      	adds	r3, #20
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013f6a:	7afb      	ldrb	r3, [r7, #11]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d00e      	beq.n	8013f8e <etharp_cleanup_netif+0x46>
 8013f70:	490c      	ldr	r1, [pc, #48]	; (8013fa4 <etharp_cleanup_netif+0x5c>)
 8013f72:	68fa      	ldr	r2, [r7, #12]
 8013f74:	4613      	mov	r3, r2
 8013f76:	005b      	lsls	r3, r3, #1
 8013f78:	4413      	add	r3, r2
 8013f7a:	00db      	lsls	r3, r3, #3
 8013f7c:	440b      	add	r3, r1
 8013f7e:	3308      	adds	r3, #8
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	687a      	ldr	r2, [r7, #4]
 8013f84:	429a      	cmp	r2, r3
 8013f86:	d102      	bne.n	8013f8e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013f88:	68f8      	ldr	r0, [r7, #12]
 8013f8a:	f7ff fce5 	bl	8013958 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	3301      	adds	r3, #1
 8013f92:	60fb      	str	r3, [r7, #12]
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	2b09      	cmp	r3, #9
 8013f98:	dddd      	ble.n	8013f56 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013f9a:	bf00      	nop
 8013f9c:	bf00      	nop
 8013f9e:	3710      	adds	r7, #16
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd80      	pop	{r7, pc}
 8013fa4:	24008d5c 	.word	0x24008d5c

08013fa8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013fa8:	b5b0      	push	{r4, r5, r7, lr}
 8013faa:	b08a      	sub	sp, #40	; 0x28
 8013fac:	af04      	add	r7, sp, #16
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d107      	bne.n	8013fc8 <etharp_input+0x20>
 8013fb8:	4b3d      	ldr	r3, [pc, #244]	; (80140b0 <etharp_input+0x108>)
 8013fba:	f240 228a 	movw	r2, #650	; 0x28a
 8013fbe:	493d      	ldr	r1, [pc, #244]	; (80140b4 <etharp_input+0x10c>)
 8013fc0:	483d      	ldr	r0, [pc, #244]	; (80140b8 <etharp_input+0x110>)
 8013fc2:	f00b fd1b 	bl	801f9fc <iprintf>
 8013fc6:	e06f      	b.n	80140a8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	685b      	ldr	r3, [r3, #4]
 8013fcc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	881b      	ldrh	r3, [r3, #0]
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013fd8:	d10c      	bne.n	8013ff4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013fda:	693b      	ldr	r3, [r7, #16]
 8013fdc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013fde:	2b06      	cmp	r3, #6
 8013fe0:	d108      	bne.n	8013ff4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013fe2:	693b      	ldr	r3, [r7, #16]
 8013fe4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013fe6:	2b04      	cmp	r3, #4
 8013fe8:	d104      	bne.n	8013ff4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013fea:	693b      	ldr	r3, [r7, #16]
 8013fec:	885b      	ldrh	r3, [r3, #2]
 8013fee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013ff0:	2b08      	cmp	r3, #8
 8013ff2:	d003      	beq.n	8013ffc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013ff4:	6878      	ldr	r0, [r7, #4]
 8013ff6:	f003 fc55 	bl	80178a4 <pbuf_free>
    return;
 8013ffa:	e055      	b.n	80140a8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	330e      	adds	r3, #14
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	3318      	adds	r3, #24
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	3304      	adds	r3, #4
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d102      	bne.n	801401c <etharp_input+0x74>
    for_us = 0;
 8014016:	2300      	movs	r3, #0
 8014018:	75fb      	strb	r3, [r7, #23]
 801401a:	e009      	b.n	8014030 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801401c:	68ba      	ldr	r2, [r7, #8]
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	3304      	adds	r3, #4
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	429a      	cmp	r2, r3
 8014026:	bf0c      	ite	eq
 8014028:	2301      	moveq	r3, #1
 801402a:	2300      	movne	r3, #0
 801402c:	b2db      	uxtb	r3, r3
 801402e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	f103 0208 	add.w	r2, r3, #8
 8014036:	7dfb      	ldrb	r3, [r7, #23]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d001      	beq.n	8014040 <etharp_input+0x98>
 801403c:	2301      	movs	r3, #1
 801403e:	e000      	b.n	8014042 <etharp_input+0x9a>
 8014040:	2302      	movs	r3, #2
 8014042:	f107 010c 	add.w	r1, r7, #12
 8014046:	6838      	ldr	r0, [r7, #0]
 8014048:	f7ff fed8 	bl	8013dfc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801404c:	693b      	ldr	r3, [r7, #16]
 801404e:	88db      	ldrh	r3, [r3, #6]
 8014050:	b29b      	uxth	r3, r3
 8014052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014056:	d003      	beq.n	8014060 <etharp_input+0xb8>
 8014058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801405c:	d01e      	beq.n	801409c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801405e:	e020      	b.n	80140a2 <etharp_input+0xfa>
      if (for_us) {
 8014060:	7dfb      	ldrb	r3, [r7, #23]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d01c      	beq.n	80140a0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801407c:	693a      	ldr	r2, [r7, #16]
 801407e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014080:	2102      	movs	r1, #2
 8014082:	9103      	str	r1, [sp, #12]
 8014084:	f107 010c 	add.w	r1, r7, #12
 8014088:	9102      	str	r1, [sp, #8]
 801408a:	9201      	str	r2, [sp, #4]
 801408c:	9300      	str	r3, [sp, #0]
 801408e:	462b      	mov	r3, r5
 8014090:	4622      	mov	r2, r4
 8014092:	4601      	mov	r1, r0
 8014094:	6838      	ldr	r0, [r7, #0]
 8014096:	f000 faeb 	bl	8014670 <etharp_raw>
      break;
 801409a:	e001      	b.n	80140a0 <etharp_input+0xf8>
      break;
 801409c:	bf00      	nop
 801409e:	e000      	b.n	80140a2 <etharp_input+0xfa>
      break;
 80140a0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f003 fbfe 	bl	80178a4 <pbuf_free>
}
 80140a8:	3718      	adds	r7, #24
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bdb0      	pop	{r4, r5, r7, pc}
 80140ae:	bf00      	nop
 80140b0:	08021258 	.word	0x08021258
 80140b4:	080213ec 	.word	0x080213ec
 80140b8:	08021314 	.word	0x08021314

080140bc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b086      	sub	sp, #24
 80140c0:	af02      	add	r7, sp, #8
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	4613      	mov	r3, r2
 80140c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80140ca:	79fa      	ldrb	r2, [r7, #7]
 80140cc:	4944      	ldr	r1, [pc, #272]	; (80141e0 <etharp_output_to_arp_index+0x124>)
 80140ce:	4613      	mov	r3, r2
 80140d0:	005b      	lsls	r3, r3, #1
 80140d2:	4413      	add	r3, r2
 80140d4:	00db      	lsls	r3, r3, #3
 80140d6:	440b      	add	r3, r1
 80140d8:	3314      	adds	r3, #20
 80140da:	781b      	ldrb	r3, [r3, #0]
 80140dc:	2b01      	cmp	r3, #1
 80140de:	d806      	bhi.n	80140ee <etharp_output_to_arp_index+0x32>
 80140e0:	4b40      	ldr	r3, [pc, #256]	; (80141e4 <etharp_output_to_arp_index+0x128>)
 80140e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80140e6:	4940      	ldr	r1, [pc, #256]	; (80141e8 <etharp_output_to_arp_index+0x12c>)
 80140e8:	4840      	ldr	r0, [pc, #256]	; (80141ec <etharp_output_to_arp_index+0x130>)
 80140ea:	f00b fc87 	bl	801f9fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80140ee:	79fa      	ldrb	r2, [r7, #7]
 80140f0:	493b      	ldr	r1, [pc, #236]	; (80141e0 <etharp_output_to_arp_index+0x124>)
 80140f2:	4613      	mov	r3, r2
 80140f4:	005b      	lsls	r3, r3, #1
 80140f6:	4413      	add	r3, r2
 80140f8:	00db      	lsls	r3, r3, #3
 80140fa:	440b      	add	r3, r1
 80140fc:	3314      	adds	r3, #20
 80140fe:	781b      	ldrb	r3, [r3, #0]
 8014100:	2b02      	cmp	r3, #2
 8014102:	d153      	bne.n	80141ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014104:	79fa      	ldrb	r2, [r7, #7]
 8014106:	4936      	ldr	r1, [pc, #216]	; (80141e0 <etharp_output_to_arp_index+0x124>)
 8014108:	4613      	mov	r3, r2
 801410a:	005b      	lsls	r3, r3, #1
 801410c:	4413      	add	r3, r2
 801410e:	00db      	lsls	r3, r3, #3
 8014110:	440b      	add	r3, r1
 8014112:	3312      	adds	r3, #18
 8014114:	881b      	ldrh	r3, [r3, #0]
 8014116:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801411a:	d919      	bls.n	8014150 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801411c:	79fa      	ldrb	r2, [r7, #7]
 801411e:	4613      	mov	r3, r2
 8014120:	005b      	lsls	r3, r3, #1
 8014122:	4413      	add	r3, r2
 8014124:	00db      	lsls	r3, r3, #3
 8014126:	4a2e      	ldr	r2, [pc, #184]	; (80141e0 <etharp_output_to_arp_index+0x124>)
 8014128:	4413      	add	r3, r2
 801412a:	3304      	adds	r3, #4
 801412c:	4619      	mov	r1, r3
 801412e:	68f8      	ldr	r0, [r7, #12]
 8014130:	f000 fb4c 	bl	80147cc <etharp_request>
 8014134:	4603      	mov	r3, r0
 8014136:	2b00      	cmp	r3, #0
 8014138:	d138      	bne.n	80141ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801413a:	79fa      	ldrb	r2, [r7, #7]
 801413c:	4928      	ldr	r1, [pc, #160]	; (80141e0 <etharp_output_to_arp_index+0x124>)
 801413e:	4613      	mov	r3, r2
 8014140:	005b      	lsls	r3, r3, #1
 8014142:	4413      	add	r3, r2
 8014144:	00db      	lsls	r3, r3, #3
 8014146:	440b      	add	r3, r1
 8014148:	3314      	adds	r3, #20
 801414a:	2203      	movs	r2, #3
 801414c:	701a      	strb	r2, [r3, #0]
 801414e:	e02d      	b.n	80141ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014150:	79fa      	ldrb	r2, [r7, #7]
 8014152:	4923      	ldr	r1, [pc, #140]	; (80141e0 <etharp_output_to_arp_index+0x124>)
 8014154:	4613      	mov	r3, r2
 8014156:	005b      	lsls	r3, r3, #1
 8014158:	4413      	add	r3, r2
 801415a:	00db      	lsls	r3, r3, #3
 801415c:	440b      	add	r3, r1
 801415e:	3312      	adds	r3, #18
 8014160:	881b      	ldrh	r3, [r3, #0]
 8014162:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014166:	d321      	bcc.n	80141ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014168:	79fa      	ldrb	r2, [r7, #7]
 801416a:	4613      	mov	r3, r2
 801416c:	005b      	lsls	r3, r3, #1
 801416e:	4413      	add	r3, r2
 8014170:	00db      	lsls	r3, r3, #3
 8014172:	4a1b      	ldr	r2, [pc, #108]	; (80141e0 <etharp_output_to_arp_index+0x124>)
 8014174:	4413      	add	r3, r2
 8014176:	1d19      	adds	r1, r3, #4
 8014178:	79fa      	ldrb	r2, [r7, #7]
 801417a:	4613      	mov	r3, r2
 801417c:	005b      	lsls	r3, r3, #1
 801417e:	4413      	add	r3, r2
 8014180:	00db      	lsls	r3, r3, #3
 8014182:	3308      	adds	r3, #8
 8014184:	4a16      	ldr	r2, [pc, #88]	; (80141e0 <etharp_output_to_arp_index+0x124>)
 8014186:	4413      	add	r3, r2
 8014188:	3304      	adds	r3, #4
 801418a:	461a      	mov	r2, r3
 801418c:	68f8      	ldr	r0, [r7, #12]
 801418e:	f000 fafb 	bl	8014788 <etharp_request_dst>
 8014192:	4603      	mov	r3, r0
 8014194:	2b00      	cmp	r3, #0
 8014196:	d109      	bne.n	80141ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014198:	79fa      	ldrb	r2, [r7, #7]
 801419a:	4911      	ldr	r1, [pc, #68]	; (80141e0 <etharp_output_to_arp_index+0x124>)
 801419c:	4613      	mov	r3, r2
 801419e:	005b      	lsls	r3, r3, #1
 80141a0:	4413      	add	r3, r2
 80141a2:	00db      	lsls	r3, r3, #3
 80141a4:	440b      	add	r3, r1
 80141a6:	3314      	adds	r3, #20
 80141a8:	2203      	movs	r2, #3
 80141aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80141b2:	79fa      	ldrb	r2, [r7, #7]
 80141b4:	4613      	mov	r3, r2
 80141b6:	005b      	lsls	r3, r3, #1
 80141b8:	4413      	add	r3, r2
 80141ba:	00db      	lsls	r3, r3, #3
 80141bc:	3308      	adds	r3, #8
 80141be:	4a08      	ldr	r2, [pc, #32]	; (80141e0 <etharp_output_to_arp_index+0x124>)
 80141c0:	4413      	add	r3, r2
 80141c2:	3304      	adds	r3, #4
 80141c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80141c8:	9200      	str	r2, [sp, #0]
 80141ca:	460a      	mov	r2, r1
 80141cc:	68b9      	ldr	r1, [r7, #8]
 80141ce:	68f8      	ldr	r0, [r7, #12]
 80141d0:	f000 fb9c 	bl	801490c <ethernet_output>
 80141d4:	4603      	mov	r3, r0
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	3710      	adds	r7, #16
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	24008d5c 	.word	0x24008d5c
 80141e4:	08021258 	.word	0x08021258
 80141e8:	0802140c 	.word	0x0802140c
 80141ec:	08021314 	.word	0x08021314

080141f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b08a      	sub	sp, #40	; 0x28
 80141f4:	af02      	add	r7, sp, #8
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	60b9      	str	r1, [r7, #8]
 80141fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d106      	bne.n	8014214 <etharp_output+0x24>
 8014206:	4b73      	ldr	r3, [pc, #460]	; (80143d4 <etharp_output+0x1e4>)
 8014208:	f240 321e 	movw	r2, #798	; 0x31e
 801420c:	4972      	ldr	r1, [pc, #456]	; (80143d8 <etharp_output+0x1e8>)
 801420e:	4873      	ldr	r0, [pc, #460]	; (80143dc <etharp_output+0x1ec>)
 8014210:	f00b fbf4 	bl	801f9fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d106      	bne.n	8014228 <etharp_output+0x38>
 801421a:	4b6e      	ldr	r3, [pc, #440]	; (80143d4 <etharp_output+0x1e4>)
 801421c:	f240 321f 	movw	r2, #799	; 0x31f
 8014220:	496f      	ldr	r1, [pc, #444]	; (80143e0 <etharp_output+0x1f0>)
 8014222:	486e      	ldr	r0, [pc, #440]	; (80143dc <etharp_output+0x1ec>)
 8014224:	f00b fbea 	bl	801f9fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d106      	bne.n	801423c <etharp_output+0x4c>
 801422e:	4b69      	ldr	r3, [pc, #420]	; (80143d4 <etharp_output+0x1e4>)
 8014230:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014234:	496b      	ldr	r1, [pc, #428]	; (80143e4 <etharp_output+0x1f4>)
 8014236:	4869      	ldr	r0, [pc, #420]	; (80143dc <etharp_output+0x1ec>)
 8014238:	f00b fbe0 	bl	801f9fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	68f9      	ldr	r1, [r7, #12]
 8014242:	4618      	mov	r0, r3
 8014244:	f001 f8c8 	bl	80153d8 <ip4_addr_isbroadcast_u32>
 8014248:	4603      	mov	r3, r0
 801424a:	2b00      	cmp	r3, #0
 801424c:	d002      	beq.n	8014254 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801424e:	4b66      	ldr	r3, [pc, #408]	; (80143e8 <etharp_output+0x1f8>)
 8014250:	61fb      	str	r3, [r7, #28]
 8014252:	e0af      	b.n	80143b4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801425c:	2be0      	cmp	r3, #224	; 0xe0
 801425e:	d118      	bne.n	8014292 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014260:	2301      	movs	r3, #1
 8014262:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014264:	2300      	movs	r3, #0
 8014266:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014268:	235e      	movs	r3, #94	; 0x5e
 801426a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	3301      	adds	r3, #1
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014276:	b2db      	uxtb	r3, r3
 8014278:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	3302      	adds	r3, #2
 801427e:	781b      	ldrb	r3, [r3, #0]
 8014280:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	3303      	adds	r3, #3
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801428a:	f107 0310 	add.w	r3, r7, #16
 801428e:	61fb      	str	r3, [r7, #28]
 8014290:	e090      	b.n	80143b4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681a      	ldr	r2, [r3, #0]
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	3304      	adds	r3, #4
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	405a      	eors	r2, r3
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	3308      	adds	r3, #8
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	4013      	ands	r3, r2
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d012      	beq.n	80142d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80142b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80142b4:	4293      	cmp	r3, r2
 80142b6:	d00b      	beq.n	80142d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	330c      	adds	r3, #12
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d003      	beq.n	80142ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	330c      	adds	r3, #12
 80142c6:	61bb      	str	r3, [r7, #24]
 80142c8:	e002      	b.n	80142d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80142ca:	f06f 0303 	mvn.w	r3, #3
 80142ce:	e07d      	b.n	80143cc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80142d0:	4b46      	ldr	r3, [pc, #280]	; (80143ec <etharp_output+0x1fc>)
 80142d2:	781b      	ldrb	r3, [r3, #0]
 80142d4:	4619      	mov	r1, r3
 80142d6:	4a46      	ldr	r2, [pc, #280]	; (80143f0 <etharp_output+0x200>)
 80142d8:	460b      	mov	r3, r1
 80142da:	005b      	lsls	r3, r3, #1
 80142dc:	440b      	add	r3, r1
 80142de:	00db      	lsls	r3, r3, #3
 80142e0:	4413      	add	r3, r2
 80142e2:	3314      	adds	r3, #20
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	2b01      	cmp	r3, #1
 80142e8:	d925      	bls.n	8014336 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80142ea:	4b40      	ldr	r3, [pc, #256]	; (80143ec <etharp_output+0x1fc>)
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	4619      	mov	r1, r3
 80142f0:	4a3f      	ldr	r2, [pc, #252]	; (80143f0 <etharp_output+0x200>)
 80142f2:	460b      	mov	r3, r1
 80142f4:	005b      	lsls	r3, r3, #1
 80142f6:	440b      	add	r3, r1
 80142f8:	00db      	lsls	r3, r3, #3
 80142fa:	4413      	add	r3, r2
 80142fc:	3308      	adds	r3, #8
 80142fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014300:	68fa      	ldr	r2, [r7, #12]
 8014302:	429a      	cmp	r2, r3
 8014304:	d117      	bne.n	8014336 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014306:	69bb      	ldr	r3, [r7, #24]
 8014308:	681a      	ldr	r2, [r3, #0]
 801430a:	4b38      	ldr	r3, [pc, #224]	; (80143ec <etharp_output+0x1fc>)
 801430c:	781b      	ldrb	r3, [r3, #0]
 801430e:	4618      	mov	r0, r3
 8014310:	4937      	ldr	r1, [pc, #220]	; (80143f0 <etharp_output+0x200>)
 8014312:	4603      	mov	r3, r0
 8014314:	005b      	lsls	r3, r3, #1
 8014316:	4403      	add	r3, r0
 8014318:	00db      	lsls	r3, r3, #3
 801431a:	440b      	add	r3, r1
 801431c:	3304      	adds	r3, #4
 801431e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014320:	429a      	cmp	r2, r3
 8014322:	d108      	bne.n	8014336 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014324:	4b31      	ldr	r3, [pc, #196]	; (80143ec <etharp_output+0x1fc>)
 8014326:	781b      	ldrb	r3, [r3, #0]
 8014328:	461a      	mov	r2, r3
 801432a:	68b9      	ldr	r1, [r7, #8]
 801432c:	68f8      	ldr	r0, [r7, #12]
 801432e:	f7ff fec5 	bl	80140bc <etharp_output_to_arp_index>
 8014332:	4603      	mov	r3, r0
 8014334:	e04a      	b.n	80143cc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014336:	2300      	movs	r3, #0
 8014338:	75fb      	strb	r3, [r7, #23]
 801433a:	e031      	b.n	80143a0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801433c:	7dfa      	ldrb	r2, [r7, #23]
 801433e:	492c      	ldr	r1, [pc, #176]	; (80143f0 <etharp_output+0x200>)
 8014340:	4613      	mov	r3, r2
 8014342:	005b      	lsls	r3, r3, #1
 8014344:	4413      	add	r3, r2
 8014346:	00db      	lsls	r3, r3, #3
 8014348:	440b      	add	r3, r1
 801434a:	3314      	adds	r3, #20
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	2b01      	cmp	r3, #1
 8014350:	d923      	bls.n	801439a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014352:	7dfa      	ldrb	r2, [r7, #23]
 8014354:	4926      	ldr	r1, [pc, #152]	; (80143f0 <etharp_output+0x200>)
 8014356:	4613      	mov	r3, r2
 8014358:	005b      	lsls	r3, r3, #1
 801435a:	4413      	add	r3, r2
 801435c:	00db      	lsls	r3, r3, #3
 801435e:	440b      	add	r3, r1
 8014360:	3308      	adds	r3, #8
 8014362:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014364:	68fa      	ldr	r2, [r7, #12]
 8014366:	429a      	cmp	r2, r3
 8014368:	d117      	bne.n	801439a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801436a:	69bb      	ldr	r3, [r7, #24]
 801436c:	6819      	ldr	r1, [r3, #0]
 801436e:	7dfa      	ldrb	r2, [r7, #23]
 8014370:	481f      	ldr	r0, [pc, #124]	; (80143f0 <etharp_output+0x200>)
 8014372:	4613      	mov	r3, r2
 8014374:	005b      	lsls	r3, r3, #1
 8014376:	4413      	add	r3, r2
 8014378:	00db      	lsls	r3, r3, #3
 801437a:	4403      	add	r3, r0
 801437c:	3304      	adds	r3, #4
 801437e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014380:	4299      	cmp	r1, r3
 8014382:	d10a      	bne.n	801439a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014384:	4a19      	ldr	r2, [pc, #100]	; (80143ec <etharp_output+0x1fc>)
 8014386:	7dfb      	ldrb	r3, [r7, #23]
 8014388:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801438a:	7dfb      	ldrb	r3, [r7, #23]
 801438c:	461a      	mov	r2, r3
 801438e:	68b9      	ldr	r1, [r7, #8]
 8014390:	68f8      	ldr	r0, [r7, #12]
 8014392:	f7ff fe93 	bl	80140bc <etharp_output_to_arp_index>
 8014396:	4603      	mov	r3, r0
 8014398:	e018      	b.n	80143cc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801439a:	7dfb      	ldrb	r3, [r7, #23]
 801439c:	3301      	adds	r3, #1
 801439e:	75fb      	strb	r3, [r7, #23]
 80143a0:	7dfb      	ldrb	r3, [r7, #23]
 80143a2:	2b09      	cmp	r3, #9
 80143a4:	d9ca      	bls.n	801433c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80143a6:	68ba      	ldr	r2, [r7, #8]
 80143a8:	69b9      	ldr	r1, [r7, #24]
 80143aa:	68f8      	ldr	r0, [r7, #12]
 80143ac:	f000 f822 	bl	80143f4 <etharp_query>
 80143b0:	4603      	mov	r3, r0
 80143b2:	e00b      	b.n	80143cc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80143ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80143be:	9300      	str	r3, [sp, #0]
 80143c0:	69fb      	ldr	r3, [r7, #28]
 80143c2:	68b9      	ldr	r1, [r7, #8]
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	f000 faa1 	bl	801490c <ethernet_output>
 80143ca:	4603      	mov	r3, r0
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	3720      	adds	r7, #32
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}
 80143d4:	08021258 	.word	0x08021258
 80143d8:	080213ec 	.word	0x080213ec
 80143dc:	08021314 	.word	0x08021314
 80143e0:	0802143c 	.word	0x0802143c
 80143e4:	080213dc 	.word	0x080213dc
 80143e8:	08024308 	.word	0x08024308
 80143ec:	24008e4c 	.word	0x24008e4c
 80143f0:	24008d5c 	.word	0x24008d5c

080143f4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b08c      	sub	sp, #48	; 0x30
 80143f8:	af02      	add	r7, sp, #8
 80143fa:	60f8      	str	r0, [r7, #12]
 80143fc:	60b9      	str	r1, [r7, #8]
 80143fe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	3326      	adds	r3, #38	; 0x26
 8014404:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014406:	23ff      	movs	r3, #255	; 0xff
 8014408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801440c:	2300      	movs	r3, #0
 801440e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	68f9      	ldr	r1, [r7, #12]
 8014416:	4618      	mov	r0, r3
 8014418:	f000 ffde 	bl	80153d8 <ip4_addr_isbroadcast_u32>
 801441c:	4603      	mov	r3, r0
 801441e:	2b00      	cmp	r3, #0
 8014420:	d10c      	bne.n	801443c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801442a:	2be0      	cmp	r3, #224	; 0xe0
 801442c:	d006      	beq.n	801443c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d003      	beq.n	801443c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d102      	bne.n	8014442 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801443c:	f06f 030f 	mvn.w	r3, #15
 8014440:	e101      	b.n	8014646 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014442:	68fa      	ldr	r2, [r7, #12]
 8014444:	2101      	movs	r1, #1
 8014446:	68b8      	ldr	r0, [r7, #8]
 8014448:	f7ff fb60 	bl	8013b0c <etharp_find_entry>
 801444c:	4603      	mov	r3, r0
 801444e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014450:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014454:	2b00      	cmp	r3, #0
 8014456:	da02      	bge.n	801445e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014458:	8a7b      	ldrh	r3, [r7, #18]
 801445a:	b25b      	sxtb	r3, r3
 801445c:	e0f3      	b.n	8014646 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801445e:	8a7b      	ldrh	r3, [r7, #18]
 8014460:	2b7e      	cmp	r3, #126	; 0x7e
 8014462:	d906      	bls.n	8014472 <etharp_query+0x7e>
 8014464:	4b7a      	ldr	r3, [pc, #488]	; (8014650 <etharp_query+0x25c>)
 8014466:	f240 32c1 	movw	r2, #961	; 0x3c1
 801446a:	497a      	ldr	r1, [pc, #488]	; (8014654 <etharp_query+0x260>)
 801446c:	487a      	ldr	r0, [pc, #488]	; (8014658 <etharp_query+0x264>)
 801446e:	f00b fac5 	bl	801f9fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014472:	8a7b      	ldrh	r3, [r7, #18]
 8014474:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014476:	7c7a      	ldrb	r2, [r7, #17]
 8014478:	4978      	ldr	r1, [pc, #480]	; (801465c <etharp_query+0x268>)
 801447a:	4613      	mov	r3, r2
 801447c:	005b      	lsls	r3, r3, #1
 801447e:	4413      	add	r3, r2
 8014480:	00db      	lsls	r3, r3, #3
 8014482:	440b      	add	r3, r1
 8014484:	3314      	adds	r3, #20
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d115      	bne.n	80144b8 <etharp_query+0xc4>
    is_new_entry = 1;
 801448c:	2301      	movs	r3, #1
 801448e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014490:	7c7a      	ldrb	r2, [r7, #17]
 8014492:	4972      	ldr	r1, [pc, #456]	; (801465c <etharp_query+0x268>)
 8014494:	4613      	mov	r3, r2
 8014496:	005b      	lsls	r3, r3, #1
 8014498:	4413      	add	r3, r2
 801449a:	00db      	lsls	r3, r3, #3
 801449c:	440b      	add	r3, r1
 801449e:	3314      	adds	r3, #20
 80144a0:	2201      	movs	r2, #1
 80144a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80144a4:	7c7a      	ldrb	r2, [r7, #17]
 80144a6:	496d      	ldr	r1, [pc, #436]	; (801465c <etharp_query+0x268>)
 80144a8:	4613      	mov	r3, r2
 80144aa:	005b      	lsls	r3, r3, #1
 80144ac:	4413      	add	r3, r2
 80144ae:	00db      	lsls	r3, r3, #3
 80144b0:	440b      	add	r3, r1
 80144b2:	3308      	adds	r3, #8
 80144b4:	68fa      	ldr	r2, [r7, #12]
 80144b6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80144b8:	7c7a      	ldrb	r2, [r7, #17]
 80144ba:	4968      	ldr	r1, [pc, #416]	; (801465c <etharp_query+0x268>)
 80144bc:	4613      	mov	r3, r2
 80144be:	005b      	lsls	r3, r3, #1
 80144c0:	4413      	add	r3, r2
 80144c2:	00db      	lsls	r3, r3, #3
 80144c4:	440b      	add	r3, r1
 80144c6:	3314      	adds	r3, #20
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	2b01      	cmp	r3, #1
 80144cc:	d011      	beq.n	80144f2 <etharp_query+0xfe>
 80144ce:	7c7a      	ldrb	r2, [r7, #17]
 80144d0:	4962      	ldr	r1, [pc, #392]	; (801465c <etharp_query+0x268>)
 80144d2:	4613      	mov	r3, r2
 80144d4:	005b      	lsls	r3, r3, #1
 80144d6:	4413      	add	r3, r2
 80144d8:	00db      	lsls	r3, r3, #3
 80144da:	440b      	add	r3, r1
 80144dc:	3314      	adds	r3, #20
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	2b01      	cmp	r3, #1
 80144e2:	d806      	bhi.n	80144f2 <etharp_query+0xfe>
 80144e4:	4b5a      	ldr	r3, [pc, #360]	; (8014650 <etharp_query+0x25c>)
 80144e6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80144ea:	495d      	ldr	r1, [pc, #372]	; (8014660 <etharp_query+0x26c>)
 80144ec:	485a      	ldr	r0, [pc, #360]	; (8014658 <etharp_query+0x264>)
 80144ee:	f00b fa85 	bl	801f9fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80144f2:	6a3b      	ldr	r3, [r7, #32]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d102      	bne.n	80144fe <etharp_query+0x10a>
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d10c      	bne.n	8014518 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80144fe:	68b9      	ldr	r1, [r7, #8]
 8014500:	68f8      	ldr	r0, [r7, #12]
 8014502:	f000 f963 	bl	80147cc <etharp_request>
 8014506:	4603      	mov	r3, r0
 8014508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d102      	bne.n	8014518 <etharp_query+0x124>
      return result;
 8014512:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014516:	e096      	b.n	8014646 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d106      	bne.n	801452c <etharp_query+0x138>
 801451e:	4b4c      	ldr	r3, [pc, #304]	; (8014650 <etharp_query+0x25c>)
 8014520:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014524:	494f      	ldr	r1, [pc, #316]	; (8014664 <etharp_query+0x270>)
 8014526:	484c      	ldr	r0, [pc, #304]	; (8014658 <etharp_query+0x264>)
 8014528:	f00b fa68 	bl	801f9fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801452c:	7c7a      	ldrb	r2, [r7, #17]
 801452e:	494b      	ldr	r1, [pc, #300]	; (801465c <etharp_query+0x268>)
 8014530:	4613      	mov	r3, r2
 8014532:	005b      	lsls	r3, r3, #1
 8014534:	4413      	add	r3, r2
 8014536:	00db      	lsls	r3, r3, #3
 8014538:	440b      	add	r3, r1
 801453a:	3314      	adds	r3, #20
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	2b01      	cmp	r3, #1
 8014540:	d917      	bls.n	8014572 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014542:	4a49      	ldr	r2, [pc, #292]	; (8014668 <etharp_query+0x274>)
 8014544:	7c7b      	ldrb	r3, [r7, #17]
 8014546:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014548:	7c7a      	ldrb	r2, [r7, #17]
 801454a:	4613      	mov	r3, r2
 801454c:	005b      	lsls	r3, r3, #1
 801454e:	4413      	add	r3, r2
 8014550:	00db      	lsls	r3, r3, #3
 8014552:	3308      	adds	r3, #8
 8014554:	4a41      	ldr	r2, [pc, #260]	; (801465c <etharp_query+0x268>)
 8014556:	4413      	add	r3, r2
 8014558:	3304      	adds	r3, #4
 801455a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801455e:	9200      	str	r2, [sp, #0]
 8014560:	697a      	ldr	r2, [r7, #20]
 8014562:	6879      	ldr	r1, [r7, #4]
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f000 f9d1 	bl	801490c <ethernet_output>
 801456a:	4603      	mov	r3, r0
 801456c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014570:	e067      	b.n	8014642 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014572:	7c7a      	ldrb	r2, [r7, #17]
 8014574:	4939      	ldr	r1, [pc, #228]	; (801465c <etharp_query+0x268>)
 8014576:	4613      	mov	r3, r2
 8014578:	005b      	lsls	r3, r3, #1
 801457a:	4413      	add	r3, r2
 801457c:	00db      	lsls	r3, r3, #3
 801457e:	440b      	add	r3, r1
 8014580:	3314      	adds	r3, #20
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	2b01      	cmp	r3, #1
 8014586:	d15c      	bne.n	8014642 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014588:	2300      	movs	r3, #0
 801458a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014590:	e01c      	b.n	80145cc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014592:	69fb      	ldr	r3, [r7, #28]
 8014594:	895a      	ldrh	r2, [r3, #10]
 8014596:	69fb      	ldr	r3, [r7, #28]
 8014598:	891b      	ldrh	r3, [r3, #8]
 801459a:	429a      	cmp	r2, r3
 801459c:	d10a      	bne.n	80145b4 <etharp_query+0x1c0>
 801459e:	69fb      	ldr	r3, [r7, #28]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d006      	beq.n	80145b4 <etharp_query+0x1c0>
 80145a6:	4b2a      	ldr	r3, [pc, #168]	; (8014650 <etharp_query+0x25c>)
 80145a8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80145ac:	492f      	ldr	r1, [pc, #188]	; (801466c <etharp_query+0x278>)
 80145ae:	482a      	ldr	r0, [pc, #168]	; (8014658 <etharp_query+0x264>)
 80145b0:	f00b fa24 	bl	801f9fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80145b4:	69fb      	ldr	r3, [r7, #28]
 80145b6:	7b1b      	ldrb	r3, [r3, #12]
 80145b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d002      	beq.n	80145c6 <etharp_query+0x1d2>
        copy_needed = 1;
 80145c0:	2301      	movs	r3, #1
 80145c2:	61bb      	str	r3, [r7, #24]
        break;
 80145c4:	e005      	b.n	80145d2 <etharp_query+0x1de>
      }
      p = p->next;
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80145cc:	69fb      	ldr	r3, [r7, #28]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d1df      	bne.n	8014592 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d007      	beq.n	80145e8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80145d8:	687a      	ldr	r2, [r7, #4]
 80145da:	f44f 7120 	mov.w	r1, #640	; 0x280
 80145de:	200e      	movs	r0, #14
 80145e0:	f003 fbc8 	bl	8017d74 <pbuf_clone>
 80145e4:	61f8      	str	r0, [r7, #28]
 80145e6:	e004      	b.n	80145f2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80145ec:	69f8      	ldr	r0, [r7, #28]
 80145ee:	f003 f9ff 	bl	80179f0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80145f2:	69fb      	ldr	r3, [r7, #28]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d021      	beq.n	801463c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80145f8:	7c7a      	ldrb	r2, [r7, #17]
 80145fa:	4918      	ldr	r1, [pc, #96]	; (801465c <etharp_query+0x268>)
 80145fc:	4613      	mov	r3, r2
 80145fe:	005b      	lsls	r3, r3, #1
 8014600:	4413      	add	r3, r2
 8014602:	00db      	lsls	r3, r3, #3
 8014604:	440b      	add	r3, r1
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d00a      	beq.n	8014622 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801460c:	7c7a      	ldrb	r2, [r7, #17]
 801460e:	4913      	ldr	r1, [pc, #76]	; (801465c <etharp_query+0x268>)
 8014610:	4613      	mov	r3, r2
 8014612:	005b      	lsls	r3, r3, #1
 8014614:	4413      	add	r3, r2
 8014616:	00db      	lsls	r3, r3, #3
 8014618:	440b      	add	r3, r1
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	4618      	mov	r0, r3
 801461e:	f003 f941 	bl	80178a4 <pbuf_free>
      }
      arp_table[i].q = p;
 8014622:	7c7a      	ldrb	r2, [r7, #17]
 8014624:	490d      	ldr	r1, [pc, #52]	; (801465c <etharp_query+0x268>)
 8014626:	4613      	mov	r3, r2
 8014628:	005b      	lsls	r3, r3, #1
 801462a:	4413      	add	r3, r2
 801462c:	00db      	lsls	r3, r3, #3
 801462e:	440b      	add	r3, r1
 8014630:	69fa      	ldr	r2, [r7, #28]
 8014632:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014634:	2300      	movs	r3, #0
 8014636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801463a:	e002      	b.n	8014642 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801463c:	23ff      	movs	r3, #255	; 0xff
 801463e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014642:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014646:	4618      	mov	r0, r3
 8014648:	3728      	adds	r7, #40	; 0x28
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
 801464e:	bf00      	nop
 8014650:	08021258 	.word	0x08021258
 8014654:	08021448 	.word	0x08021448
 8014658:	08021314 	.word	0x08021314
 801465c:	24008d5c 	.word	0x24008d5c
 8014660:	08021458 	.word	0x08021458
 8014664:	0802143c 	.word	0x0802143c
 8014668:	24008e4c 	.word	0x24008e4c
 801466c:	08021480 	.word	0x08021480

08014670 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b08a      	sub	sp, #40	; 0x28
 8014674:	af02      	add	r7, sp, #8
 8014676:	60f8      	str	r0, [r7, #12]
 8014678:	60b9      	str	r1, [r7, #8]
 801467a:	607a      	str	r2, [r7, #4]
 801467c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801467e:	2300      	movs	r3, #0
 8014680:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d106      	bne.n	8014696 <etharp_raw+0x26>
 8014688:	4b3a      	ldr	r3, [pc, #232]	; (8014774 <etharp_raw+0x104>)
 801468a:	f240 4257 	movw	r2, #1111	; 0x457
 801468e:	493a      	ldr	r1, [pc, #232]	; (8014778 <etharp_raw+0x108>)
 8014690:	483a      	ldr	r0, [pc, #232]	; (801477c <etharp_raw+0x10c>)
 8014692:	f00b f9b3 	bl	801f9fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014696:	f44f 7220 	mov.w	r2, #640	; 0x280
 801469a:	211c      	movs	r1, #28
 801469c:	200e      	movs	r0, #14
 801469e:	f002 fe1d 	bl	80172dc <pbuf_alloc>
 80146a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80146a4:	69bb      	ldr	r3, [r7, #24]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d102      	bne.n	80146b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80146aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146ae:	e05d      	b.n	801476c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80146b0:	69bb      	ldr	r3, [r7, #24]
 80146b2:	895b      	ldrh	r3, [r3, #10]
 80146b4:	2b1b      	cmp	r3, #27
 80146b6:	d806      	bhi.n	80146c6 <etharp_raw+0x56>
 80146b8:	4b2e      	ldr	r3, [pc, #184]	; (8014774 <etharp_raw+0x104>)
 80146ba:	f240 4262 	movw	r2, #1122	; 0x462
 80146be:	4930      	ldr	r1, [pc, #192]	; (8014780 <etharp_raw+0x110>)
 80146c0:	482e      	ldr	r0, [pc, #184]	; (801477c <etharp_raw+0x10c>)
 80146c2:	f00b f99b 	bl	801f9fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80146c6:	69bb      	ldr	r3, [r7, #24]
 80146c8:	685b      	ldr	r3, [r3, #4]
 80146ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80146cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80146ce:	4618      	mov	r0, r3
 80146d0:	f7ff f914 	bl	80138fc <lwip_htons>
 80146d4:	4603      	mov	r3, r0
 80146d6:	461a      	mov	r2, r3
 80146d8:	697b      	ldr	r3, [r7, #20]
 80146da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80146e2:	2b06      	cmp	r3, #6
 80146e4:	d006      	beq.n	80146f4 <etharp_raw+0x84>
 80146e6:	4b23      	ldr	r3, [pc, #140]	; (8014774 <etharp_raw+0x104>)
 80146e8:	f240 4269 	movw	r2, #1129	; 0x469
 80146ec:	4925      	ldr	r1, [pc, #148]	; (8014784 <etharp_raw+0x114>)
 80146ee:	4823      	ldr	r0, [pc, #140]	; (801477c <etharp_raw+0x10c>)
 80146f0:	f00b f984 	bl	801f9fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80146f4:	697b      	ldr	r3, [r7, #20]
 80146f6:	3308      	adds	r3, #8
 80146f8:	2206      	movs	r2, #6
 80146fa:	6839      	ldr	r1, [r7, #0]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f00a fd7f 	bl	801f200 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	3312      	adds	r3, #18
 8014706:	2206      	movs	r2, #6
 8014708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801470a:	4618      	mov	r0, r3
 801470c:	f00a fd78 	bl	801f200 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014710:	697b      	ldr	r3, [r7, #20]
 8014712:	330e      	adds	r3, #14
 8014714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014716:	6812      	ldr	r2, [r2, #0]
 8014718:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801471a:	697b      	ldr	r3, [r7, #20]
 801471c:	3318      	adds	r3, #24
 801471e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014720:	6812      	ldr	r2, [r2, #0]
 8014722:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	2200      	movs	r2, #0
 8014728:	701a      	strb	r2, [r3, #0]
 801472a:	2200      	movs	r2, #0
 801472c:	f042 0201 	orr.w	r2, r2, #1
 8014730:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	2200      	movs	r2, #0
 8014736:	f042 0208 	orr.w	r2, r2, #8
 801473a:	709a      	strb	r2, [r3, #2]
 801473c:	2200      	movs	r2, #0
 801473e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	2206      	movs	r2, #6
 8014744:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	2204      	movs	r2, #4
 801474a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801474c:	f640 0306 	movw	r3, #2054	; 0x806
 8014750:	9300      	str	r3, [sp, #0]
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	68ba      	ldr	r2, [r7, #8]
 8014756:	69b9      	ldr	r1, [r7, #24]
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f000 f8d7 	bl	801490c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801475e:	69b8      	ldr	r0, [r7, #24]
 8014760:	f003 f8a0 	bl	80178a4 <pbuf_free>
  p = NULL;
 8014764:	2300      	movs	r3, #0
 8014766:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014768:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801476c:	4618      	mov	r0, r3
 801476e:	3720      	adds	r7, #32
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}
 8014774:	08021258 	.word	0x08021258
 8014778:	080213ec 	.word	0x080213ec
 801477c:	08021314 	.word	0x08021314
 8014780:	0802149c 	.word	0x0802149c
 8014784:	080214d0 	.word	0x080214d0

08014788 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b088      	sub	sp, #32
 801478c:	af04      	add	r7, sp, #16
 801478e:	60f8      	str	r0, [r7, #12]
 8014790:	60b9      	str	r1, [r7, #8]
 8014792:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80147a4:	2201      	movs	r2, #1
 80147a6:	9203      	str	r2, [sp, #12]
 80147a8:	68ba      	ldr	r2, [r7, #8]
 80147aa:	9202      	str	r2, [sp, #8]
 80147ac:	4a06      	ldr	r2, [pc, #24]	; (80147c8 <etharp_request_dst+0x40>)
 80147ae:	9201      	str	r2, [sp, #4]
 80147b0:	9300      	str	r3, [sp, #0]
 80147b2:	4603      	mov	r3, r0
 80147b4:	687a      	ldr	r2, [r7, #4]
 80147b6:	68f8      	ldr	r0, [r7, #12]
 80147b8:	f7ff ff5a 	bl	8014670 <etharp_raw>
 80147bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3710      	adds	r7, #16
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
 80147c6:	bf00      	nop
 80147c8:	08024310 	.word	0x08024310

080147cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80147d6:	4a05      	ldr	r2, [pc, #20]	; (80147ec <etharp_request+0x20>)
 80147d8:	6839      	ldr	r1, [r7, #0]
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f7ff ffd4 	bl	8014788 <etharp_request_dst>
 80147e0:	4603      	mov	r3, r0
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	3708      	adds	r7, #8
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}
 80147ea:	bf00      	nop
 80147ec:	08024308 	.word	0x08024308

080147f0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b086      	sub	sp, #24
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80147fa:	230e      	movs	r3, #14
 80147fc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	895b      	ldrh	r3, [r3, #10]
 8014802:	2b0e      	cmp	r3, #14
 8014804:	d96e      	bls.n	80148e4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	7bdb      	ldrb	r3, [r3, #15]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d106      	bne.n	801481c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014814:	3301      	adds	r3, #1
 8014816:	b2da      	uxtb	r2, r3
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014822:	693b      	ldr	r3, [r7, #16]
 8014824:	7b1a      	ldrb	r2, [r3, #12]
 8014826:	7b5b      	ldrb	r3, [r3, #13]
 8014828:	021b      	lsls	r3, r3, #8
 801482a:	4313      	orrs	r3, r2
 801482c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	f003 0301 	and.w	r3, r3, #1
 8014836:	2b00      	cmp	r3, #0
 8014838:	d023      	beq.n	8014882 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801483a:	693b      	ldr	r3, [r7, #16]
 801483c:	781b      	ldrb	r3, [r3, #0]
 801483e:	2b01      	cmp	r3, #1
 8014840:	d10f      	bne.n	8014862 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014842:	693b      	ldr	r3, [r7, #16]
 8014844:	785b      	ldrb	r3, [r3, #1]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d11b      	bne.n	8014882 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801484e:	2b5e      	cmp	r3, #94	; 0x5e
 8014850:	d117      	bne.n	8014882 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	7b5b      	ldrb	r3, [r3, #13]
 8014856:	f043 0310 	orr.w	r3, r3, #16
 801485a:	b2da      	uxtb	r2, r3
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	735a      	strb	r2, [r3, #13]
 8014860:	e00f      	b.n	8014882 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	2206      	movs	r2, #6
 8014866:	4928      	ldr	r1, [pc, #160]	; (8014908 <ethernet_input+0x118>)
 8014868:	4618      	mov	r0, r3
 801486a:	f00a fcb9 	bl	801f1e0 <memcmp>
 801486e:	4603      	mov	r3, r0
 8014870:	2b00      	cmp	r3, #0
 8014872:	d106      	bne.n	8014882 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	7b5b      	ldrb	r3, [r3, #13]
 8014878:	f043 0308 	orr.w	r3, r3, #8
 801487c:	b2da      	uxtb	r2, r3
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014882:	89fb      	ldrh	r3, [r7, #14]
 8014884:	2b08      	cmp	r3, #8
 8014886:	d003      	beq.n	8014890 <ethernet_input+0xa0>
 8014888:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801488c:	d014      	beq.n	80148b8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801488e:	e032      	b.n	80148f6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014896:	f003 0308 	and.w	r3, r3, #8
 801489a:	2b00      	cmp	r3, #0
 801489c:	d024      	beq.n	80148e8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801489e:	8afb      	ldrh	r3, [r7, #22]
 80148a0:	4619      	mov	r1, r3
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f002 ff78 	bl	8017798 <pbuf_remove_header>
 80148a8:	4603      	mov	r3, r0
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d11e      	bne.n	80148ec <ethernet_input+0xfc>
        ip4_input(p, netif);
 80148ae:	6839      	ldr	r1, [r7, #0]
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f000 fb95 	bl	8014fe0 <ip4_input>
      break;
 80148b6:	e013      	b.n	80148e0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80148be:	f003 0308 	and.w	r3, r3, #8
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d014      	beq.n	80148f0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80148c6:	8afb      	ldrh	r3, [r7, #22]
 80148c8:	4619      	mov	r1, r3
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f002 ff64 	bl	8017798 <pbuf_remove_header>
 80148d0:	4603      	mov	r3, r0
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d10e      	bne.n	80148f4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80148d6:	6839      	ldr	r1, [r7, #0]
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f7ff fb65 	bl	8013fa8 <etharp_input>
      break;
 80148de:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80148e0:	2300      	movs	r3, #0
 80148e2:	e00c      	b.n	80148fe <ethernet_input+0x10e>
    goto free_and_return;
 80148e4:	bf00      	nop
 80148e6:	e006      	b.n	80148f6 <ethernet_input+0x106>
        goto free_and_return;
 80148e8:	bf00      	nop
 80148ea:	e004      	b.n	80148f6 <ethernet_input+0x106>
        goto free_and_return;
 80148ec:	bf00      	nop
 80148ee:	e002      	b.n	80148f6 <ethernet_input+0x106>
        goto free_and_return;
 80148f0:	bf00      	nop
 80148f2:	e000      	b.n	80148f6 <ethernet_input+0x106>
        goto free_and_return;
 80148f4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f002 ffd4 	bl	80178a4 <pbuf_free>
  return ERR_OK;
 80148fc:	2300      	movs	r3, #0
}
 80148fe:	4618      	mov	r0, r3
 8014900:	3718      	adds	r7, #24
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}
 8014906:	bf00      	nop
 8014908:	08024308 	.word	0x08024308

0801490c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801490c:	b580      	push	{r7, lr}
 801490e:	b086      	sub	sp, #24
 8014910:	af00      	add	r7, sp, #0
 8014912:	60f8      	str	r0, [r7, #12]
 8014914:	60b9      	str	r1, [r7, #8]
 8014916:	607a      	str	r2, [r7, #4]
 8014918:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801491a:	8c3b      	ldrh	r3, [r7, #32]
 801491c:	4618      	mov	r0, r3
 801491e:	f7fe ffed 	bl	80138fc <lwip_htons>
 8014922:	4603      	mov	r3, r0
 8014924:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014926:	210e      	movs	r1, #14
 8014928:	68b8      	ldr	r0, [r7, #8]
 801492a:	f002 ff25 	bl	8017778 <pbuf_add_header>
 801492e:	4603      	mov	r3, r0
 8014930:	2b00      	cmp	r3, #0
 8014932:	d125      	bne.n	8014980 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	8afa      	ldrh	r2, [r7, #22]
 801493e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	2206      	movs	r2, #6
 8014944:	6839      	ldr	r1, [r7, #0]
 8014946:	4618      	mov	r0, r3
 8014948:	f00a fc5a 	bl	801f200 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801494c:	693b      	ldr	r3, [r7, #16]
 801494e:	3306      	adds	r3, #6
 8014950:	2206      	movs	r2, #6
 8014952:	6879      	ldr	r1, [r7, #4]
 8014954:	4618      	mov	r0, r3
 8014956:	f00a fc53 	bl	801f200 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014960:	2b06      	cmp	r3, #6
 8014962:	d006      	beq.n	8014972 <ethernet_output+0x66>
 8014964:	4b0a      	ldr	r3, [pc, #40]	; (8014990 <ethernet_output+0x84>)
 8014966:	f44f 7299 	mov.w	r2, #306	; 0x132
 801496a:	490a      	ldr	r1, [pc, #40]	; (8014994 <ethernet_output+0x88>)
 801496c:	480a      	ldr	r0, [pc, #40]	; (8014998 <ethernet_output+0x8c>)
 801496e:	f00b f845 	bl	801f9fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	699b      	ldr	r3, [r3, #24]
 8014976:	68b9      	ldr	r1, [r7, #8]
 8014978:	68f8      	ldr	r0, [r7, #12]
 801497a:	4798      	blx	r3
 801497c:	4603      	mov	r3, r0
 801497e:	e002      	b.n	8014986 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014980:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014982:	f06f 0301 	mvn.w	r3, #1
}
 8014986:	4618      	mov	r0, r3
 8014988:	3718      	adds	r7, #24
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}
 801498e:	bf00      	nop
 8014990:	08021514 	.word	0x08021514
 8014994:	0802158c 	.word	0x0802158c
 8014998:	080215c0 	.word	0x080215c0

0801499c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b08e      	sub	sp, #56	; 0x38
 80149a0:	af04      	add	r7, sp, #16
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80149a6:	4b87      	ldr	r3, [pc, #540]	; (8014bc4 <icmp_input+0x228>)
 80149a8:	689b      	ldr	r3, [r3, #8]
 80149aa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80149ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ae:	781b      	ldrb	r3, [r3, #0]
 80149b0:	f003 030f 	and.w	r3, r3, #15
 80149b4:	b2db      	uxtb	r3, r3
 80149b6:	009b      	lsls	r3, r3, #2
 80149b8:	b2db      	uxtb	r3, r3
 80149ba:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80149bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80149be:	2b13      	cmp	r3, #19
 80149c0:	f240 80e8 	bls.w	8014b94 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	895b      	ldrh	r3, [r3, #10]
 80149c8:	2b03      	cmp	r3, #3
 80149ca:	f240 80e5 	bls.w	8014b98 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	685b      	ldr	r3, [r3, #4]
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80149d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80149dc:	2b00      	cmp	r3, #0
 80149de:	f000 80d2 	beq.w	8014b86 <icmp_input+0x1ea>
 80149e2:	2b08      	cmp	r3, #8
 80149e4:	f040 80d2 	bne.w	8014b8c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80149e8:	4b77      	ldr	r3, [pc, #476]	; (8014bc8 <icmp_input+0x22c>)
 80149ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80149ec:	4b75      	ldr	r3, [pc, #468]	; (8014bc4 <icmp_input+0x228>)
 80149ee:	695b      	ldr	r3, [r3, #20]
 80149f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80149f4:	2be0      	cmp	r3, #224	; 0xe0
 80149f6:	f000 80d6 	beq.w	8014ba6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80149fa:	4b72      	ldr	r3, [pc, #456]	; (8014bc4 <icmp_input+0x228>)
 80149fc:	695b      	ldr	r3, [r3, #20]
 80149fe:	4a71      	ldr	r2, [pc, #452]	; (8014bc4 <icmp_input+0x228>)
 8014a00:	6812      	ldr	r2, [r2, #0]
 8014a02:	4611      	mov	r1, r2
 8014a04:	4618      	mov	r0, r3
 8014a06:	f000 fce7 	bl	80153d8 <ip4_addr_isbroadcast_u32>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	f040 80cc 	bne.w	8014baa <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	891b      	ldrh	r3, [r3, #8]
 8014a16:	2b07      	cmp	r3, #7
 8014a18:	f240 80c0 	bls.w	8014b9c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f000 f9e0 	bl	8014de2 <inet_chksum_pbuf>
 8014a22:	4603      	mov	r3, r0
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d003      	beq.n	8014a30 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f002 ff3b 	bl	80178a4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8014a2e:	e0c5      	b.n	8014bbc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a32:	330e      	adds	r3, #14
 8014a34:	4619      	mov	r1, r3
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f002 fe9e 	bl	8017778 <pbuf_add_header>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d04b      	beq.n	8014ada <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	891a      	ldrh	r2, [r3, #8]
 8014a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a48:	4413      	add	r3, r2
 8014a4a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	891b      	ldrh	r3, [r3, #8]
 8014a50:	8b7a      	ldrh	r2, [r7, #26]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	f0c0 80ab 	bcc.w	8014bae <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014a58:	8b7b      	ldrh	r3, [r7, #26]
 8014a5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a5e:	4619      	mov	r1, r3
 8014a60:	200e      	movs	r0, #14
 8014a62:	f002 fc3b 	bl	80172dc <pbuf_alloc>
 8014a66:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	f000 80a1 	beq.w	8014bb2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	895b      	ldrh	r3, [r3, #10]
 8014a74:	461a      	mov	r2, r3
 8014a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a78:	3308      	adds	r3, #8
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	d203      	bcs.n	8014a86 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014a7e:	6978      	ldr	r0, [r7, #20]
 8014a80:	f002 ff10 	bl	80178a4 <pbuf_free>
          goto icmperr;
 8014a84:	e096      	b.n	8014bb4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f00a fbb6 	bl	801f200 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a96:	4619      	mov	r1, r3
 8014a98:	6978      	ldr	r0, [r7, #20]
 8014a9a:	f002 fe7d 	bl	8017798 <pbuf_remove_header>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d009      	beq.n	8014ab8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014aa4:	4b49      	ldr	r3, [pc, #292]	; (8014bcc <icmp_input+0x230>)
 8014aa6:	22b6      	movs	r2, #182	; 0xb6
 8014aa8:	4949      	ldr	r1, [pc, #292]	; (8014bd0 <icmp_input+0x234>)
 8014aaa:	484a      	ldr	r0, [pc, #296]	; (8014bd4 <icmp_input+0x238>)
 8014aac:	f00a ffa6 	bl	801f9fc <iprintf>
          pbuf_free(r);
 8014ab0:	6978      	ldr	r0, [r7, #20]
 8014ab2:	f002 fef7 	bl	80178a4 <pbuf_free>
          goto icmperr;
 8014ab6:	e07d      	b.n	8014bb4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014ab8:	6879      	ldr	r1, [r7, #4]
 8014aba:	6978      	ldr	r0, [r7, #20]
 8014abc:	f003 f816 	bl	8017aec <pbuf_copy>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d003      	beq.n	8014ace <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014ac6:	6978      	ldr	r0, [r7, #20]
 8014ac8:	f002 feec 	bl	80178a4 <pbuf_free>
          goto icmperr;
 8014acc:	e072      	b.n	8014bb4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f002 fee8 	bl	80178a4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	607b      	str	r3, [r7, #4]
 8014ad8:	e00f      	b.n	8014afa <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014adc:	330e      	adds	r3, #14
 8014ade:	4619      	mov	r1, r3
 8014ae0:	6878      	ldr	r0, [r7, #4]
 8014ae2:	f002 fe59 	bl	8017798 <pbuf_remove_header>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d006      	beq.n	8014afa <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014aec:	4b37      	ldr	r3, [pc, #220]	; (8014bcc <icmp_input+0x230>)
 8014aee:	22c7      	movs	r2, #199	; 0xc7
 8014af0:	4939      	ldr	r1, [pc, #228]	; (8014bd8 <icmp_input+0x23c>)
 8014af2:	4838      	ldr	r0, [pc, #224]	; (8014bd4 <icmp_input+0x238>)
 8014af4:	f00a ff82 	bl	801f9fc <iprintf>
          goto icmperr;
 8014af8:	e05c      	b.n	8014bb4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014b00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b02:	4619      	mov	r1, r3
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	f002 fe37 	bl	8017778 <pbuf_add_header>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d13c      	bne.n	8014b8a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	685b      	ldr	r3, [r3, #4]
 8014b14:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014b16:	69fb      	ldr	r3, [r7, #28]
 8014b18:	681a      	ldr	r2, [r3, #0]
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014b1e:	4b29      	ldr	r3, [pc, #164]	; (8014bc4 <icmp_input+0x228>)
 8014b20:	691a      	ldr	r2, [r3, #16]
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	2200      	movs	r2, #0
 8014b2a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014b2c:	693b      	ldr	r3, [r7, #16]
 8014b2e:	885b      	ldrh	r3, [r3, #2]
 8014b30:	b29b      	uxth	r3, r3
 8014b32:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014b36:	4293      	cmp	r3, r2
 8014b38:	d907      	bls.n	8014b4a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014b3a:	693b      	ldr	r3, [r7, #16]
 8014b3c:	885b      	ldrh	r3, [r3, #2]
 8014b3e:	b29b      	uxth	r3, r3
 8014b40:	3309      	adds	r3, #9
 8014b42:	b29a      	uxth	r2, r3
 8014b44:	693b      	ldr	r3, [r7, #16]
 8014b46:	805a      	strh	r2, [r3, #2]
 8014b48:	e006      	b.n	8014b58 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	885b      	ldrh	r3, [r3, #2]
 8014b4e:	b29b      	uxth	r3, r3
 8014b50:	3308      	adds	r3, #8
 8014b52:	b29a      	uxth	r2, r3
 8014b54:	693b      	ldr	r3, [r7, #16]
 8014b56:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	22ff      	movs	r2, #255	; 0xff
 8014b5c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	2200      	movs	r2, #0
 8014b62:	729a      	strb	r2, [r3, #10]
 8014b64:	2200      	movs	r2, #0
 8014b66:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014b68:	683b      	ldr	r3, [r7, #0]
 8014b6a:	9302      	str	r3, [sp, #8]
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	9301      	str	r3, [sp, #4]
 8014b70:	2300      	movs	r3, #0
 8014b72:	9300      	str	r3, [sp, #0]
 8014b74:	23ff      	movs	r3, #255	; 0xff
 8014b76:	2200      	movs	r2, #0
 8014b78:	69f9      	ldr	r1, [r7, #28]
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f000 fb54 	bl	8015228 <ip4_output_if>
 8014b80:	4603      	mov	r3, r0
 8014b82:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014b84:	e001      	b.n	8014b8a <icmp_input+0x1ee>
      break;
 8014b86:	bf00      	nop
 8014b88:	e000      	b.n	8014b8c <icmp_input+0x1f0>
      break;
 8014b8a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f002 fe89 	bl	80178a4 <pbuf_free>
  return;
 8014b92:	e013      	b.n	8014bbc <icmp_input+0x220>
    goto lenerr;
 8014b94:	bf00      	nop
 8014b96:	e002      	b.n	8014b9e <icmp_input+0x202>
    goto lenerr;
 8014b98:	bf00      	nop
 8014b9a:	e000      	b.n	8014b9e <icmp_input+0x202>
        goto lenerr;
 8014b9c:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f002 fe80 	bl	80178a4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014ba4:	e00a      	b.n	8014bbc <icmp_input+0x220>
        goto icmperr;
 8014ba6:	bf00      	nop
 8014ba8:	e004      	b.n	8014bb4 <icmp_input+0x218>
        goto icmperr;
 8014baa:	bf00      	nop
 8014bac:	e002      	b.n	8014bb4 <icmp_input+0x218>
          goto icmperr;
 8014bae:	bf00      	nop
 8014bb0:	e000      	b.n	8014bb4 <icmp_input+0x218>
          goto icmperr;
 8014bb2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f002 fe75 	bl	80178a4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014bba:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014bbc:	3728      	adds	r7, #40	; 0x28
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}
 8014bc2:	bf00      	nop
 8014bc4:	24008e50 	.word	0x24008e50
 8014bc8:	24008e64 	.word	0x24008e64
 8014bcc:	080215e8 	.word	0x080215e8
 8014bd0:	08021660 	.word	0x08021660
 8014bd4:	08021698 	.word	0x08021698
 8014bd8:	080216c0 	.word	0x080216c0

08014bdc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	460b      	mov	r3, r1
 8014be6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014be8:	78fb      	ldrb	r3, [r7, #3]
 8014bea:	461a      	mov	r2, r3
 8014bec:	2103      	movs	r1, #3
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f000 f814 	bl	8014c1c <icmp_send_response>
}
 8014bf4:	bf00      	nop
 8014bf6:	3708      	adds	r7, #8
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}

08014bfc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b082      	sub	sp, #8
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
 8014c04:	460b      	mov	r3, r1
 8014c06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014c08:	78fb      	ldrb	r3, [r7, #3]
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	210b      	movs	r1, #11
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f000 f804 	bl	8014c1c <icmp_send_response>
}
 8014c14:	bf00      	nop
 8014c16:	3708      	adds	r7, #8
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}

08014c1c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b08c      	sub	sp, #48	; 0x30
 8014c20:	af04      	add	r7, sp, #16
 8014c22:	6078      	str	r0, [r7, #4]
 8014c24:	460b      	mov	r3, r1
 8014c26:	70fb      	strb	r3, [r7, #3]
 8014c28:	4613      	mov	r3, r2
 8014c2a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014c2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c30:	2124      	movs	r1, #36	; 0x24
 8014c32:	2022      	movs	r0, #34	; 0x22
 8014c34:	f002 fb52 	bl	80172dc <pbuf_alloc>
 8014c38:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014c3a:	69fb      	ldr	r3, [r7, #28]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d056      	beq.n	8014cee <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014c40:	69fb      	ldr	r3, [r7, #28]
 8014c42:	895b      	ldrh	r3, [r3, #10]
 8014c44:	2b23      	cmp	r3, #35	; 0x23
 8014c46:	d806      	bhi.n	8014c56 <icmp_send_response+0x3a>
 8014c48:	4b2b      	ldr	r3, [pc, #172]	; (8014cf8 <icmp_send_response+0xdc>)
 8014c4a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014c4e:	492b      	ldr	r1, [pc, #172]	; (8014cfc <icmp_send_response+0xe0>)
 8014c50:	482b      	ldr	r0, [pc, #172]	; (8014d00 <icmp_send_response+0xe4>)
 8014c52:	f00a fed3 	bl	801f9fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014c5c:	69fb      	ldr	r3, [r7, #28]
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014c62:	697b      	ldr	r3, [r7, #20]
 8014c64:	78fa      	ldrb	r2, [r7, #3]
 8014c66:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014c68:	697b      	ldr	r3, [r7, #20]
 8014c6a:	78ba      	ldrb	r2, [r7, #2]
 8014c6c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014c6e:	697b      	ldr	r3, [r7, #20]
 8014c70:	2200      	movs	r2, #0
 8014c72:	711a      	strb	r2, [r3, #4]
 8014c74:	2200      	movs	r2, #0
 8014c76:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014c78:	697b      	ldr	r3, [r7, #20]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	719a      	strb	r2, [r3, #6]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014c82:	69fb      	ldr	r3, [r7, #28]
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	f103 0008 	add.w	r0, r3, #8
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	685b      	ldr	r3, [r3, #4]
 8014c8e:	221c      	movs	r2, #28
 8014c90:	4619      	mov	r1, r3
 8014c92:	f00a fab5 	bl	801f200 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014c96:	69bb      	ldr	r3, [r7, #24]
 8014c98:	68db      	ldr	r3, [r3, #12]
 8014c9a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014c9c:	f107 030c 	add.w	r3, r7, #12
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f000 f903 	bl	8014eac <ip4_route>
 8014ca6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d01b      	beq.n	8014ce6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	709a      	strb	r2, [r3, #2]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8014cb8:	69fb      	ldr	r3, [r7, #28]
 8014cba:	895b      	ldrh	r3, [r3, #10]
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	6978      	ldr	r0, [r7, #20]
 8014cc0:	f000 f87d 	bl	8014dbe <inet_chksum>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014ccc:	f107 020c 	add.w	r2, r7, #12
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	9302      	str	r3, [sp, #8]
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	9301      	str	r3, [sp, #4]
 8014cd8:	2300      	movs	r3, #0
 8014cda:	9300      	str	r3, [sp, #0]
 8014cdc:	23ff      	movs	r3, #255	; 0xff
 8014cde:	2100      	movs	r1, #0
 8014ce0:	69f8      	ldr	r0, [r7, #28]
 8014ce2:	f000 faa1 	bl	8015228 <ip4_output_if>
  }
  pbuf_free(q);
 8014ce6:	69f8      	ldr	r0, [r7, #28]
 8014ce8:	f002 fddc 	bl	80178a4 <pbuf_free>
 8014cec:	e000      	b.n	8014cf0 <icmp_send_response+0xd4>
    return;
 8014cee:	bf00      	nop
}
 8014cf0:	3720      	adds	r7, #32
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}
 8014cf6:	bf00      	nop
 8014cf8:	080215e8 	.word	0x080215e8
 8014cfc:	080216f4 	.word	0x080216f4
 8014d00:	08021698 	.word	0x08021698

08014d04 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8014d04:	b480      	push	{r7}
 8014d06:	b089      	sub	sp, #36	; 0x24
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8014d12:	2300      	movs	r3, #0
 8014d14:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8014d16:	2300      	movs	r3, #0
 8014d18:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8014d1a:	69fb      	ldr	r3, [r7, #28]
 8014d1c:	f003 0301 	and.w	r3, r3, #1
 8014d20:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d00d      	beq.n	8014d44 <lwip_standard_chksum+0x40>
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	dd0a      	ble.n	8014d44 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8014d2e:	69fa      	ldr	r2, [r7, #28]
 8014d30:	1c53      	adds	r3, r2, #1
 8014d32:	61fb      	str	r3, [r7, #28]
 8014d34:	f107 030e 	add.w	r3, r7, #14
 8014d38:	3301      	adds	r3, #1
 8014d3a:	7812      	ldrb	r2, [r2, #0]
 8014d3c:	701a      	strb	r2, [r3, #0]
    len--;
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	3b01      	subs	r3, #1
 8014d42:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8014d44:	69fb      	ldr	r3, [r7, #28]
 8014d46:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8014d48:	e00a      	b.n	8014d60 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8014d4a:	69bb      	ldr	r3, [r7, #24]
 8014d4c:	1c9a      	adds	r2, r3, #2
 8014d4e:	61ba      	str	r2, [r7, #24]
 8014d50:	881b      	ldrh	r3, [r3, #0]
 8014d52:	461a      	mov	r2, r3
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	4413      	add	r3, r2
 8014d58:	617b      	str	r3, [r7, #20]
    len -= 2;
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	3b02      	subs	r3, #2
 8014d5e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	dcf1      	bgt.n	8014d4a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	dd04      	ble.n	8014d76 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8014d6c:	f107 030e 	add.w	r3, r7, #14
 8014d70:	69ba      	ldr	r2, [r7, #24]
 8014d72:	7812      	ldrb	r2, [r2, #0]
 8014d74:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8014d76:	89fb      	ldrh	r3, [r7, #14]
 8014d78:	461a      	mov	r2, r3
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	0c1a      	lsrs	r2, r3, #16
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	4413      	add	r3, r2
 8014d8a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	0c1a      	lsrs	r2, r3, #16
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	b29b      	uxth	r3, r3
 8014d94:	4413      	add	r3, r2
 8014d96:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8014d98:	693b      	ldr	r3, [r7, #16]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d007      	beq.n	8014dae <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	021b      	lsls	r3, r3, #8
 8014da2:	b29a      	uxth	r2, r3
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	0a1b      	lsrs	r3, r3, #8
 8014da8:	b2db      	uxtb	r3, r3
 8014daa:	4313      	orrs	r3, r2
 8014dac:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	b29b      	uxth	r3, r3
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3724      	adds	r7, #36	; 0x24
 8014db6:	46bd      	mov	sp, r7
 8014db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbc:	4770      	bx	lr

08014dbe <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8014dbe:	b580      	push	{r7, lr}
 8014dc0:	b082      	sub	sp, #8
 8014dc2:	af00      	add	r7, sp, #0
 8014dc4:	6078      	str	r0, [r7, #4]
 8014dc6:	460b      	mov	r3, r1
 8014dc8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8014dca:	887b      	ldrh	r3, [r7, #2]
 8014dcc:	4619      	mov	r1, r3
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f7ff ff98 	bl	8014d04 <lwip_standard_chksum>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	43db      	mvns	r3, r3
 8014dd8:	b29b      	uxth	r3, r3
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3708      	adds	r7, #8
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}

08014de2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8014de2:	b580      	push	{r7, lr}
 8014de4:	b086      	sub	sp, #24
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8014dea:	2300      	movs	r3, #0
 8014dec:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8014dee:	2300      	movs	r3, #0
 8014df0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	613b      	str	r3, [r7, #16]
 8014df6:	e02b      	b.n	8014e50 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8014df8:	693b      	ldr	r3, [r7, #16]
 8014dfa:	685a      	ldr	r2, [r3, #4]
 8014dfc:	693b      	ldr	r3, [r7, #16]
 8014dfe:	895b      	ldrh	r3, [r3, #10]
 8014e00:	4619      	mov	r1, r3
 8014e02:	4610      	mov	r0, r2
 8014e04:	f7ff ff7e 	bl	8014d04 <lwip_standard_chksum>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	461a      	mov	r2, r3
 8014e0c:	697b      	ldr	r3, [r7, #20]
 8014e0e:	4413      	add	r3, r2
 8014e10:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	0c1a      	lsrs	r2, r3, #16
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	4413      	add	r3, r2
 8014e1c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8014e1e:	693b      	ldr	r3, [r7, #16]
 8014e20:	895b      	ldrh	r3, [r3, #10]
 8014e22:	f003 0301 	and.w	r3, r3, #1
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d00e      	beq.n	8014e4a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	bf0c      	ite	eq
 8014e32:	2301      	moveq	r3, #1
 8014e34:	2300      	movne	r3, #0
 8014e36:	b2db      	uxtb	r3, r3
 8014e38:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	021b      	lsls	r3, r3, #8
 8014e3e:	b29a      	uxth	r2, r3
 8014e40:	697b      	ldr	r3, [r7, #20]
 8014e42:	0a1b      	lsrs	r3, r3, #8
 8014e44:	b2db      	uxtb	r3, r3
 8014e46:	4313      	orrs	r3, r2
 8014e48:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	613b      	str	r3, [r7, #16]
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d1d0      	bne.n	8014df8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d007      	beq.n	8014e6c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	021b      	lsls	r3, r3, #8
 8014e60:	b29a      	uxth	r2, r3
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	0a1b      	lsrs	r3, r3, #8
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	4313      	orrs	r3, r2
 8014e6a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8014e6c:	697b      	ldr	r3, [r7, #20]
 8014e6e:	b29b      	uxth	r3, r3
 8014e70:	43db      	mvns	r3, r3
 8014e72:	b29b      	uxth	r3, r3
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	3718      	adds	r7, #24
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}

08014e7c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b082      	sub	sp, #8
 8014e80:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8014e82:	2300      	movs	r3, #0
 8014e84:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8014e86:	f003 f8ff 	bl	8018088 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8014e8a:	f001 f9e9 	bl	8016260 <mem_init>
  memp_init();
 8014e8e:	f001 fd31 	bl	80168f4 <memp_init>
  pbuf_init();
  netif_init();
 8014e92:	f001 fe8d 	bl	8016bb0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8014e96:	f009 fd3d 	bl	801e914 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8014e9a:	f003 f97f 	bl	801819c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8014e9e:	f009 fc7f 	bl	801e7a0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8014ea2:	bf00      	nop
 8014ea4:	3708      	adds	r7, #8
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}
	...

08014eac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014eac:	b480      	push	{r7}
 8014eae:	b085      	sub	sp, #20
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014eb4:	4b33      	ldr	r3, [pc, #204]	; (8014f84 <ip4_route+0xd8>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	60fb      	str	r3, [r7, #12]
 8014eba:	e036      	b.n	8014f2a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014ec2:	f003 0301 	and.w	r3, r3, #1
 8014ec6:	b2db      	uxtb	r3, r3
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d02b      	beq.n	8014f24 <ip4_route+0x78>
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014ed2:	089b      	lsrs	r3, r3, #2
 8014ed4:	f003 0301 	and.w	r3, r3, #1
 8014ed8:	b2db      	uxtb	r3, r3
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d022      	beq.n	8014f24 <ip4_route+0x78>
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	3304      	adds	r3, #4
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d01d      	beq.n	8014f24 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	681a      	ldr	r2, [r3, #0]
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	3304      	adds	r3, #4
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	405a      	eors	r2, r3
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	3308      	adds	r3, #8
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	4013      	ands	r3, r2
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d101      	bne.n	8014f04 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	e038      	b.n	8014f76 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f0a:	f003 0302 	and.w	r3, r3, #2
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d108      	bne.n	8014f24 <ip4_route+0x78>
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	681a      	ldr	r2, [r3, #0]
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	330c      	adds	r3, #12
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	d101      	bne.n	8014f24 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	e028      	b.n	8014f76 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	60fb      	str	r3, [r7, #12]
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d1c5      	bne.n	8014ebc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014f30:	4b15      	ldr	r3, [pc, #84]	; (8014f88 <ip4_route+0xdc>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d01a      	beq.n	8014f6e <ip4_route+0xc2>
 8014f38:	4b13      	ldr	r3, [pc, #76]	; (8014f88 <ip4_route+0xdc>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f40:	f003 0301 	and.w	r3, r3, #1
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d012      	beq.n	8014f6e <ip4_route+0xc2>
 8014f48:	4b0f      	ldr	r3, [pc, #60]	; (8014f88 <ip4_route+0xdc>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f50:	f003 0304 	and.w	r3, r3, #4
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d00a      	beq.n	8014f6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014f58:	4b0b      	ldr	r3, [pc, #44]	; (8014f88 <ip4_route+0xdc>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	3304      	adds	r3, #4
 8014f5e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d004      	beq.n	8014f6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	b2db      	uxtb	r3, r3
 8014f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8014f6c:	d101      	bne.n	8014f72 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014f6e:	2300      	movs	r3, #0
 8014f70:	e001      	b.n	8014f76 <ip4_route+0xca>
  }

  return netif_default;
 8014f72:	4b05      	ldr	r3, [pc, #20]	; (8014f88 <ip4_route+0xdc>)
 8014f74:	681b      	ldr	r3, [r3, #0]
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3714      	adds	r7, #20
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f80:	4770      	bx	lr
 8014f82:	bf00      	nop
 8014f84:	2400f910 	.word	0x2400f910
 8014f88:	2400f914 	.word	0x2400f914

08014f8c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b082      	sub	sp, #8
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f9a:	f003 0301 	and.w	r3, r3, #1
 8014f9e:	b2db      	uxtb	r3, r3
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d016      	beq.n	8014fd2 <ip4_input_accept+0x46>
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	3304      	adds	r3, #4
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d011      	beq.n	8014fd2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014fae:	4b0b      	ldr	r3, [pc, #44]	; (8014fdc <ip4_input_accept+0x50>)
 8014fb0:	695a      	ldr	r2, [r3, #20]
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	3304      	adds	r3, #4
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d008      	beq.n	8014fce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014fbc:	4b07      	ldr	r3, [pc, #28]	; (8014fdc <ip4_input_accept+0x50>)
 8014fbe:	695b      	ldr	r3, [r3, #20]
 8014fc0:	6879      	ldr	r1, [r7, #4]
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f000 fa08 	bl	80153d8 <ip4_addr_isbroadcast_u32>
 8014fc8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d001      	beq.n	8014fd2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014fce:	2301      	movs	r3, #1
 8014fd0:	e000      	b.n	8014fd4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014fd2:	2300      	movs	r3, #0
}
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	3708      	adds	r7, #8
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	bd80      	pop	{r7, pc}
 8014fdc:	24008e50 	.word	0x24008e50

08014fe0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b086      	sub	sp, #24
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	685b      	ldr	r3, [r3, #4]
 8014fee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	781b      	ldrb	r3, [r3, #0]
 8014ff4:	091b      	lsrs	r3, r3, #4
 8014ff6:	b2db      	uxtb	r3, r3
 8014ff8:	2b04      	cmp	r3, #4
 8014ffa:	d004      	beq.n	8015006 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f002 fc51 	bl	80178a4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015002:	2300      	movs	r3, #0
 8015004:	e107      	b.n	8015216 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	781b      	ldrb	r3, [r3, #0]
 801500a:	f003 030f 	and.w	r3, r3, #15
 801500e:	b2db      	uxtb	r3, r3
 8015010:	009b      	lsls	r3, r3, #2
 8015012:	b2db      	uxtb	r3, r3
 8015014:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015016:	697b      	ldr	r3, [r7, #20]
 8015018:	885b      	ldrh	r3, [r3, #2]
 801501a:	b29b      	uxth	r3, r3
 801501c:	4618      	mov	r0, r3
 801501e:	f7fe fc6d 	bl	80138fc <lwip_htons>
 8015022:	4603      	mov	r3, r0
 8015024:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	891b      	ldrh	r3, [r3, #8]
 801502a:	89ba      	ldrh	r2, [r7, #12]
 801502c:	429a      	cmp	r2, r3
 801502e:	d204      	bcs.n	801503a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015030:	89bb      	ldrh	r3, [r7, #12]
 8015032:	4619      	mov	r1, r3
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f002 fab1 	bl	801759c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	895b      	ldrh	r3, [r3, #10]
 801503e:	89fa      	ldrh	r2, [r7, #14]
 8015040:	429a      	cmp	r2, r3
 8015042:	d807      	bhi.n	8015054 <ip4_input+0x74>
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	891b      	ldrh	r3, [r3, #8]
 8015048:	89ba      	ldrh	r2, [r7, #12]
 801504a:	429a      	cmp	r2, r3
 801504c:	d802      	bhi.n	8015054 <ip4_input+0x74>
 801504e:	89fb      	ldrh	r3, [r7, #14]
 8015050:	2b13      	cmp	r3, #19
 8015052:	d804      	bhi.n	801505e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f002 fc25 	bl	80178a4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801505a:	2300      	movs	r3, #0
 801505c:	e0db      	b.n	8015216 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801505e:	697b      	ldr	r3, [r7, #20]
 8015060:	691b      	ldr	r3, [r3, #16]
 8015062:	4a6f      	ldr	r2, [pc, #444]	; (8015220 <ip4_input+0x240>)
 8015064:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	68db      	ldr	r3, [r3, #12]
 801506a:	4a6d      	ldr	r2, [pc, #436]	; (8015220 <ip4_input+0x240>)
 801506c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801506e:	4b6c      	ldr	r3, [pc, #432]	; (8015220 <ip4_input+0x240>)
 8015070:	695b      	ldr	r3, [r3, #20]
 8015072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015076:	2be0      	cmp	r3, #224	; 0xe0
 8015078:	d112      	bne.n	80150a0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015080:	f003 0301 	and.w	r3, r3, #1
 8015084:	b2db      	uxtb	r3, r3
 8015086:	2b00      	cmp	r3, #0
 8015088:	d007      	beq.n	801509a <ip4_input+0xba>
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	3304      	adds	r3, #4
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d002      	beq.n	801509a <ip4_input+0xba>
      netif = inp;
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	613b      	str	r3, [r7, #16]
 8015098:	e02a      	b.n	80150f0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801509a:	2300      	movs	r3, #0
 801509c:	613b      	str	r3, [r7, #16]
 801509e:	e027      	b.n	80150f0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80150a0:	6838      	ldr	r0, [r7, #0]
 80150a2:	f7ff ff73 	bl	8014f8c <ip4_input_accept>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d002      	beq.n	80150b2 <ip4_input+0xd2>
      netif = inp;
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	613b      	str	r3, [r7, #16]
 80150b0:	e01e      	b.n	80150f0 <ip4_input+0x110>
    } else {
      netif = NULL;
 80150b2:	2300      	movs	r3, #0
 80150b4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80150b6:	4b5a      	ldr	r3, [pc, #360]	; (8015220 <ip4_input+0x240>)
 80150b8:	695b      	ldr	r3, [r3, #20]
 80150ba:	b2db      	uxtb	r3, r3
 80150bc:	2b7f      	cmp	r3, #127	; 0x7f
 80150be:	d017      	beq.n	80150f0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80150c0:	4b58      	ldr	r3, [pc, #352]	; (8015224 <ip4_input+0x244>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	613b      	str	r3, [r7, #16]
 80150c6:	e00e      	b.n	80150e6 <ip4_input+0x106>
          if (netif == inp) {
 80150c8:	693a      	ldr	r2, [r7, #16]
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	429a      	cmp	r2, r3
 80150ce:	d006      	beq.n	80150de <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80150d0:	6938      	ldr	r0, [r7, #16]
 80150d2:	f7ff ff5b 	bl	8014f8c <ip4_input_accept>
 80150d6:	4603      	mov	r3, r0
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d108      	bne.n	80150ee <ip4_input+0x10e>
 80150dc:	e000      	b.n	80150e0 <ip4_input+0x100>
            continue;
 80150de:	bf00      	nop
        NETIF_FOREACH(netif) {
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	613b      	str	r3, [r7, #16]
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d1ed      	bne.n	80150c8 <ip4_input+0xe8>
 80150ec:	e000      	b.n	80150f0 <ip4_input+0x110>
            break;
 80150ee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80150f0:	4b4b      	ldr	r3, [pc, #300]	; (8015220 <ip4_input+0x240>)
 80150f2:	691b      	ldr	r3, [r3, #16]
 80150f4:	6839      	ldr	r1, [r7, #0]
 80150f6:	4618      	mov	r0, r3
 80150f8:	f000 f96e 	bl	80153d8 <ip4_addr_isbroadcast_u32>
 80150fc:	4603      	mov	r3, r0
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d105      	bne.n	801510e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015102:	4b47      	ldr	r3, [pc, #284]	; (8015220 <ip4_input+0x240>)
 8015104:	691b      	ldr	r3, [r3, #16]
 8015106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801510a:	2be0      	cmp	r3, #224	; 0xe0
 801510c:	d104      	bne.n	8015118 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801510e:	6878      	ldr	r0, [r7, #4]
 8015110:	f002 fbc8 	bl	80178a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015114:	2300      	movs	r3, #0
 8015116:	e07e      	b.n	8015216 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d104      	bne.n	8015128 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f002 fbc0 	bl	80178a4 <pbuf_free>
    return ERR_OK;
 8015124:	2300      	movs	r3, #0
 8015126:	e076      	b.n	8015216 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015128:	697b      	ldr	r3, [r7, #20]
 801512a:	88db      	ldrh	r3, [r3, #6]
 801512c:	b29b      	uxth	r3, r3
 801512e:	461a      	mov	r2, r3
 8015130:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015134:	4013      	ands	r3, r2
 8015136:	2b00      	cmp	r3, #0
 8015138:	d00b      	beq.n	8015152 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801513a:	6878      	ldr	r0, [r7, #4]
 801513c:	f000 fc92 	bl	8015a64 <ip4_reass>
 8015140:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d101      	bne.n	801514c <ip4_input+0x16c>
      return ERR_OK;
 8015148:	2300      	movs	r3, #0
 801514a:	e064      	b.n	8015216 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	685b      	ldr	r3, [r3, #4]
 8015150:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015152:	4a33      	ldr	r2, [pc, #204]	; (8015220 <ip4_input+0x240>)
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015158:	4a31      	ldr	r2, [pc, #196]	; (8015220 <ip4_input+0x240>)
 801515a:	683b      	ldr	r3, [r7, #0]
 801515c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801515e:	4a30      	ldr	r2, [pc, #192]	; (8015220 <ip4_input+0x240>)
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015164:	697b      	ldr	r3, [r7, #20]
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	f003 030f 	and.w	r3, r3, #15
 801516c:	b2db      	uxtb	r3, r3
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	b2db      	uxtb	r3, r3
 8015172:	b29a      	uxth	r2, r3
 8015174:	4b2a      	ldr	r3, [pc, #168]	; (8015220 <ip4_input+0x240>)
 8015176:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015178:	89fb      	ldrh	r3, [r7, #14]
 801517a:	4619      	mov	r1, r3
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	f002 fb0b 	bl	8017798 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	7a5b      	ldrb	r3, [r3, #9]
 8015186:	2b11      	cmp	r3, #17
 8015188:	d006      	beq.n	8015198 <ip4_input+0x1b8>
 801518a:	2b11      	cmp	r3, #17
 801518c:	dc13      	bgt.n	80151b6 <ip4_input+0x1d6>
 801518e:	2b01      	cmp	r3, #1
 8015190:	d00c      	beq.n	80151ac <ip4_input+0x1cc>
 8015192:	2b06      	cmp	r3, #6
 8015194:	d005      	beq.n	80151a2 <ip4_input+0x1c2>
 8015196:	e00e      	b.n	80151b6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015198:	6839      	ldr	r1, [r7, #0]
 801519a:	6878      	ldr	r0, [r7, #4]
 801519c:	f009 fc68 	bl	801ea70 <udp_input>
        break;
 80151a0:	e026      	b.n	80151f0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80151a2:	6839      	ldr	r1, [r7, #0]
 80151a4:	6878      	ldr	r0, [r7, #4]
 80151a6:	f004 fe69 	bl	8019e7c <tcp_input>
        break;
 80151aa:	e021      	b.n	80151f0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80151ac:	6839      	ldr	r1, [r7, #0]
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	f7ff fbf4 	bl	801499c <icmp_input>
        break;
 80151b4:	e01c      	b.n	80151f0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80151b6:	4b1a      	ldr	r3, [pc, #104]	; (8015220 <ip4_input+0x240>)
 80151b8:	695b      	ldr	r3, [r3, #20]
 80151ba:	6939      	ldr	r1, [r7, #16]
 80151bc:	4618      	mov	r0, r3
 80151be:	f000 f90b 	bl	80153d8 <ip4_addr_isbroadcast_u32>
 80151c2:	4603      	mov	r3, r0
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d10f      	bne.n	80151e8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80151c8:	4b15      	ldr	r3, [pc, #84]	; (8015220 <ip4_input+0x240>)
 80151ca:	695b      	ldr	r3, [r3, #20]
 80151cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80151d0:	2be0      	cmp	r3, #224	; 0xe0
 80151d2:	d009      	beq.n	80151e8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80151d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80151d8:	4619      	mov	r1, r3
 80151da:	6878      	ldr	r0, [r7, #4]
 80151dc:	f002 fb4f 	bl	801787e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80151e0:	2102      	movs	r1, #2
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f7ff fcfa 	bl	8014bdc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80151e8:	6878      	ldr	r0, [r7, #4]
 80151ea:	f002 fb5b 	bl	80178a4 <pbuf_free>
        break;
 80151ee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80151f0:	4b0b      	ldr	r3, [pc, #44]	; (8015220 <ip4_input+0x240>)
 80151f2:	2200      	movs	r2, #0
 80151f4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80151f6:	4b0a      	ldr	r3, [pc, #40]	; (8015220 <ip4_input+0x240>)
 80151f8:	2200      	movs	r2, #0
 80151fa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80151fc:	4b08      	ldr	r3, [pc, #32]	; (8015220 <ip4_input+0x240>)
 80151fe:	2200      	movs	r2, #0
 8015200:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015202:	4b07      	ldr	r3, [pc, #28]	; (8015220 <ip4_input+0x240>)
 8015204:	2200      	movs	r2, #0
 8015206:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015208:	4b05      	ldr	r3, [pc, #20]	; (8015220 <ip4_input+0x240>)
 801520a:	2200      	movs	r2, #0
 801520c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801520e:	4b04      	ldr	r3, [pc, #16]	; (8015220 <ip4_input+0x240>)
 8015210:	2200      	movs	r2, #0
 8015212:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015214:	2300      	movs	r3, #0
}
 8015216:	4618      	mov	r0, r3
 8015218:	3718      	adds	r7, #24
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}
 801521e:	bf00      	nop
 8015220:	24008e50 	.word	0x24008e50
 8015224:	2400f910 	.word	0x2400f910

08015228 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b08a      	sub	sp, #40	; 0x28
 801522c:	af04      	add	r7, sp, #16
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	607a      	str	r2, [r7, #4]
 8015234:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d009      	beq.n	8015254 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d003      	beq.n	801524e <ip4_output_if+0x26>
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d102      	bne.n	8015254 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015250:	3304      	adds	r3, #4
 8015252:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015254:	78fa      	ldrb	r2, [r7, #3]
 8015256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015258:	9302      	str	r3, [sp, #8]
 801525a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801525e:	9301      	str	r3, [sp, #4]
 8015260:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015264:	9300      	str	r3, [sp, #0]
 8015266:	4613      	mov	r3, r2
 8015268:	687a      	ldr	r2, [r7, #4]
 801526a:	6979      	ldr	r1, [r7, #20]
 801526c:	68f8      	ldr	r0, [r7, #12]
 801526e:	f000 f805 	bl	801527c <ip4_output_if_src>
 8015272:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015274:	4618      	mov	r0, r3
 8015276:	3718      	adds	r7, #24
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}

0801527c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b088      	sub	sp, #32
 8015280:	af00      	add	r7, sp, #0
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	60b9      	str	r1, [r7, #8]
 8015286:	607a      	str	r2, [r7, #4]
 8015288:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	7b9b      	ldrb	r3, [r3, #14]
 801528e:	2b01      	cmp	r3, #1
 8015290:	d006      	beq.n	80152a0 <ip4_output_if_src+0x24>
 8015292:	4b4b      	ldr	r3, [pc, #300]	; (80153c0 <ip4_output_if_src+0x144>)
 8015294:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015298:	494a      	ldr	r1, [pc, #296]	; (80153c4 <ip4_output_if_src+0x148>)
 801529a:	484b      	ldr	r0, [pc, #300]	; (80153c8 <ip4_output_if_src+0x14c>)
 801529c:	f00a fbae 	bl	801f9fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d060      	beq.n	8015368 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80152a6:	2314      	movs	r3, #20
 80152a8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80152aa:	2114      	movs	r1, #20
 80152ac:	68f8      	ldr	r0, [r7, #12]
 80152ae:	f002 fa63 	bl	8017778 <pbuf_add_header>
 80152b2:	4603      	mov	r3, r0
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d002      	beq.n	80152be <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80152b8:	f06f 0301 	mvn.w	r3, #1
 80152bc:	e07c      	b.n	80153b8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	895b      	ldrh	r3, [r3, #10]
 80152c8:	2b13      	cmp	r3, #19
 80152ca:	d806      	bhi.n	80152da <ip4_output_if_src+0x5e>
 80152cc:	4b3c      	ldr	r3, [pc, #240]	; (80153c0 <ip4_output_if_src+0x144>)
 80152ce:	f44f 7262 	mov.w	r2, #904	; 0x388
 80152d2:	493e      	ldr	r1, [pc, #248]	; (80153cc <ip4_output_if_src+0x150>)
 80152d4:	483c      	ldr	r0, [pc, #240]	; (80153c8 <ip4_output_if_src+0x14c>)
 80152d6:	f00a fb91 	bl	801f9fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80152da:	69fb      	ldr	r3, [r7, #28]
 80152dc:	78fa      	ldrb	r2, [r7, #3]
 80152de:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80152e0:	69fb      	ldr	r3, [r7, #28]
 80152e2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80152e6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	681a      	ldr	r2, [r3, #0]
 80152ec:	69fb      	ldr	r3, [r7, #28]
 80152ee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80152f0:	8b7b      	ldrh	r3, [r7, #26]
 80152f2:	089b      	lsrs	r3, r3, #2
 80152f4:	b29b      	uxth	r3, r3
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152fc:	b2da      	uxtb	r2, r3
 80152fe:	69fb      	ldr	r3, [r7, #28]
 8015300:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015302:	69fb      	ldr	r3, [r7, #28]
 8015304:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015308:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	891b      	ldrh	r3, [r3, #8]
 801530e:	4618      	mov	r0, r3
 8015310:	f7fe faf4 	bl	80138fc <lwip_htons>
 8015314:	4603      	mov	r3, r0
 8015316:	461a      	mov	r2, r3
 8015318:	69fb      	ldr	r3, [r7, #28]
 801531a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801531c:	69fb      	ldr	r3, [r7, #28]
 801531e:	2200      	movs	r2, #0
 8015320:	719a      	strb	r2, [r3, #6]
 8015322:	2200      	movs	r2, #0
 8015324:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015326:	4b2a      	ldr	r3, [pc, #168]	; (80153d0 <ip4_output_if_src+0x154>)
 8015328:	881b      	ldrh	r3, [r3, #0]
 801532a:	4618      	mov	r0, r3
 801532c:	f7fe fae6 	bl	80138fc <lwip_htons>
 8015330:	4603      	mov	r3, r0
 8015332:	461a      	mov	r2, r3
 8015334:	69fb      	ldr	r3, [r7, #28]
 8015336:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015338:	4b25      	ldr	r3, [pc, #148]	; (80153d0 <ip4_output_if_src+0x154>)
 801533a:	881b      	ldrh	r3, [r3, #0]
 801533c:	3301      	adds	r3, #1
 801533e:	b29a      	uxth	r2, r3
 8015340:	4b23      	ldr	r3, [pc, #140]	; (80153d0 <ip4_output_if_src+0x154>)
 8015342:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015344:	68bb      	ldr	r3, [r7, #8]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d104      	bne.n	8015354 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801534a:	4b22      	ldr	r3, [pc, #136]	; (80153d4 <ip4_output_if_src+0x158>)
 801534c:	681a      	ldr	r2, [r3, #0]
 801534e:	69fb      	ldr	r3, [r7, #28]
 8015350:	60da      	str	r2, [r3, #12]
 8015352:	e003      	b.n	801535c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015354:	68bb      	ldr	r3, [r7, #8]
 8015356:	681a      	ldr	r2, [r3, #0]
 8015358:	69fb      	ldr	r3, [r7, #28]
 801535a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801535c:	69fb      	ldr	r3, [r7, #28]
 801535e:	2200      	movs	r2, #0
 8015360:	729a      	strb	r2, [r3, #10]
 8015362:	2200      	movs	r2, #0
 8015364:	72da      	strb	r2, [r3, #11]
 8015366:	e00f      	b.n	8015388 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	895b      	ldrh	r3, [r3, #10]
 801536c:	2b13      	cmp	r3, #19
 801536e:	d802      	bhi.n	8015376 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015370:	f06f 0301 	mvn.w	r3, #1
 8015374:	e020      	b.n	80153b8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	685b      	ldr	r3, [r3, #4]
 801537a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801537c:	69fb      	ldr	r3, [r7, #28]
 801537e:	691b      	ldr	r3, [r3, #16]
 8015380:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015382:	f107 0314 	add.w	r3, r7, #20
 8015386:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801538c:	2b00      	cmp	r3, #0
 801538e:	d00c      	beq.n	80153aa <ip4_output_if_src+0x12e>
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	891a      	ldrh	r2, [r3, #8]
 8015394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015396:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015398:	429a      	cmp	r2, r3
 801539a:	d906      	bls.n	80153aa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801539c:	687a      	ldr	r2, [r7, #4]
 801539e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80153a0:	68f8      	ldr	r0, [r7, #12]
 80153a2:	f000 fd53 	bl	8015e4c <ip4_frag>
 80153a6:	4603      	mov	r3, r0
 80153a8:	e006      	b.n	80153b8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80153aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ac:	695b      	ldr	r3, [r3, #20]
 80153ae:	687a      	ldr	r2, [r7, #4]
 80153b0:	68f9      	ldr	r1, [r7, #12]
 80153b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153b4:	4798      	blx	r3
 80153b6:	4603      	mov	r3, r0
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3720      	adds	r7, #32
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}
 80153c0:	08021720 	.word	0x08021720
 80153c4:	08021798 	.word	0x08021798
 80153c8:	080217a4 	.word	0x080217a4
 80153cc:	080217cc 	.word	0x080217cc
 80153d0:	24008e68 	.word	0x24008e68
 80153d4:	08024318 	.word	0x08024318

080153d8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80153d8:	b480      	push	{r7}
 80153da:	b085      	sub	sp, #20
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80153ec:	d002      	beq.n	80153f4 <ip4_addr_isbroadcast_u32+0x1c>
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d101      	bne.n	80153f8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80153f4:	2301      	movs	r3, #1
 80153f6:	e02a      	b.n	801544e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153fe:	f003 0302 	and.w	r3, r3, #2
 8015402:	2b00      	cmp	r3, #0
 8015404:	d101      	bne.n	801540a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015406:	2300      	movs	r3, #0
 8015408:	e021      	b.n	801544e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	3304      	adds	r3, #4
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	687a      	ldr	r2, [r7, #4]
 8015412:	429a      	cmp	r2, r3
 8015414:	d101      	bne.n	801541a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015416:	2300      	movs	r3, #0
 8015418:	e019      	b.n	801544e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801541a:	68fa      	ldr	r2, [r7, #12]
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	3304      	adds	r3, #4
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	405a      	eors	r2, r3
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	3308      	adds	r3, #8
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	4013      	ands	r3, r2
 801542c:	2b00      	cmp	r3, #0
 801542e:	d10d      	bne.n	801544c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	3308      	adds	r3, #8
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	43da      	mvns	r2, r3
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	3308      	adds	r3, #8
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015444:	429a      	cmp	r2, r3
 8015446:	d101      	bne.n	801544c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015448:	2301      	movs	r3, #1
 801544a:	e000      	b.n	801544e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801544c:	2300      	movs	r3, #0
  }
}
 801544e:	4618      	mov	r0, r3
 8015450:	3714      	adds	r7, #20
 8015452:	46bd      	mov	sp, r7
 8015454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015458:	4770      	bx	lr
	...

0801545c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b084      	sub	sp, #16
 8015460:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015462:	2300      	movs	r3, #0
 8015464:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015466:	4b12      	ldr	r3, [pc, #72]	; (80154b0 <ip_reass_tmr+0x54>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801546c:	e018      	b.n	80154a0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	7fdb      	ldrb	r3, [r3, #31]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d00b      	beq.n	801548e <ip_reass_tmr+0x32>
      r->timer--;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	7fdb      	ldrb	r3, [r3, #31]
 801547a:	3b01      	subs	r3, #1
 801547c:	b2da      	uxtb	r2, r3
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	60fb      	str	r3, [r7, #12]
 801548c:	e008      	b.n	80154a0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015498:	68b9      	ldr	r1, [r7, #8]
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	f000 f80a 	bl	80154b4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d1e3      	bne.n	801546e <ip_reass_tmr+0x12>
    }
  }
}
 80154a6:	bf00      	nop
 80154a8:	bf00      	nop
 80154aa:	3710      	adds	r7, #16
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}
 80154b0:	24008e6c 	.word	0x24008e6c

080154b4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b088      	sub	sp, #32
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	6078      	str	r0, [r7, #4]
 80154bc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80154be:	2300      	movs	r3, #0
 80154c0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80154c2:	683a      	ldr	r2, [r7, #0]
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	429a      	cmp	r2, r3
 80154c8:	d105      	bne.n	80154d6 <ip_reass_free_complete_datagram+0x22>
 80154ca:	4b45      	ldr	r3, [pc, #276]	; (80155e0 <ip_reass_free_complete_datagram+0x12c>)
 80154cc:	22ab      	movs	r2, #171	; 0xab
 80154ce:	4945      	ldr	r1, [pc, #276]	; (80155e4 <ip_reass_free_complete_datagram+0x130>)
 80154d0:	4845      	ldr	r0, [pc, #276]	; (80155e8 <ip_reass_free_complete_datagram+0x134>)
 80154d2:	f00a fa93 	bl	801f9fc <iprintf>
  if (prev != NULL) {
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d00a      	beq.n	80154f2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	687a      	ldr	r2, [r7, #4]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d005      	beq.n	80154f2 <ip_reass_free_complete_datagram+0x3e>
 80154e6:	4b3e      	ldr	r3, [pc, #248]	; (80155e0 <ip_reass_free_complete_datagram+0x12c>)
 80154e8:	22ad      	movs	r2, #173	; 0xad
 80154ea:	4940      	ldr	r1, [pc, #256]	; (80155ec <ip_reass_free_complete_datagram+0x138>)
 80154ec:	483e      	ldr	r0, [pc, #248]	; (80155e8 <ip_reass_free_complete_datagram+0x134>)
 80154ee:	f00a fa85 	bl	801f9fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	685b      	ldr	r3, [r3, #4]
 80154f8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80154fa:	697b      	ldr	r3, [r7, #20]
 80154fc:	889b      	ldrh	r3, [r3, #4]
 80154fe:	b29b      	uxth	r3, r3
 8015500:	2b00      	cmp	r3, #0
 8015502:	d12a      	bne.n	801555a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	681a      	ldr	r2, [r3, #0]
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015512:	69bb      	ldr	r3, [r7, #24]
 8015514:	6858      	ldr	r0, [r3, #4]
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	3308      	adds	r3, #8
 801551a:	2214      	movs	r2, #20
 801551c:	4619      	mov	r1, r3
 801551e:	f009 fe6f 	bl	801f200 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015522:	2101      	movs	r1, #1
 8015524:	69b8      	ldr	r0, [r7, #24]
 8015526:	f7ff fb69 	bl	8014bfc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801552a:	69b8      	ldr	r0, [r7, #24]
 801552c:	f002 fa48 	bl	80179c0 <pbuf_clen>
 8015530:	4603      	mov	r3, r0
 8015532:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015534:	8bfa      	ldrh	r2, [r7, #30]
 8015536:	8a7b      	ldrh	r3, [r7, #18]
 8015538:	4413      	add	r3, r2
 801553a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801553e:	db05      	blt.n	801554c <ip_reass_free_complete_datagram+0x98>
 8015540:	4b27      	ldr	r3, [pc, #156]	; (80155e0 <ip_reass_free_complete_datagram+0x12c>)
 8015542:	22bc      	movs	r2, #188	; 0xbc
 8015544:	492a      	ldr	r1, [pc, #168]	; (80155f0 <ip_reass_free_complete_datagram+0x13c>)
 8015546:	4828      	ldr	r0, [pc, #160]	; (80155e8 <ip_reass_free_complete_datagram+0x134>)
 8015548:	f00a fa58 	bl	801f9fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801554c:	8bfa      	ldrh	r2, [r7, #30]
 801554e:	8a7b      	ldrh	r3, [r7, #18]
 8015550:	4413      	add	r3, r2
 8015552:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015554:	69b8      	ldr	r0, [r7, #24]
 8015556:	f002 f9a5 	bl	80178a4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	685b      	ldr	r3, [r3, #4]
 801555e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015560:	e01f      	b.n	80155a2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015562:	69bb      	ldr	r3, [r7, #24]
 8015564:	685b      	ldr	r3, [r3, #4]
 8015566:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015568:	69bb      	ldr	r3, [r7, #24]
 801556a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015572:	68f8      	ldr	r0, [r7, #12]
 8015574:	f002 fa24 	bl	80179c0 <pbuf_clen>
 8015578:	4603      	mov	r3, r0
 801557a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801557c:	8bfa      	ldrh	r2, [r7, #30]
 801557e:	8a7b      	ldrh	r3, [r7, #18]
 8015580:	4413      	add	r3, r2
 8015582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015586:	db05      	blt.n	8015594 <ip_reass_free_complete_datagram+0xe0>
 8015588:	4b15      	ldr	r3, [pc, #84]	; (80155e0 <ip_reass_free_complete_datagram+0x12c>)
 801558a:	22cc      	movs	r2, #204	; 0xcc
 801558c:	4918      	ldr	r1, [pc, #96]	; (80155f0 <ip_reass_free_complete_datagram+0x13c>)
 801558e:	4816      	ldr	r0, [pc, #88]	; (80155e8 <ip_reass_free_complete_datagram+0x134>)
 8015590:	f00a fa34 	bl	801f9fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015594:	8bfa      	ldrh	r2, [r7, #30]
 8015596:	8a7b      	ldrh	r3, [r7, #18]
 8015598:	4413      	add	r3, r2
 801559a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801559c:	68f8      	ldr	r0, [r7, #12]
 801559e:	f002 f981 	bl	80178a4 <pbuf_free>
  while (p != NULL) {
 80155a2:	69bb      	ldr	r3, [r7, #24]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d1dc      	bne.n	8015562 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80155a8:	6839      	ldr	r1, [r7, #0]
 80155aa:	6878      	ldr	r0, [r7, #4]
 80155ac:	f000 f8c2 	bl	8015734 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80155b0:	4b10      	ldr	r3, [pc, #64]	; (80155f4 <ip_reass_free_complete_datagram+0x140>)
 80155b2:	881b      	ldrh	r3, [r3, #0]
 80155b4:	8bfa      	ldrh	r2, [r7, #30]
 80155b6:	429a      	cmp	r2, r3
 80155b8:	d905      	bls.n	80155c6 <ip_reass_free_complete_datagram+0x112>
 80155ba:	4b09      	ldr	r3, [pc, #36]	; (80155e0 <ip_reass_free_complete_datagram+0x12c>)
 80155bc:	22d2      	movs	r2, #210	; 0xd2
 80155be:	490e      	ldr	r1, [pc, #56]	; (80155f8 <ip_reass_free_complete_datagram+0x144>)
 80155c0:	4809      	ldr	r0, [pc, #36]	; (80155e8 <ip_reass_free_complete_datagram+0x134>)
 80155c2:	f00a fa1b 	bl	801f9fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80155c6:	4b0b      	ldr	r3, [pc, #44]	; (80155f4 <ip_reass_free_complete_datagram+0x140>)
 80155c8:	881a      	ldrh	r2, [r3, #0]
 80155ca:	8bfb      	ldrh	r3, [r7, #30]
 80155cc:	1ad3      	subs	r3, r2, r3
 80155ce:	b29a      	uxth	r2, r3
 80155d0:	4b08      	ldr	r3, [pc, #32]	; (80155f4 <ip_reass_free_complete_datagram+0x140>)
 80155d2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80155d4:	8bfb      	ldrh	r3, [r7, #30]
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3720      	adds	r7, #32
 80155da:	46bd      	mov	sp, r7
 80155dc:	bd80      	pop	{r7, pc}
 80155de:	bf00      	nop
 80155e0:	080217fc 	.word	0x080217fc
 80155e4:	08021878 	.word	0x08021878
 80155e8:	08021884 	.word	0x08021884
 80155ec:	080218ac 	.word	0x080218ac
 80155f0:	080218c0 	.word	0x080218c0
 80155f4:	24008e70 	.word	0x24008e70
 80155f8:	080218e0 	.word	0x080218e0

080155fc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b08a      	sub	sp, #40	; 0x28
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015606:	2300      	movs	r3, #0
 8015608:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801560a:	2300      	movs	r3, #0
 801560c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801560e:	2300      	movs	r3, #0
 8015610:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015612:	2300      	movs	r3, #0
 8015614:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015616:	2300      	movs	r3, #0
 8015618:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801561a:	4b28      	ldr	r3, [pc, #160]	; (80156bc <ip_reass_remove_oldest_datagram+0xc0>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015620:	e030      	b.n	8015684 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015624:	695a      	ldr	r2, [r3, #20]
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	68db      	ldr	r3, [r3, #12]
 801562a:	429a      	cmp	r2, r3
 801562c:	d10c      	bne.n	8015648 <ip_reass_remove_oldest_datagram+0x4c>
 801562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015630:	699a      	ldr	r2, [r3, #24]
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	691b      	ldr	r3, [r3, #16]
 8015636:	429a      	cmp	r2, r3
 8015638:	d106      	bne.n	8015648 <ip_reass_remove_oldest_datagram+0x4c>
 801563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563c:	899a      	ldrh	r2, [r3, #12]
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	889b      	ldrh	r3, [r3, #4]
 8015642:	b29b      	uxth	r3, r3
 8015644:	429a      	cmp	r2, r3
 8015646:	d014      	beq.n	8015672 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015648:	693b      	ldr	r3, [r7, #16]
 801564a:	3301      	adds	r3, #1
 801564c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801564e:	6a3b      	ldr	r3, [r7, #32]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d104      	bne.n	801565e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015656:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	61bb      	str	r3, [r7, #24]
 801565c:	e009      	b.n	8015672 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015660:	7fda      	ldrb	r2, [r3, #31]
 8015662:	6a3b      	ldr	r3, [r7, #32]
 8015664:	7fdb      	ldrb	r3, [r3, #31]
 8015666:	429a      	cmp	r2, r3
 8015668:	d803      	bhi.n	8015672 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801566c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801566e:	69fb      	ldr	r3, [r7, #28]
 8015670:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d001      	beq.n	801567e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015686:	2b00      	cmp	r3, #0
 8015688:	d1cb      	bne.n	8015622 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801568a:	6a3b      	ldr	r3, [r7, #32]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d008      	beq.n	80156a2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015690:	69b9      	ldr	r1, [r7, #24]
 8015692:	6a38      	ldr	r0, [r7, #32]
 8015694:	f7ff ff0e 	bl	80154b4 <ip_reass_free_complete_datagram>
 8015698:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801569a:	697a      	ldr	r2, [r7, #20]
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	4413      	add	r3, r2
 80156a0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80156a2:	697a      	ldr	r2, [r7, #20]
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	da02      	bge.n	80156b0 <ip_reass_remove_oldest_datagram+0xb4>
 80156aa:	693b      	ldr	r3, [r7, #16]
 80156ac:	2b01      	cmp	r3, #1
 80156ae:	dcac      	bgt.n	801560a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80156b0:	697b      	ldr	r3, [r7, #20]
}
 80156b2:	4618      	mov	r0, r3
 80156b4:	3728      	adds	r7, #40	; 0x28
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}
 80156ba:	bf00      	nop
 80156bc:	24008e6c 	.word	0x24008e6c

080156c0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
 80156c8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80156ca:	2004      	movs	r0, #4
 80156cc:	f001 f980 	bl	80169d0 <memp_malloc>
 80156d0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d110      	bne.n	80156fa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80156d8:	6839      	ldr	r1, [r7, #0]
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f7ff ff8e 	bl	80155fc <ip_reass_remove_oldest_datagram>
 80156e0:	4602      	mov	r2, r0
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	4293      	cmp	r3, r2
 80156e6:	dc03      	bgt.n	80156f0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80156e8:	2004      	movs	r0, #4
 80156ea:	f001 f971 	bl	80169d0 <memp_malloc>
 80156ee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d101      	bne.n	80156fa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80156f6:	2300      	movs	r3, #0
 80156f8:	e016      	b.n	8015728 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80156fa:	2220      	movs	r2, #32
 80156fc:	2100      	movs	r1, #0
 80156fe:	68f8      	ldr	r0, [r7, #12]
 8015700:	f009 fda6 	bl	801f250 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	220f      	movs	r2, #15
 8015708:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801570a:	4b09      	ldr	r3, [pc, #36]	; (8015730 <ip_reass_enqueue_new_datagram+0x70>)
 801570c:	681a      	ldr	r2, [r3, #0]
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015712:	4a07      	ldr	r2, [pc, #28]	; (8015730 <ip_reass_enqueue_new_datagram+0x70>)
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	3308      	adds	r3, #8
 801571c:	2214      	movs	r2, #20
 801571e:	6879      	ldr	r1, [r7, #4]
 8015720:	4618      	mov	r0, r3
 8015722:	f009 fd6d 	bl	801f200 <memcpy>
  return ipr;
 8015726:	68fb      	ldr	r3, [r7, #12]
}
 8015728:	4618      	mov	r0, r3
 801572a:	3710      	adds	r7, #16
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}
 8015730:	24008e6c 	.word	0x24008e6c

08015734 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b082      	sub	sp, #8
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
 801573c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801573e:	4b10      	ldr	r3, [pc, #64]	; (8015780 <ip_reass_dequeue_datagram+0x4c>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	687a      	ldr	r2, [r7, #4]
 8015744:	429a      	cmp	r2, r3
 8015746:	d104      	bne.n	8015752 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	4a0c      	ldr	r2, [pc, #48]	; (8015780 <ip_reass_dequeue_datagram+0x4c>)
 801574e:	6013      	str	r3, [r2, #0]
 8015750:	e00d      	b.n	801576e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015752:	683b      	ldr	r3, [r7, #0]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d106      	bne.n	8015766 <ip_reass_dequeue_datagram+0x32>
 8015758:	4b0a      	ldr	r3, [pc, #40]	; (8015784 <ip_reass_dequeue_datagram+0x50>)
 801575a:	f240 1245 	movw	r2, #325	; 0x145
 801575e:	490a      	ldr	r1, [pc, #40]	; (8015788 <ip_reass_dequeue_datagram+0x54>)
 8015760:	480a      	ldr	r0, [pc, #40]	; (801578c <ip_reass_dequeue_datagram+0x58>)
 8015762:	f00a f94b 	bl	801f9fc <iprintf>
    prev->next = ipr->next;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681a      	ldr	r2, [r3, #0]
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801576e:	6879      	ldr	r1, [r7, #4]
 8015770:	2004      	movs	r0, #4
 8015772:	f001 f9a3 	bl	8016abc <memp_free>
}
 8015776:	bf00      	nop
 8015778:	3708      	adds	r7, #8
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}
 801577e:	bf00      	nop
 8015780:	24008e6c 	.word	0x24008e6c
 8015784:	080217fc 	.word	0x080217fc
 8015788:	08021904 	.word	0x08021904
 801578c:	08021884 	.word	0x08021884

08015790 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b08c      	sub	sp, #48	; 0x30
 8015794:	af00      	add	r7, sp, #0
 8015796:	60f8      	str	r0, [r7, #12]
 8015798:	60b9      	str	r1, [r7, #8]
 801579a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801579c:	2300      	movs	r3, #0
 801579e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80157a0:	2301      	movs	r3, #1
 80157a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	685b      	ldr	r3, [r3, #4]
 80157a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80157aa:	69fb      	ldr	r3, [r7, #28]
 80157ac:	885b      	ldrh	r3, [r3, #2]
 80157ae:	b29b      	uxth	r3, r3
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7fe f8a3 	bl	80138fc <lwip_htons>
 80157b6:	4603      	mov	r3, r0
 80157b8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80157ba:	69fb      	ldr	r3, [r7, #28]
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	f003 030f 	and.w	r3, r3, #15
 80157c2:	b2db      	uxtb	r3, r3
 80157c4:	009b      	lsls	r3, r3, #2
 80157c6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80157c8:	7e7b      	ldrb	r3, [r7, #25]
 80157ca:	b29b      	uxth	r3, r3
 80157cc:	8b7a      	ldrh	r2, [r7, #26]
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d202      	bcs.n	80157d8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80157d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157d6:	e135      	b.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80157d8:	7e7b      	ldrb	r3, [r7, #25]
 80157da:	b29b      	uxth	r3, r3
 80157dc:	8b7a      	ldrh	r2, [r7, #26]
 80157de:	1ad3      	subs	r3, r2, r3
 80157e0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80157e2:	69fb      	ldr	r3, [r7, #28]
 80157e4:	88db      	ldrh	r3, [r3, #6]
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	4618      	mov	r0, r3
 80157ea:	f7fe f887 	bl	80138fc <lwip_htons>
 80157ee:	4603      	mov	r3, r0
 80157f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80157f4:	b29b      	uxth	r3, r3
 80157f6:	00db      	lsls	r3, r3, #3
 80157f8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	685b      	ldr	r3, [r3, #4]
 80157fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015802:	2200      	movs	r2, #0
 8015804:	701a      	strb	r2, [r3, #0]
 8015806:	2200      	movs	r2, #0
 8015808:	705a      	strb	r2, [r3, #1]
 801580a:	2200      	movs	r2, #0
 801580c:	709a      	strb	r2, [r3, #2]
 801580e:	2200      	movs	r2, #0
 8015810:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015814:	8afa      	ldrh	r2, [r7, #22]
 8015816:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015818:	8afa      	ldrh	r2, [r7, #22]
 801581a:	8b7b      	ldrh	r3, [r7, #26]
 801581c:	4413      	add	r3, r2
 801581e:	b29a      	uxth	r2, r3
 8015820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015822:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015826:	88db      	ldrh	r3, [r3, #6]
 8015828:	b29b      	uxth	r3, r3
 801582a:	8afa      	ldrh	r2, [r7, #22]
 801582c:	429a      	cmp	r2, r3
 801582e:	d902      	bls.n	8015836 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015834:	e106      	b.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	627b      	str	r3, [r7, #36]	; 0x24
 801583c:	e068      	b.n	8015910 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015840:	685b      	ldr	r3, [r3, #4]
 8015842:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015846:	889b      	ldrh	r3, [r3, #4]
 8015848:	b29a      	uxth	r2, r3
 801584a:	693b      	ldr	r3, [r7, #16]
 801584c:	889b      	ldrh	r3, [r3, #4]
 801584e:	b29b      	uxth	r3, r3
 8015850:	429a      	cmp	r2, r3
 8015852:	d235      	bcs.n	80158c0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015858:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801585c:	2b00      	cmp	r3, #0
 801585e:	d020      	beq.n	80158a2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015862:	889b      	ldrh	r3, [r3, #4]
 8015864:	b29a      	uxth	r2, r3
 8015866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015868:	88db      	ldrh	r3, [r3, #6]
 801586a:	b29b      	uxth	r3, r3
 801586c:	429a      	cmp	r2, r3
 801586e:	d307      	bcc.n	8015880 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015872:	88db      	ldrh	r3, [r3, #6]
 8015874:	b29a      	uxth	r2, r3
 8015876:	693b      	ldr	r3, [r7, #16]
 8015878:	889b      	ldrh	r3, [r3, #4]
 801587a:	b29b      	uxth	r3, r3
 801587c:	429a      	cmp	r2, r3
 801587e:	d902      	bls.n	8015886 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015884:	e0de      	b.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015888:	68ba      	ldr	r2, [r7, #8]
 801588a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801588e:	88db      	ldrh	r3, [r3, #6]
 8015890:	b29a      	uxth	r2, r3
 8015892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015894:	889b      	ldrh	r3, [r3, #4]
 8015896:	b29b      	uxth	r3, r3
 8015898:	429a      	cmp	r2, r3
 801589a:	d03d      	beq.n	8015918 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801589c:	2300      	movs	r3, #0
 801589e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80158a0:	e03a      	b.n	8015918 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80158a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a4:	88db      	ldrh	r3, [r3, #6]
 80158a6:	b29a      	uxth	r2, r3
 80158a8:	693b      	ldr	r3, [r7, #16]
 80158aa:	889b      	ldrh	r3, [r3, #4]
 80158ac:	b29b      	uxth	r3, r3
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d902      	bls.n	80158b8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158b6:	e0c5      	b.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	68ba      	ldr	r2, [r7, #8]
 80158bc:	605a      	str	r2, [r3, #4]
      break;
 80158be:	e02b      	b.n	8015918 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80158c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c2:	889b      	ldrh	r3, [r3, #4]
 80158c4:	b29a      	uxth	r2, r3
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	889b      	ldrh	r3, [r3, #4]
 80158ca:	b29b      	uxth	r3, r3
 80158cc:	429a      	cmp	r2, r3
 80158ce:	d102      	bne.n	80158d6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158d4:	e0b6      	b.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80158d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d8:	889b      	ldrh	r3, [r3, #4]
 80158da:	b29a      	uxth	r2, r3
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	88db      	ldrh	r3, [r3, #6]
 80158e0:	b29b      	uxth	r3, r3
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d202      	bcs.n	80158ec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158ea:	e0ab      	b.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80158ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d009      	beq.n	8015906 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80158f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f4:	88db      	ldrh	r3, [r3, #6]
 80158f6:	b29a      	uxth	r2, r3
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	889b      	ldrh	r3, [r3, #4]
 80158fc:	b29b      	uxth	r3, r3
 80158fe:	429a      	cmp	r2, r3
 8015900:	d001      	beq.n	8015906 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015902:	2300      	movs	r3, #0
 8015904:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015906:	693b      	ldr	r3, [r7, #16]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801590c:	693b      	ldr	r3, [r7, #16]
 801590e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015912:	2b00      	cmp	r3, #0
 8015914:	d193      	bne.n	801583e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015916:	e000      	b.n	801591a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015918:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801591c:	2b00      	cmp	r3, #0
 801591e:	d12d      	bne.n	801597c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015922:	2b00      	cmp	r3, #0
 8015924:	d01c      	beq.n	8015960 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015928:	88db      	ldrh	r3, [r3, #6]
 801592a:	b29a      	uxth	r2, r3
 801592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801592e:	889b      	ldrh	r3, [r3, #4]
 8015930:	b29b      	uxth	r3, r3
 8015932:	429a      	cmp	r2, r3
 8015934:	d906      	bls.n	8015944 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015936:	4b45      	ldr	r3, [pc, #276]	; (8015a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015938:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801593c:	4944      	ldr	r1, [pc, #272]	; (8015a50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801593e:	4845      	ldr	r0, [pc, #276]	; (8015a54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015940:	f00a f85c 	bl	801f9fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015946:	68ba      	ldr	r2, [r7, #8]
 8015948:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801594c:	88db      	ldrh	r3, [r3, #6]
 801594e:	b29a      	uxth	r2, r3
 8015950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015952:	889b      	ldrh	r3, [r3, #4]
 8015954:	b29b      	uxth	r3, r3
 8015956:	429a      	cmp	r2, r3
 8015958:	d010      	beq.n	801597c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801595a:	2300      	movs	r3, #0
 801595c:	623b      	str	r3, [r7, #32]
 801595e:	e00d      	b.n	801597c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	685b      	ldr	r3, [r3, #4]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d006      	beq.n	8015976 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015968:	4b38      	ldr	r3, [pc, #224]	; (8015a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801596a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801596e:	493a      	ldr	r1, [pc, #232]	; (8015a58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015970:	4838      	ldr	r0, [pc, #224]	; (8015a54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015972:	f00a f843 	bl	801f9fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	68ba      	ldr	r2, [r7, #8]
 801597a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d105      	bne.n	801598e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	7f9b      	ldrb	r3, [r3, #30]
 8015986:	f003 0301 	and.w	r3, r3, #1
 801598a:	2b00      	cmp	r3, #0
 801598c:	d059      	beq.n	8015a42 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801598e:	6a3b      	ldr	r3, [r7, #32]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d04f      	beq.n	8015a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d006      	beq.n	80159aa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	685b      	ldr	r3, [r3, #4]
 80159a0:	685b      	ldr	r3, [r3, #4]
 80159a2:	889b      	ldrh	r3, [r3, #4]
 80159a4:	b29b      	uxth	r3, r3
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d002      	beq.n	80159b0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80159aa:	2300      	movs	r3, #0
 80159ac:	623b      	str	r3, [r7, #32]
 80159ae:	e041      	b.n	8015a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80159b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80159b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80159ba:	e012      	b.n	80159e2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80159bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159be:	685b      	ldr	r3, [r3, #4]
 80159c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80159c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159c4:	88db      	ldrh	r3, [r3, #6]
 80159c6:	b29a      	uxth	r2, r3
 80159c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ca:	889b      	ldrh	r3, [r3, #4]
 80159cc:	b29b      	uxth	r3, r3
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d002      	beq.n	80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80159d2:	2300      	movs	r3, #0
 80159d4:	623b      	str	r3, [r7, #32]
            break;
 80159d6:	e007      	b.n	80159e8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80159d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159da:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80159dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80159e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d1e9      	bne.n	80159bc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80159e8:	6a3b      	ldr	r3, [r7, #32]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d022      	beq.n	8015a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	685b      	ldr	r3, [r3, #4]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d106      	bne.n	8015a04 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80159f6:	4b15      	ldr	r3, [pc, #84]	; (8015a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80159f8:	f240 12df 	movw	r2, #479	; 0x1df
 80159fc:	4917      	ldr	r1, [pc, #92]	; (8015a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80159fe:	4815      	ldr	r0, [pc, #84]	; (8015a54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a00:	f009 fffc 	bl	801f9fc <iprintf>
          LWIP_ASSERT("sanity check",
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	685b      	ldr	r3, [r3, #4]
 8015a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d106      	bne.n	8015a1e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015a10:	4b0e      	ldr	r3, [pc, #56]	; (8015a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a12:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015a16:	4911      	ldr	r1, [pc, #68]	; (8015a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015a18:	480e      	ldr	r0, [pc, #56]	; (8015a54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a1a:	f009 ffef 	bl	801f9fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d006      	beq.n	8015a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015a26:	4b09      	ldr	r3, [pc, #36]	; (8015a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a28:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015a2c:	490c      	ldr	r1, [pc, #48]	; (8015a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015a2e:	4809      	ldr	r0, [pc, #36]	; (8015a54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a30:	f009 ffe4 	bl	801f9fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015a34:	6a3b      	ldr	r3, [r7, #32]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	bf14      	ite	ne
 8015a3a:	2301      	movne	r3, #1
 8015a3c:	2300      	moveq	r3, #0
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	e000      	b.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015a42:	2300      	movs	r3, #0
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	3730      	adds	r7, #48	; 0x30
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}
 8015a4c:	080217fc 	.word	0x080217fc
 8015a50:	08021920 	.word	0x08021920
 8015a54:	08021884 	.word	0x08021884
 8015a58:	08021940 	.word	0x08021940
 8015a5c:	08021978 	.word	0x08021978
 8015a60:	08021988 	.word	0x08021988

08015a64 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b08e      	sub	sp, #56	; 0x38
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	685b      	ldr	r3, [r3, #4]
 8015a70:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a74:	781b      	ldrb	r3, [r3, #0]
 8015a76:	f003 030f 	and.w	r3, r3, #15
 8015a7a:	b2db      	uxtb	r3, r3
 8015a7c:	009b      	lsls	r3, r3, #2
 8015a7e:	b2db      	uxtb	r3, r3
 8015a80:	2b14      	cmp	r3, #20
 8015a82:	f040 8171 	bne.w	8015d68 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a88:	88db      	ldrh	r3, [r3, #6]
 8015a8a:	b29b      	uxth	r3, r3
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7fd ff35 	bl	80138fc <lwip_htons>
 8015a92:	4603      	mov	r3, r0
 8015a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a98:	b29b      	uxth	r3, r3
 8015a9a:	00db      	lsls	r3, r3, #3
 8015a9c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aa0:	885b      	ldrh	r3, [r3, #2]
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7fd ff29 	bl	80138fc <lwip_htons>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	f003 030f 	and.w	r3, r3, #15
 8015ab6:	b2db      	uxtb	r3, r3
 8015ab8:	009b      	lsls	r3, r3, #2
 8015aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015abe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015ac2:	b29b      	uxth	r3, r3
 8015ac4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	f0c0 8150 	bcc.w	8015d6c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015ad0:	b29b      	uxth	r3, r3
 8015ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ad4:	1ad3      	subs	r3, r2, r3
 8015ad6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f001 ff71 	bl	80179c0 <pbuf_clen>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015ae2:	4b8c      	ldr	r3, [pc, #560]	; (8015d14 <ip4_reass+0x2b0>)
 8015ae4:	881b      	ldrh	r3, [r3, #0]
 8015ae6:	461a      	mov	r2, r3
 8015ae8:	8c3b      	ldrh	r3, [r7, #32]
 8015aea:	4413      	add	r3, r2
 8015aec:	2b0a      	cmp	r3, #10
 8015aee:	dd10      	ble.n	8015b12 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015af0:	8c3b      	ldrh	r3, [r7, #32]
 8015af2:	4619      	mov	r1, r3
 8015af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015af6:	f7ff fd81 	bl	80155fc <ip_reass_remove_oldest_datagram>
 8015afa:	4603      	mov	r3, r0
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	f000 8137 	beq.w	8015d70 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015b02:	4b84      	ldr	r3, [pc, #528]	; (8015d14 <ip4_reass+0x2b0>)
 8015b04:	881b      	ldrh	r3, [r3, #0]
 8015b06:	461a      	mov	r2, r3
 8015b08:	8c3b      	ldrh	r3, [r7, #32]
 8015b0a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015b0c:	2b0a      	cmp	r3, #10
 8015b0e:	f300 812f 	bgt.w	8015d70 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015b12:	4b81      	ldr	r3, [pc, #516]	; (8015d18 <ip4_reass+0x2b4>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	633b      	str	r3, [r7, #48]	; 0x30
 8015b18:	e015      	b.n	8015b46 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b1c:	695a      	ldr	r2, [r3, #20]
 8015b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b20:	68db      	ldr	r3, [r3, #12]
 8015b22:	429a      	cmp	r2, r3
 8015b24:	d10c      	bne.n	8015b40 <ip4_reass+0xdc>
 8015b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b28:	699a      	ldr	r2, [r3, #24]
 8015b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b2c:	691b      	ldr	r3, [r3, #16]
 8015b2e:	429a      	cmp	r2, r3
 8015b30:	d106      	bne.n	8015b40 <ip4_reass+0xdc>
 8015b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b34:	899a      	ldrh	r2, [r3, #12]
 8015b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b38:	889b      	ldrh	r3, [r3, #4]
 8015b3a:	b29b      	uxth	r3, r3
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d006      	beq.n	8015b4e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	633b      	str	r3, [r7, #48]	; 0x30
 8015b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d1e6      	bne.n	8015b1a <ip4_reass+0xb6>
 8015b4c:	e000      	b.n	8015b50 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015b4e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d109      	bne.n	8015b6a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015b56:	8c3b      	ldrh	r3, [r7, #32]
 8015b58:	4619      	mov	r1, r3
 8015b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b5c:	f7ff fdb0 	bl	80156c0 <ip_reass_enqueue_new_datagram>
 8015b60:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d11c      	bne.n	8015ba2 <ip4_reass+0x13e>
      goto nullreturn;
 8015b68:	e105      	b.n	8015d76 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b6c:	88db      	ldrh	r3, [r3, #6]
 8015b6e:	b29b      	uxth	r3, r3
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7fd fec3 	bl	80138fc <lwip_htons>
 8015b76:	4603      	mov	r3, r0
 8015b78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d110      	bne.n	8015ba2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b82:	89db      	ldrh	r3, [r3, #14]
 8015b84:	4618      	mov	r0, r3
 8015b86:	f7fd feb9 	bl	80138fc <lwip_htons>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d006      	beq.n	8015ba2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b96:	3308      	adds	r3, #8
 8015b98:	2214      	movs	r2, #20
 8015b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f009 fb2f 	bl	801f200 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ba4:	88db      	ldrh	r3, [r3, #6]
 8015ba6:	b29b      	uxth	r3, r3
 8015ba8:	f003 0320 	and.w	r3, r3, #32
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	bf0c      	ite	eq
 8015bb0:	2301      	moveq	r3, #1
 8015bb2:	2300      	movne	r3, #0
 8015bb4:	b2db      	uxtb	r3, r3
 8015bb6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015bb8:	69fb      	ldr	r3, [r7, #28]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d00e      	beq.n	8015bdc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015bbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015bc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bc2:	4413      	add	r3, r2
 8015bc4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015bc6:	8b7a      	ldrh	r2, [r7, #26]
 8015bc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	f0c0 80a0 	bcc.w	8015d10 <ip4_reass+0x2ac>
 8015bd0:	8b7b      	ldrh	r3, [r7, #26]
 8015bd2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015bd6:	4293      	cmp	r3, r2
 8015bd8:	f200 809a 	bhi.w	8015d10 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015bdc:	69fa      	ldr	r2, [r7, #28]
 8015bde:	6879      	ldr	r1, [r7, #4]
 8015be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015be2:	f7ff fdd5 	bl	8015790 <ip_reass_chain_frag_into_datagram_and_validate>
 8015be6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015bee:	f000 809b 	beq.w	8015d28 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015bf2:	4b48      	ldr	r3, [pc, #288]	; (8015d14 <ip4_reass+0x2b0>)
 8015bf4:	881a      	ldrh	r2, [r3, #0]
 8015bf6:	8c3b      	ldrh	r3, [r7, #32]
 8015bf8:	4413      	add	r3, r2
 8015bfa:	b29a      	uxth	r2, r3
 8015bfc:	4b45      	ldr	r3, [pc, #276]	; (8015d14 <ip4_reass+0x2b0>)
 8015bfe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015c00:	69fb      	ldr	r3, [r7, #28]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d00d      	beq.n	8015c22 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015c06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c0a:	4413      	add	r3, r2
 8015c0c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c10:	8a7a      	ldrh	r2, [r7, #18]
 8015c12:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c16:	7f9b      	ldrb	r3, [r3, #30]
 8015c18:	f043 0301 	orr.w	r3, r3, #1
 8015c1c:	b2da      	uxtb	r2, r3
 8015c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c20:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	2b01      	cmp	r3, #1
 8015c26:	d171      	bne.n	8015d0c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c2a:	8b9b      	ldrh	r3, [r3, #28]
 8015c2c:	3314      	adds	r3, #20
 8015c2e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c32:	685b      	ldr	r3, [r3, #4]
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3c:	685b      	ldr	r3, [r3, #4]
 8015c3e:	685b      	ldr	r3, [r3, #4]
 8015c40:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c44:	3308      	adds	r3, #8
 8015c46:	2214      	movs	r2, #20
 8015c48:	4619      	mov	r1, r3
 8015c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c4c:	f009 fad8 	bl	801f200 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015c50:	8a3b      	ldrh	r3, [r7, #16]
 8015c52:	4618      	mov	r0, r3
 8015c54:	f7fd fe52 	bl	80138fc <lwip_htons>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	461a      	mov	r2, r3
 8015c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c5e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c62:	2200      	movs	r2, #0
 8015c64:	719a      	strb	r2, [r3, #6]
 8015c66:	2200      	movs	r2, #0
 8015c68:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	729a      	strb	r2, [r3, #10]
 8015c70:	2200      	movs	r2, #0
 8015c72:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c76:	685b      	ldr	r3, [r3, #4]
 8015c78:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015c7a:	e00d      	b.n	8015c98 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c7e:	685b      	ldr	r3, [r3, #4]
 8015c80:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015c82:	2114      	movs	r1, #20
 8015c84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015c86:	f001 fd87 	bl	8017798 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015c8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	f001 fed7 	bl	8017a40 <pbuf_cat>
      r = iprh->next_pbuf;
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d1ee      	bne.n	8015c7c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015c9e:	4b1e      	ldr	r3, [pc, #120]	; (8015d18 <ip4_reass+0x2b4>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d102      	bne.n	8015cae <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cac:	e010      	b.n	8015cd0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015cae:	4b1a      	ldr	r3, [pc, #104]	; (8015d18 <ip4_reass+0x2b4>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cb4:	e007      	b.n	8015cc6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	d006      	beq.n	8015cce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d1f4      	bne.n	8015cb6 <ip4_reass+0x252>
 8015ccc:	e000      	b.n	8015cd0 <ip4_reass+0x26c>
          break;
 8015cce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cd4:	f7ff fd2e 	bl	8015734 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015cd8:	6878      	ldr	r0, [r7, #4]
 8015cda:	f001 fe71 	bl	80179c0 <pbuf_clen>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015ce2:	4b0c      	ldr	r3, [pc, #48]	; (8015d14 <ip4_reass+0x2b0>)
 8015ce4:	881b      	ldrh	r3, [r3, #0]
 8015ce6:	8c3a      	ldrh	r2, [r7, #32]
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d906      	bls.n	8015cfa <ip4_reass+0x296>
 8015cec:	4b0b      	ldr	r3, [pc, #44]	; (8015d1c <ip4_reass+0x2b8>)
 8015cee:	f240 229b 	movw	r2, #667	; 0x29b
 8015cf2:	490b      	ldr	r1, [pc, #44]	; (8015d20 <ip4_reass+0x2bc>)
 8015cf4:	480b      	ldr	r0, [pc, #44]	; (8015d24 <ip4_reass+0x2c0>)
 8015cf6:	f009 fe81 	bl	801f9fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015cfa:	4b06      	ldr	r3, [pc, #24]	; (8015d14 <ip4_reass+0x2b0>)
 8015cfc:	881a      	ldrh	r2, [r3, #0]
 8015cfe:	8c3b      	ldrh	r3, [r7, #32]
 8015d00:	1ad3      	subs	r3, r2, r3
 8015d02:	b29a      	uxth	r2, r3
 8015d04:	4b03      	ldr	r3, [pc, #12]	; (8015d14 <ip4_reass+0x2b0>)
 8015d06:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	e038      	b.n	8015d7e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	e036      	b.n	8015d7e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015d10:	bf00      	nop
 8015d12:	e00a      	b.n	8015d2a <ip4_reass+0x2c6>
 8015d14:	24008e70 	.word	0x24008e70
 8015d18:	24008e6c 	.word	0x24008e6c
 8015d1c:	080217fc 	.word	0x080217fc
 8015d20:	080219ac 	.word	0x080219ac
 8015d24:	08021884 	.word	0x08021884
    goto nullreturn_ipr;
 8015d28:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d106      	bne.n	8015d3e <ip4_reass+0x2da>
 8015d30:	4b15      	ldr	r3, [pc, #84]	; (8015d88 <ip4_reass+0x324>)
 8015d32:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015d36:	4915      	ldr	r1, [pc, #84]	; (8015d8c <ip4_reass+0x328>)
 8015d38:	4815      	ldr	r0, [pc, #84]	; (8015d90 <ip4_reass+0x32c>)
 8015d3a:	f009 fe5f 	bl	801f9fc <iprintf>
  if (ipr->p == NULL) {
 8015d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d116      	bne.n	8015d74 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015d46:	4b13      	ldr	r3, [pc, #76]	; (8015d94 <ip4_reass+0x330>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d4c:	429a      	cmp	r2, r3
 8015d4e:	d006      	beq.n	8015d5e <ip4_reass+0x2fa>
 8015d50:	4b0d      	ldr	r3, [pc, #52]	; (8015d88 <ip4_reass+0x324>)
 8015d52:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015d56:	4910      	ldr	r1, [pc, #64]	; (8015d98 <ip4_reass+0x334>)
 8015d58:	480d      	ldr	r0, [pc, #52]	; (8015d90 <ip4_reass+0x32c>)
 8015d5a:	f009 fe4f 	bl	801f9fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015d5e:	2100      	movs	r1, #0
 8015d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d62:	f7ff fce7 	bl	8015734 <ip_reass_dequeue_datagram>
 8015d66:	e006      	b.n	8015d76 <ip4_reass+0x312>
    goto nullreturn;
 8015d68:	bf00      	nop
 8015d6a:	e004      	b.n	8015d76 <ip4_reass+0x312>
    goto nullreturn;
 8015d6c:	bf00      	nop
 8015d6e:	e002      	b.n	8015d76 <ip4_reass+0x312>
      goto nullreturn;
 8015d70:	bf00      	nop
 8015d72:	e000      	b.n	8015d76 <ip4_reass+0x312>
  }

nullreturn:
 8015d74:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f001 fd94 	bl	80178a4 <pbuf_free>
  return NULL;
 8015d7c:	2300      	movs	r3, #0
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3738      	adds	r7, #56	; 0x38
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	080217fc 	.word	0x080217fc
 8015d8c:	080219c8 	.word	0x080219c8
 8015d90:	08021884 	.word	0x08021884
 8015d94:	24008e6c 	.word	0x24008e6c
 8015d98:	080219d4 	.word	0x080219d4

08015d9c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015da0:	2005      	movs	r0, #5
 8015da2:	f000 fe15 	bl	80169d0 <memp_malloc>
 8015da6:	4603      	mov	r3, r0
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	bd80      	pop	{r7, pc}

08015dac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b082      	sub	sp, #8
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d106      	bne.n	8015dc8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015dba:	4b07      	ldr	r3, [pc, #28]	; (8015dd8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015dbc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015dc0:	4906      	ldr	r1, [pc, #24]	; (8015ddc <ip_frag_free_pbuf_custom_ref+0x30>)
 8015dc2:	4807      	ldr	r0, [pc, #28]	; (8015de0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015dc4:	f009 fe1a 	bl	801f9fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015dc8:	6879      	ldr	r1, [r7, #4]
 8015dca:	2005      	movs	r0, #5
 8015dcc:	f000 fe76 	bl	8016abc <memp_free>
}
 8015dd0:	bf00      	nop
 8015dd2:	3708      	adds	r7, #8
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	080217fc 	.word	0x080217fc
 8015ddc:	080219f4 	.word	0x080219f4
 8015de0:	08021884 	.word	0x08021884

08015de4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b084      	sub	sp, #16
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d106      	bne.n	8015e04 <ipfrag_free_pbuf_custom+0x20>
 8015df6:	4b11      	ldr	r3, [pc, #68]	; (8015e3c <ipfrag_free_pbuf_custom+0x58>)
 8015df8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015dfc:	4910      	ldr	r1, [pc, #64]	; (8015e40 <ipfrag_free_pbuf_custom+0x5c>)
 8015dfe:	4811      	ldr	r0, [pc, #68]	; (8015e44 <ipfrag_free_pbuf_custom+0x60>)
 8015e00:	f009 fdfc 	bl	801f9fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015e04:	68fa      	ldr	r2, [r7, #12]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d006      	beq.n	8015e1a <ipfrag_free_pbuf_custom+0x36>
 8015e0c:	4b0b      	ldr	r3, [pc, #44]	; (8015e3c <ipfrag_free_pbuf_custom+0x58>)
 8015e0e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015e12:	490d      	ldr	r1, [pc, #52]	; (8015e48 <ipfrag_free_pbuf_custom+0x64>)
 8015e14:	480b      	ldr	r0, [pc, #44]	; (8015e44 <ipfrag_free_pbuf_custom+0x60>)
 8015e16:	f009 fdf1 	bl	801f9fc <iprintf>
  if (pcr->original != NULL) {
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	695b      	ldr	r3, [r3, #20]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d004      	beq.n	8015e2c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	695b      	ldr	r3, [r3, #20]
 8015e26:	4618      	mov	r0, r3
 8015e28:	f001 fd3c 	bl	80178a4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015e2c:	68f8      	ldr	r0, [r7, #12]
 8015e2e:	f7ff ffbd 	bl	8015dac <ip_frag_free_pbuf_custom_ref>
}
 8015e32:	bf00      	nop
 8015e34:	3710      	adds	r7, #16
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}
 8015e3a:	bf00      	nop
 8015e3c:	080217fc 	.word	0x080217fc
 8015e40:	08021a00 	.word	0x08021a00
 8015e44:	08021884 	.word	0x08021884
 8015e48:	08021a0c 	.word	0x08021a0c

08015e4c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b094      	sub	sp, #80	; 0x50
 8015e50:	af02      	add	r7, sp, #8
 8015e52:	60f8      	str	r0, [r7, #12]
 8015e54:	60b9      	str	r1, [r7, #8]
 8015e56:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015e5e:	68bb      	ldr	r3, [r7, #8]
 8015e60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015e62:	3b14      	subs	r3, #20
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	da00      	bge.n	8015e6a <ip4_frag+0x1e>
 8015e68:	3307      	adds	r3, #7
 8015e6a:	10db      	asrs	r3, r3, #3
 8015e6c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015e6e:	2314      	movs	r3, #20
 8015e70:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	685b      	ldr	r3, [r3, #4]
 8015e76:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e7e:	781b      	ldrb	r3, [r3, #0]
 8015e80:	f003 030f 	and.w	r3, r3, #15
 8015e84:	b2db      	uxtb	r3, r3
 8015e86:	009b      	lsls	r3, r3, #2
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	2b14      	cmp	r3, #20
 8015e8c:	d002      	beq.n	8015e94 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015e8e:	f06f 0305 	mvn.w	r3, #5
 8015e92:	e110      	b.n	80160b6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	895b      	ldrh	r3, [r3, #10]
 8015e98:	2b13      	cmp	r3, #19
 8015e9a:	d809      	bhi.n	8015eb0 <ip4_frag+0x64>
 8015e9c:	4b88      	ldr	r3, [pc, #544]	; (80160c0 <ip4_frag+0x274>)
 8015e9e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015ea2:	4988      	ldr	r1, [pc, #544]	; (80160c4 <ip4_frag+0x278>)
 8015ea4:	4888      	ldr	r0, [pc, #544]	; (80160c8 <ip4_frag+0x27c>)
 8015ea6:	f009 fda9 	bl	801f9fc <iprintf>
 8015eaa:	f06f 0305 	mvn.w	r3, #5
 8015eae:	e102      	b.n	80160b6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb2:	88db      	ldrh	r3, [r3, #6]
 8015eb4:	b29b      	uxth	r3, r3
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f7fd fd20 	bl	80138fc <lwip_htons>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015ec0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015ec2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ec6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015eca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015ed0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	891b      	ldrh	r3, [r3, #8]
 8015ed6:	3b14      	subs	r3, #20
 8015ed8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015edc:	e0e1      	b.n	80160a2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015ede:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ee0:	00db      	lsls	r3, r3, #3
 8015ee2:	b29b      	uxth	r3, r3
 8015ee4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015ee8:	4293      	cmp	r3, r2
 8015eea:	bf28      	it	cs
 8015eec:	4613      	movcs	r3, r2
 8015eee:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015ef0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ef4:	2114      	movs	r1, #20
 8015ef6:	200e      	movs	r0, #14
 8015ef8:	f001 f9f0 	bl	80172dc <pbuf_alloc>
 8015efc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	f000 80d5 	beq.w	80160b0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f08:	895b      	ldrh	r3, [r3, #10]
 8015f0a:	2b13      	cmp	r3, #19
 8015f0c:	d806      	bhi.n	8015f1c <ip4_frag+0xd0>
 8015f0e:	4b6c      	ldr	r3, [pc, #432]	; (80160c0 <ip4_frag+0x274>)
 8015f10:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015f14:	496d      	ldr	r1, [pc, #436]	; (80160cc <ip4_frag+0x280>)
 8015f16:	486c      	ldr	r0, [pc, #432]	; (80160c8 <ip4_frag+0x27c>)
 8015f18:	f009 fd70 	bl	801f9fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	2214      	movs	r2, #20
 8015f22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015f24:	4618      	mov	r0, r3
 8015f26:	f009 f96b 	bl	801f200 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f2c:	685b      	ldr	r3, [r3, #4]
 8015f2e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015f30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015f32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015f36:	e064      	b.n	8016002 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	895a      	ldrh	r2, [r3, #10]
 8015f3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f3e:	1ad3      	subs	r3, r2, r3
 8015f40:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	895b      	ldrh	r3, [r3, #10]
 8015f46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015f48:	429a      	cmp	r2, r3
 8015f4a:	d906      	bls.n	8015f5a <ip4_frag+0x10e>
 8015f4c:	4b5c      	ldr	r3, [pc, #368]	; (80160c0 <ip4_frag+0x274>)
 8015f4e:	f240 322d 	movw	r2, #813	; 0x32d
 8015f52:	495f      	ldr	r1, [pc, #380]	; (80160d0 <ip4_frag+0x284>)
 8015f54:	485c      	ldr	r0, [pc, #368]	; (80160c8 <ip4_frag+0x27c>)
 8015f56:	f009 fd51 	bl	801f9fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015f5a:	8bfa      	ldrh	r2, [r7, #30]
 8015f5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015f60:	4293      	cmp	r3, r2
 8015f62:	bf28      	it	cs
 8015f64:	4613      	movcs	r3, r2
 8015f66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015f6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d105      	bne.n	8015f7e <ip4_frag+0x132>
        poff = 0;
 8015f72:	2300      	movs	r3, #0
 8015f74:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	60fb      	str	r3, [r7, #12]
        continue;
 8015f7c:	e041      	b.n	8016002 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015f7e:	f7ff ff0d 	bl	8015d9c <ip_frag_alloc_pbuf_custom_ref>
 8015f82:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015f84:	69bb      	ldr	r3, [r7, #24]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d103      	bne.n	8015f92 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015f8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f8c:	f001 fc8a 	bl	80178a4 <pbuf_free>
        goto memerr;
 8015f90:	e08f      	b.n	80160b2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015f92:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015f98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f9a:	4413      	add	r3, r2
 8015f9c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015fa0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015fa4:	9201      	str	r2, [sp, #4]
 8015fa6:	9300      	str	r3, [sp, #0]
 8015fa8:	4603      	mov	r3, r0
 8015faa:	2241      	movs	r2, #65	; 0x41
 8015fac:	2000      	movs	r0, #0
 8015fae:	f001 fac1 	bl	8017534 <pbuf_alloced_custom>
 8015fb2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d106      	bne.n	8015fc8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015fba:	69b8      	ldr	r0, [r7, #24]
 8015fbc:	f7ff fef6 	bl	8015dac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fc2:	f001 fc6f 	bl	80178a4 <pbuf_free>
        goto memerr;
 8015fc6:	e074      	b.n	80160b2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015fc8:	68f8      	ldr	r0, [r7, #12]
 8015fca:	f001 fd11 	bl	80179f0 <pbuf_ref>
      pcr->original = p;
 8015fce:	69bb      	ldr	r3, [r7, #24]
 8015fd0:	68fa      	ldr	r2, [r7, #12]
 8015fd2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015fd4:	69bb      	ldr	r3, [r7, #24]
 8015fd6:	4a3f      	ldr	r2, [pc, #252]	; (80160d4 <ip4_frag+0x288>)
 8015fd8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015fda:	6979      	ldr	r1, [r7, #20]
 8015fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fde:	f001 fd2f 	bl	8017a40 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015fe2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015fe6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015fea:	1ad3      	subs	r3, r2, r3
 8015fec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015ff0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d004      	beq.n	8016002 <ip4_frag+0x1b6>
        poff = 0;
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016002:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016006:	2b00      	cmp	r3, #0
 8016008:	d196      	bne.n	8015f38 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801600a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801600c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016010:	4413      	add	r3, r2
 8016012:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016018:	f1a3 0213 	sub.w	r2, r3, #19
 801601c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016020:	429a      	cmp	r2, r3
 8016022:	bfcc      	ite	gt
 8016024:	2301      	movgt	r3, #1
 8016026:	2300      	movle	r3, #0
 8016028:	b2db      	uxtb	r3, r3
 801602a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801602c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016034:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016036:	6a3b      	ldr	r3, [r7, #32]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d002      	beq.n	8016042 <ip4_frag+0x1f6>
 801603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801603e:	2b00      	cmp	r3, #0
 8016040:	d003      	beq.n	801604a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016042:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016044:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016048:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801604a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801604c:	4618      	mov	r0, r3
 801604e:	f7fd fc55 	bl	80138fc <lwip_htons>
 8016052:	4603      	mov	r3, r0
 8016054:	461a      	mov	r2, r3
 8016056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016058:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801605a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801605c:	3314      	adds	r3, #20
 801605e:	b29b      	uxth	r3, r3
 8016060:	4618      	mov	r0, r3
 8016062:	f7fd fc4b 	bl	80138fc <lwip_htons>
 8016066:	4603      	mov	r3, r0
 8016068:	461a      	mov	r2, r3
 801606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801606c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016070:	2200      	movs	r2, #0
 8016072:	729a      	strb	r2, [r3, #10]
 8016074:	2200      	movs	r2, #0
 8016076:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016078:	68bb      	ldr	r3, [r7, #8]
 801607a:	695b      	ldr	r3, [r3, #20]
 801607c:	687a      	ldr	r2, [r7, #4]
 801607e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016080:	68b8      	ldr	r0, [r7, #8]
 8016082:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016086:	f001 fc0d 	bl	80178a4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801608a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801608e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016090:	1ad3      	subs	r3, r2, r3
 8016092:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016096:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801609a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801609c:	4413      	add	r3, r2
 801609e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80160a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	f47f af19 	bne.w	8015ede <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80160ac:	2300      	movs	r3, #0
 80160ae:	e002      	b.n	80160b6 <ip4_frag+0x26a>
      goto memerr;
 80160b0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80160b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80160b6:	4618      	mov	r0, r3
 80160b8:	3748      	adds	r7, #72	; 0x48
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd80      	pop	{r7, pc}
 80160be:	bf00      	nop
 80160c0:	080217fc 	.word	0x080217fc
 80160c4:	08021a18 	.word	0x08021a18
 80160c8:	08021884 	.word	0x08021884
 80160cc:	08021a34 	.word	0x08021a34
 80160d0:	08021a54 	.word	0x08021a54
 80160d4:	08015de5 	.word	0x08015de5

080160d8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80160d8:	b480      	push	{r7}
 80160da:	b083      	sub	sp, #12
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 80160e0:	4b04      	ldr	r3, [pc, #16]	; (80160f4 <ptr_to_mem+0x1c>)
 80160e2:	681a      	ldr	r2, [r3, #0]
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	4413      	add	r3, r2
}
 80160e8:	4618      	mov	r0, r3
 80160ea:	370c      	adds	r7, #12
 80160ec:	46bd      	mov	sp, r7
 80160ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f2:	4770      	bx	lr
 80160f4:	24008e74 	.word	0x24008e74

080160f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80160f8:	b480      	push	{r7}
 80160fa:	b083      	sub	sp, #12
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8016100:	4b04      	ldr	r3, [pc, #16]	; (8016114 <mem_to_ptr+0x1c>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	687a      	ldr	r2, [r7, #4]
 8016106:	1ad3      	subs	r3, r2, r3
}
 8016108:	4618      	mov	r0, r3
 801610a:	370c      	adds	r7, #12
 801610c:	46bd      	mov	sp, r7
 801610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016112:	4770      	bx	lr
 8016114:	24008e74 	.word	0x24008e74

08016118 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8016118:	b590      	push	{r4, r7, lr}
 801611a:	b085      	sub	sp, #20
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8016120:	4b45      	ldr	r3, [pc, #276]	; (8016238 <plug_holes+0x120>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	687a      	ldr	r2, [r7, #4]
 8016126:	429a      	cmp	r2, r3
 8016128:	d206      	bcs.n	8016138 <plug_holes+0x20>
 801612a:	4b44      	ldr	r3, [pc, #272]	; (801623c <plug_holes+0x124>)
 801612c:	f240 12df 	movw	r2, #479	; 0x1df
 8016130:	4943      	ldr	r1, [pc, #268]	; (8016240 <plug_holes+0x128>)
 8016132:	4844      	ldr	r0, [pc, #272]	; (8016244 <plug_holes+0x12c>)
 8016134:	f009 fc62 	bl	801f9fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8016138:	4b43      	ldr	r3, [pc, #268]	; (8016248 <plug_holes+0x130>)
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	687a      	ldr	r2, [r7, #4]
 801613e:	429a      	cmp	r2, r3
 8016140:	d306      	bcc.n	8016150 <plug_holes+0x38>
 8016142:	4b3e      	ldr	r3, [pc, #248]	; (801623c <plug_holes+0x124>)
 8016144:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016148:	4940      	ldr	r1, [pc, #256]	; (801624c <plug_holes+0x134>)
 801614a:	483e      	ldr	r0, [pc, #248]	; (8016244 <plug_holes+0x12c>)
 801614c:	f009 fc56 	bl	801f9fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	7a1b      	ldrb	r3, [r3, #8]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d006      	beq.n	8016166 <plug_holes+0x4e>
 8016158:	4b38      	ldr	r3, [pc, #224]	; (801623c <plug_holes+0x124>)
 801615a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801615e:	493c      	ldr	r1, [pc, #240]	; (8016250 <plug_holes+0x138>)
 8016160:	4838      	ldr	r0, [pc, #224]	; (8016244 <plug_holes+0x12c>)
 8016162:	f009 fc4b 	bl	801f9fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	4a3a      	ldr	r2, [pc, #232]	; (8016254 <plug_holes+0x13c>)
 801616c:	4293      	cmp	r3, r2
 801616e:	d906      	bls.n	801617e <plug_holes+0x66>
 8016170:	4b32      	ldr	r3, [pc, #200]	; (801623c <plug_holes+0x124>)
 8016172:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8016176:	4938      	ldr	r1, [pc, #224]	; (8016258 <plug_holes+0x140>)
 8016178:	4832      	ldr	r0, [pc, #200]	; (8016244 <plug_holes+0x12c>)
 801617a:	f009 fc3f 	bl	801f9fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	4618      	mov	r0, r3
 8016184:	f7ff ffa8 	bl	80160d8 <ptr_to_mem>
 8016188:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801618a:	687a      	ldr	r2, [r7, #4]
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	429a      	cmp	r2, r3
 8016190:	d024      	beq.n	80161dc <plug_holes+0xc4>
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	7a1b      	ldrb	r3, [r3, #8]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d120      	bne.n	80161dc <plug_holes+0xc4>
 801619a:	4b2b      	ldr	r3, [pc, #172]	; (8016248 <plug_holes+0x130>)
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	68fa      	ldr	r2, [r7, #12]
 80161a0:	429a      	cmp	r2, r3
 80161a2:	d01b      	beq.n	80161dc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80161a4:	4b2d      	ldr	r3, [pc, #180]	; (801625c <plug_holes+0x144>)
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	68fa      	ldr	r2, [r7, #12]
 80161aa:	429a      	cmp	r2, r3
 80161ac:	d102      	bne.n	80161b4 <plug_holes+0x9c>
      lfree = mem;
 80161ae:	4a2b      	ldr	r2, [pc, #172]	; (801625c <plug_holes+0x144>)
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	681a      	ldr	r2, [r3, #0]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	4a24      	ldr	r2, [pc, #144]	; (8016254 <plug_holes+0x13c>)
 80161c2:	4293      	cmp	r3, r2
 80161c4:	d00a      	beq.n	80161dc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	4618      	mov	r0, r3
 80161cc:	f7ff ff84 	bl	80160d8 <ptr_to_mem>
 80161d0:	4604      	mov	r4, r0
 80161d2:	6878      	ldr	r0, [r7, #4]
 80161d4:	f7ff ff90 	bl	80160f8 <mem_to_ptr>
 80161d8:	4603      	mov	r3, r0
 80161da:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	685b      	ldr	r3, [r3, #4]
 80161e0:	4618      	mov	r0, r3
 80161e2:	f7ff ff79 	bl	80160d8 <ptr_to_mem>
 80161e6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80161e8:	68ba      	ldr	r2, [r7, #8]
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	429a      	cmp	r2, r3
 80161ee:	d01f      	beq.n	8016230 <plug_holes+0x118>
 80161f0:	68bb      	ldr	r3, [r7, #8]
 80161f2:	7a1b      	ldrb	r3, [r3, #8]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d11b      	bne.n	8016230 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80161f8:	4b18      	ldr	r3, [pc, #96]	; (801625c <plug_holes+0x144>)
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	687a      	ldr	r2, [r7, #4]
 80161fe:	429a      	cmp	r2, r3
 8016200:	d102      	bne.n	8016208 <plug_holes+0xf0>
      lfree = pmem;
 8016202:	4a16      	ldr	r2, [pc, #88]	; (801625c <plug_holes+0x144>)
 8016204:	68bb      	ldr	r3, [r7, #8]
 8016206:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681a      	ldr	r2, [r3, #0]
 801620c:	68bb      	ldr	r3, [r7, #8]
 801620e:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	4a0f      	ldr	r2, [pc, #60]	; (8016254 <plug_holes+0x13c>)
 8016216:	4293      	cmp	r3, r2
 8016218:	d00a      	beq.n	8016230 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	4618      	mov	r0, r3
 8016220:	f7ff ff5a 	bl	80160d8 <ptr_to_mem>
 8016224:	4604      	mov	r4, r0
 8016226:	68b8      	ldr	r0, [r7, #8]
 8016228:	f7ff ff66 	bl	80160f8 <mem_to_ptr>
 801622c:	4603      	mov	r3, r0
 801622e:	6063      	str	r3, [r4, #4]
    }
  }
}
 8016230:	bf00      	nop
 8016232:	3714      	adds	r7, #20
 8016234:	46bd      	mov	sp, r7
 8016236:	bd90      	pop	{r4, r7, pc}
 8016238:	24008e74 	.word	0x24008e74
 801623c:	08021a64 	.word	0x08021a64
 8016240:	08021ad8 	.word	0x08021ad8
 8016244:	08021af0 	.word	0x08021af0
 8016248:	24008e78 	.word	0x24008e78
 801624c:	08021b18 	.word	0x08021b18
 8016250:	08021b34 	.word	0x08021b34
 8016254:	0001ffe8 	.word	0x0001ffe8
 8016258:	08021b50 	.word	0x08021b50
 801625c:	24008e80 	.word	0x24008e80

08016260 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8016260:	b580      	push	{r7, lr}
 8016262:	b082      	sub	sp, #8
 8016264:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8016266:	4b1b      	ldr	r3, [pc, #108]	; (80162d4 <mem_init+0x74>)
 8016268:	4a1b      	ldr	r2, [pc, #108]	; (80162d8 <mem_init+0x78>)
 801626a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801626c:	4b19      	ldr	r3, [pc, #100]	; (80162d4 <mem_init+0x74>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	4a19      	ldr	r2, [pc, #100]	; (80162dc <mem_init+0x7c>)
 8016276:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2200      	movs	r2, #0
 801627c:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2200      	movs	r2, #0
 8016282:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8016284:	4815      	ldr	r0, [pc, #84]	; (80162dc <mem_init+0x7c>)
 8016286:	f7ff ff27 	bl	80160d8 <ptr_to_mem>
 801628a:	4603      	mov	r3, r0
 801628c:	4a14      	ldr	r2, [pc, #80]	; (80162e0 <mem_init+0x80>)
 801628e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8016290:	4b13      	ldr	r3, [pc, #76]	; (80162e0 <mem_init+0x80>)
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	2201      	movs	r2, #1
 8016296:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8016298:	4b11      	ldr	r3, [pc, #68]	; (80162e0 <mem_init+0x80>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	4a0f      	ldr	r2, [pc, #60]	; (80162dc <mem_init+0x7c>)
 801629e:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80162a0:	4b0f      	ldr	r3, [pc, #60]	; (80162e0 <mem_init+0x80>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	4a0d      	ldr	r2, [pc, #52]	; (80162dc <mem_init+0x7c>)
 80162a6:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80162a8:	4b0a      	ldr	r3, [pc, #40]	; (80162d4 <mem_init+0x74>)
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	4a0d      	ldr	r2, [pc, #52]	; (80162e4 <mem_init+0x84>)
 80162ae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80162b0:	480d      	ldr	r0, [pc, #52]	; (80162e8 <mem_init+0x88>)
 80162b2:	f001 fef7 	bl	80180a4 <sys_mutex_new>
 80162b6:	4603      	mov	r3, r0
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d006      	beq.n	80162ca <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80162bc:	4b0b      	ldr	r3, [pc, #44]	; (80162ec <mem_init+0x8c>)
 80162be:	f240 221f 	movw	r2, #543	; 0x21f
 80162c2:	490b      	ldr	r1, [pc, #44]	; (80162f0 <mem_init+0x90>)
 80162c4:	480b      	ldr	r0, [pc, #44]	; (80162f4 <mem_init+0x94>)
 80162c6:	f009 fb99 	bl	801f9fc <iprintf>
  }
}
 80162ca:	bf00      	nop
 80162cc:	3708      	adds	r7, #8
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}
 80162d2:	bf00      	nop
 80162d4:	24008e74 	.word	0x24008e74
 80162d8:	30020000 	.word	0x30020000
 80162dc:	0001ffe8 	.word	0x0001ffe8
 80162e0:	24008e78 	.word	0x24008e78
 80162e4:	24008e80 	.word	0x24008e80
 80162e8:	24008e7c 	.word	0x24008e7c
 80162ec:	08021a64 	.word	0x08021a64
 80162f0:	08021b7c 	.word	0x08021b7c
 80162f4:	08021af0 	.word	0x08021af0

080162f8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b086      	sub	sp, #24
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8016300:	6878      	ldr	r0, [r7, #4]
 8016302:	f7ff fef9 	bl	80160f8 <mem_to_ptr>
 8016306:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	4618      	mov	r0, r3
 801630e:	f7ff fee3 	bl	80160d8 <ptr_to_mem>
 8016312:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	685b      	ldr	r3, [r3, #4]
 8016318:	4618      	mov	r0, r3
 801631a:	f7ff fedd 	bl	80160d8 <ptr_to_mem>
 801631e:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	4a11      	ldr	r2, [pc, #68]	; (801636c <mem_link_valid+0x74>)
 8016326:	4293      	cmp	r3, r2
 8016328:	d818      	bhi.n	801635c <mem_link_valid+0x64>
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	4a0f      	ldr	r2, [pc, #60]	; (801636c <mem_link_valid+0x74>)
 8016330:	4293      	cmp	r3, r2
 8016332:	d813      	bhi.n	801635c <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016338:	697a      	ldr	r2, [r7, #20]
 801633a:	429a      	cmp	r2, r3
 801633c:	d004      	beq.n	8016348 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	697a      	ldr	r2, [r7, #20]
 8016344:	429a      	cmp	r2, r3
 8016346:	d109      	bne.n	801635c <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016348:	4b09      	ldr	r3, [pc, #36]	; (8016370 <mem_link_valid+0x78>)
 801634a:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801634c:	693a      	ldr	r2, [r7, #16]
 801634e:	429a      	cmp	r2, r3
 8016350:	d006      	beq.n	8016360 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016352:	693b      	ldr	r3, [r7, #16]
 8016354:	685b      	ldr	r3, [r3, #4]
 8016356:	697a      	ldr	r2, [r7, #20]
 8016358:	429a      	cmp	r2, r3
 801635a:	d001      	beq.n	8016360 <mem_link_valid+0x68>
    return 0;
 801635c:	2300      	movs	r3, #0
 801635e:	e000      	b.n	8016362 <mem_link_valid+0x6a>
  }
  return 1;
 8016360:	2301      	movs	r3, #1
}
 8016362:	4618      	mov	r0, r3
 8016364:	3718      	adds	r7, #24
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}
 801636a:	bf00      	nop
 801636c:	0001ffe8 	.word	0x0001ffe8
 8016370:	24008e78 	.word	0x24008e78

08016374 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8016374:	b580      	push	{r7, lr}
 8016376:	b088      	sub	sp, #32
 8016378:	af00      	add	r7, sp, #0
 801637a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d070      	beq.n	8016464 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	f003 0303 	and.w	r3, r3, #3
 8016388:	2b00      	cmp	r3, #0
 801638a:	d00d      	beq.n	80163a8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801638c:	4b37      	ldr	r3, [pc, #220]	; (801646c <mem_free+0xf8>)
 801638e:	f240 2273 	movw	r2, #627	; 0x273
 8016392:	4937      	ldr	r1, [pc, #220]	; (8016470 <mem_free+0xfc>)
 8016394:	4837      	ldr	r0, [pc, #220]	; (8016474 <mem_free+0x100>)
 8016396:	f009 fb31 	bl	801f9fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801639a:	f001 fee1 	bl	8018160 <sys_arch_protect>
 801639e:	60f8      	str	r0, [r7, #12]
 80163a0:	68f8      	ldr	r0, [r7, #12]
 80163a2:	f001 feeb 	bl	801817c <sys_arch_unprotect>
    return;
 80163a6:	e05e      	b.n	8016466 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	3b0c      	subs	r3, #12
 80163ac:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80163ae:	4b32      	ldr	r3, [pc, #200]	; (8016478 <mem_free+0x104>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	69fa      	ldr	r2, [r7, #28]
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d306      	bcc.n	80163c6 <mem_free+0x52>
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f103 020c 	add.w	r2, r3, #12
 80163be:	4b2f      	ldr	r3, [pc, #188]	; (801647c <mem_free+0x108>)
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d90d      	bls.n	80163e2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80163c6:	4b29      	ldr	r3, [pc, #164]	; (801646c <mem_free+0xf8>)
 80163c8:	f240 227f 	movw	r2, #639	; 0x27f
 80163cc:	492c      	ldr	r1, [pc, #176]	; (8016480 <mem_free+0x10c>)
 80163ce:	4829      	ldr	r0, [pc, #164]	; (8016474 <mem_free+0x100>)
 80163d0:	f009 fb14 	bl	801f9fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80163d4:	f001 fec4 	bl	8018160 <sys_arch_protect>
 80163d8:	6138      	str	r0, [r7, #16]
 80163da:	6938      	ldr	r0, [r7, #16]
 80163dc:	f001 fece 	bl	801817c <sys_arch_unprotect>
    return;
 80163e0:	e041      	b.n	8016466 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80163e2:	4828      	ldr	r0, [pc, #160]	; (8016484 <mem_free+0x110>)
 80163e4:	f001 fe7a 	bl	80180dc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80163e8:	69fb      	ldr	r3, [r7, #28]
 80163ea:	7a1b      	ldrb	r3, [r3, #8]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d110      	bne.n	8016412 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80163f0:	4b1e      	ldr	r3, [pc, #120]	; (801646c <mem_free+0xf8>)
 80163f2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80163f6:	4924      	ldr	r1, [pc, #144]	; (8016488 <mem_free+0x114>)
 80163f8:	481e      	ldr	r0, [pc, #120]	; (8016474 <mem_free+0x100>)
 80163fa:	f009 faff 	bl	801f9fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80163fe:	4821      	ldr	r0, [pc, #132]	; (8016484 <mem_free+0x110>)
 8016400:	f001 fe7b 	bl	80180fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016404:	f001 feac 	bl	8018160 <sys_arch_protect>
 8016408:	6178      	str	r0, [r7, #20]
 801640a:	6978      	ldr	r0, [r7, #20]
 801640c:	f001 feb6 	bl	801817c <sys_arch_unprotect>
    return;
 8016410:	e029      	b.n	8016466 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8016412:	69f8      	ldr	r0, [r7, #28]
 8016414:	f7ff ff70 	bl	80162f8 <mem_link_valid>
 8016418:	4603      	mov	r3, r0
 801641a:	2b00      	cmp	r3, #0
 801641c:	d110      	bne.n	8016440 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801641e:	4b13      	ldr	r3, [pc, #76]	; (801646c <mem_free+0xf8>)
 8016420:	f240 2295 	movw	r2, #661	; 0x295
 8016424:	4919      	ldr	r1, [pc, #100]	; (801648c <mem_free+0x118>)
 8016426:	4813      	ldr	r0, [pc, #76]	; (8016474 <mem_free+0x100>)
 8016428:	f009 fae8 	bl	801f9fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801642c:	4815      	ldr	r0, [pc, #84]	; (8016484 <mem_free+0x110>)
 801642e:	f001 fe64 	bl	80180fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016432:	f001 fe95 	bl	8018160 <sys_arch_protect>
 8016436:	61b8      	str	r0, [r7, #24]
 8016438:	69b8      	ldr	r0, [r7, #24]
 801643a:	f001 fe9f 	bl	801817c <sys_arch_unprotect>
    return;
 801643e:	e012      	b.n	8016466 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8016440:	69fb      	ldr	r3, [r7, #28]
 8016442:	2200      	movs	r2, #0
 8016444:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8016446:	4b12      	ldr	r3, [pc, #72]	; (8016490 <mem_free+0x11c>)
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	69fa      	ldr	r2, [r7, #28]
 801644c:	429a      	cmp	r2, r3
 801644e:	d202      	bcs.n	8016456 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8016450:	4a0f      	ldr	r2, [pc, #60]	; (8016490 <mem_free+0x11c>)
 8016452:	69fb      	ldr	r3, [r7, #28]
 8016454:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8016456:	69f8      	ldr	r0, [r7, #28]
 8016458:	f7ff fe5e 	bl	8016118 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801645c:	4809      	ldr	r0, [pc, #36]	; (8016484 <mem_free+0x110>)
 801645e:	f001 fe4c 	bl	80180fa <sys_mutex_unlock>
 8016462:	e000      	b.n	8016466 <mem_free+0xf2>
    return;
 8016464:	bf00      	nop
}
 8016466:	3720      	adds	r7, #32
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}
 801646c:	08021a64 	.word	0x08021a64
 8016470:	08021b98 	.word	0x08021b98
 8016474:	08021af0 	.word	0x08021af0
 8016478:	24008e74 	.word	0x24008e74
 801647c:	24008e78 	.word	0x24008e78
 8016480:	08021bbc 	.word	0x08021bbc
 8016484:	24008e7c 	.word	0x24008e7c
 8016488:	08021bd8 	.word	0x08021bd8
 801648c:	08021c00 	.word	0x08021c00
 8016490:	24008e80 	.word	0x24008e80

08016494 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b08a      	sub	sp, #40	; 0x28
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
 801649c:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801649e:	683b      	ldr	r3, [r7, #0]
 80164a0:	3303      	adds	r3, #3
 80164a2:	f023 0303 	bic.w	r3, r3, #3
 80164a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 80164a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164aa:	2b0b      	cmp	r3, #11
 80164ac:	d801      	bhi.n	80164b2 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80164ae:	230c      	movs	r3, #12
 80164b0:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80164b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b4:	4a6e      	ldr	r2, [pc, #440]	; (8016670 <mem_trim+0x1dc>)
 80164b6:	4293      	cmp	r3, r2
 80164b8:	d803      	bhi.n	80164c2 <mem_trim+0x2e>
 80164ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	429a      	cmp	r2, r3
 80164c0:	d201      	bcs.n	80164c6 <mem_trim+0x32>
    return NULL;
 80164c2:	2300      	movs	r3, #0
 80164c4:	e0d0      	b.n	8016668 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80164c6:	4b6b      	ldr	r3, [pc, #428]	; (8016674 <mem_trim+0x1e0>)
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	687a      	ldr	r2, [r7, #4]
 80164cc:	429a      	cmp	r2, r3
 80164ce:	d304      	bcc.n	80164da <mem_trim+0x46>
 80164d0:	4b69      	ldr	r3, [pc, #420]	; (8016678 <mem_trim+0x1e4>)
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	687a      	ldr	r2, [r7, #4]
 80164d6:	429a      	cmp	r2, r3
 80164d8:	d306      	bcc.n	80164e8 <mem_trim+0x54>
 80164da:	4b68      	ldr	r3, [pc, #416]	; (801667c <mem_trim+0x1e8>)
 80164dc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80164e0:	4967      	ldr	r1, [pc, #412]	; (8016680 <mem_trim+0x1ec>)
 80164e2:	4868      	ldr	r0, [pc, #416]	; (8016684 <mem_trim+0x1f0>)
 80164e4:	f009 fa8a 	bl	801f9fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80164e8:	4b62      	ldr	r3, [pc, #392]	; (8016674 <mem_trim+0x1e0>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	687a      	ldr	r2, [r7, #4]
 80164ee:	429a      	cmp	r2, r3
 80164f0:	d304      	bcc.n	80164fc <mem_trim+0x68>
 80164f2:	4b61      	ldr	r3, [pc, #388]	; (8016678 <mem_trim+0x1e4>)
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	687a      	ldr	r2, [r7, #4]
 80164f8:	429a      	cmp	r2, r3
 80164fa:	d307      	bcc.n	801650c <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80164fc:	f001 fe30 	bl	8018160 <sys_arch_protect>
 8016500:	60b8      	str	r0, [r7, #8]
 8016502:	68b8      	ldr	r0, [r7, #8]
 8016504:	f001 fe3a 	bl	801817c <sys_arch_unprotect>
    return rmem;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	e0ad      	b.n	8016668 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	3b0c      	subs	r3, #12
 8016510:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8016512:	6a38      	ldr	r0, [r7, #32]
 8016514:	f7ff fdf0 	bl	80160f8 <mem_to_ptr>
 8016518:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801651a:	6a3b      	ldr	r3, [r7, #32]
 801651c:	681a      	ldr	r2, [r3, #0]
 801651e:	69fb      	ldr	r3, [r7, #28]
 8016520:	1ad3      	subs	r3, r2, r3
 8016522:	3b0c      	subs	r3, #12
 8016524:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8016526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016528:	69bb      	ldr	r3, [r7, #24]
 801652a:	429a      	cmp	r2, r3
 801652c:	d906      	bls.n	801653c <mem_trim+0xa8>
 801652e:	4b53      	ldr	r3, [pc, #332]	; (801667c <mem_trim+0x1e8>)
 8016530:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8016534:	4954      	ldr	r1, [pc, #336]	; (8016688 <mem_trim+0x1f4>)
 8016536:	4853      	ldr	r0, [pc, #332]	; (8016684 <mem_trim+0x1f0>)
 8016538:	f009 fa60 	bl	801f9fc <iprintf>
  if (newsize > size) {
 801653c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801653e:	69bb      	ldr	r3, [r7, #24]
 8016540:	429a      	cmp	r2, r3
 8016542:	d901      	bls.n	8016548 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8016544:	2300      	movs	r3, #0
 8016546:	e08f      	b.n	8016668 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 8016548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801654a:	69bb      	ldr	r3, [r7, #24]
 801654c:	429a      	cmp	r2, r3
 801654e:	d101      	bne.n	8016554 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	e089      	b.n	8016668 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8016554:	484d      	ldr	r0, [pc, #308]	; (801668c <mem_trim+0x1f8>)
 8016556:	f001 fdc1 	bl	80180dc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801655a:	6a3b      	ldr	r3, [r7, #32]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	4618      	mov	r0, r3
 8016560:	f7ff fdba 	bl	80160d8 <ptr_to_mem>
 8016564:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8016566:	697b      	ldr	r3, [r7, #20]
 8016568:	7a1b      	ldrb	r3, [r3, #8]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d13c      	bne.n	80165e8 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801656e:	6a3b      	ldr	r3, [r7, #32]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	4a3f      	ldr	r2, [pc, #252]	; (8016670 <mem_trim+0x1dc>)
 8016574:	4293      	cmp	r3, r2
 8016576:	d106      	bne.n	8016586 <mem_trim+0xf2>
 8016578:	4b40      	ldr	r3, [pc, #256]	; (801667c <mem_trim+0x1e8>)
 801657a:	f240 22f5 	movw	r2, #757	; 0x2f5
 801657e:	4944      	ldr	r1, [pc, #272]	; (8016690 <mem_trim+0x1fc>)
 8016580:	4840      	ldr	r0, [pc, #256]	; (8016684 <mem_trim+0x1f0>)
 8016582:	f009 fa3b 	bl	801f9fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801658c:	69fa      	ldr	r2, [r7, #28]
 801658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016590:	4413      	add	r3, r2
 8016592:	330c      	adds	r3, #12
 8016594:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8016596:	4b3f      	ldr	r3, [pc, #252]	; (8016694 <mem_trim+0x200>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	697a      	ldr	r2, [r7, #20]
 801659c:	429a      	cmp	r2, r3
 801659e:	d105      	bne.n	80165ac <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 80165a0:	6938      	ldr	r0, [r7, #16]
 80165a2:	f7ff fd99 	bl	80160d8 <ptr_to_mem>
 80165a6:	4603      	mov	r3, r0
 80165a8:	4a3a      	ldr	r2, [pc, #232]	; (8016694 <mem_trim+0x200>)
 80165aa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80165ac:	6938      	ldr	r0, [r7, #16]
 80165ae:	f7ff fd93 	bl	80160d8 <ptr_to_mem>
 80165b2:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 80165b4:	697b      	ldr	r3, [r7, #20]
 80165b6:	2200      	movs	r2, #0
 80165b8:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	68fa      	ldr	r2, [r7, #12]
 80165be:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80165c0:	697b      	ldr	r3, [r7, #20]
 80165c2:	69fa      	ldr	r2, [r7, #28]
 80165c4:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 80165c6:	6a3b      	ldr	r3, [r7, #32]
 80165c8:	693a      	ldr	r2, [r7, #16]
 80165ca:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80165cc:	697b      	ldr	r3, [r7, #20]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	4a27      	ldr	r2, [pc, #156]	; (8016670 <mem_trim+0x1dc>)
 80165d2:	4293      	cmp	r3, r2
 80165d4:	d044      	beq.n	8016660 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80165d6:	697b      	ldr	r3, [r7, #20]
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	4618      	mov	r0, r3
 80165dc:	f7ff fd7c 	bl	80160d8 <ptr_to_mem>
 80165e0:	4602      	mov	r2, r0
 80165e2:	693b      	ldr	r3, [r7, #16]
 80165e4:	6053      	str	r3, [r2, #4]
 80165e6:	e03b      	b.n	8016660 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80165e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ea:	3318      	adds	r3, #24
 80165ec:	69ba      	ldr	r2, [r7, #24]
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d336      	bcc.n	8016660 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80165f2:	69fa      	ldr	r2, [r7, #28]
 80165f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f6:	4413      	add	r3, r2
 80165f8:	330c      	adds	r3, #12
 80165fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80165fc:	6a3b      	ldr	r3, [r7, #32]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	4a1b      	ldr	r2, [pc, #108]	; (8016670 <mem_trim+0x1dc>)
 8016602:	4293      	cmp	r3, r2
 8016604:	d106      	bne.n	8016614 <mem_trim+0x180>
 8016606:	4b1d      	ldr	r3, [pc, #116]	; (801667c <mem_trim+0x1e8>)
 8016608:	f240 3216 	movw	r2, #790	; 0x316
 801660c:	4920      	ldr	r1, [pc, #128]	; (8016690 <mem_trim+0x1fc>)
 801660e:	481d      	ldr	r0, [pc, #116]	; (8016684 <mem_trim+0x1f0>)
 8016610:	f009 f9f4 	bl	801f9fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8016614:	6938      	ldr	r0, [r7, #16]
 8016616:	f7ff fd5f 	bl	80160d8 <ptr_to_mem>
 801661a:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 801661c:	4b1d      	ldr	r3, [pc, #116]	; (8016694 <mem_trim+0x200>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	697a      	ldr	r2, [r7, #20]
 8016622:	429a      	cmp	r2, r3
 8016624:	d202      	bcs.n	801662c <mem_trim+0x198>
      lfree = mem2;
 8016626:	4a1b      	ldr	r2, [pc, #108]	; (8016694 <mem_trim+0x200>)
 8016628:	697b      	ldr	r3, [r7, #20]
 801662a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801662c:	697b      	ldr	r3, [r7, #20]
 801662e:	2200      	movs	r2, #0
 8016630:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8016632:	6a3b      	ldr	r3, [r7, #32]
 8016634:	681a      	ldr	r2, [r3, #0]
 8016636:	697b      	ldr	r3, [r7, #20]
 8016638:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 801663a:	697b      	ldr	r3, [r7, #20]
 801663c:	69fa      	ldr	r2, [r7, #28]
 801663e:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8016640:	6a3b      	ldr	r3, [r7, #32]
 8016642:	693a      	ldr	r2, [r7, #16]
 8016644:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	4a09      	ldr	r2, [pc, #36]	; (8016670 <mem_trim+0x1dc>)
 801664c:	4293      	cmp	r3, r2
 801664e:	d007      	beq.n	8016660 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016650:	697b      	ldr	r3, [r7, #20]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	4618      	mov	r0, r3
 8016656:	f7ff fd3f 	bl	80160d8 <ptr_to_mem>
 801665a:	4602      	mov	r2, r0
 801665c:	693b      	ldr	r3, [r7, #16]
 801665e:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016660:	480a      	ldr	r0, [pc, #40]	; (801668c <mem_trim+0x1f8>)
 8016662:	f001 fd4a 	bl	80180fa <sys_mutex_unlock>
  return rmem;
 8016666:	687b      	ldr	r3, [r7, #4]
}
 8016668:	4618      	mov	r0, r3
 801666a:	3728      	adds	r7, #40	; 0x28
 801666c:	46bd      	mov	sp, r7
 801666e:	bd80      	pop	{r7, pc}
 8016670:	0001ffe8 	.word	0x0001ffe8
 8016674:	24008e74 	.word	0x24008e74
 8016678:	24008e78 	.word	0x24008e78
 801667c:	08021a64 	.word	0x08021a64
 8016680:	08021c34 	.word	0x08021c34
 8016684:	08021af0 	.word	0x08021af0
 8016688:	08021c4c 	.word	0x08021c4c
 801668c:	24008e7c 	.word	0x24008e7c
 8016690:	08021c6c 	.word	0x08021c6c
 8016694:	24008e80 	.word	0x24008e80

08016698 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b088      	sub	sp, #32
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d101      	bne.n	80166aa <mem_malloc+0x12>
    return NULL;
 80166a6:	2300      	movs	r3, #0
 80166a8:	e0d9      	b.n	801685e <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	3303      	adds	r3, #3
 80166ae:	f023 0303 	bic.w	r3, r3, #3
 80166b2:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 80166b4:	69bb      	ldr	r3, [r7, #24]
 80166b6:	2b0b      	cmp	r3, #11
 80166b8:	d801      	bhi.n	80166be <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80166ba:	230c      	movs	r3, #12
 80166bc:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80166be:	69bb      	ldr	r3, [r7, #24]
 80166c0:	4a69      	ldr	r2, [pc, #420]	; (8016868 <mem_malloc+0x1d0>)
 80166c2:	4293      	cmp	r3, r2
 80166c4:	d803      	bhi.n	80166ce <mem_malloc+0x36>
 80166c6:	69ba      	ldr	r2, [r7, #24]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	429a      	cmp	r2, r3
 80166cc:	d201      	bcs.n	80166d2 <mem_malloc+0x3a>
    return NULL;
 80166ce:	2300      	movs	r3, #0
 80166d0:	e0c5      	b.n	801685e <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80166d2:	4866      	ldr	r0, [pc, #408]	; (801686c <mem_malloc+0x1d4>)
 80166d4:	f001 fd02 	bl	80180dc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80166d8:	4b65      	ldr	r3, [pc, #404]	; (8016870 <mem_malloc+0x1d8>)
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	4618      	mov	r0, r3
 80166de:	f7ff fd0b 	bl	80160f8 <mem_to_ptr>
 80166e2:	61f8      	str	r0, [r7, #28]
 80166e4:	e0b0      	b.n	8016848 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80166e6:	69f8      	ldr	r0, [r7, #28]
 80166e8:	f7ff fcf6 	bl	80160d8 <ptr_to_mem>
 80166ec:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80166ee:	693b      	ldr	r3, [r7, #16]
 80166f0:	7a1b      	ldrb	r3, [r3, #8]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	f040 80a2 	bne.w	801683c <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80166f8:	693b      	ldr	r3, [r7, #16]
 80166fa:	681a      	ldr	r2, [r3, #0]
 80166fc:	69fb      	ldr	r3, [r7, #28]
 80166fe:	1ad3      	subs	r3, r2, r3
 8016700:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8016702:	69ba      	ldr	r2, [r7, #24]
 8016704:	429a      	cmp	r2, r3
 8016706:	f200 8099 	bhi.w	801683c <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801670a:	693b      	ldr	r3, [r7, #16]
 801670c:	681a      	ldr	r2, [r3, #0]
 801670e:	69fb      	ldr	r3, [r7, #28]
 8016710:	1ad3      	subs	r3, r2, r3
 8016712:	f1a3 020c 	sub.w	r2, r3, #12
 8016716:	69bb      	ldr	r3, [r7, #24]
 8016718:	3318      	adds	r3, #24
 801671a:	429a      	cmp	r2, r3
 801671c:	d331      	bcc.n	8016782 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801671e:	69fa      	ldr	r2, [r7, #28]
 8016720:	69bb      	ldr	r3, [r7, #24]
 8016722:	4413      	add	r3, r2
 8016724:	330c      	adds	r3, #12
 8016726:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	4a4f      	ldr	r2, [pc, #316]	; (8016868 <mem_malloc+0x1d0>)
 801672c:	4293      	cmp	r3, r2
 801672e:	d106      	bne.n	801673e <mem_malloc+0xa6>
 8016730:	4b50      	ldr	r3, [pc, #320]	; (8016874 <mem_malloc+0x1dc>)
 8016732:	f240 3287 	movw	r2, #903	; 0x387
 8016736:	4950      	ldr	r1, [pc, #320]	; (8016878 <mem_malloc+0x1e0>)
 8016738:	4850      	ldr	r0, [pc, #320]	; (801687c <mem_malloc+0x1e4>)
 801673a:	f009 f95f 	bl	801f9fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801673e:	68f8      	ldr	r0, [r7, #12]
 8016740:	f7ff fcca 	bl	80160d8 <ptr_to_mem>
 8016744:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	2200      	movs	r2, #0
 801674a:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 801674c:	693b      	ldr	r3, [r7, #16]
 801674e:	681a      	ldr	r2, [r3, #0]
 8016750:	68bb      	ldr	r3, [r7, #8]
 8016752:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8016754:	68bb      	ldr	r3, [r7, #8]
 8016756:	69fa      	ldr	r2, [r7, #28]
 8016758:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801675a:	693b      	ldr	r3, [r7, #16]
 801675c:	68fa      	ldr	r2, [r7, #12]
 801675e:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8016760:	693b      	ldr	r3, [r7, #16]
 8016762:	2201      	movs	r2, #1
 8016764:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8016766:	68bb      	ldr	r3, [r7, #8]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	4a3f      	ldr	r2, [pc, #252]	; (8016868 <mem_malloc+0x1d0>)
 801676c:	4293      	cmp	r3, r2
 801676e:	d00b      	beq.n	8016788 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8016770:	68bb      	ldr	r3, [r7, #8]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	4618      	mov	r0, r3
 8016776:	f7ff fcaf 	bl	80160d8 <ptr_to_mem>
 801677a:	4602      	mov	r2, r0
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	6053      	str	r3, [r2, #4]
 8016780:	e002      	b.n	8016788 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8016782:	693b      	ldr	r3, [r7, #16]
 8016784:	2201      	movs	r2, #1
 8016786:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8016788:	4b39      	ldr	r3, [pc, #228]	; (8016870 <mem_malloc+0x1d8>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	693a      	ldr	r2, [r7, #16]
 801678e:	429a      	cmp	r2, r3
 8016790:	d127      	bne.n	80167e2 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 8016792:	4b37      	ldr	r3, [pc, #220]	; (8016870 <mem_malloc+0x1d8>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8016798:	e005      	b.n	80167a6 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801679a:	697b      	ldr	r3, [r7, #20]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	4618      	mov	r0, r3
 80167a0:	f7ff fc9a 	bl	80160d8 <ptr_to_mem>
 80167a4:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	7a1b      	ldrb	r3, [r3, #8]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d004      	beq.n	80167b8 <mem_malloc+0x120>
 80167ae:	4b34      	ldr	r3, [pc, #208]	; (8016880 <mem_malloc+0x1e8>)
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	697a      	ldr	r2, [r7, #20]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d1f0      	bne.n	801679a <mem_malloc+0x102>
          }
          lfree = cur;
 80167b8:	4a2d      	ldr	r2, [pc, #180]	; (8016870 <mem_malloc+0x1d8>)
 80167ba:	697b      	ldr	r3, [r7, #20]
 80167bc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80167be:	4b2c      	ldr	r3, [pc, #176]	; (8016870 <mem_malloc+0x1d8>)
 80167c0:	681a      	ldr	r2, [r3, #0]
 80167c2:	4b2f      	ldr	r3, [pc, #188]	; (8016880 <mem_malloc+0x1e8>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	429a      	cmp	r2, r3
 80167c8:	d00b      	beq.n	80167e2 <mem_malloc+0x14a>
 80167ca:	4b29      	ldr	r3, [pc, #164]	; (8016870 <mem_malloc+0x1d8>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	7a1b      	ldrb	r3, [r3, #8]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d006      	beq.n	80167e2 <mem_malloc+0x14a>
 80167d4:	4b27      	ldr	r3, [pc, #156]	; (8016874 <mem_malloc+0x1dc>)
 80167d6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80167da:	492a      	ldr	r1, [pc, #168]	; (8016884 <mem_malloc+0x1ec>)
 80167dc:	4827      	ldr	r0, [pc, #156]	; (801687c <mem_malloc+0x1e4>)
 80167de:	f009 f90d 	bl	801f9fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80167e2:	4822      	ldr	r0, [pc, #136]	; (801686c <mem_malloc+0x1d4>)
 80167e4:	f001 fc89 	bl	80180fa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80167e8:	693a      	ldr	r2, [r7, #16]
 80167ea:	69bb      	ldr	r3, [r7, #24]
 80167ec:	4413      	add	r3, r2
 80167ee:	330c      	adds	r3, #12
 80167f0:	4a23      	ldr	r2, [pc, #140]	; (8016880 <mem_malloc+0x1e8>)
 80167f2:	6812      	ldr	r2, [r2, #0]
 80167f4:	4293      	cmp	r3, r2
 80167f6:	d906      	bls.n	8016806 <mem_malloc+0x16e>
 80167f8:	4b1e      	ldr	r3, [pc, #120]	; (8016874 <mem_malloc+0x1dc>)
 80167fa:	f240 32b9 	movw	r2, #953	; 0x3b9
 80167fe:	4922      	ldr	r1, [pc, #136]	; (8016888 <mem_malloc+0x1f0>)
 8016800:	481e      	ldr	r0, [pc, #120]	; (801687c <mem_malloc+0x1e4>)
 8016802:	f009 f8fb 	bl	801f9fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8016806:	693b      	ldr	r3, [r7, #16]
 8016808:	f003 0303 	and.w	r3, r3, #3
 801680c:	2b00      	cmp	r3, #0
 801680e:	d006      	beq.n	801681e <mem_malloc+0x186>
 8016810:	4b18      	ldr	r3, [pc, #96]	; (8016874 <mem_malloc+0x1dc>)
 8016812:	f240 32bb 	movw	r2, #955	; 0x3bb
 8016816:	491d      	ldr	r1, [pc, #116]	; (801688c <mem_malloc+0x1f4>)
 8016818:	4818      	ldr	r0, [pc, #96]	; (801687c <mem_malloc+0x1e4>)
 801681a:	f009 f8ef 	bl	801f9fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801681e:	693b      	ldr	r3, [r7, #16]
 8016820:	f003 0303 	and.w	r3, r3, #3
 8016824:	2b00      	cmp	r3, #0
 8016826:	d006      	beq.n	8016836 <mem_malloc+0x19e>
 8016828:	4b12      	ldr	r3, [pc, #72]	; (8016874 <mem_malloc+0x1dc>)
 801682a:	f240 32bd 	movw	r2, #957	; 0x3bd
 801682e:	4918      	ldr	r1, [pc, #96]	; (8016890 <mem_malloc+0x1f8>)
 8016830:	4812      	ldr	r0, [pc, #72]	; (801687c <mem_malloc+0x1e4>)
 8016832:	f009 f8e3 	bl	801f9fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8016836:	693b      	ldr	r3, [r7, #16]
 8016838:	330c      	adds	r3, #12
 801683a:	e010      	b.n	801685e <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 801683c:	69f8      	ldr	r0, [r7, #28]
 801683e:	f7ff fc4b 	bl	80160d8 <ptr_to_mem>
 8016842:	4603      	mov	r3, r0
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016848:	69ba      	ldr	r2, [r7, #24]
 801684a:	4b07      	ldr	r3, [pc, #28]	; (8016868 <mem_malloc+0x1d0>)
 801684c:	1a9b      	subs	r3, r3, r2
 801684e:	69fa      	ldr	r2, [r7, #28]
 8016850:	429a      	cmp	r2, r3
 8016852:	f4ff af48 	bcc.w	80166e6 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8016856:	4805      	ldr	r0, [pc, #20]	; (801686c <mem_malloc+0x1d4>)
 8016858:	f001 fc4f 	bl	80180fa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801685c:	2300      	movs	r3, #0
}
 801685e:	4618      	mov	r0, r3
 8016860:	3720      	adds	r7, #32
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	0001ffe8 	.word	0x0001ffe8
 801686c:	24008e7c 	.word	0x24008e7c
 8016870:	24008e80 	.word	0x24008e80
 8016874:	08021a64 	.word	0x08021a64
 8016878:	08021c6c 	.word	0x08021c6c
 801687c:	08021af0 	.word	0x08021af0
 8016880:	24008e78 	.word	0x24008e78
 8016884:	08021c80 	.word	0x08021c80
 8016888:	08021c9c 	.word	0x08021c9c
 801688c:	08021ccc 	.word	0x08021ccc
 8016890:	08021cfc 	.word	0x08021cfc

08016894 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8016894:	b480      	push	{r7}
 8016896:	b085      	sub	sp, #20
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	689b      	ldr	r3, [r3, #8]
 80168a0:	2200      	movs	r2, #0
 80168a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	685b      	ldr	r3, [r3, #4]
 80168a8:	3303      	adds	r3, #3
 80168aa:	f023 0303 	bic.w	r3, r3, #3
 80168ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80168b0:	2300      	movs	r3, #0
 80168b2:	60fb      	str	r3, [r7, #12]
 80168b4:	e011      	b.n	80168da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	689b      	ldr	r3, [r3, #8]
 80168ba:	681a      	ldr	r2, [r3, #0]
 80168bc:	68bb      	ldr	r3, [r7, #8]
 80168be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	689b      	ldr	r3, [r3, #8]
 80168c4:	68ba      	ldr	r2, [r7, #8]
 80168c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	881b      	ldrh	r3, [r3, #0]
 80168cc:	461a      	mov	r2, r3
 80168ce:	68bb      	ldr	r3, [r7, #8]
 80168d0:	4413      	add	r3, r2
 80168d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	3301      	adds	r3, #1
 80168d8:	60fb      	str	r3, [r7, #12]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	885b      	ldrh	r3, [r3, #2]
 80168de:	461a      	mov	r2, r3
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	4293      	cmp	r3, r2
 80168e4:	dbe7      	blt.n	80168b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80168e6:	bf00      	nop
 80168e8:	bf00      	nop
 80168ea:	3714      	adds	r7, #20
 80168ec:	46bd      	mov	sp, r7
 80168ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f2:	4770      	bx	lr

080168f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80168fa:	2300      	movs	r3, #0
 80168fc:	80fb      	strh	r3, [r7, #6]
 80168fe:	e009      	b.n	8016914 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8016900:	88fb      	ldrh	r3, [r7, #6]
 8016902:	4a08      	ldr	r2, [pc, #32]	; (8016924 <memp_init+0x30>)
 8016904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016908:	4618      	mov	r0, r3
 801690a:	f7ff ffc3 	bl	8016894 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801690e:	88fb      	ldrh	r3, [r7, #6]
 8016910:	3301      	adds	r3, #1
 8016912:	80fb      	strh	r3, [r7, #6]
 8016914:	88fb      	ldrh	r3, [r7, #6]
 8016916:	2b0c      	cmp	r3, #12
 8016918:	d9f2      	bls.n	8016900 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801691a:	bf00      	nop
 801691c:	bf00      	nop
 801691e:	3708      	adds	r7, #8
 8016920:	46bd      	mov	sp, r7
 8016922:	bd80      	pop	{r7, pc}
 8016924:	080243b8 	.word	0x080243b8

08016928 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b084      	sub	sp, #16
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8016930:	f001 fc16 	bl	8018160 <sys_arch_protect>
 8016934:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	689b      	ldr	r3, [r3, #8]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801693e:	68bb      	ldr	r3, [r7, #8]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d015      	beq.n	8016970 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	689b      	ldr	r3, [r3, #8]
 8016948:	68ba      	ldr	r2, [r7, #8]
 801694a:	6812      	ldr	r2, [r2, #0]
 801694c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	f003 0303 	and.w	r3, r3, #3
 8016954:	2b00      	cmp	r3, #0
 8016956:	d006      	beq.n	8016966 <do_memp_malloc_pool+0x3e>
 8016958:	4b09      	ldr	r3, [pc, #36]	; (8016980 <do_memp_malloc_pool+0x58>)
 801695a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801695e:	4909      	ldr	r1, [pc, #36]	; (8016984 <do_memp_malloc_pool+0x5c>)
 8016960:	4809      	ldr	r0, [pc, #36]	; (8016988 <do_memp_malloc_pool+0x60>)
 8016962:	f009 f84b 	bl	801f9fc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016966:	68f8      	ldr	r0, [r7, #12]
 8016968:	f001 fc08 	bl	801817c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801696c:	68bb      	ldr	r3, [r7, #8]
 801696e:	e003      	b.n	8016978 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016970:	68f8      	ldr	r0, [r7, #12]
 8016972:	f001 fc03 	bl	801817c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8016976:	2300      	movs	r3, #0
}
 8016978:	4618      	mov	r0, r3
 801697a:	3710      	adds	r7, #16
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}
 8016980:	08021d20 	.word	0x08021d20
 8016984:	08021d94 	.word	0x08021d94
 8016988:	08021db8 	.word	0x08021db8

0801698c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b082      	sub	sp, #8
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d106      	bne.n	80169a8 <memp_malloc_pool+0x1c>
 801699a:	4b0a      	ldr	r3, [pc, #40]	; (80169c4 <memp_malloc_pool+0x38>)
 801699c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80169a0:	4909      	ldr	r1, [pc, #36]	; (80169c8 <memp_malloc_pool+0x3c>)
 80169a2:	480a      	ldr	r0, [pc, #40]	; (80169cc <memp_malloc_pool+0x40>)
 80169a4:	f009 f82a 	bl	801f9fc <iprintf>
  if (desc == NULL) {
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d101      	bne.n	80169b2 <memp_malloc_pool+0x26>
    return NULL;
 80169ae:	2300      	movs	r3, #0
 80169b0:	e003      	b.n	80169ba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80169b2:	6878      	ldr	r0, [r7, #4]
 80169b4:	f7ff ffb8 	bl	8016928 <do_memp_malloc_pool>
 80169b8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3708      	adds	r7, #8
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}
 80169c2:	bf00      	nop
 80169c4:	08021d20 	.word	0x08021d20
 80169c8:	08021de0 	.word	0x08021de0
 80169cc:	08021db8 	.word	0x08021db8

080169d0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b084      	sub	sp, #16
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	4603      	mov	r3, r0
 80169d8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80169da:	79fb      	ldrb	r3, [r7, #7]
 80169dc:	2b0c      	cmp	r3, #12
 80169de:	d908      	bls.n	80169f2 <memp_malloc+0x22>
 80169e0:	4b0a      	ldr	r3, [pc, #40]	; (8016a0c <memp_malloc+0x3c>)
 80169e2:	f240 1257 	movw	r2, #343	; 0x157
 80169e6:	490a      	ldr	r1, [pc, #40]	; (8016a10 <memp_malloc+0x40>)
 80169e8:	480a      	ldr	r0, [pc, #40]	; (8016a14 <memp_malloc+0x44>)
 80169ea:	f009 f807 	bl	801f9fc <iprintf>
 80169ee:	2300      	movs	r3, #0
 80169f0:	e008      	b.n	8016a04 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80169f2:	79fb      	ldrb	r3, [r7, #7]
 80169f4:	4a08      	ldr	r2, [pc, #32]	; (8016a18 <memp_malloc+0x48>)
 80169f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169fa:	4618      	mov	r0, r3
 80169fc:	f7ff ff94 	bl	8016928 <do_memp_malloc_pool>
 8016a00:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8016a02:	68fb      	ldr	r3, [r7, #12]
}
 8016a04:	4618      	mov	r0, r3
 8016a06:	3710      	adds	r7, #16
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bd80      	pop	{r7, pc}
 8016a0c:	08021d20 	.word	0x08021d20
 8016a10:	08021df4 	.word	0x08021df4
 8016a14:	08021db8 	.word	0x08021db8
 8016a18:	080243b8 	.word	0x080243b8

08016a1c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b084      	sub	sp, #16
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
 8016a24:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	f003 0303 	and.w	r3, r3, #3
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d006      	beq.n	8016a3e <do_memp_free_pool+0x22>
 8016a30:	4b0d      	ldr	r3, [pc, #52]	; (8016a68 <do_memp_free_pool+0x4c>)
 8016a32:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8016a36:	490d      	ldr	r1, [pc, #52]	; (8016a6c <do_memp_free_pool+0x50>)
 8016a38:	480d      	ldr	r0, [pc, #52]	; (8016a70 <do_memp_free_pool+0x54>)
 8016a3a:	f008 ffdf 	bl	801f9fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8016a42:	f001 fb8d 	bl	8018160 <sys_arch_protect>
 8016a46:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	689b      	ldr	r3, [r3, #8]
 8016a4c:	681a      	ldr	r2, [r3, #0]
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	689b      	ldr	r3, [r3, #8]
 8016a56:	68fa      	ldr	r2, [r7, #12]
 8016a58:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8016a5a:	68b8      	ldr	r0, [r7, #8]
 8016a5c:	f001 fb8e 	bl	801817c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8016a60:	bf00      	nop
 8016a62:	3710      	adds	r7, #16
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}
 8016a68:	08021d20 	.word	0x08021d20
 8016a6c:	08021e14 	.word	0x08021e14
 8016a70:	08021db8 	.word	0x08021db8

08016a74 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b082      	sub	sp, #8
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
 8016a7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d106      	bne.n	8016a92 <memp_free_pool+0x1e>
 8016a84:	4b0a      	ldr	r3, [pc, #40]	; (8016ab0 <memp_free_pool+0x3c>)
 8016a86:	f240 1295 	movw	r2, #405	; 0x195
 8016a8a:	490a      	ldr	r1, [pc, #40]	; (8016ab4 <memp_free_pool+0x40>)
 8016a8c:	480a      	ldr	r0, [pc, #40]	; (8016ab8 <memp_free_pool+0x44>)
 8016a8e:	f008 ffb5 	bl	801f9fc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d007      	beq.n	8016aa8 <memp_free_pool+0x34>
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d004      	beq.n	8016aa8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8016a9e:	6839      	ldr	r1, [r7, #0]
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f7ff ffbb 	bl	8016a1c <do_memp_free_pool>
 8016aa6:	e000      	b.n	8016aaa <memp_free_pool+0x36>
    return;
 8016aa8:	bf00      	nop
}
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	08021d20 	.word	0x08021d20
 8016ab4:	08021de0 	.word	0x08021de0
 8016ab8:	08021db8 	.word	0x08021db8

08016abc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b082      	sub	sp, #8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	6039      	str	r1, [r7, #0]
 8016ac6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8016ac8:	79fb      	ldrb	r3, [r7, #7]
 8016aca:	2b0c      	cmp	r3, #12
 8016acc:	d907      	bls.n	8016ade <memp_free+0x22>
 8016ace:	4b0c      	ldr	r3, [pc, #48]	; (8016b00 <memp_free+0x44>)
 8016ad0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8016ad4:	490b      	ldr	r1, [pc, #44]	; (8016b04 <memp_free+0x48>)
 8016ad6:	480c      	ldr	r0, [pc, #48]	; (8016b08 <memp_free+0x4c>)
 8016ad8:	f008 ff90 	bl	801f9fc <iprintf>
 8016adc:	e00c      	b.n	8016af8 <memp_free+0x3c>

  if (mem == NULL) {
 8016ade:	683b      	ldr	r3, [r7, #0]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d008      	beq.n	8016af6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8016ae4:	79fb      	ldrb	r3, [r7, #7]
 8016ae6:	4a09      	ldr	r2, [pc, #36]	; (8016b0c <memp_free+0x50>)
 8016ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016aec:	6839      	ldr	r1, [r7, #0]
 8016aee:	4618      	mov	r0, r3
 8016af0:	f7ff ff94 	bl	8016a1c <do_memp_free_pool>
 8016af4:	e000      	b.n	8016af8 <memp_free+0x3c>
    return;
 8016af6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8016af8:	3708      	adds	r7, #8
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}
 8016afe:	bf00      	nop
 8016b00:	08021d20 	.word	0x08021d20
 8016b04:	08021e34 	.word	0x08021e34
 8016b08:	08021db8 	.word	0x08021db8
 8016b0c:	080243b8 	.word	0x080243b8

08016b10 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d013      	beq.n	8016b46 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d00b      	beq.n	8016b3e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f000 feba 	bl	80178a4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2200      	movs	r2, #0
 8016b34:	605a      	str	r2, [r3, #4]
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	685a      	ldr	r2, [r3, #4]
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8016b3e:	6879      	ldr	r1, [r7, #4]
 8016b40:	2006      	movs	r0, #6
 8016b42:	f7ff ffbb 	bl	8016abc <memp_free>
  }
}
 8016b46:	bf00      	nop
 8016b48:	3708      	adds	r7, #8
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}
	...

08016b50 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b082      	sub	sp, #8
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d108      	bne.n	8016b70 <netbuf_next+0x20>
 8016b5e:	4b11      	ldr	r3, [pc, #68]	; (8016ba4 <netbuf_next+0x54>)
 8016b60:	22e0      	movs	r2, #224	; 0xe0
 8016b62:	4911      	ldr	r1, [pc, #68]	; (8016ba8 <netbuf_next+0x58>)
 8016b64:	4811      	ldr	r0, [pc, #68]	; (8016bac <netbuf_next+0x5c>)
 8016b66:	f008 ff49 	bl	801f9fc <iprintf>
 8016b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b6e:	e014      	b.n	8016b9a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	685b      	ldr	r3, [r3, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d102      	bne.n	8016b80 <netbuf_next+0x30>
    return -1;
 8016b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b7e:	e00c      	b.n	8016b9a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	685b      	ldr	r3, [r3, #4]
 8016b84:	681a      	ldr	r2, [r3, #0]
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	685b      	ldr	r3, [r3, #4]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d101      	bne.n	8016b98 <netbuf_next+0x48>
    return 1;
 8016b94:	2301      	movs	r3, #1
 8016b96:	e000      	b.n	8016b9a <netbuf_next+0x4a>
  }
  return 0;
 8016b98:	2300      	movs	r3, #0
}
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	3708      	adds	r7, #8
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}
 8016ba2:	bf00      	nop
 8016ba4:	08021e50 	.word	0x08021e50
 8016ba8:	08021ff0 	.word	0x08021ff0
 8016bac:	08021ee0 	.word	0x08021ee0

08016bb0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8016bb0:	b480      	push	{r7}
 8016bb2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8016bb4:	bf00      	nop
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbc:	4770      	bx	lr
	...

08016bc0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b086      	sub	sp, #24
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	60f8      	str	r0, [r7, #12]
 8016bc8:	60b9      	str	r1, [r7, #8]
 8016bca:	607a      	str	r2, [r7, #4]
 8016bcc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d108      	bne.n	8016be6 <netif_add+0x26>
 8016bd4:	4b57      	ldr	r3, [pc, #348]	; (8016d34 <netif_add+0x174>)
 8016bd6:	f240 1227 	movw	r2, #295	; 0x127
 8016bda:	4957      	ldr	r1, [pc, #348]	; (8016d38 <netif_add+0x178>)
 8016bdc:	4857      	ldr	r0, [pc, #348]	; (8016d3c <netif_add+0x17c>)
 8016bde:	f008 ff0d 	bl	801f9fc <iprintf>
 8016be2:	2300      	movs	r3, #0
 8016be4:	e0a2      	b.n	8016d2c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8016be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d108      	bne.n	8016bfe <netif_add+0x3e>
 8016bec:	4b51      	ldr	r3, [pc, #324]	; (8016d34 <netif_add+0x174>)
 8016bee:	f44f 7294 	mov.w	r2, #296	; 0x128
 8016bf2:	4953      	ldr	r1, [pc, #332]	; (8016d40 <netif_add+0x180>)
 8016bf4:	4851      	ldr	r0, [pc, #324]	; (8016d3c <netif_add+0x17c>)
 8016bf6:	f008 ff01 	bl	801f9fc <iprintf>
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	e096      	b.n	8016d2c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d101      	bne.n	8016c08 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8016c04:	4b4f      	ldr	r3, [pc, #316]	; (8016d44 <netif_add+0x184>)
 8016c06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d101      	bne.n	8016c12 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8016c0e:	4b4d      	ldr	r3, [pc, #308]	; (8016d44 <netif_add+0x184>)
 8016c10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8016c12:	683b      	ldr	r3, [r7, #0]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d101      	bne.n	8016c1c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8016c18:	4b4a      	ldr	r3, [pc, #296]	; (8016d44 <netif_add+0x184>)
 8016c1a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	2200      	movs	r2, #0
 8016c26:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	4a45      	ldr	r2, [pc, #276]	; (8016d48 <netif_add+0x188>)
 8016c32:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	2200      	movs	r2, #0
 8016c38:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	2200      	movs	r2, #0
 8016c46:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	6a3a      	ldr	r2, [r7, #32]
 8016c4c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8016c4e:	4b3f      	ldr	r3, [pc, #252]	; (8016d4c <netif_add+0x18c>)
 8016c50:	781a      	ldrb	r2, [r3, #0]
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c5c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	687a      	ldr	r2, [r7, #4]
 8016c62:	68b9      	ldr	r1, [r7, #8]
 8016c64:	68f8      	ldr	r0, [r7, #12]
 8016c66:	f000 f913 	bl	8016e90 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8016c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6c:	68f8      	ldr	r0, [r7, #12]
 8016c6e:	4798      	blx	r3
 8016c70:	4603      	mov	r3, r0
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d001      	beq.n	8016c7a <netif_add+0xba>
    return NULL;
 8016c76:	2300      	movs	r3, #0
 8016c78:	e058      	b.n	8016d2c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c80:	2bff      	cmp	r3, #255	; 0xff
 8016c82:	d103      	bne.n	8016c8c <netif_add+0xcc>
        netif->num = 0;
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	2200      	movs	r2, #0
 8016c88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016c90:	4b2f      	ldr	r3, [pc, #188]	; (8016d50 <netif_add+0x190>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	617b      	str	r3, [r7, #20]
 8016c96:	e02b      	b.n	8016cf0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016c98:	697a      	ldr	r2, [r7, #20]
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d106      	bne.n	8016cae <netif_add+0xee>
 8016ca0:	4b24      	ldr	r3, [pc, #144]	; (8016d34 <netif_add+0x174>)
 8016ca2:	f240 128b 	movw	r2, #395	; 0x18b
 8016ca6:	492b      	ldr	r1, [pc, #172]	; (8016d54 <netif_add+0x194>)
 8016ca8:	4824      	ldr	r0, [pc, #144]	; (8016d3c <netif_add+0x17c>)
 8016caa:	f008 fea7 	bl	801f9fc <iprintf>
        num_netifs++;
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	3301      	adds	r3, #1
 8016cb2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8016cb4:	693b      	ldr	r3, [r7, #16]
 8016cb6:	2bff      	cmp	r3, #255	; 0xff
 8016cb8:	dd06      	ble.n	8016cc8 <netif_add+0x108>
 8016cba:	4b1e      	ldr	r3, [pc, #120]	; (8016d34 <netif_add+0x174>)
 8016cbc:	f240 128d 	movw	r2, #397	; 0x18d
 8016cc0:	4925      	ldr	r1, [pc, #148]	; (8016d58 <netif_add+0x198>)
 8016cc2:	481e      	ldr	r0, [pc, #120]	; (8016d3c <netif_add+0x17c>)
 8016cc4:	f008 fe9a 	bl	801f9fc <iprintf>
        if (netif2->num == netif->num) {
 8016cc8:	697b      	ldr	r3, [r7, #20]
 8016cca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016cd4:	429a      	cmp	r2, r3
 8016cd6:	d108      	bne.n	8016cea <netif_add+0x12a>
          netif->num++;
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016cde:	3301      	adds	r3, #1
 8016ce0:	b2da      	uxtb	r2, r3
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8016ce8:	e005      	b.n	8016cf6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016cea:	697b      	ldr	r3, [r7, #20]
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	617b      	str	r3, [r7, #20]
 8016cf0:	697b      	ldr	r3, [r7, #20]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d1d0      	bne.n	8016c98 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8016cf6:	697b      	ldr	r3, [r7, #20]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d1be      	bne.n	8016c7a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016d02:	2bfe      	cmp	r3, #254	; 0xfe
 8016d04:	d103      	bne.n	8016d0e <netif_add+0x14e>
    netif_num = 0;
 8016d06:	4b11      	ldr	r3, [pc, #68]	; (8016d4c <netif_add+0x18c>)
 8016d08:	2200      	movs	r2, #0
 8016d0a:	701a      	strb	r2, [r3, #0]
 8016d0c:	e006      	b.n	8016d1c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016d14:	3301      	adds	r3, #1
 8016d16:	b2da      	uxtb	r2, r3
 8016d18:	4b0c      	ldr	r3, [pc, #48]	; (8016d4c <netif_add+0x18c>)
 8016d1a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8016d1c:	4b0c      	ldr	r3, [pc, #48]	; (8016d50 <netif_add+0x190>)
 8016d1e:	681a      	ldr	r2, [r3, #0]
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8016d24:	4a0a      	ldr	r2, [pc, #40]	; (8016d50 <netif_add+0x190>)
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8016d2a:	68fb      	ldr	r3, [r7, #12]
}
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	3718      	adds	r7, #24
 8016d30:	46bd      	mov	sp, r7
 8016d32:	bd80      	pop	{r7, pc}
 8016d34:	08022028 	.word	0x08022028
 8016d38:	080220fc 	.word	0x080220fc
 8016d3c:	080220b8 	.word	0x080220b8
 8016d40:	08022118 	.word	0x08022118
 8016d44:	08024318 	.word	0x08024318
 8016d48:	0801716b 	.word	0x0801716b
 8016d4c:	2400f918 	.word	0x2400f918
 8016d50:	2400f910 	.word	0x2400f910
 8016d54:	0802213c 	.word	0x0802213c
 8016d58:	08022150 	.word	0x08022150

08016d5c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b082      	sub	sp, #8
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
 8016d64:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8016d66:	6839      	ldr	r1, [r7, #0]
 8016d68:	6878      	ldr	r0, [r7, #4]
 8016d6a:	f003 f835 	bl	8019dd8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8016d6e:	6839      	ldr	r1, [r7, #0]
 8016d70:	6878      	ldr	r0, [r7, #4]
 8016d72:	f008 f89f 	bl	801eeb4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8016d76:	bf00      	nop
 8016d78:	3708      	adds	r7, #8
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd80      	pop	{r7, pc}
	...

08016d80 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b086      	sub	sp, #24
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	60b9      	str	r1, [r7, #8]
 8016d8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d106      	bne.n	8016da0 <netif_do_set_ipaddr+0x20>
 8016d92:	4b1d      	ldr	r3, [pc, #116]	; (8016e08 <netif_do_set_ipaddr+0x88>)
 8016d94:	f240 12cb 	movw	r2, #459	; 0x1cb
 8016d98:	491c      	ldr	r1, [pc, #112]	; (8016e0c <netif_do_set_ipaddr+0x8c>)
 8016d9a:	481d      	ldr	r0, [pc, #116]	; (8016e10 <netif_do_set_ipaddr+0x90>)
 8016d9c:	f008 fe2e 	bl	801f9fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d106      	bne.n	8016db4 <netif_do_set_ipaddr+0x34>
 8016da6:	4b18      	ldr	r3, [pc, #96]	; (8016e08 <netif_do_set_ipaddr+0x88>)
 8016da8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8016dac:	4917      	ldr	r1, [pc, #92]	; (8016e0c <netif_do_set_ipaddr+0x8c>)
 8016dae:	4818      	ldr	r0, [pc, #96]	; (8016e10 <netif_do_set_ipaddr+0x90>)
 8016db0:	f008 fe24 	bl	801f9fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	681a      	ldr	r2, [r3, #0]
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	3304      	adds	r3, #4
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d01c      	beq.n	8016dfc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	3304      	adds	r3, #4
 8016dcc:	681a      	ldr	r2, [r3, #0]
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8016dd2:	f107 0314 	add.w	r3, r7, #20
 8016dd6:	4619      	mov	r1, r3
 8016dd8:	6878      	ldr	r0, [r7, #4]
 8016dda:	f7ff ffbf 	bl	8016d5c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8016dde:	68bb      	ldr	r3, [r7, #8]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d002      	beq.n	8016dea <netif_do_set_ipaddr+0x6a>
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	e000      	b.n	8016dec <netif_do_set_ipaddr+0x6c>
 8016dea:	2300      	movs	r3, #0
 8016dec:	68fa      	ldr	r2, [r7, #12]
 8016dee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8016df0:	2101      	movs	r1, #1
 8016df2:	68f8      	ldr	r0, [r7, #12]
 8016df4:	f000 f8d2 	bl	8016f9c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8016df8:	2301      	movs	r3, #1
 8016dfa:	e000      	b.n	8016dfe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8016dfc:	2300      	movs	r3, #0
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3718      	adds	r7, #24
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}
 8016e06:	bf00      	nop
 8016e08:	08022028 	.word	0x08022028
 8016e0c:	08022180 	.word	0x08022180
 8016e10:	080220b8 	.word	0x080220b8

08016e14 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8016e14:	b480      	push	{r7}
 8016e16:	b085      	sub	sp, #20
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	60f8      	str	r0, [r7, #12]
 8016e1c:	60b9      	str	r1, [r7, #8]
 8016e1e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	681a      	ldr	r2, [r3, #0]
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	3308      	adds	r3, #8
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	d00a      	beq.n	8016e44 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8016e2e:	68bb      	ldr	r3, [r7, #8]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d002      	beq.n	8016e3a <netif_do_set_netmask+0x26>
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	e000      	b.n	8016e3c <netif_do_set_netmask+0x28>
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	68fa      	ldr	r2, [r7, #12]
 8016e3e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8016e40:	2301      	movs	r3, #1
 8016e42:	e000      	b.n	8016e46 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8016e44:	2300      	movs	r3, #0
}
 8016e46:	4618      	mov	r0, r3
 8016e48:	3714      	adds	r7, #20
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e50:	4770      	bx	lr

08016e52 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8016e52:	b480      	push	{r7}
 8016e54:	b085      	sub	sp, #20
 8016e56:	af00      	add	r7, sp, #0
 8016e58:	60f8      	str	r0, [r7, #12]
 8016e5a:	60b9      	str	r1, [r7, #8]
 8016e5c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8016e5e:	68bb      	ldr	r3, [r7, #8]
 8016e60:	681a      	ldr	r2, [r3, #0]
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	330c      	adds	r3, #12
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	d00a      	beq.n	8016e82 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016e6c:	68bb      	ldr	r3, [r7, #8]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d002      	beq.n	8016e78 <netif_do_set_gw+0x26>
 8016e72:	68bb      	ldr	r3, [r7, #8]
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	e000      	b.n	8016e7a <netif_do_set_gw+0x28>
 8016e78:	2300      	movs	r3, #0
 8016e7a:	68fa      	ldr	r2, [r7, #12]
 8016e7c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8016e7e:	2301      	movs	r3, #1
 8016e80:	e000      	b.n	8016e84 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8016e82:	2300      	movs	r3, #0
}
 8016e84:	4618      	mov	r0, r3
 8016e86:	3714      	adds	r7, #20
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8e:	4770      	bx	lr

08016e90 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b088      	sub	sp, #32
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	60f8      	str	r0, [r7, #12]
 8016e98:	60b9      	str	r1, [r7, #8]
 8016e9a:	607a      	str	r2, [r7, #4]
 8016e9c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d101      	bne.n	8016eb0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8016eac:	4b1c      	ldr	r3, [pc, #112]	; (8016f20 <netif_set_addr+0x90>)
 8016eae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d101      	bne.n	8016eba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8016eb6:	4b1a      	ldr	r3, [pc, #104]	; (8016f20 <netif_set_addr+0x90>)
 8016eb8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8016eba:	683b      	ldr	r3, [r7, #0]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d101      	bne.n	8016ec4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8016ec0:	4b17      	ldr	r3, [pc, #92]	; (8016f20 <netif_set_addr+0x90>)
 8016ec2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8016ec4:	68bb      	ldr	r3, [r7, #8]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d003      	beq.n	8016ed2 <netif_set_addr+0x42>
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d101      	bne.n	8016ed6 <netif_set_addr+0x46>
 8016ed2:	2301      	movs	r3, #1
 8016ed4:	e000      	b.n	8016ed8 <netif_set_addr+0x48>
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8016eda:	697b      	ldr	r3, [r7, #20]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d006      	beq.n	8016eee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016ee0:	f107 0310 	add.w	r3, r7, #16
 8016ee4:	461a      	mov	r2, r3
 8016ee6:	68b9      	ldr	r1, [r7, #8]
 8016ee8:	68f8      	ldr	r0, [r7, #12]
 8016eea:	f7ff ff49 	bl	8016d80 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8016eee:	69fa      	ldr	r2, [r7, #28]
 8016ef0:	6879      	ldr	r1, [r7, #4]
 8016ef2:	68f8      	ldr	r0, [r7, #12]
 8016ef4:	f7ff ff8e 	bl	8016e14 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8016ef8:	69ba      	ldr	r2, [r7, #24]
 8016efa:	6839      	ldr	r1, [r7, #0]
 8016efc:	68f8      	ldr	r0, [r7, #12]
 8016efe:	f7ff ffa8 	bl	8016e52 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8016f02:	697b      	ldr	r3, [r7, #20]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d106      	bne.n	8016f16 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016f08:	f107 0310 	add.w	r3, r7, #16
 8016f0c:	461a      	mov	r2, r3
 8016f0e:	68b9      	ldr	r1, [r7, #8]
 8016f10:	68f8      	ldr	r0, [r7, #12]
 8016f12:	f7ff ff35 	bl	8016d80 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8016f16:	bf00      	nop
 8016f18:	3720      	adds	r7, #32
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}
 8016f1e:	bf00      	nop
 8016f20:	08024318 	.word	0x08024318

08016f24 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8016f24:	b480      	push	{r7}
 8016f26:	b083      	sub	sp, #12
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8016f2c:	4a04      	ldr	r2, [pc, #16]	; (8016f40 <netif_set_default+0x1c>)
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8016f32:	bf00      	nop
 8016f34:	370c      	adds	r7, #12
 8016f36:	46bd      	mov	sp, r7
 8016f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3c:	4770      	bx	lr
 8016f3e:	bf00      	nop
 8016f40:	2400f914 	.word	0x2400f914

08016f44 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b082      	sub	sp, #8
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d107      	bne.n	8016f62 <netif_set_up+0x1e>
 8016f52:	4b0f      	ldr	r3, [pc, #60]	; (8016f90 <netif_set_up+0x4c>)
 8016f54:	f44f 7254 	mov.w	r2, #848	; 0x350
 8016f58:	490e      	ldr	r1, [pc, #56]	; (8016f94 <netif_set_up+0x50>)
 8016f5a:	480f      	ldr	r0, [pc, #60]	; (8016f98 <netif_set_up+0x54>)
 8016f5c:	f008 fd4e 	bl	801f9fc <iprintf>
 8016f60:	e013      	b.n	8016f8a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f68:	f003 0301 	and.w	r3, r3, #1
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d10c      	bne.n	8016f8a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f76:	f043 0301 	orr.w	r3, r3, #1
 8016f7a:	b2da      	uxtb	r2, r3
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016f82:	2103      	movs	r1, #3
 8016f84:	6878      	ldr	r0, [r7, #4]
 8016f86:	f000 f809 	bl	8016f9c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8016f8a:	3708      	adds	r7, #8
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}
 8016f90:	08022028 	.word	0x08022028
 8016f94:	080221f0 	.word	0x080221f0
 8016f98:	080220b8 	.word	0x080220b8

08016f9c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b082      	sub	sp, #8
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
 8016fa4:	460b      	mov	r3, r1
 8016fa6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d106      	bne.n	8016fbc <netif_issue_reports+0x20>
 8016fae:	4b18      	ldr	r3, [pc, #96]	; (8017010 <netif_issue_reports+0x74>)
 8016fb0:	f240 326d 	movw	r2, #877	; 0x36d
 8016fb4:	4917      	ldr	r1, [pc, #92]	; (8017014 <netif_issue_reports+0x78>)
 8016fb6:	4818      	ldr	r0, [pc, #96]	; (8017018 <netif_issue_reports+0x7c>)
 8016fb8:	f008 fd20 	bl	801f9fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016fc2:	f003 0304 	and.w	r3, r3, #4
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d01e      	beq.n	8017008 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016fd0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d017      	beq.n	8017008 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016fd8:	78fb      	ldrb	r3, [r7, #3]
 8016fda:	f003 0301 	and.w	r3, r3, #1
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d013      	beq.n	801700a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	3304      	adds	r3, #4
 8016fe6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d00e      	beq.n	801700a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ff2:	f003 0308 	and.w	r3, r3, #8
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d007      	beq.n	801700a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	3304      	adds	r3, #4
 8016ffe:	4619      	mov	r1, r3
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	f7fd fbe3 	bl	80147cc <etharp_request>
 8017006:	e000      	b.n	801700a <netif_issue_reports+0x6e>
    return;
 8017008:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801700a:	3708      	adds	r7, #8
 801700c:	46bd      	mov	sp, r7
 801700e:	bd80      	pop	{r7, pc}
 8017010:	08022028 	.word	0x08022028
 8017014:	0802220c 	.word	0x0802220c
 8017018:	080220b8 	.word	0x080220b8

0801701c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b082      	sub	sp, #8
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d107      	bne.n	801703a <netif_set_down+0x1e>
 801702a:	4b12      	ldr	r3, [pc, #72]	; (8017074 <netif_set_down+0x58>)
 801702c:	f240 329b 	movw	r2, #923	; 0x39b
 8017030:	4911      	ldr	r1, [pc, #68]	; (8017078 <netif_set_down+0x5c>)
 8017032:	4812      	ldr	r0, [pc, #72]	; (801707c <netif_set_down+0x60>)
 8017034:	f008 fce2 	bl	801f9fc <iprintf>
 8017038:	e019      	b.n	801706e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017040:	f003 0301 	and.w	r3, r3, #1
 8017044:	2b00      	cmp	r3, #0
 8017046:	d012      	beq.n	801706e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801704e:	f023 0301 	bic.w	r3, r3, #1
 8017052:	b2da      	uxtb	r2, r3
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017060:	f003 0308 	and.w	r3, r3, #8
 8017064:	2b00      	cmp	r3, #0
 8017066:	d002      	beq.n	801706e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f7fc ff6d 	bl	8013f48 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801706e:	3708      	adds	r7, #8
 8017070:	46bd      	mov	sp, r7
 8017072:	bd80      	pop	{r7, pc}
 8017074:	08022028 	.word	0x08022028
 8017078:	08022230 	.word	0x08022230
 801707c:	080220b8 	.word	0x080220b8

08017080 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	b082      	sub	sp, #8
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d107      	bne.n	801709e <netif_set_link_up+0x1e>
 801708e:	4b13      	ldr	r3, [pc, #76]	; (80170dc <netif_set_link_up+0x5c>)
 8017090:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8017094:	4912      	ldr	r1, [pc, #72]	; (80170e0 <netif_set_link_up+0x60>)
 8017096:	4813      	ldr	r0, [pc, #76]	; (80170e4 <netif_set_link_up+0x64>)
 8017098:	f008 fcb0 	bl	801f9fc <iprintf>
 801709c:	e01b      	b.n	80170d6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170a4:	f003 0304 	and.w	r3, r3, #4
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d114      	bne.n	80170d6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170b2:	f043 0304 	orr.w	r3, r3, #4
 80170b6:	b2da      	uxtb	r2, r3
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80170be:	2103      	movs	r1, #3
 80170c0:	6878      	ldr	r0, [r7, #4]
 80170c2:	f7ff ff6b 	bl	8016f9c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	69db      	ldr	r3, [r3, #28]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d003      	beq.n	80170d6 <netif_set_link_up+0x56>
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	69db      	ldr	r3, [r3, #28]
 80170d2:	6878      	ldr	r0, [r7, #4]
 80170d4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80170d6:	3708      	adds	r7, #8
 80170d8:	46bd      	mov	sp, r7
 80170da:	bd80      	pop	{r7, pc}
 80170dc:	08022028 	.word	0x08022028
 80170e0:	08022250 	.word	0x08022250
 80170e4:	080220b8 	.word	0x080220b8

080170e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b082      	sub	sp, #8
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d107      	bne.n	8017106 <netif_set_link_down+0x1e>
 80170f6:	4b11      	ldr	r3, [pc, #68]	; (801713c <netif_set_link_down+0x54>)
 80170f8:	f240 4206 	movw	r2, #1030	; 0x406
 80170fc:	4910      	ldr	r1, [pc, #64]	; (8017140 <netif_set_link_down+0x58>)
 80170fe:	4811      	ldr	r0, [pc, #68]	; (8017144 <netif_set_link_down+0x5c>)
 8017100:	f008 fc7c 	bl	801f9fc <iprintf>
 8017104:	e017      	b.n	8017136 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801710c:	f003 0304 	and.w	r3, r3, #4
 8017110:	2b00      	cmp	r3, #0
 8017112:	d010      	beq.n	8017136 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801711a:	f023 0304 	bic.w	r3, r3, #4
 801711e:	b2da      	uxtb	r2, r3
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	69db      	ldr	r3, [r3, #28]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d003      	beq.n	8017136 <netif_set_link_down+0x4e>
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	69db      	ldr	r3, [r3, #28]
 8017132:	6878      	ldr	r0, [r7, #4]
 8017134:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8017136:	3708      	adds	r7, #8
 8017138:	46bd      	mov	sp, r7
 801713a:	bd80      	pop	{r7, pc}
 801713c:	08022028 	.word	0x08022028
 8017140:	08022274 	.word	0x08022274
 8017144:	080220b8 	.word	0x080220b8

08017148 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8017148:	b480      	push	{r7}
 801714a:	b083      	sub	sp, #12
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
 8017150:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d002      	beq.n	801715e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	683a      	ldr	r2, [r7, #0]
 801715c:	61da      	str	r2, [r3, #28]
  }
}
 801715e:	bf00      	nop
 8017160:	370c      	adds	r7, #12
 8017162:	46bd      	mov	sp, r7
 8017164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017168:	4770      	bx	lr

0801716a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801716a:	b480      	push	{r7}
 801716c:	b085      	sub	sp, #20
 801716e:	af00      	add	r7, sp, #0
 8017170:	60f8      	str	r0, [r7, #12]
 8017172:	60b9      	str	r1, [r7, #8]
 8017174:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8017176:	f06f 030b 	mvn.w	r3, #11
}
 801717a:	4618      	mov	r0, r3
 801717c:	3714      	adds	r7, #20
 801717e:	46bd      	mov	sp, r7
 8017180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017184:	4770      	bx	lr
	...

08017188 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8017188:	b480      	push	{r7}
 801718a:	b085      	sub	sp, #20
 801718c:	af00      	add	r7, sp, #0
 801718e:	4603      	mov	r3, r0
 8017190:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8017192:	79fb      	ldrb	r3, [r7, #7]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d013      	beq.n	80171c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8017198:	4b0d      	ldr	r3, [pc, #52]	; (80171d0 <netif_get_by_index+0x48>)
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	60fb      	str	r3, [r7, #12]
 801719e:	e00c      	b.n	80171ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80171a6:	3301      	adds	r3, #1
 80171a8:	b2db      	uxtb	r3, r3
 80171aa:	79fa      	ldrb	r2, [r7, #7]
 80171ac:	429a      	cmp	r2, r3
 80171ae:	d101      	bne.n	80171b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	e006      	b.n	80171c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	60fb      	str	r3, [r7, #12]
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d1ef      	bne.n	80171a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80171c0:	2300      	movs	r3, #0
}
 80171c2:	4618      	mov	r0, r3
 80171c4:	3714      	adds	r7, #20
 80171c6:	46bd      	mov	sp, r7
 80171c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171cc:	4770      	bx	lr
 80171ce:	bf00      	nop
 80171d0:	2400f910 	.word	0x2400f910

080171d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b082      	sub	sp, #8
 80171d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80171da:	f000 ffc1 	bl	8018160 <sys_arch_protect>
 80171de:	6038      	str	r0, [r7, #0]
 80171e0:	4b0d      	ldr	r3, [pc, #52]	; (8017218 <pbuf_free_ooseq+0x44>)
 80171e2:	2200      	movs	r2, #0
 80171e4:	701a      	strb	r2, [r3, #0]
 80171e6:	6838      	ldr	r0, [r7, #0]
 80171e8:	f000 ffc8 	bl	801817c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80171ec:	4b0b      	ldr	r3, [pc, #44]	; (801721c <pbuf_free_ooseq+0x48>)
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	607b      	str	r3, [r7, #4]
 80171f2:	e00a      	b.n	801720a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d003      	beq.n	8017204 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80171fc:	6878      	ldr	r0, [r7, #4]
 80171fe:	f002 fe29 	bl	8019e54 <tcp_free_ooseq>
      return;
 8017202:	e005      	b.n	8017210 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	68db      	ldr	r3, [r3, #12]
 8017208:	607b      	str	r3, [r7, #4]
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d1f1      	bne.n	80171f4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8017210:	3708      	adds	r7, #8
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop
 8017218:	2400f919 	.word	0x2400f919
 801721c:	2400f92c 	.word	0x2400f92c

08017220 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b082      	sub	sp, #8
 8017224:	af00      	add	r7, sp, #0
 8017226:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8017228:	f7ff ffd4 	bl	80171d4 <pbuf_free_ooseq>
}
 801722c:	bf00      	nop
 801722e:	3708      	adds	r7, #8
 8017230:	46bd      	mov	sp, r7
 8017232:	bd80      	pop	{r7, pc}

08017234 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b082      	sub	sp, #8
 8017238:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801723a:	f000 ff91 	bl	8018160 <sys_arch_protect>
 801723e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8017240:	4b0f      	ldr	r3, [pc, #60]	; (8017280 <pbuf_pool_is_empty+0x4c>)
 8017242:	781b      	ldrb	r3, [r3, #0]
 8017244:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8017246:	4b0e      	ldr	r3, [pc, #56]	; (8017280 <pbuf_pool_is_empty+0x4c>)
 8017248:	2201      	movs	r2, #1
 801724a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801724c:	6878      	ldr	r0, [r7, #4]
 801724e:	f000 ff95 	bl	801817c <sys_arch_unprotect>

  if (!queued) {
 8017252:	78fb      	ldrb	r3, [r7, #3]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d10f      	bne.n	8017278 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8017258:	2100      	movs	r1, #0
 801725a:	480a      	ldr	r0, [pc, #40]	; (8017284 <pbuf_pool_is_empty+0x50>)
 801725c:	f007 f91c 	bl	801e498 <tcpip_try_callback>
 8017260:	4603      	mov	r3, r0
 8017262:	2b00      	cmp	r3, #0
 8017264:	d008      	beq.n	8017278 <pbuf_pool_is_empty+0x44>
 8017266:	f000 ff7b 	bl	8018160 <sys_arch_protect>
 801726a:	6078      	str	r0, [r7, #4]
 801726c:	4b04      	ldr	r3, [pc, #16]	; (8017280 <pbuf_pool_is_empty+0x4c>)
 801726e:	2200      	movs	r2, #0
 8017270:	701a      	strb	r2, [r3, #0]
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f000 ff82 	bl	801817c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8017278:	bf00      	nop
 801727a:	3708      	adds	r7, #8
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}
 8017280:	2400f919 	.word	0x2400f919
 8017284:	08017221 	.word	0x08017221

08017288 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8017288:	b480      	push	{r7}
 801728a:	b085      	sub	sp, #20
 801728c:	af00      	add	r7, sp, #0
 801728e:	60f8      	str	r0, [r7, #12]
 8017290:	60b9      	str	r1, [r7, #8]
 8017292:	4611      	mov	r1, r2
 8017294:	461a      	mov	r2, r3
 8017296:	460b      	mov	r3, r1
 8017298:	80fb      	strh	r3, [r7, #6]
 801729a:	4613      	mov	r3, r2
 801729c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	2200      	movs	r2, #0
 80172a2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	68ba      	ldr	r2, [r7, #8]
 80172a8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	88fa      	ldrh	r2, [r7, #6]
 80172ae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	88ba      	ldrh	r2, [r7, #4]
 80172b4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80172b6:	8b3b      	ldrh	r3, [r7, #24]
 80172b8:	b2da      	uxtb	r2, r3
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	7f3a      	ldrb	r2, [r7, #28]
 80172c2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	2201      	movs	r2, #1
 80172c8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	2200      	movs	r2, #0
 80172ce:	73da      	strb	r2, [r3, #15]
}
 80172d0:	bf00      	nop
 80172d2:	3714      	adds	r7, #20
 80172d4:	46bd      	mov	sp, r7
 80172d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172da:	4770      	bx	lr

080172dc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b08c      	sub	sp, #48	; 0x30
 80172e0:	af02      	add	r7, sp, #8
 80172e2:	4603      	mov	r3, r0
 80172e4:	71fb      	strb	r3, [r7, #7]
 80172e6:	460b      	mov	r3, r1
 80172e8:	80bb      	strh	r3, [r7, #4]
 80172ea:	4613      	mov	r3, r2
 80172ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80172ee:	79fb      	ldrb	r3, [r7, #7]
 80172f0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80172f2:	887b      	ldrh	r3, [r7, #2]
 80172f4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80172f8:	f000 8082 	beq.w	8017400 <pbuf_alloc+0x124>
 80172fc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017300:	f300 80c9 	bgt.w	8017496 <pbuf_alloc+0x1ba>
 8017304:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8017308:	d010      	beq.n	801732c <pbuf_alloc+0x50>
 801730a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801730e:	f300 80c2 	bgt.w	8017496 <pbuf_alloc+0x1ba>
 8017312:	2b01      	cmp	r3, #1
 8017314:	d002      	beq.n	801731c <pbuf_alloc+0x40>
 8017316:	2b41      	cmp	r3, #65	; 0x41
 8017318:	f040 80bd 	bne.w	8017496 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801731c:	887a      	ldrh	r2, [r7, #2]
 801731e:	88bb      	ldrh	r3, [r7, #4]
 8017320:	4619      	mov	r1, r3
 8017322:	2000      	movs	r0, #0
 8017324:	f000 f8d2 	bl	80174cc <pbuf_alloc_reference>
 8017328:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801732a:	e0be      	b.n	80174aa <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801732c:	2300      	movs	r3, #0
 801732e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8017330:	2300      	movs	r3, #0
 8017332:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8017334:	88bb      	ldrh	r3, [r7, #4]
 8017336:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8017338:	200c      	movs	r0, #12
 801733a:	f7ff fb49 	bl	80169d0 <memp_malloc>
 801733e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8017340:	693b      	ldr	r3, [r7, #16]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d109      	bne.n	801735a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8017346:	f7ff ff75 	bl	8017234 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734c:	2b00      	cmp	r3, #0
 801734e:	d002      	beq.n	8017356 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8017350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017352:	f000 faa7 	bl	80178a4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8017356:	2300      	movs	r3, #0
 8017358:	e0a8      	b.n	80174ac <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801735a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801735c:	3303      	adds	r3, #3
 801735e:	b29b      	uxth	r3, r3
 8017360:	f023 0303 	bic.w	r3, r3, #3
 8017364:	b29a      	uxth	r2, r3
 8017366:	f240 53ec 	movw	r3, #1516	; 0x5ec
 801736a:	1a9b      	subs	r3, r3, r2
 801736c:	b29b      	uxth	r3, r3
 801736e:	8b7a      	ldrh	r2, [r7, #26]
 8017370:	4293      	cmp	r3, r2
 8017372:	bf28      	it	cs
 8017374:	4613      	movcs	r3, r2
 8017376:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8017378:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801737a:	3310      	adds	r3, #16
 801737c:	693a      	ldr	r2, [r7, #16]
 801737e:	4413      	add	r3, r2
 8017380:	3303      	adds	r3, #3
 8017382:	f023 0303 	bic.w	r3, r3, #3
 8017386:	4618      	mov	r0, r3
 8017388:	89f9      	ldrh	r1, [r7, #14]
 801738a:	8b7a      	ldrh	r2, [r7, #26]
 801738c:	2300      	movs	r3, #0
 801738e:	9301      	str	r3, [sp, #4]
 8017390:	887b      	ldrh	r3, [r7, #2]
 8017392:	9300      	str	r3, [sp, #0]
 8017394:	460b      	mov	r3, r1
 8017396:	4601      	mov	r1, r0
 8017398:	6938      	ldr	r0, [r7, #16]
 801739a:	f7ff ff75 	bl	8017288 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801739e:	693b      	ldr	r3, [r7, #16]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	f003 0303 	and.w	r3, r3, #3
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d006      	beq.n	80173b8 <pbuf_alloc+0xdc>
 80173aa:	4b42      	ldr	r3, [pc, #264]	; (80174b4 <pbuf_alloc+0x1d8>)
 80173ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80173b0:	4941      	ldr	r1, [pc, #260]	; (80174b8 <pbuf_alloc+0x1dc>)
 80173b2:	4842      	ldr	r0, [pc, #264]	; (80174bc <pbuf_alloc+0x1e0>)
 80173b4:	f008 fb22 	bl	801f9fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80173b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173ba:	3303      	adds	r3, #3
 80173bc:	f023 0303 	bic.w	r3, r3, #3
 80173c0:	f240 52ec 	movw	r2, #1516	; 0x5ec
 80173c4:	4293      	cmp	r3, r2
 80173c6:	d106      	bne.n	80173d6 <pbuf_alloc+0xfa>
 80173c8:	4b3a      	ldr	r3, [pc, #232]	; (80174b4 <pbuf_alloc+0x1d8>)
 80173ca:	f44f 7281 	mov.w	r2, #258	; 0x102
 80173ce:	493c      	ldr	r1, [pc, #240]	; (80174c0 <pbuf_alloc+0x1e4>)
 80173d0:	483a      	ldr	r0, [pc, #232]	; (80174bc <pbuf_alloc+0x1e0>)
 80173d2:	f008 fb13 	bl	801f9fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80173d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d102      	bne.n	80173e2 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80173dc:	693b      	ldr	r3, [r7, #16]
 80173de:	627b      	str	r3, [r7, #36]	; 0x24
 80173e0:	e002      	b.n	80173e8 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80173e2:	69fb      	ldr	r3, [r7, #28]
 80173e4:	693a      	ldr	r2, [r7, #16]
 80173e6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80173e8:	693b      	ldr	r3, [r7, #16]
 80173ea:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80173ec:	8b7a      	ldrh	r2, [r7, #26]
 80173ee:	89fb      	ldrh	r3, [r7, #14]
 80173f0:	1ad3      	subs	r3, r2, r3
 80173f2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80173f4:	2300      	movs	r3, #0
 80173f6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80173f8:	8b7b      	ldrh	r3, [r7, #26]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d19c      	bne.n	8017338 <pbuf_alloc+0x5c>
      break;
 80173fe:	e054      	b.n	80174aa <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8017400:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017402:	3303      	adds	r3, #3
 8017404:	b29b      	uxth	r3, r3
 8017406:	f023 0303 	bic.w	r3, r3, #3
 801740a:	b29a      	uxth	r2, r3
 801740c:	88bb      	ldrh	r3, [r7, #4]
 801740e:	3303      	adds	r3, #3
 8017410:	b29b      	uxth	r3, r3
 8017412:	f023 0303 	bic.w	r3, r3, #3
 8017416:	b29b      	uxth	r3, r3
 8017418:	4413      	add	r3, r2
 801741a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801741c:	8b3b      	ldrh	r3, [r7, #24]
 801741e:	3310      	adds	r3, #16
 8017420:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017422:	8b3a      	ldrh	r2, [r7, #24]
 8017424:	88bb      	ldrh	r3, [r7, #4]
 8017426:	3303      	adds	r3, #3
 8017428:	f023 0303 	bic.w	r3, r3, #3
 801742c:	429a      	cmp	r2, r3
 801742e:	d306      	bcc.n	801743e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8017430:	88bb      	ldrh	r3, [r7, #4]
 8017432:	3303      	adds	r3, #3
 8017434:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017438:	697a      	ldr	r2, [r7, #20]
 801743a:	429a      	cmp	r2, r3
 801743c:	d201      	bcs.n	8017442 <pbuf_alloc+0x166>
        return NULL;
 801743e:	2300      	movs	r3, #0
 8017440:	e034      	b.n	80174ac <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8017442:	6978      	ldr	r0, [r7, #20]
 8017444:	f7ff f928 	bl	8016698 <mem_malloc>
 8017448:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801744c:	2b00      	cmp	r3, #0
 801744e:	d101      	bne.n	8017454 <pbuf_alloc+0x178>
        return NULL;
 8017450:	2300      	movs	r3, #0
 8017452:	e02b      	b.n	80174ac <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8017454:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017456:	3310      	adds	r3, #16
 8017458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801745a:	4413      	add	r3, r2
 801745c:	3303      	adds	r3, #3
 801745e:	f023 0303 	bic.w	r3, r3, #3
 8017462:	4618      	mov	r0, r3
 8017464:	88b9      	ldrh	r1, [r7, #4]
 8017466:	88ba      	ldrh	r2, [r7, #4]
 8017468:	2300      	movs	r3, #0
 801746a:	9301      	str	r3, [sp, #4]
 801746c:	887b      	ldrh	r3, [r7, #2]
 801746e:	9300      	str	r3, [sp, #0]
 8017470:	460b      	mov	r3, r1
 8017472:	4601      	mov	r1, r0
 8017474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017476:	f7ff ff07 	bl	8017288 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801747c:	685b      	ldr	r3, [r3, #4]
 801747e:	f003 0303 	and.w	r3, r3, #3
 8017482:	2b00      	cmp	r3, #0
 8017484:	d010      	beq.n	80174a8 <pbuf_alloc+0x1cc>
 8017486:	4b0b      	ldr	r3, [pc, #44]	; (80174b4 <pbuf_alloc+0x1d8>)
 8017488:	f44f 7291 	mov.w	r2, #290	; 0x122
 801748c:	490d      	ldr	r1, [pc, #52]	; (80174c4 <pbuf_alloc+0x1e8>)
 801748e:	480b      	ldr	r0, [pc, #44]	; (80174bc <pbuf_alloc+0x1e0>)
 8017490:	f008 fab4 	bl	801f9fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8017494:	e008      	b.n	80174a8 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8017496:	4b07      	ldr	r3, [pc, #28]	; (80174b4 <pbuf_alloc+0x1d8>)
 8017498:	f240 1227 	movw	r2, #295	; 0x127
 801749c:	490a      	ldr	r1, [pc, #40]	; (80174c8 <pbuf_alloc+0x1ec>)
 801749e:	4807      	ldr	r0, [pc, #28]	; (80174bc <pbuf_alloc+0x1e0>)
 80174a0:	f008 faac 	bl	801f9fc <iprintf>
      return NULL;
 80174a4:	2300      	movs	r3, #0
 80174a6:	e001      	b.n	80174ac <pbuf_alloc+0x1d0>
      break;
 80174a8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80174aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80174ac:	4618      	mov	r0, r3
 80174ae:	3728      	adds	r7, #40	; 0x28
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}
 80174b4:	08022298 	.word	0x08022298
 80174b8:	0802230c 	.word	0x0802230c
 80174bc:	0802233c 	.word	0x0802233c
 80174c0:	08022364 	.word	0x08022364
 80174c4:	08022398 	.word	0x08022398
 80174c8:	080223c4 	.word	0x080223c4

080174cc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b086      	sub	sp, #24
 80174d0:	af02      	add	r7, sp, #8
 80174d2:	6078      	str	r0, [r7, #4]
 80174d4:	460b      	mov	r3, r1
 80174d6:	807b      	strh	r3, [r7, #2]
 80174d8:	4613      	mov	r3, r2
 80174da:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80174dc:	883b      	ldrh	r3, [r7, #0]
 80174de:	2b41      	cmp	r3, #65	; 0x41
 80174e0:	d009      	beq.n	80174f6 <pbuf_alloc_reference+0x2a>
 80174e2:	883b      	ldrh	r3, [r7, #0]
 80174e4:	2b01      	cmp	r3, #1
 80174e6:	d006      	beq.n	80174f6 <pbuf_alloc_reference+0x2a>
 80174e8:	4b0f      	ldr	r3, [pc, #60]	; (8017528 <pbuf_alloc_reference+0x5c>)
 80174ea:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80174ee:	490f      	ldr	r1, [pc, #60]	; (801752c <pbuf_alloc_reference+0x60>)
 80174f0:	480f      	ldr	r0, [pc, #60]	; (8017530 <pbuf_alloc_reference+0x64>)
 80174f2:	f008 fa83 	bl	801f9fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80174f6:	200b      	movs	r0, #11
 80174f8:	f7ff fa6a 	bl	80169d0 <memp_malloc>
 80174fc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d101      	bne.n	8017508 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8017504:	2300      	movs	r3, #0
 8017506:	e00b      	b.n	8017520 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8017508:	8879      	ldrh	r1, [r7, #2]
 801750a:	887a      	ldrh	r2, [r7, #2]
 801750c:	2300      	movs	r3, #0
 801750e:	9301      	str	r3, [sp, #4]
 8017510:	883b      	ldrh	r3, [r7, #0]
 8017512:	9300      	str	r3, [sp, #0]
 8017514:	460b      	mov	r3, r1
 8017516:	6879      	ldr	r1, [r7, #4]
 8017518:	68f8      	ldr	r0, [r7, #12]
 801751a:	f7ff feb5 	bl	8017288 <pbuf_init_alloced_pbuf>
  return p;
 801751e:	68fb      	ldr	r3, [r7, #12]
}
 8017520:	4618      	mov	r0, r3
 8017522:	3710      	adds	r7, #16
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}
 8017528:	08022298 	.word	0x08022298
 801752c:	080223e0 	.word	0x080223e0
 8017530:	0802233c 	.word	0x0802233c

08017534 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b088      	sub	sp, #32
 8017538:	af02      	add	r7, sp, #8
 801753a:	607b      	str	r3, [r7, #4]
 801753c:	4603      	mov	r3, r0
 801753e:	73fb      	strb	r3, [r7, #15]
 8017540:	460b      	mov	r3, r1
 8017542:	81bb      	strh	r3, [r7, #12]
 8017544:	4613      	mov	r3, r2
 8017546:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8017548:	7bfb      	ldrb	r3, [r7, #15]
 801754a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801754c:	8a7b      	ldrh	r3, [r7, #18]
 801754e:	3303      	adds	r3, #3
 8017550:	f023 0203 	bic.w	r2, r3, #3
 8017554:	89bb      	ldrh	r3, [r7, #12]
 8017556:	441a      	add	r2, r3
 8017558:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801755a:	429a      	cmp	r2, r3
 801755c:	d901      	bls.n	8017562 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801755e:	2300      	movs	r3, #0
 8017560:	e018      	b.n	8017594 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8017562:	6a3b      	ldr	r3, [r7, #32]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d007      	beq.n	8017578 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8017568:	8a7b      	ldrh	r3, [r7, #18]
 801756a:	3303      	adds	r3, #3
 801756c:	f023 0303 	bic.w	r3, r3, #3
 8017570:	6a3a      	ldr	r2, [r7, #32]
 8017572:	4413      	add	r3, r2
 8017574:	617b      	str	r3, [r7, #20]
 8017576:	e001      	b.n	801757c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8017578:	2300      	movs	r3, #0
 801757a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801757c:	6878      	ldr	r0, [r7, #4]
 801757e:	89b9      	ldrh	r1, [r7, #12]
 8017580:	89ba      	ldrh	r2, [r7, #12]
 8017582:	2302      	movs	r3, #2
 8017584:	9301      	str	r3, [sp, #4]
 8017586:	897b      	ldrh	r3, [r7, #10]
 8017588:	9300      	str	r3, [sp, #0]
 801758a:	460b      	mov	r3, r1
 801758c:	6979      	ldr	r1, [r7, #20]
 801758e:	f7ff fe7b 	bl	8017288 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8017592:	687b      	ldr	r3, [r7, #4]
}
 8017594:	4618      	mov	r0, r3
 8017596:	3718      	adds	r7, #24
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}

0801759c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801759c:	b580      	push	{r7, lr}
 801759e:	b084      	sub	sp, #16
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
 80175a4:	460b      	mov	r3, r1
 80175a6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d106      	bne.n	80175bc <pbuf_realloc+0x20>
 80175ae:	4b39      	ldr	r3, [pc, #228]	; (8017694 <pbuf_realloc+0xf8>)
 80175b0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80175b4:	4938      	ldr	r1, [pc, #224]	; (8017698 <pbuf_realloc+0xfc>)
 80175b6:	4839      	ldr	r0, [pc, #228]	; (801769c <pbuf_realloc+0x100>)
 80175b8:	f008 fa20 	bl	801f9fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	891b      	ldrh	r3, [r3, #8]
 80175c0:	887a      	ldrh	r2, [r7, #2]
 80175c2:	429a      	cmp	r2, r3
 80175c4:	d261      	bcs.n	801768a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	891a      	ldrh	r2, [r3, #8]
 80175ca:	887b      	ldrh	r3, [r7, #2]
 80175cc:	1ad3      	subs	r3, r2, r3
 80175ce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80175d0:	887b      	ldrh	r3, [r7, #2]
 80175d2:	817b      	strh	r3, [r7, #10]
  q = p;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80175d8:	e018      	b.n	801760c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	895b      	ldrh	r3, [r3, #10]
 80175de:	897a      	ldrh	r2, [r7, #10]
 80175e0:	1ad3      	subs	r3, r2, r3
 80175e2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	891a      	ldrh	r2, [r3, #8]
 80175e8:	893b      	ldrh	r3, [r7, #8]
 80175ea:	1ad3      	subs	r3, r2, r3
 80175ec:	b29a      	uxth	r2, r3
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d106      	bne.n	801760c <pbuf_realloc+0x70>
 80175fe:	4b25      	ldr	r3, [pc, #148]	; (8017694 <pbuf_realloc+0xf8>)
 8017600:	f240 12af 	movw	r2, #431	; 0x1af
 8017604:	4926      	ldr	r1, [pc, #152]	; (80176a0 <pbuf_realloc+0x104>)
 8017606:	4825      	ldr	r0, [pc, #148]	; (801769c <pbuf_realloc+0x100>)
 8017608:	f008 f9f8 	bl	801f9fc <iprintf>
  while (rem_len > q->len) {
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	895b      	ldrh	r3, [r3, #10]
 8017610:	897a      	ldrh	r2, [r7, #10]
 8017612:	429a      	cmp	r2, r3
 8017614:	d8e1      	bhi.n	80175da <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	7b1b      	ldrb	r3, [r3, #12]
 801761a:	f003 030f 	and.w	r3, r3, #15
 801761e:	2b00      	cmp	r3, #0
 8017620:	d11f      	bne.n	8017662 <pbuf_realloc+0xc6>
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	895b      	ldrh	r3, [r3, #10]
 8017626:	897a      	ldrh	r2, [r7, #10]
 8017628:	429a      	cmp	r2, r3
 801762a:	d01a      	beq.n	8017662 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	7b5b      	ldrb	r3, [r3, #13]
 8017630:	f003 0302 	and.w	r3, r3, #2
 8017634:	2b00      	cmp	r3, #0
 8017636:	d114      	bne.n	8017662 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	685a      	ldr	r2, [r3, #4]
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	1ad2      	subs	r2, r2, r3
 8017640:	897b      	ldrh	r3, [r7, #10]
 8017642:	4413      	add	r3, r2
 8017644:	4619      	mov	r1, r3
 8017646:	68f8      	ldr	r0, [r7, #12]
 8017648:	f7fe ff24 	bl	8016494 <mem_trim>
 801764c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d106      	bne.n	8017662 <pbuf_realloc+0xc6>
 8017654:	4b0f      	ldr	r3, [pc, #60]	; (8017694 <pbuf_realloc+0xf8>)
 8017656:	f240 12bd 	movw	r2, #445	; 0x1bd
 801765a:	4912      	ldr	r1, [pc, #72]	; (80176a4 <pbuf_realloc+0x108>)
 801765c:	480f      	ldr	r0, [pc, #60]	; (801769c <pbuf_realloc+0x100>)
 801765e:	f008 f9cd 	bl	801f9fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	897a      	ldrh	r2, [r7, #10]
 8017666:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	895a      	ldrh	r2, [r3, #10]
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d004      	beq.n	8017682 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	4618      	mov	r0, r3
 801767e:	f000 f911 	bl	80178a4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	2200      	movs	r2, #0
 8017686:	601a      	str	r2, [r3, #0]
 8017688:	e000      	b.n	801768c <pbuf_realloc+0xf0>
    return;
 801768a:	bf00      	nop

}
 801768c:	3710      	adds	r7, #16
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}
 8017692:	bf00      	nop
 8017694:	08022298 	.word	0x08022298
 8017698:	080223f4 	.word	0x080223f4
 801769c:	0802233c 	.word	0x0802233c
 80176a0:	0802240c 	.word	0x0802240c
 80176a4:	08022424 	.word	0x08022424

080176a8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b086      	sub	sp, #24
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	60f8      	str	r0, [r7, #12]
 80176b0:	60b9      	str	r1, [r7, #8]
 80176b2:	4613      	mov	r3, r2
 80176b4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d106      	bne.n	80176ca <pbuf_add_header_impl+0x22>
 80176bc:	4b2b      	ldr	r3, [pc, #172]	; (801776c <pbuf_add_header_impl+0xc4>)
 80176be:	f240 12df 	movw	r2, #479	; 0x1df
 80176c2:	492b      	ldr	r1, [pc, #172]	; (8017770 <pbuf_add_header_impl+0xc8>)
 80176c4:	482b      	ldr	r0, [pc, #172]	; (8017774 <pbuf_add_header_impl+0xcc>)
 80176c6:	f008 f999 	bl	801f9fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d003      	beq.n	80176d8 <pbuf_add_header_impl+0x30>
 80176d0:	68bb      	ldr	r3, [r7, #8]
 80176d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80176d6:	d301      	bcc.n	80176dc <pbuf_add_header_impl+0x34>
    return 1;
 80176d8:	2301      	movs	r3, #1
 80176da:	e043      	b.n	8017764 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80176dc:	68bb      	ldr	r3, [r7, #8]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d101      	bne.n	80176e6 <pbuf_add_header_impl+0x3e>
    return 0;
 80176e2:	2300      	movs	r3, #0
 80176e4:	e03e      	b.n	8017764 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80176e6:	68bb      	ldr	r3, [r7, #8]
 80176e8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	891a      	ldrh	r2, [r3, #8]
 80176ee:	8a7b      	ldrh	r3, [r7, #18]
 80176f0:	4413      	add	r3, r2
 80176f2:	b29b      	uxth	r3, r3
 80176f4:	8a7a      	ldrh	r2, [r7, #18]
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d901      	bls.n	80176fe <pbuf_add_header_impl+0x56>
    return 1;
 80176fa:	2301      	movs	r3, #1
 80176fc:	e032      	b.n	8017764 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	7b1b      	ldrb	r3, [r3, #12]
 8017702:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8017704:	8a3b      	ldrh	r3, [r7, #16]
 8017706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801770a:	2b00      	cmp	r3, #0
 801770c:	d00c      	beq.n	8017728 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	685a      	ldr	r2, [r3, #4]
 8017712:	68bb      	ldr	r3, [r7, #8]
 8017714:	425b      	negs	r3, r3
 8017716:	4413      	add	r3, r2
 8017718:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	3310      	adds	r3, #16
 801771e:	697a      	ldr	r2, [r7, #20]
 8017720:	429a      	cmp	r2, r3
 8017722:	d20d      	bcs.n	8017740 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8017724:	2301      	movs	r3, #1
 8017726:	e01d      	b.n	8017764 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8017728:	79fb      	ldrb	r3, [r7, #7]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d006      	beq.n	801773c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	685a      	ldr	r2, [r3, #4]
 8017732:	68bb      	ldr	r3, [r7, #8]
 8017734:	425b      	negs	r3, r3
 8017736:	4413      	add	r3, r2
 8017738:	617b      	str	r3, [r7, #20]
 801773a:	e001      	b.n	8017740 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801773c:	2301      	movs	r3, #1
 801773e:	e011      	b.n	8017764 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	697a      	ldr	r2, [r7, #20]
 8017744:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	895a      	ldrh	r2, [r3, #10]
 801774a:	8a7b      	ldrh	r3, [r7, #18]
 801774c:	4413      	add	r3, r2
 801774e:	b29a      	uxth	r2, r3
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	891a      	ldrh	r2, [r3, #8]
 8017758:	8a7b      	ldrh	r3, [r7, #18]
 801775a:	4413      	add	r3, r2
 801775c:	b29a      	uxth	r2, r3
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	811a      	strh	r2, [r3, #8]


  return 0;
 8017762:	2300      	movs	r3, #0
}
 8017764:	4618      	mov	r0, r3
 8017766:	3718      	adds	r7, #24
 8017768:	46bd      	mov	sp, r7
 801776a:	bd80      	pop	{r7, pc}
 801776c:	08022298 	.word	0x08022298
 8017770:	08022440 	.word	0x08022440
 8017774:	0802233c 	.word	0x0802233c

08017778 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b082      	sub	sp, #8
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
 8017780:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8017782:	2200      	movs	r2, #0
 8017784:	6839      	ldr	r1, [r7, #0]
 8017786:	6878      	ldr	r0, [r7, #4]
 8017788:	f7ff ff8e 	bl	80176a8 <pbuf_add_header_impl>
 801778c:	4603      	mov	r3, r0
}
 801778e:	4618      	mov	r0, r3
 8017790:	3708      	adds	r7, #8
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}
	...

08017798 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b084      	sub	sp, #16
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d106      	bne.n	80177b6 <pbuf_remove_header+0x1e>
 80177a8:	4b20      	ldr	r3, [pc, #128]	; (801782c <pbuf_remove_header+0x94>)
 80177aa:	f240 224b 	movw	r2, #587	; 0x24b
 80177ae:	4920      	ldr	r1, [pc, #128]	; (8017830 <pbuf_remove_header+0x98>)
 80177b0:	4820      	ldr	r0, [pc, #128]	; (8017834 <pbuf_remove_header+0x9c>)
 80177b2:	f008 f923 	bl	801f9fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d003      	beq.n	80177c4 <pbuf_remove_header+0x2c>
 80177bc:	683b      	ldr	r3, [r7, #0]
 80177be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80177c2:	d301      	bcc.n	80177c8 <pbuf_remove_header+0x30>
    return 1;
 80177c4:	2301      	movs	r3, #1
 80177c6:	e02c      	b.n	8017822 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80177c8:	683b      	ldr	r3, [r7, #0]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d101      	bne.n	80177d2 <pbuf_remove_header+0x3a>
    return 0;
 80177ce:	2300      	movs	r3, #0
 80177d0:	e027      	b.n	8017822 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80177d2:	683b      	ldr	r3, [r7, #0]
 80177d4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	895b      	ldrh	r3, [r3, #10]
 80177da:	89fa      	ldrh	r2, [r7, #14]
 80177dc:	429a      	cmp	r2, r3
 80177de:	d908      	bls.n	80177f2 <pbuf_remove_header+0x5a>
 80177e0:	4b12      	ldr	r3, [pc, #72]	; (801782c <pbuf_remove_header+0x94>)
 80177e2:	f240 2255 	movw	r2, #597	; 0x255
 80177e6:	4914      	ldr	r1, [pc, #80]	; (8017838 <pbuf_remove_header+0xa0>)
 80177e8:	4812      	ldr	r0, [pc, #72]	; (8017834 <pbuf_remove_header+0x9c>)
 80177ea:	f008 f907 	bl	801f9fc <iprintf>
 80177ee:	2301      	movs	r3, #1
 80177f0:	e017      	b.n	8017822 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	685b      	ldr	r3, [r3, #4]
 80177f6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	685a      	ldr	r2, [r3, #4]
 80177fc:	683b      	ldr	r3, [r7, #0]
 80177fe:	441a      	add	r2, r3
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	895a      	ldrh	r2, [r3, #10]
 8017808:	89fb      	ldrh	r3, [r7, #14]
 801780a:	1ad3      	subs	r3, r2, r3
 801780c:	b29a      	uxth	r2, r3
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	891a      	ldrh	r2, [r3, #8]
 8017816:	89fb      	ldrh	r3, [r7, #14]
 8017818:	1ad3      	subs	r3, r2, r3
 801781a:	b29a      	uxth	r2, r3
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8017820:	2300      	movs	r3, #0
}
 8017822:	4618      	mov	r0, r3
 8017824:	3710      	adds	r7, #16
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}
 801782a:	bf00      	nop
 801782c:	08022298 	.word	0x08022298
 8017830:	08022440 	.word	0x08022440
 8017834:	0802233c 	.word	0x0802233c
 8017838:	0802244c 	.word	0x0802244c

0801783c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b082      	sub	sp, #8
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	460b      	mov	r3, r1
 8017846:	807b      	strh	r3, [r7, #2]
 8017848:	4613      	mov	r3, r2
 801784a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801784c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017850:	2b00      	cmp	r3, #0
 8017852:	da08      	bge.n	8017866 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8017854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017858:	425b      	negs	r3, r3
 801785a:	4619      	mov	r1, r3
 801785c:	6878      	ldr	r0, [r7, #4]
 801785e:	f7ff ff9b 	bl	8017798 <pbuf_remove_header>
 8017862:	4603      	mov	r3, r0
 8017864:	e007      	b.n	8017876 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8017866:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801786a:	787a      	ldrb	r2, [r7, #1]
 801786c:	4619      	mov	r1, r3
 801786e:	6878      	ldr	r0, [r7, #4]
 8017870:	f7ff ff1a 	bl	80176a8 <pbuf_add_header_impl>
 8017874:	4603      	mov	r3, r0
  }
}
 8017876:	4618      	mov	r0, r3
 8017878:	3708      	adds	r7, #8
 801787a:	46bd      	mov	sp, r7
 801787c:	bd80      	pop	{r7, pc}

0801787e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801787e:	b580      	push	{r7, lr}
 8017880:	b082      	sub	sp, #8
 8017882:	af00      	add	r7, sp, #0
 8017884:	6078      	str	r0, [r7, #4]
 8017886:	460b      	mov	r3, r1
 8017888:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801788a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801788e:	2201      	movs	r2, #1
 8017890:	4619      	mov	r1, r3
 8017892:	6878      	ldr	r0, [r7, #4]
 8017894:	f7ff ffd2 	bl	801783c <pbuf_header_impl>
 8017898:	4603      	mov	r3, r0
}
 801789a:	4618      	mov	r0, r3
 801789c:	3708      	adds	r7, #8
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}
	...

080178a4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80178a4:	b580      	push	{r7, lr}
 80178a6:	b088      	sub	sp, #32
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d10b      	bne.n	80178ca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d106      	bne.n	80178c6 <pbuf_free+0x22>
 80178b8:	4b3b      	ldr	r3, [pc, #236]	; (80179a8 <pbuf_free+0x104>)
 80178ba:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80178be:	493b      	ldr	r1, [pc, #236]	; (80179ac <pbuf_free+0x108>)
 80178c0:	483b      	ldr	r0, [pc, #236]	; (80179b0 <pbuf_free+0x10c>)
 80178c2:	f008 f89b 	bl	801f9fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80178c6:	2300      	movs	r3, #0
 80178c8:	e069      	b.n	801799e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80178ca:	2300      	movs	r3, #0
 80178cc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80178ce:	e062      	b.n	8017996 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80178d0:	f000 fc46 	bl	8018160 <sys_arch_protect>
 80178d4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	7b9b      	ldrb	r3, [r3, #14]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d106      	bne.n	80178ec <pbuf_free+0x48>
 80178de:	4b32      	ldr	r3, [pc, #200]	; (80179a8 <pbuf_free+0x104>)
 80178e0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80178e4:	4933      	ldr	r1, [pc, #204]	; (80179b4 <pbuf_free+0x110>)
 80178e6:	4832      	ldr	r0, [pc, #200]	; (80179b0 <pbuf_free+0x10c>)
 80178e8:	f008 f888 	bl	801f9fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	7b9b      	ldrb	r3, [r3, #14]
 80178f0:	3b01      	subs	r3, #1
 80178f2:	b2da      	uxtb	r2, r3
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	739a      	strb	r2, [r3, #14]
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	7b9b      	ldrb	r3, [r3, #14]
 80178fc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80178fe:	69b8      	ldr	r0, [r7, #24]
 8017900:	f000 fc3c 	bl	801817c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8017904:	7dfb      	ldrb	r3, [r7, #23]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d143      	bne.n	8017992 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	7b1b      	ldrb	r3, [r3, #12]
 8017914:	f003 030f 	and.w	r3, r3, #15
 8017918:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	7b5b      	ldrb	r3, [r3, #13]
 801791e:	f003 0302 	and.w	r3, r3, #2
 8017922:	2b00      	cmp	r3, #0
 8017924:	d011      	beq.n	801794a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801792a:	68bb      	ldr	r3, [r7, #8]
 801792c:	691b      	ldr	r3, [r3, #16]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d106      	bne.n	8017940 <pbuf_free+0x9c>
 8017932:	4b1d      	ldr	r3, [pc, #116]	; (80179a8 <pbuf_free+0x104>)
 8017934:	f240 22ff 	movw	r2, #767	; 0x2ff
 8017938:	491f      	ldr	r1, [pc, #124]	; (80179b8 <pbuf_free+0x114>)
 801793a:	481d      	ldr	r0, [pc, #116]	; (80179b0 <pbuf_free+0x10c>)
 801793c:	f008 f85e 	bl	801f9fc <iprintf>
        pc->custom_free_function(p);
 8017940:	68bb      	ldr	r3, [r7, #8]
 8017942:	691b      	ldr	r3, [r3, #16]
 8017944:	6878      	ldr	r0, [r7, #4]
 8017946:	4798      	blx	r3
 8017948:	e01d      	b.n	8017986 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801794a:	7bfb      	ldrb	r3, [r7, #15]
 801794c:	2b02      	cmp	r3, #2
 801794e:	d104      	bne.n	801795a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8017950:	6879      	ldr	r1, [r7, #4]
 8017952:	200c      	movs	r0, #12
 8017954:	f7ff f8b2 	bl	8016abc <memp_free>
 8017958:	e015      	b.n	8017986 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801795a:	7bfb      	ldrb	r3, [r7, #15]
 801795c:	2b01      	cmp	r3, #1
 801795e:	d104      	bne.n	801796a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8017960:	6879      	ldr	r1, [r7, #4]
 8017962:	200b      	movs	r0, #11
 8017964:	f7ff f8aa 	bl	8016abc <memp_free>
 8017968:	e00d      	b.n	8017986 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801796a:	7bfb      	ldrb	r3, [r7, #15]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d103      	bne.n	8017978 <pbuf_free+0xd4>
          mem_free(p);
 8017970:	6878      	ldr	r0, [r7, #4]
 8017972:	f7fe fcff 	bl	8016374 <mem_free>
 8017976:	e006      	b.n	8017986 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8017978:	4b0b      	ldr	r3, [pc, #44]	; (80179a8 <pbuf_free+0x104>)
 801797a:	f240 320f 	movw	r2, #783	; 0x30f
 801797e:	490f      	ldr	r1, [pc, #60]	; (80179bc <pbuf_free+0x118>)
 8017980:	480b      	ldr	r0, [pc, #44]	; (80179b0 <pbuf_free+0x10c>)
 8017982:	f008 f83b 	bl	801f9fc <iprintf>
        }
      }
      count++;
 8017986:	7ffb      	ldrb	r3, [r7, #31]
 8017988:	3301      	adds	r3, #1
 801798a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801798c:	693b      	ldr	r3, [r7, #16]
 801798e:	607b      	str	r3, [r7, #4]
 8017990:	e001      	b.n	8017996 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8017992:	2300      	movs	r3, #0
 8017994:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d199      	bne.n	80178d0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801799c:	7ffb      	ldrb	r3, [r7, #31]
}
 801799e:	4618      	mov	r0, r3
 80179a0:	3720      	adds	r7, #32
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}
 80179a6:	bf00      	nop
 80179a8:	08022298 	.word	0x08022298
 80179ac:	08022440 	.word	0x08022440
 80179b0:	0802233c 	.word	0x0802233c
 80179b4:	0802246c 	.word	0x0802246c
 80179b8:	08022484 	.word	0x08022484
 80179bc:	080224a8 	.word	0x080224a8

080179c0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80179c0:	b480      	push	{r7}
 80179c2:	b085      	sub	sp, #20
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80179c8:	2300      	movs	r3, #0
 80179ca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80179cc:	e005      	b.n	80179da <pbuf_clen+0x1a>
    ++len;
 80179ce:	89fb      	ldrh	r3, [r7, #14]
 80179d0:	3301      	adds	r3, #1
 80179d2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d1f6      	bne.n	80179ce <pbuf_clen+0xe>
  }
  return len;
 80179e0:	89fb      	ldrh	r3, [r7, #14]
}
 80179e2:	4618      	mov	r0, r3
 80179e4:	3714      	adds	r7, #20
 80179e6:	46bd      	mov	sp, r7
 80179e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ec:	4770      	bx	lr
	...

080179f0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b084      	sub	sp, #16
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d016      	beq.n	8017a2c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80179fe:	f000 fbaf 	bl	8018160 <sys_arch_protect>
 8017a02:	60f8      	str	r0, [r7, #12]
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	7b9b      	ldrb	r3, [r3, #14]
 8017a08:	3301      	adds	r3, #1
 8017a0a:	b2da      	uxtb	r2, r3
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	739a      	strb	r2, [r3, #14]
 8017a10:	68f8      	ldr	r0, [r7, #12]
 8017a12:	f000 fbb3 	bl	801817c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	7b9b      	ldrb	r3, [r3, #14]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d106      	bne.n	8017a2c <pbuf_ref+0x3c>
 8017a1e:	4b05      	ldr	r3, [pc, #20]	; (8017a34 <pbuf_ref+0x44>)
 8017a20:	f240 3242 	movw	r2, #834	; 0x342
 8017a24:	4904      	ldr	r1, [pc, #16]	; (8017a38 <pbuf_ref+0x48>)
 8017a26:	4805      	ldr	r0, [pc, #20]	; (8017a3c <pbuf_ref+0x4c>)
 8017a28:	f007 ffe8 	bl	801f9fc <iprintf>
  }
}
 8017a2c:	bf00      	nop
 8017a2e:	3710      	adds	r7, #16
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}
 8017a34:	08022298 	.word	0x08022298
 8017a38:	080224bc 	.word	0x080224bc
 8017a3c:	0802233c 	.word	0x0802233c

08017a40 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b084      	sub	sp, #16
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
 8017a48:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d002      	beq.n	8017a56 <pbuf_cat+0x16>
 8017a50:	683b      	ldr	r3, [r7, #0]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d107      	bne.n	8017a66 <pbuf_cat+0x26>
 8017a56:	4b20      	ldr	r3, [pc, #128]	; (8017ad8 <pbuf_cat+0x98>)
 8017a58:	f240 3259 	movw	r2, #857	; 0x359
 8017a5c:	491f      	ldr	r1, [pc, #124]	; (8017adc <pbuf_cat+0x9c>)
 8017a5e:	4820      	ldr	r0, [pc, #128]	; (8017ae0 <pbuf_cat+0xa0>)
 8017a60:	f007 ffcc 	bl	801f9fc <iprintf>
 8017a64:	e034      	b.n	8017ad0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	60fb      	str	r3, [r7, #12]
 8017a6a:	e00a      	b.n	8017a82 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	891a      	ldrh	r2, [r3, #8]
 8017a70:	683b      	ldr	r3, [r7, #0]
 8017a72:	891b      	ldrh	r3, [r3, #8]
 8017a74:	4413      	add	r3, r2
 8017a76:	b29a      	uxth	r2, r3
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	60fb      	str	r3, [r7, #12]
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d1f0      	bne.n	8017a6c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	891a      	ldrh	r2, [r3, #8]
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	895b      	ldrh	r3, [r3, #10]
 8017a92:	429a      	cmp	r2, r3
 8017a94:	d006      	beq.n	8017aa4 <pbuf_cat+0x64>
 8017a96:	4b10      	ldr	r3, [pc, #64]	; (8017ad8 <pbuf_cat+0x98>)
 8017a98:	f240 3262 	movw	r2, #866	; 0x362
 8017a9c:	4911      	ldr	r1, [pc, #68]	; (8017ae4 <pbuf_cat+0xa4>)
 8017a9e:	4810      	ldr	r0, [pc, #64]	; (8017ae0 <pbuf_cat+0xa0>)
 8017aa0:	f007 ffac 	bl	801f9fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d006      	beq.n	8017aba <pbuf_cat+0x7a>
 8017aac:	4b0a      	ldr	r3, [pc, #40]	; (8017ad8 <pbuf_cat+0x98>)
 8017aae:	f240 3263 	movw	r2, #867	; 0x363
 8017ab2:	490d      	ldr	r1, [pc, #52]	; (8017ae8 <pbuf_cat+0xa8>)
 8017ab4:	480a      	ldr	r0, [pc, #40]	; (8017ae0 <pbuf_cat+0xa0>)
 8017ab6:	f007 ffa1 	bl	801f9fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	891a      	ldrh	r2, [r3, #8]
 8017abe:	683b      	ldr	r3, [r7, #0]
 8017ac0:	891b      	ldrh	r3, [r3, #8]
 8017ac2:	4413      	add	r3, r2
 8017ac4:	b29a      	uxth	r2, r3
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	683a      	ldr	r2, [r7, #0]
 8017ace:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8017ad0:	3710      	adds	r7, #16
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd80      	pop	{r7, pc}
 8017ad6:	bf00      	nop
 8017ad8:	08022298 	.word	0x08022298
 8017adc:	080224d0 	.word	0x080224d0
 8017ae0:	0802233c 	.word	0x0802233c
 8017ae4:	08022508 	.word	0x08022508
 8017ae8:	08022538 	.word	0x08022538

08017aec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b086      	sub	sp, #24
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
 8017af4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8017af6:	2300      	movs	r3, #0
 8017af8:	617b      	str	r3, [r7, #20]
 8017afa:	2300      	movs	r3, #0
 8017afc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d008      	beq.n	8017b16 <pbuf_copy+0x2a>
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d005      	beq.n	8017b16 <pbuf_copy+0x2a>
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	891a      	ldrh	r2, [r3, #8]
 8017b0e:	683b      	ldr	r3, [r7, #0]
 8017b10:	891b      	ldrh	r3, [r3, #8]
 8017b12:	429a      	cmp	r2, r3
 8017b14:	d209      	bcs.n	8017b2a <pbuf_copy+0x3e>
 8017b16:	4b57      	ldr	r3, [pc, #348]	; (8017c74 <pbuf_copy+0x188>)
 8017b18:	f240 32c9 	movw	r2, #969	; 0x3c9
 8017b1c:	4956      	ldr	r1, [pc, #344]	; (8017c78 <pbuf_copy+0x18c>)
 8017b1e:	4857      	ldr	r0, [pc, #348]	; (8017c7c <pbuf_copy+0x190>)
 8017b20:	f007 ff6c 	bl	801f9fc <iprintf>
 8017b24:	f06f 030f 	mvn.w	r3, #15
 8017b28:	e09f      	b.n	8017c6a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	895b      	ldrh	r3, [r3, #10]
 8017b2e:	461a      	mov	r2, r3
 8017b30:	697b      	ldr	r3, [r7, #20]
 8017b32:	1ad2      	subs	r2, r2, r3
 8017b34:	683b      	ldr	r3, [r7, #0]
 8017b36:	895b      	ldrh	r3, [r3, #10]
 8017b38:	4619      	mov	r1, r3
 8017b3a:	693b      	ldr	r3, [r7, #16]
 8017b3c:	1acb      	subs	r3, r1, r3
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	d306      	bcc.n	8017b50 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8017b42:	683b      	ldr	r3, [r7, #0]
 8017b44:	895b      	ldrh	r3, [r3, #10]
 8017b46:	461a      	mov	r2, r3
 8017b48:	693b      	ldr	r3, [r7, #16]
 8017b4a:	1ad3      	subs	r3, r2, r3
 8017b4c:	60fb      	str	r3, [r7, #12]
 8017b4e:	e005      	b.n	8017b5c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	895b      	ldrh	r3, [r3, #10]
 8017b54:	461a      	mov	r2, r3
 8017b56:	697b      	ldr	r3, [r7, #20]
 8017b58:	1ad3      	subs	r3, r2, r3
 8017b5a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	685a      	ldr	r2, [r3, #4]
 8017b60:	697b      	ldr	r3, [r7, #20]
 8017b62:	18d0      	adds	r0, r2, r3
 8017b64:	683b      	ldr	r3, [r7, #0]
 8017b66:	685a      	ldr	r2, [r3, #4]
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	4413      	add	r3, r2
 8017b6c:	68fa      	ldr	r2, [r7, #12]
 8017b6e:	4619      	mov	r1, r3
 8017b70:	f007 fb46 	bl	801f200 <memcpy>
    offset_to += len;
 8017b74:	697a      	ldr	r2, [r7, #20]
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	4413      	add	r3, r2
 8017b7a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8017b7c:	693a      	ldr	r2, [r7, #16]
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	4413      	add	r3, r2
 8017b82:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	895b      	ldrh	r3, [r3, #10]
 8017b88:	461a      	mov	r2, r3
 8017b8a:	697b      	ldr	r3, [r7, #20]
 8017b8c:	4293      	cmp	r3, r2
 8017b8e:	d906      	bls.n	8017b9e <pbuf_copy+0xb2>
 8017b90:	4b38      	ldr	r3, [pc, #224]	; (8017c74 <pbuf_copy+0x188>)
 8017b92:	f240 32d9 	movw	r2, #985	; 0x3d9
 8017b96:	493a      	ldr	r1, [pc, #232]	; (8017c80 <pbuf_copy+0x194>)
 8017b98:	4838      	ldr	r0, [pc, #224]	; (8017c7c <pbuf_copy+0x190>)
 8017b9a:	f007 ff2f 	bl	801f9fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8017b9e:	683b      	ldr	r3, [r7, #0]
 8017ba0:	895b      	ldrh	r3, [r3, #10]
 8017ba2:	461a      	mov	r2, r3
 8017ba4:	693b      	ldr	r3, [r7, #16]
 8017ba6:	4293      	cmp	r3, r2
 8017ba8:	d906      	bls.n	8017bb8 <pbuf_copy+0xcc>
 8017baa:	4b32      	ldr	r3, [pc, #200]	; (8017c74 <pbuf_copy+0x188>)
 8017bac:	f240 32da 	movw	r2, #986	; 0x3da
 8017bb0:	4934      	ldr	r1, [pc, #208]	; (8017c84 <pbuf_copy+0x198>)
 8017bb2:	4832      	ldr	r0, [pc, #200]	; (8017c7c <pbuf_copy+0x190>)
 8017bb4:	f007 ff22 	bl	801f9fc <iprintf>
    if (offset_from >= p_from->len) {
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	895b      	ldrh	r3, [r3, #10]
 8017bbc:	461a      	mov	r2, r3
 8017bbe:	693b      	ldr	r3, [r7, #16]
 8017bc0:	4293      	cmp	r3, r2
 8017bc2:	d304      	bcc.n	8017bce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8017bc8:	683b      	ldr	r3, [r7, #0]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	895b      	ldrh	r3, [r3, #10]
 8017bd2:	461a      	mov	r2, r3
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	4293      	cmp	r3, r2
 8017bd8:	d114      	bne.n	8017c04 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8017bda:	2300      	movs	r3, #0
 8017bdc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d10c      	bne.n	8017c04 <pbuf_copy+0x118>
 8017bea:	683b      	ldr	r3, [r7, #0]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d009      	beq.n	8017c04 <pbuf_copy+0x118>
 8017bf0:	4b20      	ldr	r3, [pc, #128]	; (8017c74 <pbuf_copy+0x188>)
 8017bf2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8017bf6:	4924      	ldr	r1, [pc, #144]	; (8017c88 <pbuf_copy+0x19c>)
 8017bf8:	4820      	ldr	r0, [pc, #128]	; (8017c7c <pbuf_copy+0x190>)
 8017bfa:	f007 feff 	bl	801f9fc <iprintf>
 8017bfe:	f06f 030f 	mvn.w	r3, #15
 8017c02:	e032      	b.n	8017c6a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8017c04:	683b      	ldr	r3, [r7, #0]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d013      	beq.n	8017c32 <pbuf_copy+0x146>
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	895a      	ldrh	r2, [r3, #10]
 8017c0e:	683b      	ldr	r3, [r7, #0]
 8017c10:	891b      	ldrh	r3, [r3, #8]
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d10d      	bne.n	8017c32 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d009      	beq.n	8017c32 <pbuf_copy+0x146>
 8017c1e:	4b15      	ldr	r3, [pc, #84]	; (8017c74 <pbuf_copy+0x188>)
 8017c20:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8017c24:	4919      	ldr	r1, [pc, #100]	; (8017c8c <pbuf_copy+0x1a0>)
 8017c26:	4815      	ldr	r0, [pc, #84]	; (8017c7c <pbuf_copy+0x190>)
 8017c28:	f007 fee8 	bl	801f9fc <iprintf>
 8017c2c:	f06f 0305 	mvn.w	r3, #5
 8017c30:	e01b      	b.n	8017c6a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d013      	beq.n	8017c60 <pbuf_copy+0x174>
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	895a      	ldrh	r2, [r3, #10]
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	891b      	ldrh	r3, [r3, #8]
 8017c40:	429a      	cmp	r2, r3
 8017c42:	d10d      	bne.n	8017c60 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d009      	beq.n	8017c60 <pbuf_copy+0x174>
 8017c4c:	4b09      	ldr	r3, [pc, #36]	; (8017c74 <pbuf_copy+0x188>)
 8017c4e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8017c52:	490e      	ldr	r1, [pc, #56]	; (8017c8c <pbuf_copy+0x1a0>)
 8017c54:	4809      	ldr	r0, [pc, #36]	; (8017c7c <pbuf_copy+0x190>)
 8017c56:	f007 fed1 	bl	801f9fc <iprintf>
 8017c5a:	f06f 0305 	mvn.w	r3, #5
 8017c5e:	e004      	b.n	8017c6a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8017c60:	683b      	ldr	r3, [r7, #0]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	f47f af61 	bne.w	8017b2a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8017c68:	2300      	movs	r3, #0
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3718      	adds	r7, #24
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
 8017c72:	bf00      	nop
 8017c74:	08022298 	.word	0x08022298
 8017c78:	08022584 	.word	0x08022584
 8017c7c:	0802233c 	.word	0x0802233c
 8017c80:	080225b4 	.word	0x080225b4
 8017c84:	080225cc 	.word	0x080225cc
 8017c88:	080225e8 	.word	0x080225e8
 8017c8c:	080225f8 	.word	0x080225f8

08017c90 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b088      	sub	sp, #32
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	60f8      	str	r0, [r7, #12]
 8017c98:	60b9      	str	r1, [r7, #8]
 8017c9a:	4611      	mov	r1, r2
 8017c9c:	461a      	mov	r2, r3
 8017c9e:	460b      	mov	r3, r1
 8017ca0:	80fb      	strh	r3, [r7, #6]
 8017ca2:	4613      	mov	r3, r2
 8017ca4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8017caa:	2300      	movs	r3, #0
 8017cac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d108      	bne.n	8017cc6 <pbuf_copy_partial+0x36>
 8017cb4:	4b2b      	ldr	r3, [pc, #172]	; (8017d64 <pbuf_copy_partial+0xd4>)
 8017cb6:	f240 420a 	movw	r2, #1034	; 0x40a
 8017cba:	492b      	ldr	r1, [pc, #172]	; (8017d68 <pbuf_copy_partial+0xd8>)
 8017cbc:	482b      	ldr	r0, [pc, #172]	; (8017d6c <pbuf_copy_partial+0xdc>)
 8017cbe:	f007 fe9d 	bl	801f9fc <iprintf>
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	e04a      	b.n	8017d5c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8017cc6:	68bb      	ldr	r3, [r7, #8]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d108      	bne.n	8017cde <pbuf_copy_partial+0x4e>
 8017ccc:	4b25      	ldr	r3, [pc, #148]	; (8017d64 <pbuf_copy_partial+0xd4>)
 8017cce:	f240 420b 	movw	r2, #1035	; 0x40b
 8017cd2:	4927      	ldr	r1, [pc, #156]	; (8017d70 <pbuf_copy_partial+0xe0>)
 8017cd4:	4825      	ldr	r0, [pc, #148]	; (8017d6c <pbuf_copy_partial+0xdc>)
 8017cd6:	f007 fe91 	bl	801f9fc <iprintf>
 8017cda:	2300      	movs	r3, #0
 8017cdc:	e03e      	b.n	8017d5c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	61fb      	str	r3, [r7, #28]
 8017ce2:	e034      	b.n	8017d4e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8017ce4:	88bb      	ldrh	r3, [r7, #4]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d00a      	beq.n	8017d00 <pbuf_copy_partial+0x70>
 8017cea:	69fb      	ldr	r3, [r7, #28]
 8017cec:	895b      	ldrh	r3, [r3, #10]
 8017cee:	88ba      	ldrh	r2, [r7, #4]
 8017cf0:	429a      	cmp	r2, r3
 8017cf2:	d305      	bcc.n	8017d00 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8017cf4:	69fb      	ldr	r3, [r7, #28]
 8017cf6:	895b      	ldrh	r3, [r3, #10]
 8017cf8:	88ba      	ldrh	r2, [r7, #4]
 8017cfa:	1ad3      	subs	r3, r2, r3
 8017cfc:	80bb      	strh	r3, [r7, #4]
 8017cfe:	e023      	b.n	8017d48 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8017d00:	69fb      	ldr	r3, [r7, #28]
 8017d02:	895a      	ldrh	r2, [r3, #10]
 8017d04:	88bb      	ldrh	r3, [r7, #4]
 8017d06:	1ad3      	subs	r3, r2, r3
 8017d08:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8017d0a:	8b3a      	ldrh	r2, [r7, #24]
 8017d0c:	88fb      	ldrh	r3, [r7, #6]
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	d901      	bls.n	8017d16 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8017d12:	88fb      	ldrh	r3, [r7, #6]
 8017d14:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8017d16:	8b7b      	ldrh	r3, [r7, #26]
 8017d18:	68ba      	ldr	r2, [r7, #8]
 8017d1a:	18d0      	adds	r0, r2, r3
 8017d1c:	69fb      	ldr	r3, [r7, #28]
 8017d1e:	685a      	ldr	r2, [r3, #4]
 8017d20:	88bb      	ldrh	r3, [r7, #4]
 8017d22:	4413      	add	r3, r2
 8017d24:	8b3a      	ldrh	r2, [r7, #24]
 8017d26:	4619      	mov	r1, r3
 8017d28:	f007 fa6a 	bl	801f200 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8017d2c:	8afa      	ldrh	r2, [r7, #22]
 8017d2e:	8b3b      	ldrh	r3, [r7, #24]
 8017d30:	4413      	add	r3, r2
 8017d32:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8017d34:	8b7a      	ldrh	r2, [r7, #26]
 8017d36:	8b3b      	ldrh	r3, [r7, #24]
 8017d38:	4413      	add	r3, r2
 8017d3a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8017d3c:	88fa      	ldrh	r2, [r7, #6]
 8017d3e:	8b3b      	ldrh	r3, [r7, #24]
 8017d40:	1ad3      	subs	r3, r2, r3
 8017d42:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8017d44:	2300      	movs	r3, #0
 8017d46:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017d48:	69fb      	ldr	r3, [r7, #28]
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	61fb      	str	r3, [r7, #28]
 8017d4e:	88fb      	ldrh	r3, [r7, #6]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d002      	beq.n	8017d5a <pbuf_copy_partial+0xca>
 8017d54:	69fb      	ldr	r3, [r7, #28]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d1c4      	bne.n	8017ce4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8017d5a:	8afb      	ldrh	r3, [r7, #22]
}
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	3720      	adds	r7, #32
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}
 8017d64:	08022298 	.word	0x08022298
 8017d68:	08022624 	.word	0x08022624
 8017d6c:	0802233c 	.word	0x0802233c
 8017d70:	08022644 	.word	0x08022644

08017d74 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b084      	sub	sp, #16
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	603a      	str	r2, [r7, #0]
 8017d7e:	71fb      	strb	r3, [r7, #7]
 8017d80:	460b      	mov	r3, r1
 8017d82:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8017d84:	683b      	ldr	r3, [r7, #0]
 8017d86:	8919      	ldrh	r1, [r3, #8]
 8017d88:	88ba      	ldrh	r2, [r7, #4]
 8017d8a:	79fb      	ldrb	r3, [r7, #7]
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f7ff faa5 	bl	80172dc <pbuf_alloc>
 8017d92:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d101      	bne.n	8017d9e <pbuf_clone+0x2a>
    return NULL;
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	e011      	b.n	8017dc2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8017d9e:	6839      	ldr	r1, [r7, #0]
 8017da0:	68f8      	ldr	r0, [r7, #12]
 8017da2:	f7ff fea3 	bl	8017aec <pbuf_copy>
 8017da6:	4603      	mov	r3, r0
 8017da8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8017daa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d006      	beq.n	8017dc0 <pbuf_clone+0x4c>
 8017db2:	4b06      	ldr	r3, [pc, #24]	; (8017dcc <pbuf_clone+0x58>)
 8017db4:	f240 5224 	movw	r2, #1316	; 0x524
 8017db8:	4905      	ldr	r1, [pc, #20]	; (8017dd0 <pbuf_clone+0x5c>)
 8017dba:	4806      	ldr	r0, [pc, #24]	; (8017dd4 <pbuf_clone+0x60>)
 8017dbc:	f007 fe1e 	bl	801f9fc <iprintf>
  return q;
 8017dc0:	68fb      	ldr	r3, [r7, #12]
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	3710      	adds	r7, #16
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}
 8017dca:	bf00      	nop
 8017dcc:	08022298 	.word	0x08022298
 8017dd0:	08022750 	.word	0x08022750
 8017dd4:	0802233c 	.word	0x0802233c

08017dd8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b086      	sub	sp, #24
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
 8017de0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017de2:	683b      	ldr	r3, [r7, #0]
 8017de4:	60bb      	str	r3, [r7, #8]
 8017de6:	2304      	movs	r3, #4
 8017de8:	60fb      	str	r3, [r7, #12]
 8017dea:	2300      	movs	r3, #0
 8017dec:	613b      	str	r3, [r7, #16]
 8017dee:	2300      	movs	r3, #0
 8017df0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017df2:	f107 0308 	add.w	r3, r7, #8
 8017df6:	2100      	movs	r1, #0
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f7f6 fe2a 	bl	800ea52 <osMessageCreate>
 8017dfe:	4602      	mov	r2, r0
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d102      	bne.n	8017e12 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017e10:	e000      	b.n	8017e14 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017e12:	2300      	movs	r3, #0
}
 8017e14:	4618      	mov	r0, r3
 8017e16:	3718      	adds	r7, #24
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	bd80      	pop	{r7, pc}

08017e1c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017e1c:	b580      	push	{r7, lr}
 8017e1e:	b082      	sub	sp, #8
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f7f6 feef 	bl	800ec0c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	4618      	mov	r0, r3
 8017e34:	f7f6 ff00 	bl	800ec38 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017e38:	bf00      	nop
 8017e3a:	3708      	adds	r7, #8
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}

08017e40 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b084      	sub	sp, #16
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
 8017e48:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	6839      	ldr	r1, [r7, #0]
 8017e50:	2200      	movs	r2, #0
 8017e52:	4618      	mov	r0, r3
 8017e54:	f7f6 fe26 	bl	800eaa4 <osMessagePut>
 8017e58:	4603      	mov	r3, r0
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d102      	bne.n	8017e64 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017e5e:	2300      	movs	r3, #0
 8017e60:	73fb      	strb	r3, [r7, #15]
 8017e62:	e001      	b.n	8017e68 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017e64:	23ff      	movs	r3, #255	; 0xff
 8017e66:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	3710      	adds	r7, #16
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}

08017e74 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b08c      	sub	sp, #48	; 0x30
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	61f8      	str	r0, [r7, #28]
 8017e7c:	61b9      	str	r1, [r7, #24]
 8017e7e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017e80:	f7f6 fc12 	bl	800e6a8 <osKernelSysTick>
 8017e84:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017e86:	697b      	ldr	r3, [r7, #20]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d017      	beq.n	8017ebc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017e8c:	69fb      	ldr	r3, [r7, #28]
 8017e8e:	6819      	ldr	r1, [r3, #0]
 8017e90:	f107 0320 	add.w	r3, r7, #32
 8017e94:	697a      	ldr	r2, [r7, #20]
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7f6 fe44 	bl	800eb24 <osMessageGet>

    if(event.status == osEventMessage)
 8017e9c:	6a3b      	ldr	r3, [r7, #32]
 8017e9e:	2b10      	cmp	r3, #16
 8017ea0:	d109      	bne.n	8017eb6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea4:	461a      	mov	r2, r3
 8017ea6:	69bb      	ldr	r3, [r7, #24]
 8017ea8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017eaa:	f7f6 fbfd 	bl	800e6a8 <osKernelSysTick>
 8017eae:	4602      	mov	r2, r0
 8017eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eb2:	1ad3      	subs	r3, r2, r3
 8017eb4:	e019      	b.n	8017eea <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017eba:	e016      	b.n	8017eea <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017ebc:	69fb      	ldr	r3, [r7, #28]
 8017ebe:	6819      	ldr	r1, [r3, #0]
 8017ec0:	463b      	mov	r3, r7
 8017ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	f7f6 fe2c 	bl	800eb24 <osMessageGet>
 8017ecc:	f107 0320 	add.w	r3, r7, #32
 8017ed0:	463a      	mov	r2, r7
 8017ed2:	ca07      	ldmia	r2, {r0, r1, r2}
 8017ed4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eda:	461a      	mov	r2, r3
 8017edc:	69bb      	ldr	r3, [r7, #24]
 8017ede:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017ee0:	f7f6 fbe2 	bl	800e6a8 <osKernelSysTick>
 8017ee4:	4602      	mov	r2, r0
 8017ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ee8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017eea:	4618      	mov	r0, r3
 8017eec:	3730      	adds	r7, #48	; 0x30
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	bd80      	pop	{r7, pc}

08017ef2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017ef2:	b580      	push	{r7, lr}
 8017ef4:	b086      	sub	sp, #24
 8017ef6:	af00      	add	r7, sp, #0
 8017ef8:	6078      	str	r0, [r7, #4]
 8017efa:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	6819      	ldr	r1, [r3, #0]
 8017f00:	f107 030c 	add.w	r3, r7, #12
 8017f04:	2200      	movs	r2, #0
 8017f06:	4618      	mov	r0, r3
 8017f08:	f7f6 fe0c 	bl	800eb24 <osMessageGet>

  if(event.status == osEventMessage)
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	2b10      	cmp	r3, #16
 8017f10:	d105      	bne.n	8017f1e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017f12:	693b      	ldr	r3, [r7, #16]
 8017f14:	461a      	mov	r2, r3
 8017f16:	683b      	ldr	r3, [r7, #0]
 8017f18:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	e001      	b.n	8017f22 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8017f22:	4618      	mov	r0, r3
 8017f24:	3718      	adds	r7, #24
 8017f26:	46bd      	mov	sp, r7
 8017f28:	bd80      	pop	{r7, pc}

08017f2a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017f2a:	b480      	push	{r7}
 8017f2c:	b083      	sub	sp, #12
 8017f2e:	af00      	add	r7, sp, #0
 8017f30:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d101      	bne.n	8017f3e <sys_mbox_valid+0x14>
    return 0;
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	e000      	b.n	8017f40 <sys_mbox_valid+0x16>
  else
    return 1;
 8017f3e:	2301      	movs	r3, #1
}
 8017f40:	4618      	mov	r0, r3
 8017f42:	370c      	adds	r7, #12
 8017f44:	46bd      	mov	sp, r7
 8017f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4a:	4770      	bx	lr

08017f4c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017f4c:	b480      	push	{r7}
 8017f4e:	b083      	sub	sp, #12
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	2200      	movs	r2, #0
 8017f58:	601a      	str	r2, [r3, #0]
}
 8017f5a:	bf00      	nop
 8017f5c:	370c      	adds	r7, #12
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f64:	4770      	bx	lr

08017f66 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017f66:	b580      	push	{r7, lr}
 8017f68:	b084      	sub	sp, #16
 8017f6a:	af00      	add	r7, sp, #0
 8017f6c:	6078      	str	r0, [r7, #4]
 8017f6e:	460b      	mov	r3, r1
 8017f70:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017f72:	2300      	movs	r3, #0
 8017f74:	60bb      	str	r3, [r7, #8]
 8017f76:	2300      	movs	r3, #0
 8017f78:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017f7a:	f107 0308 	add.w	r3, r7, #8
 8017f7e:	2101      	movs	r1, #1
 8017f80:	4618      	mov	r0, r3
 8017f82:	f7f6 fc9d 	bl	800e8c0 <osSemaphoreCreate>
 8017f86:	4602      	mov	r2, r0
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d102      	bne.n	8017f9a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f98:	e009      	b.n	8017fae <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017f9a:	78fb      	ldrb	r3, [r7, #3]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d105      	bne.n	8017fac <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	2100      	movs	r1, #0
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7f6 fcbc 	bl	800e924 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017fac:	2300      	movs	r3, #0
}
 8017fae:	4618      	mov	r0, r3
 8017fb0:	3710      	adds	r7, #16
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	bd80      	pop	{r7, pc}

08017fb6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017fb6:	b580      	push	{r7, lr}
 8017fb8:	b084      	sub	sp, #16
 8017fba:	af00      	add	r7, sp, #0
 8017fbc:	6078      	str	r0, [r7, #4]
 8017fbe:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017fc0:	f7f6 fb72 	bl	800e6a8 <osKernelSysTick>
 8017fc4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017fc6:	683b      	ldr	r3, [r7, #0]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d011      	beq.n	8017ff0 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	6839      	ldr	r1, [r7, #0]
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7f6 fca6 	bl	800e924 <osSemaphoreWait>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d105      	bne.n	8017fea <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017fde:	f7f6 fb63 	bl	800e6a8 <osKernelSysTick>
 8017fe2:	4602      	mov	r2, r0
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	1ad3      	subs	r3, r2, r3
 8017fe8:	e012      	b.n	8018010 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017fee:	e00f      	b.n	8018010 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017ff0:	bf00      	nop
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f7f6 fc92 	bl	800e924 <osSemaphoreWait>
 8018000:	4603      	mov	r3, r0
 8018002:	2b00      	cmp	r3, #0
 8018004:	d1f5      	bne.n	8017ff2 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018006:	f7f6 fb4f 	bl	800e6a8 <osKernelSysTick>
 801800a:	4602      	mov	r2, r0
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018010:	4618      	mov	r0, r3
 8018012:	3710      	adds	r7, #16
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}

08018018 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b082      	sub	sp, #8
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	4618      	mov	r0, r3
 8018026:	f7f6 fccb 	bl	800e9c0 <osSemaphoreRelease>
}
 801802a:	bf00      	nop
 801802c:	3708      	adds	r7, #8
 801802e:	46bd      	mov	sp, r7
 8018030:	bd80      	pop	{r7, pc}

08018032 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018032:	b580      	push	{r7, lr}
 8018034:	b082      	sub	sp, #8
 8018036:	af00      	add	r7, sp, #0
 8018038:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	4618      	mov	r0, r3
 8018040:	f7f6 fcf4 	bl	800ea2c <osSemaphoreDelete>
}
 8018044:	bf00      	nop
 8018046:	3708      	adds	r7, #8
 8018048:	46bd      	mov	sp, r7
 801804a:	bd80      	pop	{r7, pc}

0801804c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801804c:	b480      	push	{r7}
 801804e:	b083      	sub	sp, #12
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d101      	bne.n	8018060 <sys_sem_valid+0x14>
    return 0;
 801805c:	2300      	movs	r3, #0
 801805e:	e000      	b.n	8018062 <sys_sem_valid+0x16>
  else
    return 1;
 8018060:	2301      	movs	r3, #1
}
 8018062:	4618      	mov	r0, r3
 8018064:	370c      	adds	r7, #12
 8018066:	46bd      	mov	sp, r7
 8018068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806c:	4770      	bx	lr

0801806e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801806e:	b480      	push	{r7}
 8018070:	b083      	sub	sp, #12
 8018072:	af00      	add	r7, sp, #0
 8018074:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	2200      	movs	r2, #0
 801807a:	601a      	str	r2, [r3, #0]
}
 801807c:	bf00      	nop
 801807e:	370c      	adds	r7, #12
 8018080:	46bd      	mov	sp, r7
 8018082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018086:	4770      	bx	lr

08018088 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801808c:	4803      	ldr	r0, [pc, #12]	; (801809c <sys_init+0x14>)
 801808e:	f7f6 fb7b 	bl	800e788 <osMutexCreate>
 8018092:	4603      	mov	r3, r0
 8018094:	4a02      	ldr	r2, [pc, #8]	; (80180a0 <sys_init+0x18>)
 8018096:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018098:	bf00      	nop
 801809a:	bd80      	pop	{r7, pc}
 801809c:	080243ec 	.word	0x080243ec
 80180a0:	2400f91c 	.word	0x2400f91c

080180a4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b084      	sub	sp, #16
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80180ac:	2300      	movs	r3, #0
 80180ae:	60bb      	str	r3, [r7, #8]
 80180b0:	2300      	movs	r3, #0
 80180b2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80180b4:	f107 0308 	add.w	r3, r7, #8
 80180b8:	4618      	mov	r0, r3
 80180ba:	f7f6 fb65 	bl	800e788 <osMutexCreate>
 80180be:	4602      	mov	r2, r0
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d102      	bne.n	80180d2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80180cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80180d0:	e000      	b.n	80180d4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80180d2:	2300      	movs	r3, #0
}
 80180d4:	4618      	mov	r0, r3
 80180d6:	3710      	adds	r7, #16
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}

080180dc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b082      	sub	sp, #8
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80180ec:	4618      	mov	r0, r3
 80180ee:	f7f6 fb63 	bl	800e7b8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80180f2:	bf00      	nop
 80180f4:	3708      	adds	r7, #8
 80180f6:	46bd      	mov	sp, r7
 80180f8:	bd80      	pop	{r7, pc}

080180fa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80180fa:	b580      	push	{r7, lr}
 80180fc:	b082      	sub	sp, #8
 80180fe:	af00      	add	r7, sp, #0
 8018100:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	4618      	mov	r0, r3
 8018108:	f7f6 fba4 	bl	800e854 <osMutexRelease>
}
 801810c:	bf00      	nop
 801810e:	3708      	adds	r7, #8
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}

08018114 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b08c      	sub	sp, #48	; 0x30
 8018118:	af00      	add	r7, sp, #0
 801811a:	60f8      	str	r0, [r7, #12]
 801811c:	60b9      	str	r1, [r7, #8]
 801811e:	607a      	str	r2, [r7, #4]
 8018120:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018122:	f107 0314 	add.w	r3, r7, #20
 8018126:	2200      	movs	r2, #0
 8018128:	601a      	str	r2, [r3, #0]
 801812a:	605a      	str	r2, [r3, #4]
 801812c:	609a      	str	r2, [r3, #8]
 801812e:	60da      	str	r2, [r3, #12]
 8018130:	611a      	str	r2, [r3, #16]
 8018132:	615a      	str	r2, [r3, #20]
 8018134:	619a      	str	r2, [r3, #24]
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	617b      	str	r3, [r7, #20]
 801813a:	68bb      	ldr	r3, [r7, #8]
 801813c:	61bb      	str	r3, [r7, #24]
 801813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018140:	b21b      	sxth	r3, r3
 8018142:	83bb      	strh	r3, [r7, #28]
 8018144:	683b      	ldr	r3, [r7, #0]
 8018146:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018148:	f107 0314 	add.w	r3, r7, #20
 801814c:	6879      	ldr	r1, [r7, #4]
 801814e:	4618      	mov	r0, r3
 8018150:	f7f6 faba 	bl	800e6c8 <osThreadCreate>
 8018154:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018156:	4618      	mov	r0, r3
 8018158:	3730      	adds	r7, #48	; 0x30
 801815a:	46bd      	mov	sp, r7
 801815c:	bd80      	pop	{r7, pc}
	...

08018160 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018164:	4b04      	ldr	r3, [pc, #16]	; (8018178 <sys_arch_protect+0x18>)
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801816c:	4618      	mov	r0, r3
 801816e:	f7f6 fb23 	bl	800e7b8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018172:	2301      	movs	r3, #1
}
 8018174:	4618      	mov	r0, r3
 8018176:	bd80      	pop	{r7, pc}
 8018178:	2400f91c 	.word	0x2400f91c

0801817c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b082      	sub	sp, #8
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018184:	4b04      	ldr	r3, [pc, #16]	; (8018198 <sys_arch_unprotect+0x1c>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	4618      	mov	r0, r3
 801818a:	f7f6 fb63 	bl	800e854 <osMutexRelease>
}
 801818e:	bf00      	nop
 8018190:	3708      	adds	r7, #8
 8018192:	46bd      	mov	sp, r7
 8018194:	bd80      	pop	{r7, pc}
 8018196:	bf00      	nop
 8018198:	2400f91c 	.word	0x2400f91c

0801819c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801819c:	b580      	push	{r7, lr}
 801819e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80181a0:	f007 fcba 	bl	801fb18 <rand>
 80181a4:	4603      	mov	r3, r0
 80181a6:	b29b      	uxth	r3, r3
 80181a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80181b2:	b29a      	uxth	r2, r3
 80181b4:	4b01      	ldr	r3, [pc, #4]	; (80181bc <tcp_init+0x20>)
 80181b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80181b8:	bf00      	nop
 80181ba:	bd80      	pop	{r7, pc}
 80181bc:	24000028 	.word	0x24000028

080181c0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b082      	sub	sp, #8
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	7d1b      	ldrb	r3, [r3, #20]
 80181cc:	2b01      	cmp	r3, #1
 80181ce:	d105      	bne.n	80181dc <tcp_free+0x1c>
 80181d0:	4b06      	ldr	r3, [pc, #24]	; (80181ec <tcp_free+0x2c>)
 80181d2:	22d4      	movs	r2, #212	; 0xd4
 80181d4:	4906      	ldr	r1, [pc, #24]	; (80181f0 <tcp_free+0x30>)
 80181d6:	4807      	ldr	r0, [pc, #28]	; (80181f4 <tcp_free+0x34>)
 80181d8:	f007 fc10 	bl	801f9fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80181dc:	6879      	ldr	r1, [r7, #4]
 80181de:	2001      	movs	r0, #1
 80181e0:	f7fe fc6c 	bl	8016abc <memp_free>
}
 80181e4:	bf00      	nop
 80181e6:	3708      	adds	r7, #8
 80181e8:	46bd      	mov	sp, r7
 80181ea:	bd80      	pop	{r7, pc}
 80181ec:	080227dc 	.word	0x080227dc
 80181f0:	08022850 	.word	0x08022850
 80181f4:	08022864 	.word	0x08022864

080181f8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b082      	sub	sp, #8
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	7d1b      	ldrb	r3, [r3, #20]
 8018204:	2b01      	cmp	r3, #1
 8018206:	d105      	bne.n	8018214 <tcp_free_listen+0x1c>
 8018208:	4b06      	ldr	r3, [pc, #24]	; (8018224 <tcp_free_listen+0x2c>)
 801820a:	22df      	movs	r2, #223	; 0xdf
 801820c:	4906      	ldr	r1, [pc, #24]	; (8018228 <tcp_free_listen+0x30>)
 801820e:	4807      	ldr	r0, [pc, #28]	; (801822c <tcp_free_listen+0x34>)
 8018210:	f007 fbf4 	bl	801f9fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8018214:	6879      	ldr	r1, [r7, #4]
 8018216:	2002      	movs	r0, #2
 8018218:	f7fe fc50 	bl	8016abc <memp_free>
}
 801821c:	bf00      	nop
 801821e:	3708      	adds	r7, #8
 8018220:	46bd      	mov	sp, r7
 8018222:	bd80      	pop	{r7, pc}
 8018224:	080227dc 	.word	0x080227dc
 8018228:	0802288c 	.word	0x0802288c
 801822c:	08022864 	.word	0x08022864

08018230 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8018230:	b580      	push	{r7, lr}
 8018232:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8018234:	f001 f8a8 	bl	8019388 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8018238:	4b07      	ldr	r3, [pc, #28]	; (8018258 <tcp_tmr+0x28>)
 801823a:	781b      	ldrb	r3, [r3, #0]
 801823c:	3301      	adds	r3, #1
 801823e:	b2da      	uxtb	r2, r3
 8018240:	4b05      	ldr	r3, [pc, #20]	; (8018258 <tcp_tmr+0x28>)
 8018242:	701a      	strb	r2, [r3, #0]
 8018244:	4b04      	ldr	r3, [pc, #16]	; (8018258 <tcp_tmr+0x28>)
 8018246:	781b      	ldrb	r3, [r3, #0]
 8018248:	f003 0301 	and.w	r3, r3, #1
 801824c:	2b00      	cmp	r3, #0
 801824e:	d001      	beq.n	8018254 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8018250:	f000 fd5a 	bl	8018d08 <tcp_slowtmr>
  }
}
 8018254:	bf00      	nop
 8018256:	bd80      	pop	{r7, pc}
 8018258:	2400f935 	.word	0x2400f935

0801825c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801825c:	b580      	push	{r7, lr}
 801825e:	b084      	sub	sp, #16
 8018260:	af00      	add	r7, sp, #0
 8018262:	6078      	str	r0, [r7, #4]
 8018264:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8018266:	683b      	ldr	r3, [r7, #0]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d105      	bne.n	8018278 <tcp_remove_listener+0x1c>
 801826c:	4b0d      	ldr	r3, [pc, #52]	; (80182a4 <tcp_remove_listener+0x48>)
 801826e:	22ff      	movs	r2, #255	; 0xff
 8018270:	490d      	ldr	r1, [pc, #52]	; (80182a8 <tcp_remove_listener+0x4c>)
 8018272:	480e      	ldr	r0, [pc, #56]	; (80182ac <tcp_remove_listener+0x50>)
 8018274:	f007 fbc2 	bl	801f9fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	60fb      	str	r3, [r7, #12]
 801827c:	e00a      	b.n	8018294 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018282:	683a      	ldr	r2, [r7, #0]
 8018284:	429a      	cmp	r2, r3
 8018286:	d102      	bne.n	801828e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	2200      	movs	r2, #0
 801828c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	68db      	ldr	r3, [r3, #12]
 8018292:	60fb      	str	r3, [r7, #12]
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d1f1      	bne.n	801827e <tcp_remove_listener+0x22>
    }
  }
}
 801829a:	bf00      	nop
 801829c:	bf00      	nop
 801829e:	3710      	adds	r7, #16
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}
 80182a4:	080227dc 	.word	0x080227dc
 80182a8:	080228a8 	.word	0x080228a8
 80182ac:	08022864 	.word	0x08022864

080182b0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b084      	sub	sp, #16
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d106      	bne.n	80182cc <tcp_listen_closed+0x1c>
 80182be:	4b14      	ldr	r3, [pc, #80]	; (8018310 <tcp_listen_closed+0x60>)
 80182c0:	f240 1211 	movw	r2, #273	; 0x111
 80182c4:	4913      	ldr	r1, [pc, #76]	; (8018314 <tcp_listen_closed+0x64>)
 80182c6:	4814      	ldr	r0, [pc, #80]	; (8018318 <tcp_listen_closed+0x68>)
 80182c8:	f007 fb98 	bl	801f9fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	7d1b      	ldrb	r3, [r3, #20]
 80182d0:	2b01      	cmp	r3, #1
 80182d2:	d006      	beq.n	80182e2 <tcp_listen_closed+0x32>
 80182d4:	4b0e      	ldr	r3, [pc, #56]	; (8018310 <tcp_listen_closed+0x60>)
 80182d6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80182da:	4910      	ldr	r1, [pc, #64]	; (801831c <tcp_listen_closed+0x6c>)
 80182dc:	480e      	ldr	r0, [pc, #56]	; (8018318 <tcp_listen_closed+0x68>)
 80182de:	f007 fb8d 	bl	801f9fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80182e2:	2301      	movs	r3, #1
 80182e4:	60fb      	str	r3, [r7, #12]
 80182e6:	e00b      	b.n	8018300 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80182e8:	4a0d      	ldr	r2, [pc, #52]	; (8018320 <tcp_listen_closed+0x70>)
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	6879      	ldr	r1, [r7, #4]
 80182f4:	4618      	mov	r0, r3
 80182f6:	f7ff ffb1 	bl	801825c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	3301      	adds	r3, #1
 80182fe:	60fb      	str	r3, [r7, #12]
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	2b03      	cmp	r3, #3
 8018304:	d9f0      	bls.n	80182e8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8018306:	bf00      	nop
 8018308:	bf00      	nop
 801830a:	3710      	adds	r7, #16
 801830c:	46bd      	mov	sp, r7
 801830e:	bd80      	pop	{r7, pc}
 8018310:	080227dc 	.word	0x080227dc
 8018314:	080228d0 	.word	0x080228d0
 8018318:	08022864 	.word	0x08022864
 801831c:	080228dc 	.word	0x080228dc
 8018320:	0802440c 	.word	0x0802440c

08018324 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8018324:	b5b0      	push	{r4, r5, r7, lr}
 8018326:	b088      	sub	sp, #32
 8018328:	af04      	add	r7, sp, #16
 801832a:	6078      	str	r0, [r7, #4]
 801832c:	460b      	mov	r3, r1
 801832e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d106      	bne.n	8018344 <tcp_close_shutdown+0x20>
 8018336:	4b63      	ldr	r3, [pc, #396]	; (80184c4 <tcp_close_shutdown+0x1a0>)
 8018338:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801833c:	4962      	ldr	r1, [pc, #392]	; (80184c8 <tcp_close_shutdown+0x1a4>)
 801833e:	4863      	ldr	r0, [pc, #396]	; (80184cc <tcp_close_shutdown+0x1a8>)
 8018340:	f007 fb5c 	bl	801f9fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8018344:	78fb      	ldrb	r3, [r7, #3]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d067      	beq.n	801841a <tcp_close_shutdown+0xf6>
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	7d1b      	ldrb	r3, [r3, #20]
 801834e:	2b04      	cmp	r3, #4
 8018350:	d003      	beq.n	801835a <tcp_close_shutdown+0x36>
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	7d1b      	ldrb	r3, [r3, #20]
 8018356:	2b07      	cmp	r3, #7
 8018358:	d15f      	bne.n	801841a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801835e:	2b00      	cmp	r3, #0
 8018360:	d105      	bne.n	801836e <tcp_close_shutdown+0x4a>
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018366:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801836a:	4293      	cmp	r3, r2
 801836c:	d055      	beq.n	801841a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	8b5b      	ldrh	r3, [r3, #26]
 8018372:	f003 0310 	and.w	r3, r3, #16
 8018376:	2b00      	cmp	r3, #0
 8018378:	d106      	bne.n	8018388 <tcp_close_shutdown+0x64>
 801837a:	4b52      	ldr	r3, [pc, #328]	; (80184c4 <tcp_close_shutdown+0x1a0>)
 801837c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8018380:	4953      	ldr	r1, [pc, #332]	; (80184d0 <tcp_close_shutdown+0x1ac>)
 8018382:	4852      	ldr	r0, [pc, #328]	; (80184cc <tcp_close_shutdown+0x1a8>)
 8018384:	f007 fb3a 	bl	801f9fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018390:	687d      	ldr	r5, [r7, #4]
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	3304      	adds	r3, #4
 8018396:	687a      	ldr	r2, [r7, #4]
 8018398:	8ad2      	ldrh	r2, [r2, #22]
 801839a:	6879      	ldr	r1, [r7, #4]
 801839c:	8b09      	ldrh	r1, [r1, #24]
 801839e:	9102      	str	r1, [sp, #8]
 80183a0:	9201      	str	r2, [sp, #4]
 80183a2:	9300      	str	r3, [sp, #0]
 80183a4:	462b      	mov	r3, r5
 80183a6:	4622      	mov	r2, r4
 80183a8:	4601      	mov	r1, r0
 80183aa:	6878      	ldr	r0, [r7, #4]
 80183ac:	f005 fdbe 	bl	801df2c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80183b0:	6878      	ldr	r0, [r7, #4]
 80183b2:	f001 fb9b 	bl	8019aec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80183b6:	4b47      	ldr	r3, [pc, #284]	; (80184d4 <tcp_close_shutdown+0x1b0>)
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	687a      	ldr	r2, [r7, #4]
 80183bc:	429a      	cmp	r2, r3
 80183be:	d105      	bne.n	80183cc <tcp_close_shutdown+0xa8>
 80183c0:	4b44      	ldr	r3, [pc, #272]	; (80184d4 <tcp_close_shutdown+0x1b0>)
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	68db      	ldr	r3, [r3, #12]
 80183c6:	4a43      	ldr	r2, [pc, #268]	; (80184d4 <tcp_close_shutdown+0x1b0>)
 80183c8:	6013      	str	r3, [r2, #0]
 80183ca:	e013      	b.n	80183f4 <tcp_close_shutdown+0xd0>
 80183cc:	4b41      	ldr	r3, [pc, #260]	; (80184d4 <tcp_close_shutdown+0x1b0>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	60fb      	str	r3, [r7, #12]
 80183d2:	e00c      	b.n	80183ee <tcp_close_shutdown+0xca>
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	68db      	ldr	r3, [r3, #12]
 80183d8:	687a      	ldr	r2, [r7, #4]
 80183da:	429a      	cmp	r2, r3
 80183dc:	d104      	bne.n	80183e8 <tcp_close_shutdown+0xc4>
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	68da      	ldr	r2, [r3, #12]
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	60da      	str	r2, [r3, #12]
 80183e6:	e005      	b.n	80183f4 <tcp_close_shutdown+0xd0>
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	68db      	ldr	r3, [r3, #12]
 80183ec:	60fb      	str	r3, [r7, #12]
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d1ef      	bne.n	80183d4 <tcp_close_shutdown+0xb0>
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	2200      	movs	r2, #0
 80183f8:	60da      	str	r2, [r3, #12]
 80183fa:	4b37      	ldr	r3, [pc, #220]	; (80184d8 <tcp_close_shutdown+0x1b4>)
 80183fc:	2201      	movs	r2, #1
 80183fe:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8018400:	4b36      	ldr	r3, [pc, #216]	; (80184dc <tcp_close_shutdown+0x1b8>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	687a      	ldr	r2, [r7, #4]
 8018406:	429a      	cmp	r2, r3
 8018408:	d102      	bne.n	8018410 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801840a:	f004 f833 	bl	801c474 <tcp_trigger_input_pcb_close>
 801840e:	e002      	b.n	8018416 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8018410:	6878      	ldr	r0, [r7, #4]
 8018412:	f7ff fed5 	bl	80181c0 <tcp_free>
      }
      return ERR_OK;
 8018416:	2300      	movs	r3, #0
 8018418:	e050      	b.n	80184bc <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	7d1b      	ldrb	r3, [r3, #20]
 801841e:	2b02      	cmp	r3, #2
 8018420:	d03b      	beq.n	801849a <tcp_close_shutdown+0x176>
 8018422:	2b02      	cmp	r3, #2
 8018424:	dc44      	bgt.n	80184b0 <tcp_close_shutdown+0x18c>
 8018426:	2b00      	cmp	r3, #0
 8018428:	d002      	beq.n	8018430 <tcp_close_shutdown+0x10c>
 801842a:	2b01      	cmp	r3, #1
 801842c:	d02a      	beq.n	8018484 <tcp_close_shutdown+0x160>
 801842e:	e03f      	b.n	80184b0 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	8adb      	ldrh	r3, [r3, #22]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d021      	beq.n	801847c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018438:	4b29      	ldr	r3, [pc, #164]	; (80184e0 <tcp_close_shutdown+0x1bc>)
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	687a      	ldr	r2, [r7, #4]
 801843e:	429a      	cmp	r2, r3
 8018440:	d105      	bne.n	801844e <tcp_close_shutdown+0x12a>
 8018442:	4b27      	ldr	r3, [pc, #156]	; (80184e0 <tcp_close_shutdown+0x1bc>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	68db      	ldr	r3, [r3, #12]
 8018448:	4a25      	ldr	r2, [pc, #148]	; (80184e0 <tcp_close_shutdown+0x1bc>)
 801844a:	6013      	str	r3, [r2, #0]
 801844c:	e013      	b.n	8018476 <tcp_close_shutdown+0x152>
 801844e:	4b24      	ldr	r3, [pc, #144]	; (80184e0 <tcp_close_shutdown+0x1bc>)
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	60bb      	str	r3, [r7, #8]
 8018454:	e00c      	b.n	8018470 <tcp_close_shutdown+0x14c>
 8018456:	68bb      	ldr	r3, [r7, #8]
 8018458:	68db      	ldr	r3, [r3, #12]
 801845a:	687a      	ldr	r2, [r7, #4]
 801845c:	429a      	cmp	r2, r3
 801845e:	d104      	bne.n	801846a <tcp_close_shutdown+0x146>
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	68da      	ldr	r2, [r3, #12]
 8018464:	68bb      	ldr	r3, [r7, #8]
 8018466:	60da      	str	r2, [r3, #12]
 8018468:	e005      	b.n	8018476 <tcp_close_shutdown+0x152>
 801846a:	68bb      	ldr	r3, [r7, #8]
 801846c:	68db      	ldr	r3, [r3, #12]
 801846e:	60bb      	str	r3, [r7, #8]
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d1ef      	bne.n	8018456 <tcp_close_shutdown+0x132>
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	2200      	movs	r2, #0
 801847a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801847c:	6878      	ldr	r0, [r7, #4]
 801847e:	f7ff fe9f 	bl	80181c0 <tcp_free>
      break;
 8018482:	e01a      	b.n	80184ba <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8018484:	6878      	ldr	r0, [r7, #4]
 8018486:	f7ff ff13 	bl	80182b0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801848a:	6879      	ldr	r1, [r7, #4]
 801848c:	4815      	ldr	r0, [pc, #84]	; (80184e4 <tcp_close_shutdown+0x1c0>)
 801848e:	f001 fb7d 	bl	8019b8c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8018492:	6878      	ldr	r0, [r7, #4]
 8018494:	f7ff feb0 	bl	80181f8 <tcp_free_listen>
      break;
 8018498:	e00f      	b.n	80184ba <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801849a:	6879      	ldr	r1, [r7, #4]
 801849c:	480d      	ldr	r0, [pc, #52]	; (80184d4 <tcp_close_shutdown+0x1b0>)
 801849e:	f001 fb75 	bl	8019b8c <tcp_pcb_remove>
 80184a2:	4b0d      	ldr	r3, [pc, #52]	; (80184d8 <tcp_close_shutdown+0x1b4>)
 80184a4:	2201      	movs	r2, #1
 80184a6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80184a8:	6878      	ldr	r0, [r7, #4]
 80184aa:	f7ff fe89 	bl	80181c0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80184ae:	e004      	b.n	80184ba <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 80184b0:	6878      	ldr	r0, [r7, #4]
 80184b2:	f000 f819 	bl	80184e8 <tcp_close_shutdown_fin>
 80184b6:	4603      	mov	r3, r0
 80184b8:	e000      	b.n	80184bc <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80184ba:	2300      	movs	r3, #0
}
 80184bc:	4618      	mov	r0, r3
 80184be:	3710      	adds	r7, #16
 80184c0:	46bd      	mov	sp, r7
 80184c2:	bdb0      	pop	{r4, r5, r7, pc}
 80184c4:	080227dc 	.word	0x080227dc
 80184c8:	080228f4 	.word	0x080228f4
 80184cc:	08022864 	.word	0x08022864
 80184d0:	08022914 	.word	0x08022914
 80184d4:	2400f92c 	.word	0x2400f92c
 80184d8:	2400f934 	.word	0x2400f934
 80184dc:	2400f96c 	.word	0x2400f96c
 80184e0:	2400f924 	.word	0x2400f924
 80184e4:	2400f928 	.word	0x2400f928

080184e8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b084      	sub	sp, #16
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d106      	bne.n	8018504 <tcp_close_shutdown_fin+0x1c>
 80184f6:	4b2e      	ldr	r3, [pc, #184]	; (80185b0 <tcp_close_shutdown_fin+0xc8>)
 80184f8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80184fc:	492d      	ldr	r1, [pc, #180]	; (80185b4 <tcp_close_shutdown_fin+0xcc>)
 80184fe:	482e      	ldr	r0, [pc, #184]	; (80185b8 <tcp_close_shutdown_fin+0xd0>)
 8018500:	f007 fa7c 	bl	801f9fc <iprintf>

  switch (pcb->state) {
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	7d1b      	ldrb	r3, [r3, #20]
 8018508:	2b07      	cmp	r3, #7
 801850a:	d020      	beq.n	801854e <tcp_close_shutdown_fin+0x66>
 801850c:	2b07      	cmp	r3, #7
 801850e:	dc2b      	bgt.n	8018568 <tcp_close_shutdown_fin+0x80>
 8018510:	2b03      	cmp	r3, #3
 8018512:	d002      	beq.n	801851a <tcp_close_shutdown_fin+0x32>
 8018514:	2b04      	cmp	r3, #4
 8018516:	d00d      	beq.n	8018534 <tcp_close_shutdown_fin+0x4c>
 8018518:	e026      	b.n	8018568 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801851a:	6878      	ldr	r0, [r7, #4]
 801851c:	f004 fe14 	bl	801d148 <tcp_send_fin>
 8018520:	4603      	mov	r3, r0
 8018522:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d11f      	bne.n	801856c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	2205      	movs	r2, #5
 8018530:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018532:	e01b      	b.n	801856c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8018534:	6878      	ldr	r0, [r7, #4]
 8018536:	f004 fe07 	bl	801d148 <tcp_send_fin>
 801853a:	4603      	mov	r3, r0
 801853c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801853e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d114      	bne.n	8018570 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	2205      	movs	r2, #5
 801854a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801854c:	e010      	b.n	8018570 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801854e:	6878      	ldr	r0, [r7, #4]
 8018550:	f004 fdfa 	bl	801d148 <tcp_send_fin>
 8018554:	4603      	mov	r3, r0
 8018556:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d109      	bne.n	8018574 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	2209      	movs	r2, #9
 8018564:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018566:	e005      	b.n	8018574 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8018568:	2300      	movs	r3, #0
 801856a:	e01c      	b.n	80185a6 <tcp_close_shutdown_fin+0xbe>
      break;
 801856c:	bf00      	nop
 801856e:	e002      	b.n	8018576 <tcp_close_shutdown_fin+0x8e>
      break;
 8018570:	bf00      	nop
 8018572:	e000      	b.n	8018576 <tcp_close_shutdown_fin+0x8e>
      break;
 8018574:	bf00      	nop
  }

  if (err == ERR_OK) {
 8018576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d103      	bne.n	8018586 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801857e:	6878      	ldr	r0, [r7, #4]
 8018580:	f004 ff20 	bl	801d3c4 <tcp_output>
 8018584:	e00d      	b.n	80185a2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8018586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801858a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801858e:	d108      	bne.n	80185a2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	8b5b      	ldrh	r3, [r3, #26]
 8018594:	f043 0308 	orr.w	r3, r3, #8
 8018598:	b29a      	uxth	r2, r3
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801859e:	2300      	movs	r3, #0
 80185a0:	e001      	b.n	80185a6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80185a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80185a6:	4618      	mov	r0, r3
 80185a8:	3710      	adds	r7, #16
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}
 80185ae:	bf00      	nop
 80185b0:	080227dc 	.word	0x080227dc
 80185b4:	080228d0 	.word	0x080228d0
 80185b8:	08022864 	.word	0x08022864

080185bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b082      	sub	sp, #8
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d109      	bne.n	80185de <tcp_close+0x22>
 80185ca:	4b0f      	ldr	r3, [pc, #60]	; (8018608 <tcp_close+0x4c>)
 80185cc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80185d0:	490e      	ldr	r1, [pc, #56]	; (801860c <tcp_close+0x50>)
 80185d2:	480f      	ldr	r0, [pc, #60]	; (8018610 <tcp_close+0x54>)
 80185d4:	f007 fa12 	bl	801f9fc <iprintf>
 80185d8:	f06f 030f 	mvn.w	r3, #15
 80185dc:	e00f      	b.n	80185fe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	7d1b      	ldrb	r3, [r3, #20]
 80185e2:	2b01      	cmp	r3, #1
 80185e4:	d006      	beq.n	80185f4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	8b5b      	ldrh	r3, [r3, #26]
 80185ea:	f043 0310 	orr.w	r3, r3, #16
 80185ee:	b29a      	uxth	r2, r3
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80185f4:	2101      	movs	r1, #1
 80185f6:	6878      	ldr	r0, [r7, #4]
 80185f8:	f7ff fe94 	bl	8018324 <tcp_close_shutdown>
 80185fc:	4603      	mov	r3, r0
}
 80185fe:	4618      	mov	r0, r3
 8018600:	3708      	adds	r7, #8
 8018602:	46bd      	mov	sp, r7
 8018604:	bd80      	pop	{r7, pc}
 8018606:	bf00      	nop
 8018608:	080227dc 	.word	0x080227dc
 801860c:	08022930 	.word	0x08022930
 8018610:	08022864 	.word	0x08022864

08018614 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8018614:	b580      	push	{r7, lr}
 8018616:	b084      	sub	sp, #16
 8018618:	af00      	add	r7, sp, #0
 801861a:	60f8      	str	r0, [r7, #12]
 801861c:	60b9      	str	r1, [r7, #8]
 801861e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d109      	bne.n	801863a <tcp_shutdown+0x26>
 8018626:	4b26      	ldr	r3, [pc, #152]	; (80186c0 <tcp_shutdown+0xac>)
 8018628:	f240 2207 	movw	r2, #519	; 0x207
 801862c:	4925      	ldr	r1, [pc, #148]	; (80186c4 <tcp_shutdown+0xb0>)
 801862e:	4826      	ldr	r0, [pc, #152]	; (80186c8 <tcp_shutdown+0xb4>)
 8018630:	f007 f9e4 	bl	801f9fc <iprintf>
 8018634:	f06f 030f 	mvn.w	r3, #15
 8018638:	e03d      	b.n	80186b6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	7d1b      	ldrb	r3, [r3, #20]
 801863e:	2b01      	cmp	r3, #1
 8018640:	d102      	bne.n	8018648 <tcp_shutdown+0x34>
    return ERR_CONN;
 8018642:	f06f 030a 	mvn.w	r3, #10
 8018646:	e036      	b.n	80186b6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8018648:	68bb      	ldr	r3, [r7, #8]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d01b      	beq.n	8018686 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	8b5b      	ldrh	r3, [r3, #26]
 8018652:	f043 0310 	orr.w	r3, r3, #16
 8018656:	b29a      	uxth	r2, r3
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d005      	beq.n	801866e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8018662:	2101      	movs	r1, #1
 8018664:	68f8      	ldr	r0, [r7, #12]
 8018666:	f7ff fe5d 	bl	8018324 <tcp_close_shutdown>
 801866a:	4603      	mov	r3, r0
 801866c:	e023      	b.n	80186b6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018672:	2b00      	cmp	r3, #0
 8018674:	d007      	beq.n	8018686 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801867a:	4618      	mov	r0, r3
 801867c:	f7ff f912 	bl	80178a4 <pbuf_free>
      pcb->refused_data = NULL;
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	2200      	movs	r2, #0
 8018684:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	2b00      	cmp	r3, #0
 801868a:	d013      	beq.n	80186b4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	7d1b      	ldrb	r3, [r3, #20]
 8018690:	2b04      	cmp	r3, #4
 8018692:	dc02      	bgt.n	801869a <tcp_shutdown+0x86>
 8018694:	2b03      	cmp	r3, #3
 8018696:	da02      	bge.n	801869e <tcp_shutdown+0x8a>
 8018698:	e009      	b.n	80186ae <tcp_shutdown+0x9a>
 801869a:	2b07      	cmp	r3, #7
 801869c:	d107      	bne.n	80186ae <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801869e:	68bb      	ldr	r3, [r7, #8]
 80186a0:	b2db      	uxtb	r3, r3
 80186a2:	4619      	mov	r1, r3
 80186a4:	68f8      	ldr	r0, [r7, #12]
 80186a6:	f7ff fe3d 	bl	8018324 <tcp_close_shutdown>
 80186aa:	4603      	mov	r3, r0
 80186ac:	e003      	b.n	80186b6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80186ae:	f06f 030a 	mvn.w	r3, #10
 80186b2:	e000      	b.n	80186b6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80186b4:	2300      	movs	r3, #0
}
 80186b6:	4618      	mov	r0, r3
 80186b8:	3710      	adds	r7, #16
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
 80186be:	bf00      	nop
 80186c0:	080227dc 	.word	0x080227dc
 80186c4:	08022948 	.word	0x08022948
 80186c8:	08022864 	.word	0x08022864

080186cc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b08e      	sub	sp, #56	; 0x38
 80186d0:	af04      	add	r7, sp, #16
 80186d2:	6078      	str	r0, [r7, #4]
 80186d4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d107      	bne.n	80186ec <tcp_abandon+0x20>
 80186dc:	4b52      	ldr	r3, [pc, #328]	; (8018828 <tcp_abandon+0x15c>)
 80186de:	f240 223d 	movw	r2, #573	; 0x23d
 80186e2:	4952      	ldr	r1, [pc, #328]	; (801882c <tcp_abandon+0x160>)
 80186e4:	4852      	ldr	r0, [pc, #328]	; (8018830 <tcp_abandon+0x164>)
 80186e6:	f007 f989 	bl	801f9fc <iprintf>
 80186ea:	e099      	b.n	8018820 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	7d1b      	ldrb	r3, [r3, #20]
 80186f0:	2b01      	cmp	r3, #1
 80186f2:	d106      	bne.n	8018702 <tcp_abandon+0x36>
 80186f4:	4b4c      	ldr	r3, [pc, #304]	; (8018828 <tcp_abandon+0x15c>)
 80186f6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80186fa:	494e      	ldr	r1, [pc, #312]	; (8018834 <tcp_abandon+0x168>)
 80186fc:	484c      	ldr	r0, [pc, #304]	; (8018830 <tcp_abandon+0x164>)
 80186fe:	f007 f97d 	bl	801f9fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	7d1b      	ldrb	r3, [r3, #20]
 8018706:	2b0a      	cmp	r3, #10
 8018708:	d107      	bne.n	801871a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801870a:	6879      	ldr	r1, [r7, #4]
 801870c:	484a      	ldr	r0, [pc, #296]	; (8018838 <tcp_abandon+0x16c>)
 801870e:	f001 fa3d 	bl	8019b8c <tcp_pcb_remove>
    tcp_free(pcb);
 8018712:	6878      	ldr	r0, [r7, #4]
 8018714:	f7ff fd54 	bl	80181c0 <tcp_free>
 8018718:	e082      	b.n	8018820 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801871a:	2300      	movs	r3, #0
 801871c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801871e:	2300      	movs	r3, #0
 8018720:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018726:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801872c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018734:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	691b      	ldr	r3, [r3, #16]
 801873a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	7d1b      	ldrb	r3, [r3, #20]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d126      	bne.n	8018792 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	8adb      	ldrh	r3, [r3, #22]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d02e      	beq.n	80187aa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801874c:	4b3b      	ldr	r3, [pc, #236]	; (801883c <tcp_abandon+0x170>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	687a      	ldr	r2, [r7, #4]
 8018752:	429a      	cmp	r2, r3
 8018754:	d105      	bne.n	8018762 <tcp_abandon+0x96>
 8018756:	4b39      	ldr	r3, [pc, #228]	; (801883c <tcp_abandon+0x170>)
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	68db      	ldr	r3, [r3, #12]
 801875c:	4a37      	ldr	r2, [pc, #220]	; (801883c <tcp_abandon+0x170>)
 801875e:	6013      	str	r3, [r2, #0]
 8018760:	e013      	b.n	801878a <tcp_abandon+0xbe>
 8018762:	4b36      	ldr	r3, [pc, #216]	; (801883c <tcp_abandon+0x170>)
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	61fb      	str	r3, [r7, #28]
 8018768:	e00c      	b.n	8018784 <tcp_abandon+0xb8>
 801876a:	69fb      	ldr	r3, [r7, #28]
 801876c:	68db      	ldr	r3, [r3, #12]
 801876e:	687a      	ldr	r2, [r7, #4]
 8018770:	429a      	cmp	r2, r3
 8018772:	d104      	bne.n	801877e <tcp_abandon+0xb2>
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	68da      	ldr	r2, [r3, #12]
 8018778:	69fb      	ldr	r3, [r7, #28]
 801877a:	60da      	str	r2, [r3, #12]
 801877c:	e005      	b.n	801878a <tcp_abandon+0xbe>
 801877e:	69fb      	ldr	r3, [r7, #28]
 8018780:	68db      	ldr	r3, [r3, #12]
 8018782:	61fb      	str	r3, [r7, #28]
 8018784:	69fb      	ldr	r3, [r7, #28]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d1ef      	bne.n	801876a <tcp_abandon+0x9e>
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	2200      	movs	r2, #0
 801878e:	60da      	str	r2, [r3, #12]
 8018790:	e00b      	b.n	80187aa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	8adb      	ldrh	r3, [r3, #22]
 801879a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801879c:	6879      	ldr	r1, [r7, #4]
 801879e:	4828      	ldr	r0, [pc, #160]	; (8018840 <tcp_abandon+0x174>)
 80187a0:	f001 f9f4 	bl	8019b8c <tcp_pcb_remove>
 80187a4:	4b27      	ldr	r3, [pc, #156]	; (8018844 <tcp_abandon+0x178>)
 80187a6:	2201      	movs	r2, #1
 80187a8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d004      	beq.n	80187bc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80187b6:	4618      	mov	r0, r3
 80187b8:	f000 fec8 	bl	801954c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d004      	beq.n	80187ce <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187c8:	4618      	mov	r0, r3
 80187ca:	f000 febf 	bl	801954c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d004      	beq.n	80187e0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80187da:	4618      	mov	r0, r3
 80187dc:	f000 feb6 	bl	801954c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80187e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d00e      	beq.n	8018804 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80187e6:	6879      	ldr	r1, [r7, #4]
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	3304      	adds	r3, #4
 80187ec:	687a      	ldr	r2, [r7, #4]
 80187ee:	8b12      	ldrh	r2, [r2, #24]
 80187f0:	9202      	str	r2, [sp, #8]
 80187f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80187f4:	9201      	str	r2, [sp, #4]
 80187f6:	9300      	str	r3, [sp, #0]
 80187f8:	460b      	mov	r3, r1
 80187fa:	697a      	ldr	r2, [r7, #20]
 80187fc:	69b9      	ldr	r1, [r7, #24]
 80187fe:	6878      	ldr	r0, [r7, #4]
 8018800:	f005 fb94 	bl	801df2c <tcp_rst>
    }
    last_state = pcb->state;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	7d1b      	ldrb	r3, [r3, #20]
 8018808:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801880a:	6878      	ldr	r0, [r7, #4]
 801880c:	f7ff fcd8 	bl	80181c0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8018810:	693b      	ldr	r3, [r7, #16]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d004      	beq.n	8018820 <tcp_abandon+0x154>
 8018816:	693b      	ldr	r3, [r7, #16]
 8018818:	f06f 010c 	mvn.w	r1, #12
 801881c:	68f8      	ldr	r0, [r7, #12]
 801881e:	4798      	blx	r3
  }
}
 8018820:	3728      	adds	r7, #40	; 0x28
 8018822:	46bd      	mov	sp, r7
 8018824:	bd80      	pop	{r7, pc}
 8018826:	bf00      	nop
 8018828:	080227dc 	.word	0x080227dc
 801882c:	08022964 	.word	0x08022964
 8018830:	08022864 	.word	0x08022864
 8018834:	08022980 	.word	0x08022980
 8018838:	2400f930 	.word	0x2400f930
 801883c:	2400f924 	.word	0x2400f924
 8018840:	2400f92c 	.word	0x2400f92c
 8018844:	2400f934 	.word	0x2400f934

08018848 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b082      	sub	sp, #8
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8018850:	2101      	movs	r1, #1
 8018852:	6878      	ldr	r0, [r7, #4]
 8018854:	f7ff ff3a 	bl	80186cc <tcp_abandon>
}
 8018858:	bf00      	nop
 801885a:	3708      	adds	r7, #8
 801885c:	46bd      	mov	sp, r7
 801885e:	bd80      	pop	{r7, pc}

08018860 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b088      	sub	sp, #32
 8018864:	af00      	add	r7, sp, #0
 8018866:	60f8      	str	r0, [r7, #12]
 8018868:	60b9      	str	r1, [r7, #8]
 801886a:	4613      	mov	r3, r2
 801886c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801886e:	2304      	movs	r3, #4
 8018870:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018872:	68bb      	ldr	r3, [r7, #8]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d101      	bne.n	801887c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8018878:	4b3e      	ldr	r3, [pc, #248]	; (8018974 <tcp_bind+0x114>)
 801887a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d109      	bne.n	8018896 <tcp_bind+0x36>
 8018882:	4b3d      	ldr	r3, [pc, #244]	; (8018978 <tcp_bind+0x118>)
 8018884:	f240 22a9 	movw	r2, #681	; 0x2a9
 8018888:	493c      	ldr	r1, [pc, #240]	; (801897c <tcp_bind+0x11c>)
 801888a:	483d      	ldr	r0, [pc, #244]	; (8018980 <tcp_bind+0x120>)
 801888c:	f007 f8b6 	bl	801f9fc <iprintf>
 8018890:	f06f 030f 	mvn.w	r3, #15
 8018894:	e06a      	b.n	801896c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	7d1b      	ldrb	r3, [r3, #20]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d009      	beq.n	80188b2 <tcp_bind+0x52>
 801889e:	4b36      	ldr	r3, [pc, #216]	; (8018978 <tcp_bind+0x118>)
 80188a0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80188a4:	4937      	ldr	r1, [pc, #220]	; (8018984 <tcp_bind+0x124>)
 80188a6:	4836      	ldr	r0, [pc, #216]	; (8018980 <tcp_bind+0x120>)
 80188a8:	f007 f8a8 	bl	801f9fc <iprintf>
 80188ac:	f06f 0305 	mvn.w	r3, #5
 80188b0:	e05c      	b.n	801896c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80188b2:	88fb      	ldrh	r3, [r7, #6]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d109      	bne.n	80188cc <tcp_bind+0x6c>
    port = tcp_new_port();
 80188b8:	f000 f9e0 	bl	8018c7c <tcp_new_port>
 80188bc:	4603      	mov	r3, r0
 80188be:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80188c0:	88fb      	ldrh	r3, [r7, #6]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d135      	bne.n	8018932 <tcp_bind+0xd2>
      return ERR_BUF;
 80188c6:	f06f 0301 	mvn.w	r3, #1
 80188ca:	e04f      	b.n	801896c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80188cc:	2300      	movs	r3, #0
 80188ce:	61fb      	str	r3, [r7, #28]
 80188d0:	e02b      	b.n	801892a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80188d2:	4a2d      	ldr	r2, [pc, #180]	; (8018988 <tcp_bind+0x128>)
 80188d4:	69fb      	ldr	r3, [r7, #28]
 80188d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	61bb      	str	r3, [r7, #24]
 80188de:	e01e      	b.n	801891e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80188e0:	69bb      	ldr	r3, [r7, #24]
 80188e2:	8adb      	ldrh	r3, [r3, #22]
 80188e4:	88fa      	ldrh	r2, [r7, #6]
 80188e6:	429a      	cmp	r2, r3
 80188e8:	d116      	bne.n	8018918 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80188ea:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d010      	beq.n	8018912 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80188f0:	69bb      	ldr	r3, [r7, #24]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d00c      	beq.n	8018912 <tcp_bind+0xb2>
 80188f8:	68bb      	ldr	r3, [r7, #8]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d009      	beq.n	8018912 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80188fe:	68bb      	ldr	r3, [r7, #8]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d005      	beq.n	8018912 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8018906:	69bb      	ldr	r3, [r7, #24]
 8018908:	681a      	ldr	r2, [r3, #0]
 801890a:	68bb      	ldr	r3, [r7, #8]
 801890c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801890e:	429a      	cmp	r2, r3
 8018910:	d102      	bne.n	8018918 <tcp_bind+0xb8>
              return ERR_USE;
 8018912:	f06f 0307 	mvn.w	r3, #7
 8018916:	e029      	b.n	801896c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018918:	69bb      	ldr	r3, [r7, #24]
 801891a:	68db      	ldr	r3, [r3, #12]
 801891c:	61bb      	str	r3, [r7, #24]
 801891e:	69bb      	ldr	r3, [r7, #24]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d1dd      	bne.n	80188e0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8018924:	69fb      	ldr	r3, [r7, #28]
 8018926:	3301      	adds	r3, #1
 8018928:	61fb      	str	r3, [r7, #28]
 801892a:	69fa      	ldr	r2, [r7, #28]
 801892c:	697b      	ldr	r3, [r7, #20]
 801892e:	429a      	cmp	r2, r3
 8018930:	dbcf      	blt.n	80188d2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d00c      	beq.n	8018952 <tcp_bind+0xf2>
 8018938:	68bb      	ldr	r3, [r7, #8]
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d008      	beq.n	8018952 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8018940:	68bb      	ldr	r3, [r7, #8]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d002      	beq.n	801894c <tcp_bind+0xec>
 8018946:	68bb      	ldr	r3, [r7, #8]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	e000      	b.n	801894e <tcp_bind+0xee>
 801894c:	2300      	movs	r3, #0
 801894e:	68fa      	ldr	r2, [r7, #12]
 8018950:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	88fa      	ldrh	r2, [r7, #6]
 8018956:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8018958:	4b0c      	ldr	r3, [pc, #48]	; (801898c <tcp_bind+0x12c>)
 801895a:	681a      	ldr	r2, [r3, #0]
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	60da      	str	r2, [r3, #12]
 8018960:	4a0a      	ldr	r2, [pc, #40]	; (801898c <tcp_bind+0x12c>)
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	6013      	str	r3, [r2, #0]
 8018966:	f005 fe5b 	bl	801e620 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801896a:	2300      	movs	r3, #0
}
 801896c:	4618      	mov	r0, r3
 801896e:	3720      	adds	r7, #32
 8018970:	46bd      	mov	sp, r7
 8018972:	bd80      	pop	{r7, pc}
 8018974:	08024318 	.word	0x08024318
 8018978:	080227dc 	.word	0x080227dc
 801897c:	080229b4 	.word	0x080229b4
 8018980:	08022864 	.word	0x08022864
 8018984:	080229cc 	.word	0x080229cc
 8018988:	0802440c 	.word	0x0802440c
 801898c:	2400f924 	.word	0x2400f924

08018990 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8018990:	b580      	push	{r7, lr}
 8018992:	b084      	sub	sp, #16
 8018994:	af00      	add	r7, sp, #0
 8018996:	60f8      	str	r0, [r7, #12]
 8018998:	60b9      	str	r1, [r7, #8]
 801899a:	4613      	mov	r3, r2
 801899c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801899e:	68bb      	ldr	r3, [r7, #8]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d106      	bne.n	80189b2 <tcp_accept_null+0x22>
 80189a4:	4b07      	ldr	r3, [pc, #28]	; (80189c4 <tcp_accept_null+0x34>)
 80189a6:	f240 320f 	movw	r2, #783	; 0x30f
 80189aa:	4907      	ldr	r1, [pc, #28]	; (80189c8 <tcp_accept_null+0x38>)
 80189ac:	4807      	ldr	r0, [pc, #28]	; (80189cc <tcp_accept_null+0x3c>)
 80189ae:	f007 f825 	bl	801f9fc <iprintf>

  tcp_abort(pcb);
 80189b2:	68b8      	ldr	r0, [r7, #8]
 80189b4:	f7ff ff48 	bl	8018848 <tcp_abort>

  return ERR_ABRT;
 80189b8:	f06f 030c 	mvn.w	r3, #12
}
 80189bc:	4618      	mov	r0, r3
 80189be:	3710      	adds	r7, #16
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}
 80189c4:	080227dc 	.word	0x080227dc
 80189c8:	080229f4 	.word	0x080229f4
 80189cc:	08022864 	.word	0x08022864

080189d0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b088      	sub	sp, #32
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	60f8      	str	r0, [r7, #12]
 80189d8:	460b      	mov	r3, r1
 80189da:	607a      	str	r2, [r7, #4]
 80189dc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80189de:	2300      	movs	r3, #0
 80189e0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d109      	bne.n	80189fc <tcp_listen_with_backlog_and_err+0x2c>
 80189e8:	4b47      	ldr	r3, [pc, #284]	; (8018b08 <tcp_listen_with_backlog_and_err+0x138>)
 80189ea:	f240 3259 	movw	r2, #857	; 0x359
 80189ee:	4947      	ldr	r1, [pc, #284]	; (8018b0c <tcp_listen_with_backlog_and_err+0x13c>)
 80189f0:	4847      	ldr	r0, [pc, #284]	; (8018b10 <tcp_listen_with_backlog_and_err+0x140>)
 80189f2:	f007 f803 	bl	801f9fc <iprintf>
 80189f6:	23f0      	movs	r3, #240	; 0xf0
 80189f8:	76fb      	strb	r3, [r7, #27]
 80189fa:	e079      	b.n	8018af0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	7d1b      	ldrb	r3, [r3, #20]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d009      	beq.n	8018a18 <tcp_listen_with_backlog_and_err+0x48>
 8018a04:	4b40      	ldr	r3, [pc, #256]	; (8018b08 <tcp_listen_with_backlog_and_err+0x138>)
 8018a06:	f240 325a 	movw	r2, #858	; 0x35a
 8018a0a:	4942      	ldr	r1, [pc, #264]	; (8018b14 <tcp_listen_with_backlog_and_err+0x144>)
 8018a0c:	4840      	ldr	r0, [pc, #256]	; (8018b10 <tcp_listen_with_backlog_and_err+0x140>)
 8018a0e:	f006 fff5 	bl	801f9fc <iprintf>
 8018a12:	23f1      	movs	r3, #241	; 0xf1
 8018a14:	76fb      	strb	r3, [r7, #27]
 8018a16:	e06b      	b.n	8018af0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	7d1b      	ldrb	r3, [r3, #20]
 8018a1c:	2b01      	cmp	r3, #1
 8018a1e:	d104      	bne.n	8018a2a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8018a24:	23f7      	movs	r3, #247	; 0xf7
 8018a26:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018a28:	e062      	b.n	8018af0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018a2a:	2002      	movs	r0, #2
 8018a2c:	f7fd ffd0 	bl	80169d0 <memp_malloc>
 8018a30:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8018a32:	69fb      	ldr	r3, [r7, #28]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d102      	bne.n	8018a3e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8018a38:	23ff      	movs	r3, #255	; 0xff
 8018a3a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018a3c:	e058      	b.n	8018af0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	691a      	ldr	r2, [r3, #16]
 8018a42:	69fb      	ldr	r3, [r7, #28]
 8018a44:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	8ada      	ldrh	r2, [r3, #22]
 8018a4a:	69fb      	ldr	r3, [r7, #28]
 8018a4c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8018a4e:	69fb      	ldr	r3, [r7, #28]
 8018a50:	2201      	movs	r2, #1
 8018a52:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	7d5a      	ldrb	r2, [r3, #21]
 8018a58:	69fb      	ldr	r3, [r7, #28]
 8018a5a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	7a5a      	ldrb	r2, [r3, #9]
 8018a60:	69fb      	ldr	r3, [r7, #28]
 8018a62:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8018a64:	69fb      	ldr	r3, [r7, #28]
 8018a66:	2200      	movs	r2, #0
 8018a68:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	7ada      	ldrb	r2, [r3, #11]
 8018a6e:	69fb      	ldr	r3, [r7, #28]
 8018a70:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	7a9a      	ldrb	r2, [r3, #10]
 8018a76:	69fb      	ldr	r3, [r7, #28]
 8018a78:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	681a      	ldr	r2, [r3, #0]
 8018a7e:	69fb      	ldr	r3, [r7, #28]
 8018a80:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	8adb      	ldrh	r3, [r3, #22]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d021      	beq.n	8018ace <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018a8a:	4b23      	ldr	r3, [pc, #140]	; (8018b18 <tcp_listen_with_backlog_and_err+0x148>)
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	68fa      	ldr	r2, [r7, #12]
 8018a90:	429a      	cmp	r2, r3
 8018a92:	d105      	bne.n	8018aa0 <tcp_listen_with_backlog_and_err+0xd0>
 8018a94:	4b20      	ldr	r3, [pc, #128]	; (8018b18 <tcp_listen_with_backlog_and_err+0x148>)
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	68db      	ldr	r3, [r3, #12]
 8018a9a:	4a1f      	ldr	r2, [pc, #124]	; (8018b18 <tcp_listen_with_backlog_and_err+0x148>)
 8018a9c:	6013      	str	r3, [r2, #0]
 8018a9e:	e013      	b.n	8018ac8 <tcp_listen_with_backlog_and_err+0xf8>
 8018aa0:	4b1d      	ldr	r3, [pc, #116]	; (8018b18 <tcp_listen_with_backlog_and_err+0x148>)
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	617b      	str	r3, [r7, #20]
 8018aa6:	e00c      	b.n	8018ac2 <tcp_listen_with_backlog_and_err+0xf2>
 8018aa8:	697b      	ldr	r3, [r7, #20]
 8018aaa:	68db      	ldr	r3, [r3, #12]
 8018aac:	68fa      	ldr	r2, [r7, #12]
 8018aae:	429a      	cmp	r2, r3
 8018ab0:	d104      	bne.n	8018abc <tcp_listen_with_backlog_and_err+0xec>
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	68da      	ldr	r2, [r3, #12]
 8018ab6:	697b      	ldr	r3, [r7, #20]
 8018ab8:	60da      	str	r2, [r3, #12]
 8018aba:	e005      	b.n	8018ac8 <tcp_listen_with_backlog_and_err+0xf8>
 8018abc:	697b      	ldr	r3, [r7, #20]
 8018abe:	68db      	ldr	r3, [r3, #12]
 8018ac0:	617b      	str	r3, [r7, #20]
 8018ac2:	697b      	ldr	r3, [r7, #20]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d1ef      	bne.n	8018aa8 <tcp_listen_with_backlog_and_err+0xd8>
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	2200      	movs	r2, #0
 8018acc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8018ace:	68f8      	ldr	r0, [r7, #12]
 8018ad0:	f7ff fb76 	bl	80181c0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8018ad4:	69fb      	ldr	r3, [r7, #28]
 8018ad6:	4a11      	ldr	r2, [pc, #68]	; (8018b1c <tcp_listen_with_backlog_and_err+0x14c>)
 8018ad8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018ada:	4b11      	ldr	r3, [pc, #68]	; (8018b20 <tcp_listen_with_backlog_and_err+0x150>)
 8018adc:	681a      	ldr	r2, [r3, #0]
 8018ade:	69fb      	ldr	r3, [r7, #28]
 8018ae0:	60da      	str	r2, [r3, #12]
 8018ae2:	4a0f      	ldr	r2, [pc, #60]	; (8018b20 <tcp_listen_with_backlog_and_err+0x150>)
 8018ae4:	69fb      	ldr	r3, [r7, #28]
 8018ae6:	6013      	str	r3, [r2, #0]
 8018ae8:	f005 fd9a 	bl	801e620 <tcp_timer_needed>
  res = ERR_OK;
 8018aec:	2300      	movs	r3, #0
 8018aee:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d002      	beq.n	8018afc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	7efa      	ldrb	r2, [r7, #27]
 8018afa:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8018afc:	69fb      	ldr	r3, [r7, #28]
}
 8018afe:	4618      	mov	r0, r3
 8018b00:	3720      	adds	r7, #32
 8018b02:	46bd      	mov	sp, r7
 8018b04:	bd80      	pop	{r7, pc}
 8018b06:	bf00      	nop
 8018b08:	080227dc 	.word	0x080227dc
 8018b0c:	08022a14 	.word	0x08022a14
 8018b10:	08022864 	.word	0x08022864
 8018b14:	08022a44 	.word	0x08022a44
 8018b18:	2400f924 	.word	0x2400f924
 8018b1c:	08018991 	.word	0x08018991
 8018b20:	2400f928 	.word	0x2400f928

08018b24 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b084      	sub	sp, #16
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d106      	bne.n	8018b40 <tcp_update_rcv_ann_wnd+0x1c>
 8018b32:	4b25      	ldr	r3, [pc, #148]	; (8018bc8 <tcp_update_rcv_ann_wnd+0xa4>)
 8018b34:	f240 32a6 	movw	r2, #934	; 0x3a6
 8018b38:	4924      	ldr	r1, [pc, #144]	; (8018bcc <tcp_update_rcv_ann_wnd+0xa8>)
 8018b3a:	4825      	ldr	r0, [pc, #148]	; (8018bd0 <tcp_update_rcv_ann_wnd+0xac>)
 8018b3c:	f006 ff5e 	bl	801f9fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b44:	687a      	ldr	r2, [r7, #4]
 8018b46:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8018b48:	4413      	add	r3, r2
 8018b4a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b50:	687a      	ldr	r2, [r7, #4]
 8018b52:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8018b54:	f640 3168 	movw	r1, #2920	; 0xb68
 8018b58:	428a      	cmp	r2, r1
 8018b5a:	bf28      	it	cs
 8018b5c:	460a      	movcs	r2, r1
 8018b5e:	b292      	uxth	r2, r2
 8018b60:	4413      	add	r3, r2
 8018b62:	68fa      	ldr	r2, [r7, #12]
 8018b64:	1ad3      	subs	r3, r2, r3
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	db08      	blt.n	8018b7c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b76:	68fa      	ldr	r2, [r7, #12]
 8018b78:	1ad3      	subs	r3, r2, r3
 8018b7a:	e020      	b.n	8018bbe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b84:	1ad3      	subs	r3, r2, r3
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	dd03      	ble.n	8018b92 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8018b90:	e014      	b.n	8018bbc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b9a:	1ad3      	subs	r3, r2, r3
 8018b9c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018b9e:	68bb      	ldr	r3, [r7, #8]
 8018ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ba4:	d306      	bcc.n	8018bb4 <tcp_update_rcv_ann_wnd+0x90>
 8018ba6:	4b08      	ldr	r3, [pc, #32]	; (8018bc8 <tcp_update_rcv_ann_wnd+0xa4>)
 8018ba8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8018bac:	4909      	ldr	r1, [pc, #36]	; (8018bd4 <tcp_update_rcv_ann_wnd+0xb0>)
 8018bae:	4808      	ldr	r0, [pc, #32]	; (8018bd0 <tcp_update_rcv_ann_wnd+0xac>)
 8018bb0:	f006 ff24 	bl	801f9fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8018bb4:	68bb      	ldr	r3, [r7, #8]
 8018bb6:	b29a      	uxth	r2, r3
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8018bbc:	2300      	movs	r3, #0
  }
}
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	3710      	adds	r7, #16
 8018bc2:	46bd      	mov	sp, r7
 8018bc4:	bd80      	pop	{r7, pc}
 8018bc6:	bf00      	nop
 8018bc8:	080227dc 	.word	0x080227dc
 8018bcc:	08022a7c 	.word	0x08022a7c
 8018bd0:	08022864 	.word	0x08022864
 8018bd4:	08022aa0 	.word	0x08022aa0

08018bd8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b084      	sub	sp, #16
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
 8018be0:	460b      	mov	r3, r1
 8018be2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d107      	bne.n	8018bfa <tcp_recved+0x22>
 8018bea:	4b20      	ldr	r3, [pc, #128]	; (8018c6c <tcp_recved+0x94>)
 8018bec:	f240 32cf 	movw	r2, #975	; 0x3cf
 8018bf0:	491f      	ldr	r1, [pc, #124]	; (8018c70 <tcp_recved+0x98>)
 8018bf2:	4820      	ldr	r0, [pc, #128]	; (8018c74 <tcp_recved+0x9c>)
 8018bf4:	f006 ff02 	bl	801f9fc <iprintf>
 8018bf8:	e034      	b.n	8018c64 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	7d1b      	ldrb	r3, [r3, #20]
 8018bfe:	2b01      	cmp	r3, #1
 8018c00:	d106      	bne.n	8018c10 <tcp_recved+0x38>
 8018c02:	4b1a      	ldr	r3, [pc, #104]	; (8018c6c <tcp_recved+0x94>)
 8018c04:	f240 32d2 	movw	r2, #978	; 0x3d2
 8018c08:	491b      	ldr	r1, [pc, #108]	; (8018c78 <tcp_recved+0xa0>)
 8018c0a:	481a      	ldr	r0, [pc, #104]	; (8018c74 <tcp_recved+0x9c>)
 8018c0c:	f006 fef6 	bl	801f9fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018c14:	887b      	ldrh	r3, [r7, #2]
 8018c16:	4413      	add	r3, r2
 8018c18:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8018c1a:	89fb      	ldrh	r3, [r7, #14]
 8018c1c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8018c20:	4293      	cmp	r3, r2
 8018c22:	d804      	bhi.n	8018c2e <tcp_recved+0x56>
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c28:	89fa      	ldrh	r2, [r7, #14]
 8018c2a:	429a      	cmp	r2, r3
 8018c2c:	d204      	bcs.n	8018c38 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8018c34:	851a      	strh	r2, [r3, #40]	; 0x28
 8018c36:	e002      	b.n	8018c3e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	89fa      	ldrh	r2, [r7, #14]
 8018c3c:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8018c3e:	6878      	ldr	r0, [r7, #4]
 8018c40:	f7ff ff70 	bl	8018b24 <tcp_update_rcv_ann_wnd>
 8018c44:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8018c46:	68bb      	ldr	r3, [r7, #8]
 8018c48:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8018c4c:	4293      	cmp	r3, r2
 8018c4e:	d909      	bls.n	8018c64 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	8b5b      	ldrh	r3, [r3, #26]
 8018c54:	f043 0302 	orr.w	r3, r3, #2
 8018c58:	b29a      	uxth	r2, r3
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018c5e:	6878      	ldr	r0, [r7, #4]
 8018c60:	f004 fbb0 	bl	801d3c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8018c64:	3710      	adds	r7, #16
 8018c66:	46bd      	mov	sp, r7
 8018c68:	bd80      	pop	{r7, pc}
 8018c6a:	bf00      	nop
 8018c6c:	080227dc 	.word	0x080227dc
 8018c70:	08022abc 	.word	0x08022abc
 8018c74:	08022864 	.word	0x08022864
 8018c78:	08022ad4 	.word	0x08022ad4

08018c7c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8018c7c:	b480      	push	{r7}
 8018c7e:	b083      	sub	sp, #12
 8018c80:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8018c82:	2300      	movs	r3, #0
 8018c84:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8018c86:	4b1e      	ldr	r3, [pc, #120]	; (8018d00 <tcp_new_port+0x84>)
 8018c88:	881b      	ldrh	r3, [r3, #0]
 8018c8a:	3301      	adds	r3, #1
 8018c8c:	b29a      	uxth	r2, r3
 8018c8e:	4b1c      	ldr	r3, [pc, #112]	; (8018d00 <tcp_new_port+0x84>)
 8018c90:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8018c92:	4b1b      	ldr	r3, [pc, #108]	; (8018d00 <tcp_new_port+0x84>)
 8018c94:	881b      	ldrh	r3, [r3, #0]
 8018c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c9a:	4293      	cmp	r3, r2
 8018c9c:	d103      	bne.n	8018ca6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018c9e:	4b18      	ldr	r3, [pc, #96]	; (8018d00 <tcp_new_port+0x84>)
 8018ca0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018ca4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	71fb      	strb	r3, [r7, #7]
 8018caa:	e01e      	b.n	8018cea <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018cac:	79fb      	ldrb	r3, [r7, #7]
 8018cae:	4a15      	ldr	r2, [pc, #84]	; (8018d04 <tcp_new_port+0x88>)
 8018cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	603b      	str	r3, [r7, #0]
 8018cb8:	e011      	b.n	8018cde <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	8ada      	ldrh	r2, [r3, #22]
 8018cbe:	4b10      	ldr	r3, [pc, #64]	; (8018d00 <tcp_new_port+0x84>)
 8018cc0:	881b      	ldrh	r3, [r3, #0]
 8018cc2:	429a      	cmp	r2, r3
 8018cc4:	d108      	bne.n	8018cd8 <tcp_new_port+0x5c>
        n++;
 8018cc6:	88bb      	ldrh	r3, [r7, #4]
 8018cc8:	3301      	adds	r3, #1
 8018cca:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8018ccc:	88bb      	ldrh	r3, [r7, #4]
 8018cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018cd2:	d3d8      	bcc.n	8018c86 <tcp_new_port+0xa>
          return 0;
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	e00d      	b.n	8018cf4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018cd8:	683b      	ldr	r3, [r7, #0]
 8018cda:	68db      	ldr	r3, [r3, #12]
 8018cdc:	603b      	str	r3, [r7, #0]
 8018cde:	683b      	ldr	r3, [r7, #0]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d1ea      	bne.n	8018cba <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8018ce4:	79fb      	ldrb	r3, [r7, #7]
 8018ce6:	3301      	adds	r3, #1
 8018ce8:	71fb      	strb	r3, [r7, #7]
 8018cea:	79fb      	ldrb	r3, [r7, #7]
 8018cec:	2b03      	cmp	r3, #3
 8018cee:	d9dd      	bls.n	8018cac <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8018cf0:	4b03      	ldr	r3, [pc, #12]	; (8018d00 <tcp_new_port+0x84>)
 8018cf2:	881b      	ldrh	r3, [r3, #0]
}
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	370c      	adds	r7, #12
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfe:	4770      	bx	lr
 8018d00:	24000028 	.word	0x24000028
 8018d04:	0802440c 	.word	0x0802440c

08018d08 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8018d08:	b5b0      	push	{r4, r5, r7, lr}
 8018d0a:	b090      	sub	sp, #64	; 0x40
 8018d0c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8018d0e:	2300      	movs	r3, #0
 8018d10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8018d14:	4b94      	ldr	r3, [pc, #592]	; (8018f68 <tcp_slowtmr+0x260>)
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	3301      	adds	r3, #1
 8018d1a:	4a93      	ldr	r2, [pc, #588]	; (8018f68 <tcp_slowtmr+0x260>)
 8018d1c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8018d1e:	4b93      	ldr	r3, [pc, #588]	; (8018f6c <tcp_slowtmr+0x264>)
 8018d20:	781b      	ldrb	r3, [r3, #0]
 8018d22:	3301      	adds	r3, #1
 8018d24:	b2da      	uxtb	r2, r3
 8018d26:	4b91      	ldr	r3, [pc, #580]	; (8018f6c <tcp_slowtmr+0x264>)
 8018d28:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8018d2e:	4b90      	ldr	r3, [pc, #576]	; (8018f70 <tcp_slowtmr+0x268>)
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8018d34:	e29d      	b.n	8019272 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8018d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d38:	7d1b      	ldrb	r3, [r3, #20]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d106      	bne.n	8018d4c <tcp_slowtmr+0x44>
 8018d3e:	4b8d      	ldr	r3, [pc, #564]	; (8018f74 <tcp_slowtmr+0x26c>)
 8018d40:	f240 42be 	movw	r2, #1214	; 0x4be
 8018d44:	498c      	ldr	r1, [pc, #560]	; (8018f78 <tcp_slowtmr+0x270>)
 8018d46:	488d      	ldr	r0, [pc, #564]	; (8018f7c <tcp_slowtmr+0x274>)
 8018d48:	f006 fe58 	bl	801f9fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d4e:	7d1b      	ldrb	r3, [r3, #20]
 8018d50:	2b01      	cmp	r3, #1
 8018d52:	d106      	bne.n	8018d62 <tcp_slowtmr+0x5a>
 8018d54:	4b87      	ldr	r3, [pc, #540]	; (8018f74 <tcp_slowtmr+0x26c>)
 8018d56:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8018d5a:	4989      	ldr	r1, [pc, #548]	; (8018f80 <tcp_slowtmr+0x278>)
 8018d5c:	4887      	ldr	r0, [pc, #540]	; (8018f7c <tcp_slowtmr+0x274>)
 8018d5e:	f006 fe4d 	bl	801f9fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8018d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d64:	7d1b      	ldrb	r3, [r3, #20]
 8018d66:	2b0a      	cmp	r3, #10
 8018d68:	d106      	bne.n	8018d78 <tcp_slowtmr+0x70>
 8018d6a:	4b82      	ldr	r3, [pc, #520]	; (8018f74 <tcp_slowtmr+0x26c>)
 8018d6c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8018d70:	4984      	ldr	r1, [pc, #528]	; (8018f84 <tcp_slowtmr+0x27c>)
 8018d72:	4882      	ldr	r0, [pc, #520]	; (8018f7c <tcp_slowtmr+0x274>)
 8018d74:	f006 fe42 	bl	801f9fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8018d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d7a:	7f9a      	ldrb	r2, [r3, #30]
 8018d7c:	4b7b      	ldr	r3, [pc, #492]	; (8018f6c <tcp_slowtmr+0x264>)
 8018d7e:	781b      	ldrb	r3, [r3, #0]
 8018d80:	429a      	cmp	r2, r3
 8018d82:	d105      	bne.n	8018d90 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8018d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d86:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d8a:	68db      	ldr	r3, [r3, #12]
 8018d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8018d8e:	e270      	b.n	8019272 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8018d90:	4b76      	ldr	r3, [pc, #472]	; (8018f6c <tcp_slowtmr+0x264>)
 8018d92:	781a      	ldrb	r2, [r3, #0]
 8018d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d96:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8018d98:	2300      	movs	r3, #0
 8018d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8018d9e:	2300      	movs	r3, #0
 8018da0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8018da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018da6:	7d1b      	ldrb	r3, [r3, #20]
 8018da8:	2b02      	cmp	r3, #2
 8018daa:	d10a      	bne.n	8018dc2 <tcp_slowtmr+0xba>
 8018dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018db2:	2b05      	cmp	r3, #5
 8018db4:	d905      	bls.n	8018dc2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8018db6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018dba:	3301      	adds	r3, #1
 8018dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018dc0:	e11e      	b.n	8019000 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8018dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018dc8:	2b0b      	cmp	r3, #11
 8018dca:	d905      	bls.n	8018dd8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8018dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018dd0:	3301      	adds	r3, #1
 8018dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018dd6:	e113      	b.n	8019000 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8018dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d075      	beq.n	8018ece <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8018de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d006      	beq.n	8018df8 <tcp_slowtmr+0xf0>
 8018dea:	4b62      	ldr	r3, [pc, #392]	; (8018f74 <tcp_slowtmr+0x26c>)
 8018dec:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8018df0:	4965      	ldr	r1, [pc, #404]	; (8018f88 <tcp_slowtmr+0x280>)
 8018df2:	4862      	ldr	r0, [pc, #392]	; (8018f7c <tcp_slowtmr+0x274>)
 8018df4:	f006 fe02 	bl	801f9fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8018df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d106      	bne.n	8018e0e <tcp_slowtmr+0x106>
 8018e00:	4b5c      	ldr	r3, [pc, #368]	; (8018f74 <tcp_slowtmr+0x26c>)
 8018e02:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8018e06:	4961      	ldr	r1, [pc, #388]	; (8018f8c <tcp_slowtmr+0x284>)
 8018e08:	485c      	ldr	r0, [pc, #368]	; (8018f7c <tcp_slowtmr+0x274>)
 8018e0a:	f006 fdf7 	bl	801f9fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8018e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e10:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018e14:	2b0b      	cmp	r3, #11
 8018e16:	d905      	bls.n	8018e24 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8018e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e1c:	3301      	adds	r3, #1
 8018e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018e22:	e0ed      	b.n	8019000 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8018e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018e2a:	3b01      	subs	r3, #1
 8018e2c:	4a58      	ldr	r2, [pc, #352]	; (8018f90 <tcp_slowtmr+0x288>)
 8018e2e:	5cd3      	ldrb	r3, [r2, r3]
 8018e30:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8018e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8018e38:	7c7a      	ldrb	r2, [r7, #17]
 8018e3a:	429a      	cmp	r2, r3
 8018e3c:	d907      	bls.n	8018e4e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8018e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8018e44:	3301      	adds	r3, #1
 8018e46:	b2da      	uxtb	r2, r3
 8018e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e4a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8018e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8018e54:	7c7a      	ldrb	r2, [r7, #17]
 8018e56:	429a      	cmp	r2, r3
 8018e58:	f200 80d2 	bhi.w	8019000 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8018e5c:	2301      	movs	r3, #1
 8018e5e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8018e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d108      	bne.n	8018e7c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8018e6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018e6c:	f005 f952 	bl	801e114 <tcp_zero_window_probe>
 8018e70:	4603      	mov	r3, r0
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d014      	beq.n	8018ea0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8018e76:	2300      	movs	r3, #0
 8018e78:	623b      	str	r3, [r7, #32]
 8018e7a:	e011      	b.n	8018ea0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8018e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018e82:	4619      	mov	r1, r3
 8018e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018e86:	f004 f817 	bl	801ceb8 <tcp_split_unsent_seg>
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d107      	bne.n	8018ea0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8018e90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018e92:	f004 fa97 	bl	801d3c4 <tcp_output>
 8018e96:	4603      	mov	r3, r0
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d101      	bne.n	8018ea0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8018ea0:	6a3b      	ldr	r3, [r7, #32]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	f000 80ac 	beq.w	8019000 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8018ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eaa:	2200      	movs	r2, #0
 8018eac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8018eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eb2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018eb6:	2b06      	cmp	r3, #6
 8018eb8:	f200 80a2 	bhi.w	8019000 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8018ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ebe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018ec2:	3301      	adds	r3, #1
 8018ec4:	b2da      	uxtb	r2, r3
 8018ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ec8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8018ecc:	e098      	b.n	8019000 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8018ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ed0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	db0f      	blt.n	8018ef8 <tcp_slowtmr+0x1f0>
 8018ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018ede:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018ee2:	4293      	cmp	r3, r2
 8018ee4:	d008      	beq.n	8018ef8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8018ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ee8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018eec:	b29b      	uxth	r3, r3
 8018eee:	3301      	adds	r3, #1
 8018ef0:	b29b      	uxth	r3, r3
 8018ef2:	b21a      	sxth	r2, r3
 8018ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ef6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8018ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018efa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8018efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f00:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8018f04:	429a      	cmp	r2, r3
 8018f06:	db7b      	blt.n	8019000 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8018f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018f0a:	f004 fd4d 	bl	801d9a8 <tcp_rexmit_rto_prepare>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d007      	beq.n	8018f24 <tcp_slowtmr+0x21c>
 8018f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d171      	bne.n	8019000 <tcp_slowtmr+0x2f8>
 8018f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d06d      	beq.n	8019000 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8018f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f26:	7d1b      	ldrb	r3, [r3, #20]
 8018f28:	2b02      	cmp	r3, #2
 8018f2a:	d03a      	beq.n	8018fa2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8018f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018f32:	2b0c      	cmp	r3, #12
 8018f34:	bf28      	it	cs
 8018f36:	230c      	movcs	r3, #12
 8018f38:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8018f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018f40:	10db      	asrs	r3, r3, #3
 8018f42:	b21b      	sxth	r3, r3
 8018f44:	461a      	mov	r2, r3
 8018f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018f4c:	4413      	add	r3, r2
 8018f4e:	7efa      	ldrb	r2, [r7, #27]
 8018f50:	4910      	ldr	r1, [pc, #64]	; (8018f94 <tcp_slowtmr+0x28c>)
 8018f52:	5c8a      	ldrb	r2, [r1, r2]
 8018f54:	4093      	lsls	r3, r2
 8018f56:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8018f58:	697b      	ldr	r3, [r7, #20]
 8018f5a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8018f5e:	4293      	cmp	r3, r2
 8018f60:	dc1a      	bgt.n	8018f98 <tcp_slowtmr+0x290>
 8018f62:	697b      	ldr	r3, [r7, #20]
 8018f64:	b21a      	sxth	r2, r3
 8018f66:	e019      	b.n	8018f9c <tcp_slowtmr+0x294>
 8018f68:	2400f920 	.word	0x2400f920
 8018f6c:	2400f936 	.word	0x2400f936
 8018f70:	2400f92c 	.word	0x2400f92c
 8018f74:	080227dc 	.word	0x080227dc
 8018f78:	08022b64 	.word	0x08022b64
 8018f7c:	08022864 	.word	0x08022864
 8018f80:	08022b90 	.word	0x08022b90
 8018f84:	08022bbc 	.word	0x08022bbc
 8018f88:	08022bec 	.word	0x08022bec
 8018f8c:	08022c20 	.word	0x08022c20
 8018f90:	08024404 	.word	0x08024404
 8018f94:	080243f4 	.word	0x080243f4
 8018f98:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8018fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8018fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018faa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018fb4:	4293      	cmp	r3, r2
 8018fb6:	bf28      	it	cs
 8018fb8:	4613      	movcs	r3, r2
 8018fba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8018fbc:	8a7b      	ldrh	r3, [r7, #18]
 8018fbe:	085b      	lsrs	r3, r3, #1
 8018fc0:	b29a      	uxth	r2, r3
 8018fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8018fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018fd2:	005b      	lsls	r3, r3, #1
 8018fd4:	b29b      	uxth	r3, r3
 8018fd6:	429a      	cmp	r2, r3
 8018fd8:	d206      	bcs.n	8018fe8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8018fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018fde:	005b      	lsls	r3, r3, #1
 8018fe0:	b29a      	uxth	r2, r3
 8018fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fe4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8018fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8018fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8018ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8018ffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018ffc:	f004 fd44 	bl	801da88 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8019000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019002:	7d1b      	ldrb	r3, [r3, #20]
 8019004:	2b06      	cmp	r3, #6
 8019006:	d111      	bne.n	801902c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8019008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801900a:	8b5b      	ldrh	r3, [r3, #26]
 801900c:	f003 0310 	and.w	r3, r3, #16
 8019010:	2b00      	cmp	r3, #0
 8019012:	d00b      	beq.n	801902c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019014:	4b9c      	ldr	r3, [pc, #624]	; (8019288 <tcp_slowtmr+0x580>)
 8019016:	681a      	ldr	r2, [r3, #0]
 8019018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801901a:	6a1b      	ldr	r3, [r3, #32]
 801901c:	1ad3      	subs	r3, r2, r3
 801901e:	2b28      	cmp	r3, #40	; 0x28
 8019020:	d904      	bls.n	801902c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8019022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019026:	3301      	adds	r3, #1
 8019028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801902e:	7a5b      	ldrb	r3, [r3, #9]
 8019030:	f003 0308 	and.w	r3, r3, #8
 8019034:	2b00      	cmp	r3, #0
 8019036:	d04a      	beq.n	80190ce <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8019038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801903a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801903c:	2b04      	cmp	r3, #4
 801903e:	d003      	beq.n	8019048 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8019040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019042:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8019044:	2b07      	cmp	r3, #7
 8019046:	d142      	bne.n	80190ce <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019048:	4b8f      	ldr	r3, [pc, #572]	; (8019288 <tcp_slowtmr+0x580>)
 801904a:	681a      	ldr	r2, [r3, #0]
 801904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801904e:	6a1b      	ldr	r3, [r3, #32]
 8019050:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019054:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8019058:	4b8c      	ldr	r3, [pc, #560]	; (801928c <tcp_slowtmr+0x584>)
 801905a:	440b      	add	r3, r1
 801905c:	498c      	ldr	r1, [pc, #560]	; (8019290 <tcp_slowtmr+0x588>)
 801905e:	fba1 1303 	umull	r1, r3, r1, r3
 8019062:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019064:	429a      	cmp	r2, r3
 8019066:	d90a      	bls.n	801907e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8019068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801906c:	3301      	adds	r3, #1
 801906e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8019072:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019076:	3301      	adds	r3, #1
 8019078:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801907c:	e027      	b.n	80190ce <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801907e:	4b82      	ldr	r3, [pc, #520]	; (8019288 <tcp_slowtmr+0x580>)
 8019080:	681a      	ldr	r2, [r3, #0]
 8019082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019084:	6a1b      	ldr	r3, [r3, #32]
 8019086:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8019088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801908a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019090:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8019094:	4618      	mov	r0, r3
 8019096:	4b7f      	ldr	r3, [pc, #508]	; (8019294 <tcp_slowtmr+0x58c>)
 8019098:	fb00 f303 	mul.w	r3, r0, r3
 801909c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801909e:	497c      	ldr	r1, [pc, #496]	; (8019290 <tcp_slowtmr+0x588>)
 80190a0:	fba1 1303 	umull	r1, r3, r1, r3
 80190a4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80190a6:	429a      	cmp	r2, r3
 80190a8:	d911      	bls.n	80190ce <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80190aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80190ac:	f004 fff2 	bl	801e094 <tcp_keepalive>
 80190b0:	4603      	mov	r3, r0
 80190b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80190b6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d107      	bne.n	80190ce <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80190be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80190c4:	3301      	adds	r3, #1
 80190c6:	b2da      	uxtb	r2, r3
 80190c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ca:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80190ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d011      	beq.n	80190fa <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80190d6:	4b6c      	ldr	r3, [pc, #432]	; (8019288 <tcp_slowtmr+0x580>)
 80190d8:	681a      	ldr	r2, [r3, #0]
 80190da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190dc:	6a1b      	ldr	r3, [r3, #32]
 80190de:	1ad2      	subs	r2, r2, r3
 80190e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190e2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80190e6:	4619      	mov	r1, r3
 80190e8:	460b      	mov	r3, r1
 80190ea:	005b      	lsls	r3, r3, #1
 80190ec:	440b      	add	r3, r1
 80190ee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80190f0:	429a      	cmp	r2, r3
 80190f2:	d302      	bcc.n	80190fa <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80190f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80190f6:	f000 fead 	bl	8019e54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80190fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190fc:	7d1b      	ldrb	r3, [r3, #20]
 80190fe:	2b03      	cmp	r3, #3
 8019100:	d10b      	bne.n	801911a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019102:	4b61      	ldr	r3, [pc, #388]	; (8019288 <tcp_slowtmr+0x580>)
 8019104:	681a      	ldr	r2, [r3, #0]
 8019106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019108:	6a1b      	ldr	r3, [r3, #32]
 801910a:	1ad3      	subs	r3, r2, r3
 801910c:	2b28      	cmp	r3, #40	; 0x28
 801910e:	d904      	bls.n	801911a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8019110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019114:	3301      	adds	r3, #1
 8019116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801911a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801911c:	7d1b      	ldrb	r3, [r3, #20]
 801911e:	2b09      	cmp	r3, #9
 8019120:	d10b      	bne.n	801913a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019122:	4b59      	ldr	r3, [pc, #356]	; (8019288 <tcp_slowtmr+0x580>)
 8019124:	681a      	ldr	r2, [r3, #0]
 8019126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019128:	6a1b      	ldr	r3, [r3, #32]
 801912a:	1ad3      	subs	r3, r2, r3
 801912c:	2bf0      	cmp	r3, #240	; 0xf0
 801912e:	d904      	bls.n	801913a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8019130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019134:	3301      	adds	r3, #1
 8019136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801913a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801913e:	2b00      	cmp	r3, #0
 8019140:	d060      	beq.n	8019204 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8019142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019148:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801914a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801914c:	f000 fcce 	bl	8019aec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8019150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019152:	2b00      	cmp	r3, #0
 8019154:	d010      	beq.n	8019178 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019156:	4b50      	ldr	r3, [pc, #320]	; (8019298 <tcp_slowtmr+0x590>)
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801915c:	429a      	cmp	r2, r3
 801915e:	d106      	bne.n	801916e <tcp_slowtmr+0x466>
 8019160:	4b4e      	ldr	r3, [pc, #312]	; (801929c <tcp_slowtmr+0x594>)
 8019162:	f240 526d 	movw	r2, #1389	; 0x56d
 8019166:	494e      	ldr	r1, [pc, #312]	; (80192a0 <tcp_slowtmr+0x598>)
 8019168:	484e      	ldr	r0, [pc, #312]	; (80192a4 <tcp_slowtmr+0x59c>)
 801916a:	f006 fc47 	bl	801f9fc <iprintf>
        prev->next = pcb->next;
 801916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019170:	68da      	ldr	r2, [r3, #12]
 8019172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019174:	60da      	str	r2, [r3, #12]
 8019176:	e00f      	b.n	8019198 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8019178:	4b47      	ldr	r3, [pc, #284]	; (8019298 <tcp_slowtmr+0x590>)
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801917e:	429a      	cmp	r2, r3
 8019180:	d006      	beq.n	8019190 <tcp_slowtmr+0x488>
 8019182:	4b46      	ldr	r3, [pc, #280]	; (801929c <tcp_slowtmr+0x594>)
 8019184:	f240 5271 	movw	r2, #1393	; 0x571
 8019188:	4947      	ldr	r1, [pc, #284]	; (80192a8 <tcp_slowtmr+0x5a0>)
 801918a:	4846      	ldr	r0, [pc, #280]	; (80192a4 <tcp_slowtmr+0x59c>)
 801918c:	f006 fc36 	bl	801f9fc <iprintf>
        tcp_active_pcbs = pcb->next;
 8019190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019192:	68db      	ldr	r3, [r3, #12]
 8019194:	4a40      	ldr	r2, [pc, #256]	; (8019298 <tcp_slowtmr+0x590>)
 8019196:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8019198:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801919c:	2b00      	cmp	r3, #0
 801919e:	d013      	beq.n	80191c8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80191a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191a2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80191a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80191a8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80191aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ac:	3304      	adds	r3, #4
 80191ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80191b0:	8ad2      	ldrh	r2, [r2, #22]
 80191b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80191b4:	8b09      	ldrh	r1, [r1, #24]
 80191b6:	9102      	str	r1, [sp, #8]
 80191b8:	9201      	str	r2, [sp, #4]
 80191ba:	9300      	str	r3, [sp, #0]
 80191bc:	462b      	mov	r3, r5
 80191be:	4622      	mov	r2, r4
 80191c0:	4601      	mov	r1, r0
 80191c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80191c4:	f004 feb2 	bl	801df2c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80191c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ca:	691b      	ldr	r3, [r3, #16]
 80191cc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80191ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d0:	7d1b      	ldrb	r3, [r3, #20]
 80191d2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80191d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80191d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191da:	68db      	ldr	r3, [r3, #12]
 80191dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80191de:	6838      	ldr	r0, [r7, #0]
 80191e0:	f7fe ffee 	bl	80181c0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80191e4:	4b31      	ldr	r3, [pc, #196]	; (80192ac <tcp_slowtmr+0x5a4>)
 80191e6:	2200      	movs	r2, #0
 80191e8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d004      	beq.n	80191fa <tcp_slowtmr+0x4f2>
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	f06f 010c 	mvn.w	r1, #12
 80191f6:	68b8      	ldr	r0, [r7, #8]
 80191f8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80191fa:	4b2c      	ldr	r3, [pc, #176]	; (80192ac <tcp_slowtmr+0x5a4>)
 80191fc:	781b      	ldrb	r3, [r3, #0]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d037      	beq.n	8019272 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8019202:	e592      	b.n	8018d2a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8019204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019206:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801920a:	68db      	ldr	r3, [r3, #12]
 801920c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019210:	7f1b      	ldrb	r3, [r3, #28]
 8019212:	3301      	adds	r3, #1
 8019214:	b2da      	uxtb	r2, r3
 8019216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019218:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801921c:	7f1a      	ldrb	r2, [r3, #28]
 801921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019220:	7f5b      	ldrb	r3, [r3, #29]
 8019222:	429a      	cmp	r2, r3
 8019224:	d325      	bcc.n	8019272 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8019226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019228:	2200      	movs	r2, #0
 801922a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801922c:	4b1f      	ldr	r3, [pc, #124]	; (80192ac <tcp_slowtmr+0x5a4>)
 801922e:	2200      	movs	r2, #0
 8019230:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8019232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019238:	2b00      	cmp	r3, #0
 801923a:	d00b      	beq.n	8019254 <tcp_slowtmr+0x54c>
 801923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801923e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019244:	6912      	ldr	r2, [r2, #16]
 8019246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019248:	4610      	mov	r0, r2
 801924a:	4798      	blx	r3
 801924c:	4603      	mov	r3, r0
 801924e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8019252:	e002      	b.n	801925a <tcp_slowtmr+0x552>
 8019254:	2300      	movs	r3, #0
 8019256:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801925a:	4b14      	ldr	r3, [pc, #80]	; (80192ac <tcp_slowtmr+0x5a4>)
 801925c:	781b      	ldrb	r3, [r3, #0]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d000      	beq.n	8019264 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8019262:	e562      	b.n	8018d2a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8019264:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019268:	2b00      	cmp	r3, #0
 801926a:	d102      	bne.n	8019272 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801926c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801926e:	f004 f8a9 	bl	801d3c4 <tcp_output>
  while (pcb != NULL) {
 8019272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019274:	2b00      	cmp	r3, #0
 8019276:	f47f ad5e 	bne.w	8018d36 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801927a:	2300      	movs	r3, #0
 801927c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801927e:	4b0c      	ldr	r3, [pc, #48]	; (80192b0 <tcp_slowtmr+0x5a8>)
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8019284:	e069      	b.n	801935a <tcp_slowtmr+0x652>
 8019286:	bf00      	nop
 8019288:	2400f920 	.word	0x2400f920
 801928c:	000a4cb8 	.word	0x000a4cb8
 8019290:	10624dd3 	.word	0x10624dd3
 8019294:	000124f8 	.word	0x000124f8
 8019298:	2400f92c 	.word	0x2400f92c
 801929c:	080227dc 	.word	0x080227dc
 80192a0:	08022c58 	.word	0x08022c58
 80192a4:	08022864 	.word	0x08022864
 80192a8:	08022c84 	.word	0x08022c84
 80192ac:	2400f934 	.word	0x2400f934
 80192b0:	2400f930 	.word	0x2400f930
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80192b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192b6:	7d1b      	ldrb	r3, [r3, #20]
 80192b8:	2b0a      	cmp	r3, #10
 80192ba:	d006      	beq.n	80192ca <tcp_slowtmr+0x5c2>
 80192bc:	4b2b      	ldr	r3, [pc, #172]	; (801936c <tcp_slowtmr+0x664>)
 80192be:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80192c2:	492b      	ldr	r1, [pc, #172]	; (8019370 <tcp_slowtmr+0x668>)
 80192c4:	482b      	ldr	r0, [pc, #172]	; (8019374 <tcp_slowtmr+0x66c>)
 80192c6:	f006 fb99 	bl	801f9fc <iprintf>
    pcb_remove = 0;
 80192ca:	2300      	movs	r3, #0
 80192cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80192d0:	4b29      	ldr	r3, [pc, #164]	; (8019378 <tcp_slowtmr+0x670>)
 80192d2:	681a      	ldr	r2, [r3, #0]
 80192d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192d6:	6a1b      	ldr	r3, [r3, #32]
 80192d8:	1ad3      	subs	r3, r2, r3
 80192da:	2bf0      	cmp	r3, #240	; 0xf0
 80192dc:	d904      	bls.n	80192e8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80192de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192e2:	3301      	adds	r3, #1
 80192e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80192e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d02f      	beq.n	8019350 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80192f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80192f2:	f000 fbfb 	bl	8019aec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80192f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d010      	beq.n	801931e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80192fc:	4b1f      	ldr	r3, [pc, #124]	; (801937c <tcp_slowtmr+0x674>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019302:	429a      	cmp	r2, r3
 8019304:	d106      	bne.n	8019314 <tcp_slowtmr+0x60c>
 8019306:	4b19      	ldr	r3, [pc, #100]	; (801936c <tcp_slowtmr+0x664>)
 8019308:	f240 52af 	movw	r2, #1455	; 0x5af
 801930c:	491c      	ldr	r1, [pc, #112]	; (8019380 <tcp_slowtmr+0x678>)
 801930e:	4819      	ldr	r0, [pc, #100]	; (8019374 <tcp_slowtmr+0x66c>)
 8019310:	f006 fb74 	bl	801f9fc <iprintf>
        prev->next = pcb->next;
 8019314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019316:	68da      	ldr	r2, [r3, #12]
 8019318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801931a:	60da      	str	r2, [r3, #12]
 801931c:	e00f      	b.n	801933e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801931e:	4b17      	ldr	r3, [pc, #92]	; (801937c <tcp_slowtmr+0x674>)
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019324:	429a      	cmp	r2, r3
 8019326:	d006      	beq.n	8019336 <tcp_slowtmr+0x62e>
 8019328:	4b10      	ldr	r3, [pc, #64]	; (801936c <tcp_slowtmr+0x664>)
 801932a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801932e:	4915      	ldr	r1, [pc, #84]	; (8019384 <tcp_slowtmr+0x67c>)
 8019330:	4810      	ldr	r0, [pc, #64]	; (8019374 <tcp_slowtmr+0x66c>)
 8019332:	f006 fb63 	bl	801f9fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8019336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019338:	68db      	ldr	r3, [r3, #12]
 801933a:	4a10      	ldr	r2, [pc, #64]	; (801937c <tcp_slowtmr+0x674>)
 801933c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801933e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019340:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8019342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019344:	68db      	ldr	r3, [r3, #12]
 8019346:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8019348:	69f8      	ldr	r0, [r7, #28]
 801934a:	f7fe ff39 	bl	80181c0 <tcp_free>
 801934e:	e004      	b.n	801935a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8019350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019352:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019356:	68db      	ldr	r3, [r3, #12]
 8019358:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801935a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801935c:	2b00      	cmp	r3, #0
 801935e:	d1a9      	bne.n	80192b4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8019360:	bf00      	nop
 8019362:	bf00      	nop
 8019364:	3730      	adds	r7, #48	; 0x30
 8019366:	46bd      	mov	sp, r7
 8019368:	bdb0      	pop	{r4, r5, r7, pc}
 801936a:	bf00      	nop
 801936c:	080227dc 	.word	0x080227dc
 8019370:	08022cb0 	.word	0x08022cb0
 8019374:	08022864 	.word	0x08022864
 8019378:	2400f920 	.word	0x2400f920
 801937c:	2400f930 	.word	0x2400f930
 8019380:	08022ce0 	.word	0x08022ce0
 8019384:	08022d08 	.word	0x08022d08

08019388 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b082      	sub	sp, #8
 801938c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801938e:	4b2d      	ldr	r3, [pc, #180]	; (8019444 <tcp_fasttmr+0xbc>)
 8019390:	781b      	ldrb	r3, [r3, #0]
 8019392:	3301      	adds	r3, #1
 8019394:	b2da      	uxtb	r2, r3
 8019396:	4b2b      	ldr	r3, [pc, #172]	; (8019444 <tcp_fasttmr+0xbc>)
 8019398:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801939a:	4b2b      	ldr	r3, [pc, #172]	; (8019448 <tcp_fasttmr+0xc0>)
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80193a0:	e048      	b.n	8019434 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	7f9a      	ldrb	r2, [r3, #30]
 80193a6:	4b27      	ldr	r3, [pc, #156]	; (8019444 <tcp_fasttmr+0xbc>)
 80193a8:	781b      	ldrb	r3, [r3, #0]
 80193aa:	429a      	cmp	r2, r3
 80193ac:	d03f      	beq.n	801942e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80193ae:	4b25      	ldr	r3, [pc, #148]	; (8019444 <tcp_fasttmr+0xbc>)
 80193b0:	781a      	ldrb	r2, [r3, #0]
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	8b5b      	ldrh	r3, [r3, #26]
 80193ba:	f003 0301 	and.w	r3, r3, #1
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d010      	beq.n	80193e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	8b5b      	ldrh	r3, [r3, #26]
 80193c6:	f043 0302 	orr.w	r3, r3, #2
 80193ca:	b29a      	uxth	r2, r3
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80193d0:	6878      	ldr	r0, [r7, #4]
 80193d2:	f003 fff7 	bl	801d3c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	8b5b      	ldrh	r3, [r3, #26]
 80193da:	f023 0303 	bic.w	r3, r3, #3
 80193de:	b29a      	uxth	r2, r3
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	8b5b      	ldrh	r3, [r3, #26]
 80193e8:	f003 0308 	and.w	r3, r3, #8
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d009      	beq.n	8019404 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	8b5b      	ldrh	r3, [r3, #26]
 80193f4:	f023 0308 	bic.w	r3, r3, #8
 80193f8:	b29a      	uxth	r2, r3
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80193fe:	6878      	ldr	r0, [r7, #4]
 8019400:	f7ff f872 	bl	80184e8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	68db      	ldr	r3, [r3, #12]
 8019408:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801940e:	2b00      	cmp	r3, #0
 8019410:	d00a      	beq.n	8019428 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8019412:	4b0e      	ldr	r3, [pc, #56]	; (801944c <tcp_fasttmr+0xc4>)
 8019414:	2200      	movs	r2, #0
 8019416:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8019418:	6878      	ldr	r0, [r7, #4]
 801941a:	f000 f819 	bl	8019450 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801941e:	4b0b      	ldr	r3, [pc, #44]	; (801944c <tcp_fasttmr+0xc4>)
 8019420:	781b      	ldrb	r3, [r3, #0]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d000      	beq.n	8019428 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8019426:	e7b8      	b.n	801939a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8019428:	683b      	ldr	r3, [r7, #0]
 801942a:	607b      	str	r3, [r7, #4]
 801942c:	e002      	b.n	8019434 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	68db      	ldr	r3, [r3, #12]
 8019432:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d1b3      	bne.n	80193a2 <tcp_fasttmr+0x1a>
    }
  }
}
 801943a:	bf00      	nop
 801943c:	bf00      	nop
 801943e:	3708      	adds	r7, #8
 8019440:	46bd      	mov	sp, r7
 8019442:	bd80      	pop	{r7, pc}
 8019444:	2400f936 	.word	0x2400f936
 8019448:	2400f92c 	.word	0x2400f92c
 801944c:	2400f934 	.word	0x2400f934

08019450 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8019450:	b590      	push	{r4, r7, lr}
 8019452:	b085      	sub	sp, #20
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d109      	bne.n	8019472 <tcp_process_refused_data+0x22>
 801945e:	4b38      	ldr	r3, [pc, #224]	; (8019540 <tcp_process_refused_data+0xf0>)
 8019460:	f240 6209 	movw	r2, #1545	; 0x609
 8019464:	4937      	ldr	r1, [pc, #220]	; (8019544 <tcp_process_refused_data+0xf4>)
 8019466:	4838      	ldr	r0, [pc, #224]	; (8019548 <tcp_process_refused_data+0xf8>)
 8019468:	f006 fac8 	bl	801f9fc <iprintf>
 801946c:	f06f 030f 	mvn.w	r3, #15
 8019470:	e061      	b.n	8019536 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019476:	7b5b      	ldrb	r3, [r3, #13]
 8019478:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801947e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	2200      	movs	r2, #0
 8019484:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801948c:	2b00      	cmp	r3, #0
 801948e:	d00b      	beq.n	80194a8 <tcp_process_refused_data+0x58>
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	6918      	ldr	r0, [r3, #16]
 801949a:	2300      	movs	r3, #0
 801949c:	68ba      	ldr	r2, [r7, #8]
 801949e:	6879      	ldr	r1, [r7, #4]
 80194a0:	47a0      	blx	r4
 80194a2:	4603      	mov	r3, r0
 80194a4:	73fb      	strb	r3, [r7, #15]
 80194a6:	e007      	b.n	80194b8 <tcp_process_refused_data+0x68>
 80194a8:	2300      	movs	r3, #0
 80194aa:	68ba      	ldr	r2, [r7, #8]
 80194ac:	6879      	ldr	r1, [r7, #4]
 80194ae:	2000      	movs	r0, #0
 80194b0:	f000 f8a6 	bl	8019600 <tcp_recv_null>
 80194b4:	4603      	mov	r3, r0
 80194b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80194b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d12b      	bne.n	8019518 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80194c0:	7bbb      	ldrb	r3, [r7, #14]
 80194c2:	f003 0320 	and.w	r3, r3, #32
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d034      	beq.n	8019534 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80194ce:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80194d2:	4293      	cmp	r3, r2
 80194d4:	d005      	beq.n	80194e2 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80194da:	3301      	adds	r3, #1
 80194dc:	b29a      	uxth	r2, r3
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d00b      	beq.n	8019504 <tcp_process_refused_data+0xb4>
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	6918      	ldr	r0, [r3, #16]
 80194f6:	2300      	movs	r3, #0
 80194f8:	2200      	movs	r2, #0
 80194fa:	6879      	ldr	r1, [r7, #4]
 80194fc:	47a0      	blx	r4
 80194fe:	4603      	mov	r3, r0
 8019500:	73fb      	strb	r3, [r7, #15]
 8019502:	e001      	b.n	8019508 <tcp_process_refused_data+0xb8>
 8019504:	2300      	movs	r3, #0
 8019506:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8019508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801950c:	f113 0f0d 	cmn.w	r3, #13
 8019510:	d110      	bne.n	8019534 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8019512:	f06f 030c 	mvn.w	r3, #12
 8019516:	e00e      	b.n	8019536 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8019518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801951c:	f113 0f0d 	cmn.w	r3, #13
 8019520:	d102      	bne.n	8019528 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8019522:	f06f 030c 	mvn.w	r3, #12
 8019526:	e006      	b.n	8019536 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	68ba      	ldr	r2, [r7, #8]
 801952c:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801952e:	f06f 0304 	mvn.w	r3, #4
 8019532:	e000      	b.n	8019536 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8019534:	2300      	movs	r3, #0
}
 8019536:	4618      	mov	r0, r3
 8019538:	3714      	adds	r7, #20
 801953a:	46bd      	mov	sp, r7
 801953c:	bd90      	pop	{r4, r7, pc}
 801953e:	bf00      	nop
 8019540:	080227dc 	.word	0x080227dc
 8019544:	08022d30 	.word	0x08022d30
 8019548:	08022864 	.word	0x08022864

0801954c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801954c:	b580      	push	{r7, lr}
 801954e:	b084      	sub	sp, #16
 8019550:	af00      	add	r7, sp, #0
 8019552:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8019554:	e007      	b.n	8019566 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801955c:	6878      	ldr	r0, [r7, #4]
 801955e:	f000 f80a 	bl	8019576 <tcp_seg_free>
    seg = next;
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	2b00      	cmp	r3, #0
 801956a:	d1f4      	bne.n	8019556 <tcp_segs_free+0xa>
  }
}
 801956c:	bf00      	nop
 801956e:	bf00      	nop
 8019570:	3710      	adds	r7, #16
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}

08019576 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8019576:	b580      	push	{r7, lr}
 8019578:	b082      	sub	sp, #8
 801957a:	af00      	add	r7, sp, #0
 801957c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d00c      	beq.n	801959e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	685b      	ldr	r3, [r3, #4]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d004      	beq.n	8019596 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	685b      	ldr	r3, [r3, #4]
 8019590:	4618      	mov	r0, r3
 8019592:	f7fe f987 	bl	80178a4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8019596:	6879      	ldr	r1, [r7, #4]
 8019598:	2003      	movs	r0, #3
 801959a:	f7fd fa8f 	bl	8016abc <memp_free>
  }
}
 801959e:	bf00      	nop
 80195a0:	3708      	adds	r7, #8
 80195a2:	46bd      	mov	sp, r7
 80195a4:	bd80      	pop	{r7, pc}
	...

080195a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b084      	sub	sp, #16
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d106      	bne.n	80195c4 <tcp_seg_copy+0x1c>
 80195b6:	4b0f      	ldr	r3, [pc, #60]	; (80195f4 <tcp_seg_copy+0x4c>)
 80195b8:	f240 6282 	movw	r2, #1666	; 0x682
 80195bc:	490e      	ldr	r1, [pc, #56]	; (80195f8 <tcp_seg_copy+0x50>)
 80195be:	480f      	ldr	r0, [pc, #60]	; (80195fc <tcp_seg_copy+0x54>)
 80195c0:	f006 fa1c 	bl	801f9fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80195c4:	2003      	movs	r0, #3
 80195c6:	f7fd fa03 	bl	80169d0 <memp_malloc>
 80195ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d101      	bne.n	80195d6 <tcp_seg_copy+0x2e>
    return NULL;
 80195d2:	2300      	movs	r3, #0
 80195d4:	e00a      	b.n	80195ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80195d6:	2210      	movs	r2, #16
 80195d8:	6879      	ldr	r1, [r7, #4]
 80195da:	68f8      	ldr	r0, [r7, #12]
 80195dc:	f005 fe10 	bl	801f200 <memcpy>
  pbuf_ref(cseg->p);
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	685b      	ldr	r3, [r3, #4]
 80195e4:	4618      	mov	r0, r3
 80195e6:	f7fe fa03 	bl	80179f0 <pbuf_ref>
  return cseg;
 80195ea:	68fb      	ldr	r3, [r7, #12]
}
 80195ec:	4618      	mov	r0, r3
 80195ee:	3710      	adds	r7, #16
 80195f0:	46bd      	mov	sp, r7
 80195f2:	bd80      	pop	{r7, pc}
 80195f4:	080227dc 	.word	0x080227dc
 80195f8:	08022d74 	.word	0x08022d74
 80195fc:	08022864 	.word	0x08022864

08019600 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b084      	sub	sp, #16
 8019604:	af00      	add	r7, sp, #0
 8019606:	60f8      	str	r0, [r7, #12]
 8019608:	60b9      	str	r1, [r7, #8]
 801960a:	607a      	str	r2, [r7, #4]
 801960c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801960e:	68bb      	ldr	r3, [r7, #8]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d109      	bne.n	8019628 <tcp_recv_null+0x28>
 8019614:	4b12      	ldr	r3, [pc, #72]	; (8019660 <tcp_recv_null+0x60>)
 8019616:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801961a:	4912      	ldr	r1, [pc, #72]	; (8019664 <tcp_recv_null+0x64>)
 801961c:	4812      	ldr	r0, [pc, #72]	; (8019668 <tcp_recv_null+0x68>)
 801961e:	f006 f9ed 	bl	801f9fc <iprintf>
 8019622:	f06f 030f 	mvn.w	r3, #15
 8019626:	e016      	b.n	8019656 <tcp_recv_null+0x56>

  if (p != NULL) {
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d009      	beq.n	8019642 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	891b      	ldrh	r3, [r3, #8]
 8019632:	4619      	mov	r1, r3
 8019634:	68b8      	ldr	r0, [r7, #8]
 8019636:	f7ff facf 	bl	8018bd8 <tcp_recved>
    pbuf_free(p);
 801963a:	6878      	ldr	r0, [r7, #4]
 801963c:	f7fe f932 	bl	80178a4 <pbuf_free>
 8019640:	e008      	b.n	8019654 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8019642:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019646:	2b00      	cmp	r3, #0
 8019648:	d104      	bne.n	8019654 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801964a:	68b8      	ldr	r0, [r7, #8]
 801964c:	f7fe ffb6 	bl	80185bc <tcp_close>
 8019650:	4603      	mov	r3, r0
 8019652:	e000      	b.n	8019656 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8019654:	2300      	movs	r3, #0
}
 8019656:	4618      	mov	r0, r3
 8019658:	3710      	adds	r7, #16
 801965a:	46bd      	mov	sp, r7
 801965c:	bd80      	pop	{r7, pc}
 801965e:	bf00      	nop
 8019660:	080227dc 	.word	0x080227dc
 8019664:	08022d90 	.word	0x08022d90
 8019668:	08022864 	.word	0x08022864

0801966c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b086      	sub	sp, #24
 8019670:	af00      	add	r7, sp, #0
 8019672:	4603      	mov	r3, r0
 8019674:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8019676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801967a:	2b00      	cmp	r3, #0
 801967c:	db01      	blt.n	8019682 <tcp_kill_prio+0x16>
 801967e:	79fb      	ldrb	r3, [r7, #7]
 8019680:	e000      	b.n	8019684 <tcp_kill_prio+0x18>
 8019682:	237f      	movs	r3, #127	; 0x7f
 8019684:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8019686:	7afb      	ldrb	r3, [r7, #11]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d034      	beq.n	80196f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801968c:	7afb      	ldrb	r3, [r7, #11]
 801968e:	3b01      	subs	r3, #1
 8019690:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8019692:	2300      	movs	r3, #0
 8019694:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8019696:	2300      	movs	r3, #0
 8019698:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801969a:	4b19      	ldr	r3, [pc, #100]	; (8019700 <tcp_kill_prio+0x94>)
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	617b      	str	r3, [r7, #20]
 80196a0:	e01f      	b.n	80196e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80196a2:	697b      	ldr	r3, [r7, #20]
 80196a4:	7d5b      	ldrb	r3, [r3, #21]
 80196a6:	7afa      	ldrb	r2, [r7, #11]
 80196a8:	429a      	cmp	r2, r3
 80196aa:	d80c      	bhi.n	80196c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80196ac:	697b      	ldr	r3, [r7, #20]
 80196ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80196b0:	7afa      	ldrb	r2, [r7, #11]
 80196b2:	429a      	cmp	r2, r3
 80196b4:	d112      	bne.n	80196dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80196b6:	4b13      	ldr	r3, [pc, #76]	; (8019704 <tcp_kill_prio+0x98>)
 80196b8:	681a      	ldr	r2, [r3, #0]
 80196ba:	697b      	ldr	r3, [r7, #20]
 80196bc:	6a1b      	ldr	r3, [r3, #32]
 80196be:	1ad3      	subs	r3, r2, r3
 80196c0:	68fa      	ldr	r2, [r7, #12]
 80196c2:	429a      	cmp	r2, r3
 80196c4:	d80a      	bhi.n	80196dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80196c6:	4b0f      	ldr	r3, [pc, #60]	; (8019704 <tcp_kill_prio+0x98>)
 80196c8:	681a      	ldr	r2, [r3, #0]
 80196ca:	697b      	ldr	r3, [r7, #20]
 80196cc:	6a1b      	ldr	r3, [r3, #32]
 80196ce:	1ad3      	subs	r3, r2, r3
 80196d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80196d2:	697b      	ldr	r3, [r7, #20]
 80196d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80196d6:	697b      	ldr	r3, [r7, #20]
 80196d8:	7d5b      	ldrb	r3, [r3, #21]
 80196da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80196dc:	697b      	ldr	r3, [r7, #20]
 80196de:	68db      	ldr	r3, [r3, #12]
 80196e0:	617b      	str	r3, [r7, #20]
 80196e2:	697b      	ldr	r3, [r7, #20]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d1dc      	bne.n	80196a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80196e8:	693b      	ldr	r3, [r7, #16]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d004      	beq.n	80196f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80196ee:	6938      	ldr	r0, [r7, #16]
 80196f0:	f7ff f8aa 	bl	8018848 <tcp_abort>
 80196f4:	e000      	b.n	80196f8 <tcp_kill_prio+0x8c>
    return;
 80196f6:	bf00      	nop
  }
}
 80196f8:	3718      	adds	r7, #24
 80196fa:	46bd      	mov	sp, r7
 80196fc:	bd80      	pop	{r7, pc}
 80196fe:	bf00      	nop
 8019700:	2400f92c 	.word	0x2400f92c
 8019704:	2400f920 	.word	0x2400f920

08019708 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8019708:	b580      	push	{r7, lr}
 801970a:	b086      	sub	sp, #24
 801970c:	af00      	add	r7, sp, #0
 801970e:	4603      	mov	r3, r0
 8019710:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8019712:	79fb      	ldrb	r3, [r7, #7]
 8019714:	2b08      	cmp	r3, #8
 8019716:	d009      	beq.n	801972c <tcp_kill_state+0x24>
 8019718:	79fb      	ldrb	r3, [r7, #7]
 801971a:	2b09      	cmp	r3, #9
 801971c:	d006      	beq.n	801972c <tcp_kill_state+0x24>
 801971e:	4b1a      	ldr	r3, [pc, #104]	; (8019788 <tcp_kill_state+0x80>)
 8019720:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8019724:	4919      	ldr	r1, [pc, #100]	; (801978c <tcp_kill_state+0x84>)
 8019726:	481a      	ldr	r0, [pc, #104]	; (8019790 <tcp_kill_state+0x88>)
 8019728:	f006 f968 	bl	801f9fc <iprintf>

  inactivity = 0;
 801972c:	2300      	movs	r3, #0
 801972e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8019730:	2300      	movs	r3, #0
 8019732:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019734:	4b17      	ldr	r3, [pc, #92]	; (8019794 <tcp_kill_state+0x8c>)
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	617b      	str	r3, [r7, #20]
 801973a:	e017      	b.n	801976c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801973c:	697b      	ldr	r3, [r7, #20]
 801973e:	7d1b      	ldrb	r3, [r3, #20]
 8019740:	79fa      	ldrb	r2, [r7, #7]
 8019742:	429a      	cmp	r2, r3
 8019744:	d10f      	bne.n	8019766 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019746:	4b14      	ldr	r3, [pc, #80]	; (8019798 <tcp_kill_state+0x90>)
 8019748:	681a      	ldr	r2, [r3, #0]
 801974a:	697b      	ldr	r3, [r7, #20]
 801974c:	6a1b      	ldr	r3, [r3, #32]
 801974e:	1ad3      	subs	r3, r2, r3
 8019750:	68fa      	ldr	r2, [r7, #12]
 8019752:	429a      	cmp	r2, r3
 8019754:	d807      	bhi.n	8019766 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8019756:	4b10      	ldr	r3, [pc, #64]	; (8019798 <tcp_kill_state+0x90>)
 8019758:	681a      	ldr	r2, [r3, #0]
 801975a:	697b      	ldr	r3, [r7, #20]
 801975c:	6a1b      	ldr	r3, [r3, #32]
 801975e:	1ad3      	subs	r3, r2, r3
 8019760:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8019762:	697b      	ldr	r3, [r7, #20]
 8019764:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019766:	697b      	ldr	r3, [r7, #20]
 8019768:	68db      	ldr	r3, [r3, #12]
 801976a:	617b      	str	r3, [r7, #20]
 801976c:	697b      	ldr	r3, [r7, #20]
 801976e:	2b00      	cmp	r3, #0
 8019770:	d1e4      	bne.n	801973c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8019772:	693b      	ldr	r3, [r7, #16]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d003      	beq.n	8019780 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8019778:	2100      	movs	r1, #0
 801977a:	6938      	ldr	r0, [r7, #16]
 801977c:	f7fe ffa6 	bl	80186cc <tcp_abandon>
  }
}
 8019780:	bf00      	nop
 8019782:	3718      	adds	r7, #24
 8019784:	46bd      	mov	sp, r7
 8019786:	bd80      	pop	{r7, pc}
 8019788:	080227dc 	.word	0x080227dc
 801978c:	08022dac 	.word	0x08022dac
 8019790:	08022864 	.word	0x08022864
 8019794:	2400f92c 	.word	0x2400f92c
 8019798:	2400f920 	.word	0x2400f920

0801979c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b084      	sub	sp, #16
 80197a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80197a2:	2300      	movs	r3, #0
 80197a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80197a6:	2300      	movs	r3, #0
 80197a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80197aa:	4b12      	ldr	r3, [pc, #72]	; (80197f4 <tcp_kill_timewait+0x58>)
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	60fb      	str	r3, [r7, #12]
 80197b0:	e012      	b.n	80197d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80197b2:	4b11      	ldr	r3, [pc, #68]	; (80197f8 <tcp_kill_timewait+0x5c>)
 80197b4:	681a      	ldr	r2, [r3, #0]
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	6a1b      	ldr	r3, [r3, #32]
 80197ba:	1ad3      	subs	r3, r2, r3
 80197bc:	687a      	ldr	r2, [r7, #4]
 80197be:	429a      	cmp	r2, r3
 80197c0:	d807      	bhi.n	80197d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80197c2:	4b0d      	ldr	r3, [pc, #52]	; (80197f8 <tcp_kill_timewait+0x5c>)
 80197c4:	681a      	ldr	r2, [r3, #0]
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	6a1b      	ldr	r3, [r3, #32]
 80197ca:	1ad3      	subs	r3, r2, r3
 80197cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	68db      	ldr	r3, [r3, #12]
 80197d6:	60fb      	str	r3, [r7, #12]
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d1e9      	bne.n	80197b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80197de:	68bb      	ldr	r3, [r7, #8]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d002      	beq.n	80197ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80197e4:	68b8      	ldr	r0, [r7, #8]
 80197e6:	f7ff f82f 	bl	8018848 <tcp_abort>
  }
}
 80197ea:	bf00      	nop
 80197ec:	3710      	adds	r7, #16
 80197ee:	46bd      	mov	sp, r7
 80197f0:	bd80      	pop	{r7, pc}
 80197f2:	bf00      	nop
 80197f4:	2400f930 	.word	0x2400f930
 80197f8:	2400f920 	.word	0x2400f920

080197fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b082      	sub	sp, #8
 8019800:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8019802:	4b10      	ldr	r3, [pc, #64]	; (8019844 <tcp_handle_closepend+0x48>)
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8019808:	e014      	b.n	8019834 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	68db      	ldr	r3, [r3, #12]
 801980e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	8b5b      	ldrh	r3, [r3, #26]
 8019814:	f003 0308 	and.w	r3, r3, #8
 8019818:	2b00      	cmp	r3, #0
 801981a:	d009      	beq.n	8019830 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	8b5b      	ldrh	r3, [r3, #26]
 8019820:	f023 0308 	bic.w	r3, r3, #8
 8019824:	b29a      	uxth	r2, r3
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801982a:	6878      	ldr	r0, [r7, #4]
 801982c:	f7fe fe5c 	bl	80184e8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d1e7      	bne.n	801980a <tcp_handle_closepend+0xe>
  }
}
 801983a:	bf00      	nop
 801983c:	bf00      	nop
 801983e:	3708      	adds	r7, #8
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}
 8019844:	2400f92c 	.word	0x2400f92c

08019848 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8019848:	b580      	push	{r7, lr}
 801984a:	b084      	sub	sp, #16
 801984c:	af00      	add	r7, sp, #0
 801984e:	4603      	mov	r3, r0
 8019850:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019852:	2001      	movs	r0, #1
 8019854:	f7fd f8bc 	bl	80169d0 <memp_malloc>
 8019858:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d126      	bne.n	80198ae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8019860:	f7ff ffcc 	bl	80197fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8019864:	f7ff ff9a 	bl	801979c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019868:	2001      	movs	r0, #1
 801986a:	f7fd f8b1 	bl	80169d0 <memp_malloc>
 801986e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	2b00      	cmp	r3, #0
 8019874:	d11b      	bne.n	80198ae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8019876:	2009      	movs	r0, #9
 8019878:	f7ff ff46 	bl	8019708 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801987c:	2001      	movs	r0, #1
 801987e:	f7fd f8a7 	bl	80169d0 <memp_malloc>
 8019882:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d111      	bne.n	80198ae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801988a:	2008      	movs	r0, #8
 801988c:	f7ff ff3c 	bl	8019708 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019890:	2001      	movs	r0, #1
 8019892:	f7fd f89d 	bl	80169d0 <memp_malloc>
 8019896:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d107      	bne.n	80198ae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801989e:	79fb      	ldrb	r3, [r7, #7]
 80198a0:	4618      	mov	r0, r3
 80198a2:	f7ff fee3 	bl	801966c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80198a6:	2001      	movs	r0, #1
 80198a8:	f7fd f892 	bl	80169d0 <memp_malloc>
 80198ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d03f      	beq.n	8019934 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80198b4:	229c      	movs	r2, #156	; 0x9c
 80198b6:	2100      	movs	r1, #0
 80198b8:	68f8      	ldr	r0, [r7, #12]
 80198ba:	f005 fcc9 	bl	801f250 <memset>
    pcb->prio = prio;
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	79fa      	ldrb	r2, [r7, #7]
 80198c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80198ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80198d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	22ff      	movs	r2, #255	; 0xff
 80198e2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80198ea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	2206      	movs	r2, #6
 80198f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	2206      	movs	r2, #6
 80198f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019900:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	2201      	movs	r2, #1
 8019906:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801990a:	4b0d      	ldr	r3, [pc, #52]	; (8019940 <tcp_alloc+0xf8>)
 801990c:	681a      	ldr	r2, [r3, #0]
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8019912:	4b0c      	ldr	r3, [pc, #48]	; (8019944 <tcp_alloc+0xfc>)
 8019914:	781a      	ldrb	r2, [r3, #0]
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8019920:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	4a08      	ldr	r2, [pc, #32]	; (8019948 <tcp_alloc+0x100>)
 8019928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	4a07      	ldr	r2, [pc, #28]	; (801994c <tcp_alloc+0x104>)
 8019930:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8019934:	68fb      	ldr	r3, [r7, #12]
}
 8019936:	4618      	mov	r0, r3
 8019938:	3710      	adds	r7, #16
 801993a:	46bd      	mov	sp, r7
 801993c:	bd80      	pop	{r7, pc}
 801993e:	bf00      	nop
 8019940:	2400f920 	.word	0x2400f920
 8019944:	2400f936 	.word	0x2400f936
 8019948:	08019601 	.word	0x08019601
 801994c:	006ddd00 	.word	0x006ddd00

08019950 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b084      	sub	sp, #16
 8019954:	af00      	add	r7, sp, #0
 8019956:	4603      	mov	r3, r0
 8019958:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801995a:	2040      	movs	r0, #64	; 0x40
 801995c:	f7ff ff74 	bl	8019848 <tcp_alloc>
 8019960:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019962:	68fb      	ldr	r3, [r7, #12]
}
 8019964:	4618      	mov	r0, r3
 8019966:	3710      	adds	r7, #16
 8019968:	46bd      	mov	sp, r7
 801996a:	bd80      	pop	{r7, pc}

0801996c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801996c:	b480      	push	{r7}
 801996e:	b083      	sub	sp, #12
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]
 8019974:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d002      	beq.n	8019982 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	683a      	ldr	r2, [r7, #0]
 8019980:	611a      	str	r2, [r3, #16]
  }
}
 8019982:	bf00      	nop
 8019984:	370c      	adds	r7, #12
 8019986:	46bd      	mov	sp, r7
 8019988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801998c:	4770      	bx	lr
	...

08019990 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8019990:	b580      	push	{r7, lr}
 8019992:	b082      	sub	sp, #8
 8019994:	af00      	add	r7, sp, #0
 8019996:	6078      	str	r0, [r7, #4]
 8019998:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d00e      	beq.n	80199be <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	7d1b      	ldrb	r3, [r3, #20]
 80199a4:	2b01      	cmp	r3, #1
 80199a6:	d106      	bne.n	80199b6 <tcp_recv+0x26>
 80199a8:	4b07      	ldr	r3, [pc, #28]	; (80199c8 <tcp_recv+0x38>)
 80199aa:	f240 72df 	movw	r2, #2015	; 0x7df
 80199ae:	4907      	ldr	r1, [pc, #28]	; (80199cc <tcp_recv+0x3c>)
 80199b0:	4807      	ldr	r0, [pc, #28]	; (80199d0 <tcp_recv+0x40>)
 80199b2:	f006 f823 	bl	801f9fc <iprintf>
    pcb->recv = recv;
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	683a      	ldr	r2, [r7, #0]
 80199ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80199be:	bf00      	nop
 80199c0:	3708      	adds	r7, #8
 80199c2:	46bd      	mov	sp, r7
 80199c4:	bd80      	pop	{r7, pc}
 80199c6:	bf00      	nop
 80199c8:	080227dc 	.word	0x080227dc
 80199cc:	08022dbc 	.word	0x08022dbc
 80199d0:	08022864 	.word	0x08022864

080199d4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b082      	sub	sp, #8
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
 80199dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d00e      	beq.n	8019a02 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	7d1b      	ldrb	r3, [r3, #20]
 80199e8:	2b01      	cmp	r3, #1
 80199ea:	d106      	bne.n	80199fa <tcp_sent+0x26>
 80199ec:	4b07      	ldr	r3, [pc, #28]	; (8019a0c <tcp_sent+0x38>)
 80199ee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80199f2:	4907      	ldr	r1, [pc, #28]	; (8019a10 <tcp_sent+0x3c>)
 80199f4:	4807      	ldr	r0, [pc, #28]	; (8019a14 <tcp_sent+0x40>)
 80199f6:	f006 f801 	bl	801f9fc <iprintf>
    pcb->sent = sent;
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	683a      	ldr	r2, [r7, #0]
 80199fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8019a02:	bf00      	nop
 8019a04:	3708      	adds	r7, #8
 8019a06:	46bd      	mov	sp, r7
 8019a08:	bd80      	pop	{r7, pc}
 8019a0a:	bf00      	nop
 8019a0c:	080227dc 	.word	0x080227dc
 8019a10:	08022de4 	.word	0x08022de4
 8019a14:	08022864 	.word	0x08022864

08019a18 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8019a18:	b580      	push	{r7, lr}
 8019a1a:	b082      	sub	sp, #8
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	6078      	str	r0, [r7, #4]
 8019a20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d00e      	beq.n	8019a46 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	7d1b      	ldrb	r3, [r3, #20]
 8019a2c:	2b01      	cmp	r3, #1
 8019a2e:	d106      	bne.n	8019a3e <tcp_err+0x26>
 8019a30:	4b07      	ldr	r3, [pc, #28]	; (8019a50 <tcp_err+0x38>)
 8019a32:	f640 020d 	movw	r2, #2061	; 0x80d
 8019a36:	4907      	ldr	r1, [pc, #28]	; (8019a54 <tcp_err+0x3c>)
 8019a38:	4807      	ldr	r0, [pc, #28]	; (8019a58 <tcp_err+0x40>)
 8019a3a:	f005 ffdf 	bl	801f9fc <iprintf>
    pcb->errf = err;
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	683a      	ldr	r2, [r7, #0]
 8019a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8019a46:	bf00      	nop
 8019a48:	3708      	adds	r7, #8
 8019a4a:	46bd      	mov	sp, r7
 8019a4c:	bd80      	pop	{r7, pc}
 8019a4e:	bf00      	nop
 8019a50:	080227dc 	.word	0x080227dc
 8019a54:	08022e0c 	.word	0x08022e0c
 8019a58:	08022864 	.word	0x08022864

08019a5c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8019a5c:	b480      	push	{r7}
 8019a5e:	b085      	sub	sp, #20
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	6078      	str	r0, [r7, #4]
 8019a64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d008      	beq.n	8019a7e <tcp_accept+0x22>
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	7d1b      	ldrb	r3, [r3, #20]
 8019a70:	2b01      	cmp	r3, #1
 8019a72:	d104      	bne.n	8019a7e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	683a      	ldr	r2, [r7, #0]
 8019a7c:	619a      	str	r2, [r3, #24]
  }
}
 8019a7e:	bf00      	nop
 8019a80:	3714      	adds	r7, #20
 8019a82:	46bd      	mov	sp, r7
 8019a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a88:	4770      	bx	lr
	...

08019a8c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b084      	sub	sp, #16
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	60f8      	str	r0, [r7, #12]
 8019a94:	60b9      	str	r1, [r7, #8]
 8019a96:	4613      	mov	r3, r2
 8019a98:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d107      	bne.n	8019ab0 <tcp_poll+0x24>
 8019aa0:	4b0e      	ldr	r3, [pc, #56]	; (8019adc <tcp_poll+0x50>)
 8019aa2:	f640 023d 	movw	r2, #2109	; 0x83d
 8019aa6:	490e      	ldr	r1, [pc, #56]	; (8019ae0 <tcp_poll+0x54>)
 8019aa8:	480e      	ldr	r0, [pc, #56]	; (8019ae4 <tcp_poll+0x58>)
 8019aaa:	f005 ffa7 	bl	801f9fc <iprintf>
 8019aae:	e011      	b.n	8019ad4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	7d1b      	ldrb	r3, [r3, #20]
 8019ab4:	2b01      	cmp	r3, #1
 8019ab6:	d106      	bne.n	8019ac6 <tcp_poll+0x3a>
 8019ab8:	4b08      	ldr	r3, [pc, #32]	; (8019adc <tcp_poll+0x50>)
 8019aba:	f640 023e 	movw	r2, #2110	; 0x83e
 8019abe:	490a      	ldr	r1, [pc, #40]	; (8019ae8 <tcp_poll+0x5c>)
 8019ac0:	4808      	ldr	r0, [pc, #32]	; (8019ae4 <tcp_poll+0x58>)
 8019ac2:	f005 ff9b 	bl	801f9fc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	68ba      	ldr	r2, [r7, #8]
 8019aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	79fa      	ldrb	r2, [r7, #7]
 8019ad2:	775a      	strb	r2, [r3, #29]
}
 8019ad4:	3710      	adds	r7, #16
 8019ad6:	46bd      	mov	sp, r7
 8019ad8:	bd80      	pop	{r7, pc}
 8019ada:	bf00      	nop
 8019adc:	080227dc 	.word	0x080227dc
 8019ae0:	08022e34 	.word	0x08022e34
 8019ae4:	08022864 	.word	0x08022864
 8019ae8:	08022e4c 	.word	0x08022e4c

08019aec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b082      	sub	sp, #8
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d107      	bne.n	8019b0a <tcp_pcb_purge+0x1e>
 8019afa:	4b21      	ldr	r3, [pc, #132]	; (8019b80 <tcp_pcb_purge+0x94>)
 8019afc:	f640 0251 	movw	r2, #2129	; 0x851
 8019b00:	4920      	ldr	r1, [pc, #128]	; (8019b84 <tcp_pcb_purge+0x98>)
 8019b02:	4821      	ldr	r0, [pc, #132]	; (8019b88 <tcp_pcb_purge+0x9c>)
 8019b04:	f005 ff7a 	bl	801f9fc <iprintf>
 8019b08:	e037      	b.n	8019b7a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	7d1b      	ldrb	r3, [r3, #20]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d033      	beq.n	8019b7a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8019b16:	2b0a      	cmp	r3, #10
 8019b18:	d02f      	beq.n	8019b7a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8019b1e:	2b01      	cmp	r3, #1
 8019b20:	d02b      	beq.n	8019b7a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d007      	beq.n	8019b3a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019b2e:	4618      	mov	r0, r3
 8019b30:	f7fd feb8 	bl	80178a4 <pbuf_free>
      pcb->refused_data = NULL;
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	2200      	movs	r2, #0
 8019b38:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d002      	beq.n	8019b48 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8019b42:	6878      	ldr	r0, [r7, #4]
 8019b44:	f000 f986 	bl	8019e54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b4e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b54:	4618      	mov	r0, r3
 8019b56:	f7ff fcf9 	bl	801954c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f7ff fcf4 	bl	801954c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	2200      	movs	r2, #0
 8019b68:	66da      	str	r2, [r3, #108]	; 0x6c
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	2200      	movs	r2, #0
 8019b76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8019b7a:	3708      	adds	r7, #8
 8019b7c:	46bd      	mov	sp, r7
 8019b7e:	bd80      	pop	{r7, pc}
 8019b80:	080227dc 	.word	0x080227dc
 8019b84:	08022e6c 	.word	0x08022e6c
 8019b88:	08022864 	.word	0x08022864

08019b8c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b084      	sub	sp, #16
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	6078      	str	r0, [r7, #4]
 8019b94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8019b96:	683b      	ldr	r3, [r7, #0]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d106      	bne.n	8019baa <tcp_pcb_remove+0x1e>
 8019b9c:	4b3e      	ldr	r3, [pc, #248]	; (8019c98 <tcp_pcb_remove+0x10c>)
 8019b9e:	f640 0283 	movw	r2, #2179	; 0x883
 8019ba2:	493e      	ldr	r1, [pc, #248]	; (8019c9c <tcp_pcb_remove+0x110>)
 8019ba4:	483e      	ldr	r0, [pc, #248]	; (8019ca0 <tcp_pcb_remove+0x114>)
 8019ba6:	f005 ff29 	bl	801f9fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d106      	bne.n	8019bbe <tcp_pcb_remove+0x32>
 8019bb0:	4b39      	ldr	r3, [pc, #228]	; (8019c98 <tcp_pcb_remove+0x10c>)
 8019bb2:	f640 0284 	movw	r2, #2180	; 0x884
 8019bb6:	493b      	ldr	r1, [pc, #236]	; (8019ca4 <tcp_pcb_remove+0x118>)
 8019bb8:	4839      	ldr	r0, [pc, #228]	; (8019ca0 <tcp_pcb_remove+0x114>)
 8019bba:	f005 ff1f 	bl	801f9fc <iprintf>

  TCP_RMV(pcblist, pcb);
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	683a      	ldr	r2, [r7, #0]
 8019bc4:	429a      	cmp	r2, r3
 8019bc6:	d105      	bne.n	8019bd4 <tcp_pcb_remove+0x48>
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	68da      	ldr	r2, [r3, #12]
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	601a      	str	r2, [r3, #0]
 8019bd2:	e013      	b.n	8019bfc <tcp_pcb_remove+0x70>
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	60fb      	str	r3, [r7, #12]
 8019bda:	e00c      	b.n	8019bf6 <tcp_pcb_remove+0x6a>
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	68db      	ldr	r3, [r3, #12]
 8019be0:	683a      	ldr	r2, [r7, #0]
 8019be2:	429a      	cmp	r2, r3
 8019be4:	d104      	bne.n	8019bf0 <tcp_pcb_remove+0x64>
 8019be6:	683b      	ldr	r3, [r7, #0]
 8019be8:	68da      	ldr	r2, [r3, #12]
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	60da      	str	r2, [r3, #12]
 8019bee:	e005      	b.n	8019bfc <tcp_pcb_remove+0x70>
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	68db      	ldr	r3, [r3, #12]
 8019bf4:	60fb      	str	r3, [r7, #12]
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d1ef      	bne.n	8019bdc <tcp_pcb_remove+0x50>
 8019bfc:	683b      	ldr	r3, [r7, #0]
 8019bfe:	2200      	movs	r2, #0
 8019c00:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8019c02:	6838      	ldr	r0, [r7, #0]
 8019c04:	f7ff ff72 	bl	8019aec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8019c08:	683b      	ldr	r3, [r7, #0]
 8019c0a:	7d1b      	ldrb	r3, [r3, #20]
 8019c0c:	2b0a      	cmp	r3, #10
 8019c0e:	d013      	beq.n	8019c38 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8019c10:	683b      	ldr	r3, [r7, #0]
 8019c12:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8019c14:	2b01      	cmp	r3, #1
 8019c16:	d00f      	beq.n	8019c38 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8019c18:	683b      	ldr	r3, [r7, #0]
 8019c1a:	8b5b      	ldrh	r3, [r3, #26]
 8019c1c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d009      	beq.n	8019c38 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8019c24:	683b      	ldr	r3, [r7, #0]
 8019c26:	8b5b      	ldrh	r3, [r3, #26]
 8019c28:	f043 0302 	orr.w	r3, r3, #2
 8019c2c:	b29a      	uxth	r2, r3
 8019c2e:	683b      	ldr	r3, [r7, #0]
 8019c30:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019c32:	6838      	ldr	r0, [r7, #0]
 8019c34:	f003 fbc6 	bl	801d3c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	7d1b      	ldrb	r3, [r3, #20]
 8019c3c:	2b01      	cmp	r3, #1
 8019c3e:	d020      	beq.n	8019c82 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8019c40:	683b      	ldr	r3, [r7, #0]
 8019c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d006      	beq.n	8019c56 <tcp_pcb_remove+0xca>
 8019c48:	4b13      	ldr	r3, [pc, #76]	; (8019c98 <tcp_pcb_remove+0x10c>)
 8019c4a:	f640 0293 	movw	r2, #2195	; 0x893
 8019c4e:	4916      	ldr	r1, [pc, #88]	; (8019ca8 <tcp_pcb_remove+0x11c>)
 8019c50:	4813      	ldr	r0, [pc, #76]	; (8019ca0 <tcp_pcb_remove+0x114>)
 8019c52:	f005 fed3 	bl	801f9fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d006      	beq.n	8019c6c <tcp_pcb_remove+0xe0>
 8019c5e:	4b0e      	ldr	r3, [pc, #56]	; (8019c98 <tcp_pcb_remove+0x10c>)
 8019c60:	f640 0294 	movw	r2, #2196	; 0x894
 8019c64:	4911      	ldr	r1, [pc, #68]	; (8019cac <tcp_pcb_remove+0x120>)
 8019c66:	480e      	ldr	r0, [pc, #56]	; (8019ca0 <tcp_pcb_remove+0x114>)
 8019c68:	f005 fec8 	bl	801f9fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d006      	beq.n	8019c82 <tcp_pcb_remove+0xf6>
 8019c74:	4b08      	ldr	r3, [pc, #32]	; (8019c98 <tcp_pcb_remove+0x10c>)
 8019c76:	f640 0296 	movw	r2, #2198	; 0x896
 8019c7a:	490d      	ldr	r1, [pc, #52]	; (8019cb0 <tcp_pcb_remove+0x124>)
 8019c7c:	4808      	ldr	r0, [pc, #32]	; (8019ca0 <tcp_pcb_remove+0x114>)
 8019c7e:	f005 febd 	bl	801f9fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8019c82:	683b      	ldr	r3, [r7, #0]
 8019c84:	2200      	movs	r2, #0
 8019c86:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8019c88:	683b      	ldr	r3, [r7, #0]
 8019c8a:	2200      	movs	r2, #0
 8019c8c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8019c8e:	bf00      	nop
 8019c90:	3710      	adds	r7, #16
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}
 8019c96:	bf00      	nop
 8019c98:	080227dc 	.word	0x080227dc
 8019c9c:	08022e88 	.word	0x08022e88
 8019ca0:	08022864 	.word	0x08022864
 8019ca4:	08022ea4 	.word	0x08022ea4
 8019ca8:	08022ec4 	.word	0x08022ec4
 8019cac:	08022edc 	.word	0x08022edc
 8019cb0:	08022ef8 	.word	0x08022ef8

08019cb4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b082      	sub	sp, #8
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d106      	bne.n	8019cd0 <tcp_next_iss+0x1c>
 8019cc2:	4b0a      	ldr	r3, [pc, #40]	; (8019cec <tcp_next_iss+0x38>)
 8019cc4:	f640 02af 	movw	r2, #2223	; 0x8af
 8019cc8:	4909      	ldr	r1, [pc, #36]	; (8019cf0 <tcp_next_iss+0x3c>)
 8019cca:	480a      	ldr	r0, [pc, #40]	; (8019cf4 <tcp_next_iss+0x40>)
 8019ccc:	f005 fe96 	bl	801f9fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8019cd0:	4b09      	ldr	r3, [pc, #36]	; (8019cf8 <tcp_next_iss+0x44>)
 8019cd2:	681a      	ldr	r2, [r3, #0]
 8019cd4:	4b09      	ldr	r3, [pc, #36]	; (8019cfc <tcp_next_iss+0x48>)
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	4413      	add	r3, r2
 8019cda:	4a07      	ldr	r2, [pc, #28]	; (8019cf8 <tcp_next_iss+0x44>)
 8019cdc:	6013      	str	r3, [r2, #0]
  return iss;
 8019cde:	4b06      	ldr	r3, [pc, #24]	; (8019cf8 <tcp_next_iss+0x44>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8019ce2:	4618      	mov	r0, r3
 8019ce4:	3708      	adds	r7, #8
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	bd80      	pop	{r7, pc}
 8019cea:	bf00      	nop
 8019cec:	080227dc 	.word	0x080227dc
 8019cf0:	08022f10 	.word	0x08022f10
 8019cf4:	08022864 	.word	0x08022864
 8019cf8:	2400002c 	.word	0x2400002c
 8019cfc:	2400f920 	.word	0x2400f920

08019d00 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	b086      	sub	sp, #24
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	4603      	mov	r3, r0
 8019d08:	60b9      	str	r1, [r7, #8]
 8019d0a:	607a      	str	r2, [r7, #4]
 8019d0c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d106      	bne.n	8019d22 <tcp_eff_send_mss_netif+0x22>
 8019d14:	4b14      	ldr	r3, [pc, #80]	; (8019d68 <tcp_eff_send_mss_netif+0x68>)
 8019d16:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8019d1a:	4914      	ldr	r1, [pc, #80]	; (8019d6c <tcp_eff_send_mss_netif+0x6c>)
 8019d1c:	4814      	ldr	r0, [pc, #80]	; (8019d70 <tcp_eff_send_mss_netif+0x70>)
 8019d1e:	f005 fe6d 	bl	801f9fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8019d22:	68bb      	ldr	r3, [r7, #8]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d101      	bne.n	8019d2c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8019d28:	89fb      	ldrh	r3, [r7, #14]
 8019d2a:	e019      	b.n	8019d60 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8019d2c:	68bb      	ldr	r3, [r7, #8]
 8019d2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019d30:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8019d32:	8afb      	ldrh	r3, [r7, #22]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d012      	beq.n	8019d5e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8019d38:	2328      	movs	r3, #40	; 0x28
 8019d3a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8019d3c:	8afa      	ldrh	r2, [r7, #22]
 8019d3e:	8abb      	ldrh	r3, [r7, #20]
 8019d40:	429a      	cmp	r2, r3
 8019d42:	d904      	bls.n	8019d4e <tcp_eff_send_mss_netif+0x4e>
 8019d44:	8afa      	ldrh	r2, [r7, #22]
 8019d46:	8abb      	ldrh	r3, [r7, #20]
 8019d48:	1ad3      	subs	r3, r2, r3
 8019d4a:	b29b      	uxth	r3, r3
 8019d4c:	e000      	b.n	8019d50 <tcp_eff_send_mss_netif+0x50>
 8019d4e:	2300      	movs	r3, #0
 8019d50:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8019d52:	8a7a      	ldrh	r2, [r7, #18]
 8019d54:	89fb      	ldrh	r3, [r7, #14]
 8019d56:	4293      	cmp	r3, r2
 8019d58:	bf28      	it	cs
 8019d5a:	4613      	movcs	r3, r2
 8019d5c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8019d5e:	89fb      	ldrh	r3, [r7, #14]
}
 8019d60:	4618      	mov	r0, r3
 8019d62:	3718      	adds	r7, #24
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bd80      	pop	{r7, pc}
 8019d68:	080227dc 	.word	0x080227dc
 8019d6c:	08022f2c 	.word	0x08022f2c
 8019d70:	08022864 	.word	0x08022864

08019d74 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8019d74:	b580      	push	{r7, lr}
 8019d76:	b084      	sub	sp, #16
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	6078      	str	r0, [r7, #4]
 8019d7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d119      	bne.n	8019dbc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8019d88:	4b10      	ldr	r3, [pc, #64]	; (8019dcc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8019d8a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8019d8e:	4910      	ldr	r1, [pc, #64]	; (8019dd0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8019d90:	4810      	ldr	r0, [pc, #64]	; (8019dd4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8019d92:	f005 fe33 	bl	801f9fc <iprintf>

  while (pcb != NULL) {
 8019d96:	e011      	b.n	8019dbc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	681a      	ldr	r2, [r3, #0]
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	429a      	cmp	r2, r3
 8019da2:	d108      	bne.n	8019db6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	68db      	ldr	r3, [r3, #12]
 8019da8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8019daa:	68f8      	ldr	r0, [r7, #12]
 8019dac:	f7fe fd4c 	bl	8018848 <tcp_abort>
      pcb = next;
 8019db0:	68bb      	ldr	r3, [r7, #8]
 8019db2:	60fb      	str	r3, [r7, #12]
 8019db4:	e002      	b.n	8019dbc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	68db      	ldr	r3, [r3, #12]
 8019dba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d1ea      	bne.n	8019d98 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8019dc2:	bf00      	nop
 8019dc4:	bf00      	nop
 8019dc6:	3710      	adds	r7, #16
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	bd80      	pop	{r7, pc}
 8019dcc:	080227dc 	.word	0x080227dc
 8019dd0:	08022f54 	.word	0x08022f54
 8019dd4:	08022864 	.word	0x08022864

08019dd8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b084      	sub	sp, #16
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
 8019de0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d02a      	beq.n	8019e3e <tcp_netif_ip_addr_changed+0x66>
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d026      	beq.n	8019e3e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8019df0:	4b15      	ldr	r3, [pc, #84]	; (8019e48 <tcp_netif_ip_addr_changed+0x70>)
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	4619      	mov	r1, r3
 8019df6:	6878      	ldr	r0, [r7, #4]
 8019df8:	f7ff ffbc 	bl	8019d74 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8019dfc:	4b13      	ldr	r3, [pc, #76]	; (8019e4c <tcp_netif_ip_addr_changed+0x74>)
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	4619      	mov	r1, r3
 8019e02:	6878      	ldr	r0, [r7, #4]
 8019e04:	f7ff ffb6 	bl	8019d74 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8019e08:	683b      	ldr	r3, [r7, #0]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d017      	beq.n	8019e3e <tcp_netif_ip_addr_changed+0x66>
 8019e0e:	683b      	ldr	r3, [r7, #0]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d013      	beq.n	8019e3e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019e16:	4b0e      	ldr	r3, [pc, #56]	; (8019e50 <tcp_netif_ip_addr_changed+0x78>)
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	60fb      	str	r3, [r7, #12]
 8019e1c:	e00c      	b.n	8019e38 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	681a      	ldr	r2, [r3, #0]
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	429a      	cmp	r2, r3
 8019e28:	d103      	bne.n	8019e32 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8019e2a:	683b      	ldr	r3, [r7, #0]
 8019e2c:	681a      	ldr	r2, [r3, #0]
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	68db      	ldr	r3, [r3, #12]
 8019e36:	60fb      	str	r3, [r7, #12]
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d1ef      	bne.n	8019e1e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8019e3e:	bf00      	nop
 8019e40:	3710      	adds	r7, #16
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}
 8019e46:	bf00      	nop
 8019e48:	2400f92c 	.word	0x2400f92c
 8019e4c:	2400f924 	.word	0x2400f924
 8019e50:	2400f928 	.word	0x2400f928

08019e54 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b082      	sub	sp, #8
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d007      	beq.n	8019e74 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019e68:	4618      	mov	r0, r3
 8019e6a:	f7ff fb6f 	bl	801954c <tcp_segs_free>
    pcb->ooseq = NULL;
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	2200      	movs	r2, #0
 8019e72:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8019e74:	bf00      	nop
 8019e76:	3708      	adds	r7, #8
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd80      	pop	{r7, pc}

08019e7c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8019e7c:	b590      	push	{r4, r7, lr}
 8019e7e:	b08d      	sub	sp, #52	; 0x34
 8019e80:	af04      	add	r7, sp, #16
 8019e82:	6078      	str	r0, [r7, #4]
 8019e84:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d105      	bne.n	8019e98 <tcp_input+0x1c>
 8019e8c:	4b9b      	ldr	r3, [pc, #620]	; (801a0fc <tcp_input+0x280>)
 8019e8e:	2283      	movs	r2, #131	; 0x83
 8019e90:	499b      	ldr	r1, [pc, #620]	; (801a100 <tcp_input+0x284>)
 8019e92:	489c      	ldr	r0, [pc, #624]	; (801a104 <tcp_input+0x288>)
 8019e94:	f005 fdb2 	bl	801f9fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	685b      	ldr	r3, [r3, #4]
 8019e9c:	4a9a      	ldr	r2, [pc, #616]	; (801a108 <tcp_input+0x28c>)
 8019e9e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	895b      	ldrh	r3, [r3, #10]
 8019ea4:	2b13      	cmp	r3, #19
 8019ea6:	f240 83d1 	bls.w	801a64c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8019eaa:	4b98      	ldr	r3, [pc, #608]	; (801a10c <tcp_input+0x290>)
 8019eac:	695b      	ldr	r3, [r3, #20]
 8019eae:	4a97      	ldr	r2, [pc, #604]	; (801a10c <tcp_input+0x290>)
 8019eb0:	6812      	ldr	r2, [r2, #0]
 8019eb2:	4611      	mov	r1, r2
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	f7fb fa8f 	bl	80153d8 <ip4_addr_isbroadcast_u32>
 8019eba:	4603      	mov	r3, r0
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	f040 83c7 	bne.w	801a650 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8019ec2:	4b92      	ldr	r3, [pc, #584]	; (801a10c <tcp_input+0x290>)
 8019ec4:	695b      	ldr	r3, [r3, #20]
 8019ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8019eca:	2be0      	cmp	r3, #224	; 0xe0
 8019ecc:	f000 83c0 	beq.w	801a650 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8019ed0:	4b8d      	ldr	r3, [pc, #564]	; (801a108 <tcp_input+0x28c>)
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	899b      	ldrh	r3, [r3, #12]
 8019ed6:	b29b      	uxth	r3, r3
 8019ed8:	4618      	mov	r0, r3
 8019eda:	f7f9 fd0f 	bl	80138fc <lwip_htons>
 8019ede:	4603      	mov	r3, r0
 8019ee0:	0b1b      	lsrs	r3, r3, #12
 8019ee2:	b29b      	uxth	r3, r3
 8019ee4:	b2db      	uxtb	r3, r3
 8019ee6:	009b      	lsls	r3, r3, #2
 8019ee8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8019eea:	7cbb      	ldrb	r3, [r7, #18]
 8019eec:	2b13      	cmp	r3, #19
 8019eee:	f240 83b1 	bls.w	801a654 <tcp_input+0x7d8>
 8019ef2:	7cbb      	ldrb	r3, [r7, #18]
 8019ef4:	b29a      	uxth	r2, r3
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	891b      	ldrh	r3, [r3, #8]
 8019efa:	429a      	cmp	r2, r3
 8019efc:	f200 83aa 	bhi.w	801a654 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8019f00:	7cbb      	ldrb	r3, [r7, #18]
 8019f02:	b29b      	uxth	r3, r3
 8019f04:	3b14      	subs	r3, #20
 8019f06:	b29a      	uxth	r2, r3
 8019f08:	4b81      	ldr	r3, [pc, #516]	; (801a110 <tcp_input+0x294>)
 8019f0a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8019f0c:	4b81      	ldr	r3, [pc, #516]	; (801a114 <tcp_input+0x298>)
 8019f0e:	2200      	movs	r2, #0
 8019f10:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	895a      	ldrh	r2, [r3, #10]
 8019f16:	7cbb      	ldrb	r3, [r7, #18]
 8019f18:	b29b      	uxth	r3, r3
 8019f1a:	429a      	cmp	r2, r3
 8019f1c:	d309      	bcc.n	8019f32 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8019f1e:	4b7c      	ldr	r3, [pc, #496]	; (801a110 <tcp_input+0x294>)
 8019f20:	881a      	ldrh	r2, [r3, #0]
 8019f22:	4b7d      	ldr	r3, [pc, #500]	; (801a118 <tcp_input+0x29c>)
 8019f24:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8019f26:	7cbb      	ldrb	r3, [r7, #18]
 8019f28:	4619      	mov	r1, r3
 8019f2a:	6878      	ldr	r0, [r7, #4]
 8019f2c:	f7fd fc34 	bl	8017798 <pbuf_remove_header>
 8019f30:	e04e      	b.n	8019fd0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d105      	bne.n	8019f46 <tcp_input+0xca>
 8019f3a:	4b70      	ldr	r3, [pc, #448]	; (801a0fc <tcp_input+0x280>)
 8019f3c:	22c2      	movs	r2, #194	; 0xc2
 8019f3e:	4977      	ldr	r1, [pc, #476]	; (801a11c <tcp_input+0x2a0>)
 8019f40:	4870      	ldr	r0, [pc, #448]	; (801a104 <tcp_input+0x288>)
 8019f42:	f005 fd5b 	bl	801f9fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8019f46:	2114      	movs	r1, #20
 8019f48:	6878      	ldr	r0, [r7, #4]
 8019f4a:	f7fd fc25 	bl	8017798 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	895a      	ldrh	r2, [r3, #10]
 8019f52:	4b71      	ldr	r3, [pc, #452]	; (801a118 <tcp_input+0x29c>)
 8019f54:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8019f56:	4b6e      	ldr	r3, [pc, #440]	; (801a110 <tcp_input+0x294>)
 8019f58:	881a      	ldrh	r2, [r3, #0]
 8019f5a:	4b6f      	ldr	r3, [pc, #444]	; (801a118 <tcp_input+0x29c>)
 8019f5c:	881b      	ldrh	r3, [r3, #0]
 8019f5e:	1ad3      	subs	r3, r2, r3
 8019f60:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8019f62:	4b6d      	ldr	r3, [pc, #436]	; (801a118 <tcp_input+0x29c>)
 8019f64:	881b      	ldrh	r3, [r3, #0]
 8019f66:	4619      	mov	r1, r3
 8019f68:	6878      	ldr	r0, [r7, #4]
 8019f6a:	f7fd fc15 	bl	8017798 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	895b      	ldrh	r3, [r3, #10]
 8019f74:	8a3a      	ldrh	r2, [r7, #16]
 8019f76:	429a      	cmp	r2, r3
 8019f78:	f200 836e 	bhi.w	801a658 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	685b      	ldr	r3, [r3, #4]
 8019f82:	4a64      	ldr	r2, [pc, #400]	; (801a114 <tcp_input+0x298>)
 8019f84:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	8a3a      	ldrh	r2, [r7, #16]
 8019f8c:	4611      	mov	r1, r2
 8019f8e:	4618      	mov	r0, r3
 8019f90:	f7fd fc02 	bl	8017798 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	891a      	ldrh	r2, [r3, #8]
 8019f98:	8a3b      	ldrh	r3, [r7, #16]
 8019f9a:	1ad3      	subs	r3, r2, r3
 8019f9c:	b29a      	uxth	r2, r3
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	895b      	ldrh	r3, [r3, #10]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d005      	beq.n	8019fb6 <tcp_input+0x13a>
 8019faa:	4b54      	ldr	r3, [pc, #336]	; (801a0fc <tcp_input+0x280>)
 8019fac:	22df      	movs	r2, #223	; 0xdf
 8019fae:	495c      	ldr	r1, [pc, #368]	; (801a120 <tcp_input+0x2a4>)
 8019fb0:	4854      	ldr	r0, [pc, #336]	; (801a104 <tcp_input+0x288>)
 8019fb2:	f005 fd23 	bl	801f9fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	891a      	ldrh	r2, [r3, #8]
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	891b      	ldrh	r3, [r3, #8]
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d005      	beq.n	8019fd0 <tcp_input+0x154>
 8019fc4:	4b4d      	ldr	r3, [pc, #308]	; (801a0fc <tcp_input+0x280>)
 8019fc6:	22e0      	movs	r2, #224	; 0xe0
 8019fc8:	4956      	ldr	r1, [pc, #344]	; (801a124 <tcp_input+0x2a8>)
 8019fca:	484e      	ldr	r0, [pc, #312]	; (801a104 <tcp_input+0x288>)
 8019fcc:	f005 fd16 	bl	801f9fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8019fd0:	4b4d      	ldr	r3, [pc, #308]	; (801a108 <tcp_input+0x28c>)
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	881b      	ldrh	r3, [r3, #0]
 8019fd6:	b29b      	uxth	r3, r3
 8019fd8:	4a4b      	ldr	r2, [pc, #300]	; (801a108 <tcp_input+0x28c>)
 8019fda:	6814      	ldr	r4, [r2, #0]
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f7f9 fc8d 	bl	80138fc <lwip_htons>
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8019fe6:	4b48      	ldr	r3, [pc, #288]	; (801a108 <tcp_input+0x28c>)
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	885b      	ldrh	r3, [r3, #2]
 8019fec:	b29b      	uxth	r3, r3
 8019fee:	4a46      	ldr	r2, [pc, #280]	; (801a108 <tcp_input+0x28c>)
 8019ff0:	6814      	ldr	r4, [r2, #0]
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f7f9 fc82 	bl	80138fc <lwip_htons>
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8019ffc:	4b42      	ldr	r3, [pc, #264]	; (801a108 <tcp_input+0x28c>)
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	685b      	ldr	r3, [r3, #4]
 801a002:	4a41      	ldr	r2, [pc, #260]	; (801a108 <tcp_input+0x28c>)
 801a004:	6814      	ldr	r4, [r2, #0]
 801a006:	4618      	mov	r0, r3
 801a008:	f7f9 fc8d 	bl	8013926 <lwip_htonl>
 801a00c:	4603      	mov	r3, r0
 801a00e:	6063      	str	r3, [r4, #4]
 801a010:	6863      	ldr	r3, [r4, #4]
 801a012:	4a45      	ldr	r2, [pc, #276]	; (801a128 <tcp_input+0x2ac>)
 801a014:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801a016:	4b3c      	ldr	r3, [pc, #240]	; (801a108 <tcp_input+0x28c>)
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	689b      	ldr	r3, [r3, #8]
 801a01c:	4a3a      	ldr	r2, [pc, #232]	; (801a108 <tcp_input+0x28c>)
 801a01e:	6814      	ldr	r4, [r2, #0]
 801a020:	4618      	mov	r0, r3
 801a022:	f7f9 fc80 	bl	8013926 <lwip_htonl>
 801a026:	4603      	mov	r3, r0
 801a028:	60a3      	str	r3, [r4, #8]
 801a02a:	68a3      	ldr	r3, [r4, #8]
 801a02c:	4a3f      	ldr	r2, [pc, #252]	; (801a12c <tcp_input+0x2b0>)
 801a02e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801a030:	4b35      	ldr	r3, [pc, #212]	; (801a108 <tcp_input+0x28c>)
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	89db      	ldrh	r3, [r3, #14]
 801a036:	b29b      	uxth	r3, r3
 801a038:	4a33      	ldr	r2, [pc, #204]	; (801a108 <tcp_input+0x28c>)
 801a03a:	6814      	ldr	r4, [r2, #0]
 801a03c:	4618      	mov	r0, r3
 801a03e:	f7f9 fc5d 	bl	80138fc <lwip_htons>
 801a042:	4603      	mov	r3, r0
 801a044:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801a046:	4b30      	ldr	r3, [pc, #192]	; (801a108 <tcp_input+0x28c>)
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	899b      	ldrh	r3, [r3, #12]
 801a04c:	b29b      	uxth	r3, r3
 801a04e:	4618      	mov	r0, r3
 801a050:	f7f9 fc54 	bl	80138fc <lwip_htons>
 801a054:	4603      	mov	r3, r0
 801a056:	b2db      	uxtb	r3, r3
 801a058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a05c:	b2da      	uxtb	r2, r3
 801a05e:	4b34      	ldr	r3, [pc, #208]	; (801a130 <tcp_input+0x2b4>)
 801a060:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	891a      	ldrh	r2, [r3, #8]
 801a066:	4b33      	ldr	r3, [pc, #204]	; (801a134 <tcp_input+0x2b8>)
 801a068:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801a06a:	4b31      	ldr	r3, [pc, #196]	; (801a130 <tcp_input+0x2b4>)
 801a06c:	781b      	ldrb	r3, [r3, #0]
 801a06e:	f003 0303 	and.w	r3, r3, #3
 801a072:	2b00      	cmp	r3, #0
 801a074:	d00c      	beq.n	801a090 <tcp_input+0x214>
    tcplen++;
 801a076:	4b2f      	ldr	r3, [pc, #188]	; (801a134 <tcp_input+0x2b8>)
 801a078:	881b      	ldrh	r3, [r3, #0]
 801a07a:	3301      	adds	r3, #1
 801a07c:	b29a      	uxth	r2, r3
 801a07e:	4b2d      	ldr	r3, [pc, #180]	; (801a134 <tcp_input+0x2b8>)
 801a080:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	891a      	ldrh	r2, [r3, #8]
 801a086:	4b2b      	ldr	r3, [pc, #172]	; (801a134 <tcp_input+0x2b8>)
 801a088:	881b      	ldrh	r3, [r3, #0]
 801a08a:	429a      	cmp	r2, r3
 801a08c:	f200 82e6 	bhi.w	801a65c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801a090:	2300      	movs	r3, #0
 801a092:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a094:	4b28      	ldr	r3, [pc, #160]	; (801a138 <tcp_input+0x2bc>)
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	61fb      	str	r3, [r7, #28]
 801a09a:	e09d      	b.n	801a1d8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801a09c:	69fb      	ldr	r3, [r7, #28]
 801a09e:	7d1b      	ldrb	r3, [r3, #20]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d105      	bne.n	801a0b0 <tcp_input+0x234>
 801a0a4:	4b15      	ldr	r3, [pc, #84]	; (801a0fc <tcp_input+0x280>)
 801a0a6:	22fb      	movs	r2, #251	; 0xfb
 801a0a8:	4924      	ldr	r1, [pc, #144]	; (801a13c <tcp_input+0x2c0>)
 801a0aa:	4816      	ldr	r0, [pc, #88]	; (801a104 <tcp_input+0x288>)
 801a0ac:	f005 fca6 	bl	801f9fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801a0b0:	69fb      	ldr	r3, [r7, #28]
 801a0b2:	7d1b      	ldrb	r3, [r3, #20]
 801a0b4:	2b0a      	cmp	r3, #10
 801a0b6:	d105      	bne.n	801a0c4 <tcp_input+0x248>
 801a0b8:	4b10      	ldr	r3, [pc, #64]	; (801a0fc <tcp_input+0x280>)
 801a0ba:	22fc      	movs	r2, #252	; 0xfc
 801a0bc:	4920      	ldr	r1, [pc, #128]	; (801a140 <tcp_input+0x2c4>)
 801a0be:	4811      	ldr	r0, [pc, #68]	; (801a104 <tcp_input+0x288>)
 801a0c0:	f005 fc9c 	bl	801f9fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801a0c4:	69fb      	ldr	r3, [r7, #28]
 801a0c6:	7d1b      	ldrb	r3, [r3, #20]
 801a0c8:	2b01      	cmp	r3, #1
 801a0ca:	d105      	bne.n	801a0d8 <tcp_input+0x25c>
 801a0cc:	4b0b      	ldr	r3, [pc, #44]	; (801a0fc <tcp_input+0x280>)
 801a0ce:	22fd      	movs	r2, #253	; 0xfd
 801a0d0:	491c      	ldr	r1, [pc, #112]	; (801a144 <tcp_input+0x2c8>)
 801a0d2:	480c      	ldr	r0, [pc, #48]	; (801a104 <tcp_input+0x288>)
 801a0d4:	f005 fc92 	bl	801f9fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a0d8:	69fb      	ldr	r3, [r7, #28]
 801a0da:	7a1b      	ldrb	r3, [r3, #8]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d033      	beq.n	801a148 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a0e0:	69fb      	ldr	r3, [r7, #28]
 801a0e2:	7a1a      	ldrb	r2, [r3, #8]
 801a0e4:	4b09      	ldr	r3, [pc, #36]	; (801a10c <tcp_input+0x290>)
 801a0e6:	685b      	ldr	r3, [r3, #4]
 801a0e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a0ec:	3301      	adds	r3, #1
 801a0ee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a0f0:	429a      	cmp	r2, r3
 801a0f2:	d029      	beq.n	801a148 <tcp_input+0x2cc>
      prev = pcb;
 801a0f4:	69fb      	ldr	r3, [r7, #28]
 801a0f6:	61bb      	str	r3, [r7, #24]
      continue;
 801a0f8:	e06b      	b.n	801a1d2 <tcp_input+0x356>
 801a0fa:	bf00      	nop
 801a0fc:	08022f88 	.word	0x08022f88
 801a100:	08023000 	.word	0x08023000
 801a104:	08023018 	.word	0x08023018
 801a108:	2400f948 	.word	0x2400f948
 801a10c:	24008e50 	.word	0x24008e50
 801a110:	2400f94c 	.word	0x2400f94c
 801a114:	2400f950 	.word	0x2400f950
 801a118:	2400f94e 	.word	0x2400f94e
 801a11c:	08023040 	.word	0x08023040
 801a120:	08023050 	.word	0x08023050
 801a124:	0802305c 	.word	0x0802305c
 801a128:	2400f958 	.word	0x2400f958
 801a12c:	2400f95c 	.word	0x2400f95c
 801a130:	2400f964 	.word	0x2400f964
 801a134:	2400f962 	.word	0x2400f962
 801a138:	2400f92c 	.word	0x2400f92c
 801a13c:	0802307c 	.word	0x0802307c
 801a140:	080230a4 	.word	0x080230a4
 801a144:	080230d0 	.word	0x080230d0
    }

    if (pcb->remote_port == tcphdr->src &&
 801a148:	69fb      	ldr	r3, [r7, #28]
 801a14a:	8b1a      	ldrh	r2, [r3, #24]
 801a14c:	4b72      	ldr	r3, [pc, #456]	; (801a318 <tcp_input+0x49c>)
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	881b      	ldrh	r3, [r3, #0]
 801a152:	b29b      	uxth	r3, r3
 801a154:	429a      	cmp	r2, r3
 801a156:	d13a      	bne.n	801a1ce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801a158:	69fb      	ldr	r3, [r7, #28]
 801a15a:	8ada      	ldrh	r2, [r3, #22]
 801a15c:	4b6e      	ldr	r3, [pc, #440]	; (801a318 <tcp_input+0x49c>)
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	885b      	ldrh	r3, [r3, #2]
 801a162:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801a164:	429a      	cmp	r2, r3
 801a166:	d132      	bne.n	801a1ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a168:	69fb      	ldr	r3, [r7, #28]
 801a16a:	685a      	ldr	r2, [r3, #4]
 801a16c:	4b6b      	ldr	r3, [pc, #428]	; (801a31c <tcp_input+0x4a0>)
 801a16e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801a170:	429a      	cmp	r2, r3
 801a172:	d12c      	bne.n	801a1ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a174:	69fb      	ldr	r3, [r7, #28]
 801a176:	681a      	ldr	r2, [r3, #0]
 801a178:	4b68      	ldr	r3, [pc, #416]	; (801a31c <tcp_input+0x4a0>)
 801a17a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a17c:	429a      	cmp	r2, r3
 801a17e:	d126      	bne.n	801a1ce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801a180:	69fb      	ldr	r3, [r7, #28]
 801a182:	68db      	ldr	r3, [r3, #12]
 801a184:	69fa      	ldr	r2, [r7, #28]
 801a186:	429a      	cmp	r2, r3
 801a188:	d106      	bne.n	801a198 <tcp_input+0x31c>
 801a18a:	4b65      	ldr	r3, [pc, #404]	; (801a320 <tcp_input+0x4a4>)
 801a18c:	f240 120d 	movw	r2, #269	; 0x10d
 801a190:	4964      	ldr	r1, [pc, #400]	; (801a324 <tcp_input+0x4a8>)
 801a192:	4865      	ldr	r0, [pc, #404]	; (801a328 <tcp_input+0x4ac>)
 801a194:	f005 fc32 	bl	801f9fc <iprintf>
      if (prev != NULL) {
 801a198:	69bb      	ldr	r3, [r7, #24]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d00a      	beq.n	801a1b4 <tcp_input+0x338>
        prev->next = pcb->next;
 801a19e:	69fb      	ldr	r3, [r7, #28]
 801a1a0:	68da      	ldr	r2, [r3, #12]
 801a1a2:	69bb      	ldr	r3, [r7, #24]
 801a1a4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801a1a6:	4b61      	ldr	r3, [pc, #388]	; (801a32c <tcp_input+0x4b0>)
 801a1a8:	681a      	ldr	r2, [r3, #0]
 801a1aa:	69fb      	ldr	r3, [r7, #28]
 801a1ac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801a1ae:	4a5f      	ldr	r2, [pc, #380]	; (801a32c <tcp_input+0x4b0>)
 801a1b0:	69fb      	ldr	r3, [r7, #28]
 801a1b2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801a1b4:	69fb      	ldr	r3, [r7, #28]
 801a1b6:	68db      	ldr	r3, [r3, #12]
 801a1b8:	69fa      	ldr	r2, [r7, #28]
 801a1ba:	429a      	cmp	r2, r3
 801a1bc:	d111      	bne.n	801a1e2 <tcp_input+0x366>
 801a1be:	4b58      	ldr	r3, [pc, #352]	; (801a320 <tcp_input+0x4a4>)
 801a1c0:	f240 1215 	movw	r2, #277	; 0x115
 801a1c4:	495a      	ldr	r1, [pc, #360]	; (801a330 <tcp_input+0x4b4>)
 801a1c6:	4858      	ldr	r0, [pc, #352]	; (801a328 <tcp_input+0x4ac>)
 801a1c8:	f005 fc18 	bl	801f9fc <iprintf>
      break;
 801a1cc:	e009      	b.n	801a1e2 <tcp_input+0x366>
    }
    prev = pcb;
 801a1ce:	69fb      	ldr	r3, [r7, #28]
 801a1d0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a1d2:	69fb      	ldr	r3, [r7, #28]
 801a1d4:	68db      	ldr	r3, [r3, #12]
 801a1d6:	61fb      	str	r3, [r7, #28]
 801a1d8:	69fb      	ldr	r3, [r7, #28]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	f47f af5e 	bne.w	801a09c <tcp_input+0x220>
 801a1e0:	e000      	b.n	801a1e4 <tcp_input+0x368>
      break;
 801a1e2:	bf00      	nop
  }

  if (pcb == NULL) {
 801a1e4:	69fb      	ldr	r3, [r7, #28]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	f040 80aa 	bne.w	801a340 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a1ec:	4b51      	ldr	r3, [pc, #324]	; (801a334 <tcp_input+0x4b8>)
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	61fb      	str	r3, [r7, #28]
 801a1f2:	e03f      	b.n	801a274 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a1f4:	69fb      	ldr	r3, [r7, #28]
 801a1f6:	7d1b      	ldrb	r3, [r3, #20]
 801a1f8:	2b0a      	cmp	r3, #10
 801a1fa:	d006      	beq.n	801a20a <tcp_input+0x38e>
 801a1fc:	4b48      	ldr	r3, [pc, #288]	; (801a320 <tcp_input+0x4a4>)
 801a1fe:	f240 121f 	movw	r2, #287	; 0x11f
 801a202:	494d      	ldr	r1, [pc, #308]	; (801a338 <tcp_input+0x4bc>)
 801a204:	4848      	ldr	r0, [pc, #288]	; (801a328 <tcp_input+0x4ac>)
 801a206:	f005 fbf9 	bl	801f9fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a20a:	69fb      	ldr	r3, [r7, #28]
 801a20c:	7a1b      	ldrb	r3, [r3, #8]
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d009      	beq.n	801a226 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a212:	69fb      	ldr	r3, [r7, #28]
 801a214:	7a1a      	ldrb	r2, [r3, #8]
 801a216:	4b41      	ldr	r3, [pc, #260]	; (801a31c <tcp_input+0x4a0>)
 801a218:	685b      	ldr	r3, [r3, #4]
 801a21a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a21e:	3301      	adds	r3, #1
 801a220:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a222:	429a      	cmp	r2, r3
 801a224:	d122      	bne.n	801a26c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801a226:	69fb      	ldr	r3, [r7, #28]
 801a228:	8b1a      	ldrh	r2, [r3, #24]
 801a22a:	4b3b      	ldr	r3, [pc, #236]	; (801a318 <tcp_input+0x49c>)
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	881b      	ldrh	r3, [r3, #0]
 801a230:	b29b      	uxth	r3, r3
 801a232:	429a      	cmp	r2, r3
 801a234:	d11b      	bne.n	801a26e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801a236:	69fb      	ldr	r3, [r7, #28]
 801a238:	8ada      	ldrh	r2, [r3, #22]
 801a23a:	4b37      	ldr	r3, [pc, #220]	; (801a318 <tcp_input+0x49c>)
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	885b      	ldrh	r3, [r3, #2]
 801a240:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801a242:	429a      	cmp	r2, r3
 801a244:	d113      	bne.n	801a26e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a246:	69fb      	ldr	r3, [r7, #28]
 801a248:	685a      	ldr	r2, [r3, #4]
 801a24a:	4b34      	ldr	r3, [pc, #208]	; (801a31c <tcp_input+0x4a0>)
 801a24c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801a24e:	429a      	cmp	r2, r3
 801a250:	d10d      	bne.n	801a26e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a252:	69fb      	ldr	r3, [r7, #28]
 801a254:	681a      	ldr	r2, [r3, #0]
 801a256:	4b31      	ldr	r3, [pc, #196]	; (801a31c <tcp_input+0x4a0>)
 801a258:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a25a:	429a      	cmp	r2, r3
 801a25c:	d107      	bne.n	801a26e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801a25e:	69f8      	ldr	r0, [r7, #28]
 801a260:	f000 fb56 	bl	801a910 <tcp_timewait_input>
        }
        pbuf_free(p);
 801a264:	6878      	ldr	r0, [r7, #4]
 801a266:	f7fd fb1d 	bl	80178a4 <pbuf_free>
        return;
 801a26a:	e1fd      	b.n	801a668 <tcp_input+0x7ec>
        continue;
 801a26c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a26e:	69fb      	ldr	r3, [r7, #28]
 801a270:	68db      	ldr	r3, [r3, #12]
 801a272:	61fb      	str	r3, [r7, #28]
 801a274:	69fb      	ldr	r3, [r7, #28]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d1bc      	bne.n	801a1f4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801a27a:	2300      	movs	r3, #0
 801a27c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a27e:	4b2f      	ldr	r3, [pc, #188]	; (801a33c <tcp_input+0x4c0>)
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	617b      	str	r3, [r7, #20]
 801a284:	e02a      	b.n	801a2dc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a286:	697b      	ldr	r3, [r7, #20]
 801a288:	7a1b      	ldrb	r3, [r3, #8]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d00c      	beq.n	801a2a8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a28e:	697b      	ldr	r3, [r7, #20]
 801a290:	7a1a      	ldrb	r2, [r3, #8]
 801a292:	4b22      	ldr	r3, [pc, #136]	; (801a31c <tcp_input+0x4a0>)
 801a294:	685b      	ldr	r3, [r3, #4]
 801a296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a29a:	3301      	adds	r3, #1
 801a29c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a29e:	429a      	cmp	r2, r3
 801a2a0:	d002      	beq.n	801a2a8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801a2a2:	697b      	ldr	r3, [r7, #20]
 801a2a4:	61bb      	str	r3, [r7, #24]
        continue;
 801a2a6:	e016      	b.n	801a2d6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801a2a8:	697b      	ldr	r3, [r7, #20]
 801a2aa:	8ada      	ldrh	r2, [r3, #22]
 801a2ac:	4b1a      	ldr	r3, [pc, #104]	; (801a318 <tcp_input+0x49c>)
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	885b      	ldrh	r3, [r3, #2]
 801a2b2:	b29b      	uxth	r3, r3
 801a2b4:	429a      	cmp	r2, r3
 801a2b6:	d10c      	bne.n	801a2d2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801a2b8:	697b      	ldr	r3, [r7, #20]
 801a2ba:	681a      	ldr	r2, [r3, #0]
 801a2bc:	4b17      	ldr	r3, [pc, #92]	; (801a31c <tcp_input+0x4a0>)
 801a2be:	695b      	ldr	r3, [r3, #20]
 801a2c0:	429a      	cmp	r2, r3
 801a2c2:	d00f      	beq.n	801a2e4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801a2c4:	697b      	ldr	r3, [r7, #20]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d00d      	beq.n	801a2e6 <tcp_input+0x46a>
 801a2ca:	697b      	ldr	r3, [r7, #20]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d009      	beq.n	801a2e6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801a2d2:	697b      	ldr	r3, [r7, #20]
 801a2d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a2d6:	697b      	ldr	r3, [r7, #20]
 801a2d8:	68db      	ldr	r3, [r3, #12]
 801a2da:	617b      	str	r3, [r7, #20]
 801a2dc:	697b      	ldr	r3, [r7, #20]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d1d1      	bne.n	801a286 <tcp_input+0x40a>
 801a2e2:	e000      	b.n	801a2e6 <tcp_input+0x46a>
            break;
 801a2e4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801a2e6:	697b      	ldr	r3, [r7, #20]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d029      	beq.n	801a340 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801a2ec:	69bb      	ldr	r3, [r7, #24]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d00a      	beq.n	801a308 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801a2f2:	697b      	ldr	r3, [r7, #20]
 801a2f4:	68da      	ldr	r2, [r3, #12]
 801a2f6:	69bb      	ldr	r3, [r7, #24]
 801a2f8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801a2fa:	4b10      	ldr	r3, [pc, #64]	; (801a33c <tcp_input+0x4c0>)
 801a2fc:	681a      	ldr	r2, [r3, #0]
 801a2fe:	697b      	ldr	r3, [r7, #20]
 801a300:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801a302:	4a0e      	ldr	r2, [pc, #56]	; (801a33c <tcp_input+0x4c0>)
 801a304:	697b      	ldr	r3, [r7, #20]
 801a306:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801a308:	6978      	ldr	r0, [r7, #20]
 801a30a:	f000 fa03 	bl	801a714 <tcp_listen_input>
      }
      pbuf_free(p);
 801a30e:	6878      	ldr	r0, [r7, #4]
 801a310:	f7fd fac8 	bl	80178a4 <pbuf_free>
      return;
 801a314:	e1a8      	b.n	801a668 <tcp_input+0x7ec>
 801a316:	bf00      	nop
 801a318:	2400f948 	.word	0x2400f948
 801a31c:	24008e50 	.word	0x24008e50
 801a320:	08022f88 	.word	0x08022f88
 801a324:	080230f8 	.word	0x080230f8
 801a328:	08023018 	.word	0x08023018
 801a32c:	2400f92c 	.word	0x2400f92c
 801a330:	08023124 	.word	0x08023124
 801a334:	2400f930 	.word	0x2400f930
 801a338:	08023150 	.word	0x08023150
 801a33c:	2400f928 	.word	0x2400f928
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801a340:	69fb      	ldr	r3, [r7, #28]
 801a342:	2b00      	cmp	r3, #0
 801a344:	f000 8158 	beq.w	801a5f8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801a348:	4b95      	ldr	r3, [pc, #596]	; (801a5a0 <tcp_input+0x724>)
 801a34a:	2200      	movs	r2, #0
 801a34c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	891a      	ldrh	r2, [r3, #8]
 801a352:	4b93      	ldr	r3, [pc, #588]	; (801a5a0 <tcp_input+0x724>)
 801a354:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801a356:	4a92      	ldr	r2, [pc, #584]	; (801a5a0 <tcp_input+0x724>)
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801a35c:	4b91      	ldr	r3, [pc, #580]	; (801a5a4 <tcp_input+0x728>)
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	4a8f      	ldr	r2, [pc, #572]	; (801a5a0 <tcp_input+0x724>)
 801a362:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801a364:	4b90      	ldr	r3, [pc, #576]	; (801a5a8 <tcp_input+0x72c>)
 801a366:	2200      	movs	r2, #0
 801a368:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801a36a:	4b90      	ldr	r3, [pc, #576]	; (801a5ac <tcp_input+0x730>)
 801a36c:	2200      	movs	r2, #0
 801a36e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801a370:	4b8f      	ldr	r3, [pc, #572]	; (801a5b0 <tcp_input+0x734>)
 801a372:	2200      	movs	r2, #0
 801a374:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801a376:	4b8f      	ldr	r3, [pc, #572]	; (801a5b4 <tcp_input+0x738>)
 801a378:	781b      	ldrb	r3, [r3, #0]
 801a37a:	f003 0308 	and.w	r3, r3, #8
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d006      	beq.n	801a390 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	7b5b      	ldrb	r3, [r3, #13]
 801a386:	f043 0301 	orr.w	r3, r3, #1
 801a38a:	b2da      	uxtb	r2, r3
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801a390:	69fb      	ldr	r3, [r7, #28]
 801a392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a394:	2b00      	cmp	r3, #0
 801a396:	d017      	beq.n	801a3c8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801a398:	69f8      	ldr	r0, [r7, #28]
 801a39a:	f7ff f859 	bl	8019450 <tcp_process_refused_data>
 801a39e:	4603      	mov	r3, r0
 801a3a0:	f113 0f0d 	cmn.w	r3, #13
 801a3a4:	d007      	beq.n	801a3b6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801a3a6:	69fb      	ldr	r3, [r7, #28]
 801a3a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d00c      	beq.n	801a3c8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801a3ae:	4b82      	ldr	r3, [pc, #520]	; (801a5b8 <tcp_input+0x73c>)
 801a3b0:	881b      	ldrh	r3, [r3, #0]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d008      	beq.n	801a3c8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801a3b6:	69fb      	ldr	r3, [r7, #28]
 801a3b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	f040 80e4 	bne.w	801a588 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801a3c0:	69f8      	ldr	r0, [r7, #28]
 801a3c2:	f003 fe05 	bl	801dfd0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801a3c6:	e0df      	b.n	801a588 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 801a3c8:	4a7c      	ldr	r2, [pc, #496]	; (801a5bc <tcp_input+0x740>)
 801a3ca:	69fb      	ldr	r3, [r7, #28]
 801a3cc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801a3ce:	69f8      	ldr	r0, [r7, #28]
 801a3d0:	f000 fb18 	bl	801aa04 <tcp_process>
 801a3d4:	4603      	mov	r3, r0
 801a3d6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801a3d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a3dc:	f113 0f0d 	cmn.w	r3, #13
 801a3e0:	f000 80d4 	beq.w	801a58c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 801a3e4:	4b71      	ldr	r3, [pc, #452]	; (801a5ac <tcp_input+0x730>)
 801a3e6:	781b      	ldrb	r3, [r3, #0]
 801a3e8:	f003 0308 	and.w	r3, r3, #8
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d015      	beq.n	801a41c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801a3f0:	69fb      	ldr	r3, [r7, #28]
 801a3f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d008      	beq.n	801a40c <tcp_input+0x590>
 801a3fa:	69fb      	ldr	r3, [r7, #28]
 801a3fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a400:	69fa      	ldr	r2, [r7, #28]
 801a402:	6912      	ldr	r2, [r2, #16]
 801a404:	f06f 010d 	mvn.w	r1, #13
 801a408:	4610      	mov	r0, r2
 801a40a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a40c:	69f9      	ldr	r1, [r7, #28]
 801a40e:	486c      	ldr	r0, [pc, #432]	; (801a5c0 <tcp_input+0x744>)
 801a410:	f7ff fbbc 	bl	8019b8c <tcp_pcb_remove>
        tcp_free(pcb);
 801a414:	69f8      	ldr	r0, [r7, #28]
 801a416:	f7fd fed3 	bl	80181c0 <tcp_free>
 801a41a:	e0da      	b.n	801a5d2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801a41c:	2300      	movs	r3, #0
 801a41e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801a420:	4b63      	ldr	r3, [pc, #396]	; (801a5b0 <tcp_input+0x734>)
 801a422:	881b      	ldrh	r3, [r3, #0]
 801a424:	2b00      	cmp	r3, #0
 801a426:	d01d      	beq.n	801a464 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801a428:	4b61      	ldr	r3, [pc, #388]	; (801a5b0 <tcp_input+0x734>)
 801a42a:	881b      	ldrh	r3, [r3, #0]
 801a42c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801a42e:	69fb      	ldr	r3, [r7, #28]
 801a430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a434:	2b00      	cmp	r3, #0
 801a436:	d00a      	beq.n	801a44e <tcp_input+0x5d2>
 801a438:	69fb      	ldr	r3, [r7, #28]
 801a43a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a43e:	69fa      	ldr	r2, [r7, #28]
 801a440:	6910      	ldr	r0, [r2, #16]
 801a442:	89fa      	ldrh	r2, [r7, #14]
 801a444:	69f9      	ldr	r1, [r7, #28]
 801a446:	4798      	blx	r3
 801a448:	4603      	mov	r3, r0
 801a44a:	74fb      	strb	r3, [r7, #19]
 801a44c:	e001      	b.n	801a452 <tcp_input+0x5d6>
 801a44e:	2300      	movs	r3, #0
 801a450:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801a452:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a456:	f113 0f0d 	cmn.w	r3, #13
 801a45a:	f000 8099 	beq.w	801a590 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 801a45e:	4b54      	ldr	r3, [pc, #336]	; (801a5b0 <tcp_input+0x734>)
 801a460:	2200      	movs	r2, #0
 801a462:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801a464:	69f8      	ldr	r0, [r7, #28]
 801a466:	f000 f915 	bl	801a694 <tcp_input_delayed_close>
 801a46a:	4603      	mov	r3, r0
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	f040 8091 	bne.w	801a594 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801a472:	4b4d      	ldr	r3, [pc, #308]	; (801a5a8 <tcp_input+0x72c>)
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d041      	beq.n	801a4fe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801a47a:	69fb      	ldr	r3, [r7, #28]
 801a47c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d006      	beq.n	801a490 <tcp_input+0x614>
 801a482:	4b50      	ldr	r3, [pc, #320]	; (801a5c4 <tcp_input+0x748>)
 801a484:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a488:	494f      	ldr	r1, [pc, #316]	; (801a5c8 <tcp_input+0x74c>)
 801a48a:	4850      	ldr	r0, [pc, #320]	; (801a5cc <tcp_input+0x750>)
 801a48c:	f005 fab6 	bl	801f9fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801a490:	69fb      	ldr	r3, [r7, #28]
 801a492:	8b5b      	ldrh	r3, [r3, #26]
 801a494:	f003 0310 	and.w	r3, r3, #16
 801a498:	2b00      	cmp	r3, #0
 801a49a:	d008      	beq.n	801a4ae <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801a49c:	4b42      	ldr	r3, [pc, #264]	; (801a5a8 <tcp_input+0x72c>)
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	f7fd f9ff 	bl	80178a4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801a4a6:	69f8      	ldr	r0, [r7, #28]
 801a4a8:	f7fe f9ce 	bl	8018848 <tcp_abort>
            goto aborted;
 801a4ac:	e091      	b.n	801a5d2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801a4ae:	69fb      	ldr	r3, [r7, #28]
 801a4b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d00c      	beq.n	801a4d2 <tcp_input+0x656>
 801a4b8:	69fb      	ldr	r3, [r7, #28]
 801a4ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a4be:	69fb      	ldr	r3, [r7, #28]
 801a4c0:	6918      	ldr	r0, [r3, #16]
 801a4c2:	4b39      	ldr	r3, [pc, #228]	; (801a5a8 <tcp_input+0x72c>)
 801a4c4:	681a      	ldr	r2, [r3, #0]
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	69f9      	ldr	r1, [r7, #28]
 801a4ca:	47a0      	blx	r4
 801a4cc:	4603      	mov	r3, r0
 801a4ce:	74fb      	strb	r3, [r7, #19]
 801a4d0:	e008      	b.n	801a4e4 <tcp_input+0x668>
 801a4d2:	4b35      	ldr	r3, [pc, #212]	; (801a5a8 <tcp_input+0x72c>)
 801a4d4:	681a      	ldr	r2, [r3, #0]
 801a4d6:	2300      	movs	r3, #0
 801a4d8:	69f9      	ldr	r1, [r7, #28]
 801a4da:	2000      	movs	r0, #0
 801a4dc:	f7ff f890 	bl	8019600 <tcp_recv_null>
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801a4e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a4e8:	f113 0f0d 	cmn.w	r3, #13
 801a4ec:	d054      	beq.n	801a598 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801a4ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d003      	beq.n	801a4fe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801a4f6:	4b2c      	ldr	r3, [pc, #176]	; (801a5a8 <tcp_input+0x72c>)
 801a4f8:	681a      	ldr	r2, [r3, #0]
 801a4fa:	69fb      	ldr	r3, [r7, #28]
 801a4fc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801a4fe:	4b2b      	ldr	r3, [pc, #172]	; (801a5ac <tcp_input+0x730>)
 801a500:	781b      	ldrb	r3, [r3, #0]
 801a502:	f003 0320 	and.w	r3, r3, #32
 801a506:	2b00      	cmp	r3, #0
 801a508:	d031      	beq.n	801a56e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 801a50a:	69fb      	ldr	r3, [r7, #28]
 801a50c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d009      	beq.n	801a526 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801a512:	69fb      	ldr	r3, [r7, #28]
 801a514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a516:	7b5a      	ldrb	r2, [r3, #13]
 801a518:	69fb      	ldr	r3, [r7, #28]
 801a51a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a51c:	f042 0220 	orr.w	r2, r2, #32
 801a520:	b2d2      	uxtb	r2, r2
 801a522:	735a      	strb	r2, [r3, #13]
 801a524:	e023      	b.n	801a56e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a526:	69fb      	ldr	r3, [r7, #28]
 801a528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a52a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801a52e:	4293      	cmp	r3, r2
 801a530:	d005      	beq.n	801a53e <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 801a532:	69fb      	ldr	r3, [r7, #28]
 801a534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a536:	3301      	adds	r3, #1
 801a538:	b29a      	uxth	r2, r3
 801a53a:	69fb      	ldr	r3, [r7, #28]
 801a53c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801a53e:	69fb      	ldr	r3, [r7, #28]
 801a540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a544:	2b00      	cmp	r3, #0
 801a546:	d00b      	beq.n	801a560 <tcp_input+0x6e4>
 801a548:	69fb      	ldr	r3, [r7, #28]
 801a54a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a54e:	69fb      	ldr	r3, [r7, #28]
 801a550:	6918      	ldr	r0, [r3, #16]
 801a552:	2300      	movs	r3, #0
 801a554:	2200      	movs	r2, #0
 801a556:	69f9      	ldr	r1, [r7, #28]
 801a558:	47a0      	blx	r4
 801a55a:	4603      	mov	r3, r0
 801a55c:	74fb      	strb	r3, [r7, #19]
 801a55e:	e001      	b.n	801a564 <tcp_input+0x6e8>
 801a560:	2300      	movs	r3, #0
 801a562:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801a564:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a568:	f113 0f0d 	cmn.w	r3, #13
 801a56c:	d016      	beq.n	801a59c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801a56e:	4b13      	ldr	r3, [pc, #76]	; (801a5bc <tcp_input+0x740>)
 801a570:	2200      	movs	r2, #0
 801a572:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801a574:	69f8      	ldr	r0, [r7, #28]
 801a576:	f000 f88d 	bl	801a694 <tcp_input_delayed_close>
 801a57a:	4603      	mov	r3, r0
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d127      	bne.n	801a5d0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801a580:	69f8      	ldr	r0, [r7, #28]
 801a582:	f002 ff1f 	bl	801d3c4 <tcp_output>
 801a586:	e024      	b.n	801a5d2 <tcp_input+0x756>
        goto aborted;
 801a588:	bf00      	nop
 801a58a:	e022      	b.n	801a5d2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801a58c:	bf00      	nop
 801a58e:	e020      	b.n	801a5d2 <tcp_input+0x756>
              goto aborted;
 801a590:	bf00      	nop
 801a592:	e01e      	b.n	801a5d2 <tcp_input+0x756>
          goto aborted;
 801a594:	bf00      	nop
 801a596:	e01c      	b.n	801a5d2 <tcp_input+0x756>
            goto aborted;
 801a598:	bf00      	nop
 801a59a:	e01a      	b.n	801a5d2 <tcp_input+0x756>
              goto aborted;
 801a59c:	bf00      	nop
 801a59e:	e018      	b.n	801a5d2 <tcp_input+0x756>
 801a5a0:	2400f938 	.word	0x2400f938
 801a5a4:	2400f948 	.word	0x2400f948
 801a5a8:	2400f968 	.word	0x2400f968
 801a5ac:	2400f965 	.word	0x2400f965
 801a5b0:	2400f960 	.word	0x2400f960
 801a5b4:	2400f964 	.word	0x2400f964
 801a5b8:	2400f962 	.word	0x2400f962
 801a5bc:	2400f96c 	.word	0x2400f96c
 801a5c0:	2400f92c 	.word	0x2400f92c
 801a5c4:	08022f88 	.word	0x08022f88
 801a5c8:	08023180 	.word	0x08023180
 801a5cc:	08023018 	.word	0x08023018
          goto aborted;
 801a5d0:	bf00      	nop
    tcp_input_pcb = NULL;
 801a5d2:	4b27      	ldr	r3, [pc, #156]	; (801a670 <tcp_input+0x7f4>)
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801a5d8:	4b26      	ldr	r3, [pc, #152]	; (801a674 <tcp_input+0x7f8>)
 801a5da:	2200      	movs	r2, #0
 801a5dc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801a5de:	4b26      	ldr	r3, [pc, #152]	; (801a678 <tcp_input+0x7fc>)
 801a5e0:	685b      	ldr	r3, [r3, #4]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d03f      	beq.n	801a666 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801a5e6:	4b24      	ldr	r3, [pc, #144]	; (801a678 <tcp_input+0x7fc>)
 801a5e8:	685b      	ldr	r3, [r3, #4]
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	f7fd f95a 	bl	80178a4 <pbuf_free>
      inseg.p = NULL;
 801a5f0:	4b21      	ldr	r3, [pc, #132]	; (801a678 <tcp_input+0x7fc>)
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801a5f6:	e036      	b.n	801a666 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801a5f8:	4b20      	ldr	r3, [pc, #128]	; (801a67c <tcp_input+0x800>)
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	899b      	ldrh	r3, [r3, #12]
 801a5fe:	b29b      	uxth	r3, r3
 801a600:	4618      	mov	r0, r3
 801a602:	f7f9 f97b 	bl	80138fc <lwip_htons>
 801a606:	4603      	mov	r3, r0
 801a608:	b2db      	uxtb	r3, r3
 801a60a:	f003 0304 	and.w	r3, r3, #4
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d118      	bne.n	801a644 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a612:	4b1b      	ldr	r3, [pc, #108]	; (801a680 <tcp_input+0x804>)
 801a614:	6819      	ldr	r1, [r3, #0]
 801a616:	4b1b      	ldr	r3, [pc, #108]	; (801a684 <tcp_input+0x808>)
 801a618:	881b      	ldrh	r3, [r3, #0]
 801a61a:	461a      	mov	r2, r3
 801a61c:	4b1a      	ldr	r3, [pc, #104]	; (801a688 <tcp_input+0x80c>)
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a622:	4b16      	ldr	r3, [pc, #88]	; (801a67c <tcp_input+0x800>)
 801a624:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a626:	885b      	ldrh	r3, [r3, #2]
 801a628:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a62a:	4a14      	ldr	r2, [pc, #80]	; (801a67c <tcp_input+0x800>)
 801a62c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a62e:	8812      	ldrh	r2, [r2, #0]
 801a630:	b292      	uxth	r2, r2
 801a632:	9202      	str	r2, [sp, #8]
 801a634:	9301      	str	r3, [sp, #4]
 801a636:	4b15      	ldr	r3, [pc, #84]	; (801a68c <tcp_input+0x810>)
 801a638:	9300      	str	r3, [sp, #0]
 801a63a:	4b15      	ldr	r3, [pc, #84]	; (801a690 <tcp_input+0x814>)
 801a63c:	4602      	mov	r2, r0
 801a63e:	2000      	movs	r0, #0
 801a640:	f003 fc74 	bl	801df2c <tcp_rst>
    pbuf_free(p);
 801a644:	6878      	ldr	r0, [r7, #4]
 801a646:	f7fd f92d 	bl	80178a4 <pbuf_free>
  return;
 801a64a:	e00c      	b.n	801a666 <tcp_input+0x7ea>
    goto dropped;
 801a64c:	bf00      	nop
 801a64e:	e006      	b.n	801a65e <tcp_input+0x7e2>
    goto dropped;
 801a650:	bf00      	nop
 801a652:	e004      	b.n	801a65e <tcp_input+0x7e2>
    goto dropped;
 801a654:	bf00      	nop
 801a656:	e002      	b.n	801a65e <tcp_input+0x7e2>
      goto dropped;
 801a658:	bf00      	nop
 801a65a:	e000      	b.n	801a65e <tcp_input+0x7e2>
      goto dropped;
 801a65c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801a65e:	6878      	ldr	r0, [r7, #4]
 801a660:	f7fd f920 	bl	80178a4 <pbuf_free>
 801a664:	e000      	b.n	801a668 <tcp_input+0x7ec>
  return;
 801a666:	bf00      	nop
}
 801a668:	3724      	adds	r7, #36	; 0x24
 801a66a:	46bd      	mov	sp, r7
 801a66c:	bd90      	pop	{r4, r7, pc}
 801a66e:	bf00      	nop
 801a670:	2400f96c 	.word	0x2400f96c
 801a674:	2400f968 	.word	0x2400f968
 801a678:	2400f938 	.word	0x2400f938
 801a67c:	2400f948 	.word	0x2400f948
 801a680:	2400f95c 	.word	0x2400f95c
 801a684:	2400f962 	.word	0x2400f962
 801a688:	2400f958 	.word	0x2400f958
 801a68c:	24008e60 	.word	0x24008e60
 801a690:	24008e64 	.word	0x24008e64

0801a694 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801a694:	b580      	push	{r7, lr}
 801a696:	b082      	sub	sp, #8
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d106      	bne.n	801a6b0 <tcp_input_delayed_close+0x1c>
 801a6a2:	4b17      	ldr	r3, [pc, #92]	; (801a700 <tcp_input_delayed_close+0x6c>)
 801a6a4:	f240 225a 	movw	r2, #602	; 0x25a
 801a6a8:	4916      	ldr	r1, [pc, #88]	; (801a704 <tcp_input_delayed_close+0x70>)
 801a6aa:	4817      	ldr	r0, [pc, #92]	; (801a708 <tcp_input_delayed_close+0x74>)
 801a6ac:	f005 f9a6 	bl	801f9fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 801a6b0:	4b16      	ldr	r3, [pc, #88]	; (801a70c <tcp_input_delayed_close+0x78>)
 801a6b2:	781b      	ldrb	r3, [r3, #0]
 801a6b4:	f003 0310 	and.w	r3, r3, #16
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d01c      	beq.n	801a6f6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	8b5b      	ldrh	r3, [r3, #26]
 801a6c0:	f003 0310 	and.w	r3, r3, #16
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d10d      	bne.n	801a6e4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d008      	beq.n	801a6e4 <tcp_input_delayed_close+0x50>
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a6d8:	687a      	ldr	r2, [r7, #4]
 801a6da:	6912      	ldr	r2, [r2, #16]
 801a6dc:	f06f 010e 	mvn.w	r1, #14
 801a6e0:	4610      	mov	r0, r2
 801a6e2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a6e4:	6879      	ldr	r1, [r7, #4]
 801a6e6:	480a      	ldr	r0, [pc, #40]	; (801a710 <tcp_input_delayed_close+0x7c>)
 801a6e8:	f7ff fa50 	bl	8019b8c <tcp_pcb_remove>
    tcp_free(pcb);
 801a6ec:	6878      	ldr	r0, [r7, #4]
 801a6ee:	f7fd fd67 	bl	80181c0 <tcp_free>
    return 1;
 801a6f2:	2301      	movs	r3, #1
 801a6f4:	e000      	b.n	801a6f8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801a6f6:	2300      	movs	r3, #0
}
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	3708      	adds	r7, #8
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	bd80      	pop	{r7, pc}
 801a700:	08022f88 	.word	0x08022f88
 801a704:	0802319c 	.word	0x0802319c
 801a708:	08023018 	.word	0x08023018
 801a70c:	2400f965 	.word	0x2400f965
 801a710:	2400f92c 	.word	0x2400f92c

0801a714 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801a714:	b590      	push	{r4, r7, lr}
 801a716:	b08b      	sub	sp, #44	; 0x2c
 801a718:	af04      	add	r7, sp, #16
 801a71a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801a71c:	4b6f      	ldr	r3, [pc, #444]	; (801a8dc <tcp_listen_input+0x1c8>)
 801a71e:	781b      	ldrb	r3, [r3, #0]
 801a720:	f003 0304 	and.w	r3, r3, #4
 801a724:	2b00      	cmp	r3, #0
 801a726:	f040 80d2 	bne.w	801a8ce <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d106      	bne.n	801a73e <tcp_listen_input+0x2a>
 801a730:	4b6b      	ldr	r3, [pc, #428]	; (801a8e0 <tcp_listen_input+0x1cc>)
 801a732:	f240 2281 	movw	r2, #641	; 0x281
 801a736:	496b      	ldr	r1, [pc, #428]	; (801a8e4 <tcp_listen_input+0x1d0>)
 801a738:	486b      	ldr	r0, [pc, #428]	; (801a8e8 <tcp_listen_input+0x1d4>)
 801a73a:	f005 f95f 	bl	801f9fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801a73e:	4b67      	ldr	r3, [pc, #412]	; (801a8dc <tcp_listen_input+0x1c8>)
 801a740:	781b      	ldrb	r3, [r3, #0]
 801a742:	f003 0310 	and.w	r3, r3, #16
 801a746:	2b00      	cmp	r3, #0
 801a748:	d019      	beq.n	801a77e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a74a:	4b68      	ldr	r3, [pc, #416]	; (801a8ec <tcp_listen_input+0x1d8>)
 801a74c:	6819      	ldr	r1, [r3, #0]
 801a74e:	4b68      	ldr	r3, [pc, #416]	; (801a8f0 <tcp_listen_input+0x1dc>)
 801a750:	881b      	ldrh	r3, [r3, #0]
 801a752:	461a      	mov	r2, r3
 801a754:	4b67      	ldr	r3, [pc, #412]	; (801a8f4 <tcp_listen_input+0x1e0>)
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a75a:	4b67      	ldr	r3, [pc, #412]	; (801a8f8 <tcp_listen_input+0x1e4>)
 801a75c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a75e:	885b      	ldrh	r3, [r3, #2]
 801a760:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a762:	4a65      	ldr	r2, [pc, #404]	; (801a8f8 <tcp_listen_input+0x1e4>)
 801a764:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a766:	8812      	ldrh	r2, [r2, #0]
 801a768:	b292      	uxth	r2, r2
 801a76a:	9202      	str	r2, [sp, #8]
 801a76c:	9301      	str	r3, [sp, #4]
 801a76e:	4b63      	ldr	r3, [pc, #396]	; (801a8fc <tcp_listen_input+0x1e8>)
 801a770:	9300      	str	r3, [sp, #0]
 801a772:	4b63      	ldr	r3, [pc, #396]	; (801a900 <tcp_listen_input+0x1ec>)
 801a774:	4602      	mov	r2, r0
 801a776:	6878      	ldr	r0, [r7, #4]
 801a778:	f003 fbd8 	bl	801df2c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801a77c:	e0a9      	b.n	801a8d2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801a77e:	4b57      	ldr	r3, [pc, #348]	; (801a8dc <tcp_listen_input+0x1c8>)
 801a780:	781b      	ldrb	r3, [r3, #0]
 801a782:	f003 0302 	and.w	r3, r3, #2
 801a786:	2b00      	cmp	r3, #0
 801a788:	f000 80a3 	beq.w	801a8d2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	7d5b      	ldrb	r3, [r3, #21]
 801a790:	4618      	mov	r0, r3
 801a792:	f7ff f859 	bl	8019848 <tcp_alloc>
 801a796:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801a798:	697b      	ldr	r3, [r7, #20]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d111      	bne.n	801a7c2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	699b      	ldr	r3, [r3, #24]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d00a      	beq.n	801a7bc <tcp_listen_input+0xa8>
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	699b      	ldr	r3, [r3, #24]
 801a7aa:	687a      	ldr	r2, [r7, #4]
 801a7ac:	6910      	ldr	r0, [r2, #16]
 801a7ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a7b2:	2100      	movs	r1, #0
 801a7b4:	4798      	blx	r3
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	73bb      	strb	r3, [r7, #14]
      return;
 801a7ba:	e08b      	b.n	801a8d4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801a7bc:	23f0      	movs	r3, #240	; 0xf0
 801a7be:	73bb      	strb	r3, [r7, #14]
      return;
 801a7c0:	e088      	b.n	801a8d4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801a7c2:	4b50      	ldr	r3, [pc, #320]	; (801a904 <tcp_listen_input+0x1f0>)
 801a7c4:	695a      	ldr	r2, [r3, #20]
 801a7c6:	697b      	ldr	r3, [r7, #20]
 801a7c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801a7ca:	4b4e      	ldr	r3, [pc, #312]	; (801a904 <tcp_listen_input+0x1f0>)
 801a7cc:	691a      	ldr	r2, [r3, #16]
 801a7ce:	697b      	ldr	r3, [r7, #20]
 801a7d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	8ada      	ldrh	r2, [r3, #22]
 801a7d6:	697b      	ldr	r3, [r7, #20]
 801a7d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801a7da:	4b47      	ldr	r3, [pc, #284]	; (801a8f8 <tcp_listen_input+0x1e4>)
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	881b      	ldrh	r3, [r3, #0]
 801a7e0:	b29a      	uxth	r2, r3
 801a7e2:	697b      	ldr	r3, [r7, #20]
 801a7e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801a7e6:	697b      	ldr	r3, [r7, #20]
 801a7e8:	2203      	movs	r2, #3
 801a7ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801a7ec:	4b41      	ldr	r3, [pc, #260]	; (801a8f4 <tcp_listen_input+0x1e0>)
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	1c5a      	adds	r2, r3, #1
 801a7f2:	697b      	ldr	r3, [r7, #20]
 801a7f4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801a7f6:	697b      	ldr	r3, [r7, #20]
 801a7f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a7fa:	697b      	ldr	r3, [r7, #20]
 801a7fc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801a7fe:	6978      	ldr	r0, [r7, #20]
 801a800:	f7ff fa58 	bl	8019cb4 <tcp_next_iss>
 801a804:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801a806:	697b      	ldr	r3, [r7, #20]
 801a808:	693a      	ldr	r2, [r7, #16]
 801a80a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801a80c:	697b      	ldr	r3, [r7, #20]
 801a80e:	693a      	ldr	r2, [r7, #16]
 801a810:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801a812:	697b      	ldr	r3, [r7, #20]
 801a814:	693a      	ldr	r2, [r7, #16]
 801a816:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801a818:	697b      	ldr	r3, [r7, #20]
 801a81a:	693a      	ldr	r2, [r7, #16]
 801a81c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801a81e:	4b35      	ldr	r3, [pc, #212]	; (801a8f4 <tcp_listen_input+0x1e0>)
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	1e5a      	subs	r2, r3, #1
 801a824:	697b      	ldr	r3, [r7, #20]
 801a826:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	691a      	ldr	r2, [r3, #16]
 801a82c:	697b      	ldr	r3, [r7, #20]
 801a82e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801a830:	697b      	ldr	r3, [r7, #20]
 801a832:	687a      	ldr	r2, [r7, #4]
 801a834:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	7a5b      	ldrb	r3, [r3, #9]
 801a83a:	f003 030c 	and.w	r3, r3, #12
 801a83e:	b2da      	uxtb	r2, r3
 801a840:	697b      	ldr	r3, [r7, #20]
 801a842:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	7a1a      	ldrb	r2, [r3, #8]
 801a848:	697b      	ldr	r3, [r7, #20]
 801a84a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801a84c:	4b2e      	ldr	r3, [pc, #184]	; (801a908 <tcp_listen_input+0x1f4>)
 801a84e:	681a      	ldr	r2, [r3, #0]
 801a850:	697b      	ldr	r3, [r7, #20]
 801a852:	60da      	str	r2, [r3, #12]
 801a854:	4a2c      	ldr	r2, [pc, #176]	; (801a908 <tcp_listen_input+0x1f4>)
 801a856:	697b      	ldr	r3, [r7, #20]
 801a858:	6013      	str	r3, [r2, #0]
 801a85a:	f003 fee1 	bl	801e620 <tcp_timer_needed>
 801a85e:	4b2b      	ldr	r3, [pc, #172]	; (801a90c <tcp_listen_input+0x1f8>)
 801a860:	2201      	movs	r2, #1
 801a862:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801a864:	6978      	ldr	r0, [r7, #20]
 801a866:	f001 fd8f 	bl	801c388 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801a86a:	4b23      	ldr	r3, [pc, #140]	; (801a8f8 <tcp_listen_input+0x1e4>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	89db      	ldrh	r3, [r3, #14]
 801a870:	b29a      	uxth	r2, r3
 801a872:	697b      	ldr	r3, [r7, #20]
 801a874:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801a878:	697b      	ldr	r3, [r7, #20]
 801a87a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a87e:	697b      	ldr	r3, [r7, #20]
 801a880:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801a884:	697b      	ldr	r3, [r7, #20]
 801a886:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801a888:	697b      	ldr	r3, [r7, #20]
 801a88a:	3304      	adds	r3, #4
 801a88c:	4618      	mov	r0, r3
 801a88e:	f7fa fb0d 	bl	8014eac <ip4_route>
 801a892:	4601      	mov	r1, r0
 801a894:	697b      	ldr	r3, [r7, #20]
 801a896:	3304      	adds	r3, #4
 801a898:	461a      	mov	r2, r3
 801a89a:	4620      	mov	r0, r4
 801a89c:	f7ff fa30 	bl	8019d00 <tcp_eff_send_mss_netif>
 801a8a0:	4603      	mov	r3, r0
 801a8a2:	461a      	mov	r2, r3
 801a8a4:	697b      	ldr	r3, [r7, #20]
 801a8a6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801a8a8:	2112      	movs	r1, #18
 801a8aa:	6978      	ldr	r0, [r7, #20]
 801a8ac:	f002 fc9c 	bl	801d1e8 <tcp_enqueue_flags>
 801a8b0:	4603      	mov	r3, r0
 801a8b2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801a8b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d004      	beq.n	801a8c6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801a8bc:	2100      	movs	r1, #0
 801a8be:	6978      	ldr	r0, [r7, #20]
 801a8c0:	f7fd ff04 	bl	80186cc <tcp_abandon>
      return;
 801a8c4:	e006      	b.n	801a8d4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801a8c6:	6978      	ldr	r0, [r7, #20]
 801a8c8:	f002 fd7c 	bl	801d3c4 <tcp_output>
  return;
 801a8cc:	e001      	b.n	801a8d2 <tcp_listen_input+0x1be>
    return;
 801a8ce:	bf00      	nop
 801a8d0:	e000      	b.n	801a8d4 <tcp_listen_input+0x1c0>
  return;
 801a8d2:	bf00      	nop
}
 801a8d4:	371c      	adds	r7, #28
 801a8d6:	46bd      	mov	sp, r7
 801a8d8:	bd90      	pop	{r4, r7, pc}
 801a8da:	bf00      	nop
 801a8dc:	2400f964 	.word	0x2400f964
 801a8e0:	08022f88 	.word	0x08022f88
 801a8e4:	080231c4 	.word	0x080231c4
 801a8e8:	08023018 	.word	0x08023018
 801a8ec:	2400f95c 	.word	0x2400f95c
 801a8f0:	2400f962 	.word	0x2400f962
 801a8f4:	2400f958 	.word	0x2400f958
 801a8f8:	2400f948 	.word	0x2400f948
 801a8fc:	24008e60 	.word	0x24008e60
 801a900:	24008e64 	.word	0x24008e64
 801a904:	24008e50 	.word	0x24008e50
 801a908:	2400f92c 	.word	0x2400f92c
 801a90c:	2400f934 	.word	0x2400f934

0801a910 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b086      	sub	sp, #24
 801a914:	af04      	add	r7, sp, #16
 801a916:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801a918:	4b2f      	ldr	r3, [pc, #188]	; (801a9d8 <tcp_timewait_input+0xc8>)
 801a91a:	781b      	ldrb	r3, [r3, #0]
 801a91c:	f003 0304 	and.w	r3, r3, #4
 801a920:	2b00      	cmp	r3, #0
 801a922:	d153      	bne.n	801a9cc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	2b00      	cmp	r3, #0
 801a928:	d106      	bne.n	801a938 <tcp_timewait_input+0x28>
 801a92a:	4b2c      	ldr	r3, [pc, #176]	; (801a9dc <tcp_timewait_input+0xcc>)
 801a92c:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a930:	492b      	ldr	r1, [pc, #172]	; (801a9e0 <tcp_timewait_input+0xd0>)
 801a932:	482c      	ldr	r0, [pc, #176]	; (801a9e4 <tcp_timewait_input+0xd4>)
 801a934:	f005 f862 	bl	801f9fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801a938:	4b27      	ldr	r3, [pc, #156]	; (801a9d8 <tcp_timewait_input+0xc8>)
 801a93a:	781b      	ldrb	r3, [r3, #0]
 801a93c:	f003 0302 	and.w	r3, r3, #2
 801a940:	2b00      	cmp	r3, #0
 801a942:	d02a      	beq.n	801a99a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801a944:	4b28      	ldr	r3, [pc, #160]	; (801a9e8 <tcp_timewait_input+0xd8>)
 801a946:	681a      	ldr	r2, [r3, #0]
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a94c:	1ad3      	subs	r3, r2, r3
 801a94e:	2b00      	cmp	r3, #0
 801a950:	db2d      	blt.n	801a9ae <tcp_timewait_input+0x9e>
 801a952:	4b25      	ldr	r3, [pc, #148]	; (801a9e8 <tcp_timewait_input+0xd8>)
 801a954:	681a      	ldr	r2, [r3, #0]
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a95a:	6879      	ldr	r1, [r7, #4]
 801a95c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a95e:	440b      	add	r3, r1
 801a960:	1ad3      	subs	r3, r2, r3
 801a962:	2b00      	cmp	r3, #0
 801a964:	dc23      	bgt.n	801a9ae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a966:	4b21      	ldr	r3, [pc, #132]	; (801a9ec <tcp_timewait_input+0xdc>)
 801a968:	6819      	ldr	r1, [r3, #0]
 801a96a:	4b21      	ldr	r3, [pc, #132]	; (801a9f0 <tcp_timewait_input+0xe0>)
 801a96c:	881b      	ldrh	r3, [r3, #0]
 801a96e:	461a      	mov	r2, r3
 801a970:	4b1d      	ldr	r3, [pc, #116]	; (801a9e8 <tcp_timewait_input+0xd8>)
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a976:	4b1f      	ldr	r3, [pc, #124]	; (801a9f4 <tcp_timewait_input+0xe4>)
 801a978:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a97a:	885b      	ldrh	r3, [r3, #2]
 801a97c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a97e:	4a1d      	ldr	r2, [pc, #116]	; (801a9f4 <tcp_timewait_input+0xe4>)
 801a980:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a982:	8812      	ldrh	r2, [r2, #0]
 801a984:	b292      	uxth	r2, r2
 801a986:	9202      	str	r2, [sp, #8]
 801a988:	9301      	str	r3, [sp, #4]
 801a98a:	4b1b      	ldr	r3, [pc, #108]	; (801a9f8 <tcp_timewait_input+0xe8>)
 801a98c:	9300      	str	r3, [sp, #0]
 801a98e:	4b1b      	ldr	r3, [pc, #108]	; (801a9fc <tcp_timewait_input+0xec>)
 801a990:	4602      	mov	r2, r0
 801a992:	6878      	ldr	r0, [r7, #4]
 801a994:	f003 faca 	bl	801df2c <tcp_rst>
      return;
 801a998:	e01b      	b.n	801a9d2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801a99a:	4b0f      	ldr	r3, [pc, #60]	; (801a9d8 <tcp_timewait_input+0xc8>)
 801a99c:	781b      	ldrb	r3, [r3, #0]
 801a99e:	f003 0301 	and.w	r3, r3, #1
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d003      	beq.n	801a9ae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801a9a6:	4b16      	ldr	r3, [pc, #88]	; (801aa00 <tcp_timewait_input+0xf0>)
 801a9a8:	681a      	ldr	r2, [r3, #0]
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801a9ae:	4b10      	ldr	r3, [pc, #64]	; (801a9f0 <tcp_timewait_input+0xe0>)
 801a9b0:	881b      	ldrh	r3, [r3, #0]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d00c      	beq.n	801a9d0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	8b5b      	ldrh	r3, [r3, #26]
 801a9ba:	f043 0302 	orr.w	r3, r3, #2
 801a9be:	b29a      	uxth	r2, r3
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a9c4:	6878      	ldr	r0, [r7, #4]
 801a9c6:	f002 fcfd 	bl	801d3c4 <tcp_output>
  }
  return;
 801a9ca:	e001      	b.n	801a9d0 <tcp_timewait_input+0xc0>
    return;
 801a9cc:	bf00      	nop
 801a9ce:	e000      	b.n	801a9d2 <tcp_timewait_input+0xc2>
  return;
 801a9d0:	bf00      	nop
}
 801a9d2:	3708      	adds	r7, #8
 801a9d4:	46bd      	mov	sp, r7
 801a9d6:	bd80      	pop	{r7, pc}
 801a9d8:	2400f964 	.word	0x2400f964
 801a9dc:	08022f88 	.word	0x08022f88
 801a9e0:	080231e4 	.word	0x080231e4
 801a9e4:	08023018 	.word	0x08023018
 801a9e8:	2400f958 	.word	0x2400f958
 801a9ec:	2400f95c 	.word	0x2400f95c
 801a9f0:	2400f962 	.word	0x2400f962
 801a9f4:	2400f948 	.word	0x2400f948
 801a9f8:	24008e60 	.word	0x24008e60
 801a9fc:	24008e64 	.word	0x24008e64
 801aa00:	2400f920 	.word	0x2400f920

0801aa04 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801aa04:	b590      	push	{r4, r7, lr}
 801aa06:	b08d      	sub	sp, #52	; 0x34
 801aa08:	af04      	add	r7, sp, #16
 801aa0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801aa10:	2300      	movs	r3, #0
 801aa12:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d106      	bne.n	801aa28 <tcp_process+0x24>
 801aa1a:	4b9d      	ldr	r3, [pc, #628]	; (801ac90 <tcp_process+0x28c>)
 801aa1c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801aa20:	499c      	ldr	r1, [pc, #624]	; (801ac94 <tcp_process+0x290>)
 801aa22:	489d      	ldr	r0, [pc, #628]	; (801ac98 <tcp_process+0x294>)
 801aa24:	f004 ffea 	bl	801f9fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801aa28:	4b9c      	ldr	r3, [pc, #624]	; (801ac9c <tcp_process+0x298>)
 801aa2a:	781b      	ldrb	r3, [r3, #0]
 801aa2c:	f003 0304 	and.w	r3, r3, #4
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d04e      	beq.n	801aad2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	7d1b      	ldrb	r3, [r3, #20]
 801aa38:	2b02      	cmp	r3, #2
 801aa3a:	d108      	bne.n	801aa4e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aa40:	4b97      	ldr	r3, [pc, #604]	; (801aca0 <tcp_process+0x29c>)
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	429a      	cmp	r2, r3
 801aa46:	d123      	bne.n	801aa90 <tcp_process+0x8c>
        acceptable = 1;
 801aa48:	2301      	movs	r3, #1
 801aa4a:	76fb      	strb	r3, [r7, #27]
 801aa4c:	e020      	b.n	801aa90 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801aa52:	4b94      	ldr	r3, [pc, #592]	; (801aca4 <tcp_process+0x2a0>)
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	429a      	cmp	r2, r3
 801aa58:	d102      	bne.n	801aa60 <tcp_process+0x5c>
        acceptable = 1;
 801aa5a:	2301      	movs	r3, #1
 801aa5c:	76fb      	strb	r3, [r7, #27]
 801aa5e:	e017      	b.n	801aa90 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801aa60:	4b90      	ldr	r3, [pc, #576]	; (801aca4 <tcp_process+0x2a0>)
 801aa62:	681a      	ldr	r2, [r3, #0]
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa68:	1ad3      	subs	r3, r2, r3
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	db10      	blt.n	801aa90 <tcp_process+0x8c>
 801aa6e:	4b8d      	ldr	r3, [pc, #564]	; (801aca4 <tcp_process+0x2a0>)
 801aa70:	681a      	ldr	r2, [r3, #0]
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa76:	6879      	ldr	r1, [r7, #4]
 801aa78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801aa7a:	440b      	add	r3, r1
 801aa7c:	1ad3      	subs	r3, r2, r3
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	dc06      	bgt.n	801aa90 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	8b5b      	ldrh	r3, [r3, #26]
 801aa86:	f043 0302 	orr.w	r3, r3, #2
 801aa8a:	b29a      	uxth	r2, r3
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801aa90:	7efb      	ldrb	r3, [r7, #27]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d01b      	beq.n	801aace <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	7d1b      	ldrb	r3, [r3, #20]
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d106      	bne.n	801aaac <tcp_process+0xa8>
 801aa9e:	4b7c      	ldr	r3, [pc, #496]	; (801ac90 <tcp_process+0x28c>)
 801aaa0:	f44f 724e 	mov.w	r2, #824	; 0x338
 801aaa4:	4980      	ldr	r1, [pc, #512]	; (801aca8 <tcp_process+0x2a4>)
 801aaa6:	487c      	ldr	r0, [pc, #496]	; (801ac98 <tcp_process+0x294>)
 801aaa8:	f004 ffa8 	bl	801f9fc <iprintf>
      recv_flags |= TF_RESET;
 801aaac:	4b7f      	ldr	r3, [pc, #508]	; (801acac <tcp_process+0x2a8>)
 801aaae:	781b      	ldrb	r3, [r3, #0]
 801aab0:	f043 0308 	orr.w	r3, r3, #8
 801aab4:	b2da      	uxtb	r2, r3
 801aab6:	4b7d      	ldr	r3, [pc, #500]	; (801acac <tcp_process+0x2a8>)
 801aab8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	8b5b      	ldrh	r3, [r3, #26]
 801aabe:	f023 0301 	bic.w	r3, r3, #1
 801aac2:	b29a      	uxth	r2, r3
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801aac8:	f06f 030d 	mvn.w	r3, #13
 801aacc:	e37a      	b.n	801b1c4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801aace:	2300      	movs	r3, #0
 801aad0:	e378      	b.n	801b1c4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801aad2:	4b72      	ldr	r3, [pc, #456]	; (801ac9c <tcp_process+0x298>)
 801aad4:	781b      	ldrb	r3, [r3, #0]
 801aad6:	f003 0302 	and.w	r3, r3, #2
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d010      	beq.n	801ab00 <tcp_process+0xfc>
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	7d1b      	ldrb	r3, [r3, #20]
 801aae2:	2b02      	cmp	r3, #2
 801aae4:	d00c      	beq.n	801ab00 <tcp_process+0xfc>
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	7d1b      	ldrb	r3, [r3, #20]
 801aaea:	2b03      	cmp	r3, #3
 801aaec:	d008      	beq.n	801ab00 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	8b5b      	ldrh	r3, [r3, #26]
 801aaf2:	f043 0302 	orr.w	r3, r3, #2
 801aaf6:	b29a      	uxth	r2, r3
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801aafc:	2300      	movs	r3, #0
 801aafe:	e361      	b.n	801b1c4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	8b5b      	ldrh	r3, [r3, #26]
 801ab04:	f003 0310 	and.w	r3, r3, #16
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d103      	bne.n	801ab14 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801ab0c:	4b68      	ldr	r3, [pc, #416]	; (801acb0 <tcp_process+0x2ac>)
 801ab0e:	681a      	ldr	r2, [r3, #0]
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	2200      	movs	r2, #0
 801ab18:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	2200      	movs	r2, #0
 801ab20:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801ab24:	6878      	ldr	r0, [r7, #4]
 801ab26:	f001 fc2f 	bl	801c388 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	7d1b      	ldrb	r3, [r3, #20]
 801ab2e:	3b02      	subs	r3, #2
 801ab30:	2b07      	cmp	r3, #7
 801ab32:	f200 8337 	bhi.w	801b1a4 <tcp_process+0x7a0>
 801ab36:	a201      	add	r2, pc, #4	; (adr r2, 801ab3c <tcp_process+0x138>)
 801ab38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab3c:	0801ab5d 	.word	0x0801ab5d
 801ab40:	0801ad8d 	.word	0x0801ad8d
 801ab44:	0801af05 	.word	0x0801af05
 801ab48:	0801af2f 	.word	0x0801af2f
 801ab4c:	0801b053 	.word	0x0801b053
 801ab50:	0801af05 	.word	0x0801af05
 801ab54:	0801b0df 	.word	0x0801b0df
 801ab58:	0801b16f 	.word	0x0801b16f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801ab5c:	4b4f      	ldr	r3, [pc, #316]	; (801ac9c <tcp_process+0x298>)
 801ab5e:	781b      	ldrb	r3, [r3, #0]
 801ab60:	f003 0310 	and.w	r3, r3, #16
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	f000 80e4 	beq.w	801ad32 <tcp_process+0x32e>
 801ab6a:	4b4c      	ldr	r3, [pc, #304]	; (801ac9c <tcp_process+0x298>)
 801ab6c:	781b      	ldrb	r3, [r3, #0]
 801ab6e:	f003 0302 	and.w	r3, r3, #2
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	f000 80dd 	beq.w	801ad32 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab7c:	1c5a      	adds	r2, r3, #1
 801ab7e:	4b48      	ldr	r3, [pc, #288]	; (801aca0 <tcp_process+0x29c>)
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	429a      	cmp	r2, r3
 801ab84:	f040 80d5 	bne.w	801ad32 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801ab88:	4b46      	ldr	r3, [pc, #280]	; (801aca4 <tcp_process+0x2a0>)
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	1c5a      	adds	r2, r3, #1
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801ab9a:	4b41      	ldr	r3, [pc, #260]	; (801aca0 <tcp_process+0x29c>)
 801ab9c:	681a      	ldr	r2, [r3, #0]
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801aba2:	4b44      	ldr	r3, [pc, #272]	; (801acb4 <tcp_process+0x2b0>)
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	89db      	ldrh	r3, [r3, #14]
 801aba8:	b29a      	uxth	r2, r3
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801abbc:	4b39      	ldr	r3, [pc, #228]	; (801aca4 <tcp_process+0x2a0>)
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	1e5a      	subs	r2, r3, #1
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	2204      	movs	r2, #4
 801abca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	3304      	adds	r3, #4
 801abd4:	4618      	mov	r0, r3
 801abd6:	f7fa f969 	bl	8014eac <ip4_route>
 801abda:	4601      	mov	r1, r0
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	3304      	adds	r3, #4
 801abe0:	461a      	mov	r2, r3
 801abe2:	4620      	mov	r0, r4
 801abe4:	f7ff f88c 	bl	8019d00 <tcp_eff_send_mss_netif>
 801abe8:	4603      	mov	r3, r0
 801abea:	461a      	mov	r2, r3
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abf4:	009a      	lsls	r2, r3, #2
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abfa:	005b      	lsls	r3, r3, #1
 801abfc:	f241 111c 	movw	r1, #4380	; 0x111c
 801ac00:	428b      	cmp	r3, r1
 801ac02:	bf38      	it	cc
 801ac04:	460b      	movcc	r3, r1
 801ac06:	429a      	cmp	r2, r3
 801ac08:	d204      	bcs.n	801ac14 <tcp_process+0x210>
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ac0e:	009b      	lsls	r3, r3, #2
 801ac10:	b29b      	uxth	r3, r3
 801ac12:	e00d      	b.n	801ac30 <tcp_process+0x22c>
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ac18:	005b      	lsls	r3, r3, #1
 801ac1a:	f241 121c 	movw	r2, #4380	; 0x111c
 801ac1e:	4293      	cmp	r3, r2
 801ac20:	d904      	bls.n	801ac2c <tcp_process+0x228>
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ac26:	005b      	lsls	r3, r3, #1
 801ac28:	b29b      	uxth	r3, r3
 801ac2a:	e001      	b.n	801ac30 <tcp_process+0x22c>
 801ac2c:	f241 131c 	movw	r3, #4380	; 0x111c
 801ac30:	687a      	ldr	r2, [r7, #4]
 801ac32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d106      	bne.n	801ac4e <tcp_process+0x24a>
 801ac40:	4b13      	ldr	r3, [pc, #76]	; (801ac90 <tcp_process+0x28c>)
 801ac42:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801ac46:	491c      	ldr	r1, [pc, #112]	; (801acb8 <tcp_process+0x2b4>)
 801ac48:	4813      	ldr	r0, [pc, #76]	; (801ac98 <tcp_process+0x294>)
 801ac4a:	f004 fed7 	bl	801f9fc <iprintf>
        --pcb->snd_queuelen;
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac54:	3b01      	subs	r3, #1
 801ac56:	b29a      	uxth	r2, r3
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ac62:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801ac64:	69fb      	ldr	r3, [r7, #28]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d12a      	bne.n	801acc0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac6e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801ac70:	69fb      	ldr	r3, [r7, #28]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d106      	bne.n	801ac84 <tcp_process+0x280>
 801ac76:	4b06      	ldr	r3, [pc, #24]	; (801ac90 <tcp_process+0x28c>)
 801ac78:	f44f 725d 	mov.w	r2, #884	; 0x374
 801ac7c:	490f      	ldr	r1, [pc, #60]	; (801acbc <tcp_process+0x2b8>)
 801ac7e:	4806      	ldr	r0, [pc, #24]	; (801ac98 <tcp_process+0x294>)
 801ac80:	f004 febc 	bl	801f9fc <iprintf>
          pcb->unsent = rseg->next;
 801ac84:	69fb      	ldr	r3, [r7, #28]
 801ac86:	681a      	ldr	r2, [r3, #0]
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	66da      	str	r2, [r3, #108]	; 0x6c
 801ac8c:	e01c      	b.n	801acc8 <tcp_process+0x2c4>
 801ac8e:	bf00      	nop
 801ac90:	08022f88 	.word	0x08022f88
 801ac94:	08023204 	.word	0x08023204
 801ac98:	08023018 	.word	0x08023018
 801ac9c:	2400f964 	.word	0x2400f964
 801aca0:	2400f95c 	.word	0x2400f95c
 801aca4:	2400f958 	.word	0x2400f958
 801aca8:	08023220 	.word	0x08023220
 801acac:	2400f965 	.word	0x2400f965
 801acb0:	2400f920 	.word	0x2400f920
 801acb4:	2400f948 	.word	0x2400f948
 801acb8:	08023240 	.word	0x08023240
 801acbc:	08023258 	.word	0x08023258
        } else {
          pcb->unacked = rseg->next;
 801acc0:	69fb      	ldr	r3, [r7, #28]
 801acc2:	681a      	ldr	r2, [r3, #0]
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801acc8:	69f8      	ldr	r0, [r7, #28]
 801acca:	f7fe fc54 	bl	8019576 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d104      	bne.n	801ace0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801acdc:	861a      	strh	r2, [r3, #48]	; 0x30
 801acde:	e006      	b.n	801acee <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	2200      	movs	r2, #0
 801ace4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	2200      	movs	r2, #0
 801acea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d00a      	beq.n	801ad0e <tcp_process+0x30a>
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801acfe:	687a      	ldr	r2, [r7, #4]
 801ad00:	6910      	ldr	r0, [r2, #16]
 801ad02:	2200      	movs	r2, #0
 801ad04:	6879      	ldr	r1, [r7, #4]
 801ad06:	4798      	blx	r3
 801ad08:	4603      	mov	r3, r0
 801ad0a:	76bb      	strb	r3, [r7, #26]
 801ad0c:	e001      	b.n	801ad12 <tcp_process+0x30e>
 801ad0e:	2300      	movs	r3, #0
 801ad10:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801ad12:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801ad16:	f113 0f0d 	cmn.w	r3, #13
 801ad1a:	d102      	bne.n	801ad22 <tcp_process+0x31e>
          return ERR_ABRT;
 801ad1c:	f06f 030c 	mvn.w	r3, #12
 801ad20:	e250      	b.n	801b1c4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	8b5b      	ldrh	r3, [r3, #26]
 801ad26:	f043 0302 	orr.w	r3, r3, #2
 801ad2a:	b29a      	uxth	r2, r3
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801ad30:	e23a      	b.n	801b1a8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801ad32:	4b98      	ldr	r3, [pc, #608]	; (801af94 <tcp_process+0x590>)
 801ad34:	781b      	ldrb	r3, [r3, #0]
 801ad36:	f003 0310 	and.w	r3, r3, #16
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	f000 8234 	beq.w	801b1a8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ad40:	4b95      	ldr	r3, [pc, #596]	; (801af98 <tcp_process+0x594>)
 801ad42:	6819      	ldr	r1, [r3, #0]
 801ad44:	4b95      	ldr	r3, [pc, #596]	; (801af9c <tcp_process+0x598>)
 801ad46:	881b      	ldrh	r3, [r3, #0]
 801ad48:	461a      	mov	r2, r3
 801ad4a:	4b95      	ldr	r3, [pc, #596]	; (801afa0 <tcp_process+0x59c>)
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ad50:	4b94      	ldr	r3, [pc, #592]	; (801afa4 <tcp_process+0x5a0>)
 801ad52:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ad54:	885b      	ldrh	r3, [r3, #2]
 801ad56:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ad58:	4a92      	ldr	r2, [pc, #584]	; (801afa4 <tcp_process+0x5a0>)
 801ad5a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ad5c:	8812      	ldrh	r2, [r2, #0]
 801ad5e:	b292      	uxth	r2, r2
 801ad60:	9202      	str	r2, [sp, #8]
 801ad62:	9301      	str	r3, [sp, #4]
 801ad64:	4b90      	ldr	r3, [pc, #576]	; (801afa8 <tcp_process+0x5a4>)
 801ad66:	9300      	str	r3, [sp, #0]
 801ad68:	4b90      	ldr	r3, [pc, #576]	; (801afac <tcp_process+0x5a8>)
 801ad6a:	4602      	mov	r2, r0
 801ad6c:	6878      	ldr	r0, [r7, #4]
 801ad6e:	f003 f8dd 	bl	801df2c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ad78:	2b05      	cmp	r3, #5
 801ad7a:	f200 8215 	bhi.w	801b1a8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	2200      	movs	r2, #0
 801ad82:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801ad84:	6878      	ldr	r0, [r7, #4]
 801ad86:	f002 fea7 	bl	801dad8 <tcp_rexmit_rto>
      break;
 801ad8a:	e20d      	b.n	801b1a8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801ad8c:	4b81      	ldr	r3, [pc, #516]	; (801af94 <tcp_process+0x590>)
 801ad8e:	781b      	ldrb	r3, [r3, #0]
 801ad90:	f003 0310 	and.w	r3, r3, #16
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	f000 80a1 	beq.w	801aedc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ad9a:	4b7f      	ldr	r3, [pc, #508]	; (801af98 <tcp_process+0x594>)
 801ad9c:	681a      	ldr	r2, [r3, #0]
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ada2:	1ad3      	subs	r3, r2, r3
 801ada4:	3b01      	subs	r3, #1
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	db7e      	blt.n	801aea8 <tcp_process+0x4a4>
 801adaa:	4b7b      	ldr	r3, [pc, #492]	; (801af98 <tcp_process+0x594>)
 801adac:	681a      	ldr	r2, [r3, #0]
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801adb2:	1ad3      	subs	r3, r2, r3
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	dc77      	bgt.n	801aea8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	2204      	movs	r2, #4
 801adbc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d102      	bne.n	801adcc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801adc6:	23fa      	movs	r3, #250	; 0xfa
 801adc8:	76bb      	strb	r3, [r7, #26]
 801adca:	e01d      	b.n	801ae08 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801add0:	699b      	ldr	r3, [r3, #24]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d106      	bne.n	801ade4 <tcp_process+0x3e0>
 801add6:	4b76      	ldr	r3, [pc, #472]	; (801afb0 <tcp_process+0x5ac>)
 801add8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801addc:	4975      	ldr	r1, [pc, #468]	; (801afb4 <tcp_process+0x5b0>)
 801adde:	4876      	ldr	r0, [pc, #472]	; (801afb8 <tcp_process+0x5b4>)
 801ade0:	f004 fe0c 	bl	801f9fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ade8:	699b      	ldr	r3, [r3, #24]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d00a      	beq.n	801ae04 <tcp_process+0x400>
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801adf2:	699b      	ldr	r3, [r3, #24]
 801adf4:	687a      	ldr	r2, [r7, #4]
 801adf6:	6910      	ldr	r0, [r2, #16]
 801adf8:	2200      	movs	r2, #0
 801adfa:	6879      	ldr	r1, [r7, #4]
 801adfc:	4798      	blx	r3
 801adfe:	4603      	mov	r3, r0
 801ae00:	76bb      	strb	r3, [r7, #26]
 801ae02:	e001      	b.n	801ae08 <tcp_process+0x404>
 801ae04:	23f0      	movs	r3, #240	; 0xf0
 801ae06:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801ae08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d00a      	beq.n	801ae26 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801ae10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801ae14:	f113 0f0d 	cmn.w	r3, #13
 801ae18:	d002      	beq.n	801ae20 <tcp_process+0x41c>
              tcp_abort(pcb);
 801ae1a:	6878      	ldr	r0, [r7, #4]
 801ae1c:	f7fd fd14 	bl	8018848 <tcp_abort>
            }
            return ERR_ABRT;
 801ae20:	f06f 030c 	mvn.w	r3, #12
 801ae24:	e1ce      	b.n	801b1c4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801ae26:	6878      	ldr	r0, [r7, #4]
 801ae28:	f000 fae0 	bl	801b3ec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801ae2c:	4b63      	ldr	r3, [pc, #396]	; (801afbc <tcp_process+0x5b8>)
 801ae2e:	881b      	ldrh	r3, [r3, #0]
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d005      	beq.n	801ae40 <tcp_process+0x43c>
            recv_acked--;
 801ae34:	4b61      	ldr	r3, [pc, #388]	; (801afbc <tcp_process+0x5b8>)
 801ae36:	881b      	ldrh	r3, [r3, #0]
 801ae38:	3b01      	subs	r3, #1
 801ae3a:	b29a      	uxth	r2, r3
 801ae3c:	4b5f      	ldr	r3, [pc, #380]	; (801afbc <tcp_process+0x5b8>)
 801ae3e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ae44:	009a      	lsls	r2, r3, #2
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ae4a:	005b      	lsls	r3, r3, #1
 801ae4c:	f241 111c 	movw	r1, #4380	; 0x111c
 801ae50:	428b      	cmp	r3, r1
 801ae52:	bf38      	it	cc
 801ae54:	460b      	movcc	r3, r1
 801ae56:	429a      	cmp	r2, r3
 801ae58:	d204      	bcs.n	801ae64 <tcp_process+0x460>
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ae5e:	009b      	lsls	r3, r3, #2
 801ae60:	b29b      	uxth	r3, r3
 801ae62:	e00d      	b.n	801ae80 <tcp_process+0x47c>
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ae68:	005b      	lsls	r3, r3, #1
 801ae6a:	f241 121c 	movw	r2, #4380	; 0x111c
 801ae6e:	4293      	cmp	r3, r2
 801ae70:	d904      	bls.n	801ae7c <tcp_process+0x478>
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ae76:	005b      	lsls	r3, r3, #1
 801ae78:	b29b      	uxth	r3, r3
 801ae7a:	e001      	b.n	801ae80 <tcp_process+0x47c>
 801ae7c:	f241 131c 	movw	r3, #4380	; 0x111c
 801ae80:	687a      	ldr	r2, [r7, #4]
 801ae82:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801ae86:	4b4e      	ldr	r3, [pc, #312]	; (801afc0 <tcp_process+0x5bc>)
 801ae88:	781b      	ldrb	r3, [r3, #0]
 801ae8a:	f003 0320 	and.w	r3, r3, #32
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d037      	beq.n	801af02 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	8b5b      	ldrh	r3, [r3, #26]
 801ae96:	f043 0302 	orr.w	r3, r3, #2
 801ae9a:	b29a      	uxth	r2, r3
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	2207      	movs	r2, #7
 801aea4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801aea6:	e02c      	b.n	801af02 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aea8:	4b3b      	ldr	r3, [pc, #236]	; (801af98 <tcp_process+0x594>)
 801aeaa:	6819      	ldr	r1, [r3, #0]
 801aeac:	4b3b      	ldr	r3, [pc, #236]	; (801af9c <tcp_process+0x598>)
 801aeae:	881b      	ldrh	r3, [r3, #0]
 801aeb0:	461a      	mov	r2, r3
 801aeb2:	4b3b      	ldr	r3, [pc, #236]	; (801afa0 <tcp_process+0x59c>)
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aeb8:	4b3a      	ldr	r3, [pc, #232]	; (801afa4 <tcp_process+0x5a0>)
 801aeba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aebc:	885b      	ldrh	r3, [r3, #2]
 801aebe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aec0:	4a38      	ldr	r2, [pc, #224]	; (801afa4 <tcp_process+0x5a0>)
 801aec2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aec4:	8812      	ldrh	r2, [r2, #0]
 801aec6:	b292      	uxth	r2, r2
 801aec8:	9202      	str	r2, [sp, #8]
 801aeca:	9301      	str	r3, [sp, #4]
 801aecc:	4b36      	ldr	r3, [pc, #216]	; (801afa8 <tcp_process+0x5a4>)
 801aece:	9300      	str	r3, [sp, #0]
 801aed0:	4b36      	ldr	r3, [pc, #216]	; (801afac <tcp_process+0x5a8>)
 801aed2:	4602      	mov	r2, r0
 801aed4:	6878      	ldr	r0, [r7, #4]
 801aed6:	f003 f829 	bl	801df2c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801aeda:	e167      	b.n	801b1ac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801aedc:	4b2d      	ldr	r3, [pc, #180]	; (801af94 <tcp_process+0x590>)
 801aede:	781b      	ldrb	r3, [r3, #0]
 801aee0:	f003 0302 	and.w	r3, r3, #2
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	f000 8161 	beq.w	801b1ac <tcp_process+0x7a8>
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aeee:	1e5a      	subs	r2, r3, #1
 801aef0:	4b2b      	ldr	r3, [pc, #172]	; (801afa0 <tcp_process+0x59c>)
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	429a      	cmp	r2, r3
 801aef6:	f040 8159 	bne.w	801b1ac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801aefa:	6878      	ldr	r0, [r7, #4]
 801aefc:	f002 fe0e 	bl	801db1c <tcp_rexmit>
      break;
 801af00:	e154      	b.n	801b1ac <tcp_process+0x7a8>
 801af02:	e153      	b.n	801b1ac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801af04:	6878      	ldr	r0, [r7, #4]
 801af06:	f000 fa71 	bl	801b3ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801af0a:	4b2d      	ldr	r3, [pc, #180]	; (801afc0 <tcp_process+0x5bc>)
 801af0c:	781b      	ldrb	r3, [r3, #0]
 801af0e:	f003 0320 	and.w	r3, r3, #32
 801af12:	2b00      	cmp	r3, #0
 801af14:	f000 814c 	beq.w	801b1b0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	8b5b      	ldrh	r3, [r3, #26]
 801af1c:	f043 0302 	orr.w	r3, r3, #2
 801af20:	b29a      	uxth	r2, r3
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	2207      	movs	r2, #7
 801af2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801af2c:	e140      	b.n	801b1b0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801af2e:	6878      	ldr	r0, [r7, #4]
 801af30:	f000 fa5c 	bl	801b3ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801af34:	4b22      	ldr	r3, [pc, #136]	; (801afc0 <tcp_process+0x5bc>)
 801af36:	781b      	ldrb	r3, [r3, #0]
 801af38:	f003 0320 	and.w	r3, r3, #32
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	d071      	beq.n	801b024 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801af40:	4b14      	ldr	r3, [pc, #80]	; (801af94 <tcp_process+0x590>)
 801af42:	781b      	ldrb	r3, [r3, #0]
 801af44:	f003 0310 	and.w	r3, r3, #16
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d060      	beq.n	801b00e <tcp_process+0x60a>
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801af50:	4b11      	ldr	r3, [pc, #68]	; (801af98 <tcp_process+0x594>)
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	429a      	cmp	r2, r3
 801af56:	d15a      	bne.n	801b00e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d156      	bne.n	801b00e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	8b5b      	ldrh	r3, [r3, #26]
 801af64:	f043 0302 	orr.w	r3, r3, #2
 801af68:	b29a      	uxth	r2, r3
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801af6e:	6878      	ldr	r0, [r7, #4]
 801af70:	f7fe fdbc 	bl	8019aec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801af74:	4b13      	ldr	r3, [pc, #76]	; (801afc4 <tcp_process+0x5c0>)
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	687a      	ldr	r2, [r7, #4]
 801af7a:	429a      	cmp	r2, r3
 801af7c:	d105      	bne.n	801af8a <tcp_process+0x586>
 801af7e:	4b11      	ldr	r3, [pc, #68]	; (801afc4 <tcp_process+0x5c0>)
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	68db      	ldr	r3, [r3, #12]
 801af84:	4a0f      	ldr	r2, [pc, #60]	; (801afc4 <tcp_process+0x5c0>)
 801af86:	6013      	str	r3, [r2, #0]
 801af88:	e02e      	b.n	801afe8 <tcp_process+0x5e4>
 801af8a:	4b0e      	ldr	r3, [pc, #56]	; (801afc4 <tcp_process+0x5c0>)
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	617b      	str	r3, [r7, #20]
 801af90:	e027      	b.n	801afe2 <tcp_process+0x5de>
 801af92:	bf00      	nop
 801af94:	2400f964 	.word	0x2400f964
 801af98:	2400f95c 	.word	0x2400f95c
 801af9c:	2400f962 	.word	0x2400f962
 801afa0:	2400f958 	.word	0x2400f958
 801afa4:	2400f948 	.word	0x2400f948
 801afa8:	24008e60 	.word	0x24008e60
 801afac:	24008e64 	.word	0x24008e64
 801afb0:	08022f88 	.word	0x08022f88
 801afb4:	0802326c 	.word	0x0802326c
 801afb8:	08023018 	.word	0x08023018
 801afbc:	2400f960 	.word	0x2400f960
 801afc0:	2400f965 	.word	0x2400f965
 801afc4:	2400f92c 	.word	0x2400f92c
 801afc8:	697b      	ldr	r3, [r7, #20]
 801afca:	68db      	ldr	r3, [r3, #12]
 801afcc:	687a      	ldr	r2, [r7, #4]
 801afce:	429a      	cmp	r2, r3
 801afd0:	d104      	bne.n	801afdc <tcp_process+0x5d8>
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	68da      	ldr	r2, [r3, #12]
 801afd6:	697b      	ldr	r3, [r7, #20]
 801afd8:	60da      	str	r2, [r3, #12]
 801afda:	e005      	b.n	801afe8 <tcp_process+0x5e4>
 801afdc:	697b      	ldr	r3, [r7, #20]
 801afde:	68db      	ldr	r3, [r3, #12]
 801afe0:	617b      	str	r3, [r7, #20]
 801afe2:	697b      	ldr	r3, [r7, #20]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d1ef      	bne.n	801afc8 <tcp_process+0x5c4>
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	2200      	movs	r2, #0
 801afec:	60da      	str	r2, [r3, #12]
 801afee:	4b77      	ldr	r3, [pc, #476]	; (801b1cc <tcp_process+0x7c8>)
 801aff0:	2201      	movs	r2, #1
 801aff2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	220a      	movs	r2, #10
 801aff8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801affa:	4b75      	ldr	r3, [pc, #468]	; (801b1d0 <tcp_process+0x7cc>)
 801affc:	681a      	ldr	r2, [r3, #0]
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	60da      	str	r2, [r3, #12]
 801b002:	4a73      	ldr	r2, [pc, #460]	; (801b1d0 <tcp_process+0x7cc>)
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	6013      	str	r3, [r2, #0]
 801b008:	f003 fb0a 	bl	801e620 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801b00c:	e0d2      	b.n	801b1b4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	8b5b      	ldrh	r3, [r3, #26]
 801b012:	f043 0302 	orr.w	r3, r3, #2
 801b016:	b29a      	uxth	r2, r3
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	2208      	movs	r2, #8
 801b020:	751a      	strb	r2, [r3, #20]
      break;
 801b022:	e0c7      	b.n	801b1b4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b024:	4b6b      	ldr	r3, [pc, #428]	; (801b1d4 <tcp_process+0x7d0>)
 801b026:	781b      	ldrb	r3, [r3, #0]
 801b028:	f003 0310 	and.w	r3, r3, #16
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	f000 80c1 	beq.w	801b1b4 <tcp_process+0x7b0>
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b036:	4b68      	ldr	r3, [pc, #416]	; (801b1d8 <tcp_process+0x7d4>)
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	429a      	cmp	r2, r3
 801b03c:	f040 80ba 	bne.w	801b1b4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b044:	2b00      	cmp	r3, #0
 801b046:	f040 80b5 	bne.w	801b1b4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	2206      	movs	r2, #6
 801b04e:	751a      	strb	r2, [r3, #20]
      break;
 801b050:	e0b0      	b.n	801b1b4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801b052:	6878      	ldr	r0, [r7, #4]
 801b054:	f000 f9ca 	bl	801b3ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801b058:	4b60      	ldr	r3, [pc, #384]	; (801b1dc <tcp_process+0x7d8>)
 801b05a:	781b      	ldrb	r3, [r3, #0]
 801b05c:	f003 0320 	and.w	r3, r3, #32
 801b060:	2b00      	cmp	r3, #0
 801b062:	f000 80a9 	beq.w	801b1b8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	8b5b      	ldrh	r3, [r3, #26]
 801b06a:	f043 0302 	orr.w	r3, r3, #2
 801b06e:	b29a      	uxth	r2, r3
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801b074:	6878      	ldr	r0, [r7, #4]
 801b076:	f7fe fd39 	bl	8019aec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b07a:	4b59      	ldr	r3, [pc, #356]	; (801b1e0 <tcp_process+0x7dc>)
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	687a      	ldr	r2, [r7, #4]
 801b080:	429a      	cmp	r2, r3
 801b082:	d105      	bne.n	801b090 <tcp_process+0x68c>
 801b084:	4b56      	ldr	r3, [pc, #344]	; (801b1e0 <tcp_process+0x7dc>)
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	68db      	ldr	r3, [r3, #12]
 801b08a:	4a55      	ldr	r2, [pc, #340]	; (801b1e0 <tcp_process+0x7dc>)
 801b08c:	6013      	str	r3, [r2, #0]
 801b08e:	e013      	b.n	801b0b8 <tcp_process+0x6b4>
 801b090:	4b53      	ldr	r3, [pc, #332]	; (801b1e0 <tcp_process+0x7dc>)
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	613b      	str	r3, [r7, #16]
 801b096:	e00c      	b.n	801b0b2 <tcp_process+0x6ae>
 801b098:	693b      	ldr	r3, [r7, #16]
 801b09a:	68db      	ldr	r3, [r3, #12]
 801b09c:	687a      	ldr	r2, [r7, #4]
 801b09e:	429a      	cmp	r2, r3
 801b0a0:	d104      	bne.n	801b0ac <tcp_process+0x6a8>
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	68da      	ldr	r2, [r3, #12]
 801b0a6:	693b      	ldr	r3, [r7, #16]
 801b0a8:	60da      	str	r2, [r3, #12]
 801b0aa:	e005      	b.n	801b0b8 <tcp_process+0x6b4>
 801b0ac:	693b      	ldr	r3, [r7, #16]
 801b0ae:	68db      	ldr	r3, [r3, #12]
 801b0b0:	613b      	str	r3, [r7, #16]
 801b0b2:	693b      	ldr	r3, [r7, #16]
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d1ef      	bne.n	801b098 <tcp_process+0x694>
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	2200      	movs	r2, #0
 801b0bc:	60da      	str	r2, [r3, #12]
 801b0be:	4b43      	ldr	r3, [pc, #268]	; (801b1cc <tcp_process+0x7c8>)
 801b0c0:	2201      	movs	r2, #1
 801b0c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	220a      	movs	r2, #10
 801b0c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b0ca:	4b41      	ldr	r3, [pc, #260]	; (801b1d0 <tcp_process+0x7cc>)
 801b0cc:	681a      	ldr	r2, [r3, #0]
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	60da      	str	r2, [r3, #12]
 801b0d2:	4a3f      	ldr	r2, [pc, #252]	; (801b1d0 <tcp_process+0x7cc>)
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	6013      	str	r3, [r2, #0]
 801b0d8:	f003 faa2 	bl	801e620 <tcp_timer_needed>
      }
      break;
 801b0dc:	e06c      	b.n	801b1b8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801b0de:	6878      	ldr	r0, [r7, #4]
 801b0e0:	f000 f984 	bl	801b3ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b0e4:	4b3b      	ldr	r3, [pc, #236]	; (801b1d4 <tcp_process+0x7d0>)
 801b0e6:	781b      	ldrb	r3, [r3, #0]
 801b0e8:	f003 0310 	and.w	r3, r3, #16
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d065      	beq.n	801b1bc <tcp_process+0x7b8>
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b0f4:	4b38      	ldr	r3, [pc, #224]	; (801b1d8 <tcp_process+0x7d4>)
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	429a      	cmp	r2, r3
 801b0fa:	d15f      	bne.n	801b1bc <tcp_process+0x7b8>
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b100:	2b00      	cmp	r3, #0
 801b102:	d15b      	bne.n	801b1bc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801b104:	6878      	ldr	r0, [r7, #4]
 801b106:	f7fe fcf1 	bl	8019aec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b10a:	4b35      	ldr	r3, [pc, #212]	; (801b1e0 <tcp_process+0x7dc>)
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	687a      	ldr	r2, [r7, #4]
 801b110:	429a      	cmp	r2, r3
 801b112:	d105      	bne.n	801b120 <tcp_process+0x71c>
 801b114:	4b32      	ldr	r3, [pc, #200]	; (801b1e0 <tcp_process+0x7dc>)
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	68db      	ldr	r3, [r3, #12]
 801b11a:	4a31      	ldr	r2, [pc, #196]	; (801b1e0 <tcp_process+0x7dc>)
 801b11c:	6013      	str	r3, [r2, #0]
 801b11e:	e013      	b.n	801b148 <tcp_process+0x744>
 801b120:	4b2f      	ldr	r3, [pc, #188]	; (801b1e0 <tcp_process+0x7dc>)
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	60fb      	str	r3, [r7, #12]
 801b126:	e00c      	b.n	801b142 <tcp_process+0x73e>
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	68db      	ldr	r3, [r3, #12]
 801b12c:	687a      	ldr	r2, [r7, #4]
 801b12e:	429a      	cmp	r2, r3
 801b130:	d104      	bne.n	801b13c <tcp_process+0x738>
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	68da      	ldr	r2, [r3, #12]
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	60da      	str	r2, [r3, #12]
 801b13a:	e005      	b.n	801b148 <tcp_process+0x744>
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	68db      	ldr	r3, [r3, #12]
 801b140:	60fb      	str	r3, [r7, #12]
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d1ef      	bne.n	801b128 <tcp_process+0x724>
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	2200      	movs	r2, #0
 801b14c:	60da      	str	r2, [r3, #12]
 801b14e:	4b1f      	ldr	r3, [pc, #124]	; (801b1cc <tcp_process+0x7c8>)
 801b150:	2201      	movs	r2, #1
 801b152:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	220a      	movs	r2, #10
 801b158:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b15a:	4b1d      	ldr	r3, [pc, #116]	; (801b1d0 <tcp_process+0x7cc>)
 801b15c:	681a      	ldr	r2, [r3, #0]
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	60da      	str	r2, [r3, #12]
 801b162:	4a1b      	ldr	r2, [pc, #108]	; (801b1d0 <tcp_process+0x7cc>)
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	6013      	str	r3, [r2, #0]
 801b168:	f003 fa5a 	bl	801e620 <tcp_timer_needed>
      }
      break;
 801b16c:	e026      	b.n	801b1bc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801b16e:	6878      	ldr	r0, [r7, #4]
 801b170:	f000 f93c 	bl	801b3ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b174:	4b17      	ldr	r3, [pc, #92]	; (801b1d4 <tcp_process+0x7d0>)
 801b176:	781b      	ldrb	r3, [r3, #0]
 801b178:	f003 0310 	and.w	r3, r3, #16
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d01f      	beq.n	801b1c0 <tcp_process+0x7bc>
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b184:	4b14      	ldr	r3, [pc, #80]	; (801b1d8 <tcp_process+0x7d4>)
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	429a      	cmp	r2, r3
 801b18a:	d119      	bne.n	801b1c0 <tcp_process+0x7bc>
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b190:	2b00      	cmp	r3, #0
 801b192:	d115      	bne.n	801b1c0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801b194:	4b11      	ldr	r3, [pc, #68]	; (801b1dc <tcp_process+0x7d8>)
 801b196:	781b      	ldrb	r3, [r3, #0]
 801b198:	f043 0310 	orr.w	r3, r3, #16
 801b19c:	b2da      	uxtb	r2, r3
 801b19e:	4b0f      	ldr	r3, [pc, #60]	; (801b1dc <tcp_process+0x7d8>)
 801b1a0:	701a      	strb	r2, [r3, #0]
      }
      break;
 801b1a2:	e00d      	b.n	801b1c0 <tcp_process+0x7bc>
    default:
      break;
 801b1a4:	bf00      	nop
 801b1a6:	e00c      	b.n	801b1c2 <tcp_process+0x7be>
      break;
 801b1a8:	bf00      	nop
 801b1aa:	e00a      	b.n	801b1c2 <tcp_process+0x7be>
      break;
 801b1ac:	bf00      	nop
 801b1ae:	e008      	b.n	801b1c2 <tcp_process+0x7be>
      break;
 801b1b0:	bf00      	nop
 801b1b2:	e006      	b.n	801b1c2 <tcp_process+0x7be>
      break;
 801b1b4:	bf00      	nop
 801b1b6:	e004      	b.n	801b1c2 <tcp_process+0x7be>
      break;
 801b1b8:	bf00      	nop
 801b1ba:	e002      	b.n	801b1c2 <tcp_process+0x7be>
      break;
 801b1bc:	bf00      	nop
 801b1be:	e000      	b.n	801b1c2 <tcp_process+0x7be>
      break;
 801b1c0:	bf00      	nop
  }
  return ERR_OK;
 801b1c2:	2300      	movs	r3, #0
}
 801b1c4:	4618      	mov	r0, r3
 801b1c6:	3724      	adds	r7, #36	; 0x24
 801b1c8:	46bd      	mov	sp, r7
 801b1ca:	bd90      	pop	{r4, r7, pc}
 801b1cc:	2400f934 	.word	0x2400f934
 801b1d0:	2400f930 	.word	0x2400f930
 801b1d4:	2400f964 	.word	0x2400f964
 801b1d8:	2400f95c 	.word	0x2400f95c
 801b1dc:	2400f965 	.word	0x2400f965
 801b1e0:	2400f92c 	.word	0x2400f92c

0801b1e4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801b1e4:	b590      	push	{r4, r7, lr}
 801b1e6:	b085      	sub	sp, #20
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
 801b1ec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d106      	bne.n	801b202 <tcp_oos_insert_segment+0x1e>
 801b1f4:	4b3b      	ldr	r3, [pc, #236]	; (801b2e4 <tcp_oos_insert_segment+0x100>)
 801b1f6:	f240 421f 	movw	r2, #1055	; 0x41f
 801b1fa:	493b      	ldr	r1, [pc, #236]	; (801b2e8 <tcp_oos_insert_segment+0x104>)
 801b1fc:	483b      	ldr	r0, [pc, #236]	; (801b2ec <tcp_oos_insert_segment+0x108>)
 801b1fe:	f004 fbfd 	bl	801f9fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	68db      	ldr	r3, [r3, #12]
 801b206:	899b      	ldrh	r3, [r3, #12]
 801b208:	b29b      	uxth	r3, r3
 801b20a:	4618      	mov	r0, r3
 801b20c:	f7f8 fb76 	bl	80138fc <lwip_htons>
 801b210:	4603      	mov	r3, r0
 801b212:	b2db      	uxtb	r3, r3
 801b214:	f003 0301 	and.w	r3, r3, #1
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d028      	beq.n	801b26e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801b21c:	6838      	ldr	r0, [r7, #0]
 801b21e:	f7fe f995 	bl	801954c <tcp_segs_free>
    next = NULL;
 801b222:	2300      	movs	r3, #0
 801b224:	603b      	str	r3, [r7, #0]
 801b226:	e056      	b.n	801b2d6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801b228:	683b      	ldr	r3, [r7, #0]
 801b22a:	68db      	ldr	r3, [r3, #12]
 801b22c:	899b      	ldrh	r3, [r3, #12]
 801b22e:	b29b      	uxth	r3, r3
 801b230:	4618      	mov	r0, r3
 801b232:	f7f8 fb63 	bl	80138fc <lwip_htons>
 801b236:	4603      	mov	r3, r0
 801b238:	b2db      	uxtb	r3, r3
 801b23a:	f003 0301 	and.w	r3, r3, #1
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d00d      	beq.n	801b25e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	68db      	ldr	r3, [r3, #12]
 801b246:	899b      	ldrh	r3, [r3, #12]
 801b248:	b29c      	uxth	r4, r3
 801b24a:	2001      	movs	r0, #1
 801b24c:	f7f8 fb56 	bl	80138fc <lwip_htons>
 801b250:	4603      	mov	r3, r0
 801b252:	461a      	mov	r2, r3
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	68db      	ldr	r3, [r3, #12]
 801b258:	4322      	orrs	r2, r4
 801b25a:	b292      	uxth	r2, r2
 801b25c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801b25e:	683b      	ldr	r3, [r7, #0]
 801b260:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801b262:	683b      	ldr	r3, [r7, #0]
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801b268:	68f8      	ldr	r0, [r7, #12]
 801b26a:	f7fe f984 	bl	8019576 <tcp_seg_free>
    while (next &&
 801b26e:	683b      	ldr	r3, [r7, #0]
 801b270:	2b00      	cmp	r3, #0
 801b272:	d00e      	beq.n	801b292 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	891b      	ldrh	r3, [r3, #8]
 801b278:	461a      	mov	r2, r3
 801b27a:	4b1d      	ldr	r3, [pc, #116]	; (801b2f0 <tcp_oos_insert_segment+0x10c>)
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	441a      	add	r2, r3
 801b280:	683b      	ldr	r3, [r7, #0]
 801b282:	68db      	ldr	r3, [r3, #12]
 801b284:	685b      	ldr	r3, [r3, #4]
 801b286:	6839      	ldr	r1, [r7, #0]
 801b288:	8909      	ldrh	r1, [r1, #8]
 801b28a:	440b      	add	r3, r1
 801b28c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801b28e:	2b00      	cmp	r3, #0
 801b290:	daca      	bge.n	801b228 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801b292:	683b      	ldr	r3, [r7, #0]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d01e      	beq.n	801b2d6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	891b      	ldrh	r3, [r3, #8]
 801b29c:	461a      	mov	r2, r3
 801b29e:	4b14      	ldr	r3, [pc, #80]	; (801b2f0 <tcp_oos_insert_segment+0x10c>)
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	441a      	add	r2, r3
 801b2a4:	683b      	ldr	r3, [r7, #0]
 801b2a6:	68db      	ldr	r3, [r3, #12]
 801b2a8:	685b      	ldr	r3, [r3, #4]
 801b2aa:	1ad3      	subs	r3, r2, r3
    if (next &&
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	dd12      	ble.n	801b2d6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801b2b0:	683b      	ldr	r3, [r7, #0]
 801b2b2:	68db      	ldr	r3, [r3, #12]
 801b2b4:	685b      	ldr	r3, [r3, #4]
 801b2b6:	b29a      	uxth	r2, r3
 801b2b8:	4b0d      	ldr	r3, [pc, #52]	; (801b2f0 <tcp_oos_insert_segment+0x10c>)
 801b2ba:	681b      	ldr	r3, [r3, #0]
 801b2bc:	b29b      	uxth	r3, r3
 801b2be:	1ad3      	subs	r3, r2, r3
 801b2c0:	b29a      	uxth	r2, r3
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	685a      	ldr	r2, [r3, #4]
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	891b      	ldrh	r3, [r3, #8]
 801b2ce:	4619      	mov	r1, r3
 801b2d0:	4610      	mov	r0, r2
 801b2d2:	f7fc f963 	bl	801759c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	683a      	ldr	r2, [r7, #0]
 801b2da:	601a      	str	r2, [r3, #0]
}
 801b2dc:	bf00      	nop
 801b2de:	3714      	adds	r7, #20
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	bd90      	pop	{r4, r7, pc}
 801b2e4:	08022f88 	.word	0x08022f88
 801b2e8:	0802328c 	.word	0x0802328c
 801b2ec:	08023018 	.word	0x08023018
 801b2f0:	2400f958 	.word	0x2400f958

0801b2f4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801b2f4:	b5b0      	push	{r4, r5, r7, lr}
 801b2f6:	b086      	sub	sp, #24
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	60f8      	str	r0, [r7, #12]
 801b2fc:	60b9      	str	r1, [r7, #8]
 801b2fe:	607a      	str	r2, [r7, #4]
 801b300:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801b302:	e03e      	b.n	801b382 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801b304:	68bb      	ldr	r3, [r7, #8]
 801b306:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801b308:	68bb      	ldr	r3, [r7, #8]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801b30e:	697b      	ldr	r3, [r7, #20]
 801b310:	685b      	ldr	r3, [r3, #4]
 801b312:	4618      	mov	r0, r3
 801b314:	f7fc fb54 	bl	80179c0 <pbuf_clen>
 801b318:	4603      	mov	r3, r0
 801b31a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b322:	8a7a      	ldrh	r2, [r7, #18]
 801b324:	429a      	cmp	r2, r3
 801b326:	d906      	bls.n	801b336 <tcp_free_acked_segments+0x42>
 801b328:	4b2a      	ldr	r3, [pc, #168]	; (801b3d4 <tcp_free_acked_segments+0xe0>)
 801b32a:	f240 4257 	movw	r2, #1111	; 0x457
 801b32e:	492a      	ldr	r1, [pc, #168]	; (801b3d8 <tcp_free_acked_segments+0xe4>)
 801b330:	482a      	ldr	r0, [pc, #168]	; (801b3dc <tcp_free_acked_segments+0xe8>)
 801b332:	f004 fb63 	bl	801f9fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801b33c:	8a7b      	ldrh	r3, [r7, #18]
 801b33e:	1ad3      	subs	r3, r2, r3
 801b340:	b29a      	uxth	r2, r3
 801b342:	68fb      	ldr	r3, [r7, #12]
 801b344:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801b348:	697b      	ldr	r3, [r7, #20]
 801b34a:	891a      	ldrh	r2, [r3, #8]
 801b34c:	4b24      	ldr	r3, [pc, #144]	; (801b3e0 <tcp_free_acked_segments+0xec>)
 801b34e:	881b      	ldrh	r3, [r3, #0]
 801b350:	4413      	add	r3, r2
 801b352:	b29a      	uxth	r2, r3
 801b354:	4b22      	ldr	r3, [pc, #136]	; (801b3e0 <tcp_free_acked_segments+0xec>)
 801b356:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801b358:	6978      	ldr	r0, [r7, #20]
 801b35a:	f7fe f90c 	bl	8019576 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b364:	2b00      	cmp	r3, #0
 801b366:	d00c      	beq.n	801b382 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801b368:	68bb      	ldr	r3, [r7, #8]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d109      	bne.n	801b382 <tcp_free_acked_segments+0x8e>
 801b36e:	683b      	ldr	r3, [r7, #0]
 801b370:	2b00      	cmp	r3, #0
 801b372:	d106      	bne.n	801b382 <tcp_free_acked_segments+0x8e>
 801b374:	4b17      	ldr	r3, [pc, #92]	; (801b3d4 <tcp_free_acked_segments+0xe0>)
 801b376:	f240 4261 	movw	r2, #1121	; 0x461
 801b37a:	491a      	ldr	r1, [pc, #104]	; (801b3e4 <tcp_free_acked_segments+0xf0>)
 801b37c:	4817      	ldr	r0, [pc, #92]	; (801b3dc <tcp_free_acked_segments+0xe8>)
 801b37e:	f004 fb3d 	bl	801f9fc <iprintf>
  while (seg_list != NULL &&
 801b382:	68bb      	ldr	r3, [r7, #8]
 801b384:	2b00      	cmp	r3, #0
 801b386:	d020      	beq.n	801b3ca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801b388:	68bb      	ldr	r3, [r7, #8]
 801b38a:	68db      	ldr	r3, [r3, #12]
 801b38c:	685b      	ldr	r3, [r3, #4]
 801b38e:	4618      	mov	r0, r3
 801b390:	f7f8 fac9 	bl	8013926 <lwip_htonl>
 801b394:	4604      	mov	r4, r0
 801b396:	68bb      	ldr	r3, [r7, #8]
 801b398:	891b      	ldrh	r3, [r3, #8]
 801b39a:	461d      	mov	r5, r3
 801b39c:	68bb      	ldr	r3, [r7, #8]
 801b39e:	68db      	ldr	r3, [r3, #12]
 801b3a0:	899b      	ldrh	r3, [r3, #12]
 801b3a2:	b29b      	uxth	r3, r3
 801b3a4:	4618      	mov	r0, r3
 801b3a6:	f7f8 faa9 	bl	80138fc <lwip_htons>
 801b3aa:	4603      	mov	r3, r0
 801b3ac:	b2db      	uxtb	r3, r3
 801b3ae:	f003 0303 	and.w	r3, r3, #3
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d001      	beq.n	801b3ba <tcp_free_acked_segments+0xc6>
 801b3b6:	2301      	movs	r3, #1
 801b3b8:	e000      	b.n	801b3bc <tcp_free_acked_segments+0xc8>
 801b3ba:	2300      	movs	r3, #0
 801b3bc:	442b      	add	r3, r5
 801b3be:	18e2      	adds	r2, r4, r3
 801b3c0:	4b09      	ldr	r3, [pc, #36]	; (801b3e8 <tcp_free_acked_segments+0xf4>)
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	dd9c      	ble.n	801b304 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801b3ca:	68bb      	ldr	r3, [r7, #8]
}
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	3718      	adds	r7, #24
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bdb0      	pop	{r4, r5, r7, pc}
 801b3d4:	08022f88 	.word	0x08022f88
 801b3d8:	080232b4 	.word	0x080232b4
 801b3dc:	08023018 	.word	0x08023018
 801b3e0:	2400f960 	.word	0x2400f960
 801b3e4:	080232dc 	.word	0x080232dc
 801b3e8:	2400f95c 	.word	0x2400f95c

0801b3ec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801b3ec:	b5b0      	push	{r4, r5, r7, lr}
 801b3ee:	b094      	sub	sp, #80	; 0x50
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d106      	bne.n	801b40c <tcp_receive+0x20>
 801b3fe:	4b91      	ldr	r3, [pc, #580]	; (801b644 <tcp_receive+0x258>)
 801b400:	f240 427b 	movw	r2, #1147	; 0x47b
 801b404:	4990      	ldr	r1, [pc, #576]	; (801b648 <tcp_receive+0x25c>)
 801b406:	4891      	ldr	r0, [pc, #580]	; (801b64c <tcp_receive+0x260>)
 801b408:	f004 faf8 	bl	801f9fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	7d1b      	ldrb	r3, [r3, #20]
 801b410:	2b03      	cmp	r3, #3
 801b412:	d806      	bhi.n	801b422 <tcp_receive+0x36>
 801b414:	4b8b      	ldr	r3, [pc, #556]	; (801b644 <tcp_receive+0x258>)
 801b416:	f240 427c 	movw	r2, #1148	; 0x47c
 801b41a:	498d      	ldr	r1, [pc, #564]	; (801b650 <tcp_receive+0x264>)
 801b41c:	488b      	ldr	r0, [pc, #556]	; (801b64c <tcp_receive+0x260>)
 801b41e:	f004 faed 	bl	801f9fc <iprintf>

  if (flags & TCP_ACK) {
 801b422:	4b8c      	ldr	r3, [pc, #560]	; (801b654 <tcp_receive+0x268>)
 801b424:	781b      	ldrb	r3, [r3, #0]
 801b426:	f003 0310 	and.w	r3, r3, #16
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	f000 8264 	beq.w	801b8f8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b436:	461a      	mov	r2, r3
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b43c:	4413      	add	r3, r2
 801b43e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b444:	4b84      	ldr	r3, [pc, #528]	; (801b658 <tcp_receive+0x26c>)
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	1ad3      	subs	r3, r2, r3
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	db1b      	blt.n	801b486 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b452:	4b81      	ldr	r3, [pc, #516]	; (801b658 <tcp_receive+0x26c>)
 801b454:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b456:	429a      	cmp	r2, r3
 801b458:	d106      	bne.n	801b468 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b45e:	4b7f      	ldr	r3, [pc, #508]	; (801b65c <tcp_receive+0x270>)
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	1ad3      	subs	r3, r2, r3
 801b464:	2b00      	cmp	r3, #0
 801b466:	db0e      	blt.n	801b486 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b46c:	4b7b      	ldr	r3, [pc, #492]	; (801b65c <tcp_receive+0x270>)
 801b46e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b470:	429a      	cmp	r2, r3
 801b472:	d125      	bne.n	801b4c0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801b474:	4b7a      	ldr	r3, [pc, #488]	; (801b660 <tcp_receive+0x274>)
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	89db      	ldrh	r3, [r3, #14]
 801b47a:	b29a      	uxth	r2, r3
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b482:	429a      	cmp	r2, r3
 801b484:	d91c      	bls.n	801b4c0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801b486:	4b76      	ldr	r3, [pc, #472]	; (801b660 <tcp_receive+0x274>)
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	89db      	ldrh	r3, [r3, #14]
 801b48c:	b29a      	uxth	r2, r3
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b4a0:	429a      	cmp	r2, r3
 801b4a2:	d205      	bcs.n	801b4b0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801b4b0:	4b69      	ldr	r3, [pc, #420]	; (801b658 <tcp_receive+0x26c>)
 801b4b2:	681a      	ldr	r2, [r3, #0]
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801b4b8:	4b68      	ldr	r3, [pc, #416]	; (801b65c <tcp_receive+0x270>)
 801b4ba:	681a      	ldr	r2, [r3, #0]
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801b4c0:	4b66      	ldr	r3, [pc, #408]	; (801b65c <tcp_receive+0x270>)
 801b4c2:	681a      	ldr	r2, [r3, #0]
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4c8:	1ad3      	subs	r3, r2, r3
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	dc58      	bgt.n	801b580 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801b4ce:	4b65      	ldr	r3, [pc, #404]	; (801b664 <tcp_receive+0x278>)
 801b4d0:	881b      	ldrh	r3, [r3, #0]
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d14b      	bne.n	801b56e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b4da:	687a      	ldr	r2, [r7, #4]
 801b4dc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801b4e0:	4413      	add	r3, r2
 801b4e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b4e4:	429a      	cmp	r2, r3
 801b4e6:	d142      	bne.n	801b56e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	db3d      	blt.n	801b56e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b4f6:	4b59      	ldr	r3, [pc, #356]	; (801b65c <tcp_receive+0x270>)
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	429a      	cmp	r2, r3
 801b4fc:	d137      	bne.n	801b56e <tcp_receive+0x182>
              found_dupack = 1;
 801b4fe:	2301      	movs	r3, #1
 801b500:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b508:	2bff      	cmp	r3, #255	; 0xff
 801b50a:	d007      	beq.n	801b51c <tcp_receive+0x130>
                ++pcb->dupacks;
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b512:	3301      	adds	r3, #1
 801b514:	b2da      	uxtb	r2, r3
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b522:	2b03      	cmp	r3, #3
 801b524:	d91b      	bls.n	801b55e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b530:	4413      	add	r3, r2
 801b532:	b29a      	uxth	r2, r3
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b53a:	429a      	cmp	r2, r3
 801b53c:	d30a      	bcc.n	801b554 <tcp_receive+0x168>
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b548:	4413      	add	r3, r2
 801b54a:	b29a      	uxth	r2, r3
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b552:	e004      	b.n	801b55e <tcp_receive+0x172>
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b55a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b564:	2b02      	cmp	r3, #2
 801b566:	d902      	bls.n	801b56e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801b568:	6878      	ldr	r0, [r7, #4]
 801b56a:	f002 fb43 	bl	801dbf4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801b56e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b570:	2b00      	cmp	r3, #0
 801b572:	f040 8161 	bne.w	801b838 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2200      	movs	r2, #0
 801b57a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801b57e:	e15b      	b.n	801b838 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b580:	4b36      	ldr	r3, [pc, #216]	; (801b65c <tcp_receive+0x270>)
 801b582:	681a      	ldr	r2, [r3, #0]
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b588:	1ad3      	subs	r3, r2, r3
 801b58a:	3b01      	subs	r3, #1
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	f2c0 814e 	blt.w	801b82e <tcp_receive+0x442>
 801b592:	4b32      	ldr	r3, [pc, #200]	; (801b65c <tcp_receive+0x270>)
 801b594:	681a      	ldr	r2, [r3, #0]
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b59a:	1ad3      	subs	r3, r2, r3
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	f300 8146 	bgt.w	801b82e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	8b5b      	ldrh	r3, [r3, #26]
 801b5a6:	f003 0304 	and.w	r3, r3, #4
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d010      	beq.n	801b5d0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	8b5b      	ldrh	r3, [r3, #26]
 801b5b2:	f023 0304 	bic.w	r3, r3, #4
 801b5b6:	b29a      	uxth	r2, r3
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	2200      	movs	r2, #0
 801b5cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	2200      	movs	r2, #0
 801b5d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b5de:	10db      	asrs	r3, r3, #3
 801b5e0:	b21b      	sxth	r3, r3
 801b5e2:	b29a      	uxth	r2, r3
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b5ea:	b29b      	uxth	r3, r3
 801b5ec:	4413      	add	r3, r2
 801b5ee:	b29b      	uxth	r3, r3
 801b5f0:	b21a      	sxth	r2, r3
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801b5f8:	4b18      	ldr	r3, [pc, #96]	; (801b65c <tcp_receive+0x270>)
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	b29a      	uxth	r2, r3
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b602:	b29b      	uxth	r3, r3
 801b604:	1ad3      	subs	r3, r2, r3
 801b606:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	2200      	movs	r2, #0
 801b60c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801b610:	4b12      	ldr	r3, [pc, #72]	; (801b65c <tcp_receive+0x270>)
 801b612:	681a      	ldr	r2, [r3, #0]
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	7d1b      	ldrb	r3, [r3, #20]
 801b61c:	2b03      	cmp	r3, #3
 801b61e:	f240 8097 	bls.w	801b750 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b62e:	429a      	cmp	r2, r3
 801b630:	d245      	bcs.n	801b6be <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	8b5b      	ldrh	r3, [r3, #26]
 801b636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d014      	beq.n	801b668 <tcp_receive+0x27c>
 801b63e:	2301      	movs	r3, #1
 801b640:	e013      	b.n	801b66a <tcp_receive+0x27e>
 801b642:	bf00      	nop
 801b644:	08022f88 	.word	0x08022f88
 801b648:	080232fc 	.word	0x080232fc
 801b64c:	08023018 	.word	0x08023018
 801b650:	08023318 	.word	0x08023318
 801b654:	2400f964 	.word	0x2400f964
 801b658:	2400f958 	.word	0x2400f958
 801b65c:	2400f95c 	.word	0x2400f95c
 801b660:	2400f948 	.word	0x2400f948
 801b664:	2400f962 	.word	0x2400f962
 801b668:	2302      	movs	r3, #2
 801b66a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801b66e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b672:	b29a      	uxth	r2, r3
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b678:	fb12 f303 	smulbb	r3, r2, r3
 801b67c:	b29b      	uxth	r3, r3
 801b67e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801b680:	4293      	cmp	r3, r2
 801b682:	bf28      	it	cs
 801b684:	4613      	movcs	r3, r2
 801b686:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b68e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b690:	4413      	add	r3, r2
 801b692:	b29a      	uxth	r2, r3
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b69a:	429a      	cmp	r2, r3
 801b69c:	d309      	bcc.n	801b6b2 <tcp_receive+0x2c6>
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b6a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b6a6:	4413      	add	r3, r2
 801b6a8:	b29a      	uxth	r2, r3
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b6b0:	e04e      	b.n	801b750 <tcp_receive+0x364>
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b6b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b6bc:	e048      	b.n	801b750 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b6c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b6c6:	4413      	add	r3, r2
 801b6c8:	b29a      	uxth	r2, r3
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801b6d0:	429a      	cmp	r2, r3
 801b6d2:	d309      	bcc.n	801b6e8 <tcp_receive+0x2fc>
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b6da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b6dc:	4413      	add	r3, r2
 801b6de:	b29a      	uxth	r2, r3
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801b6e6:	e004      	b.n	801b6f2 <tcp_receive+0x306>
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b6ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b6fe:	429a      	cmp	r2, r3
 801b700:	d326      	bcc.n	801b750 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b70e:	1ad3      	subs	r3, r2, r3
 801b710:	b29a      	uxth	r2, r3
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b722:	4413      	add	r3, r2
 801b724:	b29a      	uxth	r2, r3
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b72c:	429a      	cmp	r2, r3
 801b72e:	d30a      	bcc.n	801b746 <tcp_receive+0x35a>
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b73a:	4413      	add	r3, r2
 801b73c:	b29a      	uxth	r2, r3
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b744:	e004      	b.n	801b750 <tcp_receive+0x364>
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b74c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b758:	4a98      	ldr	r2, [pc, #608]	; (801b9bc <tcp_receive+0x5d0>)
 801b75a:	6878      	ldr	r0, [r7, #4]
 801b75c:	f7ff fdca 	bl	801b2f4 <tcp_free_acked_segments>
 801b760:	4602      	mov	r2, r0
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b76e:	4a94      	ldr	r2, [pc, #592]	; (801b9c0 <tcp_receive+0x5d4>)
 801b770:	6878      	ldr	r0, [r7, #4]
 801b772:	f7ff fdbf 	bl	801b2f4 <tcp_free_acked_segments>
 801b776:	4602      	mov	r2, r0
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b780:	2b00      	cmp	r3, #0
 801b782:	d104      	bne.n	801b78e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b78a:	861a      	strh	r2, [r3, #48]	; 0x30
 801b78c:	e002      	b.n	801b794 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	2200      	movs	r2, #0
 801b792:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	2200      	movs	r2, #0
 801b798:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d103      	bne.n	801b7aa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801b7b0:	4b84      	ldr	r3, [pc, #528]	; (801b9c4 <tcp_receive+0x5d8>)
 801b7b2:	881b      	ldrh	r3, [r3, #0]
 801b7b4:	4413      	add	r3, r2
 801b7b6:	b29a      	uxth	r2, r3
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	8b5b      	ldrh	r3, [r3, #26]
 801b7c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d035      	beq.n	801b836 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d118      	bne.n	801b804 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d00c      	beq.n	801b7f4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b7e2:	68db      	ldr	r3, [r3, #12]
 801b7e4:	685b      	ldr	r3, [r3, #4]
 801b7e6:	4618      	mov	r0, r3
 801b7e8:	f7f8 f89d 	bl	8013926 <lwip_htonl>
 801b7ec:	4603      	mov	r3, r0
 801b7ee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	dc20      	bgt.n	801b836 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	8b5b      	ldrh	r3, [r3, #26]
 801b7f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b7fc:	b29a      	uxth	r2, r3
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b802:	e018      	b.n	801b836 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b80c:	68db      	ldr	r3, [r3, #12]
 801b80e:	685b      	ldr	r3, [r3, #4]
 801b810:	4618      	mov	r0, r3
 801b812:	f7f8 f888 	bl	8013926 <lwip_htonl>
 801b816:	4603      	mov	r3, r0
 801b818:	1ae3      	subs	r3, r4, r3
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	dc0b      	bgt.n	801b836 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	8b5b      	ldrh	r3, [r3, #26]
 801b822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b826:	b29a      	uxth	r2, r3
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b82c:	e003      	b.n	801b836 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801b82e:	6878      	ldr	r0, [r7, #4]
 801b830:	f002 fbce 	bl	801dfd0 <tcp_send_empty_ack>
 801b834:	e000      	b.n	801b838 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b836:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d05b      	beq.n	801b8f8 <tcp_receive+0x50c>
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b844:	4b60      	ldr	r3, [pc, #384]	; (801b9c8 <tcp_receive+0x5dc>)
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	1ad3      	subs	r3, r2, r3
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	da54      	bge.n	801b8f8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801b84e:	4b5f      	ldr	r3, [pc, #380]	; (801b9cc <tcp_receive+0x5e0>)
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	b29a      	uxth	r2, r3
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b858:	b29b      	uxth	r3, r3
 801b85a:	1ad3      	subs	r3, r2, r3
 801b85c:	b29b      	uxth	r3, r3
 801b85e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801b862:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b86c:	10db      	asrs	r3, r3, #3
 801b86e:	b21b      	sxth	r3, r3
 801b870:	b29b      	uxth	r3, r3
 801b872:	1ad3      	subs	r3, r2, r3
 801b874:	b29b      	uxth	r3, r3
 801b876:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b880:	b29a      	uxth	r2, r3
 801b882:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b886:	4413      	add	r3, r2
 801b888:	b29b      	uxth	r3, r3
 801b88a:	b21a      	sxth	r2, r3
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801b890:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801b894:	2b00      	cmp	r3, #0
 801b896:	da05      	bge.n	801b8a4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801b898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b89c:	425b      	negs	r3, r3
 801b89e:	b29b      	uxth	r3, r3
 801b8a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801b8a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b8ae:	109b      	asrs	r3, r3, #2
 801b8b0:	b21b      	sxth	r3, r3
 801b8b2:	b29b      	uxth	r3, r3
 801b8b4:	1ad3      	subs	r3, r2, r3
 801b8b6:	b29b      	uxth	r3, r3
 801b8b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b8c2:	b29a      	uxth	r2, r3
 801b8c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b8c8:	4413      	add	r3, r2
 801b8ca:	b29b      	uxth	r3, r3
 801b8cc:	b21a      	sxth	r2, r3
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b8d8:	10db      	asrs	r3, r3, #3
 801b8da:	b21b      	sxth	r3, r3
 801b8dc:	b29a      	uxth	r2, r3
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b8e4:	b29b      	uxth	r3, r3
 801b8e6:	4413      	add	r3, r2
 801b8e8:	b29b      	uxth	r3, r3
 801b8ea:	b21a      	sxth	r2, r3
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801b8f8:	4b35      	ldr	r3, [pc, #212]	; (801b9d0 <tcp_receive+0x5e4>)
 801b8fa:	881b      	ldrh	r3, [r3, #0]
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	f000 84e2 	beq.w	801c2c6 <tcp_receive+0xeda>
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	7d1b      	ldrb	r3, [r3, #20]
 801b906:	2b06      	cmp	r3, #6
 801b908:	f200 84dd 	bhi.w	801c2c6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b910:	4b30      	ldr	r3, [pc, #192]	; (801b9d4 <tcp_receive+0x5e8>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	1ad3      	subs	r3, r2, r3
 801b916:	3b01      	subs	r3, #1
 801b918:	2b00      	cmp	r3, #0
 801b91a:	f2c0 808f 	blt.w	801ba3c <tcp_receive+0x650>
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b922:	4b2b      	ldr	r3, [pc, #172]	; (801b9d0 <tcp_receive+0x5e4>)
 801b924:	881b      	ldrh	r3, [r3, #0]
 801b926:	4619      	mov	r1, r3
 801b928:	4b2a      	ldr	r3, [pc, #168]	; (801b9d4 <tcp_receive+0x5e8>)
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	440b      	add	r3, r1
 801b92e:	1ad3      	subs	r3, r2, r3
 801b930:	3301      	adds	r3, #1
 801b932:	2b00      	cmp	r3, #0
 801b934:	f300 8082 	bgt.w	801ba3c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801b938:	4b27      	ldr	r3, [pc, #156]	; (801b9d8 <tcp_receive+0x5ec>)
 801b93a:	685b      	ldr	r3, [r3, #4]
 801b93c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b942:	4b24      	ldr	r3, [pc, #144]	; (801b9d4 <tcp_receive+0x5e8>)
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	1ad3      	subs	r3, r2, r3
 801b948:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801b94a:	4b23      	ldr	r3, [pc, #140]	; (801b9d8 <tcp_receive+0x5ec>)
 801b94c:	685b      	ldr	r3, [r3, #4]
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d106      	bne.n	801b960 <tcp_receive+0x574>
 801b952:	4b22      	ldr	r3, [pc, #136]	; (801b9dc <tcp_receive+0x5f0>)
 801b954:	f240 5294 	movw	r2, #1428	; 0x594
 801b958:	4921      	ldr	r1, [pc, #132]	; (801b9e0 <tcp_receive+0x5f4>)
 801b95a:	4822      	ldr	r0, [pc, #136]	; (801b9e4 <tcp_receive+0x5f8>)
 801b95c:	f004 f84e 	bl	801f9fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b962:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b966:	4293      	cmp	r3, r2
 801b968:	d906      	bls.n	801b978 <tcp_receive+0x58c>
 801b96a:	4b1c      	ldr	r3, [pc, #112]	; (801b9dc <tcp_receive+0x5f0>)
 801b96c:	f240 5295 	movw	r2, #1429	; 0x595
 801b970:	491d      	ldr	r1, [pc, #116]	; (801b9e8 <tcp_receive+0x5fc>)
 801b972:	481c      	ldr	r0, [pc, #112]	; (801b9e4 <tcp_receive+0x5f8>)
 801b974:	f004 f842 	bl	801f9fc <iprintf>
      off = (u16_t)off32;
 801b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b97a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801b97e:	4b16      	ldr	r3, [pc, #88]	; (801b9d8 <tcp_receive+0x5ec>)
 801b980:	685b      	ldr	r3, [r3, #4]
 801b982:	891b      	ldrh	r3, [r3, #8]
 801b984:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b988:	429a      	cmp	r2, r3
 801b98a:	d906      	bls.n	801b99a <tcp_receive+0x5ae>
 801b98c:	4b13      	ldr	r3, [pc, #76]	; (801b9dc <tcp_receive+0x5f0>)
 801b98e:	f240 5297 	movw	r2, #1431	; 0x597
 801b992:	4916      	ldr	r1, [pc, #88]	; (801b9ec <tcp_receive+0x600>)
 801b994:	4813      	ldr	r0, [pc, #76]	; (801b9e4 <tcp_receive+0x5f8>)
 801b996:	f004 f831 	bl	801f9fc <iprintf>
      inseg.len -= off;
 801b99a:	4b0f      	ldr	r3, [pc, #60]	; (801b9d8 <tcp_receive+0x5ec>)
 801b99c:	891a      	ldrh	r2, [r3, #8]
 801b99e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b9a2:	1ad3      	subs	r3, r2, r3
 801b9a4:	b29a      	uxth	r2, r3
 801b9a6:	4b0c      	ldr	r3, [pc, #48]	; (801b9d8 <tcp_receive+0x5ec>)
 801b9a8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801b9aa:	4b0b      	ldr	r3, [pc, #44]	; (801b9d8 <tcp_receive+0x5ec>)
 801b9ac:	685b      	ldr	r3, [r3, #4]
 801b9ae:	891a      	ldrh	r2, [r3, #8]
 801b9b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b9b4:	1ad3      	subs	r3, r2, r3
 801b9b6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801b9b8:	e02a      	b.n	801ba10 <tcp_receive+0x624>
 801b9ba:	bf00      	nop
 801b9bc:	08023334 	.word	0x08023334
 801b9c0:	0802333c 	.word	0x0802333c
 801b9c4:	2400f960 	.word	0x2400f960
 801b9c8:	2400f95c 	.word	0x2400f95c
 801b9cc:	2400f920 	.word	0x2400f920
 801b9d0:	2400f962 	.word	0x2400f962
 801b9d4:	2400f958 	.word	0x2400f958
 801b9d8:	2400f938 	.word	0x2400f938
 801b9dc:	08022f88 	.word	0x08022f88
 801b9e0:	08023344 	.word	0x08023344
 801b9e4:	08023018 	.word	0x08023018
 801b9e8:	08023354 	.word	0x08023354
 801b9ec:	08023364 	.word	0x08023364
        off -= p->len;
 801b9f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b9f2:	895b      	ldrh	r3, [r3, #10]
 801b9f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b9f8:	1ad3      	subs	r3, r2, r3
 801b9fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801b9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ba00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ba02:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801ba04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ba06:	2200      	movs	r2, #0
 801ba08:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801ba0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801ba10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ba12:	895b      	ldrh	r3, [r3, #10]
 801ba14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ba18:	429a      	cmp	r2, r3
 801ba1a:	d8e9      	bhi.n	801b9f0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801ba1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ba20:	4619      	mov	r1, r3
 801ba22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ba24:	f7fb feb8 	bl	8017798 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba2c:	4a91      	ldr	r2, [pc, #580]	; (801bc74 <tcp_receive+0x888>)
 801ba2e:	6013      	str	r3, [r2, #0]
 801ba30:	4b91      	ldr	r3, [pc, #580]	; (801bc78 <tcp_receive+0x88c>)
 801ba32:	68db      	ldr	r3, [r3, #12]
 801ba34:	4a8f      	ldr	r2, [pc, #572]	; (801bc74 <tcp_receive+0x888>)
 801ba36:	6812      	ldr	r2, [r2, #0]
 801ba38:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ba3a:	e00d      	b.n	801ba58 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801ba3c:	4b8d      	ldr	r3, [pc, #564]	; (801bc74 <tcp_receive+0x888>)
 801ba3e:	681a      	ldr	r2, [r3, #0]
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba44:	1ad3      	subs	r3, r2, r3
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	da06      	bge.n	801ba58 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	8b5b      	ldrh	r3, [r3, #26]
 801ba4e:	f043 0302 	orr.w	r3, r3, #2
 801ba52:	b29a      	uxth	r2, r3
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ba58:	4b86      	ldr	r3, [pc, #536]	; (801bc74 <tcp_receive+0x888>)
 801ba5a:	681a      	ldr	r2, [r3, #0]
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba60:	1ad3      	subs	r3, r2, r3
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	f2c0 842a 	blt.w	801c2bc <tcp_receive+0xed0>
 801ba68:	4b82      	ldr	r3, [pc, #520]	; (801bc74 <tcp_receive+0x888>)
 801ba6a:	681a      	ldr	r2, [r3, #0]
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba70:	6879      	ldr	r1, [r7, #4]
 801ba72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ba74:	440b      	add	r3, r1
 801ba76:	1ad3      	subs	r3, r2, r3
 801ba78:	3301      	adds	r3, #1
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	f300 841e 	bgt.w	801c2bc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba84:	4b7b      	ldr	r3, [pc, #492]	; (801bc74 <tcp_receive+0x888>)
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	429a      	cmp	r2, r3
 801ba8a:	f040 829a 	bne.w	801bfc2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801ba8e:	4b7a      	ldr	r3, [pc, #488]	; (801bc78 <tcp_receive+0x88c>)
 801ba90:	891c      	ldrh	r4, [r3, #8]
 801ba92:	4b79      	ldr	r3, [pc, #484]	; (801bc78 <tcp_receive+0x88c>)
 801ba94:	68db      	ldr	r3, [r3, #12]
 801ba96:	899b      	ldrh	r3, [r3, #12]
 801ba98:	b29b      	uxth	r3, r3
 801ba9a:	4618      	mov	r0, r3
 801ba9c:	f7f7 ff2e 	bl	80138fc <lwip_htons>
 801baa0:	4603      	mov	r3, r0
 801baa2:	b2db      	uxtb	r3, r3
 801baa4:	f003 0303 	and.w	r3, r3, #3
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d001      	beq.n	801bab0 <tcp_receive+0x6c4>
 801baac:	2301      	movs	r3, #1
 801baae:	e000      	b.n	801bab2 <tcp_receive+0x6c6>
 801bab0:	2300      	movs	r3, #0
 801bab2:	4423      	add	r3, r4
 801bab4:	b29a      	uxth	r2, r3
 801bab6:	4b71      	ldr	r3, [pc, #452]	; (801bc7c <tcp_receive+0x890>)
 801bab8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801babe:	4b6f      	ldr	r3, [pc, #444]	; (801bc7c <tcp_receive+0x890>)
 801bac0:	881b      	ldrh	r3, [r3, #0]
 801bac2:	429a      	cmp	r2, r3
 801bac4:	d275      	bcs.n	801bbb2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801bac6:	4b6c      	ldr	r3, [pc, #432]	; (801bc78 <tcp_receive+0x88c>)
 801bac8:	68db      	ldr	r3, [r3, #12]
 801baca:	899b      	ldrh	r3, [r3, #12]
 801bacc:	b29b      	uxth	r3, r3
 801bace:	4618      	mov	r0, r3
 801bad0:	f7f7 ff14 	bl	80138fc <lwip_htons>
 801bad4:	4603      	mov	r3, r0
 801bad6:	b2db      	uxtb	r3, r3
 801bad8:	f003 0301 	and.w	r3, r3, #1
 801badc:	2b00      	cmp	r3, #0
 801bade:	d01f      	beq.n	801bb20 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801bae0:	4b65      	ldr	r3, [pc, #404]	; (801bc78 <tcp_receive+0x88c>)
 801bae2:	68db      	ldr	r3, [r3, #12]
 801bae4:	899b      	ldrh	r3, [r3, #12]
 801bae6:	b29b      	uxth	r3, r3
 801bae8:	b21b      	sxth	r3, r3
 801baea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801baee:	b21c      	sxth	r4, r3
 801baf0:	4b61      	ldr	r3, [pc, #388]	; (801bc78 <tcp_receive+0x88c>)
 801baf2:	68db      	ldr	r3, [r3, #12]
 801baf4:	899b      	ldrh	r3, [r3, #12]
 801baf6:	b29b      	uxth	r3, r3
 801baf8:	4618      	mov	r0, r3
 801bafa:	f7f7 feff 	bl	80138fc <lwip_htons>
 801bafe:	4603      	mov	r3, r0
 801bb00:	b2db      	uxtb	r3, r3
 801bb02:	b29b      	uxth	r3, r3
 801bb04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801bb08:	b29b      	uxth	r3, r3
 801bb0a:	4618      	mov	r0, r3
 801bb0c:	f7f7 fef6 	bl	80138fc <lwip_htons>
 801bb10:	4603      	mov	r3, r0
 801bb12:	b21b      	sxth	r3, r3
 801bb14:	4323      	orrs	r3, r4
 801bb16:	b21a      	sxth	r2, r3
 801bb18:	4b57      	ldr	r3, [pc, #348]	; (801bc78 <tcp_receive+0x88c>)
 801bb1a:	68db      	ldr	r3, [r3, #12]
 801bb1c:	b292      	uxth	r2, r2
 801bb1e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bb24:	4b54      	ldr	r3, [pc, #336]	; (801bc78 <tcp_receive+0x88c>)
 801bb26:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801bb28:	4b53      	ldr	r3, [pc, #332]	; (801bc78 <tcp_receive+0x88c>)
 801bb2a:	68db      	ldr	r3, [r3, #12]
 801bb2c:	899b      	ldrh	r3, [r3, #12]
 801bb2e:	b29b      	uxth	r3, r3
 801bb30:	4618      	mov	r0, r3
 801bb32:	f7f7 fee3 	bl	80138fc <lwip_htons>
 801bb36:	4603      	mov	r3, r0
 801bb38:	b2db      	uxtb	r3, r3
 801bb3a:	f003 0302 	and.w	r3, r3, #2
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d005      	beq.n	801bb4e <tcp_receive+0x762>
            inseg.len -= 1;
 801bb42:	4b4d      	ldr	r3, [pc, #308]	; (801bc78 <tcp_receive+0x88c>)
 801bb44:	891b      	ldrh	r3, [r3, #8]
 801bb46:	3b01      	subs	r3, #1
 801bb48:	b29a      	uxth	r2, r3
 801bb4a:	4b4b      	ldr	r3, [pc, #300]	; (801bc78 <tcp_receive+0x88c>)
 801bb4c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801bb4e:	4b4a      	ldr	r3, [pc, #296]	; (801bc78 <tcp_receive+0x88c>)
 801bb50:	685b      	ldr	r3, [r3, #4]
 801bb52:	4a49      	ldr	r2, [pc, #292]	; (801bc78 <tcp_receive+0x88c>)
 801bb54:	8912      	ldrh	r2, [r2, #8]
 801bb56:	4611      	mov	r1, r2
 801bb58:	4618      	mov	r0, r3
 801bb5a:	f7fb fd1f 	bl	801759c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801bb5e:	4b46      	ldr	r3, [pc, #280]	; (801bc78 <tcp_receive+0x88c>)
 801bb60:	891c      	ldrh	r4, [r3, #8]
 801bb62:	4b45      	ldr	r3, [pc, #276]	; (801bc78 <tcp_receive+0x88c>)
 801bb64:	68db      	ldr	r3, [r3, #12]
 801bb66:	899b      	ldrh	r3, [r3, #12]
 801bb68:	b29b      	uxth	r3, r3
 801bb6a:	4618      	mov	r0, r3
 801bb6c:	f7f7 fec6 	bl	80138fc <lwip_htons>
 801bb70:	4603      	mov	r3, r0
 801bb72:	b2db      	uxtb	r3, r3
 801bb74:	f003 0303 	and.w	r3, r3, #3
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d001      	beq.n	801bb80 <tcp_receive+0x794>
 801bb7c:	2301      	movs	r3, #1
 801bb7e:	e000      	b.n	801bb82 <tcp_receive+0x796>
 801bb80:	2300      	movs	r3, #0
 801bb82:	4423      	add	r3, r4
 801bb84:	b29a      	uxth	r2, r3
 801bb86:	4b3d      	ldr	r3, [pc, #244]	; (801bc7c <tcp_receive+0x890>)
 801bb88:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801bb8a:	4b3c      	ldr	r3, [pc, #240]	; (801bc7c <tcp_receive+0x890>)
 801bb8c:	881b      	ldrh	r3, [r3, #0]
 801bb8e:	461a      	mov	r2, r3
 801bb90:	4b38      	ldr	r3, [pc, #224]	; (801bc74 <tcp_receive+0x888>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	441a      	add	r2, r3
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb9a:	6879      	ldr	r1, [r7, #4]
 801bb9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bb9e:	440b      	add	r3, r1
 801bba0:	429a      	cmp	r2, r3
 801bba2:	d006      	beq.n	801bbb2 <tcp_receive+0x7c6>
 801bba4:	4b36      	ldr	r3, [pc, #216]	; (801bc80 <tcp_receive+0x894>)
 801bba6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801bbaa:	4936      	ldr	r1, [pc, #216]	; (801bc84 <tcp_receive+0x898>)
 801bbac:	4836      	ldr	r0, [pc, #216]	; (801bc88 <tcp_receive+0x89c>)
 801bbae:	f003 ff25 	bl	801f9fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	f000 80e7 	beq.w	801bd8a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801bbbc:	4b2e      	ldr	r3, [pc, #184]	; (801bc78 <tcp_receive+0x88c>)
 801bbbe:	68db      	ldr	r3, [r3, #12]
 801bbc0:	899b      	ldrh	r3, [r3, #12]
 801bbc2:	b29b      	uxth	r3, r3
 801bbc4:	4618      	mov	r0, r3
 801bbc6:	f7f7 fe99 	bl	80138fc <lwip_htons>
 801bbca:	4603      	mov	r3, r0
 801bbcc:	b2db      	uxtb	r3, r3
 801bbce:	f003 0301 	and.w	r3, r3, #1
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d010      	beq.n	801bbf8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801bbd6:	e00a      	b.n	801bbee <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bbdc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bbe2:	681a      	ldr	r2, [r3, #0]
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801bbe8:	68f8      	ldr	r0, [r7, #12]
 801bbea:	f7fd fcc4 	bl	8019576 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d1f0      	bne.n	801bbd8 <tcp_receive+0x7ec>
 801bbf6:	e0c8      	b.n	801bd8a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801bbfe:	e052      	b.n	801bca6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801bc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bc02:	68db      	ldr	r3, [r3, #12]
 801bc04:	899b      	ldrh	r3, [r3, #12]
 801bc06:	b29b      	uxth	r3, r3
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7f7 fe77 	bl	80138fc <lwip_htons>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	b2db      	uxtb	r3, r3
 801bc12:	f003 0301 	and.w	r3, r3, #1
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d03d      	beq.n	801bc96 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801bc1a:	4b17      	ldr	r3, [pc, #92]	; (801bc78 <tcp_receive+0x88c>)
 801bc1c:	68db      	ldr	r3, [r3, #12]
 801bc1e:	899b      	ldrh	r3, [r3, #12]
 801bc20:	b29b      	uxth	r3, r3
 801bc22:	4618      	mov	r0, r3
 801bc24:	f7f7 fe6a 	bl	80138fc <lwip_htons>
 801bc28:	4603      	mov	r3, r0
 801bc2a:	b2db      	uxtb	r3, r3
 801bc2c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d130      	bne.n	801bc96 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801bc34:	4b10      	ldr	r3, [pc, #64]	; (801bc78 <tcp_receive+0x88c>)
 801bc36:	68db      	ldr	r3, [r3, #12]
 801bc38:	899b      	ldrh	r3, [r3, #12]
 801bc3a:	b29c      	uxth	r4, r3
 801bc3c:	2001      	movs	r0, #1
 801bc3e:	f7f7 fe5d 	bl	80138fc <lwip_htons>
 801bc42:	4603      	mov	r3, r0
 801bc44:	461a      	mov	r2, r3
 801bc46:	4b0c      	ldr	r3, [pc, #48]	; (801bc78 <tcp_receive+0x88c>)
 801bc48:	68db      	ldr	r3, [r3, #12]
 801bc4a:	4322      	orrs	r2, r4
 801bc4c:	b292      	uxth	r2, r2
 801bc4e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801bc50:	4b09      	ldr	r3, [pc, #36]	; (801bc78 <tcp_receive+0x88c>)
 801bc52:	891c      	ldrh	r4, [r3, #8]
 801bc54:	4b08      	ldr	r3, [pc, #32]	; (801bc78 <tcp_receive+0x88c>)
 801bc56:	68db      	ldr	r3, [r3, #12]
 801bc58:	899b      	ldrh	r3, [r3, #12]
 801bc5a:	b29b      	uxth	r3, r3
 801bc5c:	4618      	mov	r0, r3
 801bc5e:	f7f7 fe4d 	bl	80138fc <lwip_htons>
 801bc62:	4603      	mov	r3, r0
 801bc64:	b2db      	uxtb	r3, r3
 801bc66:	f003 0303 	and.w	r3, r3, #3
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d00e      	beq.n	801bc8c <tcp_receive+0x8a0>
 801bc6e:	2301      	movs	r3, #1
 801bc70:	e00d      	b.n	801bc8e <tcp_receive+0x8a2>
 801bc72:	bf00      	nop
 801bc74:	2400f958 	.word	0x2400f958
 801bc78:	2400f938 	.word	0x2400f938
 801bc7c:	2400f962 	.word	0x2400f962
 801bc80:	08022f88 	.word	0x08022f88
 801bc84:	08023374 	.word	0x08023374
 801bc88:	08023018 	.word	0x08023018
 801bc8c:	2300      	movs	r3, #0
 801bc8e:	4423      	add	r3, r4
 801bc90:	b29a      	uxth	r2, r3
 801bc92:	4b98      	ldr	r3, [pc, #608]	; (801bef4 <tcp_receive+0xb08>)
 801bc94:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801bc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bc98:	613b      	str	r3, [r7, #16]
              next = next->next;
 801bc9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801bca0:	6938      	ldr	r0, [r7, #16]
 801bca2:	f7fd fc68 	bl	8019576 <tcp_seg_free>
            while (next &&
 801bca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	d00e      	beq.n	801bcca <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801bcac:	4b91      	ldr	r3, [pc, #580]	; (801bef4 <tcp_receive+0xb08>)
 801bcae:	881b      	ldrh	r3, [r3, #0]
 801bcb0:	461a      	mov	r2, r3
 801bcb2:	4b91      	ldr	r3, [pc, #580]	; (801bef8 <tcp_receive+0xb0c>)
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	441a      	add	r2, r3
 801bcb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bcba:	68db      	ldr	r3, [r3, #12]
 801bcbc:	685b      	ldr	r3, [r3, #4]
 801bcbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801bcc0:	8909      	ldrh	r1, [r1, #8]
 801bcc2:	440b      	add	r3, r1
 801bcc4:	1ad3      	subs	r3, r2, r3
            while (next &&
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	da9a      	bge.n	801bc00 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801bcca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d059      	beq.n	801bd84 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801bcd0:	4b88      	ldr	r3, [pc, #544]	; (801bef4 <tcp_receive+0xb08>)
 801bcd2:	881b      	ldrh	r3, [r3, #0]
 801bcd4:	461a      	mov	r2, r3
 801bcd6:	4b88      	ldr	r3, [pc, #544]	; (801bef8 <tcp_receive+0xb0c>)
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	441a      	add	r2, r3
 801bcdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bcde:	68db      	ldr	r3, [r3, #12]
 801bce0:	685b      	ldr	r3, [r3, #4]
 801bce2:	1ad3      	subs	r3, r2, r3
            if (next &&
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	dd4d      	ble.n	801bd84 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801bce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bcea:	68db      	ldr	r3, [r3, #12]
 801bcec:	685b      	ldr	r3, [r3, #4]
 801bcee:	b29a      	uxth	r2, r3
 801bcf0:	4b81      	ldr	r3, [pc, #516]	; (801bef8 <tcp_receive+0xb0c>)
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	b29b      	uxth	r3, r3
 801bcf6:	1ad3      	subs	r3, r2, r3
 801bcf8:	b29a      	uxth	r2, r3
 801bcfa:	4b80      	ldr	r3, [pc, #512]	; (801befc <tcp_receive+0xb10>)
 801bcfc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801bcfe:	4b7f      	ldr	r3, [pc, #508]	; (801befc <tcp_receive+0xb10>)
 801bd00:	68db      	ldr	r3, [r3, #12]
 801bd02:	899b      	ldrh	r3, [r3, #12]
 801bd04:	b29b      	uxth	r3, r3
 801bd06:	4618      	mov	r0, r3
 801bd08:	f7f7 fdf8 	bl	80138fc <lwip_htons>
 801bd0c:	4603      	mov	r3, r0
 801bd0e:	b2db      	uxtb	r3, r3
 801bd10:	f003 0302 	and.w	r3, r3, #2
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d005      	beq.n	801bd24 <tcp_receive+0x938>
                inseg.len -= 1;
 801bd18:	4b78      	ldr	r3, [pc, #480]	; (801befc <tcp_receive+0xb10>)
 801bd1a:	891b      	ldrh	r3, [r3, #8]
 801bd1c:	3b01      	subs	r3, #1
 801bd1e:	b29a      	uxth	r2, r3
 801bd20:	4b76      	ldr	r3, [pc, #472]	; (801befc <tcp_receive+0xb10>)
 801bd22:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801bd24:	4b75      	ldr	r3, [pc, #468]	; (801befc <tcp_receive+0xb10>)
 801bd26:	685b      	ldr	r3, [r3, #4]
 801bd28:	4a74      	ldr	r2, [pc, #464]	; (801befc <tcp_receive+0xb10>)
 801bd2a:	8912      	ldrh	r2, [r2, #8]
 801bd2c:	4611      	mov	r1, r2
 801bd2e:	4618      	mov	r0, r3
 801bd30:	f7fb fc34 	bl	801759c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801bd34:	4b71      	ldr	r3, [pc, #452]	; (801befc <tcp_receive+0xb10>)
 801bd36:	891c      	ldrh	r4, [r3, #8]
 801bd38:	4b70      	ldr	r3, [pc, #448]	; (801befc <tcp_receive+0xb10>)
 801bd3a:	68db      	ldr	r3, [r3, #12]
 801bd3c:	899b      	ldrh	r3, [r3, #12]
 801bd3e:	b29b      	uxth	r3, r3
 801bd40:	4618      	mov	r0, r3
 801bd42:	f7f7 fddb 	bl	80138fc <lwip_htons>
 801bd46:	4603      	mov	r3, r0
 801bd48:	b2db      	uxtb	r3, r3
 801bd4a:	f003 0303 	and.w	r3, r3, #3
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d001      	beq.n	801bd56 <tcp_receive+0x96a>
 801bd52:	2301      	movs	r3, #1
 801bd54:	e000      	b.n	801bd58 <tcp_receive+0x96c>
 801bd56:	2300      	movs	r3, #0
 801bd58:	4423      	add	r3, r4
 801bd5a:	b29a      	uxth	r2, r3
 801bd5c:	4b65      	ldr	r3, [pc, #404]	; (801bef4 <tcp_receive+0xb08>)
 801bd5e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801bd60:	4b64      	ldr	r3, [pc, #400]	; (801bef4 <tcp_receive+0xb08>)
 801bd62:	881b      	ldrh	r3, [r3, #0]
 801bd64:	461a      	mov	r2, r3
 801bd66:	4b64      	ldr	r3, [pc, #400]	; (801bef8 <tcp_receive+0xb0c>)
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	441a      	add	r2, r3
 801bd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bd6e:	68db      	ldr	r3, [r3, #12]
 801bd70:	685b      	ldr	r3, [r3, #4]
 801bd72:	429a      	cmp	r2, r3
 801bd74:	d006      	beq.n	801bd84 <tcp_receive+0x998>
 801bd76:	4b62      	ldr	r3, [pc, #392]	; (801bf00 <tcp_receive+0xb14>)
 801bd78:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801bd7c:	4961      	ldr	r1, [pc, #388]	; (801bf04 <tcp_receive+0xb18>)
 801bd7e:	4862      	ldr	r0, [pc, #392]	; (801bf08 <tcp_receive+0xb1c>)
 801bd80:	f003 fe3c 	bl	801f9fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bd88:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801bd8a:	4b5a      	ldr	r3, [pc, #360]	; (801bef4 <tcp_receive+0xb08>)
 801bd8c:	881b      	ldrh	r3, [r3, #0]
 801bd8e:	461a      	mov	r2, r3
 801bd90:	4b59      	ldr	r3, [pc, #356]	; (801bef8 <tcp_receive+0xb0c>)
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	441a      	add	r2, r3
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bd9e:	4b55      	ldr	r3, [pc, #340]	; (801bef4 <tcp_receive+0xb08>)
 801bda0:	881b      	ldrh	r3, [r3, #0]
 801bda2:	429a      	cmp	r2, r3
 801bda4:	d206      	bcs.n	801bdb4 <tcp_receive+0x9c8>
 801bda6:	4b56      	ldr	r3, [pc, #344]	; (801bf00 <tcp_receive+0xb14>)
 801bda8:	f240 6207 	movw	r2, #1543	; 0x607
 801bdac:	4957      	ldr	r1, [pc, #348]	; (801bf0c <tcp_receive+0xb20>)
 801bdae:	4856      	ldr	r0, [pc, #344]	; (801bf08 <tcp_receive+0xb1c>)
 801bdb0:	f003 fe24 	bl	801f9fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bdb8:	4b4e      	ldr	r3, [pc, #312]	; (801bef4 <tcp_receive+0xb08>)
 801bdba:	881b      	ldrh	r3, [r3, #0]
 801bdbc:	1ad3      	subs	r3, r2, r3
 801bdbe:	b29a      	uxth	r2, r3
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801bdc4:	6878      	ldr	r0, [r7, #4]
 801bdc6:	f7fc fead 	bl	8018b24 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801bdca:	4b4c      	ldr	r3, [pc, #304]	; (801befc <tcp_receive+0xb10>)
 801bdcc:	685b      	ldr	r3, [r3, #4]
 801bdce:	891b      	ldrh	r3, [r3, #8]
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d006      	beq.n	801bde2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801bdd4:	4b49      	ldr	r3, [pc, #292]	; (801befc <tcp_receive+0xb10>)
 801bdd6:	685b      	ldr	r3, [r3, #4]
 801bdd8:	4a4d      	ldr	r2, [pc, #308]	; (801bf10 <tcp_receive+0xb24>)
 801bdda:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801bddc:	4b47      	ldr	r3, [pc, #284]	; (801befc <tcp_receive+0xb10>)
 801bdde:	2200      	movs	r2, #0
 801bde0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801bde2:	4b46      	ldr	r3, [pc, #280]	; (801befc <tcp_receive+0xb10>)
 801bde4:	68db      	ldr	r3, [r3, #12]
 801bde6:	899b      	ldrh	r3, [r3, #12]
 801bde8:	b29b      	uxth	r3, r3
 801bdea:	4618      	mov	r0, r3
 801bdec:	f7f7 fd86 	bl	80138fc <lwip_htons>
 801bdf0:	4603      	mov	r3, r0
 801bdf2:	b2db      	uxtb	r3, r3
 801bdf4:	f003 0301 	and.w	r3, r3, #1
 801bdf8:	2b00      	cmp	r3, #0
 801bdfa:	f000 80b8 	beq.w	801bf6e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801bdfe:	4b45      	ldr	r3, [pc, #276]	; (801bf14 <tcp_receive+0xb28>)
 801be00:	781b      	ldrb	r3, [r3, #0]
 801be02:	f043 0320 	orr.w	r3, r3, #32
 801be06:	b2da      	uxtb	r2, r3
 801be08:	4b42      	ldr	r3, [pc, #264]	; (801bf14 <tcp_receive+0xb28>)
 801be0a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801be0c:	e0af      	b.n	801bf6e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801be12:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801be18:	68db      	ldr	r3, [r3, #12]
 801be1a:	685b      	ldr	r3, [r3, #4]
 801be1c:	4a36      	ldr	r2, [pc, #216]	; (801bef8 <tcp_receive+0xb0c>)
 801be1e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801be20:	68bb      	ldr	r3, [r7, #8]
 801be22:	891b      	ldrh	r3, [r3, #8]
 801be24:	461c      	mov	r4, r3
 801be26:	68bb      	ldr	r3, [r7, #8]
 801be28:	68db      	ldr	r3, [r3, #12]
 801be2a:	899b      	ldrh	r3, [r3, #12]
 801be2c:	b29b      	uxth	r3, r3
 801be2e:	4618      	mov	r0, r3
 801be30:	f7f7 fd64 	bl	80138fc <lwip_htons>
 801be34:	4603      	mov	r3, r0
 801be36:	b2db      	uxtb	r3, r3
 801be38:	f003 0303 	and.w	r3, r3, #3
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d001      	beq.n	801be44 <tcp_receive+0xa58>
 801be40:	2301      	movs	r3, #1
 801be42:	e000      	b.n	801be46 <tcp_receive+0xa5a>
 801be44:	2300      	movs	r3, #0
 801be46:	191a      	adds	r2, r3, r4
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be4c:	441a      	add	r2, r3
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801be56:	461c      	mov	r4, r3
 801be58:	68bb      	ldr	r3, [r7, #8]
 801be5a:	891b      	ldrh	r3, [r3, #8]
 801be5c:	461d      	mov	r5, r3
 801be5e:	68bb      	ldr	r3, [r7, #8]
 801be60:	68db      	ldr	r3, [r3, #12]
 801be62:	899b      	ldrh	r3, [r3, #12]
 801be64:	b29b      	uxth	r3, r3
 801be66:	4618      	mov	r0, r3
 801be68:	f7f7 fd48 	bl	80138fc <lwip_htons>
 801be6c:	4603      	mov	r3, r0
 801be6e:	b2db      	uxtb	r3, r3
 801be70:	f003 0303 	and.w	r3, r3, #3
 801be74:	2b00      	cmp	r3, #0
 801be76:	d001      	beq.n	801be7c <tcp_receive+0xa90>
 801be78:	2301      	movs	r3, #1
 801be7a:	e000      	b.n	801be7e <tcp_receive+0xa92>
 801be7c:	2300      	movs	r3, #0
 801be7e:	442b      	add	r3, r5
 801be80:	429c      	cmp	r4, r3
 801be82:	d206      	bcs.n	801be92 <tcp_receive+0xaa6>
 801be84:	4b1e      	ldr	r3, [pc, #120]	; (801bf00 <tcp_receive+0xb14>)
 801be86:	f240 622b 	movw	r2, #1579	; 0x62b
 801be8a:	4923      	ldr	r1, [pc, #140]	; (801bf18 <tcp_receive+0xb2c>)
 801be8c:	481e      	ldr	r0, [pc, #120]	; (801bf08 <tcp_receive+0xb1c>)
 801be8e:	f003 fdb5 	bl	801f9fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801be92:	68bb      	ldr	r3, [r7, #8]
 801be94:	891b      	ldrh	r3, [r3, #8]
 801be96:	461c      	mov	r4, r3
 801be98:	68bb      	ldr	r3, [r7, #8]
 801be9a:	68db      	ldr	r3, [r3, #12]
 801be9c:	899b      	ldrh	r3, [r3, #12]
 801be9e:	b29b      	uxth	r3, r3
 801bea0:	4618      	mov	r0, r3
 801bea2:	f7f7 fd2b 	bl	80138fc <lwip_htons>
 801bea6:	4603      	mov	r3, r0
 801bea8:	b2db      	uxtb	r3, r3
 801beaa:	f003 0303 	and.w	r3, r3, #3
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d001      	beq.n	801beb6 <tcp_receive+0xaca>
 801beb2:	2301      	movs	r3, #1
 801beb4:	e000      	b.n	801beb8 <tcp_receive+0xacc>
 801beb6:	2300      	movs	r3, #0
 801beb8:	1919      	adds	r1, r3, r4
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bebe:	b28b      	uxth	r3, r1
 801bec0:	1ad3      	subs	r3, r2, r3
 801bec2:	b29a      	uxth	r2, r3
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801bec8:	6878      	ldr	r0, [r7, #4]
 801beca:	f7fc fe2b 	bl	8018b24 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801bece:	68bb      	ldr	r3, [r7, #8]
 801bed0:	685b      	ldr	r3, [r3, #4]
 801bed2:	891b      	ldrh	r3, [r3, #8]
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d028      	beq.n	801bf2a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801bed8:	4b0d      	ldr	r3, [pc, #52]	; (801bf10 <tcp_receive+0xb24>)
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d01d      	beq.n	801bf1c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801bee0:	4b0b      	ldr	r3, [pc, #44]	; (801bf10 <tcp_receive+0xb24>)
 801bee2:	681a      	ldr	r2, [r3, #0]
 801bee4:	68bb      	ldr	r3, [r7, #8]
 801bee6:	685b      	ldr	r3, [r3, #4]
 801bee8:	4619      	mov	r1, r3
 801beea:	4610      	mov	r0, r2
 801beec:	f7fb fda8 	bl	8017a40 <pbuf_cat>
 801bef0:	e018      	b.n	801bf24 <tcp_receive+0xb38>
 801bef2:	bf00      	nop
 801bef4:	2400f962 	.word	0x2400f962
 801bef8:	2400f958 	.word	0x2400f958
 801befc:	2400f938 	.word	0x2400f938
 801bf00:	08022f88 	.word	0x08022f88
 801bf04:	080233ac 	.word	0x080233ac
 801bf08:	08023018 	.word	0x08023018
 801bf0c:	080233e8 	.word	0x080233e8
 801bf10:	2400f968 	.word	0x2400f968
 801bf14:	2400f965 	.word	0x2400f965
 801bf18:	08023408 	.word	0x08023408
            } else {
              recv_data = cseg->p;
 801bf1c:	68bb      	ldr	r3, [r7, #8]
 801bf1e:	685b      	ldr	r3, [r3, #4]
 801bf20:	4a70      	ldr	r2, [pc, #448]	; (801c0e4 <tcp_receive+0xcf8>)
 801bf22:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801bf24:	68bb      	ldr	r3, [r7, #8]
 801bf26:	2200      	movs	r2, #0
 801bf28:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801bf2a:	68bb      	ldr	r3, [r7, #8]
 801bf2c:	68db      	ldr	r3, [r3, #12]
 801bf2e:	899b      	ldrh	r3, [r3, #12]
 801bf30:	b29b      	uxth	r3, r3
 801bf32:	4618      	mov	r0, r3
 801bf34:	f7f7 fce2 	bl	80138fc <lwip_htons>
 801bf38:	4603      	mov	r3, r0
 801bf3a:	b2db      	uxtb	r3, r3
 801bf3c:	f003 0301 	and.w	r3, r3, #1
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d00d      	beq.n	801bf60 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801bf44:	4b68      	ldr	r3, [pc, #416]	; (801c0e8 <tcp_receive+0xcfc>)
 801bf46:	781b      	ldrb	r3, [r3, #0]
 801bf48:	f043 0320 	orr.w	r3, r3, #32
 801bf4c:	b2da      	uxtb	r2, r3
 801bf4e:	4b66      	ldr	r3, [pc, #408]	; (801c0e8 <tcp_receive+0xcfc>)
 801bf50:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	7d1b      	ldrb	r3, [r3, #20]
 801bf56:	2b04      	cmp	r3, #4
 801bf58:	d102      	bne.n	801bf60 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	2207      	movs	r2, #7
 801bf5e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801bf60:	68bb      	ldr	r3, [r7, #8]
 801bf62:	681a      	ldr	r2, [r3, #0]
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801bf68:	68b8      	ldr	r0, [r7, #8]
 801bf6a:	f7fd fb04 	bl	8019576 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d008      	beq.n	801bf88 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bf7a:	68db      	ldr	r3, [r3, #12]
 801bf7c:	685a      	ldr	r2, [r3, #4]
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801bf82:	429a      	cmp	r2, r3
 801bf84:	f43f af43 	beq.w	801be0e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	8b5b      	ldrh	r3, [r3, #26]
 801bf8c:	f003 0301 	and.w	r3, r3, #1
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d00e      	beq.n	801bfb2 <tcp_receive+0xbc6>
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	8b5b      	ldrh	r3, [r3, #26]
 801bf98:	f023 0301 	bic.w	r3, r3, #1
 801bf9c:	b29a      	uxth	r2, r3
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	835a      	strh	r2, [r3, #26]
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	8b5b      	ldrh	r3, [r3, #26]
 801bfa6:	f043 0302 	orr.w	r3, r3, #2
 801bfaa:	b29a      	uxth	r2, r3
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801bfb0:	e188      	b.n	801c2c4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	8b5b      	ldrh	r3, [r3, #26]
 801bfb6:	f043 0301 	orr.w	r3, r3, #1
 801bfba:	b29a      	uxth	r2, r3
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801bfc0:	e180      	b.n	801c2c4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d106      	bne.n	801bfd8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801bfca:	4848      	ldr	r0, [pc, #288]	; (801c0ec <tcp_receive+0xd00>)
 801bfcc:	f7fd faec 	bl	80195a8 <tcp_seg_copy>
 801bfd0:	4602      	mov	r2, r0
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	675a      	str	r2, [r3, #116]	; 0x74
 801bfd6:	e16d      	b.n	801c2b4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801bfd8:	2300      	movs	r3, #0
 801bfda:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bfe0:	63bb      	str	r3, [r7, #56]	; 0x38
 801bfe2:	e157      	b.n	801c294 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801bfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfe6:	68db      	ldr	r3, [r3, #12]
 801bfe8:	685a      	ldr	r2, [r3, #4]
 801bfea:	4b41      	ldr	r3, [pc, #260]	; (801c0f0 <tcp_receive+0xd04>)
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	429a      	cmp	r2, r3
 801bff0:	d11d      	bne.n	801c02e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801bff2:	4b3e      	ldr	r3, [pc, #248]	; (801c0ec <tcp_receive+0xd00>)
 801bff4:	891a      	ldrh	r2, [r3, #8]
 801bff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bff8:	891b      	ldrh	r3, [r3, #8]
 801bffa:	429a      	cmp	r2, r3
 801bffc:	f240 814f 	bls.w	801c29e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c000:	483a      	ldr	r0, [pc, #232]	; (801c0ec <tcp_receive+0xd00>)
 801c002:	f7fd fad1 	bl	80195a8 <tcp_seg_copy>
 801c006:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801c008:	697b      	ldr	r3, [r7, #20]
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	f000 8149 	beq.w	801c2a2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801c010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c012:	2b00      	cmp	r3, #0
 801c014:	d003      	beq.n	801c01e <tcp_receive+0xc32>
                    prev->next = cseg;
 801c016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c018:	697a      	ldr	r2, [r7, #20]
 801c01a:	601a      	str	r2, [r3, #0]
 801c01c:	e002      	b.n	801c024 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	697a      	ldr	r2, [r7, #20]
 801c022:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801c024:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c026:	6978      	ldr	r0, [r7, #20]
 801c028:	f7ff f8dc 	bl	801b1e4 <tcp_oos_insert_segment>
                }
                break;
 801c02c:	e139      	b.n	801c2a2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801c02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c030:	2b00      	cmp	r3, #0
 801c032:	d117      	bne.n	801c064 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801c034:	4b2e      	ldr	r3, [pc, #184]	; (801c0f0 <tcp_receive+0xd04>)
 801c036:	681a      	ldr	r2, [r3, #0]
 801c038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c03a:	68db      	ldr	r3, [r3, #12]
 801c03c:	685b      	ldr	r3, [r3, #4]
 801c03e:	1ad3      	subs	r3, r2, r3
 801c040:	2b00      	cmp	r3, #0
 801c042:	da57      	bge.n	801c0f4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c044:	4829      	ldr	r0, [pc, #164]	; (801c0ec <tcp_receive+0xd00>)
 801c046:	f7fd faaf 	bl	80195a8 <tcp_seg_copy>
 801c04a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801c04c:	69bb      	ldr	r3, [r7, #24]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	f000 8129 	beq.w	801c2a6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	69ba      	ldr	r2, [r7, #24]
 801c058:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801c05a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c05c:	69b8      	ldr	r0, [r7, #24]
 801c05e:	f7ff f8c1 	bl	801b1e4 <tcp_oos_insert_segment>
                  }
                  break;
 801c062:	e120      	b.n	801c2a6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801c064:	4b22      	ldr	r3, [pc, #136]	; (801c0f0 <tcp_receive+0xd04>)
 801c066:	681a      	ldr	r2, [r3, #0]
 801c068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c06a:	68db      	ldr	r3, [r3, #12]
 801c06c:	685b      	ldr	r3, [r3, #4]
 801c06e:	1ad3      	subs	r3, r2, r3
 801c070:	3b01      	subs	r3, #1
 801c072:	2b00      	cmp	r3, #0
 801c074:	db3e      	blt.n	801c0f4 <tcp_receive+0xd08>
 801c076:	4b1e      	ldr	r3, [pc, #120]	; (801c0f0 <tcp_receive+0xd04>)
 801c078:	681a      	ldr	r2, [r3, #0]
 801c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c07c:	68db      	ldr	r3, [r3, #12]
 801c07e:	685b      	ldr	r3, [r3, #4]
 801c080:	1ad3      	subs	r3, r2, r3
 801c082:	3301      	adds	r3, #1
 801c084:	2b00      	cmp	r3, #0
 801c086:	dc35      	bgt.n	801c0f4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c088:	4818      	ldr	r0, [pc, #96]	; (801c0ec <tcp_receive+0xd00>)
 801c08a:	f7fd fa8d 	bl	80195a8 <tcp_seg_copy>
 801c08e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801c090:	69fb      	ldr	r3, [r7, #28]
 801c092:	2b00      	cmp	r3, #0
 801c094:	f000 8109 	beq.w	801c2aa <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801c098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c09a:	68db      	ldr	r3, [r3, #12]
 801c09c:	685b      	ldr	r3, [r3, #4]
 801c09e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c0a0:	8912      	ldrh	r2, [r2, #8]
 801c0a2:	441a      	add	r2, r3
 801c0a4:	4b12      	ldr	r3, [pc, #72]	; (801c0f0 <tcp_receive+0xd04>)
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	1ad3      	subs	r3, r2, r3
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	dd12      	ble.n	801c0d4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801c0ae:	4b10      	ldr	r3, [pc, #64]	; (801c0f0 <tcp_receive+0xd04>)
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	b29a      	uxth	r2, r3
 801c0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0b6:	68db      	ldr	r3, [r3, #12]
 801c0b8:	685b      	ldr	r3, [r3, #4]
 801c0ba:	b29b      	uxth	r3, r3
 801c0bc:	1ad3      	subs	r3, r2, r3
 801c0be:	b29a      	uxth	r2, r3
 801c0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0c2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801c0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0c6:	685a      	ldr	r2, [r3, #4]
 801c0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0ca:	891b      	ldrh	r3, [r3, #8]
 801c0cc:	4619      	mov	r1, r3
 801c0ce:	4610      	mov	r0, r2
 801c0d0:	f7fb fa64 	bl	801759c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801c0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0d6:	69fa      	ldr	r2, [r7, #28]
 801c0d8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801c0da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c0dc:	69f8      	ldr	r0, [r7, #28]
 801c0de:	f7ff f881 	bl	801b1e4 <tcp_oos_insert_segment>
                  }
                  break;
 801c0e2:	e0e2      	b.n	801c2aa <tcp_receive+0xebe>
 801c0e4:	2400f968 	.word	0x2400f968
 801c0e8:	2400f965 	.word	0x2400f965
 801c0ec:	2400f938 	.word	0x2400f938
 801c0f0:	2400f958 	.word	0x2400f958
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801c0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0f6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	f040 80c6 	bne.w	801c28e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801c102:	4b80      	ldr	r3, [pc, #512]	; (801c304 <tcp_receive+0xf18>)
 801c104:	681a      	ldr	r2, [r3, #0]
 801c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c108:	68db      	ldr	r3, [r3, #12]
 801c10a:	685b      	ldr	r3, [r3, #4]
 801c10c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801c10e:	2b00      	cmp	r3, #0
 801c110:	f340 80bd 	ble.w	801c28e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c116:	68db      	ldr	r3, [r3, #12]
 801c118:	899b      	ldrh	r3, [r3, #12]
 801c11a:	b29b      	uxth	r3, r3
 801c11c:	4618      	mov	r0, r3
 801c11e:	f7f7 fbed 	bl	80138fc <lwip_htons>
 801c122:	4603      	mov	r3, r0
 801c124:	b2db      	uxtb	r3, r3
 801c126:	f003 0301 	and.w	r3, r3, #1
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	f040 80bf 	bne.w	801c2ae <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801c130:	4875      	ldr	r0, [pc, #468]	; (801c308 <tcp_receive+0xf1c>)
 801c132:	f7fd fa39 	bl	80195a8 <tcp_seg_copy>
 801c136:	4602      	mov	r2, r0
 801c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c13a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801c13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	2b00      	cmp	r3, #0
 801c142:	f000 80b6 	beq.w	801c2b2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c148:	68db      	ldr	r3, [r3, #12]
 801c14a:	685b      	ldr	r3, [r3, #4]
 801c14c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c14e:	8912      	ldrh	r2, [r2, #8]
 801c150:	441a      	add	r2, r3
 801c152:	4b6c      	ldr	r3, [pc, #432]	; (801c304 <tcp_receive+0xf18>)
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	1ad3      	subs	r3, r2, r3
 801c158:	2b00      	cmp	r3, #0
 801c15a:	dd12      	ble.n	801c182 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801c15c:	4b69      	ldr	r3, [pc, #420]	; (801c304 <tcp_receive+0xf18>)
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	b29a      	uxth	r2, r3
 801c162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c164:	68db      	ldr	r3, [r3, #12]
 801c166:	685b      	ldr	r3, [r3, #4]
 801c168:	b29b      	uxth	r3, r3
 801c16a:	1ad3      	subs	r3, r2, r3
 801c16c:	b29a      	uxth	r2, r3
 801c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c170:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801c172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c174:	685a      	ldr	r2, [r3, #4]
 801c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c178:	891b      	ldrh	r3, [r3, #8]
 801c17a:	4619      	mov	r1, r3
 801c17c:	4610      	mov	r0, r2
 801c17e:	f7fb fa0d 	bl	801759c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801c182:	4b62      	ldr	r3, [pc, #392]	; (801c30c <tcp_receive+0xf20>)
 801c184:	881b      	ldrh	r3, [r3, #0]
 801c186:	461a      	mov	r2, r3
 801c188:	4b5e      	ldr	r3, [pc, #376]	; (801c304 <tcp_receive+0xf18>)
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	441a      	add	r2, r3
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c192:	6879      	ldr	r1, [r7, #4]
 801c194:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c196:	440b      	add	r3, r1
 801c198:	1ad3      	subs	r3, r2, r3
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	f340 8089 	ble.w	801c2b2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801c1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	68db      	ldr	r3, [r3, #12]
 801c1a6:	899b      	ldrh	r3, [r3, #12]
 801c1a8:	b29b      	uxth	r3, r3
 801c1aa:	4618      	mov	r0, r3
 801c1ac:	f7f7 fba6 	bl	80138fc <lwip_htons>
 801c1b0:	4603      	mov	r3, r0
 801c1b2:	b2db      	uxtb	r3, r3
 801c1b4:	f003 0301 	and.w	r3, r3, #1
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d022      	beq.n	801c202 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801c1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	68db      	ldr	r3, [r3, #12]
 801c1c2:	899b      	ldrh	r3, [r3, #12]
 801c1c4:	b29b      	uxth	r3, r3
 801c1c6:	b21b      	sxth	r3, r3
 801c1c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c1cc:	b21c      	sxth	r4, r3
 801c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	68db      	ldr	r3, [r3, #12]
 801c1d4:	899b      	ldrh	r3, [r3, #12]
 801c1d6:	b29b      	uxth	r3, r3
 801c1d8:	4618      	mov	r0, r3
 801c1da:	f7f7 fb8f 	bl	80138fc <lwip_htons>
 801c1de:	4603      	mov	r3, r0
 801c1e0:	b2db      	uxtb	r3, r3
 801c1e2:	b29b      	uxth	r3, r3
 801c1e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c1e8:	b29b      	uxth	r3, r3
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	f7f7 fb86 	bl	80138fc <lwip_htons>
 801c1f0:	4603      	mov	r3, r0
 801c1f2:	b21b      	sxth	r3, r3
 801c1f4:	4323      	orrs	r3, r4
 801c1f6:	b21a      	sxth	r2, r3
 801c1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	68db      	ldr	r3, [r3, #12]
 801c1fe:	b292      	uxth	r2, r2
 801c200:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c206:	b29a      	uxth	r2, r3
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c20c:	4413      	add	r3, r2
 801c20e:	b299      	uxth	r1, r3
 801c210:	4b3c      	ldr	r3, [pc, #240]	; (801c304 <tcp_receive+0xf18>)
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	b29a      	uxth	r2, r3
 801c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	1a8a      	subs	r2, r1, r2
 801c21c:	b292      	uxth	r2, r2
 801c21e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801c220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	685a      	ldr	r2, [r3, #4]
 801c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	891b      	ldrh	r3, [r3, #8]
 801c22c:	4619      	mov	r1, r3
 801c22e:	4610      	mov	r0, r2
 801c230:	f7fb f9b4 	bl	801759c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801c234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	891c      	ldrh	r4, [r3, #8]
 801c23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	68db      	ldr	r3, [r3, #12]
 801c240:	899b      	ldrh	r3, [r3, #12]
 801c242:	b29b      	uxth	r3, r3
 801c244:	4618      	mov	r0, r3
 801c246:	f7f7 fb59 	bl	80138fc <lwip_htons>
 801c24a:	4603      	mov	r3, r0
 801c24c:	b2db      	uxtb	r3, r3
 801c24e:	f003 0303 	and.w	r3, r3, #3
 801c252:	2b00      	cmp	r3, #0
 801c254:	d001      	beq.n	801c25a <tcp_receive+0xe6e>
 801c256:	2301      	movs	r3, #1
 801c258:	e000      	b.n	801c25c <tcp_receive+0xe70>
 801c25a:	2300      	movs	r3, #0
 801c25c:	4423      	add	r3, r4
 801c25e:	b29a      	uxth	r2, r3
 801c260:	4b2a      	ldr	r3, [pc, #168]	; (801c30c <tcp_receive+0xf20>)
 801c262:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c264:	4b29      	ldr	r3, [pc, #164]	; (801c30c <tcp_receive+0xf20>)
 801c266:	881b      	ldrh	r3, [r3, #0]
 801c268:	461a      	mov	r2, r3
 801c26a:	4b26      	ldr	r3, [pc, #152]	; (801c304 <tcp_receive+0xf18>)
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	441a      	add	r2, r3
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c274:	6879      	ldr	r1, [r7, #4]
 801c276:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c278:	440b      	add	r3, r1
 801c27a:	429a      	cmp	r2, r3
 801c27c:	d019      	beq.n	801c2b2 <tcp_receive+0xec6>
 801c27e:	4b24      	ldr	r3, [pc, #144]	; (801c310 <tcp_receive+0xf24>)
 801c280:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801c284:	4923      	ldr	r1, [pc, #140]	; (801c314 <tcp_receive+0xf28>)
 801c286:	4824      	ldr	r0, [pc, #144]	; (801c318 <tcp_receive+0xf2c>)
 801c288:	f003 fbb8 	bl	801f9fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801c28c:	e011      	b.n	801c2b2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801c28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	63bb      	str	r3, [r7, #56]	; 0x38
 801c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c296:	2b00      	cmp	r3, #0
 801c298:	f47f aea4 	bne.w	801bfe4 <tcp_receive+0xbf8>
 801c29c:	e00a      	b.n	801c2b4 <tcp_receive+0xec8>
                break;
 801c29e:	bf00      	nop
 801c2a0:	e008      	b.n	801c2b4 <tcp_receive+0xec8>
                break;
 801c2a2:	bf00      	nop
 801c2a4:	e006      	b.n	801c2b4 <tcp_receive+0xec8>
                  break;
 801c2a6:	bf00      	nop
 801c2a8:	e004      	b.n	801c2b4 <tcp_receive+0xec8>
                  break;
 801c2aa:	bf00      	nop
 801c2ac:	e002      	b.n	801c2b4 <tcp_receive+0xec8>
                  break;
 801c2ae:	bf00      	nop
 801c2b0:	e000      	b.n	801c2b4 <tcp_receive+0xec8>
                break;
 801c2b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801c2b4:	6878      	ldr	r0, [r7, #4]
 801c2b6:	f001 fe8b 	bl	801dfd0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801c2ba:	e003      	b.n	801c2c4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801c2bc:	6878      	ldr	r0, [r7, #4]
 801c2be:	f001 fe87 	bl	801dfd0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c2c2:	e01a      	b.n	801c2fa <tcp_receive+0xf0e>
 801c2c4:	e019      	b.n	801c2fa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801c2c6:	4b0f      	ldr	r3, [pc, #60]	; (801c304 <tcp_receive+0xf18>)
 801c2c8:	681a      	ldr	r2, [r3, #0]
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2ce:	1ad3      	subs	r3, r2, r3
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	db0a      	blt.n	801c2ea <tcp_receive+0xefe>
 801c2d4:	4b0b      	ldr	r3, [pc, #44]	; (801c304 <tcp_receive+0xf18>)
 801c2d6:	681a      	ldr	r2, [r3, #0]
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2dc:	6879      	ldr	r1, [r7, #4]
 801c2de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c2e0:	440b      	add	r3, r1
 801c2e2:	1ad3      	subs	r3, r2, r3
 801c2e4:	3301      	adds	r3, #1
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	dd07      	ble.n	801c2fa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	8b5b      	ldrh	r3, [r3, #26]
 801c2ee:	f043 0302 	orr.w	r3, r3, #2
 801c2f2:	b29a      	uxth	r2, r3
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801c2f8:	e7ff      	b.n	801c2fa <tcp_receive+0xf0e>
 801c2fa:	bf00      	nop
 801c2fc:	3750      	adds	r7, #80	; 0x50
 801c2fe:	46bd      	mov	sp, r7
 801c300:	bdb0      	pop	{r4, r5, r7, pc}
 801c302:	bf00      	nop
 801c304:	2400f958 	.word	0x2400f958
 801c308:	2400f938 	.word	0x2400f938
 801c30c:	2400f962 	.word	0x2400f962
 801c310:	08022f88 	.word	0x08022f88
 801c314:	08023374 	.word	0x08023374
 801c318:	08023018 	.word	0x08023018

0801c31c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801c31c:	b480      	push	{r7}
 801c31e:	b083      	sub	sp, #12
 801c320:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801c322:	4b15      	ldr	r3, [pc, #84]	; (801c378 <tcp_get_next_optbyte+0x5c>)
 801c324:	881b      	ldrh	r3, [r3, #0]
 801c326:	1c5a      	adds	r2, r3, #1
 801c328:	b291      	uxth	r1, r2
 801c32a:	4a13      	ldr	r2, [pc, #76]	; (801c378 <tcp_get_next_optbyte+0x5c>)
 801c32c:	8011      	strh	r1, [r2, #0]
 801c32e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c330:	4b12      	ldr	r3, [pc, #72]	; (801c37c <tcp_get_next_optbyte+0x60>)
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	2b00      	cmp	r3, #0
 801c336:	d004      	beq.n	801c342 <tcp_get_next_optbyte+0x26>
 801c338:	4b11      	ldr	r3, [pc, #68]	; (801c380 <tcp_get_next_optbyte+0x64>)
 801c33a:	881b      	ldrh	r3, [r3, #0]
 801c33c:	88fa      	ldrh	r2, [r7, #6]
 801c33e:	429a      	cmp	r2, r3
 801c340:	d208      	bcs.n	801c354 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801c342:	4b10      	ldr	r3, [pc, #64]	; (801c384 <tcp_get_next_optbyte+0x68>)
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	3314      	adds	r3, #20
 801c348:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801c34a:	88fb      	ldrh	r3, [r7, #6]
 801c34c:	683a      	ldr	r2, [r7, #0]
 801c34e:	4413      	add	r3, r2
 801c350:	781b      	ldrb	r3, [r3, #0]
 801c352:	e00b      	b.n	801c36c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c354:	88fb      	ldrh	r3, [r7, #6]
 801c356:	b2da      	uxtb	r2, r3
 801c358:	4b09      	ldr	r3, [pc, #36]	; (801c380 <tcp_get_next_optbyte+0x64>)
 801c35a:	881b      	ldrh	r3, [r3, #0]
 801c35c:	b2db      	uxtb	r3, r3
 801c35e:	1ad3      	subs	r3, r2, r3
 801c360:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801c362:	4b06      	ldr	r3, [pc, #24]	; (801c37c <tcp_get_next_optbyte+0x60>)
 801c364:	681a      	ldr	r2, [r3, #0]
 801c366:	797b      	ldrb	r3, [r7, #5]
 801c368:	4413      	add	r3, r2
 801c36a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c36c:	4618      	mov	r0, r3
 801c36e:	370c      	adds	r7, #12
 801c370:	46bd      	mov	sp, r7
 801c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c376:	4770      	bx	lr
 801c378:	2400f954 	.word	0x2400f954
 801c37c:	2400f950 	.word	0x2400f950
 801c380:	2400f94e 	.word	0x2400f94e
 801c384:	2400f948 	.word	0x2400f948

0801c388 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801c388:	b580      	push	{r7, lr}
 801c38a:	b084      	sub	sp, #16
 801c38c:	af00      	add	r7, sp, #0
 801c38e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d106      	bne.n	801c3a4 <tcp_parseopt+0x1c>
 801c396:	4b32      	ldr	r3, [pc, #200]	; (801c460 <tcp_parseopt+0xd8>)
 801c398:	f240 727d 	movw	r2, #1917	; 0x77d
 801c39c:	4931      	ldr	r1, [pc, #196]	; (801c464 <tcp_parseopt+0xdc>)
 801c39e:	4832      	ldr	r0, [pc, #200]	; (801c468 <tcp_parseopt+0xe0>)
 801c3a0:	f003 fb2c 	bl	801f9fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801c3a4:	4b31      	ldr	r3, [pc, #196]	; (801c46c <tcp_parseopt+0xe4>)
 801c3a6:	881b      	ldrh	r3, [r3, #0]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d056      	beq.n	801c45a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c3ac:	4b30      	ldr	r3, [pc, #192]	; (801c470 <tcp_parseopt+0xe8>)
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	801a      	strh	r2, [r3, #0]
 801c3b2:	e046      	b.n	801c442 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801c3b4:	f7ff ffb2 	bl	801c31c <tcp_get_next_optbyte>
 801c3b8:	4603      	mov	r3, r0
 801c3ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801c3bc:	7bfb      	ldrb	r3, [r7, #15]
 801c3be:	2b02      	cmp	r3, #2
 801c3c0:	d006      	beq.n	801c3d0 <tcp_parseopt+0x48>
 801c3c2:	2b02      	cmp	r3, #2
 801c3c4:	dc2c      	bgt.n	801c420 <tcp_parseopt+0x98>
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d042      	beq.n	801c450 <tcp_parseopt+0xc8>
 801c3ca:	2b01      	cmp	r3, #1
 801c3cc:	d128      	bne.n	801c420 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801c3ce:	e038      	b.n	801c442 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801c3d0:	f7ff ffa4 	bl	801c31c <tcp_get_next_optbyte>
 801c3d4:	4603      	mov	r3, r0
 801c3d6:	2b04      	cmp	r3, #4
 801c3d8:	d13c      	bne.n	801c454 <tcp_parseopt+0xcc>
 801c3da:	4b25      	ldr	r3, [pc, #148]	; (801c470 <tcp_parseopt+0xe8>)
 801c3dc:	881b      	ldrh	r3, [r3, #0]
 801c3de:	3301      	adds	r3, #1
 801c3e0:	4a22      	ldr	r2, [pc, #136]	; (801c46c <tcp_parseopt+0xe4>)
 801c3e2:	8812      	ldrh	r2, [r2, #0]
 801c3e4:	4293      	cmp	r3, r2
 801c3e6:	da35      	bge.n	801c454 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c3e8:	f7ff ff98 	bl	801c31c <tcp_get_next_optbyte>
 801c3ec:	4603      	mov	r3, r0
 801c3ee:	b29b      	uxth	r3, r3
 801c3f0:	021b      	lsls	r3, r3, #8
 801c3f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801c3f4:	f7ff ff92 	bl	801c31c <tcp_get_next_optbyte>
 801c3f8:	4603      	mov	r3, r0
 801c3fa:	b29a      	uxth	r2, r3
 801c3fc:	89bb      	ldrh	r3, [r7, #12]
 801c3fe:	4313      	orrs	r3, r2
 801c400:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801c402:	89bb      	ldrh	r3, [r7, #12]
 801c404:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801c408:	4293      	cmp	r3, r2
 801c40a:	d804      	bhi.n	801c416 <tcp_parseopt+0x8e>
 801c40c:	89bb      	ldrh	r3, [r7, #12]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d001      	beq.n	801c416 <tcp_parseopt+0x8e>
 801c412:	89ba      	ldrh	r2, [r7, #12]
 801c414:	e001      	b.n	801c41a <tcp_parseopt+0x92>
 801c416:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801c41e:	e010      	b.n	801c442 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801c420:	f7ff ff7c 	bl	801c31c <tcp_get_next_optbyte>
 801c424:	4603      	mov	r3, r0
 801c426:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801c428:	7afb      	ldrb	r3, [r7, #11]
 801c42a:	2b01      	cmp	r3, #1
 801c42c:	d914      	bls.n	801c458 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801c42e:	7afb      	ldrb	r3, [r7, #11]
 801c430:	b29a      	uxth	r2, r3
 801c432:	4b0f      	ldr	r3, [pc, #60]	; (801c470 <tcp_parseopt+0xe8>)
 801c434:	881b      	ldrh	r3, [r3, #0]
 801c436:	4413      	add	r3, r2
 801c438:	b29b      	uxth	r3, r3
 801c43a:	3b02      	subs	r3, #2
 801c43c:	b29a      	uxth	r2, r3
 801c43e:	4b0c      	ldr	r3, [pc, #48]	; (801c470 <tcp_parseopt+0xe8>)
 801c440:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c442:	4b0b      	ldr	r3, [pc, #44]	; (801c470 <tcp_parseopt+0xe8>)
 801c444:	881a      	ldrh	r2, [r3, #0]
 801c446:	4b09      	ldr	r3, [pc, #36]	; (801c46c <tcp_parseopt+0xe4>)
 801c448:	881b      	ldrh	r3, [r3, #0]
 801c44a:	429a      	cmp	r2, r3
 801c44c:	d3b2      	bcc.n	801c3b4 <tcp_parseopt+0x2c>
 801c44e:	e004      	b.n	801c45a <tcp_parseopt+0xd2>
          return;
 801c450:	bf00      	nop
 801c452:	e002      	b.n	801c45a <tcp_parseopt+0xd2>
            return;
 801c454:	bf00      	nop
 801c456:	e000      	b.n	801c45a <tcp_parseopt+0xd2>
            return;
 801c458:	bf00      	nop
      }
    }
  }
}
 801c45a:	3710      	adds	r7, #16
 801c45c:	46bd      	mov	sp, r7
 801c45e:	bd80      	pop	{r7, pc}
 801c460:	08022f88 	.word	0x08022f88
 801c464:	08023430 	.word	0x08023430
 801c468:	08023018 	.word	0x08023018
 801c46c:	2400f94c 	.word	0x2400f94c
 801c470:	2400f954 	.word	0x2400f954

0801c474 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801c474:	b480      	push	{r7}
 801c476:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801c478:	4b05      	ldr	r3, [pc, #20]	; (801c490 <tcp_trigger_input_pcb_close+0x1c>)
 801c47a:	781b      	ldrb	r3, [r3, #0]
 801c47c:	f043 0310 	orr.w	r3, r3, #16
 801c480:	b2da      	uxtb	r2, r3
 801c482:	4b03      	ldr	r3, [pc, #12]	; (801c490 <tcp_trigger_input_pcb_close+0x1c>)
 801c484:	701a      	strb	r2, [r3, #0]
}
 801c486:	bf00      	nop
 801c488:	46bd      	mov	sp, r7
 801c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c48e:	4770      	bx	lr
 801c490:	2400f965 	.word	0x2400f965

0801c494 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801c494:	b580      	push	{r7, lr}
 801c496:	b084      	sub	sp, #16
 801c498:	af00      	add	r7, sp, #0
 801c49a:	60f8      	str	r0, [r7, #12]
 801c49c:	60b9      	str	r1, [r7, #8]
 801c49e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d00a      	beq.n	801c4bc <tcp_route+0x28>
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	7a1b      	ldrb	r3, [r3, #8]
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d006      	beq.n	801c4bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	7a1b      	ldrb	r3, [r3, #8]
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	f7fa fe68 	bl	8017188 <netif_get_by_index>
 801c4b8:	4603      	mov	r3, r0
 801c4ba:	e003      	b.n	801c4c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801c4bc:	6878      	ldr	r0, [r7, #4]
 801c4be:	f7f8 fcf5 	bl	8014eac <ip4_route>
 801c4c2:	4603      	mov	r3, r0
  }
}
 801c4c4:	4618      	mov	r0, r3
 801c4c6:	3710      	adds	r7, #16
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	bd80      	pop	{r7, pc}

0801c4cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801c4cc:	b590      	push	{r4, r7, lr}
 801c4ce:	b087      	sub	sp, #28
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	60f8      	str	r0, [r7, #12]
 801c4d4:	60b9      	str	r1, [r7, #8]
 801c4d6:	603b      	str	r3, [r7, #0]
 801c4d8:	4613      	mov	r3, r2
 801c4da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d105      	bne.n	801c4ee <tcp_create_segment+0x22>
 801c4e2:	4b44      	ldr	r3, [pc, #272]	; (801c5f4 <tcp_create_segment+0x128>)
 801c4e4:	22a3      	movs	r2, #163	; 0xa3
 801c4e6:	4944      	ldr	r1, [pc, #272]	; (801c5f8 <tcp_create_segment+0x12c>)
 801c4e8:	4844      	ldr	r0, [pc, #272]	; (801c5fc <tcp_create_segment+0x130>)
 801c4ea:	f003 fa87 	bl	801f9fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801c4ee:	68bb      	ldr	r3, [r7, #8]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d105      	bne.n	801c500 <tcp_create_segment+0x34>
 801c4f4:	4b3f      	ldr	r3, [pc, #252]	; (801c5f4 <tcp_create_segment+0x128>)
 801c4f6:	22a4      	movs	r2, #164	; 0xa4
 801c4f8:	4941      	ldr	r1, [pc, #260]	; (801c600 <tcp_create_segment+0x134>)
 801c4fa:	4840      	ldr	r0, [pc, #256]	; (801c5fc <tcp_create_segment+0x130>)
 801c4fc:	f003 fa7e 	bl	801f9fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c500:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c504:	009b      	lsls	r3, r3, #2
 801c506:	b2db      	uxtb	r3, r3
 801c508:	f003 0304 	and.w	r3, r3, #4
 801c50c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801c50e:	2003      	movs	r0, #3
 801c510:	f7fa fa5e 	bl	80169d0 <memp_malloc>
 801c514:	6138      	str	r0, [r7, #16]
 801c516:	693b      	ldr	r3, [r7, #16]
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d104      	bne.n	801c526 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801c51c:	68b8      	ldr	r0, [r7, #8]
 801c51e:	f7fb f9c1 	bl	80178a4 <pbuf_free>
    return NULL;
 801c522:	2300      	movs	r3, #0
 801c524:	e061      	b.n	801c5ea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801c526:	693b      	ldr	r3, [r7, #16]
 801c528:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801c52c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801c52e:	693b      	ldr	r3, [r7, #16]
 801c530:	2200      	movs	r2, #0
 801c532:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801c534:	693b      	ldr	r3, [r7, #16]
 801c536:	68ba      	ldr	r2, [r7, #8]
 801c538:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801c53a:	68bb      	ldr	r3, [r7, #8]
 801c53c:	891a      	ldrh	r2, [r3, #8]
 801c53e:	7dfb      	ldrb	r3, [r7, #23]
 801c540:	b29b      	uxth	r3, r3
 801c542:	429a      	cmp	r2, r3
 801c544:	d205      	bcs.n	801c552 <tcp_create_segment+0x86>
 801c546:	4b2b      	ldr	r3, [pc, #172]	; (801c5f4 <tcp_create_segment+0x128>)
 801c548:	22b0      	movs	r2, #176	; 0xb0
 801c54a:	492e      	ldr	r1, [pc, #184]	; (801c604 <tcp_create_segment+0x138>)
 801c54c:	482b      	ldr	r0, [pc, #172]	; (801c5fc <tcp_create_segment+0x130>)
 801c54e:	f003 fa55 	bl	801f9fc <iprintf>
  seg->len = p->tot_len - optlen;
 801c552:	68bb      	ldr	r3, [r7, #8]
 801c554:	891a      	ldrh	r2, [r3, #8]
 801c556:	7dfb      	ldrb	r3, [r7, #23]
 801c558:	b29b      	uxth	r3, r3
 801c55a:	1ad3      	subs	r3, r2, r3
 801c55c:	b29a      	uxth	r2, r3
 801c55e:	693b      	ldr	r3, [r7, #16]
 801c560:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801c562:	2114      	movs	r1, #20
 801c564:	68b8      	ldr	r0, [r7, #8]
 801c566:	f7fb f907 	bl	8017778 <pbuf_add_header>
 801c56a:	4603      	mov	r3, r0
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d004      	beq.n	801c57a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801c570:	6938      	ldr	r0, [r7, #16]
 801c572:	f7fd f800 	bl	8019576 <tcp_seg_free>
    return NULL;
 801c576:	2300      	movs	r3, #0
 801c578:	e037      	b.n	801c5ea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801c57a:	693b      	ldr	r3, [r7, #16]
 801c57c:	685b      	ldr	r3, [r3, #4]
 801c57e:	685a      	ldr	r2, [r3, #4]
 801c580:	693b      	ldr	r3, [r7, #16]
 801c582:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	8ada      	ldrh	r2, [r3, #22]
 801c588:	693b      	ldr	r3, [r7, #16]
 801c58a:	68dc      	ldr	r4, [r3, #12]
 801c58c:	4610      	mov	r0, r2
 801c58e:	f7f7 f9b5 	bl	80138fc <lwip_htons>
 801c592:	4603      	mov	r3, r0
 801c594:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	8b1a      	ldrh	r2, [r3, #24]
 801c59a:	693b      	ldr	r3, [r7, #16]
 801c59c:	68dc      	ldr	r4, [r3, #12]
 801c59e:	4610      	mov	r0, r2
 801c5a0:	f7f7 f9ac 	bl	80138fc <lwip_htons>
 801c5a4:	4603      	mov	r3, r0
 801c5a6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801c5a8:	693b      	ldr	r3, [r7, #16]
 801c5aa:	68dc      	ldr	r4, [r3, #12]
 801c5ac:	6838      	ldr	r0, [r7, #0]
 801c5ae:	f7f7 f9ba 	bl	8013926 <lwip_htonl>
 801c5b2:	4603      	mov	r3, r0
 801c5b4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801c5b6:	7dfb      	ldrb	r3, [r7, #23]
 801c5b8:	089b      	lsrs	r3, r3, #2
 801c5ba:	b2db      	uxtb	r3, r3
 801c5bc:	b29b      	uxth	r3, r3
 801c5be:	3305      	adds	r3, #5
 801c5c0:	b29b      	uxth	r3, r3
 801c5c2:	031b      	lsls	r3, r3, #12
 801c5c4:	b29a      	uxth	r2, r3
 801c5c6:	79fb      	ldrb	r3, [r7, #7]
 801c5c8:	b29b      	uxth	r3, r3
 801c5ca:	4313      	orrs	r3, r2
 801c5cc:	b29a      	uxth	r2, r3
 801c5ce:	693b      	ldr	r3, [r7, #16]
 801c5d0:	68dc      	ldr	r4, [r3, #12]
 801c5d2:	4610      	mov	r0, r2
 801c5d4:	f7f7 f992 	bl	80138fc <lwip_htons>
 801c5d8:	4603      	mov	r3, r0
 801c5da:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801c5dc:	693b      	ldr	r3, [r7, #16]
 801c5de:	68db      	ldr	r3, [r3, #12]
 801c5e0:	2200      	movs	r2, #0
 801c5e2:	749a      	strb	r2, [r3, #18]
 801c5e4:	2200      	movs	r2, #0
 801c5e6:	74da      	strb	r2, [r3, #19]
  return seg;
 801c5e8:	693b      	ldr	r3, [r7, #16]
}
 801c5ea:	4618      	mov	r0, r3
 801c5ec:	371c      	adds	r7, #28
 801c5ee:	46bd      	mov	sp, r7
 801c5f0:	bd90      	pop	{r4, r7, pc}
 801c5f2:	bf00      	nop
 801c5f4:	0802344c 	.word	0x0802344c
 801c5f8:	080234c4 	.word	0x080234c4
 801c5fc:	080234e4 	.word	0x080234e4
 801c600:	0802350c 	.word	0x0802350c
 801c604:	08023530 	.word	0x08023530

0801c608 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801c608:	b580      	push	{r7, lr}
 801c60a:	b086      	sub	sp, #24
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	607b      	str	r3, [r7, #4]
 801c610:	4603      	mov	r3, r0
 801c612:	73fb      	strb	r3, [r7, #15]
 801c614:	460b      	mov	r3, r1
 801c616:	81bb      	strh	r3, [r7, #12]
 801c618:	4613      	mov	r3, r2
 801c61a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801c61c:	89bb      	ldrh	r3, [r7, #12]
 801c61e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	2b00      	cmp	r3, #0
 801c624:	d105      	bne.n	801c632 <tcp_pbuf_prealloc+0x2a>
 801c626:	4b30      	ldr	r3, [pc, #192]	; (801c6e8 <tcp_pbuf_prealloc+0xe0>)
 801c628:	22e8      	movs	r2, #232	; 0xe8
 801c62a:	4930      	ldr	r1, [pc, #192]	; (801c6ec <tcp_pbuf_prealloc+0xe4>)
 801c62c:	4830      	ldr	r0, [pc, #192]	; (801c6f0 <tcp_pbuf_prealloc+0xe8>)
 801c62e:	f003 f9e5 	bl	801f9fc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801c632:	6a3b      	ldr	r3, [r7, #32]
 801c634:	2b00      	cmp	r3, #0
 801c636:	d105      	bne.n	801c644 <tcp_pbuf_prealloc+0x3c>
 801c638:	4b2b      	ldr	r3, [pc, #172]	; (801c6e8 <tcp_pbuf_prealloc+0xe0>)
 801c63a:	22e9      	movs	r2, #233	; 0xe9
 801c63c:	492d      	ldr	r1, [pc, #180]	; (801c6f4 <tcp_pbuf_prealloc+0xec>)
 801c63e:	482c      	ldr	r0, [pc, #176]	; (801c6f0 <tcp_pbuf_prealloc+0xe8>)
 801c640:	f003 f9dc 	bl	801f9fc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801c644:	89ba      	ldrh	r2, [r7, #12]
 801c646:	897b      	ldrh	r3, [r7, #10]
 801c648:	429a      	cmp	r2, r3
 801c64a:	d221      	bcs.n	801c690 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801c64c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c650:	f003 0302 	and.w	r3, r3, #2
 801c654:	2b00      	cmp	r3, #0
 801c656:	d111      	bne.n	801c67c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801c658:	6a3b      	ldr	r3, [r7, #32]
 801c65a:	8b5b      	ldrh	r3, [r3, #26]
 801c65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801c660:	2b00      	cmp	r3, #0
 801c662:	d115      	bne.n	801c690 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801c664:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d007      	beq.n	801c67c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801c66c:	6a3b      	ldr	r3, [r7, #32]
 801c66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801c670:	2b00      	cmp	r3, #0
 801c672:	d103      	bne.n	801c67c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801c674:	6a3b      	ldr	r3, [r7, #32]
 801c676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d009      	beq.n	801c690 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801c67c:	89bb      	ldrh	r3, [r7, #12]
 801c67e:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 801c682:	f023 0203 	bic.w	r2, r3, #3
 801c686:	897b      	ldrh	r3, [r7, #10]
 801c688:	4293      	cmp	r3, r2
 801c68a:	bf28      	it	cs
 801c68c:	4613      	movcs	r3, r2
 801c68e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801c690:	8af9      	ldrh	r1, [r7, #22]
 801c692:	7bfb      	ldrb	r3, [r7, #15]
 801c694:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c698:	4618      	mov	r0, r3
 801c69a:	f7fa fe1f 	bl	80172dc <pbuf_alloc>
 801c69e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c6a0:	693b      	ldr	r3, [r7, #16]
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d101      	bne.n	801c6aa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801c6a6:	2300      	movs	r3, #0
 801c6a8:	e019      	b.n	801c6de <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801c6aa:	693b      	ldr	r3, [r7, #16]
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d006      	beq.n	801c6c0 <tcp_pbuf_prealloc+0xb8>
 801c6b2:	4b0d      	ldr	r3, [pc, #52]	; (801c6e8 <tcp_pbuf_prealloc+0xe0>)
 801c6b4:	f240 120b 	movw	r2, #267	; 0x10b
 801c6b8:	490f      	ldr	r1, [pc, #60]	; (801c6f8 <tcp_pbuf_prealloc+0xf0>)
 801c6ba:	480d      	ldr	r0, [pc, #52]	; (801c6f0 <tcp_pbuf_prealloc+0xe8>)
 801c6bc:	f003 f99e 	bl	801f9fc <iprintf>
  *oversize = p->len - length;
 801c6c0:	693b      	ldr	r3, [r7, #16]
 801c6c2:	895a      	ldrh	r2, [r3, #10]
 801c6c4:	89bb      	ldrh	r3, [r7, #12]
 801c6c6:	1ad3      	subs	r3, r2, r3
 801c6c8:	b29a      	uxth	r2, r3
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801c6ce:	693b      	ldr	r3, [r7, #16]
 801c6d0:	89ba      	ldrh	r2, [r7, #12]
 801c6d2:	811a      	strh	r2, [r3, #8]
 801c6d4:	693b      	ldr	r3, [r7, #16]
 801c6d6:	891a      	ldrh	r2, [r3, #8]
 801c6d8:	693b      	ldr	r3, [r7, #16]
 801c6da:	815a      	strh	r2, [r3, #10]
  return p;
 801c6dc:	693b      	ldr	r3, [r7, #16]
}
 801c6de:	4618      	mov	r0, r3
 801c6e0:	3718      	adds	r7, #24
 801c6e2:	46bd      	mov	sp, r7
 801c6e4:	bd80      	pop	{r7, pc}
 801c6e6:	bf00      	nop
 801c6e8:	0802344c 	.word	0x0802344c
 801c6ec:	08023548 	.word	0x08023548
 801c6f0:	080234e4 	.word	0x080234e4
 801c6f4:	0802356c 	.word	0x0802356c
 801c6f8:	0802358c 	.word	0x0802358c

0801c6fc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801c6fc:	b580      	push	{r7, lr}
 801c6fe:	b082      	sub	sp, #8
 801c700:	af00      	add	r7, sp, #0
 801c702:	6078      	str	r0, [r7, #4]
 801c704:	460b      	mov	r3, r1
 801c706:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d106      	bne.n	801c71c <tcp_write_checks+0x20>
 801c70e:	4b33      	ldr	r3, [pc, #204]	; (801c7dc <tcp_write_checks+0xe0>)
 801c710:	f240 1233 	movw	r2, #307	; 0x133
 801c714:	4932      	ldr	r1, [pc, #200]	; (801c7e0 <tcp_write_checks+0xe4>)
 801c716:	4833      	ldr	r0, [pc, #204]	; (801c7e4 <tcp_write_checks+0xe8>)
 801c718:	f003 f970 	bl	801f9fc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	7d1b      	ldrb	r3, [r3, #20]
 801c720:	2b04      	cmp	r3, #4
 801c722:	d00e      	beq.n	801c742 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801c728:	2b07      	cmp	r3, #7
 801c72a:	d00a      	beq.n	801c742 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801c730:	2b02      	cmp	r3, #2
 801c732:	d006      	beq.n	801c742 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801c738:	2b03      	cmp	r3, #3
 801c73a:	d002      	beq.n	801c742 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801c73c:	f06f 030a 	mvn.w	r3, #10
 801c740:	e048      	b.n	801c7d4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801c742:	887b      	ldrh	r3, [r7, #2]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d101      	bne.n	801c74c <tcp_write_checks+0x50>
    return ERR_OK;
 801c748:	2300      	movs	r3, #0
 801c74a:	e043      	b.n	801c7d4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801c752:	887a      	ldrh	r2, [r7, #2]
 801c754:	429a      	cmp	r2, r3
 801c756:	d909      	bls.n	801c76c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	8b5b      	ldrh	r3, [r3, #26]
 801c75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c760:	b29a      	uxth	r2, r3
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801c766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c76a:	e033      	b.n	801c7d4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c772:	2b0f      	cmp	r3, #15
 801c774:	d909      	bls.n	801c78a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	8b5b      	ldrh	r3, [r3, #26]
 801c77a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c77e:	b29a      	uxth	r2, r3
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801c784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c788:	e024      	b.n	801c7d4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c790:	2b00      	cmp	r3, #0
 801c792:	d00f      	beq.n	801c7b4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d11a      	bne.n	801c7d2 <tcp_write_checks+0xd6>
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d116      	bne.n	801c7d2 <tcp_write_checks+0xd6>
 801c7a4:	4b0d      	ldr	r3, [pc, #52]	; (801c7dc <tcp_write_checks+0xe0>)
 801c7a6:	f240 1255 	movw	r2, #341	; 0x155
 801c7aa:	490f      	ldr	r1, [pc, #60]	; (801c7e8 <tcp_write_checks+0xec>)
 801c7ac:	480d      	ldr	r0, [pc, #52]	; (801c7e4 <tcp_write_checks+0xe8>)
 801c7ae:	f003 f925 	bl	801f9fc <iprintf>
 801c7b2:	e00e      	b.n	801c7d2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d103      	bne.n	801c7c4 <tcp_write_checks+0xc8>
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d006      	beq.n	801c7d2 <tcp_write_checks+0xd6>
 801c7c4:	4b05      	ldr	r3, [pc, #20]	; (801c7dc <tcp_write_checks+0xe0>)
 801c7c6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801c7ca:	4908      	ldr	r1, [pc, #32]	; (801c7ec <tcp_write_checks+0xf0>)
 801c7cc:	4805      	ldr	r0, [pc, #20]	; (801c7e4 <tcp_write_checks+0xe8>)
 801c7ce:	f003 f915 	bl	801f9fc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801c7d2:	2300      	movs	r3, #0
}
 801c7d4:	4618      	mov	r0, r3
 801c7d6:	3708      	adds	r7, #8
 801c7d8:	46bd      	mov	sp, r7
 801c7da:	bd80      	pop	{r7, pc}
 801c7dc:	0802344c 	.word	0x0802344c
 801c7e0:	080235a0 	.word	0x080235a0
 801c7e4:	080234e4 	.word	0x080234e4
 801c7e8:	080235c0 	.word	0x080235c0
 801c7ec:	080235fc 	.word	0x080235fc

0801c7f0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801c7f0:	b590      	push	{r4, r7, lr}
 801c7f2:	b09b      	sub	sp, #108	; 0x6c
 801c7f4:	af04      	add	r7, sp, #16
 801c7f6:	60f8      	str	r0, [r7, #12]
 801c7f8:	60b9      	str	r1, [r7, #8]
 801c7fa:	4611      	mov	r1, r2
 801c7fc:	461a      	mov	r2, r3
 801c7fe:	460b      	mov	r3, r1
 801c800:	80fb      	strh	r3, [r7, #6]
 801c802:	4613      	mov	r3, r2
 801c804:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801c806:	2300      	movs	r3, #0
 801c808:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801c80a:	2300      	movs	r3, #0
 801c80c:	653b      	str	r3, [r7, #80]	; 0x50
 801c80e:	2300      	movs	r3, #0
 801c810:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c812:	2300      	movs	r3, #0
 801c814:	64bb      	str	r3, [r7, #72]	; 0x48
 801c816:	2300      	movs	r3, #0
 801c818:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801c81a:	2300      	movs	r3, #0
 801c81c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801c820:	2300      	movs	r3, #0
 801c822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801c826:	2300      	movs	r3, #0
 801c828:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801c82a:	2300      	movs	r3, #0
 801c82c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801c82e:	2300      	movs	r3, #0
 801c830:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	2b00      	cmp	r3, #0
 801c836:	d109      	bne.n	801c84c <tcp_write+0x5c>
 801c838:	4ba4      	ldr	r3, [pc, #656]	; (801cacc <tcp_write+0x2dc>)
 801c83a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801c83e:	49a4      	ldr	r1, [pc, #656]	; (801cad0 <tcp_write+0x2e0>)
 801c840:	48a4      	ldr	r0, [pc, #656]	; (801cad4 <tcp_write+0x2e4>)
 801c842:	f003 f8db 	bl	801f9fc <iprintf>
 801c846:	f06f 030f 	mvn.w	r3, #15
 801c84a:	e32a      	b.n	801cea2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801c852:	085b      	lsrs	r3, r3, #1
 801c854:	b29a      	uxth	r2, r3
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c85a:	4293      	cmp	r3, r2
 801c85c:	bf28      	it	cs
 801c85e:	4613      	movcs	r3, r2
 801c860:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801c862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c864:	2b00      	cmp	r3, #0
 801c866:	d102      	bne.n	801c86e <tcp_write+0x7e>
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c86c:	e000      	b.n	801c870 <tcp_write+0x80>
 801c86e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c870:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801c872:	68bb      	ldr	r3, [r7, #8]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d109      	bne.n	801c88c <tcp_write+0x9c>
 801c878:	4b94      	ldr	r3, [pc, #592]	; (801cacc <tcp_write+0x2dc>)
 801c87a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801c87e:	4996      	ldr	r1, [pc, #600]	; (801cad8 <tcp_write+0x2e8>)
 801c880:	4894      	ldr	r0, [pc, #592]	; (801cad4 <tcp_write+0x2e4>)
 801c882:	f003 f8bb 	bl	801f9fc <iprintf>
 801c886:	f06f 030f 	mvn.w	r3, #15
 801c88a:	e30a      	b.n	801cea2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801c88c:	88fb      	ldrh	r3, [r7, #6]
 801c88e:	4619      	mov	r1, r3
 801c890:	68f8      	ldr	r0, [r7, #12]
 801c892:	f7ff ff33 	bl	801c6fc <tcp_write_checks>
 801c896:	4603      	mov	r3, r0
 801c898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801c89c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d002      	beq.n	801c8aa <tcp_write+0xba>
    return err;
 801c8a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c8a8:	e2fb      	b.n	801cea2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801c8aa:	68fb      	ldr	r3, [r7, #12]
 801c8ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c8b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c8b4:	2300      	movs	r3, #0
 801c8b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	f000 80f6 	beq.w	801cab0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c8c8:	653b      	str	r3, [r7, #80]	; 0x50
 801c8ca:	e002      	b.n	801c8d2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801c8cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d1f8      	bne.n	801c8cc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801c8da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c8dc:	7a9b      	ldrb	r3, [r3, #10]
 801c8de:	009b      	lsls	r3, r3, #2
 801c8e0:	b29b      	uxth	r3, r3
 801c8e2:	f003 0304 	and.w	r3, r3, #4
 801c8e6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801c8e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c8ec:	891b      	ldrh	r3, [r3, #8]
 801c8ee:	4619      	mov	r1, r3
 801c8f0:	8c3b      	ldrh	r3, [r7, #32]
 801c8f2:	440b      	add	r3, r1
 801c8f4:	429a      	cmp	r2, r3
 801c8f6:	da06      	bge.n	801c906 <tcp_write+0x116>
 801c8f8:	4b74      	ldr	r3, [pc, #464]	; (801cacc <tcp_write+0x2dc>)
 801c8fa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801c8fe:	4977      	ldr	r1, [pc, #476]	; (801cadc <tcp_write+0x2ec>)
 801c900:	4874      	ldr	r0, [pc, #464]	; (801cad4 <tcp_write+0x2e4>)
 801c902:	f003 f87b 	bl	801f9fc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801c906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c908:	891a      	ldrh	r2, [r3, #8]
 801c90a:	8c3b      	ldrh	r3, [r7, #32]
 801c90c:	4413      	add	r3, r2
 801c90e:	b29b      	uxth	r3, r3
 801c910:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c912:	1ad3      	subs	r3, r2, r3
 801c914:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c91c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801c91e:	8a7b      	ldrh	r3, [r7, #18]
 801c920:	2b00      	cmp	r3, #0
 801c922:	d026      	beq.n	801c972 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801c924:	8a7b      	ldrh	r3, [r7, #18]
 801c926:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c928:	429a      	cmp	r2, r3
 801c92a:	d206      	bcs.n	801c93a <tcp_write+0x14a>
 801c92c:	4b67      	ldr	r3, [pc, #412]	; (801cacc <tcp_write+0x2dc>)
 801c92e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801c932:	496b      	ldr	r1, [pc, #428]	; (801cae0 <tcp_write+0x2f0>)
 801c934:	4867      	ldr	r0, [pc, #412]	; (801cad4 <tcp_write+0x2e4>)
 801c936:	f003 f861 	bl	801f9fc <iprintf>
      seg = last_unsent;
 801c93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c93c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801c93e:	8a7b      	ldrh	r3, [r7, #18]
 801c940:	88fa      	ldrh	r2, [r7, #6]
 801c942:	4293      	cmp	r3, r2
 801c944:	bf28      	it	cs
 801c946:	4613      	movcs	r3, r2
 801c948:	b29b      	uxth	r3, r3
 801c94a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c94c:	4293      	cmp	r3, r2
 801c94e:	bf28      	it	cs
 801c950:	4613      	movcs	r3, r2
 801c952:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801c954:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c958:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c95a:	4413      	add	r3, r2
 801c95c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801c960:	8a7a      	ldrh	r2, [r7, #18]
 801c962:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c964:	1ad3      	subs	r3, r2, r3
 801c966:	b29b      	uxth	r3, r3
 801c968:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801c96a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c96c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c96e:	1ad3      	subs	r3, r2, r3
 801c970:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801c972:	8a7b      	ldrh	r3, [r7, #18]
 801c974:	2b00      	cmp	r3, #0
 801c976:	d00b      	beq.n	801c990 <tcp_write+0x1a0>
 801c978:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c97c:	88fb      	ldrh	r3, [r7, #6]
 801c97e:	429a      	cmp	r2, r3
 801c980:	d006      	beq.n	801c990 <tcp_write+0x1a0>
 801c982:	4b52      	ldr	r3, [pc, #328]	; (801cacc <tcp_write+0x2dc>)
 801c984:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c988:	4956      	ldr	r1, [pc, #344]	; (801cae4 <tcp_write+0x2f4>)
 801c98a:	4852      	ldr	r0, [pc, #328]	; (801cad4 <tcp_write+0x2e4>)
 801c98c:	f003 f836 	bl	801f9fc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801c990:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c994:	88fb      	ldrh	r3, [r7, #6]
 801c996:	429a      	cmp	r2, r3
 801c998:	f080 8167 	bcs.w	801cc6a <tcp_write+0x47a>
 801c99c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	f000 8163 	beq.w	801cc6a <tcp_write+0x47a>
 801c9a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c9a6:	891b      	ldrh	r3, [r3, #8]
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	f000 815e 	beq.w	801cc6a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801c9ae:	88fa      	ldrh	r2, [r7, #6]
 801c9b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c9b4:	1ad2      	subs	r2, r2, r3
 801c9b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c9b8:	4293      	cmp	r3, r2
 801c9ba:	bfa8      	it	ge
 801c9bc:	4613      	movge	r3, r2
 801c9be:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801c9c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c9c2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801c9c4:	797b      	ldrb	r3, [r7, #5]
 801c9c6:	f003 0301 	and.w	r3, r3, #1
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d027      	beq.n	801ca1e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801c9ce:	f107 0012 	add.w	r0, r7, #18
 801c9d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c9d4:	8bf9      	ldrh	r1, [r7, #30]
 801c9d6:	2301      	movs	r3, #1
 801c9d8:	9302      	str	r3, [sp, #8]
 801c9da:	797b      	ldrb	r3, [r7, #5]
 801c9dc:	9301      	str	r3, [sp, #4]
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	9300      	str	r3, [sp, #0]
 801c9e2:	4603      	mov	r3, r0
 801c9e4:	2000      	movs	r0, #0
 801c9e6:	f7ff fe0f 	bl	801c608 <tcp_pbuf_prealloc>
 801c9ea:	6578      	str	r0, [r7, #84]	; 0x54
 801c9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	f000 8225 	beq.w	801ce3e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801c9f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c9f6:	6858      	ldr	r0, [r3, #4]
 801c9f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c9fc:	68ba      	ldr	r2, [r7, #8]
 801c9fe:	4413      	add	r3, r2
 801ca00:	8bfa      	ldrh	r2, [r7, #30]
 801ca02:	4619      	mov	r1, r3
 801ca04:	f002 fbfc 	bl	801f200 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801ca08:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ca0a:	f7fa ffd9 	bl	80179c0 <pbuf_clen>
 801ca0e:	4603      	mov	r3, r0
 801ca10:	461a      	mov	r2, r3
 801ca12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ca16:	4413      	add	r3, r2
 801ca18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801ca1c:	e041      	b.n	801caa2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ca1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ca20:	685b      	ldr	r3, [r3, #4]
 801ca22:	637b      	str	r3, [r7, #52]	; 0x34
 801ca24:	e002      	b.n	801ca2c <tcp_write+0x23c>
 801ca26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	637b      	str	r3, [r7, #52]	; 0x34
 801ca2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d1f8      	bne.n	801ca26 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ca34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca36:	7b1b      	ldrb	r3, [r3, #12]
 801ca38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d115      	bne.n	801ca6c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ca40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca42:	685b      	ldr	r3, [r3, #4]
 801ca44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ca46:	8952      	ldrh	r2, [r2, #10]
 801ca48:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ca4a:	68ba      	ldr	r2, [r7, #8]
 801ca4c:	429a      	cmp	r2, r3
 801ca4e:	d10d      	bne.n	801ca6c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801ca50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d006      	beq.n	801ca66 <tcp_write+0x276>
 801ca58:	4b1c      	ldr	r3, [pc, #112]	; (801cacc <tcp_write+0x2dc>)
 801ca5a:	f240 2231 	movw	r2, #561	; 0x231
 801ca5e:	4922      	ldr	r1, [pc, #136]	; (801cae8 <tcp_write+0x2f8>)
 801ca60:	481c      	ldr	r0, [pc, #112]	; (801cad4 <tcp_write+0x2e4>)
 801ca62:	f002 ffcb 	bl	801f9fc <iprintf>
          extendlen = seglen;
 801ca66:	8bfb      	ldrh	r3, [r7, #30]
 801ca68:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801ca6a:	e01a      	b.n	801caa2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ca6c:	8bfb      	ldrh	r3, [r7, #30]
 801ca6e:	2201      	movs	r2, #1
 801ca70:	4619      	mov	r1, r3
 801ca72:	2000      	movs	r0, #0
 801ca74:	f7fa fc32 	bl	80172dc <pbuf_alloc>
 801ca78:	6578      	str	r0, [r7, #84]	; 0x54
 801ca7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	f000 81e0 	beq.w	801ce42 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801ca82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ca86:	68ba      	ldr	r2, [r7, #8]
 801ca88:	441a      	add	r2, r3
 801ca8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ca8c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801ca8e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ca90:	f7fa ff96 	bl	80179c0 <pbuf_clen>
 801ca94:	4603      	mov	r3, r0
 801ca96:	461a      	mov	r2, r3
 801ca98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ca9c:	4413      	add	r3, r2
 801ca9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801caa2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801caa6:	8bfb      	ldrh	r3, [r7, #30]
 801caa8:	4413      	add	r3, r2
 801caaa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801caae:	e0dc      	b.n	801cc6a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801cab0:	68fb      	ldr	r3, [r7, #12]
 801cab2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	f000 80d7 	beq.w	801cc6a <tcp_write+0x47a>
 801cabc:	4b03      	ldr	r3, [pc, #12]	; (801cacc <tcp_write+0x2dc>)
 801cabe:	f240 224a 	movw	r2, #586	; 0x24a
 801cac2:	490a      	ldr	r1, [pc, #40]	; (801caec <tcp_write+0x2fc>)
 801cac4:	4803      	ldr	r0, [pc, #12]	; (801cad4 <tcp_write+0x2e4>)
 801cac6:	f002 ff99 	bl	801f9fc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801caca:	e0ce      	b.n	801cc6a <tcp_write+0x47a>
 801cacc:	0802344c 	.word	0x0802344c
 801cad0:	08023630 	.word	0x08023630
 801cad4:	080234e4 	.word	0x080234e4
 801cad8:	08023648 	.word	0x08023648
 801cadc:	0802367c 	.word	0x0802367c
 801cae0:	08023694 	.word	0x08023694
 801cae4:	080236b4 	.word	0x080236b4
 801cae8:	080236d4 	.word	0x080236d4
 801caec:	08023700 	.word	0x08023700
    struct pbuf *p;
    u16_t left = len - pos;
 801caf0:	88fa      	ldrh	r2, [r7, #6]
 801caf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801caf6:	1ad3      	subs	r3, r2, r3
 801caf8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801cafa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cafe:	b29b      	uxth	r3, r3
 801cb00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801cb02:	1ad3      	subs	r3, r2, r3
 801cb04:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801cb06:	8b7a      	ldrh	r2, [r7, #26]
 801cb08:	8bbb      	ldrh	r3, [r7, #28]
 801cb0a:	4293      	cmp	r3, r2
 801cb0c:	bf28      	it	cs
 801cb0e:	4613      	movcs	r3, r2
 801cb10:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801cb12:	797b      	ldrb	r3, [r7, #5]
 801cb14:	f003 0301 	and.w	r3, r3, #1
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d036      	beq.n	801cb8a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801cb1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cb20:	b29a      	uxth	r2, r3
 801cb22:	8b3b      	ldrh	r3, [r7, #24]
 801cb24:	4413      	add	r3, r2
 801cb26:	b299      	uxth	r1, r3
 801cb28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	bf0c      	ite	eq
 801cb2e:	2301      	moveq	r3, #1
 801cb30:	2300      	movne	r3, #0
 801cb32:	b2db      	uxtb	r3, r3
 801cb34:	f107 0012 	add.w	r0, r7, #18
 801cb38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801cb3a:	9302      	str	r3, [sp, #8]
 801cb3c:	797b      	ldrb	r3, [r7, #5]
 801cb3e:	9301      	str	r3, [sp, #4]
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	9300      	str	r3, [sp, #0]
 801cb44:	4603      	mov	r3, r0
 801cb46:	2036      	movs	r0, #54	; 0x36
 801cb48:	f7ff fd5e 	bl	801c608 <tcp_pbuf_prealloc>
 801cb4c:	6338      	str	r0, [r7, #48]	; 0x30
 801cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	f000 8178 	beq.w	801ce46 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801cb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb58:	895b      	ldrh	r3, [r3, #10]
 801cb5a:	8b3a      	ldrh	r2, [r7, #24]
 801cb5c:	429a      	cmp	r2, r3
 801cb5e:	d906      	bls.n	801cb6e <tcp_write+0x37e>
 801cb60:	4b8c      	ldr	r3, [pc, #560]	; (801cd94 <tcp_write+0x5a4>)
 801cb62:	f240 2266 	movw	r2, #614	; 0x266
 801cb66:	498c      	ldr	r1, [pc, #560]	; (801cd98 <tcp_write+0x5a8>)
 801cb68:	488c      	ldr	r0, [pc, #560]	; (801cd9c <tcp_write+0x5ac>)
 801cb6a:	f002 ff47 	bl	801f9fc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb70:	685a      	ldr	r2, [r3, #4]
 801cb72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cb76:	18d0      	adds	r0, r2, r3
 801cb78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cb7c:	68ba      	ldr	r2, [r7, #8]
 801cb7e:	4413      	add	r3, r2
 801cb80:	8b3a      	ldrh	r2, [r7, #24]
 801cb82:	4619      	mov	r1, r3
 801cb84:	f002 fb3c 	bl	801f200 <memcpy>
 801cb88:	e02f      	b.n	801cbea <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801cb8a:	8a7b      	ldrh	r3, [r7, #18]
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d006      	beq.n	801cb9e <tcp_write+0x3ae>
 801cb90:	4b80      	ldr	r3, [pc, #512]	; (801cd94 <tcp_write+0x5a4>)
 801cb92:	f240 2271 	movw	r2, #625	; 0x271
 801cb96:	4982      	ldr	r1, [pc, #520]	; (801cda0 <tcp_write+0x5b0>)
 801cb98:	4880      	ldr	r0, [pc, #512]	; (801cd9c <tcp_write+0x5ac>)
 801cb9a:	f002 ff2f 	bl	801f9fc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801cb9e:	8b3b      	ldrh	r3, [r7, #24]
 801cba0:	2201      	movs	r2, #1
 801cba2:	4619      	mov	r1, r3
 801cba4:	2036      	movs	r0, #54	; 0x36
 801cba6:	f7fa fb99 	bl	80172dc <pbuf_alloc>
 801cbaa:	6178      	str	r0, [r7, #20]
 801cbac:	697b      	ldr	r3, [r7, #20]
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	f000 814b 	beq.w	801ce4a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801cbb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cbb8:	68ba      	ldr	r2, [r7, #8]
 801cbba:	441a      	add	r2, r3
 801cbbc:	697b      	ldr	r3, [r7, #20]
 801cbbe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801cbc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cbc4:	b29b      	uxth	r3, r3
 801cbc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cbca:	4619      	mov	r1, r3
 801cbcc:	2036      	movs	r0, #54	; 0x36
 801cbce:	f7fa fb85 	bl	80172dc <pbuf_alloc>
 801cbd2:	6338      	str	r0, [r7, #48]	; 0x30
 801cbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d103      	bne.n	801cbe2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801cbda:	6978      	ldr	r0, [r7, #20]
 801cbdc:	f7fa fe62 	bl	80178a4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801cbe0:	e136      	b.n	801ce50 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801cbe2:	6979      	ldr	r1, [r7, #20]
 801cbe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cbe6:	f7fa ff2b 	bl	8017a40 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801cbea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cbec:	f7fa fee8 	bl	80179c0 <pbuf_clen>
 801cbf0:	4603      	mov	r3, r0
 801cbf2:	461a      	mov	r2, r3
 801cbf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801cbf8:	4413      	add	r3, r2
 801cbfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801cbfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801cc02:	2b10      	cmp	r3, #16
 801cc04:	d903      	bls.n	801cc0e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801cc06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cc08:	f7fa fe4c 	bl	80178a4 <pbuf_free>
      goto memerr;
 801cc0c:	e120      	b.n	801ce50 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801cc0e:	68fb      	ldr	r3, [r7, #12]
 801cc10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801cc12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cc16:	441a      	add	r2, r3
 801cc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cc1c:	9300      	str	r3, [sp, #0]
 801cc1e:	4613      	mov	r3, r2
 801cc20:	2200      	movs	r2, #0
 801cc22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cc24:	68f8      	ldr	r0, [r7, #12]
 801cc26:	f7ff fc51 	bl	801c4cc <tcp_create_segment>
 801cc2a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801cc2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	f000 810d 	beq.w	801ce4e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801cc34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d102      	bne.n	801cc40 <tcp_write+0x450>
      queue = seg;
 801cc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cc3c:	647b      	str	r3, [r7, #68]	; 0x44
 801cc3e:	e00c      	b.n	801cc5a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801cc40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d106      	bne.n	801cc54 <tcp_write+0x464>
 801cc46:	4b53      	ldr	r3, [pc, #332]	; (801cd94 <tcp_write+0x5a4>)
 801cc48:	f240 22ab 	movw	r2, #683	; 0x2ab
 801cc4c:	4955      	ldr	r1, [pc, #340]	; (801cda4 <tcp_write+0x5b4>)
 801cc4e:	4853      	ldr	r0, [pc, #332]	; (801cd9c <tcp_write+0x5ac>)
 801cc50:	f002 fed4 	bl	801f9fc <iprintf>
      prev_seg->next = seg;
 801cc54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cc56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801cc58:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801cc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cc5c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801cc5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cc62:	8b3b      	ldrh	r3, [r7, #24]
 801cc64:	4413      	add	r3, r2
 801cc66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801cc6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cc6e:	88fb      	ldrh	r3, [r7, #6]
 801cc70:	429a      	cmp	r2, r3
 801cc72:	f4ff af3d 	bcc.w	801caf0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801cc76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d02c      	beq.n	801ccd6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801cc7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cc7e:	685b      	ldr	r3, [r3, #4]
 801cc80:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cc82:	e01e      	b.n	801ccc2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801cc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc86:	891a      	ldrh	r2, [r3, #8]
 801cc88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801cc8a:	4413      	add	r3, r2
 801cc8c:	b29a      	uxth	r2, r3
 801cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc90:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801cc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d110      	bne.n	801ccbc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc9c:	685b      	ldr	r3, [r3, #4]
 801cc9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cca0:	8952      	ldrh	r2, [r2, #10]
 801cca2:	4413      	add	r3, r2
 801cca4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801cca6:	68b9      	ldr	r1, [r7, #8]
 801cca8:	4618      	mov	r0, r3
 801ccaa:	f002 faa9 	bl	801f200 <memcpy>
        p->len += oversize_used;
 801ccae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccb0:	895a      	ldrh	r2, [r3, #10]
 801ccb2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ccb4:	4413      	add	r3, r2
 801ccb6:	b29a      	uxth	r2, r3
 801ccb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccba:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ccc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d1dd      	bne.n	801cc84 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801ccc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ccca:	891a      	ldrh	r2, [r3, #8]
 801cccc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ccce:	4413      	add	r3, r2
 801ccd0:	b29a      	uxth	r2, r3
 801ccd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ccd4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801ccd6:	8a7a      	ldrh	r2, [r7, #18]
 801ccd8:	68fb      	ldr	r3, [r7, #12]
 801ccda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801ccde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d018      	beq.n	801cd16 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801cce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	d106      	bne.n	801ccf8 <tcp_write+0x508>
 801ccea:	4b2a      	ldr	r3, [pc, #168]	; (801cd94 <tcp_write+0x5a4>)
 801ccec:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801ccf0:	492d      	ldr	r1, [pc, #180]	; (801cda8 <tcp_write+0x5b8>)
 801ccf2:	482a      	ldr	r0, [pc, #168]	; (801cd9c <tcp_write+0x5ac>)
 801ccf4:	f002 fe82 	bl	801f9fc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801ccf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ccfa:	685b      	ldr	r3, [r3, #4]
 801ccfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ccfe:	4618      	mov	r0, r3
 801cd00:	f7fa fe9e 	bl	8017a40 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801cd04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd06:	891a      	ldrh	r2, [r3, #8]
 801cd08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cd0a:	891b      	ldrh	r3, [r3, #8]
 801cd0c:	4413      	add	r3, r2
 801cd0e:	b29a      	uxth	r2, r3
 801cd10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd12:	811a      	strh	r2, [r3, #8]
 801cd14:	e037      	b.n	801cd86 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801cd16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d034      	beq.n	801cd86 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801cd1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d003      	beq.n	801cd2a <tcp_write+0x53a>
 801cd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd24:	685b      	ldr	r3, [r3, #4]
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	d106      	bne.n	801cd38 <tcp_write+0x548>
 801cd2a:	4b1a      	ldr	r3, [pc, #104]	; (801cd94 <tcp_write+0x5a4>)
 801cd2c:	f240 22e6 	movw	r2, #742	; 0x2e6
 801cd30:	491e      	ldr	r1, [pc, #120]	; (801cdac <tcp_write+0x5bc>)
 801cd32:	481a      	ldr	r0, [pc, #104]	; (801cd9c <tcp_write+0x5ac>)
 801cd34:	f002 fe62 	bl	801f9fc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801cd38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd3a:	685b      	ldr	r3, [r3, #4]
 801cd3c:	62bb      	str	r3, [r7, #40]	; 0x28
 801cd3e:	e009      	b.n	801cd54 <tcp_write+0x564>
      p->tot_len += extendlen;
 801cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd42:	891a      	ldrh	r2, [r3, #8]
 801cd44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cd46:	4413      	add	r3, r2
 801cd48:	b29a      	uxth	r2, r3
 801cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd4c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd50:	681b      	ldr	r3, [r3, #0]
 801cd52:	62bb      	str	r3, [r7, #40]	; 0x28
 801cd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd56:	681b      	ldr	r3, [r3, #0]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d1f1      	bne.n	801cd40 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801cd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd5e:	891a      	ldrh	r2, [r3, #8]
 801cd60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cd62:	4413      	add	r3, r2
 801cd64:	b29a      	uxth	r2, r3
 801cd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd68:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801cd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd6c:	895a      	ldrh	r2, [r3, #10]
 801cd6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cd70:	4413      	add	r3, r2
 801cd72:	b29a      	uxth	r2, r3
 801cd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd76:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801cd78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd7a:	891a      	ldrh	r2, [r3, #8]
 801cd7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cd7e:	4413      	add	r3, r2
 801cd80:	b29a      	uxth	r2, r3
 801cd82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd84:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801cd86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d111      	bne.n	801cdb0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cd90:	66da      	str	r2, [r3, #108]	; 0x6c
 801cd92:	e010      	b.n	801cdb6 <tcp_write+0x5c6>
 801cd94:	0802344c 	.word	0x0802344c
 801cd98:	08023730 	.word	0x08023730
 801cd9c:	080234e4 	.word	0x080234e4
 801cda0:	08023770 	.word	0x08023770
 801cda4:	08023780 	.word	0x08023780
 801cda8:	08023794 	.word	0x08023794
 801cdac:	080237cc 	.word	0x080237cc
  } else {
    last_unsent->next = queue;
 801cdb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cdb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cdb4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801cdb6:	68fb      	ldr	r3, [r7, #12]
 801cdb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801cdba:	88fb      	ldrh	r3, [r7, #6]
 801cdbc:	441a      	add	r2, r3
 801cdbe:	68fb      	ldr	r3, [r7, #12]
 801cdc0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801cdc2:	68fb      	ldr	r3, [r7, #12]
 801cdc4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801cdc8:	88fb      	ldrh	r3, [r7, #6]
 801cdca:	1ad3      	subs	r3, r2, r3
 801cdcc:	b29a      	uxth	r2, r3
 801cdce:	68fb      	ldr	r3, [r7, #12]
 801cdd0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801cdd4:	68fb      	ldr	r3, [r7, #12]
 801cdd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801cdda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d00e      	beq.n	801ce06 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801cde8:	68fb      	ldr	r3, [r7, #12]
 801cdea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d10a      	bne.n	801ce06 <tcp_write+0x616>
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d106      	bne.n	801ce06 <tcp_write+0x616>
 801cdf8:	4b2c      	ldr	r3, [pc, #176]	; (801ceac <tcp_write+0x6bc>)
 801cdfa:	f240 3212 	movw	r2, #786	; 0x312
 801cdfe:	492c      	ldr	r1, [pc, #176]	; (801ceb0 <tcp_write+0x6c0>)
 801ce00:	482c      	ldr	r0, [pc, #176]	; (801ceb4 <tcp_write+0x6c4>)
 801ce02:	f002 fdfb 	bl	801f9fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801ce06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	d016      	beq.n	801ce3a <tcp_write+0x64a>
 801ce0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ce0e:	68db      	ldr	r3, [r3, #12]
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d012      	beq.n	801ce3a <tcp_write+0x64a>
 801ce14:	797b      	ldrb	r3, [r7, #5]
 801ce16:	f003 0302 	and.w	r3, r3, #2
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d10d      	bne.n	801ce3a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801ce1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ce20:	68db      	ldr	r3, [r3, #12]
 801ce22:	899b      	ldrh	r3, [r3, #12]
 801ce24:	b29c      	uxth	r4, r3
 801ce26:	2008      	movs	r0, #8
 801ce28:	f7f6 fd68 	bl	80138fc <lwip_htons>
 801ce2c:	4603      	mov	r3, r0
 801ce2e:	461a      	mov	r2, r3
 801ce30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ce32:	68db      	ldr	r3, [r3, #12]
 801ce34:	4322      	orrs	r2, r4
 801ce36:	b292      	uxth	r2, r2
 801ce38:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801ce3a:	2300      	movs	r3, #0
 801ce3c:	e031      	b.n	801cea2 <tcp_write+0x6b2>
          goto memerr;
 801ce3e:	bf00      	nop
 801ce40:	e006      	b.n	801ce50 <tcp_write+0x660>
            goto memerr;
 801ce42:	bf00      	nop
 801ce44:	e004      	b.n	801ce50 <tcp_write+0x660>
        goto memerr;
 801ce46:	bf00      	nop
 801ce48:	e002      	b.n	801ce50 <tcp_write+0x660>
        goto memerr;
 801ce4a:	bf00      	nop
 801ce4c:	e000      	b.n	801ce50 <tcp_write+0x660>
      goto memerr;
 801ce4e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	8b5b      	ldrh	r3, [r3, #26]
 801ce54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ce58:	b29a      	uxth	r2, r3
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801ce5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d002      	beq.n	801ce6a <tcp_write+0x67a>
    pbuf_free(concat_p);
 801ce64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ce66:	f7fa fd1d 	bl	80178a4 <pbuf_free>
  }
  if (queue != NULL) {
 801ce6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d002      	beq.n	801ce76 <tcp_write+0x686>
    tcp_segs_free(queue);
 801ce70:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ce72:	f7fc fb6b 	bl	801954c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d00e      	beq.n	801ce9e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d10a      	bne.n	801ce9e <tcp_write+0x6ae>
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d106      	bne.n	801ce9e <tcp_write+0x6ae>
 801ce90:	4b06      	ldr	r3, [pc, #24]	; (801ceac <tcp_write+0x6bc>)
 801ce92:	f240 3227 	movw	r2, #807	; 0x327
 801ce96:	4906      	ldr	r1, [pc, #24]	; (801ceb0 <tcp_write+0x6c0>)
 801ce98:	4806      	ldr	r0, [pc, #24]	; (801ceb4 <tcp_write+0x6c4>)
 801ce9a:	f002 fdaf 	bl	801f9fc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801ce9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801cea2:	4618      	mov	r0, r3
 801cea4:	375c      	adds	r7, #92	; 0x5c
 801cea6:	46bd      	mov	sp, r7
 801cea8:	bd90      	pop	{r4, r7, pc}
 801ceaa:	bf00      	nop
 801ceac:	0802344c 	.word	0x0802344c
 801ceb0:	08023804 	.word	0x08023804
 801ceb4:	080234e4 	.word	0x080234e4

0801ceb8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801ceb8:	b590      	push	{r4, r7, lr}
 801ceba:	b08b      	sub	sp, #44	; 0x2c
 801cebc:	af02      	add	r7, sp, #8
 801cebe:	6078      	str	r0, [r7, #4]
 801cec0:	460b      	mov	r3, r1
 801cec2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801cec4:	2300      	movs	r3, #0
 801cec6:	61fb      	str	r3, [r7, #28]
 801cec8:	2300      	movs	r3, #0
 801ceca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801cecc:	2300      	movs	r3, #0
 801cece:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d106      	bne.n	801cee4 <tcp_split_unsent_seg+0x2c>
 801ced6:	4b95      	ldr	r3, [pc, #596]	; (801d12c <tcp_split_unsent_seg+0x274>)
 801ced8:	f240 324b 	movw	r2, #843	; 0x34b
 801cedc:	4994      	ldr	r1, [pc, #592]	; (801d130 <tcp_split_unsent_seg+0x278>)
 801cede:	4895      	ldr	r0, [pc, #596]	; (801d134 <tcp_split_unsent_seg+0x27c>)
 801cee0:	f002 fd8c 	bl	801f9fc <iprintf>

  useg = pcb->unsent;
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cee8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801ceea:	697b      	ldr	r3, [r7, #20]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d102      	bne.n	801cef6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801cef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cef4:	e116      	b.n	801d124 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801cef6:	887b      	ldrh	r3, [r7, #2]
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	d109      	bne.n	801cf10 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801cefc:	4b8b      	ldr	r3, [pc, #556]	; (801d12c <tcp_split_unsent_seg+0x274>)
 801cefe:	f240 3253 	movw	r2, #851	; 0x353
 801cf02:	498d      	ldr	r1, [pc, #564]	; (801d138 <tcp_split_unsent_seg+0x280>)
 801cf04:	488b      	ldr	r0, [pc, #556]	; (801d134 <tcp_split_unsent_seg+0x27c>)
 801cf06:	f002 fd79 	bl	801f9fc <iprintf>
    return ERR_VAL;
 801cf0a:	f06f 0305 	mvn.w	r3, #5
 801cf0e:	e109      	b.n	801d124 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801cf10:	697b      	ldr	r3, [r7, #20]
 801cf12:	891b      	ldrh	r3, [r3, #8]
 801cf14:	887a      	ldrh	r2, [r7, #2]
 801cf16:	429a      	cmp	r2, r3
 801cf18:	d301      	bcc.n	801cf1e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801cf1a:	2300      	movs	r3, #0
 801cf1c:	e102      	b.n	801d124 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cf22:	887a      	ldrh	r2, [r7, #2]
 801cf24:	429a      	cmp	r2, r3
 801cf26:	d906      	bls.n	801cf36 <tcp_split_unsent_seg+0x7e>
 801cf28:	4b80      	ldr	r3, [pc, #512]	; (801d12c <tcp_split_unsent_seg+0x274>)
 801cf2a:	f240 325b 	movw	r2, #859	; 0x35b
 801cf2e:	4983      	ldr	r1, [pc, #524]	; (801d13c <tcp_split_unsent_seg+0x284>)
 801cf30:	4880      	ldr	r0, [pc, #512]	; (801d134 <tcp_split_unsent_seg+0x27c>)
 801cf32:	f002 fd63 	bl	801f9fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801cf36:	697b      	ldr	r3, [r7, #20]
 801cf38:	891b      	ldrh	r3, [r3, #8]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d106      	bne.n	801cf4c <tcp_split_unsent_seg+0x94>
 801cf3e:	4b7b      	ldr	r3, [pc, #492]	; (801d12c <tcp_split_unsent_seg+0x274>)
 801cf40:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801cf44:	497e      	ldr	r1, [pc, #504]	; (801d140 <tcp_split_unsent_seg+0x288>)
 801cf46:	487b      	ldr	r0, [pc, #492]	; (801d134 <tcp_split_unsent_seg+0x27c>)
 801cf48:	f002 fd58 	bl	801f9fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801cf4c:	697b      	ldr	r3, [r7, #20]
 801cf4e:	7a9b      	ldrb	r3, [r3, #10]
 801cf50:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801cf52:	7bfb      	ldrb	r3, [r7, #15]
 801cf54:	009b      	lsls	r3, r3, #2
 801cf56:	b2db      	uxtb	r3, r3
 801cf58:	f003 0304 	and.w	r3, r3, #4
 801cf5c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801cf5e:	697b      	ldr	r3, [r7, #20]
 801cf60:	891a      	ldrh	r2, [r3, #8]
 801cf62:	887b      	ldrh	r3, [r7, #2]
 801cf64:	1ad3      	subs	r3, r2, r3
 801cf66:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801cf68:	7bbb      	ldrb	r3, [r7, #14]
 801cf6a:	b29a      	uxth	r2, r3
 801cf6c:	89bb      	ldrh	r3, [r7, #12]
 801cf6e:	4413      	add	r3, r2
 801cf70:	b29b      	uxth	r3, r3
 801cf72:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cf76:	4619      	mov	r1, r3
 801cf78:	2036      	movs	r0, #54	; 0x36
 801cf7a:	f7fa f9af 	bl	80172dc <pbuf_alloc>
 801cf7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801cf80:	693b      	ldr	r3, [r7, #16]
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	f000 80b7 	beq.w	801d0f6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801cf88:	697b      	ldr	r3, [r7, #20]
 801cf8a:	685b      	ldr	r3, [r3, #4]
 801cf8c:	891a      	ldrh	r2, [r3, #8]
 801cf8e:	697b      	ldr	r3, [r7, #20]
 801cf90:	891b      	ldrh	r3, [r3, #8]
 801cf92:	1ad3      	subs	r3, r2, r3
 801cf94:	b29a      	uxth	r2, r3
 801cf96:	887b      	ldrh	r3, [r7, #2]
 801cf98:	4413      	add	r3, r2
 801cf9a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801cf9c:	697b      	ldr	r3, [r7, #20]
 801cf9e:	6858      	ldr	r0, [r3, #4]
 801cfa0:	693b      	ldr	r3, [r7, #16]
 801cfa2:	685a      	ldr	r2, [r3, #4]
 801cfa4:	7bbb      	ldrb	r3, [r7, #14]
 801cfa6:	18d1      	adds	r1, r2, r3
 801cfa8:	897b      	ldrh	r3, [r7, #10]
 801cfaa:	89ba      	ldrh	r2, [r7, #12]
 801cfac:	f7fa fe70 	bl	8017c90 <pbuf_copy_partial>
 801cfb0:	4603      	mov	r3, r0
 801cfb2:	461a      	mov	r2, r3
 801cfb4:	89bb      	ldrh	r3, [r7, #12]
 801cfb6:	4293      	cmp	r3, r2
 801cfb8:	f040 809f 	bne.w	801d0fa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801cfbc:	697b      	ldr	r3, [r7, #20]
 801cfbe:	68db      	ldr	r3, [r3, #12]
 801cfc0:	899b      	ldrh	r3, [r3, #12]
 801cfc2:	b29b      	uxth	r3, r3
 801cfc4:	4618      	mov	r0, r3
 801cfc6:	f7f6 fc99 	bl	80138fc <lwip_htons>
 801cfca:	4603      	mov	r3, r0
 801cfcc:	b2db      	uxtb	r3, r3
 801cfce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801cfd2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801cfd8:	7efb      	ldrb	r3, [r7, #27]
 801cfda:	f003 0308 	and.w	r3, r3, #8
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d007      	beq.n	801cff2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801cfe2:	7efb      	ldrb	r3, [r7, #27]
 801cfe4:	f023 0308 	bic.w	r3, r3, #8
 801cfe8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801cfea:	7ebb      	ldrb	r3, [r7, #26]
 801cfec:	f043 0308 	orr.w	r3, r3, #8
 801cff0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801cff2:	7efb      	ldrb	r3, [r7, #27]
 801cff4:	f003 0301 	and.w	r3, r3, #1
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	d007      	beq.n	801d00c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801cffc:	7efb      	ldrb	r3, [r7, #27]
 801cffe:	f023 0301 	bic.w	r3, r3, #1
 801d002:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801d004:	7ebb      	ldrb	r3, [r7, #26]
 801d006:	f043 0301 	orr.w	r3, r3, #1
 801d00a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801d00c:	697b      	ldr	r3, [r7, #20]
 801d00e:	68db      	ldr	r3, [r3, #12]
 801d010:	685b      	ldr	r3, [r3, #4]
 801d012:	4618      	mov	r0, r3
 801d014:	f7f6 fc87 	bl	8013926 <lwip_htonl>
 801d018:	4602      	mov	r2, r0
 801d01a:	887b      	ldrh	r3, [r7, #2]
 801d01c:	18d1      	adds	r1, r2, r3
 801d01e:	7eba      	ldrb	r2, [r7, #26]
 801d020:	7bfb      	ldrb	r3, [r7, #15]
 801d022:	9300      	str	r3, [sp, #0]
 801d024:	460b      	mov	r3, r1
 801d026:	6939      	ldr	r1, [r7, #16]
 801d028:	6878      	ldr	r0, [r7, #4]
 801d02a:	f7ff fa4f 	bl	801c4cc <tcp_create_segment>
 801d02e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801d030:	69fb      	ldr	r3, [r7, #28]
 801d032:	2b00      	cmp	r3, #0
 801d034:	d063      	beq.n	801d0fe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801d036:	697b      	ldr	r3, [r7, #20]
 801d038:	685b      	ldr	r3, [r3, #4]
 801d03a:	4618      	mov	r0, r3
 801d03c:	f7fa fcc0 	bl	80179c0 <pbuf_clen>
 801d040:	4603      	mov	r3, r0
 801d042:	461a      	mov	r2, r3
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d04a:	1a9b      	subs	r3, r3, r2
 801d04c:	b29a      	uxth	r2, r3
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801d054:	697b      	ldr	r3, [r7, #20]
 801d056:	6858      	ldr	r0, [r3, #4]
 801d058:	697b      	ldr	r3, [r7, #20]
 801d05a:	685b      	ldr	r3, [r3, #4]
 801d05c:	891a      	ldrh	r2, [r3, #8]
 801d05e:	89bb      	ldrh	r3, [r7, #12]
 801d060:	1ad3      	subs	r3, r2, r3
 801d062:	b29b      	uxth	r3, r3
 801d064:	4619      	mov	r1, r3
 801d066:	f7fa fa99 	bl	801759c <pbuf_realloc>
  useg->len -= remainder;
 801d06a:	697b      	ldr	r3, [r7, #20]
 801d06c:	891a      	ldrh	r2, [r3, #8]
 801d06e:	89bb      	ldrh	r3, [r7, #12]
 801d070:	1ad3      	subs	r3, r2, r3
 801d072:	b29a      	uxth	r2, r3
 801d074:	697b      	ldr	r3, [r7, #20]
 801d076:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801d078:	697b      	ldr	r3, [r7, #20]
 801d07a:	68db      	ldr	r3, [r3, #12]
 801d07c:	899b      	ldrh	r3, [r3, #12]
 801d07e:	b29c      	uxth	r4, r3
 801d080:	7efb      	ldrb	r3, [r7, #27]
 801d082:	b29b      	uxth	r3, r3
 801d084:	4618      	mov	r0, r3
 801d086:	f7f6 fc39 	bl	80138fc <lwip_htons>
 801d08a:	4603      	mov	r3, r0
 801d08c:	461a      	mov	r2, r3
 801d08e:	697b      	ldr	r3, [r7, #20]
 801d090:	68db      	ldr	r3, [r3, #12]
 801d092:	4322      	orrs	r2, r4
 801d094:	b292      	uxth	r2, r2
 801d096:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801d098:	697b      	ldr	r3, [r7, #20]
 801d09a:	685b      	ldr	r3, [r3, #4]
 801d09c:	4618      	mov	r0, r3
 801d09e:	f7fa fc8f 	bl	80179c0 <pbuf_clen>
 801d0a2:	4603      	mov	r3, r0
 801d0a4:	461a      	mov	r2, r3
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d0ac:	4413      	add	r3, r2
 801d0ae:	b29a      	uxth	r2, r3
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d0b6:	69fb      	ldr	r3, [r7, #28]
 801d0b8:	685b      	ldr	r3, [r3, #4]
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	f7fa fc80 	bl	80179c0 <pbuf_clen>
 801d0c0:	4603      	mov	r3, r0
 801d0c2:	461a      	mov	r2, r3
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d0ca:	4413      	add	r3, r2
 801d0cc:	b29a      	uxth	r2, r3
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801d0d4:	697b      	ldr	r3, [r7, #20]
 801d0d6:	681a      	ldr	r2, [r3, #0]
 801d0d8:	69fb      	ldr	r3, [r7, #28]
 801d0da:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801d0dc:	697b      	ldr	r3, [r7, #20]
 801d0de:	69fa      	ldr	r2, [r7, #28]
 801d0e0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801d0e2:	69fb      	ldr	r3, [r7, #28]
 801d0e4:	681b      	ldr	r3, [r3, #0]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d103      	bne.n	801d0f2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	2200      	movs	r2, #0
 801d0ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801d0f2:	2300      	movs	r3, #0
 801d0f4:	e016      	b.n	801d124 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801d0f6:	bf00      	nop
 801d0f8:	e002      	b.n	801d100 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801d0fa:	bf00      	nop
 801d0fc:	e000      	b.n	801d100 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801d0fe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801d100:	69fb      	ldr	r3, [r7, #28]
 801d102:	2b00      	cmp	r3, #0
 801d104:	d006      	beq.n	801d114 <tcp_split_unsent_seg+0x25c>
 801d106:	4b09      	ldr	r3, [pc, #36]	; (801d12c <tcp_split_unsent_seg+0x274>)
 801d108:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801d10c:	490d      	ldr	r1, [pc, #52]	; (801d144 <tcp_split_unsent_seg+0x28c>)
 801d10e:	4809      	ldr	r0, [pc, #36]	; (801d134 <tcp_split_unsent_seg+0x27c>)
 801d110:	f002 fc74 	bl	801f9fc <iprintf>
  if (p != NULL) {
 801d114:	693b      	ldr	r3, [r7, #16]
 801d116:	2b00      	cmp	r3, #0
 801d118:	d002      	beq.n	801d120 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801d11a:	6938      	ldr	r0, [r7, #16]
 801d11c:	f7fa fbc2 	bl	80178a4 <pbuf_free>
  }

  return ERR_MEM;
 801d120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801d124:	4618      	mov	r0, r3
 801d126:	3724      	adds	r7, #36	; 0x24
 801d128:	46bd      	mov	sp, r7
 801d12a:	bd90      	pop	{r4, r7, pc}
 801d12c:	0802344c 	.word	0x0802344c
 801d130:	08023824 	.word	0x08023824
 801d134:	080234e4 	.word	0x080234e4
 801d138:	08023848 	.word	0x08023848
 801d13c:	0802386c 	.word	0x0802386c
 801d140:	0802387c 	.word	0x0802387c
 801d144:	0802388c 	.word	0x0802388c

0801d148 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801d148:	b590      	push	{r4, r7, lr}
 801d14a:	b085      	sub	sp, #20
 801d14c:	af00      	add	r7, sp, #0
 801d14e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	2b00      	cmp	r3, #0
 801d154:	d106      	bne.n	801d164 <tcp_send_fin+0x1c>
 801d156:	4b21      	ldr	r3, [pc, #132]	; (801d1dc <tcp_send_fin+0x94>)
 801d158:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801d15c:	4920      	ldr	r1, [pc, #128]	; (801d1e0 <tcp_send_fin+0x98>)
 801d15e:	4821      	ldr	r0, [pc, #132]	; (801d1e4 <tcp_send_fin+0x9c>)
 801d160:	f002 fc4c 	bl	801f9fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d02e      	beq.n	801d1ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d170:	60fb      	str	r3, [r7, #12]
 801d172:	e002      	b.n	801d17a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801d174:	68fb      	ldr	r3, [r7, #12]
 801d176:	681b      	ldr	r3, [r3, #0]
 801d178:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d1f8      	bne.n	801d174 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801d182:	68fb      	ldr	r3, [r7, #12]
 801d184:	68db      	ldr	r3, [r3, #12]
 801d186:	899b      	ldrh	r3, [r3, #12]
 801d188:	b29b      	uxth	r3, r3
 801d18a:	4618      	mov	r0, r3
 801d18c:	f7f6 fbb6 	bl	80138fc <lwip_htons>
 801d190:	4603      	mov	r3, r0
 801d192:	b2db      	uxtb	r3, r3
 801d194:	f003 0307 	and.w	r3, r3, #7
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d116      	bne.n	801d1ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801d19c:	68fb      	ldr	r3, [r7, #12]
 801d19e:	68db      	ldr	r3, [r3, #12]
 801d1a0:	899b      	ldrh	r3, [r3, #12]
 801d1a2:	b29c      	uxth	r4, r3
 801d1a4:	2001      	movs	r0, #1
 801d1a6:	f7f6 fba9 	bl	80138fc <lwip_htons>
 801d1aa:	4603      	mov	r3, r0
 801d1ac:	461a      	mov	r2, r3
 801d1ae:	68fb      	ldr	r3, [r7, #12]
 801d1b0:	68db      	ldr	r3, [r3, #12]
 801d1b2:	4322      	orrs	r2, r4
 801d1b4:	b292      	uxth	r2, r2
 801d1b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	8b5b      	ldrh	r3, [r3, #26]
 801d1bc:	f043 0320 	orr.w	r3, r3, #32
 801d1c0:	b29a      	uxth	r2, r3
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	e004      	b.n	801d1d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801d1ca:	2101      	movs	r1, #1
 801d1cc:	6878      	ldr	r0, [r7, #4]
 801d1ce:	f000 f80b 	bl	801d1e8 <tcp_enqueue_flags>
 801d1d2:	4603      	mov	r3, r0
}
 801d1d4:	4618      	mov	r0, r3
 801d1d6:	3714      	adds	r7, #20
 801d1d8:	46bd      	mov	sp, r7
 801d1da:	bd90      	pop	{r4, r7, pc}
 801d1dc:	0802344c 	.word	0x0802344c
 801d1e0:	08023898 	.word	0x08023898
 801d1e4:	080234e4 	.word	0x080234e4

0801d1e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801d1e8:	b580      	push	{r7, lr}
 801d1ea:	b08a      	sub	sp, #40	; 0x28
 801d1ec:	af02      	add	r7, sp, #8
 801d1ee:	6078      	str	r0, [r7, #4]
 801d1f0:	460b      	mov	r3, r1
 801d1f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801d1f8:	2300      	movs	r3, #0
 801d1fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801d1fc:	78fb      	ldrb	r3, [r7, #3]
 801d1fe:	f003 0303 	and.w	r3, r3, #3
 801d202:	2b00      	cmp	r3, #0
 801d204:	d106      	bne.n	801d214 <tcp_enqueue_flags+0x2c>
 801d206:	4b67      	ldr	r3, [pc, #412]	; (801d3a4 <tcp_enqueue_flags+0x1bc>)
 801d208:	f240 4211 	movw	r2, #1041	; 0x411
 801d20c:	4966      	ldr	r1, [pc, #408]	; (801d3a8 <tcp_enqueue_flags+0x1c0>)
 801d20e:	4867      	ldr	r0, [pc, #412]	; (801d3ac <tcp_enqueue_flags+0x1c4>)
 801d210:	f002 fbf4 	bl	801f9fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	2b00      	cmp	r3, #0
 801d218:	d106      	bne.n	801d228 <tcp_enqueue_flags+0x40>
 801d21a:	4b62      	ldr	r3, [pc, #392]	; (801d3a4 <tcp_enqueue_flags+0x1bc>)
 801d21c:	f240 4213 	movw	r2, #1043	; 0x413
 801d220:	4963      	ldr	r1, [pc, #396]	; (801d3b0 <tcp_enqueue_flags+0x1c8>)
 801d222:	4862      	ldr	r0, [pc, #392]	; (801d3ac <tcp_enqueue_flags+0x1c4>)
 801d224:	f002 fbea 	bl	801f9fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801d228:	78fb      	ldrb	r3, [r7, #3]
 801d22a:	f003 0302 	and.w	r3, r3, #2
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d001      	beq.n	801d236 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801d232:	2301      	movs	r3, #1
 801d234:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d236:	7ffb      	ldrb	r3, [r7, #31]
 801d238:	009b      	lsls	r3, r3, #2
 801d23a:	b2db      	uxtb	r3, r3
 801d23c:	f003 0304 	and.w	r3, r3, #4
 801d240:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d242:	7dfb      	ldrb	r3, [r7, #23]
 801d244:	b29b      	uxth	r3, r3
 801d246:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d24a:	4619      	mov	r1, r3
 801d24c:	2036      	movs	r0, #54	; 0x36
 801d24e:	f7fa f845 	bl	80172dc <pbuf_alloc>
 801d252:	6138      	str	r0, [r7, #16]
 801d254:	693b      	ldr	r3, [r7, #16]
 801d256:	2b00      	cmp	r3, #0
 801d258:	d109      	bne.n	801d26e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	8b5b      	ldrh	r3, [r3, #26]
 801d25e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d262:	b29a      	uxth	r2, r3
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801d268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d26c:	e095      	b.n	801d39a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801d26e:	693b      	ldr	r3, [r7, #16]
 801d270:	895a      	ldrh	r2, [r3, #10]
 801d272:	7dfb      	ldrb	r3, [r7, #23]
 801d274:	b29b      	uxth	r3, r3
 801d276:	429a      	cmp	r2, r3
 801d278:	d206      	bcs.n	801d288 <tcp_enqueue_flags+0xa0>
 801d27a:	4b4a      	ldr	r3, [pc, #296]	; (801d3a4 <tcp_enqueue_flags+0x1bc>)
 801d27c:	f240 4239 	movw	r2, #1081	; 0x439
 801d280:	494c      	ldr	r1, [pc, #304]	; (801d3b4 <tcp_enqueue_flags+0x1cc>)
 801d282:	484a      	ldr	r0, [pc, #296]	; (801d3ac <tcp_enqueue_flags+0x1c4>)
 801d284:	f002 fbba 	bl	801f9fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801d28c:	78fa      	ldrb	r2, [r7, #3]
 801d28e:	7ffb      	ldrb	r3, [r7, #31]
 801d290:	9300      	str	r3, [sp, #0]
 801d292:	460b      	mov	r3, r1
 801d294:	6939      	ldr	r1, [r7, #16]
 801d296:	6878      	ldr	r0, [r7, #4]
 801d298:	f7ff f918 	bl	801c4cc <tcp_create_segment>
 801d29c:	60f8      	str	r0, [r7, #12]
 801d29e:	68fb      	ldr	r3, [r7, #12]
 801d2a0:	2b00      	cmp	r3, #0
 801d2a2:	d109      	bne.n	801d2b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	8b5b      	ldrh	r3, [r3, #26]
 801d2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d2ac:	b29a      	uxth	r2, r3
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801d2b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d2b6:	e070      	b.n	801d39a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801d2b8:	68fb      	ldr	r3, [r7, #12]
 801d2ba:	68db      	ldr	r3, [r3, #12]
 801d2bc:	f003 0303 	and.w	r3, r3, #3
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d006      	beq.n	801d2d2 <tcp_enqueue_flags+0xea>
 801d2c4:	4b37      	ldr	r3, [pc, #220]	; (801d3a4 <tcp_enqueue_flags+0x1bc>)
 801d2c6:	f240 4242 	movw	r2, #1090	; 0x442
 801d2ca:	493b      	ldr	r1, [pc, #236]	; (801d3b8 <tcp_enqueue_flags+0x1d0>)
 801d2cc:	4837      	ldr	r0, [pc, #220]	; (801d3ac <tcp_enqueue_flags+0x1c4>)
 801d2ce:	f002 fb95 	bl	801f9fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801d2d2:	68fb      	ldr	r3, [r7, #12]
 801d2d4:	891b      	ldrh	r3, [r3, #8]
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d006      	beq.n	801d2e8 <tcp_enqueue_flags+0x100>
 801d2da:	4b32      	ldr	r3, [pc, #200]	; (801d3a4 <tcp_enqueue_flags+0x1bc>)
 801d2dc:	f240 4243 	movw	r2, #1091	; 0x443
 801d2e0:	4936      	ldr	r1, [pc, #216]	; (801d3bc <tcp_enqueue_flags+0x1d4>)
 801d2e2:	4832      	ldr	r0, [pc, #200]	; (801d3ac <tcp_enqueue_flags+0x1c4>)
 801d2e4:	f002 fb8a 	bl	801f9fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d103      	bne.n	801d2f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	68fa      	ldr	r2, [r7, #12]
 801d2f4:	66da      	str	r2, [r3, #108]	; 0x6c
 801d2f6:	e00d      	b.n	801d314 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d2fc:	61bb      	str	r3, [r7, #24]
 801d2fe:	e002      	b.n	801d306 <tcp_enqueue_flags+0x11e>
 801d300:	69bb      	ldr	r3, [r7, #24]
 801d302:	681b      	ldr	r3, [r3, #0]
 801d304:	61bb      	str	r3, [r7, #24]
 801d306:	69bb      	ldr	r3, [r7, #24]
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d1f8      	bne.n	801d300 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801d30e:	69bb      	ldr	r3, [r7, #24]
 801d310:	68fa      	ldr	r2, [r7, #12]
 801d312:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	2200      	movs	r2, #0
 801d318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801d31c:	78fb      	ldrb	r3, [r7, #3]
 801d31e:	f003 0302 	and.w	r3, r3, #2
 801d322:	2b00      	cmp	r3, #0
 801d324:	d104      	bne.n	801d330 <tcp_enqueue_flags+0x148>
 801d326:	78fb      	ldrb	r3, [r7, #3]
 801d328:	f003 0301 	and.w	r3, r3, #1
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d004      	beq.n	801d33a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d334:	1c5a      	adds	r2, r3, #1
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801d33a:	78fb      	ldrb	r3, [r7, #3]
 801d33c:	f003 0301 	and.w	r3, r3, #1
 801d340:	2b00      	cmp	r3, #0
 801d342:	d006      	beq.n	801d352 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	8b5b      	ldrh	r3, [r3, #26]
 801d348:	f043 0320 	orr.w	r3, r3, #32
 801d34c:	b29a      	uxth	r2, r3
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	685b      	ldr	r3, [r3, #4]
 801d356:	4618      	mov	r0, r3
 801d358:	f7fa fb32 	bl	80179c0 <pbuf_clen>
 801d35c:	4603      	mov	r3, r0
 801d35e:	461a      	mov	r2, r3
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d366:	4413      	add	r3, r2
 801d368:	b29a      	uxth	r2, r3
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d376:	2b00      	cmp	r3, #0
 801d378:	d00e      	beq.n	801d398 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d10a      	bne.n	801d398 <tcp_enqueue_flags+0x1b0>
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d386:	2b00      	cmp	r3, #0
 801d388:	d106      	bne.n	801d398 <tcp_enqueue_flags+0x1b0>
 801d38a:	4b06      	ldr	r3, [pc, #24]	; (801d3a4 <tcp_enqueue_flags+0x1bc>)
 801d38c:	f240 4265 	movw	r2, #1125	; 0x465
 801d390:	490b      	ldr	r1, [pc, #44]	; (801d3c0 <tcp_enqueue_flags+0x1d8>)
 801d392:	4806      	ldr	r0, [pc, #24]	; (801d3ac <tcp_enqueue_flags+0x1c4>)
 801d394:	f002 fb32 	bl	801f9fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801d398:	2300      	movs	r3, #0
}
 801d39a:	4618      	mov	r0, r3
 801d39c:	3720      	adds	r7, #32
 801d39e:	46bd      	mov	sp, r7
 801d3a0:	bd80      	pop	{r7, pc}
 801d3a2:	bf00      	nop
 801d3a4:	0802344c 	.word	0x0802344c
 801d3a8:	080238b4 	.word	0x080238b4
 801d3ac:	080234e4 	.word	0x080234e4
 801d3b0:	0802390c 	.word	0x0802390c
 801d3b4:	0802392c 	.word	0x0802392c
 801d3b8:	08023968 	.word	0x08023968
 801d3bc:	08023980 	.word	0x08023980
 801d3c0:	080239ac 	.word	0x080239ac

0801d3c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801d3c4:	b5b0      	push	{r4, r5, r7, lr}
 801d3c6:	b08a      	sub	sp, #40	; 0x28
 801d3c8:	af00      	add	r7, sp, #0
 801d3ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	2b00      	cmp	r3, #0
 801d3d0:	d106      	bne.n	801d3e0 <tcp_output+0x1c>
 801d3d2:	4b8a      	ldr	r3, [pc, #552]	; (801d5fc <tcp_output+0x238>)
 801d3d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801d3d8:	4989      	ldr	r1, [pc, #548]	; (801d600 <tcp_output+0x23c>)
 801d3da:	488a      	ldr	r0, [pc, #552]	; (801d604 <tcp_output+0x240>)
 801d3dc:	f002 fb0e 	bl	801f9fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	7d1b      	ldrb	r3, [r3, #20]
 801d3e4:	2b01      	cmp	r3, #1
 801d3e6:	d106      	bne.n	801d3f6 <tcp_output+0x32>
 801d3e8:	4b84      	ldr	r3, [pc, #528]	; (801d5fc <tcp_output+0x238>)
 801d3ea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801d3ee:	4986      	ldr	r1, [pc, #536]	; (801d608 <tcp_output+0x244>)
 801d3f0:	4884      	ldr	r0, [pc, #528]	; (801d604 <tcp_output+0x240>)
 801d3f2:	f002 fb03 	bl	801f9fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801d3f6:	4b85      	ldr	r3, [pc, #532]	; (801d60c <tcp_output+0x248>)
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	687a      	ldr	r2, [r7, #4]
 801d3fc:	429a      	cmp	r2, r3
 801d3fe:	d101      	bne.n	801d404 <tcp_output+0x40>
    return ERR_OK;
 801d400:	2300      	movs	r3, #0
 801d402:	e1ce      	b.n	801d7a2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d410:	4293      	cmp	r3, r2
 801d412:	bf28      	it	cs
 801d414:	4613      	movcs	r3, r2
 801d416:	b29b      	uxth	r3, r3
 801d418:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d41e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801d420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d422:	2b00      	cmp	r3, #0
 801d424:	d10b      	bne.n	801d43e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	8b5b      	ldrh	r3, [r3, #26]
 801d42a:	f003 0302 	and.w	r3, r3, #2
 801d42e:	2b00      	cmp	r3, #0
 801d430:	f000 81aa 	beq.w	801d788 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801d434:	6878      	ldr	r0, [r7, #4]
 801d436:	f000 fdcb 	bl	801dfd0 <tcp_send_empty_ack>
 801d43a:	4603      	mov	r3, r0
 801d43c:	e1b1      	b.n	801d7a2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801d43e:	6879      	ldr	r1, [r7, #4]
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	3304      	adds	r3, #4
 801d444:	461a      	mov	r2, r3
 801d446:	6878      	ldr	r0, [r7, #4]
 801d448:	f7ff f824 	bl	801c494 <tcp_route>
 801d44c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801d44e:	697b      	ldr	r3, [r7, #20]
 801d450:	2b00      	cmp	r3, #0
 801d452:	d102      	bne.n	801d45a <tcp_output+0x96>
    return ERR_RTE;
 801d454:	f06f 0303 	mvn.w	r3, #3
 801d458:	e1a3      	b.n	801d7a2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d003      	beq.n	801d468 <tcp_output+0xa4>
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	2b00      	cmp	r3, #0
 801d466:	d111      	bne.n	801d48c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801d468:	697b      	ldr	r3, [r7, #20]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d002      	beq.n	801d474 <tcp_output+0xb0>
 801d46e:	697b      	ldr	r3, [r7, #20]
 801d470:	3304      	adds	r3, #4
 801d472:	e000      	b.n	801d476 <tcp_output+0xb2>
 801d474:	2300      	movs	r3, #0
 801d476:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801d478:	693b      	ldr	r3, [r7, #16]
 801d47a:	2b00      	cmp	r3, #0
 801d47c:	d102      	bne.n	801d484 <tcp_output+0xc0>
      return ERR_RTE;
 801d47e:	f06f 0303 	mvn.w	r3, #3
 801d482:	e18e      	b.n	801d7a2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801d484:	693b      	ldr	r3, [r7, #16]
 801d486:	681a      	ldr	r2, [r3, #0]
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d48e:	68db      	ldr	r3, [r3, #12]
 801d490:	685b      	ldr	r3, [r3, #4]
 801d492:	4618      	mov	r0, r3
 801d494:	f7f6 fa47 	bl	8013926 <lwip_htonl>
 801d498:	4602      	mov	r2, r0
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d49e:	1ad3      	subs	r3, r2, r3
 801d4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d4a2:	8912      	ldrh	r2, [r2, #8]
 801d4a4:	4413      	add	r3, r2
 801d4a6:	69ba      	ldr	r2, [r7, #24]
 801d4a8:	429a      	cmp	r2, r3
 801d4aa:	d227      	bcs.n	801d4fc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d4b2:	461a      	mov	r2, r3
 801d4b4:	69bb      	ldr	r3, [r7, #24]
 801d4b6:	4293      	cmp	r3, r2
 801d4b8:	d114      	bne.n	801d4e4 <tcp_output+0x120>
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d110      	bne.n	801d4e4 <tcp_output+0x120>
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	d10b      	bne.n	801d4e4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	2200      	movs	r2, #0
 801d4d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	2201      	movs	r2, #1
 801d4d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	2200      	movs	r2, #0
 801d4e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	8b5b      	ldrh	r3, [r3, #26]
 801d4e8:	f003 0302 	and.w	r3, r3, #2
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	f000 814d 	beq.w	801d78c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801d4f2:	6878      	ldr	r0, [r7, #4]
 801d4f4:	f000 fd6c 	bl	801dfd0 <tcp_send_empty_ack>
 801d4f8:	4603      	mov	r3, r0
 801d4fa:	e152      	b.n	801d7a2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	2200      	movs	r2, #0
 801d500:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d508:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801d50a:	6a3b      	ldr	r3, [r7, #32]
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	f000 811c 	beq.w	801d74a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801d512:	e002      	b.n	801d51a <tcp_output+0x156>
 801d514:	6a3b      	ldr	r3, [r7, #32]
 801d516:	681b      	ldr	r3, [r3, #0]
 801d518:	623b      	str	r3, [r7, #32]
 801d51a:	6a3b      	ldr	r3, [r7, #32]
 801d51c:	681b      	ldr	r3, [r3, #0]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d1f8      	bne.n	801d514 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801d522:	e112      	b.n	801d74a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d526:	68db      	ldr	r3, [r3, #12]
 801d528:	899b      	ldrh	r3, [r3, #12]
 801d52a:	b29b      	uxth	r3, r3
 801d52c:	4618      	mov	r0, r3
 801d52e:	f7f6 f9e5 	bl	80138fc <lwip_htons>
 801d532:	4603      	mov	r3, r0
 801d534:	b2db      	uxtb	r3, r3
 801d536:	f003 0304 	and.w	r3, r3, #4
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d006      	beq.n	801d54c <tcp_output+0x188>
 801d53e:	4b2f      	ldr	r3, [pc, #188]	; (801d5fc <tcp_output+0x238>)
 801d540:	f240 5236 	movw	r2, #1334	; 0x536
 801d544:	4932      	ldr	r1, [pc, #200]	; (801d610 <tcp_output+0x24c>)
 801d546:	482f      	ldr	r0, [pc, #188]	; (801d604 <tcp_output+0x240>)
 801d548:	f002 fa58 	bl	801f9fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d550:	2b00      	cmp	r3, #0
 801d552:	d01f      	beq.n	801d594 <tcp_output+0x1d0>
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	8b5b      	ldrh	r3, [r3, #26]
 801d558:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d119      	bne.n	801d594 <tcp_output+0x1d0>
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d564:	2b00      	cmp	r3, #0
 801d566:	d00b      	beq.n	801d580 <tcp_output+0x1bc>
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d56c:	681b      	ldr	r3, [r3, #0]
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d110      	bne.n	801d594 <tcp_output+0x1d0>
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d576:	891a      	ldrh	r2, [r3, #8]
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d57c:	429a      	cmp	r2, r3
 801d57e:	d209      	bcs.n	801d594 <tcp_output+0x1d0>
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801d586:	2b00      	cmp	r3, #0
 801d588:	d004      	beq.n	801d594 <tcp_output+0x1d0>
 801d58a:	687b      	ldr	r3, [r7, #4]
 801d58c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d590:	2b0f      	cmp	r3, #15
 801d592:	d901      	bls.n	801d598 <tcp_output+0x1d4>
 801d594:	2301      	movs	r3, #1
 801d596:	e000      	b.n	801d59a <tcp_output+0x1d6>
 801d598:	2300      	movs	r3, #0
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	d106      	bne.n	801d5ac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	8b5b      	ldrh	r3, [r3, #26]
 801d5a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	f000 80e4 	beq.w	801d774 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801d5ac:	687b      	ldr	r3, [r7, #4]
 801d5ae:	7d1b      	ldrb	r3, [r3, #20]
 801d5b0:	2b02      	cmp	r3, #2
 801d5b2:	d00d      	beq.n	801d5d0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5b6:	68db      	ldr	r3, [r3, #12]
 801d5b8:	899b      	ldrh	r3, [r3, #12]
 801d5ba:	b29c      	uxth	r4, r3
 801d5bc:	2010      	movs	r0, #16
 801d5be:	f7f6 f99d 	bl	80138fc <lwip_htons>
 801d5c2:	4603      	mov	r3, r0
 801d5c4:	461a      	mov	r2, r3
 801d5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5c8:	68db      	ldr	r3, [r3, #12]
 801d5ca:	4322      	orrs	r2, r4
 801d5cc:	b292      	uxth	r2, r2
 801d5ce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801d5d0:	697a      	ldr	r2, [r7, #20]
 801d5d2:	6879      	ldr	r1, [r7, #4]
 801d5d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d5d6:	f000 f909 	bl	801d7ec <tcp_output_segment>
 801d5da:	4603      	mov	r3, r0
 801d5dc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801d5de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d016      	beq.n	801d614 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	8b5b      	ldrh	r3, [r3, #26]
 801d5ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d5ee:	b29a      	uxth	r2, r3
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	835a      	strh	r2, [r3, #26]
      return err;
 801d5f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5f8:	e0d3      	b.n	801d7a2 <tcp_output+0x3de>
 801d5fa:	bf00      	nop
 801d5fc:	0802344c 	.word	0x0802344c
 801d600:	080239d4 	.word	0x080239d4
 801d604:	080234e4 	.word	0x080234e4
 801d608:	080239ec 	.word	0x080239ec
 801d60c:	2400f96c 	.word	0x2400f96c
 801d610:	08023a14 	.word	0x08023a14
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d616:	681a      	ldr	r2, [r3, #0]
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	7d1b      	ldrb	r3, [r3, #20]
 801d620:	2b02      	cmp	r3, #2
 801d622:	d006      	beq.n	801d632 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	8b5b      	ldrh	r3, [r3, #26]
 801d628:	f023 0303 	bic.w	r3, r3, #3
 801d62c:	b29a      	uxth	r2, r3
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d634:	68db      	ldr	r3, [r3, #12]
 801d636:	685b      	ldr	r3, [r3, #4]
 801d638:	4618      	mov	r0, r3
 801d63a:	f7f6 f974 	bl	8013926 <lwip_htonl>
 801d63e:	4604      	mov	r4, r0
 801d640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d642:	891b      	ldrh	r3, [r3, #8]
 801d644:	461d      	mov	r5, r3
 801d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d648:	68db      	ldr	r3, [r3, #12]
 801d64a:	899b      	ldrh	r3, [r3, #12]
 801d64c:	b29b      	uxth	r3, r3
 801d64e:	4618      	mov	r0, r3
 801d650:	f7f6 f954 	bl	80138fc <lwip_htons>
 801d654:	4603      	mov	r3, r0
 801d656:	b2db      	uxtb	r3, r3
 801d658:	f003 0303 	and.w	r3, r3, #3
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d001      	beq.n	801d664 <tcp_output+0x2a0>
 801d660:	2301      	movs	r3, #1
 801d662:	e000      	b.n	801d666 <tcp_output+0x2a2>
 801d664:	2300      	movs	r3, #0
 801d666:	442b      	add	r3, r5
 801d668:	4423      	add	r3, r4
 801d66a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d670:	68bb      	ldr	r3, [r7, #8]
 801d672:	1ad3      	subs	r3, r2, r3
 801d674:	2b00      	cmp	r3, #0
 801d676:	da02      	bge.n	801d67e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	68ba      	ldr	r2, [r7, #8]
 801d67c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801d67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d680:	891b      	ldrh	r3, [r3, #8]
 801d682:	461c      	mov	r4, r3
 801d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d686:	68db      	ldr	r3, [r3, #12]
 801d688:	899b      	ldrh	r3, [r3, #12]
 801d68a:	b29b      	uxth	r3, r3
 801d68c:	4618      	mov	r0, r3
 801d68e:	f7f6 f935 	bl	80138fc <lwip_htons>
 801d692:	4603      	mov	r3, r0
 801d694:	b2db      	uxtb	r3, r3
 801d696:	f003 0303 	and.w	r3, r3, #3
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d001      	beq.n	801d6a2 <tcp_output+0x2de>
 801d69e:	2301      	movs	r3, #1
 801d6a0:	e000      	b.n	801d6a4 <tcp_output+0x2e0>
 801d6a2:	2300      	movs	r3, #0
 801d6a4:	4423      	add	r3, r4
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	d049      	beq.n	801d73e <tcp_output+0x37a>
      seg->next = NULL;
 801d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6ac:	2200      	movs	r2, #0
 801d6ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	d105      	bne.n	801d6c4 <tcp_output+0x300>
        pcb->unacked = seg;
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d6bc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801d6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6c0:	623b      	str	r3, [r7, #32]
 801d6c2:	e03f      	b.n	801d744 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6c6:	68db      	ldr	r3, [r3, #12]
 801d6c8:	685b      	ldr	r3, [r3, #4]
 801d6ca:	4618      	mov	r0, r3
 801d6cc:	f7f6 f92b 	bl	8013926 <lwip_htonl>
 801d6d0:	4604      	mov	r4, r0
 801d6d2:	6a3b      	ldr	r3, [r7, #32]
 801d6d4:	68db      	ldr	r3, [r3, #12]
 801d6d6:	685b      	ldr	r3, [r3, #4]
 801d6d8:	4618      	mov	r0, r3
 801d6da:	f7f6 f924 	bl	8013926 <lwip_htonl>
 801d6de:	4603      	mov	r3, r0
 801d6e0:	1ae3      	subs	r3, r4, r3
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	da24      	bge.n	801d730 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	3370      	adds	r3, #112	; 0x70
 801d6ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801d6ec:	e002      	b.n	801d6f4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801d6ee:	69fb      	ldr	r3, [r7, #28]
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801d6f4:	69fb      	ldr	r3, [r7, #28]
 801d6f6:	681b      	ldr	r3, [r3, #0]
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d011      	beq.n	801d720 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801d6fc:	69fb      	ldr	r3, [r7, #28]
 801d6fe:	681b      	ldr	r3, [r3, #0]
 801d700:	68db      	ldr	r3, [r3, #12]
 801d702:	685b      	ldr	r3, [r3, #4]
 801d704:	4618      	mov	r0, r3
 801d706:	f7f6 f90e 	bl	8013926 <lwip_htonl>
 801d70a:	4604      	mov	r4, r0
 801d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d70e:	68db      	ldr	r3, [r3, #12]
 801d710:	685b      	ldr	r3, [r3, #4]
 801d712:	4618      	mov	r0, r3
 801d714:	f7f6 f907 	bl	8013926 <lwip_htonl>
 801d718:	4603      	mov	r3, r0
 801d71a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	dbe6      	blt.n	801d6ee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801d720:	69fb      	ldr	r3, [r7, #28]
 801d722:	681a      	ldr	r2, [r3, #0]
 801d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d726:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801d728:	69fb      	ldr	r3, [r7, #28]
 801d72a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d72c:	601a      	str	r2, [r3, #0]
 801d72e:	e009      	b.n	801d744 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801d730:	6a3b      	ldr	r3, [r7, #32]
 801d732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d734:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801d736:	6a3b      	ldr	r3, [r7, #32]
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	623b      	str	r3, [r7, #32]
 801d73c:	e002      	b.n	801d744 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801d73e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d740:	f7fb ff19 	bl	8019576 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d748:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801d74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d012      	beq.n	801d776 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d752:	68db      	ldr	r3, [r3, #12]
 801d754:	685b      	ldr	r3, [r3, #4]
 801d756:	4618      	mov	r0, r3
 801d758:	f7f6 f8e5 	bl	8013926 <lwip_htonl>
 801d75c:	4602      	mov	r2, r0
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d762:	1ad3      	subs	r3, r2, r3
 801d764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d766:	8912      	ldrh	r2, [r2, #8]
 801d768:	4413      	add	r3, r2
  while (seg != NULL &&
 801d76a:	69ba      	ldr	r2, [r7, #24]
 801d76c:	429a      	cmp	r2, r3
 801d76e:	f4bf aed9 	bcs.w	801d524 <tcp_output+0x160>
 801d772:	e000      	b.n	801d776 <tcp_output+0x3b2>
      break;
 801d774:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d108      	bne.n	801d790 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	2200      	movs	r2, #0
 801d782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801d786:	e004      	b.n	801d792 <tcp_output+0x3ce>
    goto output_done;
 801d788:	bf00      	nop
 801d78a:	e002      	b.n	801d792 <tcp_output+0x3ce>
    goto output_done;
 801d78c:	bf00      	nop
 801d78e:	e000      	b.n	801d792 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801d790:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	8b5b      	ldrh	r3, [r3, #26]
 801d796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d79a:	b29a      	uxth	r2, r3
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801d7a0:	2300      	movs	r3, #0
}
 801d7a2:	4618      	mov	r0, r3
 801d7a4:	3728      	adds	r7, #40	; 0x28
 801d7a6:	46bd      	mov	sp, r7
 801d7a8:	bdb0      	pop	{r4, r5, r7, pc}
 801d7aa:	bf00      	nop

0801d7ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801d7ac:	b580      	push	{r7, lr}
 801d7ae:	b082      	sub	sp, #8
 801d7b0:	af00      	add	r7, sp, #0
 801d7b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	d106      	bne.n	801d7c8 <tcp_output_segment_busy+0x1c>
 801d7ba:	4b09      	ldr	r3, [pc, #36]	; (801d7e0 <tcp_output_segment_busy+0x34>)
 801d7bc:	f240 529a 	movw	r2, #1434	; 0x59a
 801d7c0:	4908      	ldr	r1, [pc, #32]	; (801d7e4 <tcp_output_segment_busy+0x38>)
 801d7c2:	4809      	ldr	r0, [pc, #36]	; (801d7e8 <tcp_output_segment_busy+0x3c>)
 801d7c4:	f002 f91a 	bl	801f9fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	685b      	ldr	r3, [r3, #4]
 801d7cc:	7b9b      	ldrb	r3, [r3, #14]
 801d7ce:	2b01      	cmp	r3, #1
 801d7d0:	d001      	beq.n	801d7d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801d7d2:	2301      	movs	r3, #1
 801d7d4:	e000      	b.n	801d7d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801d7d6:	2300      	movs	r3, #0
}
 801d7d8:	4618      	mov	r0, r3
 801d7da:	3708      	adds	r7, #8
 801d7dc:	46bd      	mov	sp, r7
 801d7de:	bd80      	pop	{r7, pc}
 801d7e0:	0802344c 	.word	0x0802344c
 801d7e4:	08023a2c 	.word	0x08023a2c
 801d7e8:	080234e4 	.word	0x080234e4

0801d7ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801d7ec:	b5b0      	push	{r4, r5, r7, lr}
 801d7ee:	b08c      	sub	sp, #48	; 0x30
 801d7f0:	af04      	add	r7, sp, #16
 801d7f2:	60f8      	str	r0, [r7, #12]
 801d7f4:	60b9      	str	r1, [r7, #8]
 801d7f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d106      	bne.n	801d80c <tcp_output_segment+0x20>
 801d7fe:	4b63      	ldr	r3, [pc, #396]	; (801d98c <tcp_output_segment+0x1a0>)
 801d800:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801d804:	4962      	ldr	r1, [pc, #392]	; (801d990 <tcp_output_segment+0x1a4>)
 801d806:	4863      	ldr	r0, [pc, #396]	; (801d994 <tcp_output_segment+0x1a8>)
 801d808:	f002 f8f8 	bl	801f9fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801d80c:	68bb      	ldr	r3, [r7, #8]
 801d80e:	2b00      	cmp	r3, #0
 801d810:	d106      	bne.n	801d820 <tcp_output_segment+0x34>
 801d812:	4b5e      	ldr	r3, [pc, #376]	; (801d98c <tcp_output_segment+0x1a0>)
 801d814:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801d818:	495f      	ldr	r1, [pc, #380]	; (801d998 <tcp_output_segment+0x1ac>)
 801d81a:	485e      	ldr	r0, [pc, #376]	; (801d994 <tcp_output_segment+0x1a8>)
 801d81c:	f002 f8ee 	bl	801f9fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	2b00      	cmp	r3, #0
 801d824:	d106      	bne.n	801d834 <tcp_output_segment+0x48>
 801d826:	4b59      	ldr	r3, [pc, #356]	; (801d98c <tcp_output_segment+0x1a0>)
 801d828:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801d82c:	495b      	ldr	r1, [pc, #364]	; (801d99c <tcp_output_segment+0x1b0>)
 801d82e:	4859      	ldr	r0, [pc, #356]	; (801d994 <tcp_output_segment+0x1a8>)
 801d830:	f002 f8e4 	bl	801f9fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801d834:	68f8      	ldr	r0, [r7, #12]
 801d836:	f7ff ffb9 	bl	801d7ac <tcp_output_segment_busy>
 801d83a:	4603      	mov	r3, r0
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	d001      	beq.n	801d844 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801d840:	2300      	movs	r3, #0
 801d842:	e09f      	b.n	801d984 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801d844:	68bb      	ldr	r3, [r7, #8]
 801d846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d848:	68fb      	ldr	r3, [r7, #12]
 801d84a:	68dc      	ldr	r4, [r3, #12]
 801d84c:	4610      	mov	r0, r2
 801d84e:	f7f6 f86a 	bl	8013926 <lwip_htonl>
 801d852:	4603      	mov	r3, r0
 801d854:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801d856:	68bb      	ldr	r3, [r7, #8]
 801d858:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	68dc      	ldr	r4, [r3, #12]
 801d85e:	4610      	mov	r0, r2
 801d860:	f7f6 f84c 	bl	80138fc <lwip_htons>
 801d864:	4603      	mov	r3, r0
 801d866:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d868:	68bb      	ldr	r3, [r7, #8]
 801d86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d86c:	68ba      	ldr	r2, [r7, #8]
 801d86e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801d870:	441a      	add	r2, r3
 801d872:	68bb      	ldr	r3, [r7, #8]
 801d874:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801d876:	68fb      	ldr	r3, [r7, #12]
 801d878:	68db      	ldr	r3, [r3, #12]
 801d87a:	3314      	adds	r3, #20
 801d87c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	7a9b      	ldrb	r3, [r3, #10]
 801d882:	f003 0301 	and.w	r3, r3, #1
 801d886:	2b00      	cmp	r3, #0
 801d888:	d015      	beq.n	801d8b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801d88a:	68bb      	ldr	r3, [r7, #8]
 801d88c:	3304      	adds	r3, #4
 801d88e:	461a      	mov	r2, r3
 801d890:	6879      	ldr	r1, [r7, #4]
 801d892:	f240 50b4 	movw	r0, #1460	; 0x5b4
 801d896:	f7fc fa33 	bl	8019d00 <tcp_eff_send_mss_netif>
 801d89a:	4603      	mov	r3, r0
 801d89c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801d89e:	8b7b      	ldrh	r3, [r7, #26]
 801d8a0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801d8a4:	4618      	mov	r0, r3
 801d8a6:	f7f6 f83e 	bl	8013926 <lwip_htonl>
 801d8aa:	4602      	mov	r2, r0
 801d8ac:	69fb      	ldr	r3, [r7, #28]
 801d8ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 801d8b0:	69fb      	ldr	r3, [r7, #28]
 801d8b2:	3304      	adds	r3, #4
 801d8b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801d8b6:	68bb      	ldr	r3, [r7, #8]
 801d8b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	da02      	bge.n	801d8c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801d8c0:	68bb      	ldr	r3, [r7, #8]
 801d8c2:	2200      	movs	r2, #0
 801d8c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801d8c6:	68bb      	ldr	r3, [r7, #8]
 801d8c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d10c      	bne.n	801d8e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801d8ce:	4b34      	ldr	r3, [pc, #208]	; (801d9a0 <tcp_output_segment+0x1b4>)
 801d8d0:	681a      	ldr	r2, [r3, #0]
 801d8d2:	68bb      	ldr	r3, [r7, #8]
 801d8d4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801d8d6:	68fb      	ldr	r3, [r7, #12]
 801d8d8:	68db      	ldr	r3, [r3, #12]
 801d8da:	685b      	ldr	r3, [r3, #4]
 801d8dc:	4618      	mov	r0, r3
 801d8de:	f7f6 f822 	bl	8013926 <lwip_htonl>
 801d8e2:	4602      	mov	r2, r0
 801d8e4:	68bb      	ldr	r3, [r7, #8]
 801d8e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801d8e8:	68fb      	ldr	r3, [r7, #12]
 801d8ea:	68da      	ldr	r2, [r3, #12]
 801d8ec:	68fb      	ldr	r3, [r7, #12]
 801d8ee:	685b      	ldr	r3, [r3, #4]
 801d8f0:	685b      	ldr	r3, [r3, #4]
 801d8f2:	1ad3      	subs	r3, r2, r3
 801d8f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	685b      	ldr	r3, [r3, #4]
 801d8fa:	8959      	ldrh	r1, [r3, #10]
 801d8fc:	68fb      	ldr	r3, [r7, #12]
 801d8fe:	685b      	ldr	r3, [r3, #4]
 801d900:	8b3a      	ldrh	r2, [r7, #24]
 801d902:	1a8a      	subs	r2, r1, r2
 801d904:	b292      	uxth	r2, r2
 801d906:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	685b      	ldr	r3, [r3, #4]
 801d90c:	8919      	ldrh	r1, [r3, #8]
 801d90e:	68fb      	ldr	r3, [r7, #12]
 801d910:	685b      	ldr	r3, [r3, #4]
 801d912:	8b3a      	ldrh	r2, [r7, #24]
 801d914:	1a8a      	subs	r2, r1, r2
 801d916:	b292      	uxth	r2, r2
 801d918:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	685b      	ldr	r3, [r3, #4]
 801d91e:	68fa      	ldr	r2, [r7, #12]
 801d920:	68d2      	ldr	r2, [r2, #12]
 801d922:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	68db      	ldr	r3, [r3, #12]
 801d928:	2200      	movs	r2, #0
 801d92a:	741a      	strb	r2, [r3, #16]
 801d92c:	2200      	movs	r2, #0
 801d92e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801d930:	68fb      	ldr	r3, [r7, #12]
 801d932:	68db      	ldr	r3, [r3, #12]
 801d934:	f103 0214 	add.w	r2, r3, #20
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	7a9b      	ldrb	r3, [r3, #10]
 801d93c:	009b      	lsls	r3, r3, #2
 801d93e:	f003 0304 	and.w	r3, r3, #4
 801d942:	4413      	add	r3, r2
 801d944:	69fa      	ldr	r2, [r7, #28]
 801d946:	429a      	cmp	r2, r3
 801d948:	d006      	beq.n	801d958 <tcp_output_segment+0x16c>
 801d94a:	4b10      	ldr	r3, [pc, #64]	; (801d98c <tcp_output_segment+0x1a0>)
 801d94c:	f240 621c 	movw	r2, #1564	; 0x61c
 801d950:	4914      	ldr	r1, [pc, #80]	; (801d9a4 <tcp_output_segment+0x1b8>)
 801d952:	4810      	ldr	r0, [pc, #64]	; (801d994 <tcp_output_segment+0x1a8>)
 801d954:	f002 f852 	bl	801f9fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	6858      	ldr	r0, [r3, #4]
 801d95c:	68b9      	ldr	r1, [r7, #8]
 801d95e:	68bb      	ldr	r3, [r7, #8]
 801d960:	1d1c      	adds	r4, r3, #4
 801d962:	68bb      	ldr	r3, [r7, #8]
 801d964:	7add      	ldrb	r5, [r3, #11]
 801d966:	68bb      	ldr	r3, [r7, #8]
 801d968:	7a9b      	ldrb	r3, [r3, #10]
 801d96a:	687a      	ldr	r2, [r7, #4]
 801d96c:	9202      	str	r2, [sp, #8]
 801d96e:	2206      	movs	r2, #6
 801d970:	9201      	str	r2, [sp, #4]
 801d972:	9300      	str	r3, [sp, #0]
 801d974:	462b      	mov	r3, r5
 801d976:	4622      	mov	r2, r4
 801d978:	f7f7 fc56 	bl	8015228 <ip4_output_if>
 801d97c:	4603      	mov	r3, r0
 801d97e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801d980:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d984:	4618      	mov	r0, r3
 801d986:	3720      	adds	r7, #32
 801d988:	46bd      	mov	sp, r7
 801d98a:	bdb0      	pop	{r4, r5, r7, pc}
 801d98c:	0802344c 	.word	0x0802344c
 801d990:	08023a54 	.word	0x08023a54
 801d994:	080234e4 	.word	0x080234e4
 801d998:	08023a74 	.word	0x08023a74
 801d99c:	08023a94 	.word	0x08023a94
 801d9a0:	2400f920 	.word	0x2400f920
 801d9a4:	08023ab8 	.word	0x08023ab8

0801d9a8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801d9a8:	b5b0      	push	{r4, r5, r7, lr}
 801d9aa:	b084      	sub	sp, #16
 801d9ac:	af00      	add	r7, sp, #0
 801d9ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d106      	bne.n	801d9c4 <tcp_rexmit_rto_prepare+0x1c>
 801d9b6:	4b31      	ldr	r3, [pc, #196]	; (801da7c <tcp_rexmit_rto_prepare+0xd4>)
 801d9b8:	f240 6263 	movw	r2, #1635	; 0x663
 801d9bc:	4930      	ldr	r1, [pc, #192]	; (801da80 <tcp_rexmit_rto_prepare+0xd8>)
 801d9be:	4831      	ldr	r0, [pc, #196]	; (801da84 <tcp_rexmit_rto_prepare+0xdc>)
 801d9c0:	f002 f81c 	bl	801f9fc <iprintf>

  if (pcb->unacked == NULL) {
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	d102      	bne.n	801d9d2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801d9cc:	f06f 0305 	mvn.w	r3, #5
 801d9d0:	e050      	b.n	801da74 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d9d6:	60fb      	str	r3, [r7, #12]
 801d9d8:	e00b      	b.n	801d9f2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801d9da:	68f8      	ldr	r0, [r7, #12]
 801d9dc:	f7ff fee6 	bl	801d7ac <tcp_output_segment_busy>
 801d9e0:	4603      	mov	r3, r0
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	d002      	beq.n	801d9ec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801d9e6:	f06f 0305 	mvn.w	r3, #5
 801d9ea:	e043      	b.n	801da74 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	681b      	ldr	r3, [r3, #0]
 801d9f0:	60fb      	str	r3, [r7, #12]
 801d9f2:	68fb      	ldr	r3, [r7, #12]
 801d9f4:	681b      	ldr	r3, [r3, #0]
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d1ef      	bne.n	801d9da <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801d9fa:	68f8      	ldr	r0, [r7, #12]
 801d9fc:	f7ff fed6 	bl	801d7ac <tcp_output_segment_busy>
 801da00:	4603      	mov	r3, r0
 801da02:	2b00      	cmp	r3, #0
 801da04:	d002      	beq.n	801da0c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801da06:	f06f 0305 	mvn.w	r3, #5
 801da0a:	e033      	b.n	801da74 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801da10:	68fb      	ldr	r3, [r7, #12]
 801da12:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	2200      	movs	r2, #0
 801da20:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	8b5b      	ldrh	r3, [r3, #26]
 801da26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801da2a:	b29a      	uxth	r2, r3
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801da30:	68fb      	ldr	r3, [r7, #12]
 801da32:	68db      	ldr	r3, [r3, #12]
 801da34:	685b      	ldr	r3, [r3, #4]
 801da36:	4618      	mov	r0, r3
 801da38:	f7f5 ff75 	bl	8013926 <lwip_htonl>
 801da3c:	4604      	mov	r4, r0
 801da3e:	68fb      	ldr	r3, [r7, #12]
 801da40:	891b      	ldrh	r3, [r3, #8]
 801da42:	461d      	mov	r5, r3
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	68db      	ldr	r3, [r3, #12]
 801da48:	899b      	ldrh	r3, [r3, #12]
 801da4a:	b29b      	uxth	r3, r3
 801da4c:	4618      	mov	r0, r3
 801da4e:	f7f5 ff55 	bl	80138fc <lwip_htons>
 801da52:	4603      	mov	r3, r0
 801da54:	b2db      	uxtb	r3, r3
 801da56:	f003 0303 	and.w	r3, r3, #3
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	d001      	beq.n	801da62 <tcp_rexmit_rto_prepare+0xba>
 801da5e:	2301      	movs	r3, #1
 801da60:	e000      	b.n	801da64 <tcp_rexmit_rto_prepare+0xbc>
 801da62:	2300      	movs	r3, #0
 801da64:	442b      	add	r3, r5
 801da66:	18e2      	adds	r2, r4, r3
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	2200      	movs	r2, #0
 801da70:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801da72:	2300      	movs	r3, #0
}
 801da74:	4618      	mov	r0, r3
 801da76:	3710      	adds	r7, #16
 801da78:	46bd      	mov	sp, r7
 801da7a:	bdb0      	pop	{r4, r5, r7, pc}
 801da7c:	0802344c 	.word	0x0802344c
 801da80:	08023acc 	.word	0x08023acc
 801da84:	080234e4 	.word	0x080234e4

0801da88 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801da88:	b580      	push	{r7, lr}
 801da8a:	b082      	sub	sp, #8
 801da8c:	af00      	add	r7, sp, #0
 801da8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	2b00      	cmp	r3, #0
 801da94:	d106      	bne.n	801daa4 <tcp_rexmit_rto_commit+0x1c>
 801da96:	4b0d      	ldr	r3, [pc, #52]	; (801dacc <tcp_rexmit_rto_commit+0x44>)
 801da98:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801da9c:	490c      	ldr	r1, [pc, #48]	; (801dad0 <tcp_rexmit_rto_commit+0x48>)
 801da9e:	480d      	ldr	r0, [pc, #52]	; (801dad4 <tcp_rexmit_rto_commit+0x4c>)
 801daa0:	f001 ffac 	bl	801f9fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801daaa:	2bff      	cmp	r3, #255	; 0xff
 801daac:	d007      	beq.n	801dabe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dab4:	3301      	adds	r3, #1
 801dab6:	b2da      	uxtb	r2, r3
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801dabe:	6878      	ldr	r0, [r7, #4]
 801dac0:	f7ff fc80 	bl	801d3c4 <tcp_output>
}
 801dac4:	bf00      	nop
 801dac6:	3708      	adds	r7, #8
 801dac8:	46bd      	mov	sp, r7
 801daca:	bd80      	pop	{r7, pc}
 801dacc:	0802344c 	.word	0x0802344c
 801dad0:	08023af0 	.word	0x08023af0
 801dad4:	080234e4 	.word	0x080234e4

0801dad8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801dad8:	b580      	push	{r7, lr}
 801dada:	b082      	sub	sp, #8
 801dadc:	af00      	add	r7, sp, #0
 801dade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d106      	bne.n	801daf4 <tcp_rexmit_rto+0x1c>
 801dae6:	4b0a      	ldr	r3, [pc, #40]	; (801db10 <tcp_rexmit_rto+0x38>)
 801dae8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801daec:	4909      	ldr	r1, [pc, #36]	; (801db14 <tcp_rexmit_rto+0x3c>)
 801daee:	480a      	ldr	r0, [pc, #40]	; (801db18 <tcp_rexmit_rto+0x40>)
 801daf0:	f001 ff84 	bl	801f9fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801daf4:	6878      	ldr	r0, [r7, #4]
 801daf6:	f7ff ff57 	bl	801d9a8 <tcp_rexmit_rto_prepare>
 801dafa:	4603      	mov	r3, r0
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	d102      	bne.n	801db06 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801db00:	6878      	ldr	r0, [r7, #4]
 801db02:	f7ff ffc1 	bl	801da88 <tcp_rexmit_rto_commit>
  }
}
 801db06:	bf00      	nop
 801db08:	3708      	adds	r7, #8
 801db0a:	46bd      	mov	sp, r7
 801db0c:	bd80      	pop	{r7, pc}
 801db0e:	bf00      	nop
 801db10:	0802344c 	.word	0x0802344c
 801db14:	08023b14 	.word	0x08023b14
 801db18:	080234e4 	.word	0x080234e4

0801db1c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801db1c:	b590      	push	{r4, r7, lr}
 801db1e:	b085      	sub	sp, #20
 801db20:	af00      	add	r7, sp, #0
 801db22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	2b00      	cmp	r3, #0
 801db28:	d106      	bne.n	801db38 <tcp_rexmit+0x1c>
 801db2a:	4b2f      	ldr	r3, [pc, #188]	; (801dbe8 <tcp_rexmit+0xcc>)
 801db2c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801db30:	492e      	ldr	r1, [pc, #184]	; (801dbec <tcp_rexmit+0xd0>)
 801db32:	482f      	ldr	r0, [pc, #188]	; (801dbf0 <tcp_rexmit+0xd4>)
 801db34:	f001 ff62 	bl	801f9fc <iprintf>

  if (pcb->unacked == NULL) {
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	d102      	bne.n	801db46 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801db40:	f06f 0305 	mvn.w	r3, #5
 801db44:	e04c      	b.n	801dbe0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db4a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801db4c:	68b8      	ldr	r0, [r7, #8]
 801db4e:	f7ff fe2d 	bl	801d7ac <tcp_output_segment_busy>
 801db52:	4603      	mov	r3, r0
 801db54:	2b00      	cmp	r3, #0
 801db56:	d002      	beq.n	801db5e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801db58:	f06f 0305 	mvn.w	r3, #5
 801db5c:	e040      	b.n	801dbe0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801db5e:	68bb      	ldr	r3, [r7, #8]
 801db60:	681a      	ldr	r2, [r3, #0]
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	336c      	adds	r3, #108	; 0x6c
 801db6a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801db6c:	e002      	b.n	801db74 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801db6e:	68fb      	ldr	r3, [r7, #12]
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801db74:	68fb      	ldr	r3, [r7, #12]
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	2b00      	cmp	r3, #0
 801db7a:	d011      	beq.n	801dba0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801db7c:	68fb      	ldr	r3, [r7, #12]
 801db7e:	681b      	ldr	r3, [r3, #0]
 801db80:	68db      	ldr	r3, [r3, #12]
 801db82:	685b      	ldr	r3, [r3, #4]
 801db84:	4618      	mov	r0, r3
 801db86:	f7f5 fece 	bl	8013926 <lwip_htonl>
 801db8a:	4604      	mov	r4, r0
 801db8c:	68bb      	ldr	r3, [r7, #8]
 801db8e:	68db      	ldr	r3, [r3, #12]
 801db90:	685b      	ldr	r3, [r3, #4]
 801db92:	4618      	mov	r0, r3
 801db94:	f7f5 fec7 	bl	8013926 <lwip_htonl>
 801db98:	4603      	mov	r3, r0
 801db9a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	dbe6      	blt.n	801db6e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	681a      	ldr	r2, [r3, #0]
 801dba4:	68bb      	ldr	r3, [r7, #8]
 801dba6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801dba8:	68fb      	ldr	r3, [r7, #12]
 801dbaa:	68ba      	ldr	r2, [r7, #8]
 801dbac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801dbae:	68bb      	ldr	r3, [r7, #8]
 801dbb0:	681b      	ldr	r3, [r3, #0]
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d103      	bne.n	801dbbe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801dbb6:	687b      	ldr	r3, [r7, #4]
 801dbb8:	2200      	movs	r2, #0
 801dbba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801dbbe:	687b      	ldr	r3, [r7, #4]
 801dbc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dbc4:	2bff      	cmp	r3, #255	; 0xff
 801dbc6:	d007      	beq.n	801dbd8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dbce:	3301      	adds	r3, #1
 801dbd0:	b2da      	uxtb	r2, r3
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801dbd8:	687b      	ldr	r3, [r7, #4]
 801dbda:	2200      	movs	r2, #0
 801dbdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801dbde:	2300      	movs	r3, #0
}
 801dbe0:	4618      	mov	r0, r3
 801dbe2:	3714      	adds	r7, #20
 801dbe4:	46bd      	mov	sp, r7
 801dbe6:	bd90      	pop	{r4, r7, pc}
 801dbe8:	0802344c 	.word	0x0802344c
 801dbec:	08023b30 	.word	0x08023b30
 801dbf0:	080234e4 	.word	0x080234e4

0801dbf4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801dbf4:	b580      	push	{r7, lr}
 801dbf6:	b082      	sub	sp, #8
 801dbf8:	af00      	add	r7, sp, #0
 801dbfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d106      	bne.n	801dc10 <tcp_rexmit_fast+0x1c>
 801dc02:	4b2a      	ldr	r3, [pc, #168]	; (801dcac <tcp_rexmit_fast+0xb8>)
 801dc04:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801dc08:	4929      	ldr	r1, [pc, #164]	; (801dcb0 <tcp_rexmit_fast+0xbc>)
 801dc0a:	482a      	ldr	r0, [pc, #168]	; (801dcb4 <tcp_rexmit_fast+0xc0>)
 801dc0c:	f001 fef6 	bl	801f9fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d045      	beq.n	801dca4 <tcp_rexmit_fast+0xb0>
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	8b5b      	ldrh	r3, [r3, #26]
 801dc1c:	f003 0304 	and.w	r3, r3, #4
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d13f      	bne.n	801dca4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801dc24:	6878      	ldr	r0, [r7, #4]
 801dc26:	f7ff ff79 	bl	801db1c <tcp_rexmit>
 801dc2a:	4603      	mov	r3, r0
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d139      	bne.n	801dca4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dc3c:	4293      	cmp	r3, r2
 801dc3e:	bf28      	it	cs
 801dc40:	4613      	movcs	r3, r2
 801dc42:	b29b      	uxth	r3, r3
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	da00      	bge.n	801dc4a <tcp_rexmit_fast+0x56>
 801dc48:	3301      	adds	r3, #1
 801dc4a:	105b      	asrs	r3, r3, #1
 801dc4c:	b29a      	uxth	r2, r3
 801dc4e:	687b      	ldr	r3, [r7, #4]
 801dc50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801dc5a:	461a      	mov	r2, r3
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dc60:	005b      	lsls	r3, r3, #1
 801dc62:	429a      	cmp	r2, r3
 801dc64:	d206      	bcs.n	801dc74 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dc6a:	005b      	lsls	r3, r3, #1
 801dc6c:	b29a      	uxth	r2, r3
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dc7e:	4619      	mov	r1, r3
 801dc80:	0049      	lsls	r1, r1, #1
 801dc82:	440b      	add	r3, r1
 801dc84:	b29b      	uxth	r3, r3
 801dc86:	4413      	add	r3, r2
 801dc88:	b29a      	uxth	r2, r3
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	8b5b      	ldrh	r3, [r3, #26]
 801dc94:	f043 0304 	orr.w	r3, r3, #4
 801dc98:	b29a      	uxth	r2, r3
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	2200      	movs	r2, #0
 801dca2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801dca4:	bf00      	nop
 801dca6:	3708      	adds	r7, #8
 801dca8:	46bd      	mov	sp, r7
 801dcaa:	bd80      	pop	{r7, pc}
 801dcac:	0802344c 	.word	0x0802344c
 801dcb0:	08023b48 	.word	0x08023b48
 801dcb4:	080234e4 	.word	0x080234e4

0801dcb8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801dcb8:	b580      	push	{r7, lr}
 801dcba:	b086      	sub	sp, #24
 801dcbc:	af00      	add	r7, sp, #0
 801dcbe:	60f8      	str	r0, [r7, #12]
 801dcc0:	607b      	str	r3, [r7, #4]
 801dcc2:	460b      	mov	r3, r1
 801dcc4:	817b      	strh	r3, [r7, #10]
 801dcc6:	4613      	mov	r3, r2
 801dcc8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801dcca:	897a      	ldrh	r2, [r7, #10]
 801dccc:	893b      	ldrh	r3, [r7, #8]
 801dcce:	4413      	add	r3, r2
 801dcd0:	b29b      	uxth	r3, r3
 801dcd2:	3314      	adds	r3, #20
 801dcd4:	b29b      	uxth	r3, r3
 801dcd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dcda:	4619      	mov	r1, r3
 801dcdc:	2022      	movs	r0, #34	; 0x22
 801dcde:	f7f9 fafd 	bl	80172dc <pbuf_alloc>
 801dce2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801dce4:	697b      	ldr	r3, [r7, #20]
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	d04d      	beq.n	801dd86 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801dcea:	897b      	ldrh	r3, [r7, #10]
 801dcec:	3313      	adds	r3, #19
 801dcee:	697a      	ldr	r2, [r7, #20]
 801dcf0:	8952      	ldrh	r2, [r2, #10]
 801dcf2:	4293      	cmp	r3, r2
 801dcf4:	db06      	blt.n	801dd04 <tcp_output_alloc_header_common+0x4c>
 801dcf6:	4b26      	ldr	r3, [pc, #152]	; (801dd90 <tcp_output_alloc_header_common+0xd8>)
 801dcf8:	f240 7223 	movw	r2, #1827	; 0x723
 801dcfc:	4925      	ldr	r1, [pc, #148]	; (801dd94 <tcp_output_alloc_header_common+0xdc>)
 801dcfe:	4826      	ldr	r0, [pc, #152]	; (801dd98 <tcp_output_alloc_header_common+0xe0>)
 801dd00:	f001 fe7c 	bl	801f9fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801dd04:	697b      	ldr	r3, [r7, #20]
 801dd06:	685b      	ldr	r3, [r3, #4]
 801dd08:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801dd0a:	8c3b      	ldrh	r3, [r7, #32]
 801dd0c:	4618      	mov	r0, r3
 801dd0e:	f7f5 fdf5 	bl	80138fc <lwip_htons>
 801dd12:	4603      	mov	r3, r0
 801dd14:	461a      	mov	r2, r3
 801dd16:	693b      	ldr	r3, [r7, #16]
 801dd18:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801dd1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	f7f5 fded 	bl	80138fc <lwip_htons>
 801dd22:	4603      	mov	r3, r0
 801dd24:	461a      	mov	r2, r3
 801dd26:	693b      	ldr	r3, [r7, #16]
 801dd28:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801dd2a:	693b      	ldr	r3, [r7, #16]
 801dd2c:	687a      	ldr	r2, [r7, #4]
 801dd2e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801dd30:	68f8      	ldr	r0, [r7, #12]
 801dd32:	f7f5 fdf8 	bl	8013926 <lwip_htonl>
 801dd36:	4602      	mov	r2, r0
 801dd38:	693b      	ldr	r3, [r7, #16]
 801dd3a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801dd3c:	897b      	ldrh	r3, [r7, #10]
 801dd3e:	089b      	lsrs	r3, r3, #2
 801dd40:	b29b      	uxth	r3, r3
 801dd42:	3305      	adds	r3, #5
 801dd44:	b29b      	uxth	r3, r3
 801dd46:	031b      	lsls	r3, r3, #12
 801dd48:	b29a      	uxth	r2, r3
 801dd4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801dd4e:	b29b      	uxth	r3, r3
 801dd50:	4313      	orrs	r3, r2
 801dd52:	b29b      	uxth	r3, r3
 801dd54:	4618      	mov	r0, r3
 801dd56:	f7f5 fdd1 	bl	80138fc <lwip_htons>
 801dd5a:	4603      	mov	r3, r0
 801dd5c:	461a      	mov	r2, r3
 801dd5e:	693b      	ldr	r3, [r7, #16]
 801dd60:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801dd62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801dd64:	4618      	mov	r0, r3
 801dd66:	f7f5 fdc9 	bl	80138fc <lwip_htons>
 801dd6a:	4603      	mov	r3, r0
 801dd6c:	461a      	mov	r2, r3
 801dd6e:	693b      	ldr	r3, [r7, #16]
 801dd70:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801dd72:	693b      	ldr	r3, [r7, #16]
 801dd74:	2200      	movs	r2, #0
 801dd76:	741a      	strb	r2, [r3, #16]
 801dd78:	2200      	movs	r2, #0
 801dd7a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801dd7c:	693b      	ldr	r3, [r7, #16]
 801dd7e:	2200      	movs	r2, #0
 801dd80:	749a      	strb	r2, [r3, #18]
 801dd82:	2200      	movs	r2, #0
 801dd84:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801dd86:	697b      	ldr	r3, [r7, #20]
}
 801dd88:	4618      	mov	r0, r3
 801dd8a:	3718      	adds	r7, #24
 801dd8c:	46bd      	mov	sp, r7
 801dd8e:	bd80      	pop	{r7, pc}
 801dd90:	0802344c 	.word	0x0802344c
 801dd94:	08023b68 	.word	0x08023b68
 801dd98:	080234e4 	.word	0x080234e4

0801dd9c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801dd9c:	b5b0      	push	{r4, r5, r7, lr}
 801dd9e:	b08a      	sub	sp, #40	; 0x28
 801dda0:	af04      	add	r7, sp, #16
 801dda2:	60f8      	str	r0, [r7, #12]
 801dda4:	607b      	str	r3, [r7, #4]
 801dda6:	460b      	mov	r3, r1
 801dda8:	817b      	strh	r3, [r7, #10]
 801ddaa:	4613      	mov	r3, r2
 801ddac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ddae:	68fb      	ldr	r3, [r7, #12]
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d106      	bne.n	801ddc2 <tcp_output_alloc_header+0x26>
 801ddb4:	4b15      	ldr	r3, [pc, #84]	; (801de0c <tcp_output_alloc_header+0x70>)
 801ddb6:	f240 7242 	movw	r2, #1858	; 0x742
 801ddba:	4915      	ldr	r1, [pc, #84]	; (801de10 <tcp_output_alloc_header+0x74>)
 801ddbc:	4815      	ldr	r0, [pc, #84]	; (801de14 <tcp_output_alloc_header+0x78>)
 801ddbe:	f001 fe1d 	bl	801f9fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801ddc6:	68fb      	ldr	r3, [r7, #12]
 801ddc8:	8adb      	ldrh	r3, [r3, #22]
 801ddca:	68fa      	ldr	r2, [r7, #12]
 801ddcc:	8b12      	ldrh	r2, [r2, #24]
 801ddce:	68f9      	ldr	r1, [r7, #12]
 801ddd0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801ddd2:	893d      	ldrh	r5, [r7, #8]
 801ddd4:	897c      	ldrh	r4, [r7, #10]
 801ddd6:	9103      	str	r1, [sp, #12]
 801ddd8:	2110      	movs	r1, #16
 801ddda:	9102      	str	r1, [sp, #8]
 801dddc:	9201      	str	r2, [sp, #4]
 801ddde:	9300      	str	r3, [sp, #0]
 801dde0:	687b      	ldr	r3, [r7, #4]
 801dde2:	462a      	mov	r2, r5
 801dde4:	4621      	mov	r1, r4
 801dde6:	f7ff ff67 	bl	801dcb8 <tcp_output_alloc_header_common>
 801ddea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ddec:	697b      	ldr	r3, [r7, #20]
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	d006      	beq.n	801de00 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ddf2:	68fb      	ldr	r3, [r7, #12]
 801ddf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddf6:	68fa      	ldr	r2, [r7, #12]
 801ddf8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ddfa:	441a      	add	r2, r3
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801de00:	697b      	ldr	r3, [r7, #20]
}
 801de02:	4618      	mov	r0, r3
 801de04:	3718      	adds	r7, #24
 801de06:	46bd      	mov	sp, r7
 801de08:	bdb0      	pop	{r4, r5, r7, pc}
 801de0a:	bf00      	nop
 801de0c:	0802344c 	.word	0x0802344c
 801de10:	08023b98 	.word	0x08023b98
 801de14:	080234e4 	.word	0x080234e4

0801de18 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801de18:	b580      	push	{r7, lr}
 801de1a:	b088      	sub	sp, #32
 801de1c:	af00      	add	r7, sp, #0
 801de1e:	60f8      	str	r0, [r7, #12]
 801de20:	60b9      	str	r1, [r7, #8]
 801de22:	4611      	mov	r1, r2
 801de24:	461a      	mov	r2, r3
 801de26:	460b      	mov	r3, r1
 801de28:	71fb      	strb	r3, [r7, #7]
 801de2a:	4613      	mov	r3, r2
 801de2c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801de2e:	2300      	movs	r3, #0
 801de30:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801de32:	68bb      	ldr	r3, [r7, #8]
 801de34:	2b00      	cmp	r3, #0
 801de36:	d106      	bne.n	801de46 <tcp_output_fill_options+0x2e>
 801de38:	4b13      	ldr	r3, [pc, #76]	; (801de88 <tcp_output_fill_options+0x70>)
 801de3a:	f240 7256 	movw	r2, #1878	; 0x756
 801de3e:	4913      	ldr	r1, [pc, #76]	; (801de8c <tcp_output_fill_options+0x74>)
 801de40:	4813      	ldr	r0, [pc, #76]	; (801de90 <tcp_output_fill_options+0x78>)
 801de42:	f001 fddb 	bl	801f9fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801de46:	68bb      	ldr	r3, [r7, #8]
 801de48:	685b      	ldr	r3, [r3, #4]
 801de4a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801de4c:	69bb      	ldr	r3, [r7, #24]
 801de4e:	3314      	adds	r3, #20
 801de50:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801de52:	69bb      	ldr	r3, [r7, #24]
 801de54:	f103 0214 	add.w	r2, r3, #20
 801de58:	8bfb      	ldrh	r3, [r7, #30]
 801de5a:	009b      	lsls	r3, r3, #2
 801de5c:	4619      	mov	r1, r3
 801de5e:	79fb      	ldrb	r3, [r7, #7]
 801de60:	009b      	lsls	r3, r3, #2
 801de62:	f003 0304 	and.w	r3, r3, #4
 801de66:	440b      	add	r3, r1
 801de68:	4413      	add	r3, r2
 801de6a:	697a      	ldr	r2, [r7, #20]
 801de6c:	429a      	cmp	r2, r3
 801de6e:	d006      	beq.n	801de7e <tcp_output_fill_options+0x66>
 801de70:	4b05      	ldr	r3, [pc, #20]	; (801de88 <tcp_output_fill_options+0x70>)
 801de72:	f240 7275 	movw	r2, #1909	; 0x775
 801de76:	4907      	ldr	r1, [pc, #28]	; (801de94 <tcp_output_fill_options+0x7c>)
 801de78:	4805      	ldr	r0, [pc, #20]	; (801de90 <tcp_output_fill_options+0x78>)
 801de7a:	f001 fdbf 	bl	801f9fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801de7e:	bf00      	nop
 801de80:	3720      	adds	r7, #32
 801de82:	46bd      	mov	sp, r7
 801de84:	bd80      	pop	{r7, pc}
 801de86:	bf00      	nop
 801de88:	0802344c 	.word	0x0802344c
 801de8c:	08023bc0 	.word	0x08023bc0
 801de90:	080234e4 	.word	0x080234e4
 801de94:	08023ab8 	.word	0x08023ab8

0801de98 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801de98:	b580      	push	{r7, lr}
 801de9a:	b08a      	sub	sp, #40	; 0x28
 801de9c:	af04      	add	r7, sp, #16
 801de9e:	60f8      	str	r0, [r7, #12]
 801dea0:	60b9      	str	r1, [r7, #8]
 801dea2:	607a      	str	r2, [r7, #4]
 801dea4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801dea6:	68bb      	ldr	r3, [r7, #8]
 801dea8:	2b00      	cmp	r3, #0
 801deaa:	d106      	bne.n	801deba <tcp_output_control_segment+0x22>
 801deac:	4b1c      	ldr	r3, [pc, #112]	; (801df20 <tcp_output_control_segment+0x88>)
 801deae:	f240 7287 	movw	r2, #1927	; 0x787
 801deb2:	491c      	ldr	r1, [pc, #112]	; (801df24 <tcp_output_control_segment+0x8c>)
 801deb4:	481c      	ldr	r0, [pc, #112]	; (801df28 <tcp_output_control_segment+0x90>)
 801deb6:	f001 fda1 	bl	801f9fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 801deba:	683a      	ldr	r2, [r7, #0]
 801debc:	6879      	ldr	r1, [r7, #4]
 801debe:	68f8      	ldr	r0, [r7, #12]
 801dec0:	f7fe fae8 	bl	801c494 <tcp_route>
 801dec4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801dec6:	693b      	ldr	r3, [r7, #16]
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d102      	bne.n	801ded2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801decc:	23fc      	movs	r3, #252	; 0xfc
 801dece:	75fb      	strb	r3, [r7, #23]
 801ded0:	e01c      	b.n	801df0c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	d006      	beq.n	801dee6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	7adb      	ldrb	r3, [r3, #11]
 801dedc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801dede:	68fb      	ldr	r3, [r7, #12]
 801dee0:	7a9b      	ldrb	r3, [r3, #10]
 801dee2:	757b      	strb	r3, [r7, #21]
 801dee4:	e003      	b.n	801deee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801dee6:	23ff      	movs	r3, #255	; 0xff
 801dee8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801deea:	2300      	movs	r3, #0
 801deec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801deee:	7dba      	ldrb	r2, [r7, #22]
 801def0:	693b      	ldr	r3, [r7, #16]
 801def2:	9302      	str	r3, [sp, #8]
 801def4:	2306      	movs	r3, #6
 801def6:	9301      	str	r3, [sp, #4]
 801def8:	7d7b      	ldrb	r3, [r7, #21]
 801defa:	9300      	str	r3, [sp, #0]
 801defc:	4613      	mov	r3, r2
 801defe:	683a      	ldr	r2, [r7, #0]
 801df00:	6879      	ldr	r1, [r7, #4]
 801df02:	68b8      	ldr	r0, [r7, #8]
 801df04:	f7f7 f990 	bl	8015228 <ip4_output_if>
 801df08:	4603      	mov	r3, r0
 801df0a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801df0c:	68b8      	ldr	r0, [r7, #8]
 801df0e:	f7f9 fcc9 	bl	80178a4 <pbuf_free>
  return err;
 801df12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801df16:	4618      	mov	r0, r3
 801df18:	3718      	adds	r7, #24
 801df1a:	46bd      	mov	sp, r7
 801df1c:	bd80      	pop	{r7, pc}
 801df1e:	bf00      	nop
 801df20:	0802344c 	.word	0x0802344c
 801df24:	08023be8 	.word	0x08023be8
 801df28:	080234e4 	.word	0x080234e4

0801df2c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801df2c:	b590      	push	{r4, r7, lr}
 801df2e:	b08b      	sub	sp, #44	; 0x2c
 801df30:	af04      	add	r7, sp, #16
 801df32:	60f8      	str	r0, [r7, #12]
 801df34:	60b9      	str	r1, [r7, #8]
 801df36:	607a      	str	r2, [r7, #4]
 801df38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801df3a:	683b      	ldr	r3, [r7, #0]
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d106      	bne.n	801df4e <tcp_rst+0x22>
 801df40:	4b1f      	ldr	r3, [pc, #124]	; (801dfc0 <tcp_rst+0x94>)
 801df42:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801df46:	491f      	ldr	r1, [pc, #124]	; (801dfc4 <tcp_rst+0x98>)
 801df48:	481f      	ldr	r0, [pc, #124]	; (801dfc8 <tcp_rst+0x9c>)
 801df4a:	f001 fd57 	bl	801f9fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801df4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df50:	2b00      	cmp	r3, #0
 801df52:	d106      	bne.n	801df62 <tcp_rst+0x36>
 801df54:	4b1a      	ldr	r3, [pc, #104]	; (801dfc0 <tcp_rst+0x94>)
 801df56:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801df5a:	491c      	ldr	r1, [pc, #112]	; (801dfcc <tcp_rst+0xa0>)
 801df5c:	481a      	ldr	r0, [pc, #104]	; (801dfc8 <tcp_rst+0x9c>)
 801df5e:	f001 fd4d 	bl	801f9fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801df62:	2300      	movs	r3, #0
 801df64:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801df66:	f24d 0316 	movw	r3, #53270	; 0xd016
 801df6a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801df6c:	7dfb      	ldrb	r3, [r7, #23]
 801df6e:	b29c      	uxth	r4, r3
 801df70:	68b8      	ldr	r0, [r7, #8]
 801df72:	f7f5 fcd8 	bl	8013926 <lwip_htonl>
 801df76:	4602      	mov	r2, r0
 801df78:	8abb      	ldrh	r3, [r7, #20]
 801df7a:	9303      	str	r3, [sp, #12]
 801df7c:	2314      	movs	r3, #20
 801df7e:	9302      	str	r3, [sp, #8]
 801df80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801df82:	9301      	str	r3, [sp, #4]
 801df84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801df86:	9300      	str	r3, [sp, #0]
 801df88:	4613      	mov	r3, r2
 801df8a:	2200      	movs	r2, #0
 801df8c:	4621      	mov	r1, r4
 801df8e:	6878      	ldr	r0, [r7, #4]
 801df90:	f7ff fe92 	bl	801dcb8 <tcp_output_alloc_header_common>
 801df94:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801df96:	693b      	ldr	r3, [r7, #16]
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d00c      	beq.n	801dfb6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801df9c:	7dfb      	ldrb	r3, [r7, #23]
 801df9e:	2200      	movs	r2, #0
 801dfa0:	6939      	ldr	r1, [r7, #16]
 801dfa2:	68f8      	ldr	r0, [r7, #12]
 801dfa4:	f7ff ff38 	bl	801de18 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801dfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfaa:	683a      	ldr	r2, [r7, #0]
 801dfac:	6939      	ldr	r1, [r7, #16]
 801dfae:	68f8      	ldr	r0, [r7, #12]
 801dfb0:	f7ff ff72 	bl	801de98 <tcp_output_control_segment>
 801dfb4:	e000      	b.n	801dfb8 <tcp_rst+0x8c>
    return;
 801dfb6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801dfb8:	371c      	adds	r7, #28
 801dfba:	46bd      	mov	sp, r7
 801dfbc:	bd90      	pop	{r4, r7, pc}
 801dfbe:	bf00      	nop
 801dfc0:	0802344c 	.word	0x0802344c
 801dfc4:	08023c14 	.word	0x08023c14
 801dfc8:	080234e4 	.word	0x080234e4
 801dfcc:	08023c30 	.word	0x08023c30

0801dfd0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801dfd0:	b590      	push	{r4, r7, lr}
 801dfd2:	b087      	sub	sp, #28
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801dfd8:	2300      	movs	r3, #0
 801dfda:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801dfdc:	2300      	movs	r3, #0
 801dfde:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	2b00      	cmp	r3, #0
 801dfe4:	d106      	bne.n	801dff4 <tcp_send_empty_ack+0x24>
 801dfe6:	4b28      	ldr	r3, [pc, #160]	; (801e088 <tcp_send_empty_ack+0xb8>)
 801dfe8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801dfec:	4927      	ldr	r1, [pc, #156]	; (801e08c <tcp_send_empty_ack+0xbc>)
 801dfee:	4828      	ldr	r0, [pc, #160]	; (801e090 <tcp_send_empty_ack+0xc0>)
 801dff0:	f001 fd04 	bl	801f9fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801dff4:	7dfb      	ldrb	r3, [r7, #23]
 801dff6:	009b      	lsls	r3, r3, #2
 801dff8:	b2db      	uxtb	r3, r3
 801dffa:	f003 0304 	and.w	r3, r3, #4
 801dffe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801e000:	7d7b      	ldrb	r3, [r7, #21]
 801e002:	b29c      	uxth	r4, r3
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e008:	4618      	mov	r0, r3
 801e00a:	f7f5 fc8c 	bl	8013926 <lwip_htonl>
 801e00e:	4603      	mov	r3, r0
 801e010:	2200      	movs	r2, #0
 801e012:	4621      	mov	r1, r4
 801e014:	6878      	ldr	r0, [r7, #4]
 801e016:	f7ff fec1 	bl	801dd9c <tcp_output_alloc_header>
 801e01a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e01c:	693b      	ldr	r3, [r7, #16]
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d109      	bne.n	801e036 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	8b5b      	ldrh	r3, [r3, #26]
 801e026:	f043 0303 	orr.w	r3, r3, #3
 801e02a:	b29a      	uxth	r2, r3
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801e030:	f06f 0301 	mvn.w	r3, #1
 801e034:	e023      	b.n	801e07e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801e036:	7dbb      	ldrb	r3, [r7, #22]
 801e038:	7dfa      	ldrb	r2, [r7, #23]
 801e03a:	6939      	ldr	r1, [r7, #16]
 801e03c:	6878      	ldr	r0, [r7, #4]
 801e03e:	f7ff feeb 	bl	801de18 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e042:	687a      	ldr	r2, [r7, #4]
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	3304      	adds	r3, #4
 801e048:	6939      	ldr	r1, [r7, #16]
 801e04a:	6878      	ldr	r0, [r7, #4]
 801e04c:	f7ff ff24 	bl	801de98 <tcp_output_control_segment>
 801e050:	4603      	mov	r3, r0
 801e052:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801e054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e058:	2b00      	cmp	r3, #0
 801e05a:	d007      	beq.n	801e06c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	8b5b      	ldrh	r3, [r3, #26]
 801e060:	f043 0303 	orr.w	r3, r3, #3
 801e064:	b29a      	uxth	r2, r3
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	835a      	strh	r2, [r3, #26]
 801e06a:	e006      	b.n	801e07a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	8b5b      	ldrh	r3, [r3, #26]
 801e070:	f023 0303 	bic.w	r3, r3, #3
 801e074:	b29a      	uxth	r2, r3
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801e07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e07e:	4618      	mov	r0, r3
 801e080:	371c      	adds	r7, #28
 801e082:	46bd      	mov	sp, r7
 801e084:	bd90      	pop	{r4, r7, pc}
 801e086:	bf00      	nop
 801e088:	0802344c 	.word	0x0802344c
 801e08c:	08023c4c 	.word	0x08023c4c
 801e090:	080234e4 	.word	0x080234e4

0801e094 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801e094:	b590      	push	{r4, r7, lr}
 801e096:	b087      	sub	sp, #28
 801e098:	af00      	add	r7, sp, #0
 801e09a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e09c:	2300      	movs	r3, #0
 801e09e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d106      	bne.n	801e0b4 <tcp_keepalive+0x20>
 801e0a6:	4b18      	ldr	r3, [pc, #96]	; (801e108 <tcp_keepalive+0x74>)
 801e0a8:	f640 0224 	movw	r2, #2084	; 0x824
 801e0ac:	4917      	ldr	r1, [pc, #92]	; (801e10c <tcp_keepalive+0x78>)
 801e0ae:	4818      	ldr	r0, [pc, #96]	; (801e110 <tcp_keepalive+0x7c>)
 801e0b0:	f001 fca4 	bl	801f9fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801e0b4:	7dfb      	ldrb	r3, [r7, #23]
 801e0b6:	b29c      	uxth	r4, r3
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e0bc:	3b01      	subs	r3, #1
 801e0be:	4618      	mov	r0, r3
 801e0c0:	f7f5 fc31 	bl	8013926 <lwip_htonl>
 801e0c4:	4603      	mov	r3, r0
 801e0c6:	2200      	movs	r2, #0
 801e0c8:	4621      	mov	r1, r4
 801e0ca:	6878      	ldr	r0, [r7, #4]
 801e0cc:	f7ff fe66 	bl	801dd9c <tcp_output_alloc_header>
 801e0d0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e0d2:	693b      	ldr	r3, [r7, #16]
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d102      	bne.n	801e0de <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801e0d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e0dc:	e010      	b.n	801e100 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e0de:	7dfb      	ldrb	r3, [r7, #23]
 801e0e0:	2200      	movs	r2, #0
 801e0e2:	6939      	ldr	r1, [r7, #16]
 801e0e4:	6878      	ldr	r0, [r7, #4]
 801e0e6:	f7ff fe97 	bl	801de18 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e0ea:	687a      	ldr	r2, [r7, #4]
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	3304      	adds	r3, #4
 801e0f0:	6939      	ldr	r1, [r7, #16]
 801e0f2:	6878      	ldr	r0, [r7, #4]
 801e0f4:	f7ff fed0 	bl	801de98 <tcp_output_control_segment>
 801e0f8:	4603      	mov	r3, r0
 801e0fa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801e0fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e100:	4618      	mov	r0, r3
 801e102:	371c      	adds	r7, #28
 801e104:	46bd      	mov	sp, r7
 801e106:	bd90      	pop	{r4, r7, pc}
 801e108:	0802344c 	.word	0x0802344c
 801e10c:	08023c6c 	.word	0x08023c6c
 801e110:	080234e4 	.word	0x080234e4

0801e114 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801e114:	b590      	push	{r4, r7, lr}
 801e116:	b08b      	sub	sp, #44	; 0x2c
 801e118:	af00      	add	r7, sp, #0
 801e11a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e11c:	2300      	movs	r3, #0
 801e11e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	2b00      	cmp	r3, #0
 801e126:	d106      	bne.n	801e136 <tcp_zero_window_probe+0x22>
 801e128:	4b4c      	ldr	r3, [pc, #304]	; (801e25c <tcp_zero_window_probe+0x148>)
 801e12a:	f640 024f 	movw	r2, #2127	; 0x84f
 801e12e:	494c      	ldr	r1, [pc, #304]	; (801e260 <tcp_zero_window_probe+0x14c>)
 801e130:	484c      	ldr	r0, [pc, #304]	; (801e264 <tcp_zero_window_probe+0x150>)
 801e132:	f001 fc63 	bl	801f9fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e13a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801e13c:	6a3b      	ldr	r3, [r7, #32]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d101      	bne.n	801e146 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801e142:	2300      	movs	r3, #0
 801e144:	e086      	b.n	801e254 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801e14c:	2bff      	cmp	r3, #255	; 0xff
 801e14e:	d007      	beq.n	801e160 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801e156:	3301      	adds	r3, #1
 801e158:	b2da      	uxtb	r2, r3
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801e160:	6a3b      	ldr	r3, [r7, #32]
 801e162:	68db      	ldr	r3, [r3, #12]
 801e164:	899b      	ldrh	r3, [r3, #12]
 801e166:	b29b      	uxth	r3, r3
 801e168:	4618      	mov	r0, r3
 801e16a:	f7f5 fbc7 	bl	80138fc <lwip_htons>
 801e16e:	4603      	mov	r3, r0
 801e170:	b2db      	uxtb	r3, r3
 801e172:	f003 0301 	and.w	r3, r3, #1
 801e176:	2b00      	cmp	r3, #0
 801e178:	d005      	beq.n	801e186 <tcp_zero_window_probe+0x72>
 801e17a:	6a3b      	ldr	r3, [r7, #32]
 801e17c:	891b      	ldrh	r3, [r3, #8]
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d101      	bne.n	801e186 <tcp_zero_window_probe+0x72>
 801e182:	2301      	movs	r3, #1
 801e184:	e000      	b.n	801e188 <tcp_zero_window_probe+0x74>
 801e186:	2300      	movs	r3, #0
 801e188:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801e18a:	7ffb      	ldrb	r3, [r7, #31]
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	bf0c      	ite	eq
 801e190:	2301      	moveq	r3, #1
 801e192:	2300      	movne	r3, #0
 801e194:	b2db      	uxtb	r3, r3
 801e196:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801e198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e19c:	b299      	uxth	r1, r3
 801e19e:	6a3b      	ldr	r3, [r7, #32]
 801e1a0:	68db      	ldr	r3, [r3, #12]
 801e1a2:	685b      	ldr	r3, [r3, #4]
 801e1a4:	8bba      	ldrh	r2, [r7, #28]
 801e1a6:	6878      	ldr	r0, [r7, #4]
 801e1a8:	f7ff fdf8 	bl	801dd9c <tcp_output_alloc_header>
 801e1ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801e1ae:	69bb      	ldr	r3, [r7, #24]
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	d102      	bne.n	801e1ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801e1b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e1b8:	e04c      	b.n	801e254 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801e1ba:	69bb      	ldr	r3, [r7, #24]
 801e1bc:	685b      	ldr	r3, [r3, #4]
 801e1be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801e1c0:	7ffb      	ldrb	r3, [r7, #31]
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	d011      	beq.n	801e1ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801e1c6:	697b      	ldr	r3, [r7, #20]
 801e1c8:	899b      	ldrh	r3, [r3, #12]
 801e1ca:	b29b      	uxth	r3, r3
 801e1cc:	b21b      	sxth	r3, r3
 801e1ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801e1d2:	b21c      	sxth	r4, r3
 801e1d4:	2011      	movs	r0, #17
 801e1d6:	f7f5 fb91 	bl	80138fc <lwip_htons>
 801e1da:	4603      	mov	r3, r0
 801e1dc:	b21b      	sxth	r3, r3
 801e1de:	4323      	orrs	r3, r4
 801e1e0:	b21b      	sxth	r3, r3
 801e1e2:	b29a      	uxth	r2, r3
 801e1e4:	697b      	ldr	r3, [r7, #20]
 801e1e6:	819a      	strh	r2, [r3, #12]
 801e1e8:	e010      	b.n	801e20c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801e1ea:	69bb      	ldr	r3, [r7, #24]
 801e1ec:	685b      	ldr	r3, [r3, #4]
 801e1ee:	3314      	adds	r3, #20
 801e1f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801e1f2:	6a3b      	ldr	r3, [r7, #32]
 801e1f4:	6858      	ldr	r0, [r3, #4]
 801e1f6:	6a3b      	ldr	r3, [r7, #32]
 801e1f8:	685b      	ldr	r3, [r3, #4]
 801e1fa:	891a      	ldrh	r2, [r3, #8]
 801e1fc:	6a3b      	ldr	r3, [r7, #32]
 801e1fe:	891b      	ldrh	r3, [r3, #8]
 801e200:	1ad3      	subs	r3, r2, r3
 801e202:	b29b      	uxth	r3, r3
 801e204:	2201      	movs	r2, #1
 801e206:	6939      	ldr	r1, [r7, #16]
 801e208:	f7f9 fd42 	bl	8017c90 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801e20c:	6a3b      	ldr	r3, [r7, #32]
 801e20e:	68db      	ldr	r3, [r3, #12]
 801e210:	685b      	ldr	r3, [r3, #4]
 801e212:	4618      	mov	r0, r3
 801e214:	f7f5 fb87 	bl	8013926 <lwip_htonl>
 801e218:	4603      	mov	r3, r0
 801e21a:	3301      	adds	r3, #1
 801e21c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e222:	68fb      	ldr	r3, [r7, #12]
 801e224:	1ad3      	subs	r3, r2, r3
 801e226:	2b00      	cmp	r3, #0
 801e228:	da02      	bge.n	801e230 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801e22a:	687b      	ldr	r3, [r7, #4]
 801e22c:	68fa      	ldr	r2, [r7, #12]
 801e22e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e234:	2200      	movs	r2, #0
 801e236:	69b9      	ldr	r1, [r7, #24]
 801e238:	6878      	ldr	r0, [r7, #4]
 801e23a:	f7ff fded 	bl	801de18 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e23e:	687a      	ldr	r2, [r7, #4]
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	3304      	adds	r3, #4
 801e244:	69b9      	ldr	r1, [r7, #24]
 801e246:	6878      	ldr	r0, [r7, #4]
 801e248:	f7ff fe26 	bl	801de98 <tcp_output_control_segment>
 801e24c:	4603      	mov	r3, r0
 801e24e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801e250:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801e254:	4618      	mov	r0, r3
 801e256:	372c      	adds	r7, #44	; 0x2c
 801e258:	46bd      	mov	sp, r7
 801e25a:	bd90      	pop	{r4, r7, pc}
 801e25c:	0802344c 	.word	0x0802344c
 801e260:	08023c88 	.word	0x08023c88
 801e264:	080234e4 	.word	0x080234e4

0801e268 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801e268:	b580      	push	{r7, lr}
 801e26a:	b084      	sub	sp, #16
 801e26c:	af00      	add	r7, sp, #0
 801e26e:	6078      	str	r0, [r7, #4]
 801e270:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801e272:	f000 fb17 	bl	801e8a4 <sys_timeouts_sleeptime>
 801e276:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e27e:	d10b      	bne.n	801e298 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801e280:	4813      	ldr	r0, [pc, #76]	; (801e2d0 <tcpip_timeouts_mbox_fetch+0x68>)
 801e282:	f7f9 ff3a 	bl	80180fa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801e286:	2200      	movs	r2, #0
 801e288:	6839      	ldr	r1, [r7, #0]
 801e28a:	6878      	ldr	r0, [r7, #4]
 801e28c:	f7f9 fdf2 	bl	8017e74 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801e290:	480f      	ldr	r0, [pc, #60]	; (801e2d0 <tcpip_timeouts_mbox_fetch+0x68>)
 801e292:	f7f9 ff23 	bl	80180dc <sys_mutex_lock>
    return;
 801e296:	e018      	b.n	801e2ca <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801e298:	68fb      	ldr	r3, [r7, #12]
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	d102      	bne.n	801e2a4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801e29e:	f000 fac7 	bl	801e830 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801e2a2:	e7e6      	b.n	801e272 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801e2a4:	480a      	ldr	r0, [pc, #40]	; (801e2d0 <tcpip_timeouts_mbox_fetch+0x68>)
 801e2a6:	f7f9 ff28 	bl	80180fa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801e2aa:	68fa      	ldr	r2, [r7, #12]
 801e2ac:	6839      	ldr	r1, [r7, #0]
 801e2ae:	6878      	ldr	r0, [r7, #4]
 801e2b0:	f7f9 fde0 	bl	8017e74 <sys_arch_mbox_fetch>
 801e2b4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801e2b6:	4806      	ldr	r0, [pc, #24]	; (801e2d0 <tcpip_timeouts_mbox_fetch+0x68>)
 801e2b8:	f7f9 ff10 	bl	80180dc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801e2bc:	68bb      	ldr	r3, [r7, #8]
 801e2be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e2c2:	d102      	bne.n	801e2ca <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801e2c4:	f000 fab4 	bl	801e830 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801e2c8:	e7d3      	b.n	801e272 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801e2ca:	3710      	adds	r7, #16
 801e2cc:	46bd      	mov	sp, r7
 801e2ce:	bd80      	pop	{r7, pc}
 801e2d0:	2400f97c 	.word	0x2400f97c

0801e2d4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801e2d4:	b580      	push	{r7, lr}
 801e2d6:	b084      	sub	sp, #16
 801e2d8:	af00      	add	r7, sp, #0
 801e2da:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801e2dc:	4810      	ldr	r0, [pc, #64]	; (801e320 <tcpip_thread+0x4c>)
 801e2de:	f7f9 fefd 	bl	80180dc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801e2e2:	4b10      	ldr	r3, [pc, #64]	; (801e324 <tcpip_thread+0x50>)
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d005      	beq.n	801e2f6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801e2ea:	4b0e      	ldr	r3, [pc, #56]	; (801e324 <tcpip_thread+0x50>)
 801e2ec:	681b      	ldr	r3, [r3, #0]
 801e2ee:	4a0e      	ldr	r2, [pc, #56]	; (801e328 <tcpip_thread+0x54>)
 801e2f0:	6812      	ldr	r2, [r2, #0]
 801e2f2:	4610      	mov	r0, r2
 801e2f4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801e2f6:	f107 030c 	add.w	r3, r7, #12
 801e2fa:	4619      	mov	r1, r3
 801e2fc:	480b      	ldr	r0, [pc, #44]	; (801e32c <tcpip_thread+0x58>)
 801e2fe:	f7ff ffb3 	bl	801e268 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801e302:	68fb      	ldr	r3, [r7, #12]
 801e304:	2b00      	cmp	r3, #0
 801e306:	d106      	bne.n	801e316 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801e308:	4b09      	ldr	r3, [pc, #36]	; (801e330 <tcpip_thread+0x5c>)
 801e30a:	2291      	movs	r2, #145	; 0x91
 801e30c:	4909      	ldr	r1, [pc, #36]	; (801e334 <tcpip_thread+0x60>)
 801e30e:	480a      	ldr	r0, [pc, #40]	; (801e338 <tcpip_thread+0x64>)
 801e310:	f001 fb74 	bl	801f9fc <iprintf>
      continue;
 801e314:	e003      	b.n	801e31e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801e316:	68fb      	ldr	r3, [r7, #12]
 801e318:	4618      	mov	r0, r3
 801e31a:	f000 f80f 	bl	801e33c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801e31e:	e7ea      	b.n	801e2f6 <tcpip_thread+0x22>
 801e320:	2400f97c 	.word	0x2400f97c
 801e324:	2400f970 	.word	0x2400f970
 801e328:	2400f974 	.word	0x2400f974
 801e32c:	2400f978 	.word	0x2400f978
 801e330:	08023cac 	.word	0x08023cac
 801e334:	08023d20 	.word	0x08023d20
 801e338:	08023d40 	.word	0x08023d40

0801e33c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801e33c:	b580      	push	{r7, lr}
 801e33e:	b082      	sub	sp, #8
 801e340:	af00      	add	r7, sp, #0
 801e342:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	781b      	ldrb	r3, [r3, #0]
 801e348:	2b02      	cmp	r3, #2
 801e34a:	d026      	beq.n	801e39a <tcpip_thread_handle_msg+0x5e>
 801e34c:	2b02      	cmp	r3, #2
 801e34e:	dc2b      	bgt.n	801e3a8 <tcpip_thread_handle_msg+0x6c>
 801e350:	2b00      	cmp	r3, #0
 801e352:	d002      	beq.n	801e35a <tcpip_thread_handle_msg+0x1e>
 801e354:	2b01      	cmp	r3, #1
 801e356:	d015      	beq.n	801e384 <tcpip_thread_handle_msg+0x48>
 801e358:	e026      	b.n	801e3a8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	68db      	ldr	r3, [r3, #12]
 801e35e:	687a      	ldr	r2, [r7, #4]
 801e360:	6850      	ldr	r0, [r2, #4]
 801e362:	687a      	ldr	r2, [r7, #4]
 801e364:	6892      	ldr	r2, [r2, #8]
 801e366:	4611      	mov	r1, r2
 801e368:	4798      	blx	r3
 801e36a:	4603      	mov	r3, r0
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	d004      	beq.n	801e37a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	685b      	ldr	r3, [r3, #4]
 801e374:	4618      	mov	r0, r3
 801e376:	f7f9 fa95 	bl	80178a4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801e37a:	6879      	ldr	r1, [r7, #4]
 801e37c:	2009      	movs	r0, #9
 801e37e:	f7f8 fb9d 	bl	8016abc <memp_free>
      break;
 801e382:	e018      	b.n	801e3b6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	685b      	ldr	r3, [r3, #4]
 801e388:	687a      	ldr	r2, [r7, #4]
 801e38a:	6892      	ldr	r2, [r2, #8]
 801e38c:	4610      	mov	r0, r2
 801e38e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801e390:	6879      	ldr	r1, [r7, #4]
 801e392:	2008      	movs	r0, #8
 801e394:	f7f8 fb92 	bl	8016abc <memp_free>
      break;
 801e398:	e00d      	b.n	801e3b6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	685b      	ldr	r3, [r3, #4]
 801e39e:	687a      	ldr	r2, [r7, #4]
 801e3a0:	6892      	ldr	r2, [r2, #8]
 801e3a2:	4610      	mov	r0, r2
 801e3a4:	4798      	blx	r3
      break;
 801e3a6:	e006      	b.n	801e3b6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801e3a8:	4b05      	ldr	r3, [pc, #20]	; (801e3c0 <tcpip_thread_handle_msg+0x84>)
 801e3aa:	22cf      	movs	r2, #207	; 0xcf
 801e3ac:	4905      	ldr	r1, [pc, #20]	; (801e3c4 <tcpip_thread_handle_msg+0x88>)
 801e3ae:	4806      	ldr	r0, [pc, #24]	; (801e3c8 <tcpip_thread_handle_msg+0x8c>)
 801e3b0:	f001 fb24 	bl	801f9fc <iprintf>
      break;
 801e3b4:	bf00      	nop
  }
}
 801e3b6:	bf00      	nop
 801e3b8:	3708      	adds	r7, #8
 801e3ba:	46bd      	mov	sp, r7
 801e3bc:	bd80      	pop	{r7, pc}
 801e3be:	bf00      	nop
 801e3c0:	08023cac 	.word	0x08023cac
 801e3c4:	08023d20 	.word	0x08023d20
 801e3c8:	08023d40 	.word	0x08023d40

0801e3cc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801e3cc:	b580      	push	{r7, lr}
 801e3ce:	b086      	sub	sp, #24
 801e3d0:	af00      	add	r7, sp, #0
 801e3d2:	60f8      	str	r0, [r7, #12]
 801e3d4:	60b9      	str	r1, [r7, #8]
 801e3d6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801e3d8:	481a      	ldr	r0, [pc, #104]	; (801e444 <tcpip_inpkt+0x78>)
 801e3da:	f7f9 fda6 	bl	8017f2a <sys_mbox_valid>
 801e3de:	4603      	mov	r3, r0
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d105      	bne.n	801e3f0 <tcpip_inpkt+0x24>
 801e3e4:	4b18      	ldr	r3, [pc, #96]	; (801e448 <tcpip_inpkt+0x7c>)
 801e3e6:	22fc      	movs	r2, #252	; 0xfc
 801e3e8:	4918      	ldr	r1, [pc, #96]	; (801e44c <tcpip_inpkt+0x80>)
 801e3ea:	4819      	ldr	r0, [pc, #100]	; (801e450 <tcpip_inpkt+0x84>)
 801e3ec:	f001 fb06 	bl	801f9fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801e3f0:	2009      	movs	r0, #9
 801e3f2:	f7f8 faed 	bl	80169d0 <memp_malloc>
 801e3f6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801e3f8:	697b      	ldr	r3, [r7, #20]
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	d102      	bne.n	801e404 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801e3fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e402:	e01a      	b.n	801e43a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801e404:	697b      	ldr	r3, [r7, #20]
 801e406:	2200      	movs	r2, #0
 801e408:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801e40a:	697b      	ldr	r3, [r7, #20]
 801e40c:	68fa      	ldr	r2, [r7, #12]
 801e40e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801e410:	697b      	ldr	r3, [r7, #20]
 801e412:	68ba      	ldr	r2, [r7, #8]
 801e414:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801e416:	697b      	ldr	r3, [r7, #20]
 801e418:	687a      	ldr	r2, [r7, #4]
 801e41a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801e41c:	6979      	ldr	r1, [r7, #20]
 801e41e:	4809      	ldr	r0, [pc, #36]	; (801e444 <tcpip_inpkt+0x78>)
 801e420:	f7f9 fd0e 	bl	8017e40 <sys_mbox_trypost>
 801e424:	4603      	mov	r3, r0
 801e426:	2b00      	cmp	r3, #0
 801e428:	d006      	beq.n	801e438 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801e42a:	6979      	ldr	r1, [r7, #20]
 801e42c:	2009      	movs	r0, #9
 801e42e:	f7f8 fb45 	bl	8016abc <memp_free>
    return ERR_MEM;
 801e432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e436:	e000      	b.n	801e43a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801e438:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801e43a:	4618      	mov	r0, r3
 801e43c:	3718      	adds	r7, #24
 801e43e:	46bd      	mov	sp, r7
 801e440:	bd80      	pop	{r7, pc}
 801e442:	bf00      	nop
 801e444:	2400f978 	.word	0x2400f978
 801e448:	08023cac 	.word	0x08023cac
 801e44c:	08023d68 	.word	0x08023d68
 801e450:	08023d40 	.word	0x08023d40

0801e454 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801e454:	b580      	push	{r7, lr}
 801e456:	b082      	sub	sp, #8
 801e458:	af00      	add	r7, sp, #0
 801e45a:	6078      	str	r0, [r7, #4]
 801e45c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801e45e:	683b      	ldr	r3, [r7, #0]
 801e460:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801e464:	f003 0318 	and.w	r3, r3, #24
 801e468:	2b00      	cmp	r3, #0
 801e46a:	d006      	beq.n	801e47a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801e46c:	4a08      	ldr	r2, [pc, #32]	; (801e490 <tcpip_input+0x3c>)
 801e46e:	6839      	ldr	r1, [r7, #0]
 801e470:	6878      	ldr	r0, [r7, #4]
 801e472:	f7ff ffab 	bl	801e3cc <tcpip_inpkt>
 801e476:	4603      	mov	r3, r0
 801e478:	e005      	b.n	801e486 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801e47a:	4a06      	ldr	r2, [pc, #24]	; (801e494 <tcpip_input+0x40>)
 801e47c:	6839      	ldr	r1, [r7, #0]
 801e47e:	6878      	ldr	r0, [r7, #4]
 801e480:	f7ff ffa4 	bl	801e3cc <tcpip_inpkt>
 801e484:	4603      	mov	r3, r0
}
 801e486:	4618      	mov	r0, r3
 801e488:	3708      	adds	r7, #8
 801e48a:	46bd      	mov	sp, r7
 801e48c:	bd80      	pop	{r7, pc}
 801e48e:	bf00      	nop
 801e490:	080147f1 	.word	0x080147f1
 801e494:	08014fe1 	.word	0x08014fe1

0801e498 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801e498:	b580      	push	{r7, lr}
 801e49a:	b084      	sub	sp, #16
 801e49c:	af00      	add	r7, sp, #0
 801e49e:	6078      	str	r0, [r7, #4]
 801e4a0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801e4a2:	4819      	ldr	r0, [pc, #100]	; (801e508 <tcpip_try_callback+0x70>)
 801e4a4:	f7f9 fd41 	bl	8017f2a <sys_mbox_valid>
 801e4a8:	4603      	mov	r3, r0
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	d106      	bne.n	801e4bc <tcpip_try_callback+0x24>
 801e4ae:	4b17      	ldr	r3, [pc, #92]	; (801e50c <tcpip_try_callback+0x74>)
 801e4b0:	f240 125d 	movw	r2, #349	; 0x15d
 801e4b4:	4916      	ldr	r1, [pc, #88]	; (801e510 <tcpip_try_callback+0x78>)
 801e4b6:	4817      	ldr	r0, [pc, #92]	; (801e514 <tcpip_try_callback+0x7c>)
 801e4b8:	f001 faa0 	bl	801f9fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801e4bc:	2008      	movs	r0, #8
 801e4be:	f7f8 fa87 	bl	80169d0 <memp_malloc>
 801e4c2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801e4c4:	68fb      	ldr	r3, [r7, #12]
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	d102      	bne.n	801e4d0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801e4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e4ce:	e017      	b.n	801e500 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801e4d0:	68fb      	ldr	r3, [r7, #12]
 801e4d2:	2201      	movs	r2, #1
 801e4d4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801e4d6:	68fb      	ldr	r3, [r7, #12]
 801e4d8:	687a      	ldr	r2, [r7, #4]
 801e4da:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801e4dc:	68fb      	ldr	r3, [r7, #12]
 801e4de:	683a      	ldr	r2, [r7, #0]
 801e4e0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801e4e2:	68f9      	ldr	r1, [r7, #12]
 801e4e4:	4808      	ldr	r0, [pc, #32]	; (801e508 <tcpip_try_callback+0x70>)
 801e4e6:	f7f9 fcab 	bl	8017e40 <sys_mbox_trypost>
 801e4ea:	4603      	mov	r3, r0
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	d006      	beq.n	801e4fe <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801e4f0:	68f9      	ldr	r1, [r7, #12]
 801e4f2:	2008      	movs	r0, #8
 801e4f4:	f7f8 fae2 	bl	8016abc <memp_free>
    return ERR_MEM;
 801e4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e4fc:	e000      	b.n	801e500 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801e4fe:	2300      	movs	r3, #0
}
 801e500:	4618      	mov	r0, r3
 801e502:	3710      	adds	r7, #16
 801e504:	46bd      	mov	sp, r7
 801e506:	bd80      	pop	{r7, pc}
 801e508:	2400f978 	.word	0x2400f978
 801e50c:	08023cac 	.word	0x08023cac
 801e510:	08023d68 	.word	0x08023d68
 801e514:	08023d40 	.word	0x08023d40

0801e518 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801e518:	b580      	push	{r7, lr}
 801e51a:	b084      	sub	sp, #16
 801e51c:	af00      	add	r7, sp, #0
 801e51e:	60f8      	str	r0, [r7, #12]
 801e520:	60b9      	str	r1, [r7, #8]
 801e522:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801e524:	4806      	ldr	r0, [pc, #24]	; (801e540 <tcpip_send_msg_wait_sem+0x28>)
 801e526:	f7f9 fdd9 	bl	80180dc <sys_mutex_lock>
  fn(apimsg);
 801e52a:	68fb      	ldr	r3, [r7, #12]
 801e52c:	68b8      	ldr	r0, [r7, #8]
 801e52e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801e530:	4803      	ldr	r0, [pc, #12]	; (801e540 <tcpip_send_msg_wait_sem+0x28>)
 801e532:	f7f9 fde2 	bl	80180fa <sys_mutex_unlock>
  return ERR_OK;
 801e536:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801e538:	4618      	mov	r0, r3
 801e53a:	3710      	adds	r7, #16
 801e53c:	46bd      	mov	sp, r7
 801e53e:	bd80      	pop	{r7, pc}
 801e540:	2400f97c 	.word	0x2400f97c

0801e544 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801e544:	b580      	push	{r7, lr}
 801e546:	b084      	sub	sp, #16
 801e548:	af02      	add	r7, sp, #8
 801e54a:	6078      	str	r0, [r7, #4]
 801e54c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801e54e:	f7f6 fc95 	bl	8014e7c <lwip_init>

  tcpip_init_done = initfunc;
 801e552:	4a17      	ldr	r2, [pc, #92]	; (801e5b0 <tcpip_init+0x6c>)
 801e554:	687b      	ldr	r3, [r7, #4]
 801e556:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801e558:	4a16      	ldr	r2, [pc, #88]	; (801e5b4 <tcpip_init+0x70>)
 801e55a:	683b      	ldr	r3, [r7, #0]
 801e55c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801e55e:	2106      	movs	r1, #6
 801e560:	4815      	ldr	r0, [pc, #84]	; (801e5b8 <tcpip_init+0x74>)
 801e562:	f7f9 fc39 	bl	8017dd8 <sys_mbox_new>
 801e566:	4603      	mov	r3, r0
 801e568:	2b00      	cmp	r3, #0
 801e56a:	d006      	beq.n	801e57a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801e56c:	4b13      	ldr	r3, [pc, #76]	; (801e5bc <tcpip_init+0x78>)
 801e56e:	f240 2261 	movw	r2, #609	; 0x261
 801e572:	4913      	ldr	r1, [pc, #76]	; (801e5c0 <tcpip_init+0x7c>)
 801e574:	4813      	ldr	r0, [pc, #76]	; (801e5c4 <tcpip_init+0x80>)
 801e576:	f001 fa41 	bl	801f9fc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801e57a:	4813      	ldr	r0, [pc, #76]	; (801e5c8 <tcpip_init+0x84>)
 801e57c:	f7f9 fd92 	bl	80180a4 <sys_mutex_new>
 801e580:	4603      	mov	r3, r0
 801e582:	2b00      	cmp	r3, #0
 801e584:	d006      	beq.n	801e594 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801e586:	4b0d      	ldr	r3, [pc, #52]	; (801e5bc <tcpip_init+0x78>)
 801e588:	f240 2265 	movw	r2, #613	; 0x265
 801e58c:	490f      	ldr	r1, [pc, #60]	; (801e5cc <tcpip_init+0x88>)
 801e58e:	480d      	ldr	r0, [pc, #52]	; (801e5c4 <tcpip_init+0x80>)
 801e590:	f001 fa34 	bl	801f9fc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801e594:	2300      	movs	r3, #0
 801e596:	9300      	str	r3, [sp, #0]
 801e598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e59c:	2200      	movs	r2, #0
 801e59e:	490c      	ldr	r1, [pc, #48]	; (801e5d0 <tcpip_init+0x8c>)
 801e5a0:	480c      	ldr	r0, [pc, #48]	; (801e5d4 <tcpip_init+0x90>)
 801e5a2:	f7f9 fdb7 	bl	8018114 <sys_thread_new>
}
 801e5a6:	bf00      	nop
 801e5a8:	3708      	adds	r7, #8
 801e5aa:	46bd      	mov	sp, r7
 801e5ac:	bd80      	pop	{r7, pc}
 801e5ae:	bf00      	nop
 801e5b0:	2400f970 	.word	0x2400f970
 801e5b4:	2400f974 	.word	0x2400f974
 801e5b8:	2400f978 	.word	0x2400f978
 801e5bc:	08023cac 	.word	0x08023cac
 801e5c0:	08023d78 	.word	0x08023d78
 801e5c4:	08023d40 	.word	0x08023d40
 801e5c8:	2400f97c 	.word	0x2400f97c
 801e5cc:	08023d9c 	.word	0x08023d9c
 801e5d0:	0801e2d5 	.word	0x0801e2d5
 801e5d4:	08023dc0 	.word	0x08023dc0

0801e5d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801e5d8:	b580      	push	{r7, lr}
 801e5da:	b082      	sub	sp, #8
 801e5dc:	af00      	add	r7, sp, #0
 801e5de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801e5e0:	f7f9 fe26 	bl	8018230 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801e5e4:	4b0a      	ldr	r3, [pc, #40]	; (801e610 <tcpip_tcp_timer+0x38>)
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d103      	bne.n	801e5f4 <tcpip_tcp_timer+0x1c>
 801e5ec:	4b09      	ldr	r3, [pc, #36]	; (801e614 <tcpip_tcp_timer+0x3c>)
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d005      	beq.n	801e600 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801e5f4:	2200      	movs	r2, #0
 801e5f6:	4908      	ldr	r1, [pc, #32]	; (801e618 <tcpip_tcp_timer+0x40>)
 801e5f8:	20fa      	movs	r0, #250	; 0xfa
 801e5fa:	f000 f8f3 	bl	801e7e4 <sys_timeout>
 801e5fe:	e003      	b.n	801e608 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801e600:	4b06      	ldr	r3, [pc, #24]	; (801e61c <tcpip_tcp_timer+0x44>)
 801e602:	2200      	movs	r2, #0
 801e604:	601a      	str	r2, [r3, #0]
  }
}
 801e606:	bf00      	nop
 801e608:	bf00      	nop
 801e60a:	3708      	adds	r7, #8
 801e60c:	46bd      	mov	sp, r7
 801e60e:	bd80      	pop	{r7, pc}
 801e610:	2400f92c 	.word	0x2400f92c
 801e614:	2400f930 	.word	0x2400f930
 801e618:	0801e5d9 	.word	0x0801e5d9
 801e61c:	2400f988 	.word	0x2400f988

0801e620 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801e620:	b580      	push	{r7, lr}
 801e622:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801e624:	4b0a      	ldr	r3, [pc, #40]	; (801e650 <tcp_timer_needed+0x30>)
 801e626:	681b      	ldr	r3, [r3, #0]
 801e628:	2b00      	cmp	r3, #0
 801e62a:	d10f      	bne.n	801e64c <tcp_timer_needed+0x2c>
 801e62c:	4b09      	ldr	r3, [pc, #36]	; (801e654 <tcp_timer_needed+0x34>)
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	2b00      	cmp	r3, #0
 801e632:	d103      	bne.n	801e63c <tcp_timer_needed+0x1c>
 801e634:	4b08      	ldr	r3, [pc, #32]	; (801e658 <tcp_timer_needed+0x38>)
 801e636:	681b      	ldr	r3, [r3, #0]
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d007      	beq.n	801e64c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801e63c:	4b04      	ldr	r3, [pc, #16]	; (801e650 <tcp_timer_needed+0x30>)
 801e63e:	2201      	movs	r2, #1
 801e640:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801e642:	2200      	movs	r2, #0
 801e644:	4905      	ldr	r1, [pc, #20]	; (801e65c <tcp_timer_needed+0x3c>)
 801e646:	20fa      	movs	r0, #250	; 0xfa
 801e648:	f000 f8cc 	bl	801e7e4 <sys_timeout>
  }
}
 801e64c:	bf00      	nop
 801e64e:	bd80      	pop	{r7, pc}
 801e650:	2400f988 	.word	0x2400f988
 801e654:	2400f92c 	.word	0x2400f92c
 801e658:	2400f930 	.word	0x2400f930
 801e65c:	0801e5d9 	.word	0x0801e5d9

0801e660 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801e660:	b580      	push	{r7, lr}
 801e662:	b086      	sub	sp, #24
 801e664:	af00      	add	r7, sp, #0
 801e666:	60f8      	str	r0, [r7, #12]
 801e668:	60b9      	str	r1, [r7, #8]
 801e66a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801e66c:	200a      	movs	r0, #10
 801e66e:	f7f8 f9af 	bl	80169d0 <memp_malloc>
 801e672:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801e674:	693b      	ldr	r3, [r7, #16]
 801e676:	2b00      	cmp	r3, #0
 801e678:	d109      	bne.n	801e68e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801e67a:	693b      	ldr	r3, [r7, #16]
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	d151      	bne.n	801e724 <sys_timeout_abs+0xc4>
 801e680:	4b2a      	ldr	r3, [pc, #168]	; (801e72c <sys_timeout_abs+0xcc>)
 801e682:	22be      	movs	r2, #190	; 0xbe
 801e684:	492a      	ldr	r1, [pc, #168]	; (801e730 <sys_timeout_abs+0xd0>)
 801e686:	482b      	ldr	r0, [pc, #172]	; (801e734 <sys_timeout_abs+0xd4>)
 801e688:	f001 f9b8 	bl	801f9fc <iprintf>
    return;
 801e68c:	e04a      	b.n	801e724 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801e68e:	693b      	ldr	r3, [r7, #16]
 801e690:	2200      	movs	r2, #0
 801e692:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801e694:	693b      	ldr	r3, [r7, #16]
 801e696:	68ba      	ldr	r2, [r7, #8]
 801e698:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801e69a:	693b      	ldr	r3, [r7, #16]
 801e69c:	687a      	ldr	r2, [r7, #4]
 801e69e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801e6a0:	693b      	ldr	r3, [r7, #16]
 801e6a2:	68fa      	ldr	r2, [r7, #12]
 801e6a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801e6a6:	4b24      	ldr	r3, [pc, #144]	; (801e738 <sys_timeout_abs+0xd8>)
 801e6a8:	681b      	ldr	r3, [r3, #0]
 801e6aa:	2b00      	cmp	r3, #0
 801e6ac:	d103      	bne.n	801e6b6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801e6ae:	4a22      	ldr	r2, [pc, #136]	; (801e738 <sys_timeout_abs+0xd8>)
 801e6b0:	693b      	ldr	r3, [r7, #16]
 801e6b2:	6013      	str	r3, [r2, #0]
    return;
 801e6b4:	e037      	b.n	801e726 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801e6b6:	693b      	ldr	r3, [r7, #16]
 801e6b8:	685a      	ldr	r2, [r3, #4]
 801e6ba:	4b1f      	ldr	r3, [pc, #124]	; (801e738 <sys_timeout_abs+0xd8>)
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	685b      	ldr	r3, [r3, #4]
 801e6c0:	1ad3      	subs	r3, r2, r3
 801e6c2:	0fdb      	lsrs	r3, r3, #31
 801e6c4:	f003 0301 	and.w	r3, r3, #1
 801e6c8:	b2db      	uxtb	r3, r3
 801e6ca:	2b00      	cmp	r3, #0
 801e6cc:	d007      	beq.n	801e6de <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801e6ce:	4b1a      	ldr	r3, [pc, #104]	; (801e738 <sys_timeout_abs+0xd8>)
 801e6d0:	681a      	ldr	r2, [r3, #0]
 801e6d2:	693b      	ldr	r3, [r7, #16]
 801e6d4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801e6d6:	4a18      	ldr	r2, [pc, #96]	; (801e738 <sys_timeout_abs+0xd8>)
 801e6d8:	693b      	ldr	r3, [r7, #16]
 801e6da:	6013      	str	r3, [r2, #0]
 801e6dc:	e023      	b.n	801e726 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801e6de:	4b16      	ldr	r3, [pc, #88]	; (801e738 <sys_timeout_abs+0xd8>)
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	617b      	str	r3, [r7, #20]
 801e6e4:	e01a      	b.n	801e71c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801e6e6:	697b      	ldr	r3, [r7, #20]
 801e6e8:	681b      	ldr	r3, [r3, #0]
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d00b      	beq.n	801e706 <sys_timeout_abs+0xa6>
 801e6ee:	693b      	ldr	r3, [r7, #16]
 801e6f0:	685a      	ldr	r2, [r3, #4]
 801e6f2:	697b      	ldr	r3, [r7, #20]
 801e6f4:	681b      	ldr	r3, [r3, #0]
 801e6f6:	685b      	ldr	r3, [r3, #4]
 801e6f8:	1ad3      	subs	r3, r2, r3
 801e6fa:	0fdb      	lsrs	r3, r3, #31
 801e6fc:	f003 0301 	and.w	r3, r3, #1
 801e700:	b2db      	uxtb	r3, r3
 801e702:	2b00      	cmp	r3, #0
 801e704:	d007      	beq.n	801e716 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801e706:	697b      	ldr	r3, [r7, #20]
 801e708:	681a      	ldr	r2, [r3, #0]
 801e70a:	693b      	ldr	r3, [r7, #16]
 801e70c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801e70e:	697b      	ldr	r3, [r7, #20]
 801e710:	693a      	ldr	r2, [r7, #16]
 801e712:	601a      	str	r2, [r3, #0]
        break;
 801e714:	e007      	b.n	801e726 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801e716:	697b      	ldr	r3, [r7, #20]
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	617b      	str	r3, [r7, #20]
 801e71c:	697b      	ldr	r3, [r7, #20]
 801e71e:	2b00      	cmp	r3, #0
 801e720:	d1e1      	bne.n	801e6e6 <sys_timeout_abs+0x86>
 801e722:	e000      	b.n	801e726 <sys_timeout_abs+0xc6>
    return;
 801e724:	bf00      	nop
      }
    }
  }
}
 801e726:	3718      	adds	r7, #24
 801e728:	46bd      	mov	sp, r7
 801e72a:	bd80      	pop	{r7, pc}
 801e72c:	08023dd0 	.word	0x08023dd0
 801e730:	08023e48 	.word	0x08023e48
 801e734:	08023e88 	.word	0x08023e88
 801e738:	2400f980 	.word	0x2400f980

0801e73c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801e73c:	b580      	push	{r7, lr}
 801e73e:	b086      	sub	sp, #24
 801e740:	af00      	add	r7, sp, #0
 801e742:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801e748:	697b      	ldr	r3, [r7, #20]
 801e74a:	685b      	ldr	r3, [r3, #4]
 801e74c:	4798      	blx	r3

  now = sys_now();
 801e74e:	f7ec feb7 	bl	800b4c0 <sys_now>
 801e752:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801e754:	697b      	ldr	r3, [r7, #20]
 801e756:	681a      	ldr	r2, [r3, #0]
 801e758:	4b0f      	ldr	r3, [pc, #60]	; (801e798 <lwip_cyclic_timer+0x5c>)
 801e75a:	681b      	ldr	r3, [r3, #0]
 801e75c:	4413      	add	r3, r2
 801e75e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801e760:	68fa      	ldr	r2, [r7, #12]
 801e762:	693b      	ldr	r3, [r7, #16]
 801e764:	1ad3      	subs	r3, r2, r3
 801e766:	0fdb      	lsrs	r3, r3, #31
 801e768:	f003 0301 	and.w	r3, r3, #1
 801e76c:	b2db      	uxtb	r3, r3
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d009      	beq.n	801e786 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801e772:	697b      	ldr	r3, [r7, #20]
 801e774:	681a      	ldr	r2, [r3, #0]
 801e776:	693b      	ldr	r3, [r7, #16]
 801e778:	4413      	add	r3, r2
 801e77a:	687a      	ldr	r2, [r7, #4]
 801e77c:	4907      	ldr	r1, [pc, #28]	; (801e79c <lwip_cyclic_timer+0x60>)
 801e77e:	4618      	mov	r0, r3
 801e780:	f7ff ff6e 	bl	801e660 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801e784:	e004      	b.n	801e790 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801e786:	687a      	ldr	r2, [r7, #4]
 801e788:	4904      	ldr	r1, [pc, #16]	; (801e79c <lwip_cyclic_timer+0x60>)
 801e78a:	68f8      	ldr	r0, [r7, #12]
 801e78c:	f7ff ff68 	bl	801e660 <sys_timeout_abs>
}
 801e790:	bf00      	nop
 801e792:	3718      	adds	r7, #24
 801e794:	46bd      	mov	sp, r7
 801e796:	bd80      	pop	{r7, pc}
 801e798:	2400f984 	.word	0x2400f984
 801e79c:	0801e73d 	.word	0x0801e73d

0801e7a0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801e7a0:	b580      	push	{r7, lr}
 801e7a2:	b082      	sub	sp, #8
 801e7a4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801e7a6:	2301      	movs	r3, #1
 801e7a8:	607b      	str	r3, [r7, #4]
 801e7aa:	e00e      	b.n	801e7ca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801e7ac:	4a0b      	ldr	r2, [pc, #44]	; (801e7dc <sys_timeouts_init+0x3c>)
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	00db      	lsls	r3, r3, #3
 801e7b8:	4a08      	ldr	r2, [pc, #32]	; (801e7dc <sys_timeouts_init+0x3c>)
 801e7ba:	4413      	add	r3, r2
 801e7bc:	461a      	mov	r2, r3
 801e7be:	4908      	ldr	r1, [pc, #32]	; (801e7e0 <sys_timeouts_init+0x40>)
 801e7c0:	f000 f810 	bl	801e7e4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	3301      	adds	r3, #1
 801e7c8:	607b      	str	r3, [r7, #4]
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	2b02      	cmp	r3, #2
 801e7ce:	d9ed      	bls.n	801e7ac <sys_timeouts_init+0xc>
  }
}
 801e7d0:	bf00      	nop
 801e7d2:	bf00      	nop
 801e7d4:	3708      	adds	r7, #8
 801e7d6:	46bd      	mov	sp, r7
 801e7d8:	bd80      	pop	{r7, pc}
 801e7da:	bf00      	nop
 801e7dc:	0802441c 	.word	0x0802441c
 801e7e0:	0801e73d 	.word	0x0801e73d

0801e7e4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801e7e4:	b580      	push	{r7, lr}
 801e7e6:	b086      	sub	sp, #24
 801e7e8:	af00      	add	r7, sp, #0
 801e7ea:	60f8      	str	r0, [r7, #12]
 801e7ec:	60b9      	str	r1, [r7, #8]
 801e7ee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e7f6:	d306      	bcc.n	801e806 <sys_timeout+0x22>
 801e7f8:	4b0a      	ldr	r3, [pc, #40]	; (801e824 <sys_timeout+0x40>)
 801e7fa:	f240 1229 	movw	r2, #297	; 0x129
 801e7fe:	490a      	ldr	r1, [pc, #40]	; (801e828 <sys_timeout+0x44>)
 801e800:	480a      	ldr	r0, [pc, #40]	; (801e82c <sys_timeout+0x48>)
 801e802:	f001 f8fb 	bl	801f9fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801e806:	f7ec fe5b 	bl	800b4c0 <sys_now>
 801e80a:	4602      	mov	r2, r0
 801e80c:	68fb      	ldr	r3, [r7, #12]
 801e80e:	4413      	add	r3, r2
 801e810:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801e812:	687a      	ldr	r2, [r7, #4]
 801e814:	68b9      	ldr	r1, [r7, #8]
 801e816:	6978      	ldr	r0, [r7, #20]
 801e818:	f7ff ff22 	bl	801e660 <sys_timeout_abs>
#endif
}
 801e81c:	bf00      	nop
 801e81e:	3718      	adds	r7, #24
 801e820:	46bd      	mov	sp, r7
 801e822:	bd80      	pop	{r7, pc}
 801e824:	08023dd0 	.word	0x08023dd0
 801e828:	08023eb0 	.word	0x08023eb0
 801e82c:	08023e88 	.word	0x08023e88

0801e830 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801e830:	b580      	push	{r7, lr}
 801e832:	b084      	sub	sp, #16
 801e834:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801e836:	f7ec fe43 	bl	800b4c0 <sys_now>
 801e83a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801e83c:	4b17      	ldr	r3, [pc, #92]	; (801e89c <sys_check_timeouts+0x6c>)
 801e83e:	681b      	ldr	r3, [r3, #0]
 801e840:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801e842:	68bb      	ldr	r3, [r7, #8]
 801e844:	2b00      	cmp	r3, #0
 801e846:	d022      	beq.n	801e88e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801e848:	68bb      	ldr	r3, [r7, #8]
 801e84a:	685b      	ldr	r3, [r3, #4]
 801e84c:	68fa      	ldr	r2, [r7, #12]
 801e84e:	1ad3      	subs	r3, r2, r3
 801e850:	0fdb      	lsrs	r3, r3, #31
 801e852:	f003 0301 	and.w	r3, r3, #1
 801e856:	b2db      	uxtb	r3, r3
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d11a      	bne.n	801e892 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801e85c:	68bb      	ldr	r3, [r7, #8]
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	4a0e      	ldr	r2, [pc, #56]	; (801e89c <sys_check_timeouts+0x6c>)
 801e862:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801e864:	68bb      	ldr	r3, [r7, #8]
 801e866:	689b      	ldr	r3, [r3, #8]
 801e868:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801e86a:	68bb      	ldr	r3, [r7, #8]
 801e86c:	68db      	ldr	r3, [r3, #12]
 801e86e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801e870:	68bb      	ldr	r3, [r7, #8]
 801e872:	685b      	ldr	r3, [r3, #4]
 801e874:	4a0a      	ldr	r2, [pc, #40]	; (801e8a0 <sys_check_timeouts+0x70>)
 801e876:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801e878:	68b9      	ldr	r1, [r7, #8]
 801e87a:	200a      	movs	r0, #10
 801e87c:	f7f8 f91e 	bl	8016abc <memp_free>
    if (handler != NULL) {
 801e880:	687b      	ldr	r3, [r7, #4]
 801e882:	2b00      	cmp	r3, #0
 801e884:	d0da      	beq.n	801e83c <sys_check_timeouts+0xc>
      handler(arg);
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	6838      	ldr	r0, [r7, #0]
 801e88a:	4798      	blx	r3
  do {
 801e88c:	e7d6      	b.n	801e83c <sys_check_timeouts+0xc>
      return;
 801e88e:	bf00      	nop
 801e890:	e000      	b.n	801e894 <sys_check_timeouts+0x64>
      return;
 801e892:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801e894:	3710      	adds	r7, #16
 801e896:	46bd      	mov	sp, r7
 801e898:	bd80      	pop	{r7, pc}
 801e89a:	bf00      	nop
 801e89c:	2400f980 	.word	0x2400f980
 801e8a0:	2400f984 	.word	0x2400f984

0801e8a4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801e8a4:	b580      	push	{r7, lr}
 801e8a6:	b082      	sub	sp, #8
 801e8a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801e8aa:	4b16      	ldr	r3, [pc, #88]	; (801e904 <sys_timeouts_sleeptime+0x60>)
 801e8ac:	681b      	ldr	r3, [r3, #0]
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	d102      	bne.n	801e8b8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801e8b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e8b6:	e020      	b.n	801e8fa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801e8b8:	f7ec fe02 	bl	800b4c0 <sys_now>
 801e8bc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801e8be:	4b11      	ldr	r3, [pc, #68]	; (801e904 <sys_timeouts_sleeptime+0x60>)
 801e8c0:	681b      	ldr	r3, [r3, #0]
 801e8c2:	685a      	ldr	r2, [r3, #4]
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	1ad3      	subs	r3, r2, r3
 801e8c8:	0fdb      	lsrs	r3, r3, #31
 801e8ca:	f003 0301 	and.w	r3, r3, #1
 801e8ce:	b2db      	uxtb	r3, r3
 801e8d0:	2b00      	cmp	r3, #0
 801e8d2:	d001      	beq.n	801e8d8 <sys_timeouts_sleeptime+0x34>
    return 0;
 801e8d4:	2300      	movs	r3, #0
 801e8d6:	e010      	b.n	801e8fa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801e8d8:	4b0a      	ldr	r3, [pc, #40]	; (801e904 <sys_timeouts_sleeptime+0x60>)
 801e8da:	681b      	ldr	r3, [r3, #0]
 801e8dc:	685a      	ldr	r2, [r3, #4]
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	1ad3      	subs	r3, r2, r3
 801e8e2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801e8e4:	683b      	ldr	r3, [r7, #0]
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	da06      	bge.n	801e8f8 <sys_timeouts_sleeptime+0x54>
 801e8ea:	4b07      	ldr	r3, [pc, #28]	; (801e908 <sys_timeouts_sleeptime+0x64>)
 801e8ec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801e8f0:	4906      	ldr	r1, [pc, #24]	; (801e90c <sys_timeouts_sleeptime+0x68>)
 801e8f2:	4807      	ldr	r0, [pc, #28]	; (801e910 <sys_timeouts_sleeptime+0x6c>)
 801e8f4:	f001 f882 	bl	801f9fc <iprintf>
    return ret;
 801e8f8:	683b      	ldr	r3, [r7, #0]
  }
}
 801e8fa:	4618      	mov	r0, r3
 801e8fc:	3708      	adds	r7, #8
 801e8fe:	46bd      	mov	sp, r7
 801e900:	bd80      	pop	{r7, pc}
 801e902:	bf00      	nop
 801e904:	2400f980 	.word	0x2400f980
 801e908:	08023dd0 	.word	0x08023dd0
 801e90c:	08023ee8 	.word	0x08023ee8
 801e910:	08023e88 	.word	0x08023e88

0801e914 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801e914:	b580      	push	{r7, lr}
 801e916:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801e918:	f001 f8fe 	bl	801fb18 <rand>
 801e91c:	4603      	mov	r3, r0
 801e91e:	b29b      	uxth	r3, r3
 801e920:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801e924:	b29b      	uxth	r3, r3
 801e926:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801e92a:	b29a      	uxth	r2, r3
 801e92c:	4b01      	ldr	r3, [pc, #4]	; (801e934 <udp_init+0x20>)
 801e92e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801e930:	bf00      	nop
 801e932:	bd80      	pop	{r7, pc}
 801e934:	24000030 	.word	0x24000030

0801e938 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801e938:	b480      	push	{r7}
 801e93a:	b083      	sub	sp, #12
 801e93c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801e93e:	2300      	movs	r3, #0
 801e940:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801e942:	4b17      	ldr	r3, [pc, #92]	; (801e9a0 <udp_new_port+0x68>)
 801e944:	881b      	ldrh	r3, [r3, #0]
 801e946:	1c5a      	adds	r2, r3, #1
 801e948:	b291      	uxth	r1, r2
 801e94a:	4a15      	ldr	r2, [pc, #84]	; (801e9a0 <udp_new_port+0x68>)
 801e94c:	8011      	strh	r1, [r2, #0]
 801e94e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e952:	4293      	cmp	r3, r2
 801e954:	d103      	bne.n	801e95e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801e956:	4b12      	ldr	r3, [pc, #72]	; (801e9a0 <udp_new_port+0x68>)
 801e958:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801e95c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801e95e:	4b11      	ldr	r3, [pc, #68]	; (801e9a4 <udp_new_port+0x6c>)
 801e960:	681b      	ldr	r3, [r3, #0]
 801e962:	603b      	str	r3, [r7, #0]
 801e964:	e011      	b.n	801e98a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801e966:	683b      	ldr	r3, [r7, #0]
 801e968:	8a5a      	ldrh	r2, [r3, #18]
 801e96a:	4b0d      	ldr	r3, [pc, #52]	; (801e9a0 <udp_new_port+0x68>)
 801e96c:	881b      	ldrh	r3, [r3, #0]
 801e96e:	429a      	cmp	r2, r3
 801e970:	d108      	bne.n	801e984 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801e972:	88fb      	ldrh	r3, [r7, #6]
 801e974:	3301      	adds	r3, #1
 801e976:	80fb      	strh	r3, [r7, #6]
 801e978:	88fb      	ldrh	r3, [r7, #6]
 801e97a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801e97e:	d3e0      	bcc.n	801e942 <udp_new_port+0xa>
        return 0;
 801e980:	2300      	movs	r3, #0
 801e982:	e007      	b.n	801e994 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801e984:	683b      	ldr	r3, [r7, #0]
 801e986:	68db      	ldr	r3, [r3, #12]
 801e988:	603b      	str	r3, [r7, #0]
 801e98a:	683b      	ldr	r3, [r7, #0]
 801e98c:	2b00      	cmp	r3, #0
 801e98e:	d1ea      	bne.n	801e966 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801e990:	4b03      	ldr	r3, [pc, #12]	; (801e9a0 <udp_new_port+0x68>)
 801e992:	881b      	ldrh	r3, [r3, #0]
}
 801e994:	4618      	mov	r0, r3
 801e996:	370c      	adds	r7, #12
 801e998:	46bd      	mov	sp, r7
 801e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e99e:	4770      	bx	lr
 801e9a0:	24000030 	.word	0x24000030
 801e9a4:	2400f98c 	.word	0x2400f98c

0801e9a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801e9a8:	b580      	push	{r7, lr}
 801e9aa:	b084      	sub	sp, #16
 801e9ac:	af00      	add	r7, sp, #0
 801e9ae:	60f8      	str	r0, [r7, #12]
 801e9b0:	60b9      	str	r1, [r7, #8]
 801e9b2:	4613      	mov	r3, r2
 801e9b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801e9b6:	68fb      	ldr	r3, [r7, #12]
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	d105      	bne.n	801e9c8 <udp_input_local_match+0x20>
 801e9bc:	4b27      	ldr	r3, [pc, #156]	; (801ea5c <udp_input_local_match+0xb4>)
 801e9be:	2287      	movs	r2, #135	; 0x87
 801e9c0:	4927      	ldr	r1, [pc, #156]	; (801ea60 <udp_input_local_match+0xb8>)
 801e9c2:	4828      	ldr	r0, [pc, #160]	; (801ea64 <udp_input_local_match+0xbc>)
 801e9c4:	f001 f81a 	bl	801f9fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801e9c8:	68bb      	ldr	r3, [r7, #8]
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	d105      	bne.n	801e9da <udp_input_local_match+0x32>
 801e9ce:	4b23      	ldr	r3, [pc, #140]	; (801ea5c <udp_input_local_match+0xb4>)
 801e9d0:	2288      	movs	r2, #136	; 0x88
 801e9d2:	4925      	ldr	r1, [pc, #148]	; (801ea68 <udp_input_local_match+0xc0>)
 801e9d4:	4823      	ldr	r0, [pc, #140]	; (801ea64 <udp_input_local_match+0xbc>)
 801e9d6:	f001 f811 	bl	801f9fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801e9da:	68fb      	ldr	r3, [r7, #12]
 801e9dc:	7a1b      	ldrb	r3, [r3, #8]
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	d00b      	beq.n	801e9fa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801e9e2:	68fb      	ldr	r3, [r7, #12]
 801e9e4:	7a1a      	ldrb	r2, [r3, #8]
 801e9e6:	4b21      	ldr	r3, [pc, #132]	; (801ea6c <udp_input_local_match+0xc4>)
 801e9e8:	685b      	ldr	r3, [r3, #4]
 801e9ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e9ee:	3301      	adds	r3, #1
 801e9f0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801e9f2:	429a      	cmp	r2, r3
 801e9f4:	d001      	beq.n	801e9fa <udp_input_local_match+0x52>
    return 0;
 801e9f6:	2300      	movs	r3, #0
 801e9f8:	e02b      	b.n	801ea52 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801e9fa:	79fb      	ldrb	r3, [r7, #7]
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	d018      	beq.n	801ea32 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ea00:	68fb      	ldr	r3, [r7, #12]
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	d013      	beq.n	801ea2e <udp_input_local_match+0x86>
 801ea06:	68fb      	ldr	r3, [r7, #12]
 801ea08:	681b      	ldr	r3, [r3, #0]
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	d00f      	beq.n	801ea2e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ea0e:	4b17      	ldr	r3, [pc, #92]	; (801ea6c <udp_input_local_match+0xc4>)
 801ea10:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ea12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ea16:	d00a      	beq.n	801ea2e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ea18:	68fb      	ldr	r3, [r7, #12]
 801ea1a:	681a      	ldr	r2, [r3, #0]
 801ea1c:	4b13      	ldr	r3, [pc, #76]	; (801ea6c <udp_input_local_match+0xc4>)
 801ea1e:	695b      	ldr	r3, [r3, #20]
 801ea20:	405a      	eors	r2, r3
 801ea22:	68bb      	ldr	r3, [r7, #8]
 801ea24:	3308      	adds	r3, #8
 801ea26:	681b      	ldr	r3, [r3, #0]
 801ea28:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	d110      	bne.n	801ea50 <udp_input_local_match+0xa8>
          return 1;
 801ea2e:	2301      	movs	r3, #1
 801ea30:	e00f      	b.n	801ea52 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ea32:	68fb      	ldr	r3, [r7, #12]
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	d009      	beq.n	801ea4c <udp_input_local_match+0xa4>
 801ea38:	68fb      	ldr	r3, [r7, #12]
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	d005      	beq.n	801ea4c <udp_input_local_match+0xa4>
 801ea40:	68fb      	ldr	r3, [r7, #12]
 801ea42:	681a      	ldr	r2, [r3, #0]
 801ea44:	4b09      	ldr	r3, [pc, #36]	; (801ea6c <udp_input_local_match+0xc4>)
 801ea46:	695b      	ldr	r3, [r3, #20]
 801ea48:	429a      	cmp	r2, r3
 801ea4a:	d101      	bne.n	801ea50 <udp_input_local_match+0xa8>
        return 1;
 801ea4c:	2301      	movs	r3, #1
 801ea4e:	e000      	b.n	801ea52 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801ea50:	2300      	movs	r3, #0
}
 801ea52:	4618      	mov	r0, r3
 801ea54:	3710      	adds	r7, #16
 801ea56:	46bd      	mov	sp, r7
 801ea58:	bd80      	pop	{r7, pc}
 801ea5a:	bf00      	nop
 801ea5c:	08023efc 	.word	0x08023efc
 801ea60:	08023f70 	.word	0x08023f70
 801ea64:	08023f94 	.word	0x08023f94
 801ea68:	08023fbc 	.word	0x08023fbc
 801ea6c:	24008e50 	.word	0x24008e50

0801ea70 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801ea70:	b590      	push	{r4, r7, lr}
 801ea72:	b08d      	sub	sp, #52	; 0x34
 801ea74:	af02      	add	r7, sp, #8
 801ea76:	6078      	str	r0, [r7, #4]
 801ea78:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801ea7a:	2300      	movs	r3, #0
 801ea7c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ea7e:	687b      	ldr	r3, [r7, #4]
 801ea80:	2b00      	cmp	r3, #0
 801ea82:	d105      	bne.n	801ea90 <udp_input+0x20>
 801ea84:	4b7c      	ldr	r3, [pc, #496]	; (801ec78 <udp_input+0x208>)
 801ea86:	22cf      	movs	r2, #207	; 0xcf
 801ea88:	497c      	ldr	r1, [pc, #496]	; (801ec7c <udp_input+0x20c>)
 801ea8a:	487d      	ldr	r0, [pc, #500]	; (801ec80 <udp_input+0x210>)
 801ea8c:	f000 ffb6 	bl	801f9fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ea90:	683b      	ldr	r3, [r7, #0]
 801ea92:	2b00      	cmp	r3, #0
 801ea94:	d105      	bne.n	801eaa2 <udp_input+0x32>
 801ea96:	4b78      	ldr	r3, [pc, #480]	; (801ec78 <udp_input+0x208>)
 801ea98:	22d0      	movs	r2, #208	; 0xd0
 801ea9a:	497a      	ldr	r1, [pc, #488]	; (801ec84 <udp_input+0x214>)
 801ea9c:	4878      	ldr	r0, [pc, #480]	; (801ec80 <udp_input+0x210>)
 801ea9e:	f000 ffad 	bl	801f9fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	895b      	ldrh	r3, [r3, #10]
 801eaa6:	2b07      	cmp	r3, #7
 801eaa8:	d803      	bhi.n	801eab2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801eaaa:	6878      	ldr	r0, [r7, #4]
 801eaac:	f7f8 fefa 	bl	80178a4 <pbuf_free>
    goto end;
 801eab0:	e0de      	b.n	801ec70 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	685b      	ldr	r3, [r3, #4]
 801eab6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801eab8:	4b73      	ldr	r3, [pc, #460]	; (801ec88 <udp_input+0x218>)
 801eaba:	695b      	ldr	r3, [r3, #20]
 801eabc:	4a72      	ldr	r2, [pc, #456]	; (801ec88 <udp_input+0x218>)
 801eabe:	6812      	ldr	r2, [r2, #0]
 801eac0:	4611      	mov	r1, r2
 801eac2:	4618      	mov	r0, r3
 801eac4:	f7f6 fc88 	bl	80153d8 <ip4_addr_isbroadcast_u32>
 801eac8:	4603      	mov	r3, r0
 801eaca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801eacc:	697b      	ldr	r3, [r7, #20]
 801eace:	881b      	ldrh	r3, [r3, #0]
 801ead0:	b29b      	uxth	r3, r3
 801ead2:	4618      	mov	r0, r3
 801ead4:	f7f4 ff12 	bl	80138fc <lwip_htons>
 801ead8:	4603      	mov	r3, r0
 801eada:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801eadc:	697b      	ldr	r3, [r7, #20]
 801eade:	885b      	ldrh	r3, [r3, #2]
 801eae0:	b29b      	uxth	r3, r3
 801eae2:	4618      	mov	r0, r3
 801eae4:	f7f4 ff0a 	bl	80138fc <lwip_htons>
 801eae8:	4603      	mov	r3, r0
 801eaea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801eaec:	2300      	movs	r3, #0
 801eaee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801eaf0:	2300      	movs	r3, #0
 801eaf2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801eaf4:	2300      	movs	r3, #0
 801eaf6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801eaf8:	4b64      	ldr	r3, [pc, #400]	; (801ec8c <udp_input+0x21c>)
 801eafa:	681b      	ldr	r3, [r3, #0]
 801eafc:	627b      	str	r3, [r7, #36]	; 0x24
 801eafe:	e054      	b.n	801ebaa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801eb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb02:	8a5b      	ldrh	r3, [r3, #18]
 801eb04:	89fa      	ldrh	r2, [r7, #14]
 801eb06:	429a      	cmp	r2, r3
 801eb08:	d14a      	bne.n	801eba0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801eb0a:	7cfb      	ldrb	r3, [r7, #19]
 801eb0c:	461a      	mov	r2, r3
 801eb0e:	6839      	ldr	r1, [r7, #0]
 801eb10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb12:	f7ff ff49 	bl	801e9a8 <udp_input_local_match>
 801eb16:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801eb18:	2b00      	cmp	r3, #0
 801eb1a:	d041      	beq.n	801eba0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb1e:	7c1b      	ldrb	r3, [r3, #16]
 801eb20:	f003 0304 	and.w	r3, r3, #4
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	d11d      	bne.n	801eb64 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801eb28:	69fb      	ldr	r3, [r7, #28]
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d102      	bne.n	801eb34 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801eb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb30:	61fb      	str	r3, [r7, #28]
 801eb32:	e017      	b.n	801eb64 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801eb34:	7cfb      	ldrb	r3, [r7, #19]
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d014      	beq.n	801eb64 <udp_input+0xf4>
 801eb3a:	4b53      	ldr	r3, [pc, #332]	; (801ec88 <udp_input+0x218>)
 801eb3c:	695b      	ldr	r3, [r3, #20]
 801eb3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801eb42:	d10f      	bne.n	801eb64 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801eb44:	69fb      	ldr	r3, [r7, #28]
 801eb46:	681a      	ldr	r2, [r3, #0]
 801eb48:	683b      	ldr	r3, [r7, #0]
 801eb4a:	3304      	adds	r3, #4
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	429a      	cmp	r2, r3
 801eb50:	d008      	beq.n	801eb64 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801eb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb54:	681a      	ldr	r2, [r3, #0]
 801eb56:	683b      	ldr	r3, [r7, #0]
 801eb58:	3304      	adds	r3, #4
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	429a      	cmp	r2, r3
 801eb5e:	d101      	bne.n	801eb64 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801eb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb62:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb66:	8a9b      	ldrh	r3, [r3, #20]
 801eb68:	8a3a      	ldrh	r2, [r7, #16]
 801eb6a:	429a      	cmp	r2, r3
 801eb6c:	d118      	bne.n	801eba0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801eb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb70:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	d005      	beq.n	801eb82 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801eb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb78:	685a      	ldr	r2, [r3, #4]
 801eb7a:	4b43      	ldr	r3, [pc, #268]	; (801ec88 <udp_input+0x218>)
 801eb7c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801eb7e:	429a      	cmp	r2, r3
 801eb80:	d10e      	bne.n	801eba0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801eb82:	6a3b      	ldr	r3, [r7, #32]
 801eb84:	2b00      	cmp	r3, #0
 801eb86:	d014      	beq.n	801ebb2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801eb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb8a:	68da      	ldr	r2, [r3, #12]
 801eb8c:	6a3b      	ldr	r3, [r7, #32]
 801eb8e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801eb90:	4b3e      	ldr	r3, [pc, #248]	; (801ec8c <udp_input+0x21c>)
 801eb92:	681a      	ldr	r2, [r3, #0]
 801eb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb96:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801eb98:	4a3c      	ldr	r2, [pc, #240]	; (801ec8c <udp_input+0x21c>)
 801eb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb9c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801eb9e:	e008      	b.n	801ebb2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801eba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eba2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eba6:	68db      	ldr	r3, [r3, #12]
 801eba8:	627b      	str	r3, [r7, #36]	; 0x24
 801ebaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	d1a7      	bne.n	801eb00 <udp_input+0x90>
 801ebb0:	e000      	b.n	801ebb4 <udp_input+0x144>
        break;
 801ebb2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801ebb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebb6:	2b00      	cmp	r3, #0
 801ebb8:	d101      	bne.n	801ebbe <udp_input+0x14e>
    pcb = uncon_pcb;
 801ebba:	69fb      	ldr	r3, [r7, #28]
 801ebbc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801ebbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d002      	beq.n	801ebca <udp_input+0x15a>
    for_us = 1;
 801ebc4:	2301      	movs	r3, #1
 801ebc6:	76fb      	strb	r3, [r7, #27]
 801ebc8:	e00a      	b.n	801ebe0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801ebca:	683b      	ldr	r3, [r7, #0]
 801ebcc:	3304      	adds	r3, #4
 801ebce:	681a      	ldr	r2, [r3, #0]
 801ebd0:	4b2d      	ldr	r3, [pc, #180]	; (801ec88 <udp_input+0x218>)
 801ebd2:	695b      	ldr	r3, [r3, #20]
 801ebd4:	429a      	cmp	r2, r3
 801ebd6:	bf0c      	ite	eq
 801ebd8:	2301      	moveq	r3, #1
 801ebda:	2300      	movne	r3, #0
 801ebdc:	b2db      	uxtb	r3, r3
 801ebde:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801ebe0:	7efb      	ldrb	r3, [r7, #27]
 801ebe2:	2b00      	cmp	r3, #0
 801ebe4:	d041      	beq.n	801ec6a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801ebe6:	2108      	movs	r1, #8
 801ebe8:	6878      	ldr	r0, [r7, #4]
 801ebea:	f7f8 fdd5 	bl	8017798 <pbuf_remove_header>
 801ebee:	4603      	mov	r3, r0
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d00a      	beq.n	801ec0a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ebf4:	4b20      	ldr	r3, [pc, #128]	; (801ec78 <udp_input+0x208>)
 801ebf6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ebfa:	4925      	ldr	r1, [pc, #148]	; (801ec90 <udp_input+0x220>)
 801ebfc:	4820      	ldr	r0, [pc, #128]	; (801ec80 <udp_input+0x210>)
 801ebfe:	f000 fefd 	bl	801f9fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801ec02:	6878      	ldr	r0, [r7, #4]
 801ec04:	f7f8 fe4e 	bl	80178a4 <pbuf_free>
      goto end;
 801ec08:	e032      	b.n	801ec70 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801ec0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	d012      	beq.n	801ec36 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ec10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec12:	699b      	ldr	r3, [r3, #24]
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d00a      	beq.n	801ec2e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec1a:	699c      	ldr	r4, [r3, #24]
 801ec1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec1e:	69d8      	ldr	r0, [r3, #28]
 801ec20:	8a3b      	ldrh	r3, [r7, #16]
 801ec22:	9300      	str	r3, [sp, #0]
 801ec24:	4b1b      	ldr	r3, [pc, #108]	; (801ec94 <udp_input+0x224>)
 801ec26:	687a      	ldr	r2, [r7, #4]
 801ec28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ec2a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ec2c:	e021      	b.n	801ec72 <udp_input+0x202>
        pbuf_free(p);
 801ec2e:	6878      	ldr	r0, [r7, #4]
 801ec30:	f7f8 fe38 	bl	80178a4 <pbuf_free>
        goto end;
 801ec34:	e01c      	b.n	801ec70 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ec36:	7cfb      	ldrb	r3, [r7, #19]
 801ec38:	2b00      	cmp	r3, #0
 801ec3a:	d112      	bne.n	801ec62 <udp_input+0x1f2>
 801ec3c:	4b12      	ldr	r3, [pc, #72]	; (801ec88 <udp_input+0x218>)
 801ec3e:	695b      	ldr	r3, [r3, #20]
 801ec40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ec44:	2be0      	cmp	r3, #224	; 0xe0
 801ec46:	d00c      	beq.n	801ec62 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ec48:	4b0f      	ldr	r3, [pc, #60]	; (801ec88 <udp_input+0x218>)
 801ec4a:	899b      	ldrh	r3, [r3, #12]
 801ec4c:	3308      	adds	r3, #8
 801ec4e:	b29b      	uxth	r3, r3
 801ec50:	b21b      	sxth	r3, r3
 801ec52:	4619      	mov	r1, r3
 801ec54:	6878      	ldr	r0, [r7, #4]
 801ec56:	f7f8 fe12 	bl	801787e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ec5a:	2103      	movs	r1, #3
 801ec5c:	6878      	ldr	r0, [r7, #4]
 801ec5e:	f7f5 ffbd 	bl	8014bdc <icmp_dest_unreach>
      pbuf_free(p);
 801ec62:	6878      	ldr	r0, [r7, #4]
 801ec64:	f7f8 fe1e 	bl	80178a4 <pbuf_free>
  return;
 801ec68:	e003      	b.n	801ec72 <udp_input+0x202>
    pbuf_free(p);
 801ec6a:	6878      	ldr	r0, [r7, #4]
 801ec6c:	f7f8 fe1a 	bl	80178a4 <pbuf_free>
  return;
 801ec70:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ec72:	372c      	adds	r7, #44	; 0x2c
 801ec74:	46bd      	mov	sp, r7
 801ec76:	bd90      	pop	{r4, r7, pc}
 801ec78:	08023efc 	.word	0x08023efc
 801ec7c:	08023fe4 	.word	0x08023fe4
 801ec80:	08023f94 	.word	0x08023f94
 801ec84:	08023ffc 	.word	0x08023ffc
 801ec88:	24008e50 	.word	0x24008e50
 801ec8c:	2400f98c 	.word	0x2400f98c
 801ec90:	08024018 	.word	0x08024018
 801ec94:	24008e60 	.word	0x24008e60

0801ec98 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ec98:	b580      	push	{r7, lr}
 801ec9a:	b086      	sub	sp, #24
 801ec9c:	af00      	add	r7, sp, #0
 801ec9e:	60f8      	str	r0, [r7, #12]
 801eca0:	60b9      	str	r1, [r7, #8]
 801eca2:	4613      	mov	r3, r2
 801eca4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801eca6:	68bb      	ldr	r3, [r7, #8]
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	d101      	bne.n	801ecb0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801ecac:	4b39      	ldr	r3, [pc, #228]	; (801ed94 <udp_bind+0xfc>)
 801ecae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801ecb0:	68fb      	ldr	r3, [r7, #12]
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d109      	bne.n	801ecca <udp_bind+0x32>
 801ecb6:	4b38      	ldr	r3, [pc, #224]	; (801ed98 <udp_bind+0x100>)
 801ecb8:	f240 32b7 	movw	r2, #951	; 0x3b7
 801ecbc:	4937      	ldr	r1, [pc, #220]	; (801ed9c <udp_bind+0x104>)
 801ecbe:	4838      	ldr	r0, [pc, #224]	; (801eda0 <udp_bind+0x108>)
 801ecc0:	f000 fe9c 	bl	801f9fc <iprintf>
 801ecc4:	f06f 030f 	mvn.w	r3, #15
 801ecc8:	e060      	b.n	801ed8c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801ecca:	2300      	movs	r3, #0
 801eccc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ecce:	4b35      	ldr	r3, [pc, #212]	; (801eda4 <udp_bind+0x10c>)
 801ecd0:	681b      	ldr	r3, [r3, #0]
 801ecd2:	617b      	str	r3, [r7, #20]
 801ecd4:	e009      	b.n	801ecea <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ecd6:	68fa      	ldr	r2, [r7, #12]
 801ecd8:	697b      	ldr	r3, [r7, #20]
 801ecda:	429a      	cmp	r2, r3
 801ecdc:	d102      	bne.n	801ece4 <udp_bind+0x4c>
      rebind = 1;
 801ecde:	2301      	movs	r3, #1
 801ece0:	74fb      	strb	r3, [r7, #19]
      break;
 801ece2:	e005      	b.n	801ecf0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ece4:	697b      	ldr	r3, [r7, #20]
 801ece6:	68db      	ldr	r3, [r3, #12]
 801ece8:	617b      	str	r3, [r7, #20]
 801ecea:	697b      	ldr	r3, [r7, #20]
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	d1f2      	bne.n	801ecd6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801ecf0:	88fb      	ldrh	r3, [r7, #6]
 801ecf2:	2b00      	cmp	r3, #0
 801ecf4:	d109      	bne.n	801ed0a <udp_bind+0x72>
    port = udp_new_port();
 801ecf6:	f7ff fe1f 	bl	801e938 <udp_new_port>
 801ecfa:	4603      	mov	r3, r0
 801ecfc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801ecfe:	88fb      	ldrh	r3, [r7, #6]
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	d12c      	bne.n	801ed5e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801ed04:	f06f 0307 	mvn.w	r3, #7
 801ed08:	e040      	b.n	801ed8c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ed0a:	4b26      	ldr	r3, [pc, #152]	; (801eda4 <udp_bind+0x10c>)
 801ed0c:	681b      	ldr	r3, [r3, #0]
 801ed0e:	617b      	str	r3, [r7, #20]
 801ed10:	e022      	b.n	801ed58 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801ed12:	68fa      	ldr	r2, [r7, #12]
 801ed14:	697b      	ldr	r3, [r7, #20]
 801ed16:	429a      	cmp	r2, r3
 801ed18:	d01b      	beq.n	801ed52 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801ed1a:	697b      	ldr	r3, [r7, #20]
 801ed1c:	8a5b      	ldrh	r3, [r3, #18]
 801ed1e:	88fa      	ldrh	r2, [r7, #6]
 801ed20:	429a      	cmp	r2, r3
 801ed22:	d116      	bne.n	801ed52 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ed24:	697b      	ldr	r3, [r7, #20]
 801ed26:	681a      	ldr	r2, [r3, #0]
 801ed28:	68bb      	ldr	r3, [r7, #8]
 801ed2a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801ed2c:	429a      	cmp	r2, r3
 801ed2e:	d00d      	beq.n	801ed4c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ed30:	68bb      	ldr	r3, [r7, #8]
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	d00a      	beq.n	801ed4c <udp_bind+0xb4>
 801ed36:	68bb      	ldr	r3, [r7, #8]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	d006      	beq.n	801ed4c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ed3e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	d003      	beq.n	801ed4c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ed44:	697b      	ldr	r3, [r7, #20]
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d102      	bne.n	801ed52 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801ed4c:	f06f 0307 	mvn.w	r3, #7
 801ed50:	e01c      	b.n	801ed8c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ed52:	697b      	ldr	r3, [r7, #20]
 801ed54:	68db      	ldr	r3, [r3, #12]
 801ed56:	617b      	str	r3, [r7, #20]
 801ed58:	697b      	ldr	r3, [r7, #20]
 801ed5a:	2b00      	cmp	r3, #0
 801ed5c:	d1d9      	bne.n	801ed12 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ed5e:	68bb      	ldr	r3, [r7, #8]
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	d002      	beq.n	801ed6a <udp_bind+0xd2>
 801ed64:	68bb      	ldr	r3, [r7, #8]
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	e000      	b.n	801ed6c <udp_bind+0xd4>
 801ed6a:	2300      	movs	r3, #0
 801ed6c:	68fa      	ldr	r2, [r7, #12]
 801ed6e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801ed70:	68fb      	ldr	r3, [r7, #12]
 801ed72:	88fa      	ldrh	r2, [r7, #6]
 801ed74:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801ed76:	7cfb      	ldrb	r3, [r7, #19]
 801ed78:	2b00      	cmp	r3, #0
 801ed7a:	d106      	bne.n	801ed8a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801ed7c:	4b09      	ldr	r3, [pc, #36]	; (801eda4 <udp_bind+0x10c>)
 801ed7e:	681a      	ldr	r2, [r3, #0]
 801ed80:	68fb      	ldr	r3, [r7, #12]
 801ed82:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801ed84:	4a07      	ldr	r2, [pc, #28]	; (801eda4 <udp_bind+0x10c>)
 801ed86:	68fb      	ldr	r3, [r7, #12]
 801ed88:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801ed8a:	2300      	movs	r3, #0
}
 801ed8c:	4618      	mov	r0, r3
 801ed8e:	3718      	adds	r7, #24
 801ed90:	46bd      	mov	sp, r7
 801ed92:	bd80      	pop	{r7, pc}
 801ed94:	08024318 	.word	0x08024318
 801ed98:	08023efc 	.word	0x08023efc
 801ed9c:	08024208 	.word	0x08024208
 801eda0:	08023f94 	.word	0x08023f94
 801eda4:	2400f98c 	.word	0x2400f98c

0801eda8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801eda8:	b580      	push	{r7, lr}
 801edaa:	b084      	sub	sp, #16
 801edac:	af00      	add	r7, sp, #0
 801edae:	60f8      	str	r0, [r7, #12]
 801edb0:	60b9      	str	r1, [r7, #8]
 801edb2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801edb4:	68fb      	ldr	r3, [r7, #12]
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	d107      	bne.n	801edca <udp_recv+0x22>
 801edba:	4b08      	ldr	r3, [pc, #32]	; (801eddc <udp_recv+0x34>)
 801edbc:	f240 428a 	movw	r2, #1162	; 0x48a
 801edc0:	4907      	ldr	r1, [pc, #28]	; (801ede0 <udp_recv+0x38>)
 801edc2:	4808      	ldr	r0, [pc, #32]	; (801ede4 <udp_recv+0x3c>)
 801edc4:	f000 fe1a 	bl	801f9fc <iprintf>
 801edc8:	e005      	b.n	801edd6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801edca:	68fb      	ldr	r3, [r7, #12]
 801edcc:	68ba      	ldr	r2, [r7, #8]
 801edce:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801edd0:	68fb      	ldr	r3, [r7, #12]
 801edd2:	687a      	ldr	r2, [r7, #4]
 801edd4:	61da      	str	r2, [r3, #28]
}
 801edd6:	3710      	adds	r7, #16
 801edd8:	46bd      	mov	sp, r7
 801edda:	bd80      	pop	{r7, pc}
 801eddc:	08023efc 	.word	0x08023efc
 801ede0:	08024274 	.word	0x08024274
 801ede4:	08023f94 	.word	0x08023f94

0801ede8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801ede8:	b580      	push	{r7, lr}
 801edea:	b084      	sub	sp, #16
 801edec:	af00      	add	r7, sp, #0
 801edee:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	d107      	bne.n	801ee06 <udp_remove+0x1e>
 801edf6:	4b19      	ldr	r3, [pc, #100]	; (801ee5c <udp_remove+0x74>)
 801edf8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801edfc:	4918      	ldr	r1, [pc, #96]	; (801ee60 <udp_remove+0x78>)
 801edfe:	4819      	ldr	r0, [pc, #100]	; (801ee64 <udp_remove+0x7c>)
 801ee00:	f000 fdfc 	bl	801f9fc <iprintf>
 801ee04:	e026      	b.n	801ee54 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ee06:	4b18      	ldr	r3, [pc, #96]	; (801ee68 <udp_remove+0x80>)
 801ee08:	681b      	ldr	r3, [r3, #0]
 801ee0a:	687a      	ldr	r2, [r7, #4]
 801ee0c:	429a      	cmp	r2, r3
 801ee0e:	d105      	bne.n	801ee1c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801ee10:	4b15      	ldr	r3, [pc, #84]	; (801ee68 <udp_remove+0x80>)
 801ee12:	681b      	ldr	r3, [r3, #0]
 801ee14:	68db      	ldr	r3, [r3, #12]
 801ee16:	4a14      	ldr	r2, [pc, #80]	; (801ee68 <udp_remove+0x80>)
 801ee18:	6013      	str	r3, [r2, #0]
 801ee1a:	e017      	b.n	801ee4c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ee1c:	4b12      	ldr	r3, [pc, #72]	; (801ee68 <udp_remove+0x80>)
 801ee1e:	681b      	ldr	r3, [r3, #0]
 801ee20:	60fb      	str	r3, [r7, #12]
 801ee22:	e010      	b.n	801ee46 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801ee24:	68fb      	ldr	r3, [r7, #12]
 801ee26:	68db      	ldr	r3, [r3, #12]
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d009      	beq.n	801ee40 <udp_remove+0x58>
 801ee2c:	68fb      	ldr	r3, [r7, #12]
 801ee2e:	68db      	ldr	r3, [r3, #12]
 801ee30:	687a      	ldr	r2, [r7, #4]
 801ee32:	429a      	cmp	r2, r3
 801ee34:	d104      	bne.n	801ee40 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	68da      	ldr	r2, [r3, #12]
 801ee3a:	68fb      	ldr	r3, [r7, #12]
 801ee3c:	60da      	str	r2, [r3, #12]
        break;
 801ee3e:	e005      	b.n	801ee4c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ee40:	68fb      	ldr	r3, [r7, #12]
 801ee42:	68db      	ldr	r3, [r3, #12]
 801ee44:	60fb      	str	r3, [r7, #12]
 801ee46:	68fb      	ldr	r3, [r7, #12]
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	d1eb      	bne.n	801ee24 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801ee4c:	6879      	ldr	r1, [r7, #4]
 801ee4e:	2000      	movs	r0, #0
 801ee50:	f7f7 fe34 	bl	8016abc <memp_free>
}
 801ee54:	3710      	adds	r7, #16
 801ee56:	46bd      	mov	sp, r7
 801ee58:	bd80      	pop	{r7, pc}
 801ee5a:	bf00      	nop
 801ee5c:	08023efc 	.word	0x08023efc
 801ee60:	0802428c 	.word	0x0802428c
 801ee64:	08023f94 	.word	0x08023f94
 801ee68:	2400f98c 	.word	0x2400f98c

0801ee6c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801ee6c:	b580      	push	{r7, lr}
 801ee6e:	b082      	sub	sp, #8
 801ee70:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801ee72:	2000      	movs	r0, #0
 801ee74:	f7f7 fdac 	bl	80169d0 <memp_malloc>
 801ee78:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	d007      	beq.n	801ee90 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801ee80:	2220      	movs	r2, #32
 801ee82:	2100      	movs	r1, #0
 801ee84:	6878      	ldr	r0, [r7, #4]
 801ee86:	f000 f9e3 	bl	801f250 <memset>
    pcb->ttl = UDP_TTL;
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	22ff      	movs	r2, #255	; 0xff
 801ee8e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801ee90:	687b      	ldr	r3, [r7, #4]
}
 801ee92:	4618      	mov	r0, r3
 801ee94:	3708      	adds	r7, #8
 801ee96:	46bd      	mov	sp, r7
 801ee98:	bd80      	pop	{r7, pc}

0801ee9a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801ee9a:	b580      	push	{r7, lr}
 801ee9c:	b084      	sub	sp, #16
 801ee9e:	af00      	add	r7, sp, #0
 801eea0:	4603      	mov	r3, r0
 801eea2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801eea4:	f7ff ffe2 	bl	801ee6c <udp_new>
 801eea8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801eeaa:	68fb      	ldr	r3, [r7, #12]
}
 801eeac:	4618      	mov	r0, r3
 801eeae:	3710      	adds	r7, #16
 801eeb0:	46bd      	mov	sp, r7
 801eeb2:	bd80      	pop	{r7, pc}

0801eeb4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801eeb4:	b480      	push	{r7}
 801eeb6:	b085      	sub	sp, #20
 801eeb8:	af00      	add	r7, sp, #0
 801eeba:	6078      	str	r0, [r7, #4]
 801eebc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801eebe:	687b      	ldr	r3, [r7, #4]
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	d01e      	beq.n	801ef02 <udp_netif_ip_addr_changed+0x4e>
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	d01a      	beq.n	801ef02 <udp_netif_ip_addr_changed+0x4e>
 801eecc:	683b      	ldr	r3, [r7, #0]
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d017      	beq.n	801ef02 <udp_netif_ip_addr_changed+0x4e>
 801eed2:	683b      	ldr	r3, [r7, #0]
 801eed4:	681b      	ldr	r3, [r3, #0]
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	d013      	beq.n	801ef02 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801eeda:	4b0d      	ldr	r3, [pc, #52]	; (801ef10 <udp_netif_ip_addr_changed+0x5c>)
 801eedc:	681b      	ldr	r3, [r3, #0]
 801eede:	60fb      	str	r3, [r7, #12]
 801eee0:	e00c      	b.n	801eefc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801eee2:	68fb      	ldr	r3, [r7, #12]
 801eee4:	681a      	ldr	r2, [r3, #0]
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	429a      	cmp	r2, r3
 801eeec:	d103      	bne.n	801eef6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801eeee:	683b      	ldr	r3, [r7, #0]
 801eef0:	681a      	ldr	r2, [r3, #0]
 801eef2:	68fb      	ldr	r3, [r7, #12]
 801eef4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801eef6:	68fb      	ldr	r3, [r7, #12]
 801eef8:	68db      	ldr	r3, [r3, #12]
 801eefa:	60fb      	str	r3, [r7, #12]
 801eefc:	68fb      	ldr	r3, [r7, #12]
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d1ef      	bne.n	801eee2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ef02:	bf00      	nop
 801ef04:	3714      	adds	r7, #20
 801ef06:	46bd      	mov	sp, r7
 801ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef0c:	4770      	bx	lr
 801ef0e:	bf00      	nop
 801ef10:	2400f98c 	.word	0x2400f98c

0801ef14 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 801ef14:	b580      	push	{r7, lr}
 801ef16:	b082      	sub	sp, #8
 801ef18:	af00      	add	r7, sp, #0
 801ef1a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 801ef1c:	4b04      	ldr	r3, [pc, #16]	; (801ef30 <HAL_HSEM_FreeCallback+0x1c>)
 801ef1e:	2201      	movs	r2, #1
 801ef20:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 801ef22:	2002      	movs	r0, #2
 801ef24:	f7e4 fdc6 	bl	8003ab4 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 801ef28:	bf00      	nop
 801ef2a:	3708      	adds	r7, #8
 801ef2c:	46bd      	mov	sp, r7
 801ef2e:	bd80      	pop	{r7, pc}
 801ef30:	2400f990 	.word	0x2400f990

0801ef34 <__assert_func>:
 801ef34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ef36:	4614      	mov	r4, r2
 801ef38:	461a      	mov	r2, r3
 801ef3a:	4b09      	ldr	r3, [pc, #36]	; (801ef60 <__assert_func+0x2c>)
 801ef3c:	681b      	ldr	r3, [r3, #0]
 801ef3e:	4605      	mov	r5, r0
 801ef40:	68d8      	ldr	r0, [r3, #12]
 801ef42:	b14c      	cbz	r4, 801ef58 <__assert_func+0x24>
 801ef44:	4b07      	ldr	r3, [pc, #28]	; (801ef64 <__assert_func+0x30>)
 801ef46:	9100      	str	r1, [sp, #0]
 801ef48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ef4c:	4906      	ldr	r1, [pc, #24]	; (801ef68 <__assert_func+0x34>)
 801ef4e:	462b      	mov	r3, r5
 801ef50:	f000 f8e4 	bl	801f11c <fiprintf>
 801ef54:	f000 ffee 	bl	801ff34 <abort>
 801ef58:	4b04      	ldr	r3, [pc, #16]	; (801ef6c <__assert_func+0x38>)
 801ef5a:	461c      	mov	r4, r3
 801ef5c:	e7f3      	b.n	801ef46 <__assert_func+0x12>
 801ef5e:	bf00      	nop
 801ef60:	24000034 	.word	0x24000034
 801ef64:	08024434 	.word	0x08024434
 801ef68:	08024441 	.word	0x08024441
 801ef6c:	0802446f 	.word	0x0802446f

0801ef70 <std>:
 801ef70:	2300      	movs	r3, #0
 801ef72:	b510      	push	{r4, lr}
 801ef74:	4604      	mov	r4, r0
 801ef76:	e9c0 3300 	strd	r3, r3, [r0]
 801ef7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ef7e:	6083      	str	r3, [r0, #8]
 801ef80:	8181      	strh	r1, [r0, #12]
 801ef82:	6643      	str	r3, [r0, #100]	; 0x64
 801ef84:	81c2      	strh	r2, [r0, #14]
 801ef86:	6183      	str	r3, [r0, #24]
 801ef88:	4619      	mov	r1, r3
 801ef8a:	2208      	movs	r2, #8
 801ef8c:	305c      	adds	r0, #92	; 0x5c
 801ef8e:	f000 f95f 	bl	801f250 <memset>
 801ef92:	4b05      	ldr	r3, [pc, #20]	; (801efa8 <std+0x38>)
 801ef94:	6263      	str	r3, [r4, #36]	; 0x24
 801ef96:	4b05      	ldr	r3, [pc, #20]	; (801efac <std+0x3c>)
 801ef98:	62a3      	str	r3, [r4, #40]	; 0x28
 801ef9a:	4b05      	ldr	r3, [pc, #20]	; (801efb0 <std+0x40>)
 801ef9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ef9e:	4b05      	ldr	r3, [pc, #20]	; (801efb4 <std+0x44>)
 801efa0:	6224      	str	r4, [r4, #32]
 801efa2:	6323      	str	r3, [r4, #48]	; 0x30
 801efa4:	bd10      	pop	{r4, pc}
 801efa6:	bf00      	nop
 801efa8:	0801fcc9 	.word	0x0801fcc9
 801efac:	0801fceb 	.word	0x0801fceb
 801efb0:	0801fd23 	.word	0x0801fd23
 801efb4:	0801fd47 	.word	0x0801fd47

0801efb8 <_cleanup_r>:
 801efb8:	4901      	ldr	r1, [pc, #4]	; (801efc0 <_cleanup_r+0x8>)
 801efba:	f000 b8c1 	b.w	801f140 <_fwalk_reent>
 801efbe:	bf00      	nop
 801efc0:	08020071 	.word	0x08020071

0801efc4 <__sfmoreglue>:
 801efc4:	b570      	push	{r4, r5, r6, lr}
 801efc6:	2268      	movs	r2, #104	; 0x68
 801efc8:	1e4d      	subs	r5, r1, #1
 801efca:	4355      	muls	r5, r2
 801efcc:	460e      	mov	r6, r1
 801efce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801efd2:	f000 f9b1 	bl	801f338 <_malloc_r>
 801efd6:	4604      	mov	r4, r0
 801efd8:	b140      	cbz	r0, 801efec <__sfmoreglue+0x28>
 801efda:	2100      	movs	r1, #0
 801efdc:	e9c0 1600 	strd	r1, r6, [r0]
 801efe0:	300c      	adds	r0, #12
 801efe2:	60a0      	str	r0, [r4, #8]
 801efe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801efe8:	f000 f932 	bl	801f250 <memset>
 801efec:	4620      	mov	r0, r4
 801efee:	bd70      	pop	{r4, r5, r6, pc}

0801eff0 <__sfp_lock_acquire>:
 801eff0:	4801      	ldr	r0, [pc, #4]	; (801eff8 <__sfp_lock_acquire+0x8>)
 801eff2:	f000 b8ea 	b.w	801f1ca <__retarget_lock_acquire_recursive>
 801eff6:	bf00      	nop
 801eff8:	2400f995 	.word	0x2400f995

0801effc <__sfp_lock_release>:
 801effc:	4801      	ldr	r0, [pc, #4]	; (801f004 <__sfp_lock_release+0x8>)
 801effe:	f000 b8e5 	b.w	801f1cc <__retarget_lock_release_recursive>
 801f002:	bf00      	nop
 801f004:	2400f995 	.word	0x2400f995

0801f008 <__sinit_lock_acquire>:
 801f008:	4801      	ldr	r0, [pc, #4]	; (801f010 <__sinit_lock_acquire+0x8>)
 801f00a:	f000 b8de 	b.w	801f1ca <__retarget_lock_acquire_recursive>
 801f00e:	bf00      	nop
 801f010:	2400f996 	.word	0x2400f996

0801f014 <__sinit_lock_release>:
 801f014:	4801      	ldr	r0, [pc, #4]	; (801f01c <__sinit_lock_release+0x8>)
 801f016:	f000 b8d9 	b.w	801f1cc <__retarget_lock_release_recursive>
 801f01a:	bf00      	nop
 801f01c:	2400f996 	.word	0x2400f996

0801f020 <__sinit>:
 801f020:	b510      	push	{r4, lr}
 801f022:	4604      	mov	r4, r0
 801f024:	f7ff fff0 	bl	801f008 <__sinit_lock_acquire>
 801f028:	69a3      	ldr	r3, [r4, #24]
 801f02a:	b11b      	cbz	r3, 801f034 <__sinit+0x14>
 801f02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f030:	f7ff bff0 	b.w	801f014 <__sinit_lock_release>
 801f034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f038:	6523      	str	r3, [r4, #80]	; 0x50
 801f03a:	4b13      	ldr	r3, [pc, #76]	; (801f088 <__sinit+0x68>)
 801f03c:	4a13      	ldr	r2, [pc, #76]	; (801f08c <__sinit+0x6c>)
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	62a2      	str	r2, [r4, #40]	; 0x28
 801f042:	42a3      	cmp	r3, r4
 801f044:	bf04      	itt	eq
 801f046:	2301      	moveq	r3, #1
 801f048:	61a3      	streq	r3, [r4, #24]
 801f04a:	4620      	mov	r0, r4
 801f04c:	f000 f820 	bl	801f090 <__sfp>
 801f050:	6060      	str	r0, [r4, #4]
 801f052:	4620      	mov	r0, r4
 801f054:	f000 f81c 	bl	801f090 <__sfp>
 801f058:	60a0      	str	r0, [r4, #8]
 801f05a:	4620      	mov	r0, r4
 801f05c:	f000 f818 	bl	801f090 <__sfp>
 801f060:	2200      	movs	r2, #0
 801f062:	60e0      	str	r0, [r4, #12]
 801f064:	2104      	movs	r1, #4
 801f066:	6860      	ldr	r0, [r4, #4]
 801f068:	f7ff ff82 	bl	801ef70 <std>
 801f06c:	68a0      	ldr	r0, [r4, #8]
 801f06e:	2201      	movs	r2, #1
 801f070:	2109      	movs	r1, #9
 801f072:	f7ff ff7d 	bl	801ef70 <std>
 801f076:	68e0      	ldr	r0, [r4, #12]
 801f078:	2202      	movs	r2, #2
 801f07a:	2112      	movs	r1, #18
 801f07c:	f7ff ff78 	bl	801ef70 <std>
 801f080:	2301      	movs	r3, #1
 801f082:	61a3      	str	r3, [r4, #24]
 801f084:	e7d2      	b.n	801f02c <__sinit+0xc>
 801f086:	bf00      	nop
 801f088:	080244d0 	.word	0x080244d0
 801f08c:	0801efb9 	.word	0x0801efb9

0801f090 <__sfp>:
 801f090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f092:	4607      	mov	r7, r0
 801f094:	f7ff ffac 	bl	801eff0 <__sfp_lock_acquire>
 801f098:	4b1e      	ldr	r3, [pc, #120]	; (801f114 <__sfp+0x84>)
 801f09a:	681e      	ldr	r6, [r3, #0]
 801f09c:	69b3      	ldr	r3, [r6, #24]
 801f09e:	b913      	cbnz	r3, 801f0a6 <__sfp+0x16>
 801f0a0:	4630      	mov	r0, r6
 801f0a2:	f7ff ffbd 	bl	801f020 <__sinit>
 801f0a6:	3648      	adds	r6, #72	; 0x48
 801f0a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f0ac:	3b01      	subs	r3, #1
 801f0ae:	d503      	bpl.n	801f0b8 <__sfp+0x28>
 801f0b0:	6833      	ldr	r3, [r6, #0]
 801f0b2:	b30b      	cbz	r3, 801f0f8 <__sfp+0x68>
 801f0b4:	6836      	ldr	r6, [r6, #0]
 801f0b6:	e7f7      	b.n	801f0a8 <__sfp+0x18>
 801f0b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f0bc:	b9d5      	cbnz	r5, 801f0f4 <__sfp+0x64>
 801f0be:	4b16      	ldr	r3, [pc, #88]	; (801f118 <__sfp+0x88>)
 801f0c0:	60e3      	str	r3, [r4, #12]
 801f0c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f0c6:	6665      	str	r5, [r4, #100]	; 0x64
 801f0c8:	f000 f87e 	bl	801f1c8 <__retarget_lock_init_recursive>
 801f0cc:	f7ff ff96 	bl	801effc <__sfp_lock_release>
 801f0d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f0d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f0d8:	6025      	str	r5, [r4, #0]
 801f0da:	61a5      	str	r5, [r4, #24]
 801f0dc:	2208      	movs	r2, #8
 801f0de:	4629      	mov	r1, r5
 801f0e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f0e4:	f000 f8b4 	bl	801f250 <memset>
 801f0e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f0ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f0f0:	4620      	mov	r0, r4
 801f0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f0f4:	3468      	adds	r4, #104	; 0x68
 801f0f6:	e7d9      	b.n	801f0ac <__sfp+0x1c>
 801f0f8:	2104      	movs	r1, #4
 801f0fa:	4638      	mov	r0, r7
 801f0fc:	f7ff ff62 	bl	801efc4 <__sfmoreglue>
 801f100:	4604      	mov	r4, r0
 801f102:	6030      	str	r0, [r6, #0]
 801f104:	2800      	cmp	r0, #0
 801f106:	d1d5      	bne.n	801f0b4 <__sfp+0x24>
 801f108:	f7ff ff78 	bl	801effc <__sfp_lock_release>
 801f10c:	230c      	movs	r3, #12
 801f10e:	603b      	str	r3, [r7, #0]
 801f110:	e7ee      	b.n	801f0f0 <__sfp+0x60>
 801f112:	bf00      	nop
 801f114:	080244d0 	.word	0x080244d0
 801f118:	ffff0001 	.word	0xffff0001

0801f11c <fiprintf>:
 801f11c:	b40e      	push	{r1, r2, r3}
 801f11e:	b503      	push	{r0, r1, lr}
 801f120:	4601      	mov	r1, r0
 801f122:	ab03      	add	r3, sp, #12
 801f124:	4805      	ldr	r0, [pc, #20]	; (801f13c <fiprintf+0x20>)
 801f126:	f853 2b04 	ldr.w	r2, [r3], #4
 801f12a:	6800      	ldr	r0, [r0, #0]
 801f12c:	9301      	str	r3, [sp, #4]
 801f12e:	f000 f9a1 	bl	801f474 <_vfiprintf_r>
 801f132:	b002      	add	sp, #8
 801f134:	f85d eb04 	ldr.w	lr, [sp], #4
 801f138:	b003      	add	sp, #12
 801f13a:	4770      	bx	lr
 801f13c:	24000034 	.word	0x24000034

0801f140 <_fwalk_reent>:
 801f140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f144:	4606      	mov	r6, r0
 801f146:	4688      	mov	r8, r1
 801f148:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f14c:	2700      	movs	r7, #0
 801f14e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f152:	f1b9 0901 	subs.w	r9, r9, #1
 801f156:	d505      	bpl.n	801f164 <_fwalk_reent+0x24>
 801f158:	6824      	ldr	r4, [r4, #0]
 801f15a:	2c00      	cmp	r4, #0
 801f15c:	d1f7      	bne.n	801f14e <_fwalk_reent+0xe>
 801f15e:	4638      	mov	r0, r7
 801f160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f164:	89ab      	ldrh	r3, [r5, #12]
 801f166:	2b01      	cmp	r3, #1
 801f168:	d907      	bls.n	801f17a <_fwalk_reent+0x3a>
 801f16a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f16e:	3301      	adds	r3, #1
 801f170:	d003      	beq.n	801f17a <_fwalk_reent+0x3a>
 801f172:	4629      	mov	r1, r5
 801f174:	4630      	mov	r0, r6
 801f176:	47c0      	blx	r8
 801f178:	4307      	orrs	r7, r0
 801f17a:	3568      	adds	r5, #104	; 0x68
 801f17c:	e7e9      	b.n	801f152 <_fwalk_reent+0x12>
	...

0801f180 <__libc_init_array>:
 801f180:	b570      	push	{r4, r5, r6, lr}
 801f182:	4d0d      	ldr	r5, [pc, #52]	; (801f1b8 <__libc_init_array+0x38>)
 801f184:	4c0d      	ldr	r4, [pc, #52]	; (801f1bc <__libc_init_array+0x3c>)
 801f186:	1b64      	subs	r4, r4, r5
 801f188:	10a4      	asrs	r4, r4, #2
 801f18a:	2600      	movs	r6, #0
 801f18c:	42a6      	cmp	r6, r4
 801f18e:	d109      	bne.n	801f1a4 <__libc_init_array+0x24>
 801f190:	4d0b      	ldr	r5, [pc, #44]	; (801f1c0 <__libc_init_array+0x40>)
 801f192:	4c0c      	ldr	r4, [pc, #48]	; (801f1c4 <__libc_init_array+0x44>)
 801f194:	f001 fa36 	bl	8020604 <_init>
 801f198:	1b64      	subs	r4, r4, r5
 801f19a:	10a4      	asrs	r4, r4, #2
 801f19c:	2600      	movs	r6, #0
 801f19e:	42a6      	cmp	r6, r4
 801f1a0:	d105      	bne.n	801f1ae <__libc_init_array+0x2e>
 801f1a2:	bd70      	pop	{r4, r5, r6, pc}
 801f1a4:	f855 3b04 	ldr.w	r3, [r5], #4
 801f1a8:	4798      	blx	r3
 801f1aa:	3601      	adds	r6, #1
 801f1ac:	e7ee      	b.n	801f18c <__libc_init_array+0xc>
 801f1ae:	f855 3b04 	ldr.w	r3, [r5], #4
 801f1b2:	4798      	blx	r3
 801f1b4:	3601      	adds	r6, #1
 801f1b6:	e7f2      	b.n	801f19e <__libc_init_array+0x1e>
 801f1b8:	0802457c 	.word	0x0802457c
 801f1bc:	0802457c 	.word	0x0802457c
 801f1c0:	0802457c 	.word	0x0802457c
 801f1c4:	08024580 	.word	0x08024580

0801f1c8 <__retarget_lock_init_recursive>:
 801f1c8:	4770      	bx	lr

0801f1ca <__retarget_lock_acquire_recursive>:
 801f1ca:	4770      	bx	lr

0801f1cc <__retarget_lock_release_recursive>:
 801f1cc:	4770      	bx	lr
	...

0801f1d0 <malloc>:
 801f1d0:	4b02      	ldr	r3, [pc, #8]	; (801f1dc <malloc+0xc>)
 801f1d2:	4601      	mov	r1, r0
 801f1d4:	6818      	ldr	r0, [r3, #0]
 801f1d6:	f000 b8af 	b.w	801f338 <_malloc_r>
 801f1da:	bf00      	nop
 801f1dc:	24000034 	.word	0x24000034

0801f1e0 <memcmp>:
 801f1e0:	b510      	push	{r4, lr}
 801f1e2:	3901      	subs	r1, #1
 801f1e4:	4402      	add	r2, r0
 801f1e6:	4290      	cmp	r0, r2
 801f1e8:	d101      	bne.n	801f1ee <memcmp+0xe>
 801f1ea:	2000      	movs	r0, #0
 801f1ec:	e005      	b.n	801f1fa <memcmp+0x1a>
 801f1ee:	7803      	ldrb	r3, [r0, #0]
 801f1f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f1f4:	42a3      	cmp	r3, r4
 801f1f6:	d001      	beq.n	801f1fc <memcmp+0x1c>
 801f1f8:	1b18      	subs	r0, r3, r4
 801f1fa:	bd10      	pop	{r4, pc}
 801f1fc:	3001      	adds	r0, #1
 801f1fe:	e7f2      	b.n	801f1e6 <memcmp+0x6>

0801f200 <memcpy>:
 801f200:	440a      	add	r2, r1
 801f202:	4291      	cmp	r1, r2
 801f204:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801f208:	d100      	bne.n	801f20c <memcpy+0xc>
 801f20a:	4770      	bx	lr
 801f20c:	b510      	push	{r4, lr}
 801f20e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f212:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f216:	4291      	cmp	r1, r2
 801f218:	d1f9      	bne.n	801f20e <memcpy+0xe>
 801f21a:	bd10      	pop	{r4, pc}

0801f21c <memmove>:
 801f21c:	4288      	cmp	r0, r1
 801f21e:	b510      	push	{r4, lr}
 801f220:	eb01 0402 	add.w	r4, r1, r2
 801f224:	d902      	bls.n	801f22c <memmove+0x10>
 801f226:	4284      	cmp	r4, r0
 801f228:	4623      	mov	r3, r4
 801f22a:	d807      	bhi.n	801f23c <memmove+0x20>
 801f22c:	1e43      	subs	r3, r0, #1
 801f22e:	42a1      	cmp	r1, r4
 801f230:	d008      	beq.n	801f244 <memmove+0x28>
 801f232:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f236:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f23a:	e7f8      	b.n	801f22e <memmove+0x12>
 801f23c:	4402      	add	r2, r0
 801f23e:	4601      	mov	r1, r0
 801f240:	428a      	cmp	r2, r1
 801f242:	d100      	bne.n	801f246 <memmove+0x2a>
 801f244:	bd10      	pop	{r4, pc}
 801f246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f24a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f24e:	e7f7      	b.n	801f240 <memmove+0x24>

0801f250 <memset>:
 801f250:	4402      	add	r2, r0
 801f252:	4603      	mov	r3, r0
 801f254:	4293      	cmp	r3, r2
 801f256:	d100      	bne.n	801f25a <memset+0xa>
 801f258:	4770      	bx	lr
 801f25a:	f803 1b01 	strb.w	r1, [r3], #1
 801f25e:	e7f9      	b.n	801f254 <memset+0x4>

0801f260 <_free_r>:
 801f260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f262:	2900      	cmp	r1, #0
 801f264:	d044      	beq.n	801f2f0 <_free_r+0x90>
 801f266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f26a:	9001      	str	r0, [sp, #4]
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	f1a1 0404 	sub.w	r4, r1, #4
 801f272:	bfb8      	it	lt
 801f274:	18e4      	addlt	r4, r4, r3
 801f276:	f000 ffaf 	bl	80201d8 <__malloc_lock>
 801f27a:	4a1e      	ldr	r2, [pc, #120]	; (801f2f4 <_free_r+0x94>)
 801f27c:	9801      	ldr	r0, [sp, #4]
 801f27e:	6813      	ldr	r3, [r2, #0]
 801f280:	b933      	cbnz	r3, 801f290 <_free_r+0x30>
 801f282:	6063      	str	r3, [r4, #4]
 801f284:	6014      	str	r4, [r2, #0]
 801f286:	b003      	add	sp, #12
 801f288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f28c:	f000 bfaa 	b.w	80201e4 <__malloc_unlock>
 801f290:	42a3      	cmp	r3, r4
 801f292:	d908      	bls.n	801f2a6 <_free_r+0x46>
 801f294:	6825      	ldr	r5, [r4, #0]
 801f296:	1961      	adds	r1, r4, r5
 801f298:	428b      	cmp	r3, r1
 801f29a:	bf01      	itttt	eq
 801f29c:	6819      	ldreq	r1, [r3, #0]
 801f29e:	685b      	ldreq	r3, [r3, #4]
 801f2a0:	1949      	addeq	r1, r1, r5
 801f2a2:	6021      	streq	r1, [r4, #0]
 801f2a4:	e7ed      	b.n	801f282 <_free_r+0x22>
 801f2a6:	461a      	mov	r2, r3
 801f2a8:	685b      	ldr	r3, [r3, #4]
 801f2aa:	b10b      	cbz	r3, 801f2b0 <_free_r+0x50>
 801f2ac:	42a3      	cmp	r3, r4
 801f2ae:	d9fa      	bls.n	801f2a6 <_free_r+0x46>
 801f2b0:	6811      	ldr	r1, [r2, #0]
 801f2b2:	1855      	adds	r5, r2, r1
 801f2b4:	42a5      	cmp	r5, r4
 801f2b6:	d10b      	bne.n	801f2d0 <_free_r+0x70>
 801f2b8:	6824      	ldr	r4, [r4, #0]
 801f2ba:	4421      	add	r1, r4
 801f2bc:	1854      	adds	r4, r2, r1
 801f2be:	42a3      	cmp	r3, r4
 801f2c0:	6011      	str	r1, [r2, #0]
 801f2c2:	d1e0      	bne.n	801f286 <_free_r+0x26>
 801f2c4:	681c      	ldr	r4, [r3, #0]
 801f2c6:	685b      	ldr	r3, [r3, #4]
 801f2c8:	6053      	str	r3, [r2, #4]
 801f2ca:	4421      	add	r1, r4
 801f2cc:	6011      	str	r1, [r2, #0]
 801f2ce:	e7da      	b.n	801f286 <_free_r+0x26>
 801f2d0:	d902      	bls.n	801f2d8 <_free_r+0x78>
 801f2d2:	230c      	movs	r3, #12
 801f2d4:	6003      	str	r3, [r0, #0]
 801f2d6:	e7d6      	b.n	801f286 <_free_r+0x26>
 801f2d8:	6825      	ldr	r5, [r4, #0]
 801f2da:	1961      	adds	r1, r4, r5
 801f2dc:	428b      	cmp	r3, r1
 801f2de:	bf04      	itt	eq
 801f2e0:	6819      	ldreq	r1, [r3, #0]
 801f2e2:	685b      	ldreq	r3, [r3, #4]
 801f2e4:	6063      	str	r3, [r4, #4]
 801f2e6:	bf04      	itt	eq
 801f2e8:	1949      	addeq	r1, r1, r5
 801f2ea:	6021      	streq	r1, [r4, #0]
 801f2ec:	6054      	str	r4, [r2, #4]
 801f2ee:	e7ca      	b.n	801f286 <_free_r+0x26>
 801f2f0:	b003      	add	sp, #12
 801f2f2:	bd30      	pop	{r4, r5, pc}
 801f2f4:	2400f998 	.word	0x2400f998

0801f2f8 <sbrk_aligned>:
 801f2f8:	b570      	push	{r4, r5, r6, lr}
 801f2fa:	4e0e      	ldr	r6, [pc, #56]	; (801f334 <sbrk_aligned+0x3c>)
 801f2fc:	460c      	mov	r4, r1
 801f2fe:	6831      	ldr	r1, [r6, #0]
 801f300:	4605      	mov	r5, r0
 801f302:	b911      	cbnz	r1, 801f30a <sbrk_aligned+0x12>
 801f304:	f000 fcb0 	bl	801fc68 <_sbrk_r>
 801f308:	6030      	str	r0, [r6, #0]
 801f30a:	4621      	mov	r1, r4
 801f30c:	4628      	mov	r0, r5
 801f30e:	f000 fcab 	bl	801fc68 <_sbrk_r>
 801f312:	1c43      	adds	r3, r0, #1
 801f314:	d00a      	beq.n	801f32c <sbrk_aligned+0x34>
 801f316:	1cc4      	adds	r4, r0, #3
 801f318:	f024 0403 	bic.w	r4, r4, #3
 801f31c:	42a0      	cmp	r0, r4
 801f31e:	d007      	beq.n	801f330 <sbrk_aligned+0x38>
 801f320:	1a21      	subs	r1, r4, r0
 801f322:	4628      	mov	r0, r5
 801f324:	f000 fca0 	bl	801fc68 <_sbrk_r>
 801f328:	3001      	adds	r0, #1
 801f32a:	d101      	bne.n	801f330 <sbrk_aligned+0x38>
 801f32c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f330:	4620      	mov	r0, r4
 801f332:	bd70      	pop	{r4, r5, r6, pc}
 801f334:	2400f99c 	.word	0x2400f99c

0801f338 <_malloc_r>:
 801f338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f33c:	1ccd      	adds	r5, r1, #3
 801f33e:	f025 0503 	bic.w	r5, r5, #3
 801f342:	3508      	adds	r5, #8
 801f344:	2d0c      	cmp	r5, #12
 801f346:	bf38      	it	cc
 801f348:	250c      	movcc	r5, #12
 801f34a:	2d00      	cmp	r5, #0
 801f34c:	4607      	mov	r7, r0
 801f34e:	db01      	blt.n	801f354 <_malloc_r+0x1c>
 801f350:	42a9      	cmp	r1, r5
 801f352:	d905      	bls.n	801f360 <_malloc_r+0x28>
 801f354:	230c      	movs	r3, #12
 801f356:	603b      	str	r3, [r7, #0]
 801f358:	2600      	movs	r6, #0
 801f35a:	4630      	mov	r0, r6
 801f35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f360:	4e2e      	ldr	r6, [pc, #184]	; (801f41c <_malloc_r+0xe4>)
 801f362:	f000 ff39 	bl	80201d8 <__malloc_lock>
 801f366:	6833      	ldr	r3, [r6, #0]
 801f368:	461c      	mov	r4, r3
 801f36a:	bb34      	cbnz	r4, 801f3ba <_malloc_r+0x82>
 801f36c:	4629      	mov	r1, r5
 801f36e:	4638      	mov	r0, r7
 801f370:	f7ff ffc2 	bl	801f2f8 <sbrk_aligned>
 801f374:	1c43      	adds	r3, r0, #1
 801f376:	4604      	mov	r4, r0
 801f378:	d14d      	bne.n	801f416 <_malloc_r+0xde>
 801f37a:	6834      	ldr	r4, [r6, #0]
 801f37c:	4626      	mov	r6, r4
 801f37e:	2e00      	cmp	r6, #0
 801f380:	d140      	bne.n	801f404 <_malloc_r+0xcc>
 801f382:	6823      	ldr	r3, [r4, #0]
 801f384:	4631      	mov	r1, r6
 801f386:	4638      	mov	r0, r7
 801f388:	eb04 0803 	add.w	r8, r4, r3
 801f38c:	f000 fc6c 	bl	801fc68 <_sbrk_r>
 801f390:	4580      	cmp	r8, r0
 801f392:	d13a      	bne.n	801f40a <_malloc_r+0xd2>
 801f394:	6821      	ldr	r1, [r4, #0]
 801f396:	3503      	adds	r5, #3
 801f398:	1a6d      	subs	r5, r5, r1
 801f39a:	f025 0503 	bic.w	r5, r5, #3
 801f39e:	3508      	adds	r5, #8
 801f3a0:	2d0c      	cmp	r5, #12
 801f3a2:	bf38      	it	cc
 801f3a4:	250c      	movcc	r5, #12
 801f3a6:	4629      	mov	r1, r5
 801f3a8:	4638      	mov	r0, r7
 801f3aa:	f7ff ffa5 	bl	801f2f8 <sbrk_aligned>
 801f3ae:	3001      	adds	r0, #1
 801f3b0:	d02b      	beq.n	801f40a <_malloc_r+0xd2>
 801f3b2:	6823      	ldr	r3, [r4, #0]
 801f3b4:	442b      	add	r3, r5
 801f3b6:	6023      	str	r3, [r4, #0]
 801f3b8:	e00e      	b.n	801f3d8 <_malloc_r+0xa0>
 801f3ba:	6822      	ldr	r2, [r4, #0]
 801f3bc:	1b52      	subs	r2, r2, r5
 801f3be:	d41e      	bmi.n	801f3fe <_malloc_r+0xc6>
 801f3c0:	2a0b      	cmp	r2, #11
 801f3c2:	d916      	bls.n	801f3f2 <_malloc_r+0xba>
 801f3c4:	1961      	adds	r1, r4, r5
 801f3c6:	42a3      	cmp	r3, r4
 801f3c8:	6025      	str	r5, [r4, #0]
 801f3ca:	bf18      	it	ne
 801f3cc:	6059      	strne	r1, [r3, #4]
 801f3ce:	6863      	ldr	r3, [r4, #4]
 801f3d0:	bf08      	it	eq
 801f3d2:	6031      	streq	r1, [r6, #0]
 801f3d4:	5162      	str	r2, [r4, r5]
 801f3d6:	604b      	str	r3, [r1, #4]
 801f3d8:	4638      	mov	r0, r7
 801f3da:	f104 060b 	add.w	r6, r4, #11
 801f3de:	f000 ff01 	bl	80201e4 <__malloc_unlock>
 801f3e2:	f026 0607 	bic.w	r6, r6, #7
 801f3e6:	1d23      	adds	r3, r4, #4
 801f3e8:	1af2      	subs	r2, r6, r3
 801f3ea:	d0b6      	beq.n	801f35a <_malloc_r+0x22>
 801f3ec:	1b9b      	subs	r3, r3, r6
 801f3ee:	50a3      	str	r3, [r4, r2]
 801f3f0:	e7b3      	b.n	801f35a <_malloc_r+0x22>
 801f3f2:	6862      	ldr	r2, [r4, #4]
 801f3f4:	42a3      	cmp	r3, r4
 801f3f6:	bf0c      	ite	eq
 801f3f8:	6032      	streq	r2, [r6, #0]
 801f3fa:	605a      	strne	r2, [r3, #4]
 801f3fc:	e7ec      	b.n	801f3d8 <_malloc_r+0xa0>
 801f3fe:	4623      	mov	r3, r4
 801f400:	6864      	ldr	r4, [r4, #4]
 801f402:	e7b2      	b.n	801f36a <_malloc_r+0x32>
 801f404:	4634      	mov	r4, r6
 801f406:	6876      	ldr	r6, [r6, #4]
 801f408:	e7b9      	b.n	801f37e <_malloc_r+0x46>
 801f40a:	230c      	movs	r3, #12
 801f40c:	603b      	str	r3, [r7, #0]
 801f40e:	4638      	mov	r0, r7
 801f410:	f000 fee8 	bl	80201e4 <__malloc_unlock>
 801f414:	e7a1      	b.n	801f35a <_malloc_r+0x22>
 801f416:	6025      	str	r5, [r4, #0]
 801f418:	e7de      	b.n	801f3d8 <_malloc_r+0xa0>
 801f41a:	bf00      	nop
 801f41c:	2400f998 	.word	0x2400f998

0801f420 <__sfputc_r>:
 801f420:	6893      	ldr	r3, [r2, #8]
 801f422:	3b01      	subs	r3, #1
 801f424:	2b00      	cmp	r3, #0
 801f426:	b410      	push	{r4}
 801f428:	6093      	str	r3, [r2, #8]
 801f42a:	da08      	bge.n	801f43e <__sfputc_r+0x1e>
 801f42c:	6994      	ldr	r4, [r2, #24]
 801f42e:	42a3      	cmp	r3, r4
 801f430:	db01      	blt.n	801f436 <__sfputc_r+0x16>
 801f432:	290a      	cmp	r1, #10
 801f434:	d103      	bne.n	801f43e <__sfputc_r+0x1e>
 801f436:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f43a:	f000 bca9 	b.w	801fd90 <__swbuf_r>
 801f43e:	6813      	ldr	r3, [r2, #0]
 801f440:	1c58      	adds	r0, r3, #1
 801f442:	6010      	str	r0, [r2, #0]
 801f444:	7019      	strb	r1, [r3, #0]
 801f446:	4608      	mov	r0, r1
 801f448:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f44c:	4770      	bx	lr

0801f44e <__sfputs_r>:
 801f44e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f450:	4606      	mov	r6, r0
 801f452:	460f      	mov	r7, r1
 801f454:	4614      	mov	r4, r2
 801f456:	18d5      	adds	r5, r2, r3
 801f458:	42ac      	cmp	r4, r5
 801f45a:	d101      	bne.n	801f460 <__sfputs_r+0x12>
 801f45c:	2000      	movs	r0, #0
 801f45e:	e007      	b.n	801f470 <__sfputs_r+0x22>
 801f460:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f464:	463a      	mov	r2, r7
 801f466:	4630      	mov	r0, r6
 801f468:	f7ff ffda 	bl	801f420 <__sfputc_r>
 801f46c:	1c43      	adds	r3, r0, #1
 801f46e:	d1f3      	bne.n	801f458 <__sfputs_r+0xa>
 801f470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f474 <_vfiprintf_r>:
 801f474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f478:	460d      	mov	r5, r1
 801f47a:	b09d      	sub	sp, #116	; 0x74
 801f47c:	4614      	mov	r4, r2
 801f47e:	4698      	mov	r8, r3
 801f480:	4606      	mov	r6, r0
 801f482:	b118      	cbz	r0, 801f48c <_vfiprintf_r+0x18>
 801f484:	6983      	ldr	r3, [r0, #24]
 801f486:	b90b      	cbnz	r3, 801f48c <_vfiprintf_r+0x18>
 801f488:	f7ff fdca 	bl	801f020 <__sinit>
 801f48c:	4b89      	ldr	r3, [pc, #548]	; (801f6b4 <_vfiprintf_r+0x240>)
 801f48e:	429d      	cmp	r5, r3
 801f490:	d11b      	bne.n	801f4ca <_vfiprintf_r+0x56>
 801f492:	6875      	ldr	r5, [r6, #4]
 801f494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f496:	07d9      	lsls	r1, r3, #31
 801f498:	d405      	bmi.n	801f4a6 <_vfiprintf_r+0x32>
 801f49a:	89ab      	ldrh	r3, [r5, #12]
 801f49c:	059a      	lsls	r2, r3, #22
 801f49e:	d402      	bmi.n	801f4a6 <_vfiprintf_r+0x32>
 801f4a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f4a2:	f7ff fe92 	bl	801f1ca <__retarget_lock_acquire_recursive>
 801f4a6:	89ab      	ldrh	r3, [r5, #12]
 801f4a8:	071b      	lsls	r3, r3, #28
 801f4aa:	d501      	bpl.n	801f4b0 <_vfiprintf_r+0x3c>
 801f4ac:	692b      	ldr	r3, [r5, #16]
 801f4ae:	b9eb      	cbnz	r3, 801f4ec <_vfiprintf_r+0x78>
 801f4b0:	4629      	mov	r1, r5
 801f4b2:	4630      	mov	r0, r6
 801f4b4:	f000 fcd0 	bl	801fe58 <__swsetup_r>
 801f4b8:	b1c0      	cbz	r0, 801f4ec <_vfiprintf_r+0x78>
 801f4ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f4bc:	07dc      	lsls	r4, r3, #31
 801f4be:	d50e      	bpl.n	801f4de <_vfiprintf_r+0x6a>
 801f4c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f4c4:	b01d      	add	sp, #116	; 0x74
 801f4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4ca:	4b7b      	ldr	r3, [pc, #492]	; (801f6b8 <_vfiprintf_r+0x244>)
 801f4cc:	429d      	cmp	r5, r3
 801f4ce:	d101      	bne.n	801f4d4 <_vfiprintf_r+0x60>
 801f4d0:	68b5      	ldr	r5, [r6, #8]
 801f4d2:	e7df      	b.n	801f494 <_vfiprintf_r+0x20>
 801f4d4:	4b79      	ldr	r3, [pc, #484]	; (801f6bc <_vfiprintf_r+0x248>)
 801f4d6:	429d      	cmp	r5, r3
 801f4d8:	bf08      	it	eq
 801f4da:	68f5      	ldreq	r5, [r6, #12]
 801f4dc:	e7da      	b.n	801f494 <_vfiprintf_r+0x20>
 801f4de:	89ab      	ldrh	r3, [r5, #12]
 801f4e0:	0598      	lsls	r0, r3, #22
 801f4e2:	d4ed      	bmi.n	801f4c0 <_vfiprintf_r+0x4c>
 801f4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f4e6:	f7ff fe71 	bl	801f1cc <__retarget_lock_release_recursive>
 801f4ea:	e7e9      	b.n	801f4c0 <_vfiprintf_r+0x4c>
 801f4ec:	2300      	movs	r3, #0
 801f4ee:	9309      	str	r3, [sp, #36]	; 0x24
 801f4f0:	2320      	movs	r3, #32
 801f4f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f4f6:	f8cd 800c 	str.w	r8, [sp, #12]
 801f4fa:	2330      	movs	r3, #48	; 0x30
 801f4fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f6c0 <_vfiprintf_r+0x24c>
 801f500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f504:	f04f 0901 	mov.w	r9, #1
 801f508:	4623      	mov	r3, r4
 801f50a:	469a      	mov	sl, r3
 801f50c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f510:	b10a      	cbz	r2, 801f516 <_vfiprintf_r+0xa2>
 801f512:	2a25      	cmp	r2, #37	; 0x25
 801f514:	d1f9      	bne.n	801f50a <_vfiprintf_r+0x96>
 801f516:	ebba 0b04 	subs.w	fp, sl, r4
 801f51a:	d00b      	beq.n	801f534 <_vfiprintf_r+0xc0>
 801f51c:	465b      	mov	r3, fp
 801f51e:	4622      	mov	r2, r4
 801f520:	4629      	mov	r1, r5
 801f522:	4630      	mov	r0, r6
 801f524:	f7ff ff93 	bl	801f44e <__sfputs_r>
 801f528:	3001      	adds	r0, #1
 801f52a:	f000 80aa 	beq.w	801f682 <_vfiprintf_r+0x20e>
 801f52e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f530:	445a      	add	r2, fp
 801f532:	9209      	str	r2, [sp, #36]	; 0x24
 801f534:	f89a 3000 	ldrb.w	r3, [sl]
 801f538:	2b00      	cmp	r3, #0
 801f53a:	f000 80a2 	beq.w	801f682 <_vfiprintf_r+0x20e>
 801f53e:	2300      	movs	r3, #0
 801f540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f548:	f10a 0a01 	add.w	sl, sl, #1
 801f54c:	9304      	str	r3, [sp, #16]
 801f54e:	9307      	str	r3, [sp, #28]
 801f550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f554:	931a      	str	r3, [sp, #104]	; 0x68
 801f556:	4654      	mov	r4, sl
 801f558:	2205      	movs	r2, #5
 801f55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f55e:	4858      	ldr	r0, [pc, #352]	; (801f6c0 <_vfiprintf_r+0x24c>)
 801f560:	f7e0 fec6 	bl	80002f0 <memchr>
 801f564:	9a04      	ldr	r2, [sp, #16]
 801f566:	b9d8      	cbnz	r0, 801f5a0 <_vfiprintf_r+0x12c>
 801f568:	06d1      	lsls	r1, r2, #27
 801f56a:	bf44      	itt	mi
 801f56c:	2320      	movmi	r3, #32
 801f56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f572:	0713      	lsls	r3, r2, #28
 801f574:	bf44      	itt	mi
 801f576:	232b      	movmi	r3, #43	; 0x2b
 801f578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f57c:	f89a 3000 	ldrb.w	r3, [sl]
 801f580:	2b2a      	cmp	r3, #42	; 0x2a
 801f582:	d015      	beq.n	801f5b0 <_vfiprintf_r+0x13c>
 801f584:	9a07      	ldr	r2, [sp, #28]
 801f586:	4654      	mov	r4, sl
 801f588:	2000      	movs	r0, #0
 801f58a:	f04f 0c0a 	mov.w	ip, #10
 801f58e:	4621      	mov	r1, r4
 801f590:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f594:	3b30      	subs	r3, #48	; 0x30
 801f596:	2b09      	cmp	r3, #9
 801f598:	d94e      	bls.n	801f638 <_vfiprintf_r+0x1c4>
 801f59a:	b1b0      	cbz	r0, 801f5ca <_vfiprintf_r+0x156>
 801f59c:	9207      	str	r2, [sp, #28]
 801f59e:	e014      	b.n	801f5ca <_vfiprintf_r+0x156>
 801f5a0:	eba0 0308 	sub.w	r3, r0, r8
 801f5a4:	fa09 f303 	lsl.w	r3, r9, r3
 801f5a8:	4313      	orrs	r3, r2
 801f5aa:	9304      	str	r3, [sp, #16]
 801f5ac:	46a2      	mov	sl, r4
 801f5ae:	e7d2      	b.n	801f556 <_vfiprintf_r+0xe2>
 801f5b0:	9b03      	ldr	r3, [sp, #12]
 801f5b2:	1d19      	adds	r1, r3, #4
 801f5b4:	681b      	ldr	r3, [r3, #0]
 801f5b6:	9103      	str	r1, [sp, #12]
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	bfbb      	ittet	lt
 801f5bc:	425b      	neglt	r3, r3
 801f5be:	f042 0202 	orrlt.w	r2, r2, #2
 801f5c2:	9307      	strge	r3, [sp, #28]
 801f5c4:	9307      	strlt	r3, [sp, #28]
 801f5c6:	bfb8      	it	lt
 801f5c8:	9204      	strlt	r2, [sp, #16]
 801f5ca:	7823      	ldrb	r3, [r4, #0]
 801f5cc:	2b2e      	cmp	r3, #46	; 0x2e
 801f5ce:	d10c      	bne.n	801f5ea <_vfiprintf_r+0x176>
 801f5d0:	7863      	ldrb	r3, [r4, #1]
 801f5d2:	2b2a      	cmp	r3, #42	; 0x2a
 801f5d4:	d135      	bne.n	801f642 <_vfiprintf_r+0x1ce>
 801f5d6:	9b03      	ldr	r3, [sp, #12]
 801f5d8:	1d1a      	adds	r2, r3, #4
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	9203      	str	r2, [sp, #12]
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	bfb8      	it	lt
 801f5e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f5e6:	3402      	adds	r4, #2
 801f5e8:	9305      	str	r3, [sp, #20]
 801f5ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f6d0 <_vfiprintf_r+0x25c>
 801f5ee:	7821      	ldrb	r1, [r4, #0]
 801f5f0:	2203      	movs	r2, #3
 801f5f2:	4650      	mov	r0, sl
 801f5f4:	f7e0 fe7c 	bl	80002f0 <memchr>
 801f5f8:	b140      	cbz	r0, 801f60c <_vfiprintf_r+0x198>
 801f5fa:	2340      	movs	r3, #64	; 0x40
 801f5fc:	eba0 000a 	sub.w	r0, r0, sl
 801f600:	fa03 f000 	lsl.w	r0, r3, r0
 801f604:	9b04      	ldr	r3, [sp, #16]
 801f606:	4303      	orrs	r3, r0
 801f608:	3401      	adds	r4, #1
 801f60a:	9304      	str	r3, [sp, #16]
 801f60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f610:	482c      	ldr	r0, [pc, #176]	; (801f6c4 <_vfiprintf_r+0x250>)
 801f612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f616:	2206      	movs	r2, #6
 801f618:	f7e0 fe6a 	bl	80002f0 <memchr>
 801f61c:	2800      	cmp	r0, #0
 801f61e:	d03f      	beq.n	801f6a0 <_vfiprintf_r+0x22c>
 801f620:	4b29      	ldr	r3, [pc, #164]	; (801f6c8 <_vfiprintf_r+0x254>)
 801f622:	bb1b      	cbnz	r3, 801f66c <_vfiprintf_r+0x1f8>
 801f624:	9b03      	ldr	r3, [sp, #12]
 801f626:	3307      	adds	r3, #7
 801f628:	f023 0307 	bic.w	r3, r3, #7
 801f62c:	3308      	adds	r3, #8
 801f62e:	9303      	str	r3, [sp, #12]
 801f630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f632:	443b      	add	r3, r7
 801f634:	9309      	str	r3, [sp, #36]	; 0x24
 801f636:	e767      	b.n	801f508 <_vfiprintf_r+0x94>
 801f638:	fb0c 3202 	mla	r2, ip, r2, r3
 801f63c:	460c      	mov	r4, r1
 801f63e:	2001      	movs	r0, #1
 801f640:	e7a5      	b.n	801f58e <_vfiprintf_r+0x11a>
 801f642:	2300      	movs	r3, #0
 801f644:	3401      	adds	r4, #1
 801f646:	9305      	str	r3, [sp, #20]
 801f648:	4619      	mov	r1, r3
 801f64a:	f04f 0c0a 	mov.w	ip, #10
 801f64e:	4620      	mov	r0, r4
 801f650:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f654:	3a30      	subs	r2, #48	; 0x30
 801f656:	2a09      	cmp	r2, #9
 801f658:	d903      	bls.n	801f662 <_vfiprintf_r+0x1ee>
 801f65a:	2b00      	cmp	r3, #0
 801f65c:	d0c5      	beq.n	801f5ea <_vfiprintf_r+0x176>
 801f65e:	9105      	str	r1, [sp, #20]
 801f660:	e7c3      	b.n	801f5ea <_vfiprintf_r+0x176>
 801f662:	fb0c 2101 	mla	r1, ip, r1, r2
 801f666:	4604      	mov	r4, r0
 801f668:	2301      	movs	r3, #1
 801f66a:	e7f0      	b.n	801f64e <_vfiprintf_r+0x1da>
 801f66c:	ab03      	add	r3, sp, #12
 801f66e:	9300      	str	r3, [sp, #0]
 801f670:	462a      	mov	r2, r5
 801f672:	4b16      	ldr	r3, [pc, #88]	; (801f6cc <_vfiprintf_r+0x258>)
 801f674:	a904      	add	r1, sp, #16
 801f676:	4630      	mov	r0, r6
 801f678:	f3af 8000 	nop.w
 801f67c:	4607      	mov	r7, r0
 801f67e:	1c78      	adds	r0, r7, #1
 801f680:	d1d6      	bne.n	801f630 <_vfiprintf_r+0x1bc>
 801f682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f684:	07d9      	lsls	r1, r3, #31
 801f686:	d405      	bmi.n	801f694 <_vfiprintf_r+0x220>
 801f688:	89ab      	ldrh	r3, [r5, #12]
 801f68a:	059a      	lsls	r2, r3, #22
 801f68c:	d402      	bmi.n	801f694 <_vfiprintf_r+0x220>
 801f68e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f690:	f7ff fd9c 	bl	801f1cc <__retarget_lock_release_recursive>
 801f694:	89ab      	ldrh	r3, [r5, #12]
 801f696:	065b      	lsls	r3, r3, #25
 801f698:	f53f af12 	bmi.w	801f4c0 <_vfiprintf_r+0x4c>
 801f69c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f69e:	e711      	b.n	801f4c4 <_vfiprintf_r+0x50>
 801f6a0:	ab03      	add	r3, sp, #12
 801f6a2:	9300      	str	r3, [sp, #0]
 801f6a4:	462a      	mov	r2, r5
 801f6a6:	4b09      	ldr	r3, [pc, #36]	; (801f6cc <_vfiprintf_r+0x258>)
 801f6a8:	a904      	add	r1, sp, #16
 801f6aa:	4630      	mov	r0, r6
 801f6ac:	f000 f880 	bl	801f7b0 <_printf_i>
 801f6b0:	e7e4      	b.n	801f67c <_vfiprintf_r+0x208>
 801f6b2:	bf00      	nop
 801f6b4:	08024490 	.word	0x08024490
 801f6b8:	080244b0 	.word	0x080244b0
 801f6bc:	08024470 	.word	0x08024470
 801f6c0:	080244d4 	.word	0x080244d4
 801f6c4:	080244de 	.word	0x080244de
 801f6c8:	00000000 	.word	0x00000000
 801f6cc:	0801f44f 	.word	0x0801f44f
 801f6d0:	080244da 	.word	0x080244da

0801f6d4 <_printf_common>:
 801f6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6d8:	4616      	mov	r6, r2
 801f6da:	4699      	mov	r9, r3
 801f6dc:	688a      	ldr	r2, [r1, #8]
 801f6de:	690b      	ldr	r3, [r1, #16]
 801f6e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f6e4:	4293      	cmp	r3, r2
 801f6e6:	bfb8      	it	lt
 801f6e8:	4613      	movlt	r3, r2
 801f6ea:	6033      	str	r3, [r6, #0]
 801f6ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f6f0:	4607      	mov	r7, r0
 801f6f2:	460c      	mov	r4, r1
 801f6f4:	b10a      	cbz	r2, 801f6fa <_printf_common+0x26>
 801f6f6:	3301      	adds	r3, #1
 801f6f8:	6033      	str	r3, [r6, #0]
 801f6fa:	6823      	ldr	r3, [r4, #0]
 801f6fc:	0699      	lsls	r1, r3, #26
 801f6fe:	bf42      	ittt	mi
 801f700:	6833      	ldrmi	r3, [r6, #0]
 801f702:	3302      	addmi	r3, #2
 801f704:	6033      	strmi	r3, [r6, #0]
 801f706:	6825      	ldr	r5, [r4, #0]
 801f708:	f015 0506 	ands.w	r5, r5, #6
 801f70c:	d106      	bne.n	801f71c <_printf_common+0x48>
 801f70e:	f104 0a19 	add.w	sl, r4, #25
 801f712:	68e3      	ldr	r3, [r4, #12]
 801f714:	6832      	ldr	r2, [r6, #0]
 801f716:	1a9b      	subs	r3, r3, r2
 801f718:	42ab      	cmp	r3, r5
 801f71a:	dc26      	bgt.n	801f76a <_printf_common+0x96>
 801f71c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f720:	1e13      	subs	r3, r2, #0
 801f722:	6822      	ldr	r2, [r4, #0]
 801f724:	bf18      	it	ne
 801f726:	2301      	movne	r3, #1
 801f728:	0692      	lsls	r2, r2, #26
 801f72a:	d42b      	bmi.n	801f784 <_printf_common+0xb0>
 801f72c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f730:	4649      	mov	r1, r9
 801f732:	4638      	mov	r0, r7
 801f734:	47c0      	blx	r8
 801f736:	3001      	adds	r0, #1
 801f738:	d01e      	beq.n	801f778 <_printf_common+0xa4>
 801f73a:	6823      	ldr	r3, [r4, #0]
 801f73c:	68e5      	ldr	r5, [r4, #12]
 801f73e:	6832      	ldr	r2, [r6, #0]
 801f740:	f003 0306 	and.w	r3, r3, #6
 801f744:	2b04      	cmp	r3, #4
 801f746:	bf08      	it	eq
 801f748:	1aad      	subeq	r5, r5, r2
 801f74a:	68a3      	ldr	r3, [r4, #8]
 801f74c:	6922      	ldr	r2, [r4, #16]
 801f74e:	bf0c      	ite	eq
 801f750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f754:	2500      	movne	r5, #0
 801f756:	4293      	cmp	r3, r2
 801f758:	bfc4      	itt	gt
 801f75a:	1a9b      	subgt	r3, r3, r2
 801f75c:	18ed      	addgt	r5, r5, r3
 801f75e:	2600      	movs	r6, #0
 801f760:	341a      	adds	r4, #26
 801f762:	42b5      	cmp	r5, r6
 801f764:	d11a      	bne.n	801f79c <_printf_common+0xc8>
 801f766:	2000      	movs	r0, #0
 801f768:	e008      	b.n	801f77c <_printf_common+0xa8>
 801f76a:	2301      	movs	r3, #1
 801f76c:	4652      	mov	r2, sl
 801f76e:	4649      	mov	r1, r9
 801f770:	4638      	mov	r0, r7
 801f772:	47c0      	blx	r8
 801f774:	3001      	adds	r0, #1
 801f776:	d103      	bne.n	801f780 <_printf_common+0xac>
 801f778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f780:	3501      	adds	r5, #1
 801f782:	e7c6      	b.n	801f712 <_printf_common+0x3e>
 801f784:	18e1      	adds	r1, r4, r3
 801f786:	1c5a      	adds	r2, r3, #1
 801f788:	2030      	movs	r0, #48	; 0x30
 801f78a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f78e:	4422      	add	r2, r4
 801f790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f798:	3302      	adds	r3, #2
 801f79a:	e7c7      	b.n	801f72c <_printf_common+0x58>
 801f79c:	2301      	movs	r3, #1
 801f79e:	4622      	mov	r2, r4
 801f7a0:	4649      	mov	r1, r9
 801f7a2:	4638      	mov	r0, r7
 801f7a4:	47c0      	blx	r8
 801f7a6:	3001      	adds	r0, #1
 801f7a8:	d0e6      	beq.n	801f778 <_printf_common+0xa4>
 801f7aa:	3601      	adds	r6, #1
 801f7ac:	e7d9      	b.n	801f762 <_printf_common+0x8e>
	...

0801f7b0 <_printf_i>:
 801f7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f7b4:	7e0f      	ldrb	r7, [r1, #24]
 801f7b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f7b8:	2f78      	cmp	r7, #120	; 0x78
 801f7ba:	4691      	mov	r9, r2
 801f7bc:	4680      	mov	r8, r0
 801f7be:	460c      	mov	r4, r1
 801f7c0:	469a      	mov	sl, r3
 801f7c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f7c6:	d807      	bhi.n	801f7d8 <_printf_i+0x28>
 801f7c8:	2f62      	cmp	r7, #98	; 0x62
 801f7ca:	d80a      	bhi.n	801f7e2 <_printf_i+0x32>
 801f7cc:	2f00      	cmp	r7, #0
 801f7ce:	f000 80d8 	beq.w	801f982 <_printf_i+0x1d2>
 801f7d2:	2f58      	cmp	r7, #88	; 0x58
 801f7d4:	f000 80a3 	beq.w	801f91e <_printf_i+0x16e>
 801f7d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f7dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f7e0:	e03a      	b.n	801f858 <_printf_i+0xa8>
 801f7e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f7e6:	2b15      	cmp	r3, #21
 801f7e8:	d8f6      	bhi.n	801f7d8 <_printf_i+0x28>
 801f7ea:	a101      	add	r1, pc, #4	; (adr r1, 801f7f0 <_printf_i+0x40>)
 801f7ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f7f0:	0801f849 	.word	0x0801f849
 801f7f4:	0801f85d 	.word	0x0801f85d
 801f7f8:	0801f7d9 	.word	0x0801f7d9
 801f7fc:	0801f7d9 	.word	0x0801f7d9
 801f800:	0801f7d9 	.word	0x0801f7d9
 801f804:	0801f7d9 	.word	0x0801f7d9
 801f808:	0801f85d 	.word	0x0801f85d
 801f80c:	0801f7d9 	.word	0x0801f7d9
 801f810:	0801f7d9 	.word	0x0801f7d9
 801f814:	0801f7d9 	.word	0x0801f7d9
 801f818:	0801f7d9 	.word	0x0801f7d9
 801f81c:	0801f969 	.word	0x0801f969
 801f820:	0801f88d 	.word	0x0801f88d
 801f824:	0801f94b 	.word	0x0801f94b
 801f828:	0801f7d9 	.word	0x0801f7d9
 801f82c:	0801f7d9 	.word	0x0801f7d9
 801f830:	0801f98b 	.word	0x0801f98b
 801f834:	0801f7d9 	.word	0x0801f7d9
 801f838:	0801f88d 	.word	0x0801f88d
 801f83c:	0801f7d9 	.word	0x0801f7d9
 801f840:	0801f7d9 	.word	0x0801f7d9
 801f844:	0801f953 	.word	0x0801f953
 801f848:	682b      	ldr	r3, [r5, #0]
 801f84a:	1d1a      	adds	r2, r3, #4
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	602a      	str	r2, [r5, #0]
 801f850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f858:	2301      	movs	r3, #1
 801f85a:	e0a3      	b.n	801f9a4 <_printf_i+0x1f4>
 801f85c:	6820      	ldr	r0, [r4, #0]
 801f85e:	6829      	ldr	r1, [r5, #0]
 801f860:	0606      	lsls	r6, r0, #24
 801f862:	f101 0304 	add.w	r3, r1, #4
 801f866:	d50a      	bpl.n	801f87e <_printf_i+0xce>
 801f868:	680e      	ldr	r6, [r1, #0]
 801f86a:	602b      	str	r3, [r5, #0]
 801f86c:	2e00      	cmp	r6, #0
 801f86e:	da03      	bge.n	801f878 <_printf_i+0xc8>
 801f870:	232d      	movs	r3, #45	; 0x2d
 801f872:	4276      	negs	r6, r6
 801f874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f878:	485e      	ldr	r0, [pc, #376]	; (801f9f4 <_printf_i+0x244>)
 801f87a:	230a      	movs	r3, #10
 801f87c:	e019      	b.n	801f8b2 <_printf_i+0x102>
 801f87e:	680e      	ldr	r6, [r1, #0]
 801f880:	602b      	str	r3, [r5, #0]
 801f882:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f886:	bf18      	it	ne
 801f888:	b236      	sxthne	r6, r6
 801f88a:	e7ef      	b.n	801f86c <_printf_i+0xbc>
 801f88c:	682b      	ldr	r3, [r5, #0]
 801f88e:	6820      	ldr	r0, [r4, #0]
 801f890:	1d19      	adds	r1, r3, #4
 801f892:	6029      	str	r1, [r5, #0]
 801f894:	0601      	lsls	r1, r0, #24
 801f896:	d501      	bpl.n	801f89c <_printf_i+0xec>
 801f898:	681e      	ldr	r6, [r3, #0]
 801f89a:	e002      	b.n	801f8a2 <_printf_i+0xf2>
 801f89c:	0646      	lsls	r6, r0, #25
 801f89e:	d5fb      	bpl.n	801f898 <_printf_i+0xe8>
 801f8a0:	881e      	ldrh	r6, [r3, #0]
 801f8a2:	4854      	ldr	r0, [pc, #336]	; (801f9f4 <_printf_i+0x244>)
 801f8a4:	2f6f      	cmp	r7, #111	; 0x6f
 801f8a6:	bf0c      	ite	eq
 801f8a8:	2308      	moveq	r3, #8
 801f8aa:	230a      	movne	r3, #10
 801f8ac:	2100      	movs	r1, #0
 801f8ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f8b2:	6865      	ldr	r5, [r4, #4]
 801f8b4:	60a5      	str	r5, [r4, #8]
 801f8b6:	2d00      	cmp	r5, #0
 801f8b8:	bfa2      	ittt	ge
 801f8ba:	6821      	ldrge	r1, [r4, #0]
 801f8bc:	f021 0104 	bicge.w	r1, r1, #4
 801f8c0:	6021      	strge	r1, [r4, #0]
 801f8c2:	b90e      	cbnz	r6, 801f8c8 <_printf_i+0x118>
 801f8c4:	2d00      	cmp	r5, #0
 801f8c6:	d04d      	beq.n	801f964 <_printf_i+0x1b4>
 801f8c8:	4615      	mov	r5, r2
 801f8ca:	fbb6 f1f3 	udiv	r1, r6, r3
 801f8ce:	fb03 6711 	mls	r7, r3, r1, r6
 801f8d2:	5dc7      	ldrb	r7, [r0, r7]
 801f8d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f8d8:	4637      	mov	r7, r6
 801f8da:	42bb      	cmp	r3, r7
 801f8dc:	460e      	mov	r6, r1
 801f8de:	d9f4      	bls.n	801f8ca <_printf_i+0x11a>
 801f8e0:	2b08      	cmp	r3, #8
 801f8e2:	d10b      	bne.n	801f8fc <_printf_i+0x14c>
 801f8e4:	6823      	ldr	r3, [r4, #0]
 801f8e6:	07de      	lsls	r6, r3, #31
 801f8e8:	d508      	bpl.n	801f8fc <_printf_i+0x14c>
 801f8ea:	6923      	ldr	r3, [r4, #16]
 801f8ec:	6861      	ldr	r1, [r4, #4]
 801f8ee:	4299      	cmp	r1, r3
 801f8f0:	bfde      	ittt	le
 801f8f2:	2330      	movle	r3, #48	; 0x30
 801f8f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f8f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801f8fc:	1b52      	subs	r2, r2, r5
 801f8fe:	6122      	str	r2, [r4, #16]
 801f900:	f8cd a000 	str.w	sl, [sp]
 801f904:	464b      	mov	r3, r9
 801f906:	aa03      	add	r2, sp, #12
 801f908:	4621      	mov	r1, r4
 801f90a:	4640      	mov	r0, r8
 801f90c:	f7ff fee2 	bl	801f6d4 <_printf_common>
 801f910:	3001      	adds	r0, #1
 801f912:	d14c      	bne.n	801f9ae <_printf_i+0x1fe>
 801f914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f918:	b004      	add	sp, #16
 801f91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f91e:	4835      	ldr	r0, [pc, #212]	; (801f9f4 <_printf_i+0x244>)
 801f920:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f924:	6829      	ldr	r1, [r5, #0]
 801f926:	6823      	ldr	r3, [r4, #0]
 801f928:	f851 6b04 	ldr.w	r6, [r1], #4
 801f92c:	6029      	str	r1, [r5, #0]
 801f92e:	061d      	lsls	r5, r3, #24
 801f930:	d514      	bpl.n	801f95c <_printf_i+0x1ac>
 801f932:	07df      	lsls	r7, r3, #31
 801f934:	bf44      	itt	mi
 801f936:	f043 0320 	orrmi.w	r3, r3, #32
 801f93a:	6023      	strmi	r3, [r4, #0]
 801f93c:	b91e      	cbnz	r6, 801f946 <_printf_i+0x196>
 801f93e:	6823      	ldr	r3, [r4, #0]
 801f940:	f023 0320 	bic.w	r3, r3, #32
 801f944:	6023      	str	r3, [r4, #0]
 801f946:	2310      	movs	r3, #16
 801f948:	e7b0      	b.n	801f8ac <_printf_i+0xfc>
 801f94a:	6823      	ldr	r3, [r4, #0]
 801f94c:	f043 0320 	orr.w	r3, r3, #32
 801f950:	6023      	str	r3, [r4, #0]
 801f952:	2378      	movs	r3, #120	; 0x78
 801f954:	4828      	ldr	r0, [pc, #160]	; (801f9f8 <_printf_i+0x248>)
 801f956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f95a:	e7e3      	b.n	801f924 <_printf_i+0x174>
 801f95c:	0659      	lsls	r1, r3, #25
 801f95e:	bf48      	it	mi
 801f960:	b2b6      	uxthmi	r6, r6
 801f962:	e7e6      	b.n	801f932 <_printf_i+0x182>
 801f964:	4615      	mov	r5, r2
 801f966:	e7bb      	b.n	801f8e0 <_printf_i+0x130>
 801f968:	682b      	ldr	r3, [r5, #0]
 801f96a:	6826      	ldr	r6, [r4, #0]
 801f96c:	6961      	ldr	r1, [r4, #20]
 801f96e:	1d18      	adds	r0, r3, #4
 801f970:	6028      	str	r0, [r5, #0]
 801f972:	0635      	lsls	r5, r6, #24
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	d501      	bpl.n	801f97c <_printf_i+0x1cc>
 801f978:	6019      	str	r1, [r3, #0]
 801f97a:	e002      	b.n	801f982 <_printf_i+0x1d2>
 801f97c:	0670      	lsls	r0, r6, #25
 801f97e:	d5fb      	bpl.n	801f978 <_printf_i+0x1c8>
 801f980:	8019      	strh	r1, [r3, #0]
 801f982:	2300      	movs	r3, #0
 801f984:	6123      	str	r3, [r4, #16]
 801f986:	4615      	mov	r5, r2
 801f988:	e7ba      	b.n	801f900 <_printf_i+0x150>
 801f98a:	682b      	ldr	r3, [r5, #0]
 801f98c:	1d1a      	adds	r2, r3, #4
 801f98e:	602a      	str	r2, [r5, #0]
 801f990:	681d      	ldr	r5, [r3, #0]
 801f992:	6862      	ldr	r2, [r4, #4]
 801f994:	2100      	movs	r1, #0
 801f996:	4628      	mov	r0, r5
 801f998:	f7e0 fcaa 	bl	80002f0 <memchr>
 801f99c:	b108      	cbz	r0, 801f9a2 <_printf_i+0x1f2>
 801f99e:	1b40      	subs	r0, r0, r5
 801f9a0:	6060      	str	r0, [r4, #4]
 801f9a2:	6863      	ldr	r3, [r4, #4]
 801f9a4:	6123      	str	r3, [r4, #16]
 801f9a6:	2300      	movs	r3, #0
 801f9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f9ac:	e7a8      	b.n	801f900 <_printf_i+0x150>
 801f9ae:	6923      	ldr	r3, [r4, #16]
 801f9b0:	462a      	mov	r2, r5
 801f9b2:	4649      	mov	r1, r9
 801f9b4:	4640      	mov	r0, r8
 801f9b6:	47d0      	blx	sl
 801f9b8:	3001      	adds	r0, #1
 801f9ba:	d0ab      	beq.n	801f914 <_printf_i+0x164>
 801f9bc:	6823      	ldr	r3, [r4, #0]
 801f9be:	079b      	lsls	r3, r3, #30
 801f9c0:	d413      	bmi.n	801f9ea <_printf_i+0x23a>
 801f9c2:	68e0      	ldr	r0, [r4, #12]
 801f9c4:	9b03      	ldr	r3, [sp, #12]
 801f9c6:	4298      	cmp	r0, r3
 801f9c8:	bfb8      	it	lt
 801f9ca:	4618      	movlt	r0, r3
 801f9cc:	e7a4      	b.n	801f918 <_printf_i+0x168>
 801f9ce:	2301      	movs	r3, #1
 801f9d0:	4632      	mov	r2, r6
 801f9d2:	4649      	mov	r1, r9
 801f9d4:	4640      	mov	r0, r8
 801f9d6:	47d0      	blx	sl
 801f9d8:	3001      	adds	r0, #1
 801f9da:	d09b      	beq.n	801f914 <_printf_i+0x164>
 801f9dc:	3501      	adds	r5, #1
 801f9de:	68e3      	ldr	r3, [r4, #12]
 801f9e0:	9903      	ldr	r1, [sp, #12]
 801f9e2:	1a5b      	subs	r3, r3, r1
 801f9e4:	42ab      	cmp	r3, r5
 801f9e6:	dcf2      	bgt.n	801f9ce <_printf_i+0x21e>
 801f9e8:	e7eb      	b.n	801f9c2 <_printf_i+0x212>
 801f9ea:	2500      	movs	r5, #0
 801f9ec:	f104 0619 	add.w	r6, r4, #25
 801f9f0:	e7f5      	b.n	801f9de <_printf_i+0x22e>
 801f9f2:	bf00      	nop
 801f9f4:	080244e5 	.word	0x080244e5
 801f9f8:	080244f6 	.word	0x080244f6

0801f9fc <iprintf>:
 801f9fc:	b40f      	push	{r0, r1, r2, r3}
 801f9fe:	4b0a      	ldr	r3, [pc, #40]	; (801fa28 <iprintf+0x2c>)
 801fa00:	b513      	push	{r0, r1, r4, lr}
 801fa02:	681c      	ldr	r4, [r3, #0]
 801fa04:	b124      	cbz	r4, 801fa10 <iprintf+0x14>
 801fa06:	69a3      	ldr	r3, [r4, #24]
 801fa08:	b913      	cbnz	r3, 801fa10 <iprintf+0x14>
 801fa0a:	4620      	mov	r0, r4
 801fa0c:	f7ff fb08 	bl	801f020 <__sinit>
 801fa10:	ab05      	add	r3, sp, #20
 801fa12:	9a04      	ldr	r2, [sp, #16]
 801fa14:	68a1      	ldr	r1, [r4, #8]
 801fa16:	9301      	str	r3, [sp, #4]
 801fa18:	4620      	mov	r0, r4
 801fa1a:	f7ff fd2b 	bl	801f474 <_vfiprintf_r>
 801fa1e:	b002      	add	sp, #8
 801fa20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fa24:	b004      	add	sp, #16
 801fa26:	4770      	bx	lr
 801fa28:	24000034 	.word	0x24000034

0801fa2c <_puts_r>:
 801fa2c:	b570      	push	{r4, r5, r6, lr}
 801fa2e:	460e      	mov	r6, r1
 801fa30:	4605      	mov	r5, r0
 801fa32:	b118      	cbz	r0, 801fa3c <_puts_r+0x10>
 801fa34:	6983      	ldr	r3, [r0, #24]
 801fa36:	b90b      	cbnz	r3, 801fa3c <_puts_r+0x10>
 801fa38:	f7ff faf2 	bl	801f020 <__sinit>
 801fa3c:	69ab      	ldr	r3, [r5, #24]
 801fa3e:	68ac      	ldr	r4, [r5, #8]
 801fa40:	b913      	cbnz	r3, 801fa48 <_puts_r+0x1c>
 801fa42:	4628      	mov	r0, r5
 801fa44:	f7ff faec 	bl	801f020 <__sinit>
 801fa48:	4b2c      	ldr	r3, [pc, #176]	; (801fafc <_puts_r+0xd0>)
 801fa4a:	429c      	cmp	r4, r3
 801fa4c:	d120      	bne.n	801fa90 <_puts_r+0x64>
 801fa4e:	686c      	ldr	r4, [r5, #4]
 801fa50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa52:	07db      	lsls	r3, r3, #31
 801fa54:	d405      	bmi.n	801fa62 <_puts_r+0x36>
 801fa56:	89a3      	ldrh	r3, [r4, #12]
 801fa58:	0598      	lsls	r0, r3, #22
 801fa5a:	d402      	bmi.n	801fa62 <_puts_r+0x36>
 801fa5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa5e:	f7ff fbb4 	bl	801f1ca <__retarget_lock_acquire_recursive>
 801fa62:	89a3      	ldrh	r3, [r4, #12]
 801fa64:	0719      	lsls	r1, r3, #28
 801fa66:	d51d      	bpl.n	801faa4 <_puts_r+0x78>
 801fa68:	6923      	ldr	r3, [r4, #16]
 801fa6a:	b1db      	cbz	r3, 801faa4 <_puts_r+0x78>
 801fa6c:	3e01      	subs	r6, #1
 801fa6e:	68a3      	ldr	r3, [r4, #8]
 801fa70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801fa74:	3b01      	subs	r3, #1
 801fa76:	60a3      	str	r3, [r4, #8]
 801fa78:	bb39      	cbnz	r1, 801faca <_puts_r+0x9e>
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	da38      	bge.n	801faf0 <_puts_r+0xc4>
 801fa7e:	4622      	mov	r2, r4
 801fa80:	210a      	movs	r1, #10
 801fa82:	4628      	mov	r0, r5
 801fa84:	f000 f984 	bl	801fd90 <__swbuf_r>
 801fa88:	3001      	adds	r0, #1
 801fa8a:	d011      	beq.n	801fab0 <_puts_r+0x84>
 801fa8c:	250a      	movs	r5, #10
 801fa8e:	e011      	b.n	801fab4 <_puts_r+0x88>
 801fa90:	4b1b      	ldr	r3, [pc, #108]	; (801fb00 <_puts_r+0xd4>)
 801fa92:	429c      	cmp	r4, r3
 801fa94:	d101      	bne.n	801fa9a <_puts_r+0x6e>
 801fa96:	68ac      	ldr	r4, [r5, #8]
 801fa98:	e7da      	b.n	801fa50 <_puts_r+0x24>
 801fa9a:	4b1a      	ldr	r3, [pc, #104]	; (801fb04 <_puts_r+0xd8>)
 801fa9c:	429c      	cmp	r4, r3
 801fa9e:	bf08      	it	eq
 801faa0:	68ec      	ldreq	r4, [r5, #12]
 801faa2:	e7d5      	b.n	801fa50 <_puts_r+0x24>
 801faa4:	4621      	mov	r1, r4
 801faa6:	4628      	mov	r0, r5
 801faa8:	f000 f9d6 	bl	801fe58 <__swsetup_r>
 801faac:	2800      	cmp	r0, #0
 801faae:	d0dd      	beq.n	801fa6c <_puts_r+0x40>
 801fab0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801fab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fab6:	07da      	lsls	r2, r3, #31
 801fab8:	d405      	bmi.n	801fac6 <_puts_r+0x9a>
 801faba:	89a3      	ldrh	r3, [r4, #12]
 801fabc:	059b      	lsls	r3, r3, #22
 801fabe:	d402      	bmi.n	801fac6 <_puts_r+0x9a>
 801fac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fac2:	f7ff fb83 	bl	801f1cc <__retarget_lock_release_recursive>
 801fac6:	4628      	mov	r0, r5
 801fac8:	bd70      	pop	{r4, r5, r6, pc}
 801faca:	2b00      	cmp	r3, #0
 801facc:	da04      	bge.n	801fad8 <_puts_r+0xac>
 801face:	69a2      	ldr	r2, [r4, #24]
 801fad0:	429a      	cmp	r2, r3
 801fad2:	dc06      	bgt.n	801fae2 <_puts_r+0xb6>
 801fad4:	290a      	cmp	r1, #10
 801fad6:	d004      	beq.n	801fae2 <_puts_r+0xb6>
 801fad8:	6823      	ldr	r3, [r4, #0]
 801fada:	1c5a      	adds	r2, r3, #1
 801fadc:	6022      	str	r2, [r4, #0]
 801fade:	7019      	strb	r1, [r3, #0]
 801fae0:	e7c5      	b.n	801fa6e <_puts_r+0x42>
 801fae2:	4622      	mov	r2, r4
 801fae4:	4628      	mov	r0, r5
 801fae6:	f000 f953 	bl	801fd90 <__swbuf_r>
 801faea:	3001      	adds	r0, #1
 801faec:	d1bf      	bne.n	801fa6e <_puts_r+0x42>
 801faee:	e7df      	b.n	801fab0 <_puts_r+0x84>
 801faf0:	6823      	ldr	r3, [r4, #0]
 801faf2:	250a      	movs	r5, #10
 801faf4:	1c5a      	adds	r2, r3, #1
 801faf6:	6022      	str	r2, [r4, #0]
 801faf8:	701d      	strb	r5, [r3, #0]
 801fafa:	e7db      	b.n	801fab4 <_puts_r+0x88>
 801fafc:	08024490 	.word	0x08024490
 801fb00:	080244b0 	.word	0x080244b0
 801fb04:	08024470 	.word	0x08024470

0801fb08 <puts>:
 801fb08:	4b02      	ldr	r3, [pc, #8]	; (801fb14 <puts+0xc>)
 801fb0a:	4601      	mov	r1, r0
 801fb0c:	6818      	ldr	r0, [r3, #0]
 801fb0e:	f7ff bf8d 	b.w	801fa2c <_puts_r>
 801fb12:	bf00      	nop
 801fb14:	24000034 	.word	0x24000034

0801fb18 <rand>:
 801fb18:	4b16      	ldr	r3, [pc, #88]	; (801fb74 <rand+0x5c>)
 801fb1a:	b510      	push	{r4, lr}
 801fb1c:	681c      	ldr	r4, [r3, #0]
 801fb1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fb20:	b9b3      	cbnz	r3, 801fb50 <rand+0x38>
 801fb22:	2018      	movs	r0, #24
 801fb24:	f7ff fb54 	bl	801f1d0 <malloc>
 801fb28:	63a0      	str	r0, [r4, #56]	; 0x38
 801fb2a:	b928      	cbnz	r0, 801fb38 <rand+0x20>
 801fb2c:	4602      	mov	r2, r0
 801fb2e:	4b12      	ldr	r3, [pc, #72]	; (801fb78 <rand+0x60>)
 801fb30:	4812      	ldr	r0, [pc, #72]	; (801fb7c <rand+0x64>)
 801fb32:	214e      	movs	r1, #78	; 0x4e
 801fb34:	f7ff f9fe 	bl	801ef34 <__assert_func>
 801fb38:	4a11      	ldr	r2, [pc, #68]	; (801fb80 <rand+0x68>)
 801fb3a:	4b12      	ldr	r3, [pc, #72]	; (801fb84 <rand+0x6c>)
 801fb3c:	e9c0 2300 	strd	r2, r3, [r0]
 801fb40:	4b11      	ldr	r3, [pc, #68]	; (801fb88 <rand+0x70>)
 801fb42:	6083      	str	r3, [r0, #8]
 801fb44:	230b      	movs	r3, #11
 801fb46:	8183      	strh	r3, [r0, #12]
 801fb48:	2201      	movs	r2, #1
 801fb4a:	2300      	movs	r3, #0
 801fb4c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801fb50:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801fb52:	4a0e      	ldr	r2, [pc, #56]	; (801fb8c <rand+0x74>)
 801fb54:	6920      	ldr	r0, [r4, #16]
 801fb56:	6963      	ldr	r3, [r4, #20]
 801fb58:	490d      	ldr	r1, [pc, #52]	; (801fb90 <rand+0x78>)
 801fb5a:	4342      	muls	r2, r0
 801fb5c:	fb01 2203 	mla	r2, r1, r3, r2
 801fb60:	fba0 0101 	umull	r0, r1, r0, r1
 801fb64:	1c43      	adds	r3, r0, #1
 801fb66:	eb42 0001 	adc.w	r0, r2, r1
 801fb6a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801fb6e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801fb72:	bd10      	pop	{r4, pc}
 801fb74:	24000034 	.word	0x24000034
 801fb78:	08024507 	.word	0x08024507
 801fb7c:	0802451e 	.word	0x0802451e
 801fb80:	abcd330e 	.word	0xabcd330e
 801fb84:	e66d1234 	.word	0xe66d1234
 801fb88:	0005deec 	.word	0x0005deec
 801fb8c:	5851f42d 	.word	0x5851f42d
 801fb90:	4c957f2d 	.word	0x4c957f2d

0801fb94 <cleanup_glue>:
 801fb94:	b538      	push	{r3, r4, r5, lr}
 801fb96:	460c      	mov	r4, r1
 801fb98:	6809      	ldr	r1, [r1, #0]
 801fb9a:	4605      	mov	r5, r0
 801fb9c:	b109      	cbz	r1, 801fba2 <cleanup_glue+0xe>
 801fb9e:	f7ff fff9 	bl	801fb94 <cleanup_glue>
 801fba2:	4621      	mov	r1, r4
 801fba4:	4628      	mov	r0, r5
 801fba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fbaa:	f7ff bb59 	b.w	801f260 <_free_r>
	...

0801fbb0 <_reclaim_reent>:
 801fbb0:	4b2c      	ldr	r3, [pc, #176]	; (801fc64 <_reclaim_reent+0xb4>)
 801fbb2:	681b      	ldr	r3, [r3, #0]
 801fbb4:	4283      	cmp	r3, r0
 801fbb6:	b570      	push	{r4, r5, r6, lr}
 801fbb8:	4604      	mov	r4, r0
 801fbba:	d051      	beq.n	801fc60 <_reclaim_reent+0xb0>
 801fbbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801fbbe:	b143      	cbz	r3, 801fbd2 <_reclaim_reent+0x22>
 801fbc0:	68db      	ldr	r3, [r3, #12]
 801fbc2:	2b00      	cmp	r3, #0
 801fbc4:	d14a      	bne.n	801fc5c <_reclaim_reent+0xac>
 801fbc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fbc8:	6819      	ldr	r1, [r3, #0]
 801fbca:	b111      	cbz	r1, 801fbd2 <_reclaim_reent+0x22>
 801fbcc:	4620      	mov	r0, r4
 801fbce:	f7ff fb47 	bl	801f260 <_free_r>
 801fbd2:	6961      	ldr	r1, [r4, #20]
 801fbd4:	b111      	cbz	r1, 801fbdc <_reclaim_reent+0x2c>
 801fbd6:	4620      	mov	r0, r4
 801fbd8:	f7ff fb42 	bl	801f260 <_free_r>
 801fbdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801fbde:	b111      	cbz	r1, 801fbe6 <_reclaim_reent+0x36>
 801fbe0:	4620      	mov	r0, r4
 801fbe2:	f7ff fb3d 	bl	801f260 <_free_r>
 801fbe6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fbe8:	b111      	cbz	r1, 801fbf0 <_reclaim_reent+0x40>
 801fbea:	4620      	mov	r0, r4
 801fbec:	f7ff fb38 	bl	801f260 <_free_r>
 801fbf0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801fbf2:	b111      	cbz	r1, 801fbfa <_reclaim_reent+0x4a>
 801fbf4:	4620      	mov	r0, r4
 801fbf6:	f7ff fb33 	bl	801f260 <_free_r>
 801fbfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fbfc:	b111      	cbz	r1, 801fc04 <_reclaim_reent+0x54>
 801fbfe:	4620      	mov	r0, r4
 801fc00:	f7ff fb2e 	bl	801f260 <_free_r>
 801fc04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801fc06:	b111      	cbz	r1, 801fc0e <_reclaim_reent+0x5e>
 801fc08:	4620      	mov	r0, r4
 801fc0a:	f7ff fb29 	bl	801f260 <_free_r>
 801fc0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801fc10:	b111      	cbz	r1, 801fc18 <_reclaim_reent+0x68>
 801fc12:	4620      	mov	r0, r4
 801fc14:	f7ff fb24 	bl	801f260 <_free_r>
 801fc18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc1a:	b111      	cbz	r1, 801fc22 <_reclaim_reent+0x72>
 801fc1c:	4620      	mov	r0, r4
 801fc1e:	f7ff fb1f 	bl	801f260 <_free_r>
 801fc22:	69a3      	ldr	r3, [r4, #24]
 801fc24:	b1e3      	cbz	r3, 801fc60 <_reclaim_reent+0xb0>
 801fc26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fc28:	4620      	mov	r0, r4
 801fc2a:	4798      	blx	r3
 801fc2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801fc2e:	b1b9      	cbz	r1, 801fc60 <_reclaim_reent+0xb0>
 801fc30:	4620      	mov	r0, r4
 801fc32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fc36:	f7ff bfad 	b.w	801fb94 <cleanup_glue>
 801fc3a:	5949      	ldr	r1, [r1, r5]
 801fc3c:	b941      	cbnz	r1, 801fc50 <_reclaim_reent+0xa0>
 801fc3e:	3504      	adds	r5, #4
 801fc40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fc42:	2d80      	cmp	r5, #128	; 0x80
 801fc44:	68d9      	ldr	r1, [r3, #12]
 801fc46:	d1f8      	bne.n	801fc3a <_reclaim_reent+0x8a>
 801fc48:	4620      	mov	r0, r4
 801fc4a:	f7ff fb09 	bl	801f260 <_free_r>
 801fc4e:	e7ba      	b.n	801fbc6 <_reclaim_reent+0x16>
 801fc50:	680e      	ldr	r6, [r1, #0]
 801fc52:	4620      	mov	r0, r4
 801fc54:	f7ff fb04 	bl	801f260 <_free_r>
 801fc58:	4631      	mov	r1, r6
 801fc5a:	e7ef      	b.n	801fc3c <_reclaim_reent+0x8c>
 801fc5c:	2500      	movs	r5, #0
 801fc5e:	e7ef      	b.n	801fc40 <_reclaim_reent+0x90>
 801fc60:	bd70      	pop	{r4, r5, r6, pc}
 801fc62:	bf00      	nop
 801fc64:	24000034 	.word	0x24000034

0801fc68 <_sbrk_r>:
 801fc68:	b538      	push	{r3, r4, r5, lr}
 801fc6a:	4d06      	ldr	r5, [pc, #24]	; (801fc84 <_sbrk_r+0x1c>)
 801fc6c:	2300      	movs	r3, #0
 801fc6e:	4604      	mov	r4, r0
 801fc70:	4608      	mov	r0, r1
 801fc72:	602b      	str	r3, [r5, #0]
 801fc74:	f7e1 fbe0 	bl	8001438 <_sbrk>
 801fc78:	1c43      	adds	r3, r0, #1
 801fc7a:	d102      	bne.n	801fc82 <_sbrk_r+0x1a>
 801fc7c:	682b      	ldr	r3, [r5, #0]
 801fc7e:	b103      	cbz	r3, 801fc82 <_sbrk_r+0x1a>
 801fc80:	6023      	str	r3, [r4, #0]
 801fc82:	bd38      	pop	{r3, r4, r5, pc}
 801fc84:	2400f9a0 	.word	0x2400f9a0

0801fc88 <siprintf>:
 801fc88:	b40e      	push	{r1, r2, r3}
 801fc8a:	b500      	push	{lr}
 801fc8c:	b09c      	sub	sp, #112	; 0x70
 801fc8e:	ab1d      	add	r3, sp, #116	; 0x74
 801fc90:	9002      	str	r0, [sp, #8]
 801fc92:	9006      	str	r0, [sp, #24]
 801fc94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fc98:	4809      	ldr	r0, [pc, #36]	; (801fcc0 <siprintf+0x38>)
 801fc9a:	9107      	str	r1, [sp, #28]
 801fc9c:	9104      	str	r1, [sp, #16]
 801fc9e:	4909      	ldr	r1, [pc, #36]	; (801fcc4 <siprintf+0x3c>)
 801fca0:	f853 2b04 	ldr.w	r2, [r3], #4
 801fca4:	9105      	str	r1, [sp, #20]
 801fca6:	6800      	ldr	r0, [r0, #0]
 801fca8:	9301      	str	r3, [sp, #4]
 801fcaa:	a902      	add	r1, sp, #8
 801fcac:	f000 fb2a 	bl	8020304 <_svfiprintf_r>
 801fcb0:	9b02      	ldr	r3, [sp, #8]
 801fcb2:	2200      	movs	r2, #0
 801fcb4:	701a      	strb	r2, [r3, #0]
 801fcb6:	b01c      	add	sp, #112	; 0x70
 801fcb8:	f85d eb04 	ldr.w	lr, [sp], #4
 801fcbc:	b003      	add	sp, #12
 801fcbe:	4770      	bx	lr
 801fcc0:	24000034 	.word	0x24000034
 801fcc4:	ffff0208 	.word	0xffff0208

0801fcc8 <__sread>:
 801fcc8:	b510      	push	{r4, lr}
 801fcca:	460c      	mov	r4, r1
 801fccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fcd0:	f000 fc18 	bl	8020504 <_read_r>
 801fcd4:	2800      	cmp	r0, #0
 801fcd6:	bfab      	itete	ge
 801fcd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fcda:	89a3      	ldrhlt	r3, [r4, #12]
 801fcdc:	181b      	addge	r3, r3, r0
 801fcde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fce2:	bfac      	ite	ge
 801fce4:	6563      	strge	r3, [r4, #84]	; 0x54
 801fce6:	81a3      	strhlt	r3, [r4, #12]
 801fce8:	bd10      	pop	{r4, pc}

0801fcea <__swrite>:
 801fcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fcee:	461f      	mov	r7, r3
 801fcf0:	898b      	ldrh	r3, [r1, #12]
 801fcf2:	05db      	lsls	r3, r3, #23
 801fcf4:	4605      	mov	r5, r0
 801fcf6:	460c      	mov	r4, r1
 801fcf8:	4616      	mov	r6, r2
 801fcfa:	d505      	bpl.n	801fd08 <__swrite+0x1e>
 801fcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd00:	2302      	movs	r3, #2
 801fd02:	2200      	movs	r2, #0
 801fd04:	f000 f9f0 	bl	80200e8 <_lseek_r>
 801fd08:	89a3      	ldrh	r3, [r4, #12]
 801fd0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fd0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fd12:	81a3      	strh	r3, [r4, #12]
 801fd14:	4632      	mov	r2, r6
 801fd16:	463b      	mov	r3, r7
 801fd18:	4628      	mov	r0, r5
 801fd1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fd1e:	f000 b889 	b.w	801fe34 <_write_r>

0801fd22 <__sseek>:
 801fd22:	b510      	push	{r4, lr}
 801fd24:	460c      	mov	r4, r1
 801fd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd2a:	f000 f9dd 	bl	80200e8 <_lseek_r>
 801fd2e:	1c43      	adds	r3, r0, #1
 801fd30:	89a3      	ldrh	r3, [r4, #12]
 801fd32:	bf15      	itete	ne
 801fd34:	6560      	strne	r0, [r4, #84]	; 0x54
 801fd36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fd3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fd3e:	81a3      	strheq	r3, [r4, #12]
 801fd40:	bf18      	it	ne
 801fd42:	81a3      	strhne	r3, [r4, #12]
 801fd44:	bd10      	pop	{r4, pc}

0801fd46 <__sclose>:
 801fd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd4a:	f000 b8fb 	b.w	801ff44 <_close_r>

0801fd4e <strchr>:
 801fd4e:	b2c9      	uxtb	r1, r1
 801fd50:	4603      	mov	r3, r0
 801fd52:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fd56:	b11a      	cbz	r2, 801fd60 <strchr+0x12>
 801fd58:	428a      	cmp	r2, r1
 801fd5a:	d1f9      	bne.n	801fd50 <strchr+0x2>
 801fd5c:	4618      	mov	r0, r3
 801fd5e:	4770      	bx	lr
 801fd60:	2900      	cmp	r1, #0
 801fd62:	bf18      	it	ne
 801fd64:	2300      	movne	r3, #0
 801fd66:	e7f9      	b.n	801fd5c <strchr+0xe>

0801fd68 <strncpy>:
 801fd68:	b510      	push	{r4, lr}
 801fd6a:	3901      	subs	r1, #1
 801fd6c:	4603      	mov	r3, r0
 801fd6e:	b132      	cbz	r2, 801fd7e <strncpy+0x16>
 801fd70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fd74:	f803 4b01 	strb.w	r4, [r3], #1
 801fd78:	3a01      	subs	r2, #1
 801fd7a:	2c00      	cmp	r4, #0
 801fd7c:	d1f7      	bne.n	801fd6e <strncpy+0x6>
 801fd7e:	441a      	add	r2, r3
 801fd80:	2100      	movs	r1, #0
 801fd82:	4293      	cmp	r3, r2
 801fd84:	d100      	bne.n	801fd88 <strncpy+0x20>
 801fd86:	bd10      	pop	{r4, pc}
 801fd88:	f803 1b01 	strb.w	r1, [r3], #1
 801fd8c:	e7f9      	b.n	801fd82 <strncpy+0x1a>
	...

0801fd90 <__swbuf_r>:
 801fd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd92:	460e      	mov	r6, r1
 801fd94:	4614      	mov	r4, r2
 801fd96:	4605      	mov	r5, r0
 801fd98:	b118      	cbz	r0, 801fda2 <__swbuf_r+0x12>
 801fd9a:	6983      	ldr	r3, [r0, #24]
 801fd9c:	b90b      	cbnz	r3, 801fda2 <__swbuf_r+0x12>
 801fd9e:	f7ff f93f 	bl	801f020 <__sinit>
 801fda2:	4b21      	ldr	r3, [pc, #132]	; (801fe28 <__swbuf_r+0x98>)
 801fda4:	429c      	cmp	r4, r3
 801fda6:	d12b      	bne.n	801fe00 <__swbuf_r+0x70>
 801fda8:	686c      	ldr	r4, [r5, #4]
 801fdaa:	69a3      	ldr	r3, [r4, #24]
 801fdac:	60a3      	str	r3, [r4, #8]
 801fdae:	89a3      	ldrh	r3, [r4, #12]
 801fdb0:	071a      	lsls	r2, r3, #28
 801fdb2:	d52f      	bpl.n	801fe14 <__swbuf_r+0x84>
 801fdb4:	6923      	ldr	r3, [r4, #16]
 801fdb6:	b36b      	cbz	r3, 801fe14 <__swbuf_r+0x84>
 801fdb8:	6923      	ldr	r3, [r4, #16]
 801fdba:	6820      	ldr	r0, [r4, #0]
 801fdbc:	1ac0      	subs	r0, r0, r3
 801fdbe:	6963      	ldr	r3, [r4, #20]
 801fdc0:	b2f6      	uxtb	r6, r6
 801fdc2:	4283      	cmp	r3, r0
 801fdc4:	4637      	mov	r7, r6
 801fdc6:	dc04      	bgt.n	801fdd2 <__swbuf_r+0x42>
 801fdc8:	4621      	mov	r1, r4
 801fdca:	4628      	mov	r0, r5
 801fdcc:	f000 f950 	bl	8020070 <_fflush_r>
 801fdd0:	bb30      	cbnz	r0, 801fe20 <__swbuf_r+0x90>
 801fdd2:	68a3      	ldr	r3, [r4, #8]
 801fdd4:	3b01      	subs	r3, #1
 801fdd6:	60a3      	str	r3, [r4, #8]
 801fdd8:	6823      	ldr	r3, [r4, #0]
 801fdda:	1c5a      	adds	r2, r3, #1
 801fddc:	6022      	str	r2, [r4, #0]
 801fdde:	701e      	strb	r6, [r3, #0]
 801fde0:	6963      	ldr	r3, [r4, #20]
 801fde2:	3001      	adds	r0, #1
 801fde4:	4283      	cmp	r3, r0
 801fde6:	d004      	beq.n	801fdf2 <__swbuf_r+0x62>
 801fde8:	89a3      	ldrh	r3, [r4, #12]
 801fdea:	07db      	lsls	r3, r3, #31
 801fdec:	d506      	bpl.n	801fdfc <__swbuf_r+0x6c>
 801fdee:	2e0a      	cmp	r6, #10
 801fdf0:	d104      	bne.n	801fdfc <__swbuf_r+0x6c>
 801fdf2:	4621      	mov	r1, r4
 801fdf4:	4628      	mov	r0, r5
 801fdf6:	f000 f93b 	bl	8020070 <_fflush_r>
 801fdfa:	b988      	cbnz	r0, 801fe20 <__swbuf_r+0x90>
 801fdfc:	4638      	mov	r0, r7
 801fdfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe00:	4b0a      	ldr	r3, [pc, #40]	; (801fe2c <__swbuf_r+0x9c>)
 801fe02:	429c      	cmp	r4, r3
 801fe04:	d101      	bne.n	801fe0a <__swbuf_r+0x7a>
 801fe06:	68ac      	ldr	r4, [r5, #8]
 801fe08:	e7cf      	b.n	801fdaa <__swbuf_r+0x1a>
 801fe0a:	4b09      	ldr	r3, [pc, #36]	; (801fe30 <__swbuf_r+0xa0>)
 801fe0c:	429c      	cmp	r4, r3
 801fe0e:	bf08      	it	eq
 801fe10:	68ec      	ldreq	r4, [r5, #12]
 801fe12:	e7ca      	b.n	801fdaa <__swbuf_r+0x1a>
 801fe14:	4621      	mov	r1, r4
 801fe16:	4628      	mov	r0, r5
 801fe18:	f000 f81e 	bl	801fe58 <__swsetup_r>
 801fe1c:	2800      	cmp	r0, #0
 801fe1e:	d0cb      	beq.n	801fdb8 <__swbuf_r+0x28>
 801fe20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801fe24:	e7ea      	b.n	801fdfc <__swbuf_r+0x6c>
 801fe26:	bf00      	nop
 801fe28:	08024490 	.word	0x08024490
 801fe2c:	080244b0 	.word	0x080244b0
 801fe30:	08024470 	.word	0x08024470

0801fe34 <_write_r>:
 801fe34:	b538      	push	{r3, r4, r5, lr}
 801fe36:	4d07      	ldr	r5, [pc, #28]	; (801fe54 <_write_r+0x20>)
 801fe38:	4604      	mov	r4, r0
 801fe3a:	4608      	mov	r0, r1
 801fe3c:	4611      	mov	r1, r2
 801fe3e:	2200      	movs	r2, #0
 801fe40:	602a      	str	r2, [r5, #0]
 801fe42:	461a      	mov	r2, r3
 801fe44:	f7e0 fde7 	bl	8000a16 <_write>
 801fe48:	1c43      	adds	r3, r0, #1
 801fe4a:	d102      	bne.n	801fe52 <_write_r+0x1e>
 801fe4c:	682b      	ldr	r3, [r5, #0]
 801fe4e:	b103      	cbz	r3, 801fe52 <_write_r+0x1e>
 801fe50:	6023      	str	r3, [r4, #0]
 801fe52:	bd38      	pop	{r3, r4, r5, pc}
 801fe54:	2400f9a0 	.word	0x2400f9a0

0801fe58 <__swsetup_r>:
 801fe58:	4b32      	ldr	r3, [pc, #200]	; (801ff24 <__swsetup_r+0xcc>)
 801fe5a:	b570      	push	{r4, r5, r6, lr}
 801fe5c:	681d      	ldr	r5, [r3, #0]
 801fe5e:	4606      	mov	r6, r0
 801fe60:	460c      	mov	r4, r1
 801fe62:	b125      	cbz	r5, 801fe6e <__swsetup_r+0x16>
 801fe64:	69ab      	ldr	r3, [r5, #24]
 801fe66:	b913      	cbnz	r3, 801fe6e <__swsetup_r+0x16>
 801fe68:	4628      	mov	r0, r5
 801fe6a:	f7ff f8d9 	bl	801f020 <__sinit>
 801fe6e:	4b2e      	ldr	r3, [pc, #184]	; (801ff28 <__swsetup_r+0xd0>)
 801fe70:	429c      	cmp	r4, r3
 801fe72:	d10f      	bne.n	801fe94 <__swsetup_r+0x3c>
 801fe74:	686c      	ldr	r4, [r5, #4]
 801fe76:	89a3      	ldrh	r3, [r4, #12]
 801fe78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fe7c:	0719      	lsls	r1, r3, #28
 801fe7e:	d42c      	bmi.n	801feda <__swsetup_r+0x82>
 801fe80:	06dd      	lsls	r5, r3, #27
 801fe82:	d411      	bmi.n	801fea8 <__swsetup_r+0x50>
 801fe84:	2309      	movs	r3, #9
 801fe86:	6033      	str	r3, [r6, #0]
 801fe88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fe8c:	81a3      	strh	r3, [r4, #12]
 801fe8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fe92:	e03e      	b.n	801ff12 <__swsetup_r+0xba>
 801fe94:	4b25      	ldr	r3, [pc, #148]	; (801ff2c <__swsetup_r+0xd4>)
 801fe96:	429c      	cmp	r4, r3
 801fe98:	d101      	bne.n	801fe9e <__swsetup_r+0x46>
 801fe9a:	68ac      	ldr	r4, [r5, #8]
 801fe9c:	e7eb      	b.n	801fe76 <__swsetup_r+0x1e>
 801fe9e:	4b24      	ldr	r3, [pc, #144]	; (801ff30 <__swsetup_r+0xd8>)
 801fea0:	429c      	cmp	r4, r3
 801fea2:	bf08      	it	eq
 801fea4:	68ec      	ldreq	r4, [r5, #12]
 801fea6:	e7e6      	b.n	801fe76 <__swsetup_r+0x1e>
 801fea8:	0758      	lsls	r0, r3, #29
 801feaa:	d512      	bpl.n	801fed2 <__swsetup_r+0x7a>
 801feac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801feae:	b141      	cbz	r1, 801fec2 <__swsetup_r+0x6a>
 801feb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801feb4:	4299      	cmp	r1, r3
 801feb6:	d002      	beq.n	801febe <__swsetup_r+0x66>
 801feb8:	4630      	mov	r0, r6
 801feba:	f7ff f9d1 	bl	801f260 <_free_r>
 801febe:	2300      	movs	r3, #0
 801fec0:	6363      	str	r3, [r4, #52]	; 0x34
 801fec2:	89a3      	ldrh	r3, [r4, #12]
 801fec4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fec8:	81a3      	strh	r3, [r4, #12]
 801feca:	2300      	movs	r3, #0
 801fecc:	6063      	str	r3, [r4, #4]
 801fece:	6923      	ldr	r3, [r4, #16]
 801fed0:	6023      	str	r3, [r4, #0]
 801fed2:	89a3      	ldrh	r3, [r4, #12]
 801fed4:	f043 0308 	orr.w	r3, r3, #8
 801fed8:	81a3      	strh	r3, [r4, #12]
 801feda:	6923      	ldr	r3, [r4, #16]
 801fedc:	b94b      	cbnz	r3, 801fef2 <__swsetup_r+0x9a>
 801fede:	89a3      	ldrh	r3, [r4, #12]
 801fee0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fee8:	d003      	beq.n	801fef2 <__swsetup_r+0x9a>
 801feea:	4621      	mov	r1, r4
 801feec:	4630      	mov	r0, r6
 801feee:	f000 f933 	bl	8020158 <__smakebuf_r>
 801fef2:	89a0      	ldrh	r0, [r4, #12]
 801fef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fef8:	f010 0301 	ands.w	r3, r0, #1
 801fefc:	d00a      	beq.n	801ff14 <__swsetup_r+0xbc>
 801fefe:	2300      	movs	r3, #0
 801ff00:	60a3      	str	r3, [r4, #8]
 801ff02:	6963      	ldr	r3, [r4, #20]
 801ff04:	425b      	negs	r3, r3
 801ff06:	61a3      	str	r3, [r4, #24]
 801ff08:	6923      	ldr	r3, [r4, #16]
 801ff0a:	b943      	cbnz	r3, 801ff1e <__swsetup_r+0xc6>
 801ff0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ff10:	d1ba      	bne.n	801fe88 <__swsetup_r+0x30>
 801ff12:	bd70      	pop	{r4, r5, r6, pc}
 801ff14:	0781      	lsls	r1, r0, #30
 801ff16:	bf58      	it	pl
 801ff18:	6963      	ldrpl	r3, [r4, #20]
 801ff1a:	60a3      	str	r3, [r4, #8]
 801ff1c:	e7f4      	b.n	801ff08 <__swsetup_r+0xb0>
 801ff1e:	2000      	movs	r0, #0
 801ff20:	e7f7      	b.n	801ff12 <__swsetup_r+0xba>
 801ff22:	bf00      	nop
 801ff24:	24000034 	.word	0x24000034
 801ff28:	08024490 	.word	0x08024490
 801ff2c:	080244b0 	.word	0x080244b0
 801ff30:	08024470 	.word	0x08024470

0801ff34 <abort>:
 801ff34:	b508      	push	{r3, lr}
 801ff36:	2006      	movs	r0, #6
 801ff38:	f000 fb1e 	bl	8020578 <raise>
 801ff3c:	2001      	movs	r0, #1
 801ff3e:	f7e1 fa1f 	bl	8001380 <_exit>
	...

0801ff44 <_close_r>:
 801ff44:	b538      	push	{r3, r4, r5, lr}
 801ff46:	4d06      	ldr	r5, [pc, #24]	; (801ff60 <_close_r+0x1c>)
 801ff48:	2300      	movs	r3, #0
 801ff4a:	4604      	mov	r4, r0
 801ff4c:	4608      	mov	r0, r1
 801ff4e:	602b      	str	r3, [r5, #0]
 801ff50:	f7e1 fa3d 	bl	80013ce <_close>
 801ff54:	1c43      	adds	r3, r0, #1
 801ff56:	d102      	bne.n	801ff5e <_close_r+0x1a>
 801ff58:	682b      	ldr	r3, [r5, #0]
 801ff5a:	b103      	cbz	r3, 801ff5e <_close_r+0x1a>
 801ff5c:	6023      	str	r3, [r4, #0]
 801ff5e:	bd38      	pop	{r3, r4, r5, pc}
 801ff60:	2400f9a0 	.word	0x2400f9a0

0801ff64 <__sflush_r>:
 801ff64:	898a      	ldrh	r2, [r1, #12]
 801ff66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff6a:	4605      	mov	r5, r0
 801ff6c:	0710      	lsls	r0, r2, #28
 801ff6e:	460c      	mov	r4, r1
 801ff70:	d458      	bmi.n	8020024 <__sflush_r+0xc0>
 801ff72:	684b      	ldr	r3, [r1, #4]
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	dc05      	bgt.n	801ff84 <__sflush_r+0x20>
 801ff78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ff7a:	2b00      	cmp	r3, #0
 801ff7c:	dc02      	bgt.n	801ff84 <__sflush_r+0x20>
 801ff7e:	2000      	movs	r0, #0
 801ff80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ff86:	2e00      	cmp	r6, #0
 801ff88:	d0f9      	beq.n	801ff7e <__sflush_r+0x1a>
 801ff8a:	2300      	movs	r3, #0
 801ff8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ff90:	682f      	ldr	r7, [r5, #0]
 801ff92:	602b      	str	r3, [r5, #0]
 801ff94:	d032      	beq.n	801fffc <__sflush_r+0x98>
 801ff96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ff98:	89a3      	ldrh	r3, [r4, #12]
 801ff9a:	075a      	lsls	r2, r3, #29
 801ff9c:	d505      	bpl.n	801ffaa <__sflush_r+0x46>
 801ff9e:	6863      	ldr	r3, [r4, #4]
 801ffa0:	1ac0      	subs	r0, r0, r3
 801ffa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ffa4:	b10b      	cbz	r3, 801ffaa <__sflush_r+0x46>
 801ffa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ffa8:	1ac0      	subs	r0, r0, r3
 801ffaa:	2300      	movs	r3, #0
 801ffac:	4602      	mov	r2, r0
 801ffae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ffb0:	6a21      	ldr	r1, [r4, #32]
 801ffb2:	4628      	mov	r0, r5
 801ffb4:	47b0      	blx	r6
 801ffb6:	1c43      	adds	r3, r0, #1
 801ffb8:	89a3      	ldrh	r3, [r4, #12]
 801ffba:	d106      	bne.n	801ffca <__sflush_r+0x66>
 801ffbc:	6829      	ldr	r1, [r5, #0]
 801ffbe:	291d      	cmp	r1, #29
 801ffc0:	d82c      	bhi.n	802001c <__sflush_r+0xb8>
 801ffc2:	4a2a      	ldr	r2, [pc, #168]	; (802006c <__sflush_r+0x108>)
 801ffc4:	40ca      	lsrs	r2, r1
 801ffc6:	07d6      	lsls	r6, r2, #31
 801ffc8:	d528      	bpl.n	802001c <__sflush_r+0xb8>
 801ffca:	2200      	movs	r2, #0
 801ffcc:	6062      	str	r2, [r4, #4]
 801ffce:	04d9      	lsls	r1, r3, #19
 801ffd0:	6922      	ldr	r2, [r4, #16]
 801ffd2:	6022      	str	r2, [r4, #0]
 801ffd4:	d504      	bpl.n	801ffe0 <__sflush_r+0x7c>
 801ffd6:	1c42      	adds	r2, r0, #1
 801ffd8:	d101      	bne.n	801ffde <__sflush_r+0x7a>
 801ffda:	682b      	ldr	r3, [r5, #0]
 801ffdc:	b903      	cbnz	r3, 801ffe0 <__sflush_r+0x7c>
 801ffde:	6560      	str	r0, [r4, #84]	; 0x54
 801ffe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ffe2:	602f      	str	r7, [r5, #0]
 801ffe4:	2900      	cmp	r1, #0
 801ffe6:	d0ca      	beq.n	801ff7e <__sflush_r+0x1a>
 801ffe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ffec:	4299      	cmp	r1, r3
 801ffee:	d002      	beq.n	801fff6 <__sflush_r+0x92>
 801fff0:	4628      	mov	r0, r5
 801fff2:	f7ff f935 	bl	801f260 <_free_r>
 801fff6:	2000      	movs	r0, #0
 801fff8:	6360      	str	r0, [r4, #52]	; 0x34
 801fffa:	e7c1      	b.n	801ff80 <__sflush_r+0x1c>
 801fffc:	6a21      	ldr	r1, [r4, #32]
 801fffe:	2301      	movs	r3, #1
 8020000:	4628      	mov	r0, r5
 8020002:	47b0      	blx	r6
 8020004:	1c41      	adds	r1, r0, #1
 8020006:	d1c7      	bne.n	801ff98 <__sflush_r+0x34>
 8020008:	682b      	ldr	r3, [r5, #0]
 802000a:	2b00      	cmp	r3, #0
 802000c:	d0c4      	beq.n	801ff98 <__sflush_r+0x34>
 802000e:	2b1d      	cmp	r3, #29
 8020010:	d001      	beq.n	8020016 <__sflush_r+0xb2>
 8020012:	2b16      	cmp	r3, #22
 8020014:	d101      	bne.n	802001a <__sflush_r+0xb6>
 8020016:	602f      	str	r7, [r5, #0]
 8020018:	e7b1      	b.n	801ff7e <__sflush_r+0x1a>
 802001a:	89a3      	ldrh	r3, [r4, #12]
 802001c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020020:	81a3      	strh	r3, [r4, #12]
 8020022:	e7ad      	b.n	801ff80 <__sflush_r+0x1c>
 8020024:	690f      	ldr	r7, [r1, #16]
 8020026:	2f00      	cmp	r7, #0
 8020028:	d0a9      	beq.n	801ff7e <__sflush_r+0x1a>
 802002a:	0793      	lsls	r3, r2, #30
 802002c:	680e      	ldr	r6, [r1, #0]
 802002e:	bf08      	it	eq
 8020030:	694b      	ldreq	r3, [r1, #20]
 8020032:	600f      	str	r7, [r1, #0]
 8020034:	bf18      	it	ne
 8020036:	2300      	movne	r3, #0
 8020038:	eba6 0807 	sub.w	r8, r6, r7
 802003c:	608b      	str	r3, [r1, #8]
 802003e:	f1b8 0f00 	cmp.w	r8, #0
 8020042:	dd9c      	ble.n	801ff7e <__sflush_r+0x1a>
 8020044:	6a21      	ldr	r1, [r4, #32]
 8020046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020048:	4643      	mov	r3, r8
 802004a:	463a      	mov	r2, r7
 802004c:	4628      	mov	r0, r5
 802004e:	47b0      	blx	r6
 8020050:	2800      	cmp	r0, #0
 8020052:	dc06      	bgt.n	8020062 <__sflush_r+0xfe>
 8020054:	89a3      	ldrh	r3, [r4, #12]
 8020056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802005a:	81a3      	strh	r3, [r4, #12]
 802005c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020060:	e78e      	b.n	801ff80 <__sflush_r+0x1c>
 8020062:	4407      	add	r7, r0
 8020064:	eba8 0800 	sub.w	r8, r8, r0
 8020068:	e7e9      	b.n	802003e <__sflush_r+0xda>
 802006a:	bf00      	nop
 802006c:	20400001 	.word	0x20400001

08020070 <_fflush_r>:
 8020070:	b538      	push	{r3, r4, r5, lr}
 8020072:	690b      	ldr	r3, [r1, #16]
 8020074:	4605      	mov	r5, r0
 8020076:	460c      	mov	r4, r1
 8020078:	b913      	cbnz	r3, 8020080 <_fflush_r+0x10>
 802007a:	2500      	movs	r5, #0
 802007c:	4628      	mov	r0, r5
 802007e:	bd38      	pop	{r3, r4, r5, pc}
 8020080:	b118      	cbz	r0, 802008a <_fflush_r+0x1a>
 8020082:	6983      	ldr	r3, [r0, #24]
 8020084:	b90b      	cbnz	r3, 802008a <_fflush_r+0x1a>
 8020086:	f7fe ffcb 	bl	801f020 <__sinit>
 802008a:	4b14      	ldr	r3, [pc, #80]	; (80200dc <_fflush_r+0x6c>)
 802008c:	429c      	cmp	r4, r3
 802008e:	d11b      	bne.n	80200c8 <_fflush_r+0x58>
 8020090:	686c      	ldr	r4, [r5, #4]
 8020092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020096:	2b00      	cmp	r3, #0
 8020098:	d0ef      	beq.n	802007a <_fflush_r+0xa>
 802009a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802009c:	07d0      	lsls	r0, r2, #31
 802009e:	d404      	bmi.n	80200aa <_fflush_r+0x3a>
 80200a0:	0599      	lsls	r1, r3, #22
 80200a2:	d402      	bmi.n	80200aa <_fflush_r+0x3a>
 80200a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80200a6:	f7ff f890 	bl	801f1ca <__retarget_lock_acquire_recursive>
 80200aa:	4628      	mov	r0, r5
 80200ac:	4621      	mov	r1, r4
 80200ae:	f7ff ff59 	bl	801ff64 <__sflush_r>
 80200b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80200b4:	07da      	lsls	r2, r3, #31
 80200b6:	4605      	mov	r5, r0
 80200b8:	d4e0      	bmi.n	802007c <_fflush_r+0xc>
 80200ba:	89a3      	ldrh	r3, [r4, #12]
 80200bc:	059b      	lsls	r3, r3, #22
 80200be:	d4dd      	bmi.n	802007c <_fflush_r+0xc>
 80200c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80200c2:	f7ff f883 	bl	801f1cc <__retarget_lock_release_recursive>
 80200c6:	e7d9      	b.n	802007c <_fflush_r+0xc>
 80200c8:	4b05      	ldr	r3, [pc, #20]	; (80200e0 <_fflush_r+0x70>)
 80200ca:	429c      	cmp	r4, r3
 80200cc:	d101      	bne.n	80200d2 <_fflush_r+0x62>
 80200ce:	68ac      	ldr	r4, [r5, #8]
 80200d0:	e7df      	b.n	8020092 <_fflush_r+0x22>
 80200d2:	4b04      	ldr	r3, [pc, #16]	; (80200e4 <_fflush_r+0x74>)
 80200d4:	429c      	cmp	r4, r3
 80200d6:	bf08      	it	eq
 80200d8:	68ec      	ldreq	r4, [r5, #12]
 80200da:	e7da      	b.n	8020092 <_fflush_r+0x22>
 80200dc:	08024490 	.word	0x08024490
 80200e0:	080244b0 	.word	0x080244b0
 80200e4:	08024470 	.word	0x08024470

080200e8 <_lseek_r>:
 80200e8:	b538      	push	{r3, r4, r5, lr}
 80200ea:	4d07      	ldr	r5, [pc, #28]	; (8020108 <_lseek_r+0x20>)
 80200ec:	4604      	mov	r4, r0
 80200ee:	4608      	mov	r0, r1
 80200f0:	4611      	mov	r1, r2
 80200f2:	2200      	movs	r2, #0
 80200f4:	602a      	str	r2, [r5, #0]
 80200f6:	461a      	mov	r2, r3
 80200f8:	f7e1 f990 	bl	800141c <_lseek>
 80200fc:	1c43      	adds	r3, r0, #1
 80200fe:	d102      	bne.n	8020106 <_lseek_r+0x1e>
 8020100:	682b      	ldr	r3, [r5, #0]
 8020102:	b103      	cbz	r3, 8020106 <_lseek_r+0x1e>
 8020104:	6023      	str	r3, [r4, #0]
 8020106:	bd38      	pop	{r3, r4, r5, pc}
 8020108:	2400f9a0 	.word	0x2400f9a0

0802010c <__swhatbuf_r>:
 802010c:	b570      	push	{r4, r5, r6, lr}
 802010e:	460e      	mov	r6, r1
 8020110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020114:	2900      	cmp	r1, #0
 8020116:	b096      	sub	sp, #88	; 0x58
 8020118:	4614      	mov	r4, r2
 802011a:	461d      	mov	r5, r3
 802011c:	da08      	bge.n	8020130 <__swhatbuf_r+0x24>
 802011e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020122:	2200      	movs	r2, #0
 8020124:	602a      	str	r2, [r5, #0]
 8020126:	061a      	lsls	r2, r3, #24
 8020128:	d410      	bmi.n	802014c <__swhatbuf_r+0x40>
 802012a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802012e:	e00e      	b.n	802014e <__swhatbuf_r+0x42>
 8020130:	466a      	mov	r2, sp
 8020132:	f000 fa3d 	bl	80205b0 <_fstat_r>
 8020136:	2800      	cmp	r0, #0
 8020138:	dbf1      	blt.n	802011e <__swhatbuf_r+0x12>
 802013a:	9a01      	ldr	r2, [sp, #4]
 802013c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020140:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020144:	425a      	negs	r2, r3
 8020146:	415a      	adcs	r2, r3
 8020148:	602a      	str	r2, [r5, #0]
 802014a:	e7ee      	b.n	802012a <__swhatbuf_r+0x1e>
 802014c:	2340      	movs	r3, #64	; 0x40
 802014e:	2000      	movs	r0, #0
 8020150:	6023      	str	r3, [r4, #0]
 8020152:	b016      	add	sp, #88	; 0x58
 8020154:	bd70      	pop	{r4, r5, r6, pc}
	...

08020158 <__smakebuf_r>:
 8020158:	898b      	ldrh	r3, [r1, #12]
 802015a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802015c:	079d      	lsls	r5, r3, #30
 802015e:	4606      	mov	r6, r0
 8020160:	460c      	mov	r4, r1
 8020162:	d507      	bpl.n	8020174 <__smakebuf_r+0x1c>
 8020164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020168:	6023      	str	r3, [r4, #0]
 802016a:	6123      	str	r3, [r4, #16]
 802016c:	2301      	movs	r3, #1
 802016e:	6163      	str	r3, [r4, #20]
 8020170:	b002      	add	sp, #8
 8020172:	bd70      	pop	{r4, r5, r6, pc}
 8020174:	ab01      	add	r3, sp, #4
 8020176:	466a      	mov	r2, sp
 8020178:	f7ff ffc8 	bl	802010c <__swhatbuf_r>
 802017c:	9900      	ldr	r1, [sp, #0]
 802017e:	4605      	mov	r5, r0
 8020180:	4630      	mov	r0, r6
 8020182:	f7ff f8d9 	bl	801f338 <_malloc_r>
 8020186:	b948      	cbnz	r0, 802019c <__smakebuf_r+0x44>
 8020188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802018c:	059a      	lsls	r2, r3, #22
 802018e:	d4ef      	bmi.n	8020170 <__smakebuf_r+0x18>
 8020190:	f023 0303 	bic.w	r3, r3, #3
 8020194:	f043 0302 	orr.w	r3, r3, #2
 8020198:	81a3      	strh	r3, [r4, #12]
 802019a:	e7e3      	b.n	8020164 <__smakebuf_r+0xc>
 802019c:	4b0d      	ldr	r3, [pc, #52]	; (80201d4 <__smakebuf_r+0x7c>)
 802019e:	62b3      	str	r3, [r6, #40]	; 0x28
 80201a0:	89a3      	ldrh	r3, [r4, #12]
 80201a2:	6020      	str	r0, [r4, #0]
 80201a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80201a8:	81a3      	strh	r3, [r4, #12]
 80201aa:	9b00      	ldr	r3, [sp, #0]
 80201ac:	6163      	str	r3, [r4, #20]
 80201ae:	9b01      	ldr	r3, [sp, #4]
 80201b0:	6120      	str	r0, [r4, #16]
 80201b2:	b15b      	cbz	r3, 80201cc <__smakebuf_r+0x74>
 80201b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80201b8:	4630      	mov	r0, r6
 80201ba:	f000 fa0b 	bl	80205d4 <_isatty_r>
 80201be:	b128      	cbz	r0, 80201cc <__smakebuf_r+0x74>
 80201c0:	89a3      	ldrh	r3, [r4, #12]
 80201c2:	f023 0303 	bic.w	r3, r3, #3
 80201c6:	f043 0301 	orr.w	r3, r3, #1
 80201ca:	81a3      	strh	r3, [r4, #12]
 80201cc:	89a0      	ldrh	r0, [r4, #12]
 80201ce:	4305      	orrs	r5, r0
 80201d0:	81a5      	strh	r5, [r4, #12]
 80201d2:	e7cd      	b.n	8020170 <__smakebuf_r+0x18>
 80201d4:	0801efb9 	.word	0x0801efb9

080201d8 <__malloc_lock>:
 80201d8:	4801      	ldr	r0, [pc, #4]	; (80201e0 <__malloc_lock+0x8>)
 80201da:	f7fe bff6 	b.w	801f1ca <__retarget_lock_acquire_recursive>
 80201de:	bf00      	nop
 80201e0:	2400f994 	.word	0x2400f994

080201e4 <__malloc_unlock>:
 80201e4:	4801      	ldr	r0, [pc, #4]	; (80201ec <__malloc_unlock+0x8>)
 80201e6:	f7fe bff1 	b.w	801f1cc <__retarget_lock_release_recursive>
 80201ea:	bf00      	nop
 80201ec:	2400f994 	.word	0x2400f994

080201f0 <_realloc_r>:
 80201f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80201f4:	4680      	mov	r8, r0
 80201f6:	4614      	mov	r4, r2
 80201f8:	460e      	mov	r6, r1
 80201fa:	b921      	cbnz	r1, 8020206 <_realloc_r+0x16>
 80201fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020200:	4611      	mov	r1, r2
 8020202:	f7ff b899 	b.w	801f338 <_malloc_r>
 8020206:	b92a      	cbnz	r2, 8020214 <_realloc_r+0x24>
 8020208:	f7ff f82a 	bl	801f260 <_free_r>
 802020c:	4625      	mov	r5, r4
 802020e:	4628      	mov	r0, r5
 8020210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020214:	f000 f9ee 	bl	80205f4 <_malloc_usable_size_r>
 8020218:	4284      	cmp	r4, r0
 802021a:	4607      	mov	r7, r0
 802021c:	d802      	bhi.n	8020224 <_realloc_r+0x34>
 802021e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020222:	d812      	bhi.n	802024a <_realloc_r+0x5a>
 8020224:	4621      	mov	r1, r4
 8020226:	4640      	mov	r0, r8
 8020228:	f7ff f886 	bl	801f338 <_malloc_r>
 802022c:	4605      	mov	r5, r0
 802022e:	2800      	cmp	r0, #0
 8020230:	d0ed      	beq.n	802020e <_realloc_r+0x1e>
 8020232:	42bc      	cmp	r4, r7
 8020234:	4622      	mov	r2, r4
 8020236:	4631      	mov	r1, r6
 8020238:	bf28      	it	cs
 802023a:	463a      	movcs	r2, r7
 802023c:	f7fe ffe0 	bl	801f200 <memcpy>
 8020240:	4631      	mov	r1, r6
 8020242:	4640      	mov	r0, r8
 8020244:	f7ff f80c 	bl	801f260 <_free_r>
 8020248:	e7e1      	b.n	802020e <_realloc_r+0x1e>
 802024a:	4635      	mov	r5, r6
 802024c:	e7df      	b.n	802020e <_realloc_r+0x1e>

0802024e <__ssputs_r>:
 802024e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020252:	688e      	ldr	r6, [r1, #8]
 8020254:	429e      	cmp	r6, r3
 8020256:	4682      	mov	sl, r0
 8020258:	460c      	mov	r4, r1
 802025a:	4690      	mov	r8, r2
 802025c:	461f      	mov	r7, r3
 802025e:	d838      	bhi.n	80202d2 <__ssputs_r+0x84>
 8020260:	898a      	ldrh	r2, [r1, #12]
 8020262:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020266:	d032      	beq.n	80202ce <__ssputs_r+0x80>
 8020268:	6825      	ldr	r5, [r4, #0]
 802026a:	6909      	ldr	r1, [r1, #16]
 802026c:	eba5 0901 	sub.w	r9, r5, r1
 8020270:	6965      	ldr	r5, [r4, #20]
 8020272:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802027a:	3301      	adds	r3, #1
 802027c:	444b      	add	r3, r9
 802027e:	106d      	asrs	r5, r5, #1
 8020280:	429d      	cmp	r5, r3
 8020282:	bf38      	it	cc
 8020284:	461d      	movcc	r5, r3
 8020286:	0553      	lsls	r3, r2, #21
 8020288:	d531      	bpl.n	80202ee <__ssputs_r+0xa0>
 802028a:	4629      	mov	r1, r5
 802028c:	f7ff f854 	bl	801f338 <_malloc_r>
 8020290:	4606      	mov	r6, r0
 8020292:	b950      	cbnz	r0, 80202aa <__ssputs_r+0x5c>
 8020294:	230c      	movs	r3, #12
 8020296:	f8ca 3000 	str.w	r3, [sl]
 802029a:	89a3      	ldrh	r3, [r4, #12]
 802029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80202a0:	81a3      	strh	r3, [r4, #12]
 80202a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80202a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202aa:	6921      	ldr	r1, [r4, #16]
 80202ac:	464a      	mov	r2, r9
 80202ae:	f7fe ffa7 	bl	801f200 <memcpy>
 80202b2:	89a3      	ldrh	r3, [r4, #12]
 80202b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80202b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80202bc:	81a3      	strh	r3, [r4, #12]
 80202be:	6126      	str	r6, [r4, #16]
 80202c0:	6165      	str	r5, [r4, #20]
 80202c2:	444e      	add	r6, r9
 80202c4:	eba5 0509 	sub.w	r5, r5, r9
 80202c8:	6026      	str	r6, [r4, #0]
 80202ca:	60a5      	str	r5, [r4, #8]
 80202cc:	463e      	mov	r6, r7
 80202ce:	42be      	cmp	r6, r7
 80202d0:	d900      	bls.n	80202d4 <__ssputs_r+0x86>
 80202d2:	463e      	mov	r6, r7
 80202d4:	6820      	ldr	r0, [r4, #0]
 80202d6:	4632      	mov	r2, r6
 80202d8:	4641      	mov	r1, r8
 80202da:	f7fe ff9f 	bl	801f21c <memmove>
 80202de:	68a3      	ldr	r3, [r4, #8]
 80202e0:	1b9b      	subs	r3, r3, r6
 80202e2:	60a3      	str	r3, [r4, #8]
 80202e4:	6823      	ldr	r3, [r4, #0]
 80202e6:	4433      	add	r3, r6
 80202e8:	6023      	str	r3, [r4, #0]
 80202ea:	2000      	movs	r0, #0
 80202ec:	e7db      	b.n	80202a6 <__ssputs_r+0x58>
 80202ee:	462a      	mov	r2, r5
 80202f0:	f7ff ff7e 	bl	80201f0 <_realloc_r>
 80202f4:	4606      	mov	r6, r0
 80202f6:	2800      	cmp	r0, #0
 80202f8:	d1e1      	bne.n	80202be <__ssputs_r+0x70>
 80202fa:	6921      	ldr	r1, [r4, #16]
 80202fc:	4650      	mov	r0, sl
 80202fe:	f7fe ffaf 	bl	801f260 <_free_r>
 8020302:	e7c7      	b.n	8020294 <__ssputs_r+0x46>

08020304 <_svfiprintf_r>:
 8020304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020308:	4698      	mov	r8, r3
 802030a:	898b      	ldrh	r3, [r1, #12]
 802030c:	061b      	lsls	r3, r3, #24
 802030e:	b09d      	sub	sp, #116	; 0x74
 8020310:	4607      	mov	r7, r0
 8020312:	460d      	mov	r5, r1
 8020314:	4614      	mov	r4, r2
 8020316:	d50e      	bpl.n	8020336 <_svfiprintf_r+0x32>
 8020318:	690b      	ldr	r3, [r1, #16]
 802031a:	b963      	cbnz	r3, 8020336 <_svfiprintf_r+0x32>
 802031c:	2140      	movs	r1, #64	; 0x40
 802031e:	f7ff f80b 	bl	801f338 <_malloc_r>
 8020322:	6028      	str	r0, [r5, #0]
 8020324:	6128      	str	r0, [r5, #16]
 8020326:	b920      	cbnz	r0, 8020332 <_svfiprintf_r+0x2e>
 8020328:	230c      	movs	r3, #12
 802032a:	603b      	str	r3, [r7, #0]
 802032c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020330:	e0d1      	b.n	80204d6 <_svfiprintf_r+0x1d2>
 8020332:	2340      	movs	r3, #64	; 0x40
 8020334:	616b      	str	r3, [r5, #20]
 8020336:	2300      	movs	r3, #0
 8020338:	9309      	str	r3, [sp, #36]	; 0x24
 802033a:	2320      	movs	r3, #32
 802033c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020340:	f8cd 800c 	str.w	r8, [sp, #12]
 8020344:	2330      	movs	r3, #48	; 0x30
 8020346:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80204f0 <_svfiprintf_r+0x1ec>
 802034a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802034e:	f04f 0901 	mov.w	r9, #1
 8020352:	4623      	mov	r3, r4
 8020354:	469a      	mov	sl, r3
 8020356:	f813 2b01 	ldrb.w	r2, [r3], #1
 802035a:	b10a      	cbz	r2, 8020360 <_svfiprintf_r+0x5c>
 802035c:	2a25      	cmp	r2, #37	; 0x25
 802035e:	d1f9      	bne.n	8020354 <_svfiprintf_r+0x50>
 8020360:	ebba 0b04 	subs.w	fp, sl, r4
 8020364:	d00b      	beq.n	802037e <_svfiprintf_r+0x7a>
 8020366:	465b      	mov	r3, fp
 8020368:	4622      	mov	r2, r4
 802036a:	4629      	mov	r1, r5
 802036c:	4638      	mov	r0, r7
 802036e:	f7ff ff6e 	bl	802024e <__ssputs_r>
 8020372:	3001      	adds	r0, #1
 8020374:	f000 80aa 	beq.w	80204cc <_svfiprintf_r+0x1c8>
 8020378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802037a:	445a      	add	r2, fp
 802037c:	9209      	str	r2, [sp, #36]	; 0x24
 802037e:	f89a 3000 	ldrb.w	r3, [sl]
 8020382:	2b00      	cmp	r3, #0
 8020384:	f000 80a2 	beq.w	80204cc <_svfiprintf_r+0x1c8>
 8020388:	2300      	movs	r3, #0
 802038a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802038e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020392:	f10a 0a01 	add.w	sl, sl, #1
 8020396:	9304      	str	r3, [sp, #16]
 8020398:	9307      	str	r3, [sp, #28]
 802039a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802039e:	931a      	str	r3, [sp, #104]	; 0x68
 80203a0:	4654      	mov	r4, sl
 80203a2:	2205      	movs	r2, #5
 80203a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80203a8:	4851      	ldr	r0, [pc, #324]	; (80204f0 <_svfiprintf_r+0x1ec>)
 80203aa:	f7df ffa1 	bl	80002f0 <memchr>
 80203ae:	9a04      	ldr	r2, [sp, #16]
 80203b0:	b9d8      	cbnz	r0, 80203ea <_svfiprintf_r+0xe6>
 80203b2:	06d0      	lsls	r0, r2, #27
 80203b4:	bf44      	itt	mi
 80203b6:	2320      	movmi	r3, #32
 80203b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80203bc:	0711      	lsls	r1, r2, #28
 80203be:	bf44      	itt	mi
 80203c0:	232b      	movmi	r3, #43	; 0x2b
 80203c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80203c6:	f89a 3000 	ldrb.w	r3, [sl]
 80203ca:	2b2a      	cmp	r3, #42	; 0x2a
 80203cc:	d015      	beq.n	80203fa <_svfiprintf_r+0xf6>
 80203ce:	9a07      	ldr	r2, [sp, #28]
 80203d0:	4654      	mov	r4, sl
 80203d2:	2000      	movs	r0, #0
 80203d4:	f04f 0c0a 	mov.w	ip, #10
 80203d8:	4621      	mov	r1, r4
 80203da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80203de:	3b30      	subs	r3, #48	; 0x30
 80203e0:	2b09      	cmp	r3, #9
 80203e2:	d94e      	bls.n	8020482 <_svfiprintf_r+0x17e>
 80203e4:	b1b0      	cbz	r0, 8020414 <_svfiprintf_r+0x110>
 80203e6:	9207      	str	r2, [sp, #28]
 80203e8:	e014      	b.n	8020414 <_svfiprintf_r+0x110>
 80203ea:	eba0 0308 	sub.w	r3, r0, r8
 80203ee:	fa09 f303 	lsl.w	r3, r9, r3
 80203f2:	4313      	orrs	r3, r2
 80203f4:	9304      	str	r3, [sp, #16]
 80203f6:	46a2      	mov	sl, r4
 80203f8:	e7d2      	b.n	80203a0 <_svfiprintf_r+0x9c>
 80203fa:	9b03      	ldr	r3, [sp, #12]
 80203fc:	1d19      	adds	r1, r3, #4
 80203fe:	681b      	ldr	r3, [r3, #0]
 8020400:	9103      	str	r1, [sp, #12]
 8020402:	2b00      	cmp	r3, #0
 8020404:	bfbb      	ittet	lt
 8020406:	425b      	neglt	r3, r3
 8020408:	f042 0202 	orrlt.w	r2, r2, #2
 802040c:	9307      	strge	r3, [sp, #28]
 802040e:	9307      	strlt	r3, [sp, #28]
 8020410:	bfb8      	it	lt
 8020412:	9204      	strlt	r2, [sp, #16]
 8020414:	7823      	ldrb	r3, [r4, #0]
 8020416:	2b2e      	cmp	r3, #46	; 0x2e
 8020418:	d10c      	bne.n	8020434 <_svfiprintf_r+0x130>
 802041a:	7863      	ldrb	r3, [r4, #1]
 802041c:	2b2a      	cmp	r3, #42	; 0x2a
 802041e:	d135      	bne.n	802048c <_svfiprintf_r+0x188>
 8020420:	9b03      	ldr	r3, [sp, #12]
 8020422:	1d1a      	adds	r2, r3, #4
 8020424:	681b      	ldr	r3, [r3, #0]
 8020426:	9203      	str	r2, [sp, #12]
 8020428:	2b00      	cmp	r3, #0
 802042a:	bfb8      	it	lt
 802042c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8020430:	3402      	adds	r4, #2
 8020432:	9305      	str	r3, [sp, #20]
 8020434:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020500 <_svfiprintf_r+0x1fc>
 8020438:	7821      	ldrb	r1, [r4, #0]
 802043a:	2203      	movs	r2, #3
 802043c:	4650      	mov	r0, sl
 802043e:	f7df ff57 	bl	80002f0 <memchr>
 8020442:	b140      	cbz	r0, 8020456 <_svfiprintf_r+0x152>
 8020444:	2340      	movs	r3, #64	; 0x40
 8020446:	eba0 000a 	sub.w	r0, r0, sl
 802044a:	fa03 f000 	lsl.w	r0, r3, r0
 802044e:	9b04      	ldr	r3, [sp, #16]
 8020450:	4303      	orrs	r3, r0
 8020452:	3401      	adds	r4, #1
 8020454:	9304      	str	r3, [sp, #16]
 8020456:	f814 1b01 	ldrb.w	r1, [r4], #1
 802045a:	4826      	ldr	r0, [pc, #152]	; (80204f4 <_svfiprintf_r+0x1f0>)
 802045c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020460:	2206      	movs	r2, #6
 8020462:	f7df ff45 	bl	80002f0 <memchr>
 8020466:	2800      	cmp	r0, #0
 8020468:	d038      	beq.n	80204dc <_svfiprintf_r+0x1d8>
 802046a:	4b23      	ldr	r3, [pc, #140]	; (80204f8 <_svfiprintf_r+0x1f4>)
 802046c:	bb1b      	cbnz	r3, 80204b6 <_svfiprintf_r+0x1b2>
 802046e:	9b03      	ldr	r3, [sp, #12]
 8020470:	3307      	adds	r3, #7
 8020472:	f023 0307 	bic.w	r3, r3, #7
 8020476:	3308      	adds	r3, #8
 8020478:	9303      	str	r3, [sp, #12]
 802047a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802047c:	4433      	add	r3, r6
 802047e:	9309      	str	r3, [sp, #36]	; 0x24
 8020480:	e767      	b.n	8020352 <_svfiprintf_r+0x4e>
 8020482:	fb0c 3202 	mla	r2, ip, r2, r3
 8020486:	460c      	mov	r4, r1
 8020488:	2001      	movs	r0, #1
 802048a:	e7a5      	b.n	80203d8 <_svfiprintf_r+0xd4>
 802048c:	2300      	movs	r3, #0
 802048e:	3401      	adds	r4, #1
 8020490:	9305      	str	r3, [sp, #20]
 8020492:	4619      	mov	r1, r3
 8020494:	f04f 0c0a 	mov.w	ip, #10
 8020498:	4620      	mov	r0, r4
 802049a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802049e:	3a30      	subs	r2, #48	; 0x30
 80204a0:	2a09      	cmp	r2, #9
 80204a2:	d903      	bls.n	80204ac <_svfiprintf_r+0x1a8>
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	d0c5      	beq.n	8020434 <_svfiprintf_r+0x130>
 80204a8:	9105      	str	r1, [sp, #20]
 80204aa:	e7c3      	b.n	8020434 <_svfiprintf_r+0x130>
 80204ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80204b0:	4604      	mov	r4, r0
 80204b2:	2301      	movs	r3, #1
 80204b4:	e7f0      	b.n	8020498 <_svfiprintf_r+0x194>
 80204b6:	ab03      	add	r3, sp, #12
 80204b8:	9300      	str	r3, [sp, #0]
 80204ba:	462a      	mov	r2, r5
 80204bc:	4b0f      	ldr	r3, [pc, #60]	; (80204fc <_svfiprintf_r+0x1f8>)
 80204be:	a904      	add	r1, sp, #16
 80204c0:	4638      	mov	r0, r7
 80204c2:	f3af 8000 	nop.w
 80204c6:	1c42      	adds	r2, r0, #1
 80204c8:	4606      	mov	r6, r0
 80204ca:	d1d6      	bne.n	802047a <_svfiprintf_r+0x176>
 80204cc:	89ab      	ldrh	r3, [r5, #12]
 80204ce:	065b      	lsls	r3, r3, #25
 80204d0:	f53f af2c 	bmi.w	802032c <_svfiprintf_r+0x28>
 80204d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80204d6:	b01d      	add	sp, #116	; 0x74
 80204d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204dc:	ab03      	add	r3, sp, #12
 80204de:	9300      	str	r3, [sp, #0]
 80204e0:	462a      	mov	r2, r5
 80204e2:	4b06      	ldr	r3, [pc, #24]	; (80204fc <_svfiprintf_r+0x1f8>)
 80204e4:	a904      	add	r1, sp, #16
 80204e6:	4638      	mov	r0, r7
 80204e8:	f7ff f962 	bl	801f7b0 <_printf_i>
 80204ec:	e7eb      	b.n	80204c6 <_svfiprintf_r+0x1c2>
 80204ee:	bf00      	nop
 80204f0:	080244d4 	.word	0x080244d4
 80204f4:	080244de 	.word	0x080244de
 80204f8:	00000000 	.word	0x00000000
 80204fc:	0802024f 	.word	0x0802024f
 8020500:	080244da 	.word	0x080244da

08020504 <_read_r>:
 8020504:	b538      	push	{r3, r4, r5, lr}
 8020506:	4d07      	ldr	r5, [pc, #28]	; (8020524 <_read_r+0x20>)
 8020508:	4604      	mov	r4, r0
 802050a:	4608      	mov	r0, r1
 802050c:	4611      	mov	r1, r2
 802050e:	2200      	movs	r2, #0
 8020510:	602a      	str	r2, [r5, #0]
 8020512:	461a      	mov	r2, r3
 8020514:	f7e0 ff3e 	bl	8001394 <_read>
 8020518:	1c43      	adds	r3, r0, #1
 802051a:	d102      	bne.n	8020522 <_read_r+0x1e>
 802051c:	682b      	ldr	r3, [r5, #0]
 802051e:	b103      	cbz	r3, 8020522 <_read_r+0x1e>
 8020520:	6023      	str	r3, [r4, #0]
 8020522:	bd38      	pop	{r3, r4, r5, pc}
 8020524:	2400f9a0 	.word	0x2400f9a0

08020528 <_raise_r>:
 8020528:	291f      	cmp	r1, #31
 802052a:	b538      	push	{r3, r4, r5, lr}
 802052c:	4604      	mov	r4, r0
 802052e:	460d      	mov	r5, r1
 8020530:	d904      	bls.n	802053c <_raise_r+0x14>
 8020532:	2316      	movs	r3, #22
 8020534:	6003      	str	r3, [r0, #0]
 8020536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802053a:	bd38      	pop	{r3, r4, r5, pc}
 802053c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802053e:	b112      	cbz	r2, 8020546 <_raise_r+0x1e>
 8020540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020544:	b94b      	cbnz	r3, 802055a <_raise_r+0x32>
 8020546:	4620      	mov	r0, r4
 8020548:	f000 f830 	bl	80205ac <_getpid_r>
 802054c:	462a      	mov	r2, r5
 802054e:	4601      	mov	r1, r0
 8020550:	4620      	mov	r0, r4
 8020552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020556:	f000 b817 	b.w	8020588 <_kill_r>
 802055a:	2b01      	cmp	r3, #1
 802055c:	d00a      	beq.n	8020574 <_raise_r+0x4c>
 802055e:	1c59      	adds	r1, r3, #1
 8020560:	d103      	bne.n	802056a <_raise_r+0x42>
 8020562:	2316      	movs	r3, #22
 8020564:	6003      	str	r3, [r0, #0]
 8020566:	2001      	movs	r0, #1
 8020568:	e7e7      	b.n	802053a <_raise_r+0x12>
 802056a:	2400      	movs	r4, #0
 802056c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020570:	4628      	mov	r0, r5
 8020572:	4798      	blx	r3
 8020574:	2000      	movs	r0, #0
 8020576:	e7e0      	b.n	802053a <_raise_r+0x12>

08020578 <raise>:
 8020578:	4b02      	ldr	r3, [pc, #8]	; (8020584 <raise+0xc>)
 802057a:	4601      	mov	r1, r0
 802057c:	6818      	ldr	r0, [r3, #0]
 802057e:	f7ff bfd3 	b.w	8020528 <_raise_r>
 8020582:	bf00      	nop
 8020584:	24000034 	.word	0x24000034

08020588 <_kill_r>:
 8020588:	b538      	push	{r3, r4, r5, lr}
 802058a:	4d07      	ldr	r5, [pc, #28]	; (80205a8 <_kill_r+0x20>)
 802058c:	2300      	movs	r3, #0
 802058e:	4604      	mov	r4, r0
 8020590:	4608      	mov	r0, r1
 8020592:	4611      	mov	r1, r2
 8020594:	602b      	str	r3, [r5, #0]
 8020596:	f7e0 fee1 	bl	800135c <_kill>
 802059a:	1c43      	adds	r3, r0, #1
 802059c:	d102      	bne.n	80205a4 <_kill_r+0x1c>
 802059e:	682b      	ldr	r3, [r5, #0]
 80205a0:	b103      	cbz	r3, 80205a4 <_kill_r+0x1c>
 80205a2:	6023      	str	r3, [r4, #0]
 80205a4:	bd38      	pop	{r3, r4, r5, pc}
 80205a6:	bf00      	nop
 80205a8:	2400f9a0 	.word	0x2400f9a0

080205ac <_getpid_r>:
 80205ac:	f7e0 bece 	b.w	800134c <_getpid>

080205b0 <_fstat_r>:
 80205b0:	b538      	push	{r3, r4, r5, lr}
 80205b2:	4d07      	ldr	r5, [pc, #28]	; (80205d0 <_fstat_r+0x20>)
 80205b4:	2300      	movs	r3, #0
 80205b6:	4604      	mov	r4, r0
 80205b8:	4608      	mov	r0, r1
 80205ba:	4611      	mov	r1, r2
 80205bc:	602b      	str	r3, [r5, #0]
 80205be:	f7e0 ff12 	bl	80013e6 <_fstat>
 80205c2:	1c43      	adds	r3, r0, #1
 80205c4:	d102      	bne.n	80205cc <_fstat_r+0x1c>
 80205c6:	682b      	ldr	r3, [r5, #0]
 80205c8:	b103      	cbz	r3, 80205cc <_fstat_r+0x1c>
 80205ca:	6023      	str	r3, [r4, #0]
 80205cc:	bd38      	pop	{r3, r4, r5, pc}
 80205ce:	bf00      	nop
 80205d0:	2400f9a0 	.word	0x2400f9a0

080205d4 <_isatty_r>:
 80205d4:	b538      	push	{r3, r4, r5, lr}
 80205d6:	4d06      	ldr	r5, [pc, #24]	; (80205f0 <_isatty_r+0x1c>)
 80205d8:	2300      	movs	r3, #0
 80205da:	4604      	mov	r4, r0
 80205dc:	4608      	mov	r0, r1
 80205de:	602b      	str	r3, [r5, #0]
 80205e0:	f7e0 ff11 	bl	8001406 <_isatty>
 80205e4:	1c43      	adds	r3, r0, #1
 80205e6:	d102      	bne.n	80205ee <_isatty_r+0x1a>
 80205e8:	682b      	ldr	r3, [r5, #0]
 80205ea:	b103      	cbz	r3, 80205ee <_isatty_r+0x1a>
 80205ec:	6023      	str	r3, [r4, #0]
 80205ee:	bd38      	pop	{r3, r4, r5, pc}
 80205f0:	2400f9a0 	.word	0x2400f9a0

080205f4 <_malloc_usable_size_r>:
 80205f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80205f8:	1f18      	subs	r0, r3, #4
 80205fa:	2b00      	cmp	r3, #0
 80205fc:	bfbc      	itt	lt
 80205fe:	580b      	ldrlt	r3, [r1, r0]
 8020600:	18c0      	addlt	r0, r0, r3
 8020602:	4770      	bx	lr

08020604 <_init>:
 8020604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020606:	bf00      	nop
 8020608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802060a:	bc08      	pop	{r3}
 802060c:	469e      	mov	lr, r3
 802060e:	4770      	bx	lr

08020610 <_fini>:
 8020610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020612:	bf00      	nop
 8020614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020616:	bc08      	pop	{r3}
 8020618:	469e      	mov	lr, r3
 802061a:	4770      	bx	lr
