
HSS_Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002048c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f60  0802072c  0802072c  0003072c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802468c  0802468c  00040098  2**0
                  CONTENTS
  4 .ARM          00000000  0802468c  0802468c  00040098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802468c  0802468c  00040098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802468c  0802468c  0003468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024690  08024690  00034690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  08024694  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f90c  24000098  0802472c  00040098  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2400f9a4  0802472c  0004f9a4  2**0
                  ALLOC
 11 .lwip_sec     00024b83  30020000  30020000  00050000  2**2
                  ALLOC
 12 .openamp_section 00000000  38000000  38000000  00040098  2**0
                  CONTENTS
 13 .ARM.attributes 0000002e  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00044ec0  00000000  00000000  000400c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009845  00000000  00000000  00084f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002d08  00000000  00000000  0008e7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002ab0  00000000  00000000  000914d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000538c8  00000000  00000000  00093f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048fc4  00000000  00000000  000e7850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001d2183  00000000  00000000  00130814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00302997  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c33c  00000000  00000000  003029e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08020714 	.word	0x08020714

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08020714 	.word	0x08020714

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	; (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	; (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	; (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	; (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	; (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	; (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	; (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	; (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	; (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	; (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	; (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	; (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	; (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	; (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	; (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	; (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	; (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	; (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	; (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000464:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <StartTCPServerTask>:
/*-----------------------------------------------------------------------------------*/


/**** Send RESPONSE every time the client sends some data ******/
static void StartTCPServerTask(void const *arg)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]
	err_t err, accept_err;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2100      	movs	r1, #0
 80004c8:	2010      	movs	r0, #16
 80004ca:	f011 f9f9 	bl	80118c0 <netconn_new_with_proto_and_callback>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4a3e      	ldr	r2, [pc, #248]	; (80005cc <StartTCPServerTask+0x110>)
 80004d2:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 80004d4:	4b3d      	ldr	r3, [pc, #244]	; (80005cc <StartTCPServerTask+0x110>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d06f      	beq.n	80005bc <StartTCPServerTask+0x100>
	{
		/* Bind connection to the server port. */
		err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);
 80004dc:	4b3b      	ldr	r3, [pc, #236]	; (80005cc <StartTCPServerTask+0x110>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	220a      	movs	r2, #10
 80004e2:	493b      	ldr	r1, [pc, #236]	; (80005d0 <StartTCPServerTask+0x114>)
 80004e4:	4618      	mov	r0, r3
 80004e6:	f011 faa5 	bl	8011a34 <netconn_bind>
 80004ea:	4603      	mov	r3, r0
 80004ec:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 80004ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d15d      	bne.n	80005b2 <StartTCPServerTask+0xf6>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 80004f6:	4b35      	ldr	r3, [pc, #212]	; (80005cc <StartTCPServerTask+0x110>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	21ff      	movs	r1, #255	; 0xff
 80004fc:	4618      	mov	r0, r3
 80004fe:	f011 fad1 	bl	8011aa4 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8000502:	4b32      	ldr	r3, [pc, #200]	; (80005cc <StartTCPServerTask+0x110>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4933      	ldr	r1, [pc, #204]	; (80005d4 <StartTCPServerTask+0x118>)
 8000508:	4618      	mov	r0, r3
 800050a:	f011 faf7 	bl	8011afc <netconn_accept>
 800050e:	4603      	mov	r3, r0
 8000510:	73bb      	strb	r3, [r7, #14]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8000512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f3      	bne.n	8000502 <StartTCPServerTask+0x46>
				{

					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 800051a:	e036      	b.n	800058a <StartTCPServerTask+0xce>
					{
						/* Extrct the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 800051c:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <StartTCPServerTask+0x11c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3308      	adds	r3, #8
 8000522:	4a2e      	ldr	r2, [pc, #184]	; (80005dc <StartTCPServerTask+0x120>)
 8000524:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 8000526:	4b2c      	ldr	r3, [pc, #176]	; (80005d8 <StartTCPServerTask+0x11c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	899a      	ldrh	r2, [r3, #12]
 800052c:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <StartTCPServerTask+0x124>)
 800052e:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{
							strncpy (msg, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <StartTCPServerTask+0x11c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6859      	ldr	r1, [r3, #4]
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <StartTCPServerTask+0x11c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	895b      	ldrh	r3, [r3, #10]
 8000540:	461a      	mov	r2, r3
 8000542:	4828      	ldr	r0, [pc, #160]	; (80005e4 <StartTCPServerTask+0x128>)
 8000544:	f01f fc98 	bl	801fe78 <strncpy>
							TcpServerParsingSeq();

							*/
							// Or modify the message received, so that we can send it back to the client
							//response
							int len = sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 8000548:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <StartTCPServerTask+0x128>)
 800054a:	4927      	ldr	r1, [pc, #156]	; (80005e8 <StartTCPServerTask+0x12c>)
 800054c:	4827      	ldr	r0, [pc, #156]	; (80005ec <StartTCPServerTask+0x130>)
 800054e:	f01f fc23 	bl	801fd98 <siprintf>
 8000552:	60b8      	str	r0, [r7, #8]

							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <StartTCPServerTask+0x118>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	68ba      	ldr	r2, [r7, #8]
 800055a:	2300      	movs	r3, #0
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	4922      	ldr	r1, [pc, #136]	; (80005ec <StartTCPServerTask+0x130>)
 8000562:	f011 fd4d 	bl	8012000 <netconn_write_partly>

							memset (msg, '\0', sizeof(msg));  // clear the buffer
 8000566:	2264      	movs	r2, #100	; 0x64
 8000568:	2100      	movs	r1, #0
 800056a:	481e      	ldr	r0, [pc, #120]	; (80005e4 <StartTCPServerTask+0x128>)
 800056c:	f01e fef8 	bl	801f360 <memset>
						}
						while (netbuf_next(buf) >0);
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <StartTCPServerTask+0x11c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f016 fb73 	bl	8016c60 <netbuf_next>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	dcd7      	bgt.n	8000530 <StartTCPServerTask+0x74>

						netbuf_delete(buf);
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <StartTCPServerTask+0x11c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f016 fb4b 	bl	8016c20 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <StartTCPServerTask+0x118>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4912      	ldr	r1, [pc, #72]	; (80005d8 <StartTCPServerTask+0x11c>)
 8000590:	4618      	mov	r0, r3
 8000592:	f011 fcbb 	bl	8011f0c <netconn_recv>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0bf      	beq.n	800051c <StartTCPServerTask+0x60>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <StartTCPServerTask+0x118>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f011 fe2f 	bl	8012204 <netconn_close>
					netconn_delete(newconn);
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <StartTCPServerTask+0x118>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f011 fa26 	bl	80119fc <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 80005b0:	e7a7      	b.n	8000502 <StartTCPServerTask+0x46>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <StartTCPServerTask+0x110>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f011 fa20 	bl	80119fc <netconn_delete>
		}
	}
	vTaskDelete(NULL);
 80005bc:	2000      	movs	r0, #0
 80005be:	f010 fa37 	bl	8010a30 <vTaskDelete>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	240000b4 	.word	0x240000b4
 80005d0:	08024428 	.word	0x08024428
 80005d4:	240000b8 	.word	0x240000b8
 80005d8:	240000bc 	.word	0x240000bc
 80005dc:	240001ec 	.word	0x240001ec
 80005e0:	240001f0 	.word	0x240001f0
 80005e4:	240000c0 	.word	0x240000c0
 80005e8:	0802073c 	.word	0x0802073c
 80005ec:	24000124 	.word	0x24000124

080005f0 <TcpServerInit>:
	return;
}


void TcpServerInit(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
	if(newconn == NULL)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <TcpServerInit+0x38>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d110      	bne.n	8000620 <TcpServerInit+0x30>
	{
		/* definition and creation of TCPServerTask */
		osThreadDef(TCPServerTask, StartTCPServerTask, osPriorityNormal, 0, DEFAULT_THREAD_STACKSIZE);
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <TcpServerInit+0x3c>)
 8000600:	1d3c      	adds	r4, r7, #4
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		TcpServerHandle = osThreadCreate(osThread(TCPServerTask), NULL);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f00e f8df 	bl	800e7d8 <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <TcpServerInit+0x40>)
 800061e:	6013      	str	r3, [r2, #0]
	}
}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	240000b8 	.word	0x240000b8
 800062c:	0802075c 	.word	0x0802075c
 8000630:	240001f4 	.word	0x240001f4

08000634 <BSPInit>:

static bool is_init_ = false;
char workBuffer[FF_MAX_SS];

static void BSPInit()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	if(!(is_init_)) BSP_SD_Init();
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <BSPInit+0x2c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	f083 0301 	eor.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <BSPInit+0x16>
 8000646:	f00a f875 	bl	800a734 <BSP_SD_Init>

	if(BSP_SD_IsDetected()) is_init_ = true;
 800064a:	f00a f8ff 	bl	800a84c <BSP_SD_IsDetected>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d003      	beq.n	800065c <BSPInit+0x28>
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <BSPInit+0x2c>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]

	return;
 800065a:	bf00      	nop
 800065c:	bf00      	nop
}
 800065e:	bd80      	pop	{r7, pc}
 8000660:	24000654 	.word	0x24000654

08000664 <FatFsInit>:



void FatFsInit()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800066a:	4911      	ldr	r1, [pc, #68]	; (80006b0 <FatFsInit+0x4c>)
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <FatFsInit+0x50>)
 800066e:	f00e f857 	bl	800e720 <FATFS_LinkDriver>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d115      	bne.n	80006a4 <FatFsInit+0x40>
	{
		BSPInit();
 8000678:	f7ff ffdc 	bl	8000634 <BSPInit>

		if(BSP_SD_IsDetected())
 800067c:	f00a f8e6 	bl	800a84c <BSP_SD_IsDetected>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d00e      	beq.n	80006a4 <FatFsInit+0x40>
		{
			FRESULT res;

			res = f_mkfs(SDPath, 0, workBuffer, sizeof(workBuffer));
 8000686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <FatFsInit+0x54>)
 800068c:	2100      	movs	r1, #0
 800068e:	4808      	ldr	r0, [pc, #32]	; (80006b0 <FatFsInit+0x4c>)
 8000690:	f00d fbbe 	bl	800de10 <f_mkfs>
 8000694:	4603      	mov	r3, r0
 8000696:	71fb      	strb	r3, [r7, #7]

			if(res != FR_OK) return; // Error_Handler();
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d104      	bne.n	80006a8 <FatFsInit+0x44>

			printf("Successfully formatted\n");
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <FatFsInit+0x58>)
 80006a0:	f01f faba 	bl	801fc18 <puts>
		}

	}

	return;
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <FatFsInit+0x46>
			if(res != FR_OK) return; // Error_Handler();
 80006a8:	bf00      	nop
}
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	24000650 	.word	0x24000650
 80006b4:	080243c4 	.word	0x080243c4
 80006b8:	24000658 	.word	0x24000658
 80006bc:	08020778 	.word	0x08020778

080006c0 <FatFsTest>:



void FatFsTest(const char *filename)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0c6      	sub	sp, #280	; 0x118
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80006ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80006ce:	6018      	str	r0, [r3, #0]
  FRESULT res;
  uint32_t written_bytes=0 ,read_bytes= 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  char buf[50];
  char readbuf[200] =  {0.};
 80006dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80006e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	3304      	adds	r3, #4
 80006ea:	22c4      	movs	r2, #196	; 0xc4
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f01e fe36 	bl	801f360 <memset>

  int total_byte_ = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  const char *p = "FatFs example for STM32F747i-Dicovery!\r\n";
 80006fa:	4b8a      	ldr	r3, [pc, #552]	; (8000924 <FatFsTest+0x264>)
 80006fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK) return;
 8000700:	2201      	movs	r2, #1
 8000702:	4989      	ldr	r1, [pc, #548]	; (8000928 <FatFsTest+0x268>)
 8000704:	4889      	ldr	r0, [pc, #548]	; (800092c <FatFsTest+0x26c>)
 8000706:	f00c fd53 	bl	800d1b0 <f_mount>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	f040 8104 	bne.w	800091a <FatFsTest+0x25a>

  res = f_open(&SDFile, (const char*)filename, FA_CREATE_ALWAYS | FA_WRITE);
 8000712:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000716:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800071a:	220a      	movs	r2, #10
 800071c:	6819      	ldr	r1, [r3, #0]
 800071e:	4884      	ldr	r0, [pc, #528]	; (8000930 <FatFsTest+0x270>)
 8000720:	f00c fd90 	bl	800d244 <f_open>
 8000724:	4603      	mov	r3, r0
 8000726:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  //res = f_open(&SDFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);

  if(res == FR_OK){
 800072a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800072e:	2b00      	cmp	r3, #0
 8000730:	f040 80ec 	bne.w	800090c <FatFsTest+0x24c>
    sprintf(buf, "%s\r\n", p);
 8000734:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000738:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800073c:	497d      	ldr	r1, [pc, #500]	; (8000934 <FatFsTest+0x274>)
 800073e:	4618      	mov	r0, r3
 8000740:	f01f fb2a 	bl	801fd98 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 8000744:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fdc9 	bl	80002e0 <strlen>
 800074e:	4602      	mov	r2, r0
 8000750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000754:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000758:	4875      	ldr	r0, [pc, #468]	; (8000930 <FatFsTest+0x270>)
 800075a:	f00d f82e 	bl	800d7ba <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 800075e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000762:	4619      	mov	r1, r3
 8000764:	4874      	ldr	r0, [pc, #464]	; (8000938 <FatFsTest+0x278>)
 8000766:	f01f f9d1 	bl	801fb0c <iprintf>

    total_byte_ += written_bytes;
 800076a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800076e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000772:	4413      	add	r3, r2
 8000774:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "Filename : %s\r\n", filename);
 8000778:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800077c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000780:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	496d      	ldr	r1, [pc, #436]	; (800093c <FatFsTest+0x27c>)
 8000788:	f01f fb06 	bl	801fd98 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 800078c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fda5 	bl	80002e0 <strlen>
 8000796:	4602      	mov	r2, r0
 8000798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800079c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80007a0:	4863      	ldr	r0, [pc, #396]	; (8000930 <FatFsTest+0x270>)
 80007a2:	f00d f80a 	bl	800d7ba <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 80007a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80007aa:	4619      	mov	r1, r3
 80007ac:	4862      	ldr	r0, [pc, #392]	; (8000938 <FatFsTest+0x278>)
 80007ae:	f01f f9ad 	bl	801fb0c <iprintf>

    total_byte_ += written_bytes;
 80007b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80007b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80007ba:	4413      	add	r3, r2
 80007bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "Tick : %ld\r\n", HAL_GetTick());
 80007c0:	f001 f852 	bl	8001868 <HAL_GetTick>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007ca:	495d      	ldr	r1, [pc, #372]	; (8000940 <FatFsTest+0x280>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f01f fae3 	bl	801fd98 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 80007d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fd82 	bl	80002e0 <strlen>
 80007dc:	4602      	mov	r2, r0
 80007de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80007e2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80007e6:	4852      	ldr	r0, [pc, #328]	; (8000930 <FatFsTest+0x270>)
 80007e8:	f00c ffe7 	bl	800d7ba <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 80007ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80007f0:	4619      	mov	r1, r3
 80007f2:	4851      	ldr	r0, [pc, #324]	; (8000938 <FatFsTest+0x278>)
 80007f4:	f01f f98a 	bl	801fb0c <iprintf>

    total_byte_ += written_bytes;
 80007f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80007fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000800:	4413      	add	r3, r2
 8000802:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "parameter1 : 3\r\n");
 8000806:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800080a:	494e      	ldr	r1, [pc, #312]	; (8000944 <FatFsTest+0x284>)
 800080c:	4618      	mov	r0, r3
 800080e:	f01f fac3 	bl	801fd98 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 8000812:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fd62 	bl	80002e0 <strlen>
 800081c:	4602      	mov	r2, r0
 800081e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000822:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000826:	4842      	ldr	r0, [pc, #264]	; (8000930 <FatFsTest+0x270>)
 8000828:	f00c ffc7 	bl	800d7ba <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 800082c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000830:	4619      	mov	r1, r3
 8000832:	4841      	ldr	r0, [pc, #260]	; (8000938 <FatFsTest+0x278>)
 8000834:	f01f f96a 	bl	801fb0c <iprintf>

    total_byte_ += written_bytes;
 8000838:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800083c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000840:	4413      	add	r3, r2
 8000842:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "parameter2 : 5\r\n");
 8000846:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800084a:	493f      	ldr	r1, [pc, #252]	; (8000948 <FatFsTest+0x288>)
 800084c:	4618      	mov	r0, r3
 800084e:	f01f faa3 	bl	801fd98 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 8000852:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fd42 	bl	80002e0 <strlen>
 800085c:	4602      	mov	r2, r0
 800085e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000862:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000866:	4832      	ldr	r0, [pc, #200]	; (8000930 <FatFsTest+0x270>)
 8000868:	f00c ffa7 	bl	800d7ba <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 800086c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000870:	4619      	mov	r1, r3
 8000872:	4831      	ldr	r0, [pc, #196]	; (8000938 <FatFsTest+0x278>)
 8000874:	f01f f94a 	bl	801fb0c <iprintf>

    total_byte_ += written_bytes;
 8000878:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800087c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000880:	4413      	add	r3, r2
 8000882:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    printf("total %d bytes written.\r\n", total_byte_);
 8000886:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800088a:	4830      	ldr	r0, [pc, #192]	; (800094c <FatFsTest+0x28c>)
 800088c:	f01f f93e 	bl	801fb0c <iprintf>

    f_close(&SDFile);
 8000890:	4827      	ldr	r0, [pc, #156]	; (8000930 <FatFsTest+0x270>)
 8000892:	f00d f979 	bl	800db88 <f_close>

    res = f_open(&SDFile, (const char*)filename, FA_READ);
 8000896:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800089a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800089e:	2201      	movs	r2, #1
 80008a0:	6819      	ldr	r1, [r3, #0]
 80008a2:	4823      	ldr	r0, [pc, #140]	; (8000930 <FatFsTest+0x270>)
 80008a4:	f00c fcce 	bl	800d244 <f_open>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    if(res == FR_OK)
 80008ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d123      	bne.n	80008fe <FatFsTest+0x23e>
    {
        printf("\r\n---------------Reading Start-----------------\r\n");
 80008b6:	4826      	ldr	r0, [pc, #152]	; (8000950 <FatFsTest+0x290>)
 80008b8:	f01f f9ae 	bl	801fc18 <puts>
        res = f_read(&SDFile, readbuf, sizeof(readbuf), (unsigned int*)&read_bytes);
 80008bc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80008c0:	f107 0108 	add.w	r1, r7, #8
 80008c4:	22c8      	movs	r2, #200	; 0xc8
 80008c6:	481a      	ldr	r0, [pc, #104]	; (8000930 <FatFsTest+0x270>)
 80008c8:	f00c fe44 	bl	800d554 <f_read>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

        if(res == FR_OK && read_bytes > 0) printf("%s",readbuf);
 80008d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d109      	bne.n	80008ee <FatFsTest+0x22e>
 80008da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d005      	beq.n	80008ee <FatFsTest+0x22e>
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	481a      	ldr	r0, [pc, #104]	; (8000954 <FatFsTest+0x294>)
 80008ea:	f01f f90f 	bl	801fb0c <iprintf>

        printf("\r\n---------------Reading End-----------------\r\n");
 80008ee:	481a      	ldr	r0, [pc, #104]	; (8000958 <FatFsTest+0x298>)
 80008f0:	f01f f992 	bl	801fc18 <puts>

        printf("total read bytes : %d\r\n", total_byte_);
 80008f4:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80008f8:	4818      	ldr	r0, [pc, #96]	; (800095c <FatFsTest+0x29c>)
 80008fa:	f01f f907 	bl	801fb0c <iprintf>
    }



    f_close(&SDFile);
 80008fe:	480c      	ldr	r0, [pc, #48]	; (8000930 <FatFsTest+0x270>)
 8000900:	f00d f942 	bl	800db88 <f_close>

    printf("SD card Writing is successfully complete!\n");
 8000904:	4816      	ldr	r0, [pc, #88]	; (8000960 <FatFsTest+0x2a0>)
 8000906:	f01f f987 	bl	801fc18 <puts>
 800090a:	e007      	b.n	800091c <FatFsTest+0x25c>
  }else{
  	printf("[ERROR] f_open failed (%d)\r\n", (int)res);
 800090c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000910:	4619      	mov	r1, r3
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <FatFsTest+0x2a4>)
 8000914:	f01f f8fa 	bl	801fb0c <iprintf>
 8000918:	e000      	b.n	800091c <FatFsTest+0x25c>
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK) return;
 800091a:	bf00      	nop
  }
}
 800091c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	08020790 	.word	0x08020790
 8000928:	24000650 	.word	0x24000650
 800092c:	240001f8 	.word	0x240001f8
 8000930:	24000428 	.word	0x24000428
 8000934:	080207bc 	.word	0x080207bc
 8000938:	080207c4 	.word	0x080207c4
 800093c:	080207dc 	.word	0x080207dc
 8000940:	080207ec 	.word	0x080207ec
 8000944:	080207fc 	.word	0x080207fc
 8000948:	08020810 	.word	0x08020810
 800094c:	08020824 	.word	0x08020824
 8000950:	08020840 	.word	0x08020840
 8000954:	08020874 	.word	0x08020874
 8000958:	08020878 	.word	0x08020878
 800095c:	080208a8 	.word	0x080208a8
 8000960:	080208c0 	.word	0x080208c0
 8000964:	080208ec 	.word	0x080208ec

08000968 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000990:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000996:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	24000858 	.word	0x24000858
 80009b0:	2400090c 	.word	0x2400090c

080009b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d009      	beq.n	80009e0 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80009d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <ITM_SendChar+0x2c>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <ITM_SendChar+0x2e>
 80009e0:	2300      	movs	r3, #0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d010      	beq.n	8000a08 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <ITM_SendChar+0x4a>
    {
      __NOP();
 80009fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009fc:	e7f3      	b.n	80009e6 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <_write>:
extern "C"{
#endif


int _write(int file, char *ptr, int len)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	da0a      	bge.n	8000a44 <_write+0x2e>
  {
	  ITM_SendChar(*ptr++);
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	60ba      	str	r2, [r7, #8]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ffbc 	bl	80009b4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	e7f0      	b.n	8000a26 <_write+0x10>
  }
  return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b5b0      	push	{r4, r5, r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
 // int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a56:	f000 fa95 	bl	8000f84 <_ZL10MPU_Configv>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a5a:	4b58      	ldr	r3, [pc, #352]	; (8000bbc <main+0x16c>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bf14      	ite	ne
 8000a66:	2301      	movne	r3, #1
 8000a68:	2300      	moveq	r3, #0
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d11b      	bne.n	8000aa8 <main+0x58>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a70:	f3bf 8f4f 	dsb	sy
}
 8000a74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a76:	f3bf 8f6f 	isb	sy
}
 8000a7a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a7c:	4b4f      	ldr	r3, [pc, #316]	; (8000bbc <main+0x16c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8a:	f3bf 8f6f 	isb	sy
}
 8000a8e:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a90:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <main+0x16c>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a49      	ldr	r2, [pc, #292]	; (8000bbc <main+0x16c>)
 8000a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a9c:	f3bf 8f4f 	dsb	sy
}
 8000aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aa2:	f3bf 8f6f 	isb	sy
}
 8000aa6:	e000      	b.n	8000aaa <main+0x5a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000aa8:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000aaa:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <main+0x16c>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	bf14      	ite	ne
 8000ab6:	2301      	movne	r3, #1
 8000ab8:	2300      	moveq	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d144      	bne.n	8000b4a <main+0xfa>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <main+0x16c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
}
 8000acc:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000ace:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <main+0x16c>)
 8000ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	0b5b      	lsrs	r3, r3, #13
 8000ada:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae2:	08db      	lsrs	r3, r3, #3
 8000ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aec:	015a      	lsls	r2, r3, #5
 8000aee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000af2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000af8:	4930      	ldr	r1, [pc, #192]	; (8000bbc <main+0x16c>)
 8000afa:	4313      	orrs	r3, r2
 8000afc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	627a      	str	r2, [r7, #36]	; 0x24
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d000      	beq.n	8000b16 <main+0xc6>
      do {
 8000b14:	e7e9      	b.n	8000aea <main+0x9a>
    } while(sets-- != 0U);
 8000b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b18:	1e5a      	subs	r2, r3, #1
 8000b1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf14      	ite	ne
 8000b20:	2301      	movne	r3, #1
 8000b22:	2300      	moveq	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d000      	beq.n	8000b2c <main+0xdc>
    do {
 8000b2a:	e7d9      	b.n	8000ae0 <main+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2c:	f3bf 8f4f 	dsb	sy
}
 8000b30:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <main+0x16c>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <main+0x16c>)
 8000b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b3e:	f3bf 8f4f 	dsb	sy
}
 8000b42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b44:	f3bf 8f6f 	isb	sy
}
 8000b48:	e000      	b.n	8000b4c <main+0xfc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b4a:	bf00      	nop
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fe3c 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f83c 	bl	8000bcc <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <main+0x170>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <main+0x170>)
 8000b5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <main+0x170>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f002 ff76 	bl	8003a64 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f002 ff8c 	bl	8003a98 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f000 f958 	bl	8000e34 <_ZL12MX_GPIO_Initv>
  MX_MDMA_Init();
 8000b84:	f000 f8e4 	bl	8000d50 <_ZL12MX_MDMA_Initv>
  MX_SDMMC1_SD_Init();
 8000b88:	f000 f8ba 	bl	8000d00 <_ZL17MX_SDMMC1_SD_Initv>
  MX_FATFS_Init();
 8000b8c:	f009 fdc2 	bl	800a714 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, StartInitTask, osPriorityNormal, 0, 512);
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <main+0x174>)
 8000b92:	f107 0408 	add.w	r4, r7, #8
 8000b96:	461d      	mov	r5, r3
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00d fe14 	bl	800e7d8 <osThreadCreate>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <main+0x178>)
 8000bb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bb6:	f00d fdec 	bl	800e792 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <main+0x16a>
 8000bbc:	e000ed00 	.word	0xe000ed00
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	08020918 	.word	0x08020918
 8000bc8:	240011f4 	.word	0x240011f4

08000bcc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09c      	sub	sp, #112	; 0x70
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	224c      	movs	r2, #76	; 0x4c
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f01e fbc0 	bl	801f360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2220      	movs	r2, #32
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f01e fbba 	bl	801f360 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bec:	2004      	movs	r0, #4
 8000bee:	f003 fa75 	bl	80040dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <_Z18SystemClock_Configv+0x128>)
 8000bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfa:	4a3e      	ldr	r2, [pc, #248]	; (8000cf4 <_Z18SystemClock_Configv+0x128>)
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <_Z18SystemClock_Configv+0x128>)
 8000c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <_Z18SystemClock_Configv+0x12c>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a39      	ldr	r2, [pc, #228]	; (8000cf8 <_Z18SystemClock_Configv+0x12c>)
 8000c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <_Z18SystemClock_Configv+0x12c>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <_Z18SystemClock_Configv+0x12c>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c30:	bf14      	ite	ne
 8000c32:	2301      	movne	r3, #1
 8000c34:	2300      	moveq	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d000      	beq.n	8000c3e <_Z18SystemClock_Configv+0x72>
 8000c3c:	e7f2      	b.n	8000c24 <_Z18SystemClock_Configv+0x58>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <_Z18SystemClock_Configv+0x130>)
 8000c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c42:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <_Z18SystemClock_Configv+0x130>)
 8000c44:	f023 0303 	bic.w	r3, r3, #3
 8000c48:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c4a:	230a      	movs	r3, #10
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c52:	2340      	movs	r3, #64	; 0x40
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c56:	2301      	movs	r3, #1
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c62:	2304      	movs	r3, #4
 8000c64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000c66:	2332      	movs	r3, #50	; 0x32
 8000c68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c76:	230c      	movs	r3, #12
 8000c78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 fa82 	bl	8004190 <HAL_RCC_OscConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bf14      	ite	ne
 8000c92:	2301      	movne	r3, #1
 8000c94:	2300      	moveq	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000c9c:	f000 f9d6 	bl	800104c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	233f      	movs	r3, #63	; 0x3f
 8000ca2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cac:	2308      	movs	r3, #8
 8000cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cb0:	2340      	movs	r3, #64	; 0x40
 8000cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cbe:	2340      	movs	r3, #64	; 0x40
 8000cc0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 febc 	bl	8004a44 <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 8000cdc:	f000 f9b6 	bl	800104c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000ce0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f004 f862 	bl	8004db0 <HAL_RCC_MCOConfig>
}
 8000cec:	bf00      	nop
 8000cee:	3770      	adds	r7, #112	; 0x70
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	58000400 	.word	0x58000400
 8000cf8:	58024800 	.word	0x58024800
 8000cfc:	58024400 	.word	0x58024400

08000d00 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8000d08:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d1c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000d2c:	f006 ffea 	bl	8007d04 <HAL_SD_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf14      	ite	ne
 8000d36:	2301      	movne	r3, #1
 8000d38:	2300      	moveq	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <_ZL17MX_SDMMC1_SD_Initv+0x44>
  {
    Error_Handler();
 8000d40:	f000 f984 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2400110c 	.word	0x2400110c
 8000d4c:	52007000 	.word	0x52007000

08000d50 <_ZL12MX_MDMA_Initv>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

  /*##-1- Enable the MDMA clock ###############################################*/
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000d56:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <_ZL12MX_MDMA_Initv+0xd8>)
 8000d58:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d5c:	4a32      	ldr	r2, [pc, #200]	; (8000e28 <_ZL12MX_MDMA_Initv+0xd8>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d66:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <_ZL12MX_MDMA_Initv+0xd8>)
 8000d68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request MDMA_SDMMC_Handle */

  /*##-2- Select the MDMA instance to be used for the transfer : MDMA_Channel0 #*/
  MDMA_SDMMC_Handle.Instance = MDMA_Channel0;
 8000d74:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000d76:	4a2e      	ldr	r2, [pc, #184]	; (8000e30 <_ZL12MX_MDMA_Initv+0xe0>)
 8000d78:	601a      	str	r2, [r3, #0]

  HAL_MDMA_DeInit(&MDMA_SDMMC_Handle);
 8000d7a:	482c      	ldr	r0, [pc, #176]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000d7c:	f002 ff18 	bl	8003bb0 <HAL_MDMA_DeInit>

  /*##-3- Initialize the MDMA channel (with liked list node 0 parameters) ####*/
  MDMA_SDMMC_Handle.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000d82:	221d      	movs	r2, #29
 8000d84:	605a      	str	r2, [r3, #4]
  MDMA_SDMMC_Handle.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  MDMA_SDMMC_Handle.Init.Priority = MDMA_PRIORITY_LOW;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  MDMA_SDMMC_Handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000d92:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]

  MDMA_SDMMC_Handle.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	615a      	str	r2, [r3, #20]
  MDMA_SDMMC_Handle.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000d9e:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000da0:	2208      	movs	r2, #8
 8000da2:	619a      	str	r2, [r3, #24]

  MDMA_SDMMC_Handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  MDMA_SDMMC_Handle.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000daa:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  MDMA_SDMMC_Handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
  MDMA_SDMMC_Handle.Init.BufferTransferLength = 1;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  MDMA_SDMMC_Handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  MDMA_SDMMC_Handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	631a      	str	r2, [r3, #48]	; 0x30


  MDMA_SDMMC_Handle.Init.SourceBlockAddressOffset = 0;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
  MDMA_SDMMC_Handle.Init.DestBlockAddressOffset = 0;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	639a      	str	r2, [r3, #56]	; 0x38

  if (HAL_MDMA_Init(&MDMA_SDMMC_Handle) != HAL_OK)
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000dd8:	f002 fe9e 	bl	8003b18 <HAL_MDMA_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	bf14      	ite	ne
 8000de2:	2301      	movne	r3, #1
 8000de4:	2300      	moveq	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <_ZL12MX_MDMA_Initv+0xa0>
  {
    Error_Handler();
 8000dec:	f000 f92e 	bl	800104c <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&MDMA_SDMMC_Handle, 0, 0) != HAL_OK)
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <_ZL12MX_MDMA_Initv+0xdc>)
 8000df6:	f002 ff33 	bl	8003c60 <HAL_MDMA_ConfigPostRequestMask>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	bf14      	ite	ne
 8000e00:	2301      	movne	r3, #1
 8000e02:	2300      	moveq	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <_ZL12MX_MDMA_Initv+0xbe>
  {
    Error_Handler();
 8000e0a:	f000 f91f 	bl	800104c <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2105      	movs	r1, #5
 8000e12:	207a      	movs	r0, #122	; 0x7a
 8000e14:	f000 fe30 	bl	8001a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e18:	207a      	movs	r0, #122	; 0x7a
 8000e1a:	f000 fe47 	bl	8001aac <HAL_NVIC_EnableIRQ>

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	24001188 	.word	0x24001188
 8000e30:	52000040 	.word	0x52000040

08000e34 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a3d      	ldr	r2, [pc, #244]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e68:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a36      	ldr	r2, [pc, #216]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a2e      	ldr	r2, [pc, #184]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ea4:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <_ZL12MX_GPIO_Initv+0x114>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
/*  GPIO_InitStruct.Pin = uSD_Detect_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);*/

  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <_ZL12MX_GPIO_Initv+0x118>)
 8000f18:	f002 fbdc 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f3a:	f002 fbcb 	bl	80036d4 <HAL_GPIO_Init>

}
 8000f3e:	bf00      	nop
 8000f40:	3730      	adds	r7, #48	; 0x30
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58022000 	.word	0x58022000
 8000f50:	58020000 	.word	0x58020000

08000f54 <_Z13StartInitTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void const * argument)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	  /* init code for LWIP */
	  MX_LWIP_Init();
 8000f5c:	f009 fece 	bl	800acfc <MX_LWIP_Init>
	  /* USER CODE BEGIN 5 */

	  TcpServerInit();
 8000f60:	f7ff fb46 	bl	80005f0 <TcpServerInit>

	  printf("Hello World!\n");
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <_Z13StartInitTaskPKv+0x28>)
 8000f66:	f01e fe57 	bl	801fc18 <puts>

	  FatFsInit();
 8000f6a:	f7ff fb7b 	bl	8000664 <FatFsInit>

	  FatFsTest("test.txt");
 8000f6e:	4804      	ldr	r0, [pc, #16]	; (8000f80 <_Z13StartInitTaskPKv+0x2c>)
 8000f70:	f7ff fba6 	bl	80006c0 <FatFsTest>


  /* Infinite loop */
  for(;;)
  {
    vTaskDelete(NULL);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f00f fd5b 	bl	8010a30 <vTaskDelete>
 8000f7a:	e7fb      	b.n	8000f74 <_Z13StartInitTaskPKv+0x20>
 8000f7c:	08020934 	.word	0x08020934
 8000f80:	08020944 	.word	0x08020944

08000f84 <_ZL10MPU_Configv>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f96:	f000 fd97 	bl	8001ac8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  /*Disable Speculative access*/
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fa6:	231f      	movs	r3, #31
 8000fa8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000faa:	2387      	movs	r3, #135	; 0x87
 8000fac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fdb5 	bl	8001b38 <HAL_MPU_ConfigRegion>

  /*Set LwIP Heap */
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <_ZL10MPU_Configv+0x9c>)
 8000fd4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fea:	463b      	mov	r3, r7
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fda3 	bl	8001b38 <HAL_MPU_ConfigRegion>

  /*RX & Tx Descriptors*/
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <_ZL10MPU_Configv+0xa0>)
 8000ff8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001002:	2301      	movs	r3, #1
 8001004:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001006:	2301      	movs	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800100a:	463b      	mov	r3, r7
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fd93 	bl	8001b38 <HAL_MPU_ConfigRegion>

  HAL_MPU_ConfigRegion(&MPU_InitStruct);*/


  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001012:	2004      	movs	r0, #4
 8001014:	f000 fd70 	bl	8001af8 <HAL_MPU_Enable>

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	30020000 	.word	0x30020000
 8001024:	30040000 	.word	0x30040000

08001028 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800103a:	f000 fc01 	bl	8001840 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40001000 	.word	0x40001000

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001054:	e7fe      	b.n	8001054 <Error_Handler+0x8>
	...

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_MspInit+0x48>)
 8001060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_MspInit+0x48>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_MspInit+0x48>)
 8001070:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	210f      	movs	r1, #15
 8001080:	f06f 0001 	mvn.w	r0, #1
 8001084:	f000 fcf8 	bl	8001a78 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2105      	movs	r1, #5
 800108c:	207d      	movs	r0, #125	; 0x7d
 800108e:	f000 fcf3 	bl	8001a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001092:	207d      	movs	r0, #125	; 0x7d
 8001094:	f000 fd0a 	bl	8001aac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	58024400 	.word	0x58024400

080010a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0be      	sub	sp, #248	; 0xf8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	22c8      	movs	r2, #200	; 0xc8
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f01e f94b 	bl	801f360 <memset>
  if(hsd->Instance==SDMMC1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <HAL_SD_MspInit+0x144>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	f040 8084 	bne.w	80011de <HAL_SD_MspInit+0x13a>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80010d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80010e6:	2309      	movs	r3, #9
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010f6:	23c0      	movs	r3, #192	; 0xc0
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80010fa:	2320      	movs	r3, #32
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80010fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001108:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	4618      	mov	r0, r3
 8001110:	f004 f8ba 	bl	8005288 <HAL_RCCEx_PeriphCLKConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_SD_MspInit+0x7a>
    {
      Error_Handler();
 800111a:	f7ff ff97 	bl	800104c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <HAL_SD_MspInit+0x148>)
 8001120:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001124:	4a31      	ldr	r2, [pc, #196]	; (80011ec <HAL_SD_MspInit+0x148>)
 8001126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <HAL_SD_MspInit+0x148>)
 8001130:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <HAL_SD_MspInit+0x148>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	4a2a      	ldr	r2, [pc, #168]	; (80011ec <HAL_SD_MspInit+0x148>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_SD_MspInit+0x148>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <HAL_SD_MspInit+0x148>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_SD_MspInit+0x148>)
 8001162:	f043 0308 	orr.w	r3, r3, #8
 8001166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_SD_MspInit+0x148>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|GPIO_PIN_11|SDIO1_CK_Pin|SDIO1_D0_Pin
 8001178:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800117c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001192:	230c      	movs	r3, #12
 8001194:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001198:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800119c:	4619      	mov	r1, r3
 800119e:	4814      	ldr	r0, [pc, #80]	; (80011f0 <HAL_SD_MspInit+0x14c>)
 80011a0:	f002 fa98 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80011a4:	2304      	movs	r3, #4
 80011a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011bc:	230c      	movs	r3, #12
 80011be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011c6:	4619      	mov	r1, r3
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <HAL_SD_MspInit+0x150>)
 80011ca:	f002 fa83 	bl	80036d4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2105      	movs	r1, #5
 80011d2:	2031      	movs	r0, #49	; 0x31
 80011d4:	f000 fc50 	bl	8001a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011d8:	2031      	movs	r0, #49	; 0x31
 80011da:	f000 fc67 	bl	8001aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	37f8      	adds	r7, #248	; 0xf8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	52007000 	.word	0x52007000
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58020800 	.word	0x58020800
 80011f4:	58020c00 	.word	0x58020c00

080011f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b090      	sub	sp, #64	; 0x40
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	d827      	bhi.n	8001256 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001206:	2200      	movs	r2, #0
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	2036      	movs	r0, #54	; 0x36
 800120c:	f000 fc34 	bl	8001a78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001210:	2036      	movs	r0, #54	; 0x36
 8001212:	f000 fc4b 	bl	8001aac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001216:	4a29      	ldr	r2, [pc, #164]	; (80012bc <HAL_InitTick+0xc4>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <HAL_InitTick+0xc8>)
 800121e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001222:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <HAL_InitTick+0xc8>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800122c:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <HAL_InitTick+0xc8>)
 800122e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800123a:	f107 0210 	add.w	r2, r7, #16
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f003 ffdd 	bl	8005204 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800124e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001250:	2b00      	cmp	r3, #0
 8001252:	d106      	bne.n	8001262 <HAL_InitTick+0x6a>
 8001254:	e001      	b.n	800125a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e02b      	b.n	80012b2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800125a:	f003 ffbd 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 800125e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001260:	e004      	b.n	800126c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001262:	f003 ffb9 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 8001266:	4603      	mov	r3, r0
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800126c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <HAL_InitTick+0xcc>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	0c9b      	lsrs	r3, r3, #18
 8001276:	3b01      	subs	r3, #1
 8001278:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_InitTick+0xd0>)
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <HAL_InitTick+0xd4>)
 800127e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_InitTick+0xd0>)
 8001282:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001286:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <HAL_InitTick+0xd0>)
 800128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_InitTick+0xd0>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_InitTick+0xd0>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800129a:	480b      	ldr	r0, [pc, #44]	; (80012c8 <HAL_InitTick+0xd0>)
 800129c:	f008 f996 	bl	80095cc <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d104      	bne.n	80012b0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <HAL_InitTick+0xd0>)
 80012a8:	f008 f9f2 	bl	8009690 <HAL_TIM_Base_Start_IT>
 80012ac:	4603      	mov	r3, r0
 80012ae:	e000      	b.n	80012b2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3740      	adds	r7, #64	; 0x40
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	24000008 	.word	0x24000008
 80012c0:	58024400 	.word	0x58024400
 80012c4:	431bde83 	.word	0x431bde83
 80012c8:	240011f8 	.word	0x240011f8
 80012cc:	40001000 	.word	0x40001000

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <NMI_Handler+0x4>

080012d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <MemManage_Handler+0x4>

080012e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <UsageFault_Handler+0x4>

080012ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <SDMMC1_IRQHandler+0x10>)
 8001302:	f006 ff6f 	bl	80081e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2400110c 	.word	0x2400110c

08001310 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <TIM6_DAC_IRQHandler+0x10>)
 8001316:	f008 fa33 	bl	8009780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240011f8 	.word	0x240011f8

08001324 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <ETH_IRQHandler+0x10>)
 800132a:	f001 f821 	bl	8002370 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	240012ac 	.word	0x240012ac

08001338 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&MDMA_SDMMC_Handle);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <MDMA_IRQHandler+0x10>)
 800133e:	f002 fce1 	bl	8003d04 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	24001188 	.word	0x24001188

0800134c <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001350:	f002 fbc8 	bl	8003ae4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return 1;
 800135c:	2301      	movs	r3, #1
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_kill>:

int _kill(int pid, int sig)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <_kill+0x20>)
 8001374:	2216      	movs	r2, #22
 8001376:	601a      	str	r2, [r3, #0]
  return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	2400f9a0 	.word	0x2400f9a0

0800138c <_exit>:

void _exit (int status)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffe5 	bl	8001368 <_kill>
  while (1) {}    /* Make sure we hang here */
 800139e:	e7fe      	b.n	800139e <_exit+0x12>

080013a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e00a      	b.n	80013c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b2:	f3af 8000 	nop.w
 80013b6:	4601      	mov	r1, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	b2ca      	uxtb	r2, r1
 80013c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf0      	blt.n	80013b2 <_read+0x12>
  }

  return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:
  }
  return len;
}

int _close(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001402:	605a      	str	r2, [r3, #4]
  return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_isatty>:

int _isatty(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d205      	bcs.n	8001480 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <_sbrk+0x6c>)
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147e:	e009      	b.n	8001494 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	24080000 	.word	0x24080000
 80014a4:	00000800 	.word	0x00000800
 80014a8:	24001244 	.word	0x24001244
 80014ac:	2400f9a8 	.word	0x2400f9a8
 80014b0:	2400f9a0 	.word	0x2400f9a0

080014b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b8:	f7fe ff6a 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014be:	490d      	ldr	r1, [pc, #52]	; (80014f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d4:	4c0a      	ldr	r4, [pc, #40]	; (8001500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f01d fed5 	bl	801f290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e6:	f7ff fab3 	bl	8000a50 <main>
  bx  lr
 80014ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014f4:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 80014f8:	08024694 	.word	0x08024694
  ldr r2, =_sbss
 80014fc:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8001500:	2400f9a4 	.word	0x2400f9a4

08001504 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC3_IRQHandler>

08001506 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <LAN8742_RegisterBusIO+0x28>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d007      	beq.n	800152e <LAN8742_RegisterBusIO+0x28>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <LAN8742_RegisterBusIO+0x28>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001532:	e014      	b.n	800155e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d17c      	bne.n	8001684 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2220      	movs	r2, #32
 800159c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e01c      	b.n	80015de <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	f107 0208 	add.w	r2, r7, #8
 80015ac:	2112      	movs	r1, #18
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	4798      	blx	r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da03      	bge.n	80015c0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80015b8:	f06f 0304 	mvn.w	r3, #4
 80015bc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80015be:	e00b      	b.n	80015d8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d105      	bne.n	80015d8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
         break;
 80015d6:	e005      	b.n	80015e4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	2b1f      	cmp	r3, #31
 80015e2:	d9df      	bls.n	80015a4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b1f      	cmp	r3, #31
 80015ea:	d902      	bls.n	80015f2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80015ec:	f06f 0302 	mvn.w	r3, #2
 80015f0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d145      	bne.n	8001684 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6810      	ldr	r0, [r2, #0]
 8001600:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001604:	2100      	movs	r1, #0
 8001606:	4798      	blx	r3
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	db37      	blt.n	800167e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6810      	ldr	r0, [r2, #0]
 8001616:	f107 0208 	add.w	r2, r7, #8
 800161a:	2100      	movs	r1, #0
 800161c:	4798      	blx	r3
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	db28      	blt.n	8001676 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4798      	blx	r3
 800162a:	4603      	mov	r3, r0
 800162c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800162e:	e01c      	b.n	800166a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4798      	blx	r3
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001642:	d80e      	bhi.n	8001662 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6810      	ldr	r0, [r2, #0]
 800164c:	f107 0208 	add.w	r2, r7, #8
 8001650:	2100      	movs	r1, #0
 8001652:	4798      	blx	r3
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	da07      	bge.n	800166a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800165a:	f06f 0304 	mvn.w	r3, #4
 800165e:	613b      	str	r3, [r7, #16]
                 break;
 8001660:	e010      	b.n	8001684 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001662:	f06f 0301 	mvn.w	r3, #1
 8001666:	613b      	str	r3, [r7, #16]
               break;
 8001668:	e00c      	b.n	8001684 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1dd      	bne.n	8001630 <LAN8742_Init+0xc6>
 8001674:	e006      	b.n	8001684 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001676:	f06f 0304 	mvn.w	r3, #4
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	e002      	b.n	8001684 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800167e:	f06f 0303 	mvn.w	r3, #3
 8001682:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d112      	bne.n	80016b0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4798      	blx	r3
 8001690:	4603      	mov	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001694:	bf00      	nop
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4798      	blx	r3
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016a8:	d9f5      	bls.n	8001696 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80016b0:	693b      	ldr	r3, [r7, #16]
 }
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6810      	ldr	r0, [r2, #0]
 80016ce:	f107 020c 	add.w	r2, r7, #12
 80016d2:	2101      	movs	r1, #1
 80016d4:	4798      	blx	r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	da02      	bge.n	80016e2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016dc:	f06f 0304 	mvn.w	r3, #4
 80016e0:	e06e      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6810      	ldr	r0, [r2, #0]
 80016ea:	f107 020c 	add.w	r2, r7, #12
 80016ee:	2101      	movs	r1, #1
 80016f0:	4798      	blx	r3
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da02      	bge.n	80016fe <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016f8:	f06f 0304 	mvn.w	r3, #4
 80016fc:	e060      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001708:	2301      	movs	r3, #1
 800170a:	e059      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6810      	ldr	r0, [r2, #0]
 8001714:	f107 020c 	add.w	r2, r7, #12
 8001718:	2100      	movs	r1, #0
 800171a:	4798      	blx	r3
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	da02      	bge.n	8001728 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001722:	f06f 0304 	mvn.w	r3, #4
 8001726:	e04b      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d11b      	bne.n	800176a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <LAN8742_GetLinkState+0x90>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001746:	2302      	movs	r3, #2
 8001748:	e03a      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001754:	2303      	movs	r3, #3
 8001756:	e033      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001762:	2304      	movs	r3, #4
 8001764:	e02c      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001766:	2305      	movs	r3, #5
 8001768:	e02a      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6810      	ldr	r0, [r2, #0]
 8001772:	f107 020c 	add.w	r2, r7, #12
 8001776:	211f      	movs	r1, #31
 8001778:	4798      	blx	r3
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	da02      	bge.n	8001786 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001780:	f06f 0304 	mvn.w	r3, #4
 8001784:	e01c      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001790:	2306      	movs	r3, #6
 8001792:	e015      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 031c 	and.w	r3, r3, #28
 800179a:	2b18      	cmp	r3, #24
 800179c:	d101      	bne.n	80017a2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800179e:	2302      	movs	r3, #2
 80017a0:	e00e      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f003 031c 	and.w	r3, r3, #28
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d101      	bne.n	80017b0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e007      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 031c 	and.w	r3, r3, #28
 80017b6:	2b14      	cmp	r3, #20
 80017b8:	d101      	bne.n	80017be <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017ba:	2304      	movs	r3, #4
 80017bc:	e000      	b.n	80017c0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017be:	2305      	movs	r3, #5
    }				
  }
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ce:	2003      	movs	r0, #3
 80017d0:	f000 f947 	bl	8001a62 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017d4:	f003 fb56 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_Init+0x68>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	4913      	ldr	r1, [pc, #76]	; (8001834 <HAL_Init+0x6c>)
 80017e6:	5ccb      	ldrb	r3, [r1, r3]
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	fa22 f303 	lsr.w	r3, r2, r3
 80017f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_Init+0x68>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_Init+0x6c>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_Init+0x70>)
 800180a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800180c:	4a0b      	ldr	r2, [pc, #44]	; (800183c <HAL_Init+0x74>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001812:	200f      	movs	r0, #15
 8001814:	f7ff fcf0 	bl	80011f8 <HAL_InitTick>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e002      	b.n	8001828 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001822:	f7ff fc19 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	58024400 	.word	0x58024400
 8001834:	080243b4 	.word	0x080243b4
 8001838:	24000004 	.word	0x24000004
 800183c:	24000000 	.word	0x24000000

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	2400000c 	.word	0x2400000c
 8001864:	24001248 	.word	0x24001248

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	24001248 	.word	0x24001248

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2400000c 	.word	0x2400000c

080018c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_GetREVID+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	0c1b      	lsrs	r3, r3, #16
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	5c001000 	.word	0x5c001000

080018e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80018f0:	4904      	ldr	r1, [pc, #16]	; (8001904 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	58000400 	.word	0x58000400

08001908 <__NVIC_SetPriorityGrouping>:
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <__NVIC_SetPriorityGrouping+0x40>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	4313      	orrs	r3, r2
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	; (8001948 <__NVIC_SetPriorityGrouping+0x40>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00
 800194c:	05fa0000 	.word	0x05fa0000

08001950 <__NVIC_GetPriorityGrouping>:
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4907      	ldr	r1, [pc, #28]	; (80019a4 <__NVIC_EnableIRQ+0x38>)
 8001986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_SetPriority>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db0a      	blt.n	80019d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	490c      	ldr	r1, [pc, #48]	; (80019f4 <__NVIC_SetPriority+0x4c>)
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019d0:	e00a      	b.n	80019e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4908      	ldr	r1, [pc, #32]	; (80019f8 <__NVIC_SetPriority+0x50>)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	3b04      	subs	r3, #4
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	761a      	strb	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <NVIC_EncodePriority>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2304      	movcs	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3304      	adds	r3, #4
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d902      	bls.n	8001a2c <NVIC_EncodePriority+0x30>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	e000      	b.n	8001a2e <NVIC_EncodePriority+0x32>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	4313      	orrs	r3, r2
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff4c 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a86:	f7ff ff63 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001a8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	68b9      	ldr	r1, [r7, #8]
 8001a90:	6978      	ldr	r0, [r7, #20]
 8001a92:	f7ff ffb3 	bl	80019fc <NVIC_EncodePriority>
 8001a96:	4602      	mov	r2, r0
 8001a98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff82 	bl	80019a8 <__NVIC_SetPriority>
}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff56 	bl	800196c <__NVIC_EnableIRQ>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001acc:	f3bf 8f5f 	dmb	sy
}
 8001ad0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_MPU_Disable+0x28>)
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <HAL_MPU_Disable+0x28>)
 8001ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001adc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_MPU_Disable+0x2c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	605a      	str	r2, [r3, #4]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00
 8001af4:	e000ed90 	.word	0xe000ed90

08001af8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b00:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_MPU_Enable+0x38>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_MPU_Enable+0x3c>)
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <HAL_MPU_Enable+0x3c>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b16:	f3bf 8f4f 	dsb	sy
}
 8001b1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b1c:	f3bf 8f6f 	isb	sy
}
 8001b20:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed90 	.word	0xe000ed90
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	785a      	ldrb	r2, [r3, #1]
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_MPU_ConfigRegion+0x84>)
 8001b46:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d029      	beq.n	8001ba4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001b50:	4a1a      	ldr	r2, [pc, #104]	; (8001bbc <HAL_MPU_ConfigRegion+0x84>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7b1b      	ldrb	r3, [r3, #12]
 8001b5c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7adb      	ldrb	r3, [r3, #11]
 8001b62:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7a9b      	ldrb	r3, [r3, #10]
 8001b6a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7b5b      	ldrb	r3, [r3, #13]
 8001b72:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7b9b      	ldrb	r3, [r3, #14]
 8001b7a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7bdb      	ldrb	r3, [r3, #15]
 8001b82:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7a5b      	ldrb	r3, [r3, #9]
 8001b8a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7a1b      	ldrb	r3, [r3, #8]
 8001b92:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b94:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b9c:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b9e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ba0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001ba2:	e005      	b.n	8001bb0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_MPU_ConfigRegion+0x84>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <HAL_MPU_ConfigRegion+0x84>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed90 	.word	0xe000ed90

08001bc0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_GetCurrentCPUID+0x24>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	2b07      	cmp	r3, #7
 8001bd0:	d101      	bne.n	8001bd6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e000      	b.n	8001bd8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001bd6:	2301      	movs	r3, #1
  }
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0cf      	b.n	8001d9a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d106      	bne.n	8001c12 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2223      	movs	r2, #35	; 0x23
 8001c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f009 fce7 	bl	800b5e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	4b64      	ldr	r3, [pc, #400]	; (8001da4 <HAL_ETH_Init+0x1bc>)
 8001c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c18:	4a62      	ldr	r2, [pc, #392]	; (8001da4 <HAL_ETH_Init+0x1bc>)
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c22:	4b60      	ldr	r3, [pc, #384]	; (8001da4 <HAL_ETH_Init+0x1bc>)
 8001c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7a1b      	ldrb	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d103      	bne.n	8001c40 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff fe51 	bl	80018e0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001c3e:	e003      	b.n	8001c48 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c40:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c44:	f7ff fe4c 	bl	80018e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001c48:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_ETH_Init+0x1c0>)
 8001c4a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c64:	f7ff fe00 	bl	8001868 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c6a:	e011      	b.n	8001c90 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c6c:	f7ff fdfc 	bl	8001868 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c7a:	d909      	bls.n	8001c90 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	22e0      	movs	r2, #224	; 0xe0
 8001c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e084      	b.n	8001d9a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1e4      	bne.n	8001c6c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 ff3c 	bl	8002b20 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ca8:	f003 fa66 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a3f      	ldr	r2, [pc, #252]	; (8001dac <HAL_ETH_Init+0x1c4>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	0c9a      	lsrs	r2, r3, #18
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3a01      	subs	r2, #1
 8001cbc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 f935 	bl	8002f30 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001cd2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ce2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	22e0      	movs	r2, #224	; 0xe0
 8001cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e049      	b.n	8001d9a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <HAL_ETH_Init+0x1c8>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6952      	ldr	r2, [r2, #20]
 8001d1a:	0051      	lsls	r1, r2, #1
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	430b      	orrs	r3, r1
 8001d22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d26:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f001 f99d 	bl	800306a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f001 f9e3 	bl	80030fc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	3305      	adds	r3, #5
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	021a      	lsls	r2, r3, #8
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	3304      	adds	r3, #4
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	3303      	adds	r3, #3
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	061a      	lsls	r2, r3, #24
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	3302      	adds	r3, #2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d74:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d82:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2210      	movs	r2, #16
 8001d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	58024400 	.word	0x58024400
 8001da8:	58000400 	.word	0x58000400
 8001dac:	431bde83 	.word	0x431bde83
 8001db0:	ffff8001 	.word	0xffff8001

08001db4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d179      	bne.n	8001eba <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2223      	movs	r2, #35	; 0x23
 8001dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_ETH_Start_IT+0x110>)
 8001de2:	430b      	orrs	r3, r1
 8001de4:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_ETH_Start_IT+0x114>)
 8001df6:	430b      	orrs	r3, r1
 8001df8:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f9eb 	bl	80021de <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0202 	orr.w	r2, r2, #2
 8001e16:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e44:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e54:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e70:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001e88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e8c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e98:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eaa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2223      	movs	r2, #35	; 0x23
 8001eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
  }
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	0c020060 	.word	0x0c020060
 8001ec8:	0c20c000 	.word	0x0c20c000

08001ecc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eda:	2b23      	cmp	r3, #35	; 0x23
 8001edc:	d165      	bne.n	8001faa <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2223      	movs	r2, #35	; 0x23
 8001ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eee:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_ETH_Stop_IT+0xec>)
 8001ef8:	400b      	ands	r3, r1
 8001efa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001efe:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f0a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f1a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f36:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0202 	bic.w	r2, r2, #2
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	e00e      	b.n	8001f92 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	3212      	adds	r2, #18
 8001f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d9ed      	bls.n	8001f74 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
  }
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	ffff2f3e 	.word	0xffff2f3e

08001fbc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e03a      	b.n	8002056 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe6:	2b23      	cmp	r3, #35	; 0x23
 8001fe8:	d134      	bne.n	8002054 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	6839      	ldr	r1, [r7, #0]
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f001 f8de 	bl	80031b8 <ETH_Prepare_Tx_Descriptors>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002008:	f043 0202 	orr.w	r2, r3, #2
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e01f      	b.n	8002056 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8002016:	f3bf 8f4f 	dsb	sy
}
 800201a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	2b03      	cmp	r3, #3
 800202c:	d904      	bls.n	8002038 <HAL_ETH_Transmit_IT+0x7c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	1f1a      	subs	r2, r3, #4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3106      	adds	r1, #6
 8002044:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002048:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800204c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b088      	sub	sp, #32
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0a5      	b.n	80021d6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002090:	2b23      	cmp	r3, #35	; 0x23
 8002092:	d001      	beq.n	8002098 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e09e      	b.n	80021d6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	3212      	adds	r2, #18
 80020a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ae:	f1c3 0304 	rsb	r3, r3, #4
 80020b2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020b4:	e067      	b.n	8002186 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d103      	bne.n	80020e6 <HAL_ETH_ReadData+0x88>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d03d      	beq.n	8002162 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00d      	beq.n	800212c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800213c:	461a      	mov	r2, r3
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	b29b      	uxth	r3, r3
 8002142:	f009 fb7f 	bl	800b844 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	441a      	add	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3301      	adds	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d902      	bls.n	8002174 <HAL_ETH_ReadData+0x116>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b04      	subs	r3, #4
 8002172:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	3212      	adds	r2, #18
 800217a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db06      	blt.n	800219c <HAL_ETH_ReadData+0x13e>
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	429a      	cmp	r2, r3
 8002194:	d202      	bcs.n	800219c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d08c      	beq.n	80020b6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	441a      	add	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f814 	bl	80021de <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d108      	bne.n	80021d4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e000      	b.n	80021d6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b088      	sub	sp, #32
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80021ea:	2301      	movs	r3, #1
 80021ec:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021f2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	3212      	adds	r2, #18
 80021fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fe:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002204:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002206:	e03b      	b.n	8002280 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d112      	bne.n	8002236 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4618      	mov	r0, r3
 8002216:	f009 fae5 	bl	800b7e4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	74fb      	strb	r3, [r7, #19]
 8002224:	e007      	b.n	8002236 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	461a      	mov	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d021      	beq.n	8002280 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 800223c:	f3bf 8f5f 	dmb	sy
}
 8002240:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	e003      	b.n	800225c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800225a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	3301      	adds	r3, #1
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d902      	bls.n	800226e <ETH_UpdateDescriptor+0x90>
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	3b04      	subs	r3, #4
 800226c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	3212      	adds	r2, #18
 8002274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002278:	617b      	str	r3, [r7, #20]
      desccount--;
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	3b01      	subs	r3, #1
 800227e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <ETH_UpdateDescriptor+0xae>
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1bd      	bne.n	8002208 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	429a      	cmp	r2, r3
 8002294:	d00d      	beq.n	80022b2 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229e:	461a      	mov	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80022b2:	bf00      	nop
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3318      	adds	r3, #24
 80022c6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80022d8:	e03f      	b.n	800235a <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80022da:	2301      	movs	r3, #1
 80022dc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	3304      	adds	r3, #4
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d106      	bne.n	8002302 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3301      	adds	r3, #1
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002302:	7bbb      	ldrb	r3, [r7, #14]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d028      	beq.n	800235a <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68d9      	ldr	r1, [r3, #12]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db1b      	blt.n	8002356 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	3304      	adds	r3, #4
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4618      	mov	r0, r3
 800232c:	f009 faf2 	bl	800b914 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3304      	adds	r3, #4
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	2200      	movs	r2, #0
 800233c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	3301      	adds	r3, #1
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
 8002354:	e001      	b.n	800235a <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_ETH_ReleaseTxPacket+0xac>
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1b9      	bne.n	80022da <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002380:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d115      	bne.n	80023b8 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002394:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d10b      	bne.n	80023b8 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a8:	461a      	mov	r2, r3
 80023aa:	f248 0340 	movw	r3, #32832	; 0x8040
 80023ae:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f008 fdd4 	bl	800af60 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d115      	bne.n	80023f8 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d10b      	bne.n	80023f8 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e8:	461a      	mov	r2, r3
 80023ea:	f248 0301 	movw	r3, #32769	; 0x8001
 80023ee:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f008 fdc4 	bl	800af80 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002400:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800240c:	d153      	bne.n	80024b6 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002416:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002422:	d148      	bne.n	80024b6 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f043 0208 	orr.w	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002448:	d11e      	bne.n	8002488 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002456:	f241 1302 	movw	r3, #4354	; 0x1102
 800245a:	4013      	ands	r3, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002476:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	22e0      	movs	r2, #224	; 0xe0
 8002482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002486:	e013      	b.n	80024b0 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002490:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002494:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	461a      	mov	r2, r3
 80024a8:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 80024ac:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f008 fd75 	bl	800afa0 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80024be:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d019      	beq.n	8002508 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f043 0210 	orr.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	22e0      	movs	r2, #224	; 0xe0
 80024f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f008 fd50 	bl	800afa0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b10      	cmp	r3, #16
 8002516:	d10f      	bne.n	8002538 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002520:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f844 	bl	80025b8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b20      	cmp	r3, #32
 8002546:	d10f      	bne.n	8002568 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002550:	f003 020f 	and.w	r2, r3, #15
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f836 	bl	80025cc <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002568:	f7ff fb2a 	bl	8001bc0 <HAL_GetCurrentCPUID>
 800256c:	4603      	mov	r3, r0
 800256e:	2b03      	cmp	r3, #3
 8002570:	d10d      	bne.n	800258e <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002572:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <HAL_ETH_IRQHandler+0x240>)
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d014      	beq.n	80025a8 <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_ETH_IRQHandler+0x240>)
 8002580:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f82a 	bl	80025e0 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 800258c:	e00c      	b.n	80025a8 <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_ETH_IRQHandler+0x244>)
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d006      	beq.n	80025a8 <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_ETH_IRQHandler+0x244>)
 800259c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f81c 	bl	80025e0 <HAL_ETH_WakeUpCallback>
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	58000080 	.word	0x58000080
 80025b4:	580000c0 	.word	0x580000c0

080025b8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e03e      	b.n	8002694 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800261e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	055b      	lsls	r3, r3, #21
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f043 030c 	orr.w	r3, r3, #12
 8002642:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002656:	f7ff f907 	bl	8001868 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800265c:	e009      	b.n	8002672 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800265e:	f7ff f903 	bl	8001868 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800266c:	d901      	bls.n	8002672 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e010      	b.n	8002694 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ed      	bne.n	800265e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e03c      	b.n	8002738 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026c6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	055b      	lsls	r3, r3, #21
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 030c 	bic.w	r3, r3, #12
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_ETH_WritePHYRegister+0xa4>)
 80026fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002702:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_ETH_WritePHYRegister+0xa4>)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800270a:	f7ff f8ad 	bl	8001868 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002710:	e009      	b.n	8002726 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002712:	f7ff f8a9 	bl	8001868 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002720:	d901      	bls.n	8002726 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e008      	b.n	8002738 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1ed      	bne.n	8002712 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40028000 	.word	0x40028000

08002744 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e1c3      	b.n	8002ae0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf14      	ite	ne
 8002774:	2301      	movne	r3, #1
 8002776:	2300      	moveq	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bf14      	ite	ne
 80027ba:	2301      	movne	r3, #1
 80027bc:	2300      	moveq	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80027e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf14      	ite	ne
 80027ee:	2301      	movne	r3, #1
 80027f0:	2300      	moveq	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	bf14      	ite	ne
 800283e:	2301      	movne	r3, #1
 8002840:	2300      	moveq	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80028d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	2300      	moveq	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	0e5b      	lsrs	r3, r3, #25
 80029a2:	f003 021f 	and.w	r2, r3, #31
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf14      	ite	ne
 80029b8:	2301      	movne	r3, #1
 80029ba:	2300      	moveq	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 020f 	and.w	r2, r3, #15
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002a6c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a7c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e00b      	b.n	8002b18 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d105      	bne.n	8002b16 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002b0a:	6839      	ldr	r1, [r7, #0]
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f86d 	bl	8002bec <ETH_SetMACConfig>

    return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e000      	b.n	8002b18 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
  }
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b3a:	f002 fb1d 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 8002b3e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d908      	bls.n	8002b5a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d804      	bhi.n	8002b5a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e027      	b.n	8002baa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d908      	bls.n	8002b74 <HAL_ETH_SetMDIOClockRange+0x54>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d204      	bcs.n	8002b74 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	e01a      	b.n	8002baa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d303      	bcc.n	8002b84 <HAL_ETH_SetMDIOClockRange+0x64>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d911      	bls.n	8002ba8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d908      	bls.n	8002b9e <HAL_ETH_SetMDIOClockRange+0x7e>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <HAL_ETH_SetMDIOClockRange+0xac>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d804      	bhi.n	8002b9e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	e005      	b.n	8002baa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e000      	b.n	8002baa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002ba8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	01312cff 	.word	0x01312cff
 8002bc0:	02160ebf 	.word	0x02160ebf
 8002bc4:	03938700 	.word	0x03938700
 8002bc8:	05f5e0ff 	.word	0x05f5e0ff
 8002bcc:	08f0d17f 	.word	0x08f0d17f

08002bd0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002bfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002c06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	7b1b      	ldrb	r3, [r3, #12]
 8002c0c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	7b5b      	ldrb	r3, [r3, #13]
 8002c14:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	7b9b      	ldrb	r3, [r3, #14]
 8002c1c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	7bdb      	ldrb	r3, [r3, #15]
 8002c24:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c26:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	7c12      	ldrb	r2, [r2, #16]
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	d102      	bne.n	8002c36 <ETH_SetMACConfig+0x4a>
 8002c30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c34:	e000      	b.n	8002c38 <ETH_SetMACConfig+0x4c>
 8002c36:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c38:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	7c52      	ldrb	r2, [r2, #17]
 8002c3e:	2a00      	cmp	r2, #0
 8002c40:	d102      	bne.n	8002c48 <ETH_SetMACConfig+0x5c>
 8002c42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c46:	e000      	b.n	8002c4a <ETH_SetMACConfig+0x5e>
 8002c48:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	7c9b      	ldrb	r3, [r3, #18]
 8002c50:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c52:	431a      	orrs	r2, r3
               macconf->Speed |
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002c58:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002c5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	7f1b      	ldrb	r3, [r3, #28]
 8002c64:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	7f5b      	ldrb	r3, [r3, #29]
 8002c6c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	7f92      	ldrb	r2, [r2, #30]
 8002c74:	2a00      	cmp	r2, #0
 8002c76:	d102      	bne.n	8002c7e <ETH_SetMACConfig+0x92>
 8002c78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c7c:	e000      	b.n	8002c80 <ETH_SetMACConfig+0x94>
 8002c7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c80:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	7fdb      	ldrb	r3, [r3, #31]
 8002c86:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002c88:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c90:	2a00      	cmp	r2, #0
 8002c92:	d102      	bne.n	8002c9a <ETH_SetMACConfig+0xae>
 8002c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c98:	e000      	b.n	8002c9c <ETH_SetMACConfig+0xb0>
 8002c9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002c9c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002ca2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002caa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002cac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <ETH_SetMACConfig+0x22c>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	68f9      	ldr	r1, [r7, #12]
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cd6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002cd8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ce0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ce2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002cea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002cec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002cf4:	2a00      	cmp	r2, #0
 8002cf6:	d102      	bne.n	8002cfe <ETH_SetMACConfig+0x112>
 8002cf8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cfc:	e000      	b.n	8002d00 <ETH_SetMACConfig+0x114>
 8002cfe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d00:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	4b42      	ldr	r3, [pc, #264]	; (8002e1c <ETH_SetMACConfig+0x230>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d24:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <ETH_SetMACConfig+0x234>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	68f9      	ldr	r1, [r7, #12]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d48:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d56:	2a00      	cmp	r2, #0
 8002d58:	d101      	bne.n	8002d5e <ETH_SetMACConfig+0x172>
 8002d5a:	2280      	movs	r2, #128	; 0x80
 8002d5c:	e000      	b.n	8002d60 <ETH_SetMACConfig+0x174>
 8002d5e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002d60:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d66:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d72:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002d76:	4013      	ands	r3, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	68f9      	ldr	r1, [r7, #12]
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002d88:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002d90:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	f023 0103 	bic.w	r1, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002db6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002dd2:	2a00      	cmp	r2, #0
 8002dd4:	d101      	bne.n	8002dda <ETH_SetMACConfig+0x1ee>
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	e000      	b.n	8002ddc <ETH_SetMACConfig+0x1f0>
 8002dda:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002ddc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002de4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002de6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002dee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002dfc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	00048083 	.word	0x00048083
 8002e1c:	c0f88000 	.word	0xc0f88000
 8002e20:	fffffef0 	.word	0xfffffef0

08002e24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <ETH_SetDMAConfig+0xf8>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	6811      	ldr	r1, [r2, #0]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e4a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	791b      	ldrb	r3, [r3, #4]
 8002e50:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e56:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	7b1b      	ldrb	r3, [r3, #12]
 8002e5c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <ETH_SetDMAConfig+0xfc>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	68f9      	ldr	r1, [r7, #12]
 8002e76:	430b      	orrs	r3, r1
 8002e78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e7c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	7b5b      	ldrb	r3, [r3, #13]
 8002e82:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e94:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002e98:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <ETH_SetDMAConfig+0x100>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	68f9      	ldr	r1, [r7, #12]
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ea8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	7d1b      	ldrb	r3, [r3, #20]
 8002eb4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002eb6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	7f5b      	ldrb	r3, [r3, #29]
 8002ebc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <ETH_SetDMAConfig+0x104>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	68f9      	ldr	r1, [r7, #12]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ede:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	7f1b      	ldrb	r3, [r3, #28]
 8002ee6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <ETH_SetDMAConfig+0x108>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	68f9      	ldr	r1, [r7, #12]
 8002f06:	430b      	orrs	r3, r1
 8002f08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f0c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	ffff87fd 	.word	0xffff87fd
 8002f20:	ffff2ffe 	.word	0xffff2ffe
 8002f24:	fffec000 	.word	0xfffec000
 8002f28:	ffc0efef 	.word	0xffc0efef
 8002f2c:	7fc0ffff 	.word	0x7fc0ffff

08002f30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b0a4      	sub	sp, #144	; 0x90
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f70:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002f88:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002f8c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002f94:	2300      	movs	r3, #0
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002faa:	2300      	movs	r3, #0
 8002fac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002fda:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fe4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002fec:	2302      	movs	r3, #2
 8002fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800300a:	2300      	movs	r3, #0
 800300c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff fde6 	bl	8002bec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003020:	2301      	movs	r3, #1
 8003022:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003024:	2301      	movs	r3, #1
 8003026:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003036:	2300      	movs	r3, #0
 8003038:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800303a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800303e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003040:	2300      	movs	r3, #0
 8003042:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003044:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003048:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003050:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fee1 	bl	8002e24 <ETH_SetDMAConfig>
}
 8003062:	bf00      	nop
 8003064:	3790      	adds	r7, #144	; 0x90
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e01d      	b.n	80030b4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68d9      	ldr	r1, [r3, #12]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2200      	movs	r2, #0
 8003094:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2200      	movs	r2, #0
 80030a0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	3206      	adds	r2, #6
 80030aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3301      	adds	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d9de      	bls.n	8003078 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c8:	461a      	mov	r2, r3
 80030ca:	2303      	movs	r3, #3
 80030cc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030dc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	e023      	b.n	8003152 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6919      	ldr	r1, [r3, #16]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2200      	movs	r2, #0
 8003126:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2200      	movs	r2, #0
 8003132:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2200      	movs	r2, #0
 8003138:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2200      	movs	r2, #0
 800313e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	3212      	adds	r2, #18
 8003148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3301      	adds	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b03      	cmp	r3, #3
 8003156:	d9d8      	bls.n	800310a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800317e:	461a      	mov	r2, r3
 8003180:	2303      	movs	r3, #3
 8003182:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003192:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b08d      	sub	sp, #52	; 0x34
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3318      	adds	r3, #24
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031fa:	d007      	beq.n	800320c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	3304      	adds	r3, #4
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800320c:	2302      	movs	r3, #2
 800320e:	e259      	b.n	80036c4 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d044      	beq.n	80032a6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003222:	4013      	ands	r3, r2
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003228:	431a      	orrs	r2, r3
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003248:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d027      	beq.n	80032a6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	b29a      	uxth	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	041b      	lsls	r3, r3, #16
 8003262:	431a      	orrs	r2, r3
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	431a      	orrs	r2, r3
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003294:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00e      	beq.n	80032d0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	4b51      	ldr	r3, [pc, #324]	; (80033fc <ETH_Prepare_Tx_Descriptors+0x244>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	6992      	ldr	r2, [r2, #24]
 80032be:	431a      	orrs	r2, r3
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d036      	beq.n	8003356 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80032f4:	f3bf 8f5f 	dmb	sy
}
 80032f8:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	3301      	adds	r3, #1
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330e:	2b03      	cmp	r3, #3
 8003310:	d902      	bls.n	8003318 <ETH_Prepare_Tx_Descriptors+0x160>
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	3b04      	subs	r3, #4
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800331c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003320:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	3301      	adds	r3, #1
 8003326:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003334:	d10f      	bne.n	8003356 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8003340:	f3bf 8f5f 	dmb	sy
}
 8003344:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	e1b6      	b.n	80036c4 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	3301      	adds	r3, #1
 800335a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	4b24      	ldr	r3, [pc, #144]	; (80033fc <ETH_Prepare_Tx_Descriptors+0x244>)
 800336c:	4013      	ands	r3, r2
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	6852      	ldr	r2, [r2, #4]
 8003372:	431a      	orrs	r2, r3
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d012      	beq.n	80033a6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003396:	4013      	ands	r3, r2
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	6852      	ldr	r2, [r2, #4]
 800339c:	0412      	lsls	r2, r2, #16
 800339e:	431a      	orrs	r2, r3
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	e008      	b.n	80033b8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	2200      	movs	r2, #0
 80033aa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <ETH_Prepare_Tx_Descriptors+0x248>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d021      	beq.n	8003408 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	04db      	lsls	r3, r3, #19
 80033d2:	431a      	orrs	r2, r3
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80033de:	4013      	ands	r3, r2
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	69d2      	ldr	r2, [r2, #28]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	e02e      	b.n	8003456 <ETH_Prepare_Tx_Descriptors+0x29e>
 80033f8:	ffff0000 	.word	0xffff0000
 80033fc:	ffffc000 	.word	0xffffc000
 8003400:	c000ffff 	.word	0xc000ffff
 8003404:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	4b7b      	ldr	r3, [pc, #492]	; (80035fc <ETH_Prepare_Tx_Descriptors+0x444>)
 800340e:	4013      	ands	r3, r2
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	6852      	ldr	r2, [r2, #4]
 8003414:	431a      	orrs	r2, r3
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	431a      	orrs	r2, r3
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	431a      	orrs	r2, r3
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	431a      	orrs	r2, r3
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800348c:	f3bf 8f5f 	dmb	sy
}
 8003490:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80da 	beq.w	8003660 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80034be:	e0cf      	b.n	8003660 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	3301      	adds	r3, #1
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d902      	bls.n	80034de <ETH_Prepare_Tx_Descriptors+0x326>
 80034d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034da:	3b04      	subs	r3, #4
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e6:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003500:	d007      	beq.n	8003512 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	3304      	adds	r3, #4
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d029      	beq.n	8003566 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800351a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351e:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003520:	2300      	movs	r3, #0
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
 8003524:	e019      	b.n	800355a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8003526:	f3bf 8f5f 	dmb	sy
}
 800352a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	3301      	adds	r3, #1
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	2b03      	cmp	r3, #3
 8003542:	d902      	bls.n	800354a <ETH_Prepare_Tx_Descriptors+0x392>
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	3b04      	subs	r3, #4
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800354e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003552:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003556:	3301      	adds	r3, #1
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
 800355a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	429a      	cmp	r2, r3
 8003560:	d3e1      	bcc.n	8003526 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	e0ae      	b.n	80036c4 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	3301      	adds	r3, #1
 800356a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003582:	4013      	ands	r3, r2
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	6852      	ldr	r2, [r2, #4]
 8003588:	431a      	orrs	r2, r3
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d012      	beq.n	80035bc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	6852      	ldr	r2, [r2, #4]
 80035b2:	0412      	lsls	r2, r2, #16
 80035b4:	431a      	orrs	r2, r3
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	e008      	b.n	80035ce <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2200      	movs	r2, #0
 80035c0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	6a3a      	ldr	r2, [r7, #32]
 80035cc:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d018      	beq.n	800360c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <ETH_Prepare_Tx_Descriptors+0x450>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	69d2      	ldr	r2, [r2, #28]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	60da      	str	r2, [r3, #12]
 80035f8:	e020      	b.n	800363c <ETH_Prepare_Tx_Descriptors+0x484>
 80035fa:	bf00      	nop
 80035fc:	ffff8000 	.word	0xffff8000
 8003600:	ffffc000 	.word	0xffffc000
 8003604:	c000ffff 	.word	0xc000ffff
 8003608:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <ETH_Prepare_Tx_Descriptors+0x518>)
 8003612:	4013      	ands	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	6852      	ldr	r2, [r2, #4]
 8003618:	431a      	orrs	r2, r3
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	431a      	orrs	r2, r3
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	3301      	adds	r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003642:	f3bf 8f5f 	dmb	sy
}
 8003646:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f47f af2b 	bne.w	80034c0 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	e005      	b.n	800368a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800369a:	6979      	ldr	r1, [r7, #20]
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	3304      	adds	r3, #4
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036aa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80036ac:	b672      	cpsid	i
}
 80036ae:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	4413      	add	r3, r2
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80036be:	b662      	cpsie	i
}
 80036c0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3734      	adds	r7, #52	; 0x34
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	ffff8000 	.word	0xffff8000

080036d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036e2:	4b89      	ldr	r3, [pc, #548]	; (8003908 <HAL_GPIO_Init+0x234>)
 80036e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036e6:	e194      	b.n	8003a12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2101      	movs	r1, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8186 	beq.w	8003a0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d005      	beq.n	8003718 <HAL_GPIO_Init+0x44>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d130      	bne.n	800377a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	2203      	movs	r2, #3
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4313      	orrs	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800374e:	2201      	movs	r2, #1
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f003 0201 	and.w	r2, r3, #1
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b03      	cmp	r3, #3
 8003784:	d017      	beq.n	80037b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d123      	bne.n	800380a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	08da      	lsrs	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3208      	adds	r2, #8
 80037ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	08da      	lsrs	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3208      	adds	r2, #8
 8003804:	69b9      	ldr	r1, [r7, #24]
 8003806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0203 	and.w	r2, r3, #3
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80e0 	beq.w	8003a0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384c:	4b2f      	ldr	r3, [pc, #188]	; (800390c <HAL_GPIO_Init+0x238>)
 800384e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003852:	4a2e      	ldr	r2, [pc, #184]	; (800390c <HAL_GPIO_Init+0x238>)
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800385c:	4b2b      	ldr	r3, [pc, #172]	; (800390c <HAL_GPIO_Init+0x238>)
 800385e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800386a:	4a29      	ldr	r2, [pc, #164]	; (8003910 <HAL_GPIO_Init+0x23c>)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	3302      	adds	r3, #2
 8003872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	220f      	movs	r2, #15
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a20      	ldr	r2, [pc, #128]	; (8003914 <HAL_GPIO_Init+0x240>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d052      	beq.n	800393c <HAL_GPIO_Init+0x268>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_GPIO_Init+0x244>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d031      	beq.n	8003902 <HAL_GPIO_Init+0x22e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_GPIO_Init+0x248>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d02b      	beq.n	80038fe <HAL_GPIO_Init+0x22a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a1d      	ldr	r2, [pc, #116]	; (8003920 <HAL_GPIO_Init+0x24c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d025      	beq.n	80038fa <HAL_GPIO_Init+0x226>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <HAL_GPIO_Init+0x250>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <HAL_GPIO_Init+0x222>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <HAL_GPIO_Init+0x254>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d019      	beq.n	80038f2 <HAL_GPIO_Init+0x21e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1a      	ldr	r2, [pc, #104]	; (800392c <HAL_GPIO_Init+0x258>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_GPIO_Init+0x21a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a19      	ldr	r2, [pc, #100]	; (8003930 <HAL_GPIO_Init+0x25c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00d      	beq.n	80038ea <HAL_GPIO_Init+0x216>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a18      	ldr	r2, [pc, #96]	; (8003934 <HAL_GPIO_Init+0x260>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <HAL_GPIO_Init+0x212>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a17      	ldr	r2, [pc, #92]	; (8003938 <HAL_GPIO_Init+0x264>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_GPIO_Init+0x20e>
 80038de:	2309      	movs	r3, #9
 80038e0:	e02d      	b.n	800393e <HAL_GPIO_Init+0x26a>
 80038e2:	230a      	movs	r3, #10
 80038e4:	e02b      	b.n	800393e <HAL_GPIO_Init+0x26a>
 80038e6:	2308      	movs	r3, #8
 80038e8:	e029      	b.n	800393e <HAL_GPIO_Init+0x26a>
 80038ea:	2307      	movs	r3, #7
 80038ec:	e027      	b.n	800393e <HAL_GPIO_Init+0x26a>
 80038ee:	2306      	movs	r3, #6
 80038f0:	e025      	b.n	800393e <HAL_GPIO_Init+0x26a>
 80038f2:	2305      	movs	r3, #5
 80038f4:	e023      	b.n	800393e <HAL_GPIO_Init+0x26a>
 80038f6:	2304      	movs	r3, #4
 80038f8:	e021      	b.n	800393e <HAL_GPIO_Init+0x26a>
 80038fa:	2303      	movs	r3, #3
 80038fc:	e01f      	b.n	800393e <HAL_GPIO_Init+0x26a>
 80038fe:	2302      	movs	r3, #2
 8003900:	e01d      	b.n	800393e <HAL_GPIO_Init+0x26a>
 8003902:	2301      	movs	r3, #1
 8003904:	e01b      	b.n	800393e <HAL_GPIO_Init+0x26a>
 8003906:	bf00      	nop
 8003908:	58000080 	.word	0x58000080
 800390c:	58024400 	.word	0x58024400
 8003910:	58000400 	.word	0x58000400
 8003914:	58020000 	.word	0x58020000
 8003918:	58020400 	.word	0x58020400
 800391c:	58020800 	.word	0x58020800
 8003920:	58020c00 	.word	0x58020c00
 8003924:	58021000 	.word	0x58021000
 8003928:	58021400 	.word	0x58021400
 800392c:	58021800 	.word	0x58021800
 8003930:	58021c00 	.word	0x58021c00
 8003934:	58022000 	.word	0x58022000
 8003938:	58022400 	.word	0x58022400
 800393c:	2300      	movs	r3, #0
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	f002 0203 	and.w	r2, r2, #3
 8003944:	0092      	lsls	r2, r2, #2
 8003946:	4093      	lsls	r3, r2
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800394e:	4938      	ldr	r1, [pc, #224]	; (8003a30 <HAL_GPIO_Init+0x35c>)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	3302      	adds	r3, #2
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800395c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003982:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800398a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f47f ae63 	bne.w	80036e8 <HAL_GPIO_Init+0x14>
  }
}
 8003a22:	bf00      	nop
 8003a24:	bf00      	nop
 8003a26:	3724      	adds	r7, #36	; 0x24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	58000400 	.word	0x58000400

08003a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	887b      	ldrh	r3, [r7, #2]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	e001      	b.n	8003a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003a6c:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <HAL_HSEM_FastTake+0x2c>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3320      	adds	r3, #32
 8003a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a76:	4a07      	ldr	r2, [pc, #28]	; (8003a94 <HAL_HSEM_FastTake+0x30>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e000      	b.n	8003a82 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	58026400 	.word	0x58026400
 8003a94:	80000300 	.word	0x80000300

08003a98 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003aa2:	4906      	ldr	r1, [pc, #24]	; (8003abc <HAL_HSEM_Release+0x24>)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	58026400 	.word	0x58026400

08003ac0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_HSEM_ActivateNotification+0x20>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4904      	ldr	r1, [pc, #16]	; (8003ae0 <HAL_HSEM_ActivateNotification+0x20>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]
#endif
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	58026500 	.word	0x58026500

08003ae4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_HSEM_IRQHandler+0x30>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <HAL_HSEM_IRQHandler+0x30>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	4906      	ldr	r1, [pc, #24]	; (8003b14 <HAL_HSEM_IRQHandler+0x30>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003afe:	4a05      	ldr	r2, [pc, #20]	; (8003b14 <HAL_HSEM_IRQHandler+0x30>)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f01b fa8d 	bl	801f024 <HAL_HSEM_FreeCallback>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	58026500 	.word	0x58026500

08003b18 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b20:	f7fd fea2 	bl	8001868 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e03b      	b.n	8003ba8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003b50:	e00f      	b.n	8003b72 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003b52:	f7fd fe89 	bl	8001868 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b05      	cmp	r3, #5
 8003b5e:	d908      	bls.n	8003b72 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2240      	movs	r2, #64	; 0x40
 8003b64:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2203      	movs	r2, #3
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e01a      	b.n	8003ba8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e8      	bne.n	8003b52 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fa13 	bl	8003fac <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e048      	b.n	8003c54 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2200      	movs	r2, #0
 8003be8:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2200      	movs	r2, #0
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	221f      	movs	r2, #31
 8003c28:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e03e      	b.n	8003cf8 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e037      	b.n	8003cf8 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d126      	bne.n	8003cea <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d11c      	bne.n	8003ce4 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d108      	bne.n	8003cd2 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cce:	611a      	str	r2, [r3, #16]
 8003cd0:	e00d      	b.n	8003cee <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ce0:	611a      	str	r2, [r3, #16]
 8003ce2:	e004      	b.n	8003cee <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
 8003ce8:	e001      	b.n	8003cee <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d10:	4b91      	ldr	r3, [pc, #580]	; (8003f58 <HAL_MDMA_IRQHandler+0x254>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a91      	ldr	r2, [pc, #580]	; (8003f5c <HAL_MDMA_IRQHandler+0x258>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	0a9b      	lsrs	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	4b8e      	ldr	r3, [pc, #568]	; (8003f60 <HAL_MDMA_IRQHandler+0x25c>)
 8003d26:	4413      	add	r3, r2
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2201      	movs	r2, #1
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8003d36:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 812d 	beq.w	8003fa0 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d054      	beq.n	8003dfe <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d04d      	beq.n	8003dfe <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0202 	bic.w	r2, r2, #2
 8003d70:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d88:	f043 0201 	orr.w	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	669a      	str	r2, [r3, #104]	; 0x68
 8003d90:	e005      	b.n	8003d9e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d96:	f043 0202 	orr.w	r2, r3, #2
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dac:	f043 0204 	orr.w	r2, r3, #4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dc2:	f043 0208 	orr.w	r2, r3, #8
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd8:	f043 0210 	orr.w	r2, r3, #16
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dee:	f043 0220 	orr.w	r2, r3, #32
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d012      	beq.n	8003e32 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2210      	movs	r2, #16
 8003e20:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2208      	movs	r2, #8
 8003e54:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d012      	beq.n	8003e9a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2204      	movs	r2, #4
 8003e88:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d039      	beq.n	8003f1c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d032      	beq.n	8003f1c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8003ec4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d110      	bne.n	8003ef4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d05c      	beq.n	8003fa4 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
        }
        return;
 8003ef2:	e057      	b.n	8003fa4 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d040      	beq.n	8003fa6 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2204      	movs	r2, #4
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d30d      	bcc.n	8003f64 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f2      	bne.n	8003f3c <HAL_MDMA_IRQHandler+0x238>
 8003f56:	e006      	b.n	8003f66 <HAL_MDMA_IRQHandler+0x262>
 8003f58:	24000000 	.word	0x24000000
 8003f5c:	1b4e81b5 	.word	0x1b4e81b5
 8003f60:	adffffc0 	.word	0xadffffc0
        break;
 8003f64:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2203      	movs	r2, #3
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f84:	e003      	b.n	8003f8e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4798      	blx	r3
 8003f9e:	e002      	b.n	8003fa6 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8003fa4:	bf00      	nop
    }
  }
}
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68d9      	ldr	r1, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003fd2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003fde:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003fea:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8003ff4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004000:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004002:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	d107      	bne.n	800401e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800401c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	2b00      	cmp	r3, #0
 800402c:	da11      	bge.n	8004052 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800403c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	425b      	negs	r3, r3
 8004044:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	b292      	uxth	r2, r2
 800404e:	621a      	str	r2, [r3, #32]
 8004050:	e006      	b.n	8004060 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004056:	461a      	mov	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b292      	uxth	r2, r2
 800405e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	da15      	bge.n	8004094 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004076:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	425b      	negs	r3, r3
 800407e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a19      	ldr	r1, [r3, #32]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	041a      	lsls	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	621a      	str	r2, [r3, #32]
 8004092:	e009      	b.n	80040a8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6a19      	ldr	r1, [r3, #32]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	041a      	lsls	r2, r3, #16
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d006      	beq.n	80040c0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28
 80040be:	e003      	b.n	80040c8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2200      	movs	r2, #0
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2200      	movs	r2, #0
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80040e4:	4b29      	ldr	r3, [pc, #164]	; (800418c <HAL_PWREx_ConfigSupply+0xb0>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	2b06      	cmp	r3, #6
 80040ee:	d00a      	beq.n	8004106 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040f0:	4b26      	ldr	r3, [pc, #152]	; (800418c <HAL_PWREx_ConfigSupply+0xb0>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d001      	beq.n	8004102 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e040      	b.n	8004184 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e03e      	b.n	8004184 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004106:	4b21      	ldr	r3, [pc, #132]	; (800418c <HAL_PWREx_ConfigSupply+0xb0>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800410e:	491f      	ldr	r1, [pc, #124]	; (800418c <HAL_PWREx_ConfigSupply+0xb0>)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4313      	orrs	r3, r2
 8004114:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004116:	f7fd fba7 	bl	8001868 <HAL_GetTick>
 800411a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800411c:	e009      	b.n	8004132 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800411e:	f7fd fba3 	bl	8001868 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800412c:	d901      	bls.n	8004132 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e028      	b.n	8004184 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004132:	4b16      	ldr	r3, [pc, #88]	; (800418c <HAL_PWREx_ConfigSupply+0xb0>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800413a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413e:	d1ee      	bne.n	800411e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b1e      	cmp	r3, #30
 8004144:	d008      	beq.n	8004158 <HAL_PWREx_ConfigSupply+0x7c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b2e      	cmp	r3, #46	; 0x2e
 800414a:	d005      	beq.n	8004158 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b1d      	cmp	r3, #29
 8004150:	d002      	beq.n	8004158 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b2d      	cmp	r3, #45	; 0x2d
 8004156:	d114      	bne.n	8004182 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004158:	f7fd fb86 	bl	8001868 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800415e:	e009      	b.n	8004174 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004160:	f7fd fb82 	bl	8001868 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800416e:	d901      	bls.n	8004174 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e007      	b.n	8004184 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_PWREx_ConfigSupply+0xb0>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004180:	d1ee      	bne.n	8004160 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	58024800 	.word	0x58024800

08004190 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08c      	sub	sp, #48	; 0x30
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f000 bc48 	b.w	8004a34 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8088 	beq.w	80042c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b2:	4b99      	ldr	r3, [pc, #612]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041bc:	4b96      	ldr	r3, [pc, #600]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d007      	beq.n	80041d8 <HAL_RCC_OscConfig+0x48>
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ca:	2b18      	cmp	r3, #24
 80041cc:	d111      	bne.n	80041f2 <HAL_RCC_OscConfig+0x62>
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d10c      	bne.n	80041f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	4b8f      	ldr	r3, [pc, #572]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d06d      	beq.n	80042c0 <HAL_RCC_OscConfig+0x130>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d169      	bne.n	80042c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f000 bc21 	b.w	8004a34 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fa:	d106      	bne.n	800420a <HAL_RCC_OscConfig+0x7a>
 80041fc:	4b86      	ldr	r3, [pc, #536]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a85      	ldr	r2, [pc, #532]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	e02e      	b.n	8004268 <HAL_RCC_OscConfig+0xd8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0x9c>
 8004212:	4b81      	ldr	r3, [pc, #516]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a80      	ldr	r2, [pc, #512]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4b7e      	ldr	r3, [pc, #504]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7d      	ldr	r2, [pc, #500]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e01d      	b.n	8004268 <HAL_RCC_OscConfig+0xd8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0xc0>
 8004236:	4b78      	ldr	r3, [pc, #480]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a77      	ldr	r2, [pc, #476]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 800423c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b75      	ldr	r3, [pc, #468]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a74      	ldr	r2, [pc, #464]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e00b      	b.n	8004268 <HAL_RCC_OscConfig+0xd8>
 8004250:	4b71      	ldr	r3, [pc, #452]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a70      	ldr	r2, [pc, #448]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b6e      	ldr	r3, [pc, #440]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a6d      	ldr	r2, [pc, #436]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d013      	beq.n	8004298 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fd fafa 	bl	8001868 <HAL_GetTick>
 8004274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004278:	f7fd faf6 	bl	8001868 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e3d4      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800428a:	4b63      	ldr	r3, [pc, #396]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0xe8>
 8004296:	e014      	b.n	80042c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fd fae6 	bl	8001868 <HAL_GetTick>
 800429c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fd fae2 	bl	8001868 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e3c0      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042b2:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x110>
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80ca 	beq.w	8004464 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d0:	4b51      	ldr	r3, [pc, #324]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042da:	4b4f      	ldr	r3, [pc, #316]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_RCC_OscConfig+0x166>
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	2b18      	cmp	r3, #24
 80042ea:	d156      	bne.n	800439a <HAL_RCC_OscConfig+0x20a>
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d151      	bne.n	800439a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f6:	4b48      	ldr	r3, [pc, #288]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_RCC_OscConfig+0x17e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e392      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800430e:	4b42      	ldr	r3, [pc, #264]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 0219 	bic.w	r2, r3, #25
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	493f      	ldr	r1, [pc, #252]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd faa2 	bl	8001868 <HAL_GetTick>
 8004324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004328:	f7fd fa9e 	bl	8001868 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e37c      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800433a:	4b37      	ldr	r3, [pc, #220]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004346:	f7fd fabf 	bl	80018c8 <HAL_GetREVID>
 800434a:	4603      	mov	r3, r0
 800434c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004350:	4293      	cmp	r3, r2
 8004352:	d817      	bhi.n	8004384 <HAL_RCC_OscConfig+0x1f4>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d108      	bne.n	800436e <HAL_RCC_OscConfig+0x1de>
 800435c:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004364:	4a2c      	ldr	r2, [pc, #176]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800436a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800436c:	e07a      	b.n	8004464 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436e:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	031b      	lsls	r3, r3, #12
 800437c:	4926      	ldr	r1, [pc, #152]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 800437e:	4313      	orrs	r3, r2
 8004380:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004382:	e06f      	b.n	8004464 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	4921      	ldr	r1, [pc, #132]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004398:	e064      	b.n	8004464 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d047      	beq.n	8004432 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043a2:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 0219 	bic.w	r2, r3, #25
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	491a      	ldr	r1, [pc, #104]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fd fa58 	bl	8001868 <HAL_GetTick>
 80043b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043bc:	f7fd fa54 	bl	8001868 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e332      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	f7fd fa75 	bl	80018c8 <HAL_GetREVID>
 80043de:	4603      	mov	r3, r0
 80043e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d819      	bhi.n	800441c <HAL_RCC_OscConfig+0x28c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d108      	bne.n	8004402 <HAL_RCC_OscConfig+0x272>
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043f8:	4a07      	ldr	r2, [pc, #28]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 80043fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fe:	6053      	str	r3, [r2, #4]
 8004400:	e030      	b.n	8004464 <HAL_RCC_OscConfig+0x2d4>
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	031b      	lsls	r3, r3, #12
 8004410:	4901      	ldr	r1, [pc, #4]	; (8004418 <HAL_RCC_OscConfig+0x288>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]
 8004416:	e025      	b.n	8004464 <HAL_RCC_OscConfig+0x2d4>
 8004418:	58024400 	.word	0x58024400
 800441c:	4b9a      	ldr	r3, [pc, #616]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	4997      	ldr	r1, [pc, #604]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 800442c:	4313      	orrs	r3, r2
 800442e:	604b      	str	r3, [r1, #4]
 8004430:	e018      	b.n	8004464 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004432:	4b95      	ldr	r3, [pc, #596]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a94      	ldr	r2, [pc, #592]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443e:	f7fd fa13 	bl	8001868 <HAL_GetTick>
 8004442:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004446:	f7fd fa0f 	bl	8001868 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e2ed      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004458:	4b8b      	ldr	r3, [pc, #556]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f0      	bne.n	8004446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a9 	beq.w	80045c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004472:	4b85      	ldr	r3, [pc, #532]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800447a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800447c:	4b82      	ldr	r3, [pc, #520]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b08      	cmp	r3, #8
 8004486:	d007      	beq.n	8004498 <HAL_RCC_OscConfig+0x308>
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b18      	cmp	r3, #24
 800448c:	d13a      	bne.n	8004504 <HAL_RCC_OscConfig+0x374>
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d135      	bne.n	8004504 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004498:	4b7b      	ldr	r3, [pc, #492]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_OscConfig+0x320>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e2c1      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044b0:	f7fd fa0a 	bl	80018c8 <HAL_GetREVID>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d817      	bhi.n	80044ee <HAL_RCC_OscConfig+0x35e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d108      	bne.n	80044d8 <HAL_RCC_OscConfig+0x348>
 80044c6:	4b70      	ldr	r3, [pc, #448]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044ce:	4a6e      	ldr	r2, [pc, #440]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 80044d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044d6:	e075      	b.n	80045c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044d8:	4b6b      	ldr	r3, [pc, #428]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	069b      	lsls	r3, r3, #26
 80044e6:	4968      	ldr	r1, [pc, #416]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044ec:	e06a      	b.n	80045c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044ee:	4b66      	ldr	r3, [pc, #408]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	061b      	lsls	r3, r3, #24
 80044fc:	4962      	ldr	r1, [pc, #392]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004502:	e05f      	b.n	80045c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d042      	beq.n	8004592 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800450c:	4b5e      	ldr	r3, [pc, #376]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a5d      	ldr	r2, [pc, #372]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fd f9a6 	bl	8001868 <HAL_GetTick>
 800451c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004520:	f7fd f9a2 	bl	8001868 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e280      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004532:	4b55      	ldr	r3, [pc, #340]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800453e:	f7fd f9c3 	bl	80018c8 <HAL_GetREVID>
 8004542:	4603      	mov	r3, r0
 8004544:	f241 0203 	movw	r2, #4099	; 0x1003
 8004548:	4293      	cmp	r3, r2
 800454a:	d817      	bhi.n	800457c <HAL_RCC_OscConfig+0x3ec>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	2b20      	cmp	r3, #32
 8004552:	d108      	bne.n	8004566 <HAL_RCC_OscConfig+0x3d6>
 8004554:	4b4c      	ldr	r3, [pc, #304]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800455c:	4a4a      	ldr	r2, [pc, #296]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 800455e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004562:	6053      	str	r3, [r2, #4]
 8004564:	e02e      	b.n	80045c4 <HAL_RCC_OscConfig+0x434>
 8004566:	4b48      	ldr	r3, [pc, #288]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	069b      	lsls	r3, r3, #26
 8004574:	4944      	ldr	r1, [pc, #272]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
 800457a:	e023      	b.n	80045c4 <HAL_RCC_OscConfig+0x434>
 800457c:	4b42      	ldr	r3, [pc, #264]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	493f      	ldr	r1, [pc, #252]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 800458c:	4313      	orrs	r3, r2
 800458e:	60cb      	str	r3, [r1, #12]
 8004590:	e018      	b.n	80045c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004592:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a3c      	ldr	r2, [pc, #240]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fd f963 	bl	8001868 <HAL_GetTick>
 80045a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045a6:	f7fd f95f 	bl	8001868 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e23d      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045b8:	4b33      	ldr	r3, [pc, #204]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d036      	beq.n	800463e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d019      	beq.n	800460c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d8:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 80045da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045dc:	4a2a      	ldr	r2, [pc, #168]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fd f940 	bl	8001868 <HAL_GetTick>
 80045e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ec:	f7fd f93c 	bl	8001868 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e21a      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045fe:	4b22      	ldr	r3, [pc, #136]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x45c>
 800460a:	e018      	b.n	800463e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800460c:	4b1e      	ldr	r3, [pc, #120]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 800460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004610:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fd f926 	bl	8001868 <HAL_GetTick>
 800461c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004620:	f7fd f922 	bl	8001868 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e200      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d039      	beq.n	80046be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01c      	beq.n	800468c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004652:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 8004658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800465c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800465e:	f7fd f903 	bl	8001868 <HAL_GetTick>
 8004662:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004666:	f7fd f8ff 	bl	8001868 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e1dd      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <HAL_RCC_OscConfig+0x4f8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x4d6>
 8004684:	e01b      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800468c:	4b9b      	ldr	r3, [pc, #620]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a9a      	ldr	r2, [pc, #616]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004696:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004698:	f7fd f8e6 	bl	8001868 <HAL_GetTick>
 800469c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046a0:	f7fd f8e2 	bl	8001868 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e1c0      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046b2:	4b92      	ldr	r3, [pc, #584]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 8081 	beq.w	80047ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046cc:	4b8c      	ldr	r3, [pc, #560]	; (8004900 <HAL_RCC_OscConfig+0x770>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a8b      	ldr	r2, [pc, #556]	; (8004900 <HAL_RCC_OscConfig+0x770>)
 80046d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046d8:	f7fd f8c6 	bl	8001868 <HAL_GetTick>
 80046dc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e0:	f7fd f8c2 	bl	8001868 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	; 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e1a0      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046f2:	4b83      	ldr	r3, [pc, #524]	; (8004900 <HAL_RCC_OscConfig+0x770>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d106      	bne.n	8004714 <HAL_RCC_OscConfig+0x584>
 8004706:	4b7d      	ldr	r3, [pc, #500]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	4a7c      	ldr	r2, [pc, #496]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	6713      	str	r3, [r2, #112]	; 0x70
 8004712:	e02d      	b.n	8004770 <HAL_RCC_OscConfig+0x5e0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10c      	bne.n	8004736 <HAL_RCC_OscConfig+0x5a6>
 800471c:	4b77      	ldr	r3, [pc, #476]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	4a76      	ldr	r2, [pc, #472]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	6713      	str	r3, [r2, #112]	; 0x70
 8004728:	4b74      	ldr	r3, [pc, #464]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a73      	ldr	r2, [pc, #460]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
 8004734:	e01c      	b.n	8004770 <HAL_RCC_OscConfig+0x5e0>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b05      	cmp	r3, #5
 800473c:	d10c      	bne.n	8004758 <HAL_RCC_OscConfig+0x5c8>
 800473e:	4b6f      	ldr	r3, [pc, #444]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	4a6e      	ldr	r2, [pc, #440]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004744:	f043 0304 	orr.w	r3, r3, #4
 8004748:	6713      	str	r3, [r2, #112]	; 0x70
 800474a:	4b6c      	ldr	r3, [pc, #432]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	4a6b      	ldr	r2, [pc, #428]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	6713      	str	r3, [r2, #112]	; 0x70
 8004756:	e00b      	b.n	8004770 <HAL_RCC_OscConfig+0x5e0>
 8004758:	4b68      	ldr	r3, [pc, #416]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	4a67      	ldr	r2, [pc, #412]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 800475e:	f023 0301 	bic.w	r3, r3, #1
 8004762:	6713      	str	r3, [r2, #112]	; 0x70
 8004764:	4b65      	ldr	r3, [pc, #404]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	4a64      	ldr	r2, [pc, #400]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 800476a:	f023 0304 	bic.w	r3, r3, #4
 800476e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d015      	beq.n	80047a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fd f876 	bl	8001868 <HAL_GetTick>
 800477c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800477e:	e00a      	b.n	8004796 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004780:	f7fd f872 	bl	8001868 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e14e      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004796:	4b59      	ldr	r3, [pc, #356]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0ee      	beq.n	8004780 <HAL_RCC_OscConfig+0x5f0>
 80047a2:	e014      	b.n	80047ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fd f860 	bl	8001868 <HAL_GetTick>
 80047a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ac:	f7fd f85c 	bl	8001868 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e138      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047c2:	4b4e      	ldr	r3, [pc, #312]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1ee      	bne.n	80047ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 812d 	beq.w	8004a32 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047d8:	4b48      	ldr	r3, [pc, #288]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047e0:	2b18      	cmp	r3, #24
 80047e2:	f000 80bd 	beq.w	8004960 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	f040 809e 	bne.w	800492c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f0:	4b42      	ldr	r3, [pc, #264]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a41      	ldr	r2, [pc, #260]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80047f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fd f834 	bl	8001868 <HAL_GetTick>
 8004800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004804:	f7fd f830 	bl	8001868 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e10e      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004816:	4b39      	ldr	r3, [pc, #228]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004822:	4b36      	ldr	r3, [pc, #216]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004826:	4b37      	ldr	r3, [pc, #220]	; (8004904 <HAL_RCC_OscConfig+0x774>)
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	430a      	orrs	r2, r1
 8004836:	4931      	ldr	r1, [pc, #196]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004838:	4313      	orrs	r3, r2
 800483a:	628b      	str	r3, [r1, #40]	; 0x28
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	3b01      	subs	r3, #1
 8004842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	3b01      	subs	r3, #1
 800484c:	025b      	lsls	r3, r3, #9
 800484e:	b29b      	uxth	r3, r3
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	3b01      	subs	r3, #1
 8004858:	041b      	lsls	r3, r3, #16
 800485a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004864:	3b01      	subs	r3, #1
 8004866:	061b      	lsls	r3, r3, #24
 8004868:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800486c:	4923      	ldr	r1, [pc, #140]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 800486e:	4313      	orrs	r3, r2
 8004870:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004872:	4b22      	ldr	r3, [pc, #136]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	4a21      	ldr	r2, [pc, #132]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800487e:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004882:	4b21      	ldr	r3, [pc, #132]	; (8004908 <HAL_RCC_OscConfig+0x778>)
 8004884:	4013      	ands	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800488a:	00d2      	lsls	r2, r2, #3
 800488c:	491b      	ldr	r1, [pc, #108]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004892:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	f023 020c 	bic.w	r2, r3, #12
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	4917      	ldr	r1, [pc, #92]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80048a4:	4b15      	ldr	r3, [pc, #84]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	f023 0202 	bic.w	r2, r3, #2
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b0:	4912      	ldr	r1, [pc, #72]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048b6:	4b11      	ldr	r3, [pc, #68]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	4a10      	ldr	r2, [pc, #64]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c2:	4b0e      	ldr	r3, [pc, #56]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	4a0d      	ldr	r2, [pc, #52]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048ce:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80048da:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	4a07      	ldr	r2, [pc, #28]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e6:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a04      	ldr	r2, [pc, #16]	; (80048fc <HAL_RCC_OscConfig+0x76c>)
 80048ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fc ffb9 	bl	8001868 <HAL_GetTick>
 80048f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048f8:	e011      	b.n	800491e <HAL_RCC_OscConfig+0x78e>
 80048fa:	bf00      	nop
 80048fc:	58024400 	.word	0x58024400
 8004900:	58024800 	.word	0x58024800
 8004904:	fffffc0c 	.word	0xfffffc0c
 8004908:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490c:	f7fc ffac 	bl	8001868 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e08a      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x77c>
 800492a:	e082      	b.n	8004a32 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492c:	4b43      	ldr	r3, [pc, #268]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a42      	ldr	r2, [pc, #264]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 8004932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fc ff96 	bl	8001868 <HAL_GetTick>
 800493c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004940:	f7fc ff92 	bl	8001868 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e070      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004952:	4b3a      	ldr	r3, [pc, #232]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x7b0>
 800495e:	e068      	b.n	8004a32 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004960:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004966:	4b35      	ldr	r3, [pc, #212]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	2b01      	cmp	r3, #1
 8004972:	d031      	beq.n	80049d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f003 0203 	and.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d12a      	bne.n	80049d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498e:	429a      	cmp	r2, r3
 8004990:	d122      	bne.n	80049d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800499e:	429a      	cmp	r2, r3
 80049a0:	d11a      	bne.n	80049d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	0a5b      	lsrs	r3, r3, #9
 80049a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d111      	bne.n	80049d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	0c1b      	lsrs	r3, r3, #16
 80049b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d108      	bne.n	80049d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	0e1b      	lsrs	r3, r3, #24
 80049ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e02b      	b.n	8004a34 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80049dc:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	08db      	lsrs	r3, r3, #3
 80049e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d01f      	beq.n	8004a32 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	4a11      	ldr	r2, [pc, #68]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049fe:	f7fc ff33 	bl	8001868 <HAL_GetTick>
 8004a02:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004a04:	bf00      	nop
 8004a06:	f7fc ff2f 	bl	8001868 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d0f9      	beq.n	8004a06 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a12:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 8004a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_RCC_OscConfig+0x8b0>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a1e:	00d2      	lsls	r2, r2, #3
 8004a20:	4906      	ldr	r1, [pc, #24]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <HAL_RCC_OscConfig+0x8ac>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3730      	adds	r7, #48	; 0x30
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	ffff0007 	.word	0xffff0007

08004a44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e19c      	b.n	8004d92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a58:	4b8a      	ldr	r3, [pc, #552]	; (8004c84 <HAL_RCC_ClockConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d910      	bls.n	8004a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b87      	ldr	r3, [pc, #540]	; (8004c84 <HAL_RCC_ClockConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 020f 	bic.w	r2, r3, #15
 8004a6e:	4985      	ldr	r1, [pc, #532]	; (8004c84 <HAL_RCC_ClockConfig+0x240>)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a76:	4b83      	ldr	r3, [pc, #524]	; (8004c84 <HAL_RCC_ClockConfig+0x240>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d001      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e184      	b.n	8004d92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d010      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	4b7b      	ldr	r3, [pc, #492]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d908      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004aa4:	4b78      	ldr	r3, [pc, #480]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	4975      	ldr	r1, [pc, #468]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d010      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	4b70      	ldr	r3, [pc, #448]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d908      	bls.n	8004ae4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ad2:	4b6d      	ldr	r3, [pc, #436]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	496a      	ldr	r1, [pc, #424]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d010      	beq.n	8004b12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	4b64      	ldr	r3, [pc, #400]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d908      	bls.n	8004b12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b00:	4b61      	ldr	r3, [pc, #388]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	495e      	ldr	r1, [pc, #376]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d010      	beq.n	8004b40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69da      	ldr	r2, [r3, #28]
 8004b22:	4b59      	ldr	r3, [pc, #356]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d908      	bls.n	8004b40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b2e:	4b56      	ldr	r3, [pc, #344]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	4953      	ldr	r1, [pc, #332]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d010      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	4b4d      	ldr	r3, [pc, #308]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d908      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b5c:	4b4a      	ldr	r3, [pc, #296]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f023 020f 	bic.w	r2, r3, #15
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4947      	ldr	r1, [pc, #284]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d055      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b7a:	4b43      	ldr	r3, [pc, #268]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	4940      	ldr	r1, [pc, #256]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d107      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b94:	4b3c      	ldr	r3, [pc, #240]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d121      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0f6      	b.n	8004d92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d107      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bac:	4b36      	ldr	r3, [pc, #216]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d115      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0ea      	b.n	8004d92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d107      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bc4:	4b30      	ldr	r3, [pc, #192]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d109      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0de      	b.n	8004d92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bd4:	4b2c      	ldr	r3, [pc, #176]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0d6      	b.n	8004d92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004be4:	4b28      	ldr	r3, [pc, #160]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f023 0207 	bic.w	r2, r3, #7
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4925      	ldr	r1, [pc, #148]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf6:	f7fc fe37 	bl	8001868 <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfe:	f7fc fe33 	bl	8001868 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0be      	b.n	8004d92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c14:	4b1c      	ldr	r3, [pc, #112]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d1eb      	bne.n	8004bfe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d208      	bcs.n	8004c54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c42:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f023 020f 	bic.w	r2, r3, #15
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	490e      	ldr	r1, [pc, #56]	; (8004c88 <HAL_RCC_ClockConfig+0x244>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <HAL_RCC_ClockConfig+0x240>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d214      	bcs.n	8004c8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <HAL_RCC_ClockConfig+0x240>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 020f 	bic.w	r2, r3, #15
 8004c6a:	4906      	ldr	r1, [pc, #24]	; (8004c84 <HAL_RCC_ClockConfig+0x240>)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <HAL_RCC_ClockConfig+0x240>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e086      	b.n	8004d92 <HAL_RCC_ClockConfig+0x34e>
 8004c84:	52002000 	.word	0x52002000
 8004c88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d010      	beq.n	8004cba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	4b3f      	ldr	r3, [pc, #252]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d208      	bcs.n	8004cba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ca8:	4b3c      	ldr	r3, [pc, #240]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	4939      	ldr	r1, [pc, #228]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d010      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695a      	ldr	r2, [r3, #20]
 8004cca:	4b34      	ldr	r3, [pc, #208]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d208      	bcs.n	8004ce8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cd6:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	492e      	ldr	r1, [pc, #184]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d010      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	4b28      	ldr	r3, [pc, #160]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d208      	bcs.n	8004d16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d04:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	4922      	ldr	r1, [pc, #136]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d010      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d208      	bcs.n	8004d44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d32:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	4917      	ldr	r1, [pc, #92]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d44:	f000 f89e 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	4912      	ldr	r1, [pc, #72]	; (8004da0 <HAL_RCC_ClockConfig+0x35c>)
 8004d56:	5ccb      	ldrb	r3, [r1, r3]
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d62:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <HAL_RCC_ClockConfig+0x358>)
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	4a0d      	ldr	r2, [pc, #52]	; (8004da0 <HAL_RCC_ClockConfig+0x35c>)
 8004d6c:	5cd3      	ldrb	r3, [r2, r3]
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
 8004d78:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <HAL_RCC_ClockConfig+0x360>)
 8004d7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <HAL_RCC_ClockConfig+0x364>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <HAL_RCC_ClockConfig+0x368>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fc fa36 	bl	80011f8 <HAL_InitTick>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	080243b4 	.word	0x080243b4
 8004da4:	24000004 	.word	0x24000004
 8004da8:	24000000 	.word	0x24000000
 8004dac:	24000008 	.word	0x24000008

08004db0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08c      	sub	sp, #48	; 0x30
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d12a      	bne.n	8004e18 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8004dc2:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_RCC_MCOConfig+0xc8>)
 8004dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dc8:	4a2b      	ldr	r2, [pc, #172]	; (8004e78 <HAL_RCC_MCOConfig+0xc8>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004dd2:	4b29      	ldr	r3, [pc, #164]	; (8004e78 <HAL_RCC_MCOConfig+0xc8>)
 8004dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de6:	2302      	movs	r3, #2
 8004de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dea:	2303      	movs	r3, #3
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004df2:	2300      	movs	r3, #0
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004df6:	f107 031c 	add.w	r3, r7, #28
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	481f      	ldr	r0, [pc, #124]	; (8004e7c <HAL_RCC_MCOConfig+0xcc>)
 8004dfe:	f7fe fc69 	bl	80036d4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004e02:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <HAL_RCC_MCOConfig+0xc8>)
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	4919      	ldr	r1, [pc, #100]	; (8004e78 <HAL_RCC_MCOConfig+0xc8>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004e16:	e02a      	b.n	8004e6e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004e18:	4b17      	ldr	r3, [pc, #92]	; (8004e78 <HAL_RCC_MCOConfig+0xc8>)
 8004e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e1e:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <HAL_RCC_MCOConfig+0xc8>)
 8004e20:	f043 0304 	orr.w	r3, r3, #4
 8004e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e28:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <HAL_RCC_MCOConfig+0xc8>)
 8004e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e40:	2303      	movs	r3, #3
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004e4c:	f107 031c 	add.w	r3, r7, #28
 8004e50:	4619      	mov	r1, r3
 8004e52:	480b      	ldr	r0, [pc, #44]	; (8004e80 <HAL_RCC_MCOConfig+0xd0>)
 8004e54:	f7fe fc3e 	bl	80036d4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004e58:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <HAL_RCC_MCOConfig+0xc8>)
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	01d9      	lsls	r1, r3, #7
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	430b      	orrs	r3, r1
 8004e68:	4903      	ldr	r1, [pc, #12]	; (8004e78 <HAL_RCC_MCOConfig+0xc8>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	610b      	str	r3, [r1, #16]
}
 8004e6e:	bf00      	nop
 8004e70:	3730      	adds	r7, #48	; 0x30
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	58024400 	.word	0x58024400
 8004e7c:	58020000 	.word	0x58020000
 8004e80:	58020800 	.word	0x58020800

08004e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	; 0x24
 8004e88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e8a:	4bb3      	ldr	r3, [pc, #716]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e92:	2b18      	cmp	r3, #24
 8004e94:	f200 8155 	bhi.w	8005142 <HAL_RCC_GetSysClockFreq+0x2be>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004f05 	.word	0x08004f05
 8004ea4:	08005143 	.word	0x08005143
 8004ea8:	08005143 	.word	0x08005143
 8004eac:	08005143 	.word	0x08005143
 8004eb0:	08005143 	.word	0x08005143
 8004eb4:	08005143 	.word	0x08005143
 8004eb8:	08005143 	.word	0x08005143
 8004ebc:	08005143 	.word	0x08005143
 8004ec0:	08004f2b 	.word	0x08004f2b
 8004ec4:	08005143 	.word	0x08005143
 8004ec8:	08005143 	.word	0x08005143
 8004ecc:	08005143 	.word	0x08005143
 8004ed0:	08005143 	.word	0x08005143
 8004ed4:	08005143 	.word	0x08005143
 8004ed8:	08005143 	.word	0x08005143
 8004edc:	08005143 	.word	0x08005143
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08005143 	.word	0x08005143
 8004ee8:	08005143 	.word	0x08005143
 8004eec:	08005143 	.word	0x08005143
 8004ef0:	08005143 	.word	0x08005143
 8004ef4:	08005143 	.word	0x08005143
 8004ef8:	08005143 	.word	0x08005143
 8004efc:	08005143 	.word	0x08005143
 8004f00:	08004f37 	.word	0x08004f37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f04:	4b94      	ldr	r3, [pc, #592]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f10:	4b91      	ldr	r3, [pc, #580]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	08db      	lsrs	r3, r3, #3
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	4a90      	ldr	r2, [pc, #576]	; (800515c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f22:	e111      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f24:	4b8d      	ldr	r3, [pc, #564]	; (800515c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f26:	61bb      	str	r3, [r7, #24]
      break;
 8004f28:	e10e      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f2a:	4b8d      	ldr	r3, [pc, #564]	; (8005160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f2c:	61bb      	str	r3, [r7, #24]
      break;
 8004f2e:	e10b      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f30:	4b8c      	ldr	r3, [pc, #560]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f32:	61bb      	str	r3, [r7, #24]
      break;
 8004f34:	e108      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f36:	4b88      	ldr	r3, [pc, #544]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f40:	4b85      	ldr	r3, [pc, #532]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f4c:	4b82      	ldr	r3, [pc, #520]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f56:	4b80      	ldr	r3, [pc, #512]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	08db      	lsrs	r3, r3, #3
 8004f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80e1 	beq.w	800513c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	f000 8083 	beq.w	8005088 <HAL_RCC_GetSysClockFreq+0x204>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	f200 80a1 	bhi.w	80050cc <HAL_RCC_GetSysClockFreq+0x248>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x114>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d056      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f96:	e099      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f98:	4b6f      	ldr	r3, [pc, #444]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d02d      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fa4:	4b6c      	ldr	r3, [pc, #432]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	08db      	lsrs	r3, r3, #3
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	4a6b      	ldr	r2, [pc, #428]	; (800515c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fce:	4b62      	ldr	r3, [pc, #392]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fe2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004ffe:	e087      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800516c <HAL_RCC_GetSysClockFreq+0x2e8>
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	4b51      	ldr	r3, [pc, #324]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005022:	ed97 6a02 	vldr	s12, [r7, #8]
 8005026:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800502a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005042:	e065      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005170 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005056:	4b40      	ldr	r3, [pc, #256]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005066:	ed97 6a02 	vldr	s12, [r7, #8]
 800506a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800506e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800507a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005086:	e043      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005174 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b2f      	ldr	r3, [pc, #188]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050ca:	e021      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005170 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800510e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005110:	4b11      	ldr	r3, [pc, #68]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	0a5b      	lsrs	r3, r3, #9
 8005116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511a:	3301      	adds	r3, #1
 800511c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	ee07 3a90 	vmov	s15, r3
 8005124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005128:	edd7 6a07 	vldr	s13, [r7, #28]
 800512c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005134:	ee17 3a90 	vmov	r3, s15
 8005138:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800513a:	e005      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
      break;
 8005140:	e002      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005144:	61bb      	str	r3, [r7, #24]
      break;
 8005146:	bf00      	nop
  }

  return sysclockfreq;
 8005148:	69bb      	ldr	r3, [r7, #24]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3724      	adds	r7, #36	; 0x24
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	58024400 	.word	0x58024400
 800515c:	03d09000 	.word	0x03d09000
 8005160:	003d0900 	.word	0x003d0900
 8005164:	017d7840 	.word	0x017d7840
 8005168:	46000000 	.word	0x46000000
 800516c:	4c742400 	.word	0x4c742400
 8005170:	4a742400 	.word	0x4a742400
 8005174:	4bbebc20 	.word	0x4bbebc20

08005178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800517e:	f7ff fe81 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8005182:	4602      	mov	r2, r0
 8005184:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	0a1b      	lsrs	r3, r3, #8
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	490f      	ldr	r1, [pc, #60]	; (80051cc <HAL_RCC_GetHCLKFreq+0x54>)
 8005190:	5ccb      	ldrb	r3, [r1, r3]
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	4a09      	ldr	r2, [pc, #36]	; (80051cc <HAL_RCC_GetHCLKFreq+0x54>)
 80051a6:	5cd3      	ldrb	r3, [r2, r3]
 80051a8:	f003 031f 	and.w	r3, r3, #31
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	fa22 f303 	lsr.w	r3, r2, r3
 80051b2:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051b6:	4a07      	ldr	r2, [pc, #28]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051bc:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	58024400 	.word	0x58024400
 80051cc:	080243b4 	.word	0x080243b4
 80051d0:	24000004 	.word	0x24000004
 80051d4:	24000000 	.word	0x24000000

080051d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051dc:	f7ff ffcc 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4904      	ldr	r1, [pc, #16]	; (8005200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	58024400 	.word	0x58024400
 8005200:	080243b4 	.word	0x080243b4

08005204 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	223f      	movs	r2, #63	; 0x3f
 8005212:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005214:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <HAL_RCC_GetClockConfig+0x7c>)
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f003 0207 	and.w	r2, r3, #7
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005220:	4b17      	ldr	r3, [pc, #92]	; (8005280 <HAL_RCC_GetClockConfig+0x7c>)
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800522c:	4b14      	ldr	r3, [pc, #80]	; (8005280 <HAL_RCC_GetClockConfig+0x7c>)
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	f003 020f 	and.w	r2, r3, #15
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005238:	4b11      	ldr	r3, [pc, #68]	; (8005280 <HAL_RCC_GetClockConfig+0x7c>)
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005244:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <HAL_RCC_GetClockConfig+0x7c>)
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCC_GetClockConfig+0x7c>)
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <HAL_RCC_GetClockConfig+0x7c>)
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005268:	4b06      	ldr	r3, [pc, #24]	; (8005284 <HAL_RCC_GetClockConfig+0x80>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 020f 	and.w	r2, r3, #15
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	58024400 	.word	0x58024400
 8005284:	52002000 	.word	0x52002000

08005288 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800528c:	b0cc      	sub	sp, #304	; 0x130
 800528e:	af00      	add	r7, sp, #0
 8005290:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005294:	2300      	movs	r3, #0
 8005296:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800529a:	2300      	movs	r3, #0
 800529c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80052ac:	2500      	movs	r5, #0
 80052ae:	ea54 0305 	orrs.w	r3, r4, r5
 80052b2:	d049      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80052b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052be:	d02f      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80052c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052c4:	d828      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80052c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052ca:	d01a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052d0:	d822      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80052d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052da:	d007      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052dc:	e01c      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052de:	4bb8      	ldr	r3, [pc, #736]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	4ab7      	ldr	r2, [pc, #732]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052ea:	e01a      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052f0:	3308      	adds	r3, #8
 80052f2:	2102      	movs	r1, #2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f002 fba1 	bl	8007a3c <RCCEx_PLL2_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005300:	e00f      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005302:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005306:	3328      	adds	r3, #40	; 0x28
 8005308:	2102      	movs	r1, #2
 800530a:	4618      	mov	r0, r3
 800530c:	f002 fc48 	bl	8007ba0 <RCCEx_PLL3_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005316:	e004      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800531e:	e000      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005322:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800532a:	4ba5      	ldr	r3, [pc, #660]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005332:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005338:	4aa1      	ldr	r2, [pc, #644]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800533a:	430b      	orrs	r3, r1
 800533c:	6513      	str	r3, [r2, #80]	; 0x50
 800533e:	e003      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005344:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005348:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005354:	f04f 0900 	mov.w	r9, #0
 8005358:	ea58 0309 	orrs.w	r3, r8, r9
 800535c:	d047      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800535e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005364:	2b04      	cmp	r3, #4
 8005366:	d82a      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005368:	a201      	add	r2, pc, #4	; (adr r2, 8005370 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800536a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536e:	bf00      	nop
 8005370:	08005385 	.word	0x08005385
 8005374:	08005393 	.word	0x08005393
 8005378:	080053a9 	.word	0x080053a9
 800537c:	080053c7 	.word	0x080053c7
 8005380:	080053c7 	.word	0x080053c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005384:	4b8e      	ldr	r3, [pc, #568]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	4a8d      	ldr	r2, [pc, #564]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800538a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800538e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005390:	e01a      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005392:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005396:	3308      	adds	r3, #8
 8005398:	2100      	movs	r1, #0
 800539a:	4618      	mov	r0, r3
 800539c:	f002 fb4e 	bl	8007a3c <RCCEx_PLL2_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053a6:	e00f      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053ac:	3328      	adds	r3, #40	; 0x28
 80053ae:	2100      	movs	r1, #0
 80053b0:	4618      	mov	r0, r3
 80053b2:	f002 fbf5 	bl	8007ba0 <RCCEx_PLL3_Config>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053bc:	e004      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80053c4:	e000      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80053c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053d0:	4b7b      	ldr	r3, [pc, #492]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	f023 0107 	bic.w	r1, r3, #7
 80053d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053de:	4a78      	ldr	r2, [pc, #480]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6513      	str	r3, [r2, #80]	; 0x50
 80053e4:	e003      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053ea:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80053ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80053fa:	f04f 0b00 	mov.w	fp, #0
 80053fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8005402:	d04c      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005404:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540e:	d030      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005414:	d829      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005416:	2bc0      	cmp	r3, #192	; 0xc0
 8005418:	d02d      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800541a:	2bc0      	cmp	r3, #192	; 0xc0
 800541c:	d825      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800541e:	2b80      	cmp	r3, #128	; 0x80
 8005420:	d018      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d821      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d007      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800542e:	e01c      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005430:	4b63      	ldr	r3, [pc, #396]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	4a62      	ldr	r2, [pc, #392]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800543a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800543c:	e01c      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800543e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005442:	3308      	adds	r3, #8
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f002 faf8 	bl	8007a3c <RCCEx_PLL2_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005452:	e011      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005454:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005458:	3328      	adds	r3, #40	; 0x28
 800545a:	2100      	movs	r1, #0
 800545c:	4618      	mov	r0, r3
 800545e:	f002 fb9f 	bl	8007ba0 <RCCEx_PLL3_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005468:	e006      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005470:	e002      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005472:	bf00      	nop
 8005474:	e000      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005478:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10a      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005480:	4b4f      	ldr	r3, [pc, #316]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005484:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005488:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800548c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548e:	4a4c      	ldr	r2, [pc, #304]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005490:	430b      	orrs	r3, r1
 8005492:	6513      	str	r3, [r2, #80]	; 0x50
 8005494:	e003      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005496:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800549a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800549e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80054aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80054ae:	2300      	movs	r3, #0
 80054b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054b4:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80054b8:	460b      	mov	r3, r1
 80054ba:	4313      	orrs	r3, r2
 80054bc:	d053      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80054be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054ca:	d035      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80054cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054d0:	d82e      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054d6:	d031      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80054d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054dc:	d828      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e2:	d01a      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80054e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e8:	d822      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80054ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054f2:	d007      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80054f4:	e01c      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f6:	4b32      	ldr	r3, [pc, #200]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	4a31      	ldr	r2, [pc, #196]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005500:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005502:	e01c      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005504:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005508:	3308      	adds	r3, #8
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f002 fa95 	bl	8007a3c <RCCEx_PLL2_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005518:	e011      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800551a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800551e:	3328      	adds	r3, #40	; 0x28
 8005520:	2100      	movs	r1, #0
 8005522:	4618      	mov	r0, r3
 8005524:	f002 fb3c 	bl	8007ba0 <RCCEx_PLL3_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800552e:	e006      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005536:	e002      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005538:	bf00      	nop
 800553a:	e000      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800553c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005546:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800554e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005552:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005556:	4a1a      	ldr	r2, [pc, #104]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005558:	430b      	orrs	r3, r1
 800555a:	6593      	str	r3, [r2, #88]	; 0x58
 800555c:	e003      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005562:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005566:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005572:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005576:	2300      	movs	r3, #0
 8005578:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800557c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005580:	460b      	mov	r3, r1
 8005582:	4313      	orrs	r3, r2
 8005584:	d056      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005586:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800558a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800558e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005592:	d038      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005594:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005598:	d831      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800559a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800559e:	d034      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80055a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055a4:	d82b      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055aa:	d01d      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80055ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055b0:	d825      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d006      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80055b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055ba:	d00a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80055bc:	e01f      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055be:	bf00      	nop
 80055c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c4:	4ba2      	ldr	r3, [pc, #648]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	4aa1      	ldr	r2, [pc, #644]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055d0:	e01c      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055d6:	3308      	adds	r3, #8
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f002 fa2e 	bl	8007a3c <RCCEx_PLL2_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80055e6:	e011      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055ec:	3328      	adds	r3, #40	; 0x28
 80055ee:	2100      	movs	r1, #0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f002 fad5 	bl	8007ba0 <RCCEx_PLL3_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005604:	e002      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800560a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10b      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005614:	4b8e      	ldr	r3, [pc, #568]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800561c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005624:	4a8a      	ldr	r2, [pc, #552]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005626:	430b      	orrs	r3, r1
 8005628:	6593      	str	r3, [r2, #88]	; 0x58
 800562a:	e003      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005630:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005634:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005640:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800564a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d03a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005654:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565a:	2b30      	cmp	r3, #48	; 0x30
 800565c:	d01f      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800565e:	2b30      	cmp	r3, #48	; 0x30
 8005660:	d819      	bhi.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005662:	2b20      	cmp	r3, #32
 8005664:	d00c      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005666:	2b20      	cmp	r3, #32
 8005668:	d815      	bhi.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d019      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800566e:	2b10      	cmp	r3, #16
 8005670:	d111      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005672:	4b77      	ldr	r3, [pc, #476]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	4a76      	ldr	r2, [pc, #472]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800567c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800567e:	e011      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005680:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005684:	3308      	adds	r3, #8
 8005686:	2102      	movs	r1, #2
 8005688:	4618      	mov	r0, r3
 800568a:	f002 f9d7 	bl	8007a3c <RCCEx_PLL2_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005694:	e006      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800569c:	e002      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800569e:	bf00      	nop
 80056a0:	e000      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80056a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056ac:	4b68      	ldr	r3, [pc, #416]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80056b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ba:	4a65      	ldr	r2, [pc, #404]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056bc:	430b      	orrs	r3, r1
 80056be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056c0:	e003      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056c6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80056ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80056d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056da:	2300      	movs	r3, #0
 80056dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056e0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80056e4:	460b      	mov	r3, r1
 80056e6:	4313      	orrs	r3, r2
 80056e8:	d051      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80056ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f4:	d035      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80056f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fa:	d82e      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005700:	d031      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005702:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005706:	d828      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570c:	d01a      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800570e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005712:	d822      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571c:	d007      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800571e:	e01c      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005720:	4b4b      	ldr	r3, [pc, #300]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	4a4a      	ldr	r2, [pc, #296]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800572a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800572c:	e01c      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800572e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005732:	3308      	adds	r3, #8
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f002 f980 	bl	8007a3c <RCCEx_PLL2_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005742:	e011      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005744:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005748:	3328      	adds	r3, #40	; 0x28
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f002 fa27 	bl	8007ba0 <RCCEx_PLL3_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005758:	e006      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005760:	e002      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005768:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005770:	4b37      	ldr	r3, [pc, #220]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005774:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005778:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800577c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577e:	4a34      	ldr	r2, [pc, #208]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005780:	430b      	orrs	r3, r1
 8005782:	6513      	str	r3, [r2, #80]	; 0x50
 8005784:	e003      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005786:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800578a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800578e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800579a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800579e:	2300      	movs	r3, #0
 80057a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4313      	orrs	r3, r2
 80057ac:	d056      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80057ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057b8:	d033      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80057ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057be:	d82c      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057c4:	d02f      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80057c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057ca:	d826      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057d0:	d02b      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80057d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057d6:	d820      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057dc:	d012      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80057de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057e2:	d81a      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d022      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ec:	d115      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057f2:	3308      	adds	r3, #8
 80057f4:	2101      	movs	r1, #1
 80057f6:	4618      	mov	r0, r3
 80057f8:	f002 f920 	bl	8007a3c <RCCEx_PLL2_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005802:	e015      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005804:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005808:	3328      	adds	r3, #40	; 0x28
 800580a:	2101      	movs	r1, #1
 800580c:	4618      	mov	r0, r3
 800580e:	f002 f9c7 	bl	8007ba0 <RCCEx_PLL3_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005818:	e00a      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005820:	e006      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005822:	bf00      	nop
 8005824:	e004      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005826:	bf00      	nop
 8005828:	e002      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800582e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005830:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10d      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005840:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005846:	4a02      	ldr	r2, [pc, #8]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005848:	430b      	orrs	r3, r1
 800584a:	6513      	str	r3, [r2, #80]	; 0x50
 800584c:	e006      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800584e:	bf00      	nop
 8005850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005854:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005858:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800585c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005868:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800586c:	2300      	movs	r3, #0
 800586e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005872:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005876:	460b      	mov	r3, r1
 8005878:	4313      	orrs	r3, r2
 800587a:	d055      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800587c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005880:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005888:	d033      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800588a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800588e:	d82c      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005894:	d02f      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589a:	d826      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800589c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058a0:	d02b      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x672>
 80058a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058a6:	d820      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80058a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ac:	d012      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80058ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058b2:	d81a      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d022      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x676>
 80058b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058bc:	d115      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058c2:	3308      	adds	r3, #8
 80058c4:	2101      	movs	r1, #1
 80058c6:	4618      	mov	r0, r3
 80058c8:	f002 f8b8 	bl	8007a3c <RCCEx_PLL2_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058d2:	e015      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058d8:	3328      	adds	r3, #40	; 0x28
 80058da:	2101      	movs	r1, #1
 80058dc:	4618      	mov	r0, r3
 80058de:	f002 f95f 	bl	8007ba0 <RCCEx_PLL3_Config>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058e8:	e00a      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80058f0:	e006      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058f2:	bf00      	nop
 80058f4:	e004      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058f6:	bf00      	nop
 80058f8:	e002      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058fa:	bf00      	nop
 80058fc:	e000      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005900:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10b      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005908:	4bb6      	ldr	r3, [pc, #728]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005910:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005914:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005918:	4ab2      	ldr	r2, [pc, #712]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800591a:	430b      	orrs	r3, r1
 800591c:	6593      	str	r3, [r2, #88]	; 0x58
 800591e:	e003      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005920:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005924:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005928:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005938:	2300      	movs	r3, #0
 800593a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800593e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005942:	460b      	mov	r3, r1
 8005944:	4313      	orrs	r3, r2
 8005946:	d02a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005948:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800594c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594e:	2b00      	cmp	r3, #0
 8005950:	d011      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005956:	d10a      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005958:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800595c:	3308      	adds	r3, #8
 800595e:	2101      	movs	r1, #1
 8005960:	4618      	mov	r0, r3
 8005962:	f002 f86b 	bl	8007a3c <RCCEx_PLL2_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800596c:	e004      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005974:	e000      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005978:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005980:	4b98      	ldr	r3, [pc, #608]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005984:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005988:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800598c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598e:	4a95      	ldr	r2, [pc, #596]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005990:	430b      	orrs	r3, r1
 8005992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005994:	e003      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005996:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800599a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800599e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80059aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059ae:	2300      	movs	r3, #0
 80059b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059b4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059b8:	460b      	mov	r3, r1
 80059ba:	4313      	orrs	r3, r2
 80059bc:	d037      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c8:	d00e      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80059ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ce:	d816      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x776>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d018      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80059d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059d8:	d111      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059da:	4b82      	ldr	r3, [pc, #520]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	4a81      	ldr	r2, [pc, #516]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059e6:	e00f      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059ec:	3308      	adds	r3, #8
 80059ee:	2101      	movs	r1, #1
 80059f0:	4618      	mov	r0, r3
 80059f2:	f002 f823 	bl	8007a3c <RCCEx_PLL2_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059fc:	e004      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005a04:	e000      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a08:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a10:	4b74      	ldr	r3, [pc, #464]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a14:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a1e:	4a71      	ldr	r2, [pc, #452]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6513      	str	r3, [r2, #80]	; 0x50
 8005a24:	e003      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a26:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a2a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005a3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a44:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	d03a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d81d      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005a58:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005a9d 	.word	0x08005a9d
 8005a64:	08005a71 	.word	0x08005a71
 8005a68:	08005a7f 	.word	0x08005a7f
 8005a6c:	08005a9d 	.word	0x08005a9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4b5c      	ldr	r3, [pc, #368]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	4a5b      	ldr	r2, [pc, #364]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a7c:	e00f      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a82:	3308      	adds	r3, #8
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 ffd8 	bl	8007a3c <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a92:	e004      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005aa6:	4b4f      	ldr	r3, [pc, #316]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aaa:	f023 0103 	bic.w	r1, r3, #3
 8005aae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab4:	4a4b      	ldr	r2, [pc, #300]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005aba:	e003      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ac0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ac4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ada:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f000 80a0 	beq.w	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae6:	4b40      	ldr	r3, [pc, #256]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a3f      	ldr	r2, [pc, #252]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005af2:	f7fb feb9 	bl	8001868 <HAL_GetTick>
 8005af6:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005afa:	e00b      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afc:	f7fb feb4 	bl	8001868 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b64      	cmp	r3, #100	; 0x64
 8005b0a:	d903      	bls.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005b12:	e005      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b14:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ed      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005b20:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d17a      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b28:	4b2e      	ldr	r3, [pc, #184]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b34:	4053      	eors	r3, r2
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d015      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b3e:	4b29      	ldr	r3, [pc, #164]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b4a:	4b26      	ldr	r3, [pc, #152]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	4a25      	ldr	r2, [pc, #148]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b56:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5a:	4a22      	ldr	r2, [pc, #136]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b62:	4a20      	ldr	r2, [pc, #128]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b6e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b76:	d118      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7fb fe76 	bl	8001868 <HAL_GetTick>
 8005b7c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b80:	e00d      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b82:	f7fb fe71 	bl	8001868 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b8c:	1ad2      	subs	r2, r2, r3
 8005b8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d903      	bls.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8005b9c:	e005      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b9e:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0eb      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005baa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d130      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bb6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bc2:	d115      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005bc4:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005bd4:	091a      	lsrs	r2, r3, #4
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	4a02      	ldr	r2, [pc, #8]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6113      	str	r3, [r2, #16]
 8005be0:	e00c      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005be2:	bf00      	nop
 8005be4:	58024400 	.word	0x58024400
 8005be8:	58024800 	.word	0x58024800
 8005bec:	00ffffcf 	.word	0x00ffffcf
 8005bf0:	4bd4      	ldr	r3, [pc, #848]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	4ad3      	ldr	r2, [pc, #844]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bf6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005bfa:	6113      	str	r3, [r2, #16]
 8005bfc:	4bd1      	ldr	r3, [pc, #836]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bfe:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0c:	4acd      	ldr	r2, [pc, #820]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	6713      	str	r3, [r2, #112]	; 0x70
 8005c12:	e008      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c14:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c18:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8005c1c:	e003      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c22:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f002 0301 	and.w	r3, r2, #1
 8005c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c36:	2300      	movs	r3, #0
 8005c38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f000 808b 	beq.w	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c50:	2b28      	cmp	r3, #40	; 0x28
 8005c52:	d86b      	bhi.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005d35 	.word	0x08005d35
 8005c60:	08005d2d 	.word	0x08005d2d
 8005c64:	08005d2d 	.word	0x08005d2d
 8005c68:	08005d2d 	.word	0x08005d2d
 8005c6c:	08005d2d 	.word	0x08005d2d
 8005c70:	08005d2d 	.word	0x08005d2d
 8005c74:	08005d2d 	.word	0x08005d2d
 8005c78:	08005d2d 	.word	0x08005d2d
 8005c7c:	08005d01 	.word	0x08005d01
 8005c80:	08005d2d 	.word	0x08005d2d
 8005c84:	08005d2d 	.word	0x08005d2d
 8005c88:	08005d2d 	.word	0x08005d2d
 8005c8c:	08005d2d 	.word	0x08005d2d
 8005c90:	08005d2d 	.word	0x08005d2d
 8005c94:	08005d2d 	.word	0x08005d2d
 8005c98:	08005d2d 	.word	0x08005d2d
 8005c9c:	08005d17 	.word	0x08005d17
 8005ca0:	08005d2d 	.word	0x08005d2d
 8005ca4:	08005d2d 	.word	0x08005d2d
 8005ca8:	08005d2d 	.word	0x08005d2d
 8005cac:	08005d2d 	.word	0x08005d2d
 8005cb0:	08005d2d 	.word	0x08005d2d
 8005cb4:	08005d2d 	.word	0x08005d2d
 8005cb8:	08005d2d 	.word	0x08005d2d
 8005cbc:	08005d35 	.word	0x08005d35
 8005cc0:	08005d2d 	.word	0x08005d2d
 8005cc4:	08005d2d 	.word	0x08005d2d
 8005cc8:	08005d2d 	.word	0x08005d2d
 8005ccc:	08005d2d 	.word	0x08005d2d
 8005cd0:	08005d2d 	.word	0x08005d2d
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d2d 	.word	0x08005d2d
 8005cdc:	08005d35 	.word	0x08005d35
 8005ce0:	08005d2d 	.word	0x08005d2d
 8005ce4:	08005d2d 	.word	0x08005d2d
 8005ce8:	08005d2d 	.word	0x08005d2d
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005d2d 	.word	0x08005d2d
 8005cf4:	08005d2d 	.word	0x08005d2d
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005d35 	.word	0x08005d35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d04:	3308      	adds	r3, #8
 8005d06:	2101      	movs	r1, #1
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fe97 	bl	8007a3c <RCCEx_PLL2_Config>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d14:	e00f      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d1a:	3328      	adds	r3, #40	; 0x28
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 ff3e 	bl	8007ba0 <RCCEx_PLL3_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d2a:	e004      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005d32:	e000      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d36:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d3e:	4b81      	ldr	r3, [pc, #516]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4e:	4a7d      	ldr	r2, [pc, #500]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6553      	str	r3, [r2, #84]	; 0x54
 8005d54:	e003      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d56:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d5a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	f002 0302 	and.w	r3, r2, #2
 8005d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d74:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	d042      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	d825      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005d88:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005ddd 	.word	0x08005ddd
 8005d94:	08005da9 	.word	0x08005da9
 8005d98:	08005dbf 	.word	0x08005dbf
 8005d9c:	08005ddd 	.word	0x08005ddd
 8005da0:	08005ddd 	.word	0x08005ddd
 8005da4:	08005ddd 	.word	0x08005ddd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dac:	3308      	adds	r3, #8
 8005dae:	2101      	movs	r1, #1
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 fe43 	bl	8007a3c <RCCEx_PLL2_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dbc:	e00f      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dc2:	3328      	adds	r3, #40	; 0x28
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 feea 	bl	8007ba0 <RCCEx_PLL3_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dd2:	e004      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005dda:	e000      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dde:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005de6:	4b57      	ldr	r3, [pc, #348]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dea:	f023 0107 	bic.w	r1, r3, #7
 8005dee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df4:	4a53      	ldr	r2, [pc, #332]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005df6:	430b      	orrs	r3, r1
 8005df8:	6553      	str	r3, [r2, #84]	; 0x54
 8005dfa:	e003      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e00:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0c:	f002 0304 	and.w	r3, r2, #4
 8005e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e14:	2300      	movs	r3, #0
 8005e16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e1a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4313      	orrs	r3, r2
 8005e22:	d044      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e2c:	2b05      	cmp	r3, #5
 8005e2e:	d825      	bhi.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005e30:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005e85 	.word	0x08005e85
 8005e3c:	08005e51 	.word	0x08005e51
 8005e40:	08005e67 	.word	0x08005e67
 8005e44:	08005e85 	.word	0x08005e85
 8005e48:	08005e85 	.word	0x08005e85
 8005e4c:	08005e85 	.word	0x08005e85
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e54:	3308      	adds	r3, #8
 8005e56:	2101      	movs	r1, #1
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 fdef 	bl	8007a3c <RCCEx_PLL2_Config>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e64:	e00f      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e6a:	3328      	adds	r3, #40	; 0x28
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 fe96 	bl	8007ba0 <RCCEx_PLL3_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e7a:	e004      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005e82:	e000      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e86:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10b      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e8e:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e92:	f023 0107 	bic.w	r1, r3, #7
 8005e96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e9e:	4a29      	ldr	r2, [pc, #164]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ea4:	e003      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005eaa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f002 0320 	and.w	r3, r2, #32
 8005eba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	d057      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eda:	d035      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ee0:	d82c      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee6:	d031      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eec:	d826      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ef2:	d02d      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005ef4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ef8:	d820      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005efe:	d012      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f04:	d81a      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d024      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f0e:	d115      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f14:	3308      	adds	r3, #8
 8005f16:	2100      	movs	r1, #0
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 fd8f 	bl	8007a3c <RCCEx_PLL2_Config>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f24:	e017      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f2a:	3328      	adds	r3, #40	; 0x28
 8005f2c:	2102      	movs	r1, #2
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 fe36 	bl	8007ba0 <RCCEx_PLL3_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f3a:	e00c      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005f42:	e008      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005f44:	58024400 	.word	0x58024400
        break;
 8005f48:	bf00      	nop
 8005f4a:	e004      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f4c:	bf00      	nop
 8005f4e:	e002      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f56:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10b      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f5e:	4bc2      	ldr	r3, [pc, #776]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f6e:	4abe      	ldr	r2, [pc, #760]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6553      	str	r3, [r2, #84]	; 0x54
 8005f74:	e003      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f7a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	d055      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fa6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005faa:	d033      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005fac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fb0:	d82c      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb6:	d02f      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fbc:	d826      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005fbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fc2:	d02b      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005fc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fc8:	d820      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fce:	d012      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd4:	d81a      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d022      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fde:	d115      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 fd27 	bl	8007a3c <RCCEx_PLL2_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ff4:	e015      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ffa:	3328      	adds	r3, #40	; 0x28
 8005ffc:	2102      	movs	r1, #2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 fdce 	bl	8007ba0 <RCCEx_PLL3_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800600a:	e00a      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006012:	e006      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006014:	bf00      	nop
 8006016:	e004      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006018:	bf00      	nop
 800601a:	e002      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800601c:	bf00      	nop
 800601e:	e000      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006022:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800602a:	4b8f      	ldr	r3, [pc, #572]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006032:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006036:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800603a:	4a8b      	ldr	r2, [pc, #556]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800603c:	430b      	orrs	r3, r1
 800603e:	6593      	str	r3, [r2, #88]	; 0x58
 8006040:	e003      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006042:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006046:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800604a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006056:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800605a:	2300      	movs	r3, #0
 800605c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006060:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006064:	460b      	mov	r3, r1
 8006066:	4313      	orrs	r3, r2
 8006068:	d055      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800606a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800606e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006072:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006076:	d033      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006078:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800607c:	d82c      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800607e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006082:	d02f      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006088:	d826      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800608a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800608e:	d02b      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006090:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006094:	d820      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800609a:	d012      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800609c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060a0:	d81a      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d022      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80060a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060aa:	d115      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060b0:	3308      	adds	r3, #8
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 fcc1 	bl	8007a3c <RCCEx_PLL2_Config>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060c0:	e015      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060c6:	3328      	adds	r3, #40	; 0x28
 80060c8:	2102      	movs	r1, #2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 fd68 	bl	8007ba0 <RCCEx_PLL3_Config>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060d6:	e00a      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80060de:	e006      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060e0:	bf00      	nop
 80060e2:	e004      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060e4:	bf00      	nop
 80060e6:	e002      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060e8:	bf00      	nop
 80060ea:	e000      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060f6:	4b5c      	ldr	r3, [pc, #368]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fa:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80060fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006106:	4a58      	ldr	r2, [pc, #352]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006108:	430b      	orrs	r3, r1
 800610a:	6593      	str	r3, [r2, #88]	; 0x58
 800610c:	e003      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006112:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006116:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f002 0308 	and.w	r3, r2, #8
 8006122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006126:	2300      	movs	r3, #0
 8006128:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800612c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006130:	460b      	mov	r3, r1
 8006132:	4313      	orrs	r3, r2
 8006134:	d01e      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006136:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006142:	d10c      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006144:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006148:	3328      	adds	r3, #40	; 0x28
 800614a:	2102      	movs	r1, #2
 800614c:	4618      	mov	r0, r3
 800614e:	f001 fd27 	bl	8007ba0 <RCCEx_PLL3_Config>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800615e:	4b42      	ldr	r3, [pc, #264]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006166:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616e:	4a3e      	ldr	r2, [pc, #248]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006170:	430b      	orrs	r3, r1
 8006172:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006174:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f002 0310 	and.w	r3, r2, #16
 8006180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006184:	2300      	movs	r3, #0
 8006186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800618a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800618e:	460b      	mov	r3, r1
 8006190:	4313      	orrs	r3, r2
 8006192:	d01e      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006194:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006198:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800619c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a0:	d10c      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061a6:	3328      	adds	r3, #40	; 0x28
 80061a8:	2102      	movs	r1, #2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 fcf8 	bl	8007ba0 <RCCEx_PLL3_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061bc:	4b2a      	ldr	r3, [pc, #168]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061cc:	4a26      	ldr	r2, [pc, #152]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061ce:	430b      	orrs	r3, r1
 80061d0:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80061de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061e2:	2300      	movs	r3, #0
 80061e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061e8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80061ec:	460b      	mov	r3, r1
 80061ee:	4313      	orrs	r3, r2
 80061f0:	d040      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061fe:	d022      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006204:	d81b      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800620a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620e:	d00b      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006210:	e015      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006212:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006216:	3308      	adds	r3, #8
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f001 fc0e 	bl	8007a3c <RCCEx_PLL2_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006226:	e00f      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006228:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800622c:	3328      	adds	r3, #40	; 0x28
 800622e:	2102      	movs	r1, #2
 8006230:	4618      	mov	r0, r3
 8006232:	f001 fcb5 	bl	8007ba0 <RCCEx_PLL3_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800623c:	e004      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006244:	e000      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006248:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10d      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006254:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006258:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800625c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006260:	4a01      	ldr	r2, [pc, #4]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006262:	430b      	orrs	r3, r1
 8006264:	6593      	str	r3, [r2, #88]	; 0x58
 8006266:	e005      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006270:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006274:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006280:	67bb      	str	r3, [r7, #120]	; 0x78
 8006282:	2300      	movs	r3, #0
 8006284:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006286:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800628a:	460b      	mov	r3, r1
 800628c:	4313      	orrs	r3, r2
 800628e:	d03b      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006290:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006298:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800629c:	d01f      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800629e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062a2:	d818      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80062a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a8:	d003      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80062aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062ae:	d007      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80062b0:	e011      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b2:	4b64      	ldr	r3, [pc, #400]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	4a63      	ldr	r2, [pc, #396]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062be:	e00f      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062c4:	3328      	adds	r3, #40	; 0x28
 80062c6:	2101      	movs	r1, #1
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 fc69 	bl	8007ba0 <RCCEx_PLL3_Config>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80062d4:	e004      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80062dc:	e000      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80062de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10b      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062e8:	4b56      	ldr	r3, [pc, #344]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ec:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80062f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062f8:	4a52      	ldr	r2, [pc, #328]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062fa:	430b      	orrs	r3, r1
 80062fc:	6553      	str	r3, [r2, #84]	; 0x54
 80062fe:	e003      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006300:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006304:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006308:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006314:	673b      	str	r3, [r7, #112]	; 0x70
 8006316:	2300      	movs	r3, #0
 8006318:	677b      	str	r3, [r7, #116]	; 0x74
 800631a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800631e:	460b      	mov	r3, r1
 8006320:	4313      	orrs	r3, r2
 8006322:	d031      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006324:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800632e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006332:	d007      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006334:	e011      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006336:	4b43      	ldr	r3, [pc, #268]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633a:	4a42      	ldr	r2, [pc, #264]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800633c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006340:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006342:	e00e      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006344:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006348:	3308      	adds	r3, #8
 800634a:	2102      	movs	r1, #2
 800634c:	4618      	mov	r0, r3
 800634e:	f001 fb75 	bl	8007a3c <RCCEx_PLL2_Config>
 8006352:	4603      	mov	r3, r0
 8006354:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006358:	e003      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006362:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800636a:	4b36      	ldr	r3, [pc, #216]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800636c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006372:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	4a32      	ldr	r2, [pc, #200]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800637a:	430b      	orrs	r3, r1
 800637c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800637e:	e003      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006380:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006384:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006388:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006394:	66bb      	str	r3, [r7, #104]	; 0x68
 8006396:	2300      	movs	r3, #0
 8006398:	66fb      	str	r3, [r7, #108]	; 0x6c
 800639a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800639e:	460b      	mov	r3, r1
 80063a0:	4313      	orrs	r3, r2
 80063a2:	d00c      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063a8:	3328      	adds	r3, #40	; 0x28
 80063aa:	2102      	movs	r1, #2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 fbf7 	bl	8007ba0 <RCCEx_PLL3_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80063ca:	663b      	str	r3, [r7, #96]	; 0x60
 80063cc:	2300      	movs	r3, #0
 80063ce:	667b      	str	r3, [r7, #100]	; 0x64
 80063d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80063d4:	460b      	mov	r3, r1
 80063d6:	4313      	orrs	r3, r2
 80063d8:	d03a      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e6:	d018      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80063e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ec:	d811      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80063ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f2:	d014      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f8:	d80b      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d011      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006402:	d106      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006404:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4a0e      	ldr	r2, [pc, #56]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800640a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800640e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006410:	e008      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006418:	e004      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800641a:	bf00      	nop
 800641c:	e002      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800641e:	bf00      	nop
 8006420:	e000      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006424:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10d      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800642e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006430:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006434:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643c:	4a01      	ldr	r2, [pc, #4]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800643e:	430b      	orrs	r3, r1
 8006440:	6553      	str	r3, [r2, #84]	; 0x54
 8006442:	e005      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800644c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006450:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800645c:	65bb      	str	r3, [r7, #88]	; 0x58
 800645e:	2300      	movs	r3, #0
 8006460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006462:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006466:	460b      	mov	r3, r1
 8006468:	4313      	orrs	r3, r2
 800646a:	d009      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800646c:	4baa      	ldr	r3, [pc, #680]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800646e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006470:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006474:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800647a:	4aa7      	ldr	r2, [pc, #668]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800647c:	430b      	orrs	r3, r1
 800647e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006480:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800648c:	653b      	str	r3, [r7, #80]	; 0x50
 800648e:	2300      	movs	r3, #0
 8006490:	657b      	str	r3, [r7, #84]	; 0x54
 8006492:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006496:	460b      	mov	r3, r1
 8006498:	4313      	orrs	r3, r2
 800649a:	d00a      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800649c:	4b9e      	ldr	r3, [pc, #632]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80064a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80064ac:	4a9a      	ldr	r2, [pc, #616]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064ae:	430b      	orrs	r3, r1
 80064b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80064be:	64bb      	str	r3, [r7, #72]	; 0x48
 80064c0:	2300      	movs	r3, #0
 80064c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80064c8:	460b      	mov	r3, r1
 80064ca:	4313      	orrs	r3, r2
 80064cc:	d009      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064ce:	4b92      	ldr	r3, [pc, #584]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80064d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064dc:	4a8e      	ldr	r2, [pc, #568]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064de:	430b      	orrs	r3, r1
 80064e0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80064ee:	643b      	str	r3, [r7, #64]	; 0x40
 80064f0:	2300      	movs	r3, #0
 80064f2:	647b      	str	r3, [r7, #68]	; 0x44
 80064f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80064f8:	460b      	mov	r3, r1
 80064fa:	4313      	orrs	r3, r2
 80064fc:	d00e      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064fe:	4b86      	ldr	r3, [pc, #536]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	4a85      	ldr	r2, [pc, #532]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006504:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006508:	6113      	str	r3, [r2, #16]
 800650a:	4b83      	ldr	r3, [pc, #524]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800650c:	6919      	ldr	r1, [r3, #16]
 800650e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006512:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006516:	4a80      	ldr	r2, [pc, #512]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006518:	430b      	orrs	r3, r1
 800651a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800651c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006528:	63bb      	str	r3, [r7, #56]	; 0x38
 800652a:	2300      	movs	r3, #0
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006532:	460b      	mov	r3, r1
 8006534:	4313      	orrs	r3, r2
 8006536:	d009      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006538:	4b77      	ldr	r3, [pc, #476]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800653a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006540:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006546:	4a74      	ldr	r2, [pc, #464]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006548:	430b      	orrs	r3, r1
 800654a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800654c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006558:	633b      	str	r3, [r7, #48]	; 0x30
 800655a:	2300      	movs	r3, #0
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
 800655e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006562:	460b      	mov	r3, r1
 8006564:	4313      	orrs	r3, r2
 8006566:	d00a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006568:	4b6b      	ldr	r3, [pc, #428]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800656a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006570:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006578:	4a67      	ldr	r2, [pc, #412]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800657a:	430b      	orrs	r3, r1
 800657c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800657e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	2100      	movs	r1, #0
 8006588:	62b9      	str	r1, [r7, #40]	; 0x28
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006590:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006594:	460b      	mov	r3, r1
 8006596:	4313      	orrs	r3, r2
 8006598:	d011      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800659a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800659e:	3308      	adds	r3, #8
 80065a0:	2100      	movs	r1, #0
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 fa4a 	bl	8007a3c <RCCEx_PLL2_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80065ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065ba:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	2100      	movs	r1, #0
 80065c8:	6239      	str	r1, [r7, #32]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
 80065d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d011      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065de:	3308      	adds	r3, #8
 80065e0:	2101      	movs	r1, #1
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 fa2a 	bl	8007a3c <RCCEx_PLL2_Config>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80065ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065fa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80065fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	2100      	movs	r1, #0
 8006608:	61b9      	str	r1, [r7, #24]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006614:	460b      	mov	r3, r1
 8006616:	4313      	orrs	r3, r2
 8006618:	d011      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800661a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800661e:	3308      	adds	r3, #8
 8006620:	2102      	movs	r1, #2
 8006622:	4618      	mov	r0, r3
 8006624:	f001 fa0a 	bl	8007a3c <RCCEx_PLL2_Config>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800662e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006636:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800663a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800663e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	2100      	movs	r1, #0
 8006648:	6139      	str	r1, [r7, #16]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006654:	460b      	mov	r3, r1
 8006656:	4313      	orrs	r3, r2
 8006658:	d011      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800665a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800665e:	3328      	adds	r3, #40	; 0x28
 8006660:	2100      	movs	r1, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f001 fa9c 	bl	8007ba0 <RCCEx_PLL3_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 800666e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800667a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800667e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	2100      	movs	r1, #0
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	f003 0310 	and.w	r3, r3, #16
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006694:	460b      	mov	r3, r1
 8006696:	4313      	orrs	r3, r2
 8006698:	d011      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800669a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800669e:	3328      	adds	r3, #40	; 0x28
 80066a0:	2101      	movs	r1, #1
 80066a2:	4618      	mov	r0, r3
 80066a4:	f001 fa7c 	bl	8007ba0 <RCCEx_PLL3_Config>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80066ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066ba:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	2100      	movs	r1, #0
 80066c8:	6039      	str	r1, [r7, #0]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	607b      	str	r3, [r7, #4]
 80066d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066d4:	460b      	mov	r3, r1
 80066d6:	4313      	orrs	r3, r2
 80066d8:	d011      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066de:	3328      	adds	r3, #40	; 0x28
 80066e0:	2102      	movs	r1, #2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f001 fa5c 	bl	8007ba0 <RCCEx_PLL3_Config>
 80066e8:	4603      	mov	r3, r0
 80066ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80066ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066fa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 80066fe:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	e000      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
}
 800670c:	4618      	mov	r0, r3
 800670e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006712:	46bd      	mov	sp, r7
 8006714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006718:	58024400 	.word	0x58024400

0800671c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b090      	sub	sp, #64	; 0x40
 8006720:	af00      	add	r7, sp, #0
 8006722:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800672a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800672e:	430b      	orrs	r3, r1
 8006730:	f040 8094 	bne.w	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006734:	4b9e      	ldr	r3, [pc, #632]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	2b04      	cmp	r3, #4
 8006742:	f200 8087 	bhi.w	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006746:	a201      	add	r2, pc, #4	; (adr r2, 800674c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674c:	08006761 	.word	0x08006761
 8006750:	08006789 	.word	0x08006789
 8006754:	080067b1 	.word	0x080067b1
 8006758:	0800684d 	.word	0x0800684d
 800675c:	080067d9 	.word	0x080067d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006760:	4b93      	ldr	r3, [pc, #588]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800676c:	d108      	bne.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800676e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006772:	4618      	mov	r0, r3
 8006774:	f001 f810 	bl	8007798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800677c:	f000 bd45 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006784:	f000 bd41 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006788:	4b89      	ldr	r3, [pc, #548]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006794:	d108      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006796:	f107 0318 	add.w	r3, r7, #24
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fd54 	bl	8007248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067a4:	f000 bd31 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067a8:	2300      	movs	r3, #0
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ac:	f000 bd2d 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067b0:	4b7f      	ldr	r3, [pc, #508]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067bc:	d108      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067be:	f107 030c 	add.w	r3, r7, #12
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fe94 	bl	80074f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067cc:	f000 bd1d 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d4:	f000 bd19 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067d8:	4b75      	ldr	r3, [pc, #468]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067e2:	4b73      	ldr	r3, [pc, #460]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d10c      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80067ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d109      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067f4:	4b6e      	ldr	r3, [pc, #440]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	08db      	lsrs	r3, r3, #3
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	4a6d      	ldr	r2, [pc, #436]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006800:	fa22 f303 	lsr.w	r3, r2, r3
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006806:	e01f      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006808:	4b69      	ldr	r3, [pc, #420]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006814:	d106      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800681c:	d102      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800681e:	4b66      	ldr	r3, [pc, #408]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006822:	e011      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006824:	4b62      	ldr	r3, [pc, #392]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006830:	d106      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006838:	d102      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800683a:	4b60      	ldr	r3, [pc, #384]	; (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800683c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800683e:	e003      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006840:	2300      	movs	r3, #0
 8006842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006844:	f000 bce1 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006848:	f000 bcdf 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800684c:	4b5c      	ldr	r3, [pc, #368]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006850:	f000 bcdb 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006858:	f000 bcd7 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800685c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006860:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006864:	430b      	orrs	r3, r1
 8006866:	f040 80ad 	bne.w	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800686a:	4b51      	ldr	r3, [pc, #324]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006872:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687a:	d056      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006882:	f200 8090 	bhi.w	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	2bc0      	cmp	r3, #192	; 0xc0
 800688a:	f000 8088 	beq.w	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	2bc0      	cmp	r3, #192	; 0xc0
 8006892:	f200 8088 	bhi.w	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	2b80      	cmp	r3, #128	; 0x80
 800689a:	d032      	beq.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	2b80      	cmp	r3, #128	; 0x80
 80068a0:	f200 8081 	bhi.w	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	2b40      	cmp	r3, #64	; 0x40
 80068ae:	d014      	beq.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80068b0:	e079      	b.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068b2:	4b3f      	ldr	r3, [pc, #252]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068be:	d108      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 ff67 	bl	8007798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ce:	f000 bc9c 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d6:	f000 bc98 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068da:	4b35      	ldr	r3, [pc, #212]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068e6:	d108      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e8:	f107 0318 	add.w	r3, r7, #24
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fcab 	bl	8007248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f6:	f000 bc88 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068fe:	f000 bc84 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006902:	4b2b      	ldr	r3, [pc, #172]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800690a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800690e:	d108      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006910:	f107 030c 	add.w	r3, r7, #12
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fdeb 	bl	80074f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800691e:	f000 bc74 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006926:	f000 bc70 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800692a:	4b21      	ldr	r3, [pc, #132]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800692c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006932:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006934:	4b1e      	ldr	r3, [pc, #120]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b04      	cmp	r3, #4
 800693e:	d10c      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006946:	4b1a      	ldr	r3, [pc, #104]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	08db      	lsrs	r3, r3, #3
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	4a18      	ldr	r2, [pc, #96]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006952:	fa22 f303 	lsr.w	r3, r2, r3
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006958:	e01f      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800695a:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006966:	d106      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800696e:	d102      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006970:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006974:	e011      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006976:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006982:	d106      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800698a:	d102      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800698c:	4b0b      	ldr	r3, [pc, #44]	; (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006990:	e003      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006996:	f000 bc38 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800699a:	f000 bc36 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800699e:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a2:	f000 bc32 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069aa:	f000 bc2e 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069ae:	bf00      	nop
 80069b0:	58024400 	.word	0x58024400
 80069b4:	03d09000 	.word	0x03d09000
 80069b8:	003d0900 	.word	0x003d0900
 80069bc:	017d7840 	.word	0x017d7840
 80069c0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80069c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80069cc:	430b      	orrs	r3, r1
 80069ce:	f040 809c 	bne.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80069d2:	4b9e      	ldr	r3, [pc, #632]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80069da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069e2:	d054      	beq.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069ea:	f200 808b 	bhi.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069f4:	f000 8083 	beq.w	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069fe:	f200 8081 	bhi.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a08:	d02f      	beq.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a10:	d878      	bhi.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d004      	beq.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a1e:	d012      	beq.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006a20:	e070      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a22:	4b8a      	ldr	r3, [pc, #552]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a2e:	d107      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 feaf 	bl	8007798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a3e:	e3e4      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a44:	e3e1      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a46:	4b81      	ldr	r3, [pc, #516]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a52:	d107      	bne.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a54:	f107 0318 	add.w	r3, r7, #24
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fbf5 	bl	8007248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a62:	e3d2      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a68:	e3cf      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a6a:	4b78      	ldr	r3, [pc, #480]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a76:	d107      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fd37 	bl	80074f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a86:	e3c0      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a8c:	e3bd      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a8e:	4b6f      	ldr	r3, [pc, #444]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a98:	4b6c      	ldr	r3, [pc, #432]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	d10c      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d109      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aaa:	4b68      	ldr	r3, [pc, #416]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	08db      	lsrs	r3, r3, #3
 8006ab0:	f003 0303 	and.w	r3, r3, #3
 8006ab4:	4a66      	ldr	r2, [pc, #408]	; (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006abc:	e01e      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006abe:	4b63      	ldr	r3, [pc, #396]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aca:	d106      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ad2:	d102      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ad4:	4b5f      	ldr	r3, [pc, #380]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad8:	e010      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ada:	4b5c      	ldr	r3, [pc, #368]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae6:	d106      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aee:	d102      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006af0:	4b59      	ldr	r3, [pc, #356]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af4:	e002      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006afa:	e386      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006afc:	e385      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006afe:	4b57      	ldr	r3, [pc, #348]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b02:	e382      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b08:	e37f      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006b12:	430b      	orrs	r3, r1
 8006b14:	f040 80a7 	bne.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006b18:	4b4c      	ldr	r3, [pc, #304]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006b20:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b28:	d055      	beq.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b30:	f200 8096 	bhi.w	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b3a:	f000 8084 	beq.w	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b44:	f200 808c 	bhi.w	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b4e:	d030      	beq.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b56:	f200 8083 	bhi.w	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d004      	beq.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b66:	d012      	beq.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006b68:	e07a      	b.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b6a:	4b38      	ldr	r3, [pc, #224]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b76:	d107      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 fe0b 	bl	8007798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b86:	e340      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b8c:	e33d      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b8e:	4b2f      	ldr	r3, [pc, #188]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b9a:	d107      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b9c:	f107 0318 	add.w	r3, r7, #24
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 fb51 	bl	8007248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006baa:	e32e      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bb0:	e32b      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bb2:	4b26      	ldr	r3, [pc, #152]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bbe:	d107      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bc0:	f107 030c 	add.w	r3, r7, #12
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fc93 	bl	80074f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bce:	e31c      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd4:	e319      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bd6:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bde:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006be0:	4b1a      	ldr	r3, [pc, #104]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d10c      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bf2:	4b16      	ldr	r3, [pc, #88]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	08db      	lsrs	r3, r3, #3
 8006bf8:	f003 0303 	and.w	r3, r3, #3
 8006bfc:	4a14      	ldr	r2, [pc, #80]	; (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c04:	e01e      	b.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c06:	4b11      	ldr	r3, [pc, #68]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c12:	d106      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c1a:	d102      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c20:	e010      	b.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c22:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c2e:	d106      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c36:	d102      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c38:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c3c:	e002      	b.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c42:	e2e2      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c44:	e2e1      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c46:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006c48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c4a:	e2de      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c4c:	58024400 	.word	0x58024400
 8006c50:	03d09000 	.word	0x03d09000
 8006c54:	003d0900 	.word	0x003d0900
 8006c58:	017d7840 	.word	0x017d7840
 8006c5c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c64:	e2d1      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c6a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	f040 809c 	bne.w	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006c74:	4b93      	ldr	r3, [pc, #588]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006c7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c84:	d054      	beq.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c8c:	f200 808b 	bhi.w	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c96:	f000 8083 	beq.w	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ca0:	f200 8081 	bhi.w	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006caa:	d02f      	beq.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb2:	d878      	bhi.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d004      	beq.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc0:	d012      	beq.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006cc2:	e070      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cc4:	4b7f      	ldr	r3, [pc, #508]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ccc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cd0:	d107      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fd5e 	bl	8007798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ce0:	e293      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce6:	e290      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ce8:	4b76      	ldr	r3, [pc, #472]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cf4:	d107      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf6:	f107 0318 	add.w	r3, r7, #24
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 faa4 	bl	8007248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d04:	e281      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d0a:	e27e      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d0c:	4b6d      	ldr	r3, [pc, #436]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d18:	d107      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d1a:	f107 030c 	add.w	r3, r7, #12
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fbe6 	bl	80074f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d28:	e26f      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d2e:	e26c      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d30:	4b64      	ldr	r3, [pc, #400]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d3a:	4b62      	ldr	r3, [pc, #392]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0304 	and.w	r3, r3, #4
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d10c      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d109      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d4c:	4b5d      	ldr	r3, [pc, #372]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	08db      	lsrs	r3, r3, #3
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	4a5c      	ldr	r2, [pc, #368]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006d58:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d5e:	e01e      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d60:	4b58      	ldr	r3, [pc, #352]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d6c:	d106      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d74:	d102      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d76:	4b55      	ldr	r3, [pc, #340]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d7a:	e010      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d7c:	4b51      	ldr	r3, [pc, #324]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d88:	d106      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d90:	d102      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d92:	4b4f      	ldr	r3, [pc, #316]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d96:	e002      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d9c:	e235      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d9e:	e234      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006da0:	4b4c      	ldr	r3, [pc, #304]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da4:	e231      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006daa:	e22e      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006db4:	430b      	orrs	r3, r1
 8006db6:	f040 808f 	bne.w	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006dba:	4b42      	ldr	r3, [pc, #264]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006dc2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dca:	d06b      	beq.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dd2:	d874      	bhi.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dda:	d056      	beq.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006de2:	d86c      	bhi.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dea:	d03b      	beq.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006df2:	d864      	bhi.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dfa:	d021      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e02:	d85c      	bhi.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d004      	beq.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e10:	d004      	beq.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006e12:	e054      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006e14:	f7fe f9e0 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 8006e18:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e1a:	e1f6      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e1c:	4b29      	ldr	r3, [pc, #164]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e28:	d107      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e2a:	f107 0318 	add.w	r3, r7, #24
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fa0a 	bl	8007248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e38:	e1e7      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e3e:	e1e4      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e40:	4b20      	ldr	r3, [pc, #128]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e4c:	d107      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e4e:	f107 030c 	add.w	r3, r7, #12
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fb4c 	bl	80074f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e5c:	e1d5      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e62:	e1d2      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e64:	4b17      	ldr	r3, [pc, #92]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d109      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e70:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	08db      	lsrs	r3, r3, #3
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	4a13      	ldr	r2, [pc, #76]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e82:	e1c2      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e88:	e1bf      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e8a:	4b0e      	ldr	r3, [pc, #56]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e96:	d102      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006e98:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e9c:	e1b5      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea2:	e1b2      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ea4:	4b07      	ldr	r3, [pc, #28]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eb0:	d102      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006eb2:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb6:	e1a8      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ebc:	e1a5      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ec2:	e1a2      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ec4:	58024400 	.word	0x58024400
 8006ec8:	03d09000 	.word	0x03d09000
 8006ecc:	003d0900 	.word	0x003d0900
 8006ed0:	017d7840 	.word	0x017d7840
 8006ed4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006edc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	d173      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006ee4:	4b9c      	ldr	r3, [pc, #624]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006eec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef4:	d02f      	beq.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006efc:	d863      	bhi.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0a:	d012      	beq.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006f0c:	e05b      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f0e:	4b92      	ldr	r3, [pc, #584]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f1a:	d107      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f1c:	f107 0318 	add.w	r3, r7, #24
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 f991 	bl	8007248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f2a:	e16e      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f30:	e16b      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f32:	4b89      	ldr	r3, [pc, #548]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f3e:	d107      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f40:	f107 030c 	add.w	r3, r7, #12
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fad3 	bl	80074f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f4e:	e15c      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f54:	e159      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f56:	4b80      	ldr	r3, [pc, #512]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f60:	4b7d      	ldr	r3, [pc, #500]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d10c      	bne.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f72:	4b79      	ldr	r3, [pc, #484]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	08db      	lsrs	r3, r3, #3
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	4a77      	ldr	r2, [pc, #476]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f84:	e01e      	b.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f86:	4b74      	ldr	r3, [pc, #464]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f92:	d106      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f9a:	d102      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f9c:	4b70      	ldr	r3, [pc, #448]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fa0:	e010      	b.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fa2:	4b6d      	ldr	r3, [pc, #436]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fae:	d106      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb6:	d102      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006fb8:	4b6a      	ldr	r3, [pc, #424]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fbc:	e002      	b.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006fc2:	e122      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fc4:	e121      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fca:	e11e      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	d133      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006fd8:	4b5f      	ldr	r3, [pc, #380]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fe0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fee:	d012      	beq.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006ff0:	e023      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ff2:	4b59      	ldr	r3, [pc, #356]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ffe:	d107      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007004:	4618      	mov	r0, r3
 8007006:	f000 fbc7 	bl	8007798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800700e:	e0fc      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007014:	e0f9      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007016:	4b50      	ldr	r3, [pc, #320]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800701e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007022:	d107      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007024:	f107 0318 	add.w	r3, r7, #24
 8007028:	4618      	mov	r0, r3
 800702a:	f000 f90d 	bl	8007248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007032:	e0ea      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007038:	e0e7      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800703e:	e0e4      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007044:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007048:	430b      	orrs	r3, r1
 800704a:	f040 808d 	bne.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800704e:	4b42      	ldr	r3, [pc, #264]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007052:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007056:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800705e:	d06b      	beq.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007066:	d874      	bhi.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706e:	d056      	beq.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007076:	d86c      	bhi.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800707e:	d03b      	beq.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007082:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007086:	d864      	bhi.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800708e:	d021      	beq.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007096:	d85c      	bhi.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070a4:	d004      	beq.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80070a6:	e054      	b.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80070a8:	f000 f8b8 	bl	800721c <HAL_RCCEx_GetD3PCLK1Freq>
 80070ac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070ae:	e0ac      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070b0:	4b29      	ldr	r3, [pc, #164]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070bc:	d107      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070be:	f107 0318 	add.w	r3, r7, #24
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 f8c0 	bl	8007248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070cc:	e09d      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ce:	2300      	movs	r3, #0
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d2:	e09a      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070d4:	4b20      	ldr	r3, [pc, #128]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e0:	d107      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e2:	f107 030c 	add.w	r3, r7, #12
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fa02 	bl	80074f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f0:	e08b      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f6:	e088      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070f8:	4b17      	ldr	r3, [pc, #92]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b04      	cmp	r3, #4
 8007102:	d109      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007104:	4b14      	ldr	r3, [pc, #80]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	08db      	lsrs	r3, r3, #3
 800710a:	f003 0303 	and.w	r3, r3, #3
 800710e:	4a13      	ldr	r2, [pc, #76]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007110:	fa22 f303 	lsr.w	r3, r2, r3
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007116:	e078      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800711c:	e075      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800711e:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712a:	d102      	bne.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800712e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007130:	e06b      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007132:	2300      	movs	r3, #0
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007136:	e068      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007144:	d102      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007146:	4b07      	ldr	r3, [pc, #28]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800714a:	e05e      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007150:	e05b      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007152:	2300      	movs	r3, #0
 8007154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007156:	e058      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007158:	58024400 	.word	0x58024400
 800715c:	03d09000 	.word	0x03d09000
 8007160:	003d0900 	.word	0x003d0900
 8007164:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800716c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007170:	430b      	orrs	r3, r1
 8007172:	d148      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007174:	4b27      	ldr	r3, [pc, #156]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800717c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800717e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007184:	d02a      	beq.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800718c:	d838      	bhi.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	2b00      	cmp	r3, #0
 8007192:	d004      	beq.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800719a:	d00d      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800719c:	e030      	b.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800719e:	4b1d      	ldr	r3, [pc, #116]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071aa:	d102      	bne.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80071ac:	4b1a      	ldr	r3, [pc, #104]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071b0:	e02b      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071b6:	e028      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071b8:	4b16      	ldr	r3, [pc, #88]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071c4:	d107      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fae4 	bl	8007798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d4:	e019      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071da:	e016      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071dc:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071e8:	d107      	bne.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ea:	f107 0318 	add.w	r3, r7, #24
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 f82a 	bl	8007248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071f8:	e007      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071fe:	e004      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007204:	e001      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800720a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800720c:	4618      	mov	r0, r3
 800720e:	3740      	adds	r7, #64	; 0x40
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	58024400 	.word	0x58024400
 8007218:	017d7840 	.word	0x017d7840

0800721c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007220:	f7fd ffaa 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 8007224:	4602      	mov	r2, r0
 8007226:	4b06      	ldr	r3, [pc, #24]	; (8007240 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	091b      	lsrs	r3, r3, #4
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	4904      	ldr	r1, [pc, #16]	; (8007244 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007232:	5ccb      	ldrb	r3, [r1, r3]
 8007234:	f003 031f 	and.w	r3, r3, #31
 8007238:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800723c:	4618      	mov	r0, r3
 800723e:	bd80      	pop	{r7, pc}
 8007240:	58024400 	.word	0x58024400
 8007244:	080243b4 	.word	0x080243b4

08007248 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007248:	b480      	push	{r7}
 800724a:	b089      	sub	sp, #36	; 0x24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007250:	4ba1      	ldr	r3, [pc, #644]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800725a:	4b9f      	ldr	r3, [pc, #636]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	0b1b      	lsrs	r3, r3, #12
 8007260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007264:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007266:	4b9c      	ldr	r3, [pc, #624]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726a:	091b      	lsrs	r3, r3, #4
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007272:	4b99      	ldr	r3, [pc, #612]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007276:	08db      	lsrs	r3, r3, #3
 8007278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	fb02 f303 	mul.w	r3, r2, r3
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 8111 	beq.w	80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b02      	cmp	r3, #2
 800729a:	f000 8083 	beq.w	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	f200 80a1 	bhi.w	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d056      	beq.n	8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072b2:	e099      	b.n	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072b4:	4b88      	ldr	r3, [pc, #544]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d02d      	beq.n	800731c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072c0:	4b85      	ldr	r3, [pc, #532]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	08db      	lsrs	r3, r3, #3
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	4a84      	ldr	r2, [pc, #528]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072cc:	fa22 f303 	lsr.w	r3, r2, r3
 80072d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	ee07 3a90 	vmov	s15, r3
 80072d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ea:	4b7b      	ldr	r3, [pc, #492]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800730e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800731a:	e087      	b.n	800742c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	4b6a      	ldr	r3, [pc, #424]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007342:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800735e:	e065      	b.n	800742c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b59      	ldr	r3, [pc, #356]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a03 	vldr	s12, [r7, #12]
 8007386:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a2:	e043      	b.n	800742c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b6:	4b48      	ldr	r3, [pc, #288]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073e6:	e021      	b.n	800742c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fa:	4b37      	ldr	r3, [pc, #220]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740a:	ed97 6a03 	vldr	s12, [r7, #12]
 800740e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800741e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800742a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800742c:	4b2a      	ldr	r3, [pc, #168]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	0a5b      	lsrs	r3, r3, #9
 8007432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007446:	edd7 6a07 	vldr	s13, [r7, #28]
 800744a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800744e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007452:	ee17 2a90 	vmov	r2, s15
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800745a:	4b1f      	ldr	r3, [pc, #124]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	0c1b      	lsrs	r3, r3, #16
 8007460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007474:	edd7 6a07 	vldr	s13, [r7, #28]
 8007478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800747c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007480:	ee17 2a90 	vmov	r2, s15
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007488:	4b13      	ldr	r3, [pc, #76]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	0e1b      	lsrs	r3, r3, #24
 800748e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800749e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ae:	ee17 2a90 	vmov	r2, s15
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074b6:	e008      	b.n	80074ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	609a      	str	r2, [r3, #8]
}
 80074ca:	bf00      	nop
 80074cc:	3724      	adds	r7, #36	; 0x24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	58024400 	.word	0x58024400
 80074dc:	03d09000 	.word	0x03d09000
 80074e0:	46000000 	.word	0x46000000
 80074e4:	4c742400 	.word	0x4c742400
 80074e8:	4a742400 	.word	0x4a742400
 80074ec:	4bbebc20 	.word	0x4bbebc20

080074f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b089      	sub	sp, #36	; 0x24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074f8:	4ba1      	ldr	r3, [pc, #644]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007502:	4b9f      	ldr	r3, [pc, #636]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007506:	0d1b      	lsrs	r3, r3, #20
 8007508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800750c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800750e:	4b9c      	ldr	r3, [pc, #624]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	0a1b      	lsrs	r3, r3, #8
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800751a:	4b99      	ldr	r3, [pc, #612]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	08db      	lsrs	r3, r3, #3
 8007520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	fb02 f303 	mul.w	r3, r2, r3
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007532:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 8111 	beq.w	8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b02      	cmp	r3, #2
 8007542:	f000 8083 	beq.w	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b02      	cmp	r3, #2
 800754a:	f200 80a1 	bhi.w	8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d003      	beq.n	800755c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d056      	beq.n	8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800755a:	e099      	b.n	8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800755c:	4b88      	ldr	r3, [pc, #544]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d02d      	beq.n	80075c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007568:	4b85      	ldr	r3, [pc, #532]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	08db      	lsrs	r3, r3, #3
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	4a84      	ldr	r2, [pc, #528]	; (8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007574:	fa22 f303 	lsr.w	r3, r2, r3
 8007578:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	ee07 3a90 	vmov	s15, r3
 8007580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007592:	4b7b      	ldr	r3, [pc, #492]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075c2:	e087      	b.n	80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800778c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d6:	4b6a      	ldr	r3, [pc, #424]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007606:	e065      	b.n	80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761a:	4b59      	ldr	r3, [pc, #356]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762a:	ed97 6a03 	vldr	s12, [r7, #12]
 800762e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800763e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800764a:	e043      	b.n	80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007656:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800765a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800765e:	4b48      	ldr	r3, [pc, #288]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007672:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800767e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800768e:	e021      	b.n	80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800769e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a2:	4b37      	ldr	r3, [pc, #220]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80076d4:	4b2a      	ldr	r3, [pc, #168]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	0a5b      	lsrs	r3, r3, #9
 80076da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80076f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076fa:	ee17 2a90 	vmov	r2, s15
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007702:	4b1f      	ldr	r3, [pc, #124]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	0c1b      	lsrs	r3, r3, #16
 8007708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770c:	ee07 3a90 	vmov	s15, r3
 8007710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800771c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007728:	ee17 2a90 	vmov	r2, s15
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007730:	4b13      	ldr	r3, [pc, #76]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007734:	0e1b      	lsrs	r3, r3, #24
 8007736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800774a:	edd7 6a07 	vldr	s13, [r7, #28]
 800774e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007756:	ee17 2a90 	vmov	r2, s15
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800775e:	e008      	b.n	8007772 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	609a      	str	r2, [r3, #8]
}
 8007772:	bf00      	nop
 8007774:	3724      	adds	r7, #36	; 0x24
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	58024400 	.word	0x58024400
 8007784:	03d09000 	.word	0x03d09000
 8007788:	46000000 	.word	0x46000000
 800778c:	4c742400 	.word	0x4c742400
 8007790:	4a742400 	.word	0x4a742400
 8007794:	4bbebc20 	.word	0x4bbebc20

08007798 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007798:	b480      	push	{r7}
 800779a:	b089      	sub	sp, #36	; 0x24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077a0:	4ba0      	ldr	r3, [pc, #640]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a4:	f003 0303 	and.w	r3, r3, #3
 80077a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80077aa:	4b9e      	ldr	r3, [pc, #632]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	091b      	lsrs	r3, r3, #4
 80077b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80077b6:	4b9b      	ldr	r3, [pc, #620]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80077c0:	4b98      	ldr	r3, [pc, #608]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c4:	08db      	lsrs	r3, r3, #3
 80077c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	fb02 f303 	mul.w	r3, r2, r3
 80077d0:	ee07 3a90 	vmov	s15, r3
 80077d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 8111 	beq.w	8007a06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	f000 8083 	beq.w	80078f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	f200 80a1 	bhi.w	8007936 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d056      	beq.n	80078ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007800:	e099      	b.n	8007936 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007802:	4b88      	ldr	r3, [pc, #544]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0320 	and.w	r3, r3, #32
 800780a:	2b00      	cmp	r3, #0
 800780c:	d02d      	beq.n	800786a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800780e:	4b85      	ldr	r3, [pc, #532]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	08db      	lsrs	r3, r3, #3
 8007814:	f003 0303 	and.w	r3, r3, #3
 8007818:	4a83      	ldr	r2, [pc, #524]	; (8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800781a:	fa22 f303 	lsr.w	r3, r2, r3
 800781e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007838:	4b7a      	ldr	r3, [pc, #488]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007840:	ee07 3a90 	vmov	s15, r3
 8007844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007848:	ed97 6a03 	vldr	s12, [r7, #12]
 800784c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800785c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007864:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007868:	e087      	b.n	800797a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	ee07 3a90 	vmov	s15, r3
 8007870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007874:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800787c:	4b69      	ldr	r3, [pc, #420]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800787e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007884:	ee07 3a90 	vmov	s15, r3
 8007888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007890:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ac:	e065      	b.n	800797a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	ee07 3a90 	vmov	s15, r3
 80078b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80078bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c0:	4b58      	ldr	r3, [pc, #352]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c8:	ee07 3a90 	vmov	s15, r3
 80078cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80078d4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078f0:	e043      	b.n	800797a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	ee07 3a90 	vmov	s15, r3
 80078f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007904:	4b47      	ldr	r3, [pc, #284]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790c:	ee07 3a90 	vmov	s15, r3
 8007910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007914:	ed97 6a03 	vldr	s12, [r7, #12]
 8007918:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800791c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007920:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007924:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007930:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007934:	e021      	b.n	800797a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	ee07 3a90 	vmov	s15, r3
 800793c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007940:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007a30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007948:	4b36      	ldr	r3, [pc, #216]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800794a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007950:	ee07 3a90 	vmov	s15, r3
 8007954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007958:	ed97 6a03 	vldr	s12, [r7, #12]
 800795c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007968:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800796c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007974:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007978:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800797a:	4b2a      	ldr	r3, [pc, #168]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800797c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797e:	0a5b      	lsrs	r3, r3, #9
 8007980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007990:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007994:	edd7 6a07 	vldr	s13, [r7, #28]
 8007998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800799c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079a0:	ee17 2a90 	vmov	r2, s15
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80079a8:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ac:	0c1b      	lsrs	r3, r3, #16
 80079ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b2:	ee07 3a90 	vmov	s15, r3
 80079b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80079c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ce:	ee17 2a90 	vmov	r2, s15
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80079d6:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	0e1b      	lsrs	r3, r3, #24
 80079dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e0:	ee07 3a90 	vmov	s15, r3
 80079e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079fc:	ee17 2a90 	vmov	r2, s15
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a04:	e008      	b.n	8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	609a      	str	r2, [r3, #8]
}
 8007a18:	bf00      	nop
 8007a1a:	3724      	adds	r7, #36	; 0x24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	58024400 	.word	0x58024400
 8007a28:	03d09000 	.word	0x03d09000
 8007a2c:	46000000 	.word	0x46000000
 8007a30:	4c742400 	.word	0x4c742400
 8007a34:	4a742400 	.word	0x4a742400
 8007a38:	4bbebc20 	.word	0x4bbebc20

08007a3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a4a:	4b53      	ldr	r3, [pc, #332]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d101      	bne.n	8007a5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e099      	b.n	8007b8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a5a:	4b4f      	ldr	r3, [pc, #316]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a4e      	ldr	r2, [pc, #312]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007a60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a66:	f7f9 feff 	bl	8001868 <HAL_GetTick>
 8007a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a6c:	e008      	b.n	8007a80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a6e:	f7f9 fefb 	bl	8001868 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e086      	b.n	8007b8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a80:	4b45      	ldr	r3, [pc, #276]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1f0      	bne.n	8007a6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a8c:	4b42      	ldr	r3, [pc, #264]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	031b      	lsls	r3, r3, #12
 8007a9a:	493f      	ldr	r1, [pc, #252]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	628b      	str	r3, [r1, #40]	; 0x28
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	025b      	lsls	r3, r3, #9
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	041b      	lsls	r3, r3, #16
 8007abe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	061b      	lsls	r3, r3, #24
 8007acc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ad0:	4931      	ldr	r1, [pc, #196]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ad6:	4b30      	ldr	r3, [pc, #192]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ada:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	492d      	ldr	r1, [pc, #180]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ae8:	4b2b      	ldr	r3, [pc, #172]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	f023 0220 	bic.w	r2, r3, #32
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	4928      	ldr	r1, [pc, #160]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007afa:	4b27      	ldr	r3, [pc, #156]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	4a26      	ldr	r2, [pc, #152]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b00:	f023 0310 	bic.w	r3, r3, #16
 8007b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b06:	4b24      	ldr	r3, [pc, #144]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b0a:	4b24      	ldr	r3, [pc, #144]	; (8007b9c <RCCEx_PLL2_Config+0x160>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	69d2      	ldr	r2, [r2, #28]
 8007b12:	00d2      	lsls	r2, r2, #3
 8007b14:	4920      	ldr	r1, [pc, #128]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b1a:	4b1f      	ldr	r3, [pc, #124]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	4a1e      	ldr	r2, [pc, #120]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b20:	f043 0310 	orr.w	r3, r3, #16
 8007b24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d106      	bne.n	8007b3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b2c:	4b1a      	ldr	r3, [pc, #104]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4a19      	ldr	r2, [pc, #100]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b38:	e00f      	b.n	8007b5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d106      	bne.n	8007b4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b40:	4b15      	ldr	r3, [pc, #84]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	4a14      	ldr	r2, [pc, #80]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b4c:	e005      	b.n	8007b5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b4e:	4b12      	ldr	r3, [pc, #72]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	4a11      	ldr	r2, [pc, #68]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b5a:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a0e      	ldr	r2, [pc, #56]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b66:	f7f9 fe7f 	bl	8001868 <HAL_GetTick>
 8007b6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b6c:	e008      	b.n	8007b80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b6e:	f7f9 fe7b 	bl	8001868 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d901      	bls.n	8007b80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e006      	b.n	8007b8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b80:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <RCCEx_PLL2_Config+0x15c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0f0      	beq.n	8007b6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	58024400 	.word	0x58024400
 8007b9c:	ffff0007 	.word	0xffff0007

08007ba0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bae:	4b53      	ldr	r3, [pc, #332]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d101      	bne.n	8007bbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e099      	b.n	8007cf2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007bbe:	4b4f      	ldr	r3, [pc, #316]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a4e      	ldr	r2, [pc, #312]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bca:	f7f9 fe4d 	bl	8001868 <HAL_GetTick>
 8007bce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bd0:	e008      	b.n	8007be4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bd2:	f7f9 fe49 	bl	8001868 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d901      	bls.n	8007be4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e086      	b.n	8007cf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007be4:	4b45      	ldr	r3, [pc, #276]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1f0      	bne.n	8007bd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007bf0:	4b42      	ldr	r3, [pc, #264]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	051b      	lsls	r3, r3, #20
 8007bfe:	493f      	ldr	r1, [pc, #252]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	628b      	str	r3, [r1, #40]	; 0x28
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	025b      	lsls	r3, r3, #9
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	041b      	lsls	r3, r3, #16
 8007c22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	061b      	lsls	r3, r3, #24
 8007c30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c34:	4931      	ldr	r1, [pc, #196]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c3a:	4b30      	ldr	r3, [pc, #192]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	492d      	ldr	r1, [pc, #180]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c4c:	4b2b      	ldr	r3, [pc, #172]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	4928      	ldr	r1, [pc, #160]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c5e:	4b27      	ldr	r3, [pc, #156]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	4a26      	ldr	r2, [pc, #152]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c6a:	4b24      	ldr	r3, [pc, #144]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c6e:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <RCCEx_PLL3_Config+0x160>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	69d2      	ldr	r2, [r2, #28]
 8007c76:	00d2      	lsls	r2, r2, #3
 8007c78:	4920      	ldr	r1, [pc, #128]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c7e:	4b1f      	ldr	r3, [pc, #124]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	4a1e      	ldr	r2, [pc, #120]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d106      	bne.n	8007c9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c90:	4b1a      	ldr	r3, [pc, #104]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	4a19      	ldr	r2, [pc, #100]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007c96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c9c:	e00f      	b.n	8007cbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d106      	bne.n	8007cb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ca4:	4b15      	ldr	r3, [pc, #84]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	4a14      	ldr	r2, [pc, #80]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007caa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cb0:	e005      	b.n	8007cbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	4a11      	ldr	r2, [pc, #68]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a0e      	ldr	r2, [pc, #56]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cca:	f7f9 fdcd 	bl	8001868 <HAL_GetTick>
 8007cce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cd0:	e008      	b.n	8007ce4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cd2:	f7f9 fdc9 	bl	8001868 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d901      	bls.n	8007ce4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e006      	b.n	8007cf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ce4:	4b05      	ldr	r3, [pc, #20]	; (8007cfc <RCCEx_PLL3_Config+0x15c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0f0      	beq.n	8007cd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	58024400 	.word	0x58024400
 8007d00:	ffff0007 	.word	0xffff0007

08007d04 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b08a      	sub	sp, #40	; 0x28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e075      	b.n	8007e02 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d105      	bne.n	8007d2e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7f9 f9bb 	bl	80010a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2204      	movs	r2, #4
 8007d32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f868 	bl	8007e0c <HAL_SD_InitCard>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e05d      	b.n	8007e02 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007d46:	f107 0308 	add.w	r3, r7, #8
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fdaf 	bl	80088b0 <HAL_SD_GetCardStatus>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e052      	b.n	8007e02 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007d5c:	7e3b      	ldrb	r3, [r7, #24]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007d62:	7e7b      	ldrb	r3, [r7, #25]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d10a      	bne.n	8007d86 <HAL_SD_Init+0x82>
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <HAL_SD_Init+0x78>
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d82:	659a      	str	r2, [r3, #88]	; 0x58
 8007d84:	e00b      	b.n	8007d9e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d104      	bne.n	8007d98 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d94:	659a      	str	r2, [r3, #88]	; 0x58
 8007d96:	e002      	b.n	8007d9e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fe6d 	bl	8008a84 <HAL_SD_ConfigWideBusOperation>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e026      	b.n	8007e02 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007db4:	f7f9 fd58 	bl	8001868 <HAL_GetTick>
 8007db8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007dba:	e011      	b.n	8007de0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007dbc:	f7f9 fd54 	bl	8001868 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dca:	d109      	bne.n	8007de0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007dd2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e010      	b.n	8007e02 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 ff61 	bl	8008ca8 <HAL_SD_GetCardState>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	d1e7      	bne.n	8007dbc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3728      	adds	r7, #40	; 0x28
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e0c:	b590      	push	{r4, r7, lr}
 8007e0e:	b08d      	sub	sp, #52	; 0x34
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007e24:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007e28:	f04f 0100 	mov.w	r1, #0
 8007e2c:	f7fe fc76 	bl	800671c <HAL_RCCEx_GetPeriphCLKFreq>
 8007e30:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d109      	bne.n	8007e4c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e46:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e070      	b.n	8007f2e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	0a1b      	lsrs	r3, r3, #8
 8007e50:	4a39      	ldr	r2, [pc, #228]	; (8007f38 <HAL_SD_InitCard+0x12c>)
 8007e52:	fba2 2303 	umull	r2, r3, r2, r3
 8007e56:	091b      	lsrs	r3, r3, #4
 8007e58:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681c      	ldr	r4, [r3, #0]
 8007e5e:	466a      	mov	r2, sp
 8007e60:	f107 0318 	add.w	r3, r7, #24
 8007e64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e68:	e882 0003 	stmia.w	r2, {r0, r1}
 8007e6c:	f107 030c 	add.w	r3, r7, #12
 8007e70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e72:	4620      	mov	r0, r4
 8007e74:	f001 fe84 	bl	8009b80 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fec7 	bl	8009c10 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d005      	beq.n	8007e94 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e92:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d007      	beq.n	8007eaa <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007e9a:	4a28      	ldr	r2, [pc, #160]	; (8007f3c <HAL_SD_InitCard+0x130>)
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7f9 fceb 	bl	8001880 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 ffea 	bl	8008e84 <SD_PowerON>
 8007eb0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e02e      	b.n	8007f2e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 ff09 	bl	8008ce8 <SD_InitCard>
 8007ed6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00b      	beq.n	8007ef6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e01b      	b.n	8007f2e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007efe:	4618      	mov	r0, r3
 8007f00:	f001 ff1c 	bl	8009d3c <SDMMC_CmdBlockLength>
 8007f04:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00f      	beq.n	8007f2c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0b      	ldr	r2, [pc, #44]	; (8007f40 <HAL_SD_InitCard+0x134>)
 8007f12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	372c      	adds	r7, #44	; 0x2c
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd90      	pop	{r4, r7, pc}
 8007f36:	bf00      	nop
 8007f38:	014f8b59 	.word	0x014f8b59
 8007f3c:	00012110 	.word	0x00012110
 8007f40:	1fe00fff 	.word	0x1fe00fff

08007f44 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08c      	sub	sp, #48	; 0x30
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d107      	bne.n	8007f6c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e08d      	b.n	8008088 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	f040 8086 	bne.w	8008086 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	441a      	add	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d907      	bls.n	8007f9e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f92:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e074      	b.n	8008088 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2200      	movs	r2, #0
 8007fac:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	025a      	lsls	r2, r3, #9
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d002      	beq.n	8007fca <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	025b      	lsls	r3, r3, #9
 8007fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fce:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	025b      	lsls	r3, r3, #9
 8007fd4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007fd6:	2390      	movs	r3, #144	; 0x90
 8007fd8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f107 0210 	add.w	r2, r7, #16
 8007fee:	4611      	mov	r1, r2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f001 fe77 	bl	8009ce4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008004:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2201      	movs	r2, #1
 8008014:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d90a      	bls.n	8008032 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2282      	movs	r2, #130	; 0x82
 8008020:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008028:	4618      	mov	r0, r3
 800802a:	f001 fecd 	bl	8009dc8 <SDMMC_CmdReadMultiBlock>
 800802e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008030:	e009      	b.n	8008046 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2281      	movs	r2, #129	; 0x81
 8008036:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800803e:	4618      	mov	r0, r3
 8008040:	f001 fe9f 	bl	8009d82 <SDMMC_CmdReadSingleBlock>
 8008044:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d012      	beq.n	8008072 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a0f      	ldr	r2, [pc, #60]	; (8008090 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008052:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	431a      	orrs	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e00a      	b.n	8008088 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008080:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	e000      	b.n	8008088 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008086:	2302      	movs	r3, #2
  }
}
 8008088:	4618      	mov	r0, r3
 800808a:	3730      	adds	r7, #48	; 0x30
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	1fe00fff 	.word	0x1fe00fff

08008094 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08c      	sub	sp, #48	; 0x30
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d107      	bne.n	80080bc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e08d      	b.n	80081d8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	f040 8086 	bne.w	80081d6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80080d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	441a      	add	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080da:	429a      	cmp	r2, r3
 80080dc:	d907      	bls.n	80080ee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e074      	b.n	80081d8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2203      	movs	r2, #3
 80080f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2200      	movs	r2, #0
 80080fc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	025a      	lsls	r2, r3, #9
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	2b01      	cmp	r3, #1
 8008112:	d002      	beq.n	800811a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	025b      	lsls	r3, r3, #9
 8008118:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800811a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800811e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	025b      	lsls	r3, r3, #9
 8008124:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008126:	2390      	movs	r3, #144	; 0x90
 8008128:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800812a:	2300      	movs	r3, #0
 800812c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800812e:	2300      	movs	r3, #0
 8008130:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008132:	2300      	movs	r3, #0
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f107 0210 	add.w	r2, r7, #16
 800813e:	4611      	mov	r1, r2
 8008140:	4618      	mov	r0, r3
 8008142:	f001 fdcf 	bl	8009ce4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008154:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2201      	movs	r2, #1
 8008164:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d90a      	bls.n	8008182 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	22a0      	movs	r2, #160	; 0xa0
 8008170:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008178:	4618      	mov	r0, r3
 800817a:	f001 fe6b 	bl	8009e54 <SDMMC_CmdWriteMultiBlock>
 800817e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008180:	e009      	b.n	8008196 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2290      	movs	r2, #144	; 0x90
 8008186:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800818e:	4618      	mov	r0, r3
 8008190:	f001 fe3d 	bl	8009e0e <SDMMC_CmdWriteSingleBlock>
 8008194:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d012      	beq.n	80081c2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a0f      	ldr	r2, [pc, #60]	; (80081e0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081aa:	431a      	orrs	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e00a      	b.n	80081d8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80081d0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e000      	b.n	80081d8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80081d6:	2302      	movs	r3, #2
  }
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3730      	adds	r7, #48	; 0x30
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	1fe00fff 	.word	0x1fe00fff

080081e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d008      	beq.n	8008212 <HAL_SD_IRQHandler+0x2e>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f003 0308 	and.w	r3, r3, #8
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 f926 	bl	800945c <SD_Read_IT>
 8008210:	e19a      	b.n	8008548 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 80ac 	beq.w	800837a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800822a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b59      	ldr	r3, [pc, #356]	; (800839c <HAL_SD_IRQHandler+0x1b8>)
 8008238:	400b      	ands	r3, r1
 800823a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800824a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800825a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d038      	beq.n	80082d8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d104      	bne.n	800827a <HAL_SD_IRQHandler+0x96>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b00      	cmp	r3, #0
 8008278:	d011      	beq.n	800829e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f001 fe0c 	bl	8009e9c <SDMMC_CmdStopTransfer>
 8008284:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d008      	beq.n	800829e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	431a      	orrs	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f95b 	bl	8008554 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a3f      	ldr	r2, [pc, #252]	; (80083a0 <HAL_SD_IRQHandler+0x1bc>)
 80082a4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d104      	bne.n	80082c8 <HAL_SD_IRQHandler+0xe4>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f002 fab5 	bl	800a838 <HAL_SD_RxCpltCallback>
 80082ce:	e13b      	b.n	8008548 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f002 faa7 	bl	800a824 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80082d6:	e137      	b.n	8008548 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 8132 	beq.w	8008548 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2200      	movs	r2, #0
 80082ea:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2200      	movs	r2, #0
 80082f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2200      	movs	r2, #0
 80082fa:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d104      	bne.n	8008310 <HAL_SD_IRQHandler+0x12c>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d011      	beq.n	8008334 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4618      	mov	r0, r3
 8008316:	f001 fdc1 	bl	8009e9c <SDMMC_CmdStopTransfer>
 800831a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d008      	beq.n	8008334 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f910 	bl	8008554 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <HAL_SD_IRQHandler+0x172>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d002      	beq.n	800835c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f002 fa64 	bl	800a824 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d105      	bne.n	8008372 <HAL_SD_IRQHandler+0x18e>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 80eb 	beq.w	8008548 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f002 fa60 	bl	800a838 <HAL_SD_RxCpltCallback>
}
 8008378:	e0e6      	b.n	8008548 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00d      	beq.n	80083a4 <HAL_SD_IRQHandler+0x1c0>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f003 0308 	and.w	r3, r3, #8
 800838e:	2b00      	cmp	r3, #0
 8008390:	d008      	beq.n	80083a4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f001 f8a8 	bl	80094e8 <SD_Write_IT>
 8008398:	e0d6      	b.n	8008548 <HAL_SD_IRQHandler+0x364>
 800839a:	bf00      	nop
 800839c:	ffff3ec5 	.word	0xffff3ec5
 80083a0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083aa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 809d 	beq.w	80084ee <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d005      	beq.n	80083ce <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c6:	f043 0202 	orr.w	r2, r3, #2
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e0:	f043 0208 	orr.w	r2, r3, #8
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d005      	beq.n	8008402 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fa:	f043 0220 	orr.w	r2, r3, #32
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008408:	f003 0310 	and.w	r3, r3, #16
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008414:	f043 0210 	orr.w	r2, r3, #16
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a4b      	ldr	r2, [pc, #300]	; (8008550 <HAL_SD_IRQHandler+0x36c>)
 8008422:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008432:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008442:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008452:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008462:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4618      	mov	r0, r3
 800846a:	f001 fd17 	bl	8009e9c <SDMMC_CmdStopTransfer>
 800846e:	4602      	mov	r2, r0
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008488:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008492:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 0308 	and.w	r3, r3, #8
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f851 	bl	8008554 <HAL_SD_ErrorCallback>
}
 80084b2:	e049      	b.n	8008548 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d044      	beq.n	8008548 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d040      	beq.n	8008548 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80084d4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2200      	movs	r2, #0
 80084dc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f834 	bl	8008554 <HAL_SD_ErrorCallback>
}
 80084ec:	e02c      	b.n	8008548 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d025      	beq.n	8008548 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008504:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10c      	bne.n	800852e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f003 0320 	and.w	r3, r3, #32
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f001 f84a 	bl	80095b8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008524:	e010      	b.n	8008548 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f001 f832 	bl	8009590 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800852c:	e00c      	b.n	8008548 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f003 0320 	and.w	r3, r3, #32
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 f833 	bl	80095a4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800853e:	e003      	b.n	8008548 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 f81b 	bl	800957c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008546:	e7ff      	b.n	8008548 <HAL_SD_IRQHandler+0x364>
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	18000f3a 	.word	0x18000f3a

08008554 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008576:	0f9b      	lsrs	r3, r3, #30
 8008578:	b2da      	uxtb	r2, r3
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008582:	0e9b      	lsrs	r3, r3, #26
 8008584:	b2db      	uxtb	r3, r3
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	b2da      	uxtb	r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008594:	0e1b      	lsrs	r3, r3, #24
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 0303 	and.w	r3, r3, #3
 800859c:	b2da      	uxtb	r2, r3
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085a6:	0c1b      	lsrs	r3, r3, #16
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c8:	0d1b      	lsrs	r3, r3, #20
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d4:	0c1b      	lsrs	r3, r3, #16
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e6:	0bdb      	lsrs	r3, r3, #15
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f8:	0b9b      	lsrs	r3, r3, #14
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	b2da      	uxtb	r2, r3
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800860a:	0b5b      	lsrs	r3, r3, #13
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	b2da      	uxtb	r2, r3
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800861c:	0b1b      	lsrs	r3, r3, #12
 800861e:	b2db      	uxtb	r3, r3
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	b2da      	uxtb	r2, r3
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2200      	movs	r2, #0
 800862e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008634:	2b00      	cmp	r3, #0
 8008636:	d163      	bne.n	8008700 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800863c:	009a      	lsls	r2, r3, #2
 800863e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008642:	4013      	ands	r3, r2
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008648:	0f92      	lsrs	r2, r2, #30
 800864a:	431a      	orrs	r2, r3
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008654:	0edb      	lsrs	r3, r3, #27
 8008656:	b2db      	uxtb	r3, r3
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	b2da      	uxtb	r2, r3
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008666:	0e1b      	lsrs	r3, r3, #24
 8008668:	b2db      	uxtb	r3, r3
 800866a:	f003 0307 	and.w	r3, r3, #7
 800866e:	b2da      	uxtb	r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008678:	0d5b      	lsrs	r3, r3, #21
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	b2da      	uxtb	r2, r3
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800868a:	0c9b      	lsrs	r3, r3, #18
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	b2da      	uxtb	r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800869c:	0bdb      	lsrs	r3, r3, #15
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f003 0307 	and.w	r3, r3, #7
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	7e1b      	ldrb	r3, [r3, #24]
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	f003 0307 	and.w	r3, r3, #7
 80086be:	3302      	adds	r3, #2
 80086c0:	2201      	movs	r2, #1
 80086c2:	fa02 f303 	lsl.w	r3, r2, r3
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80086ca:	fb03 f202 	mul.w	r2, r3, r2
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	7a1b      	ldrb	r3, [r3, #8]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f003 030f 	and.w	r3, r3, #15
 80086dc:	2201      	movs	r2, #1
 80086de:	409a      	lsls	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80086ec:	0a52      	lsrs	r2, r2, #9
 80086ee:	fb03 f202 	mul.w	r2, r3, r2
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086fc:	655a      	str	r2, [r3, #84]	; 0x54
 80086fe:	e031      	b.n	8008764 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	2b01      	cmp	r3, #1
 8008706:	d11d      	bne.n	8008744 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800870c:	041b      	lsls	r3, r3, #16
 800870e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008716:	0c1b      	lsrs	r3, r3, #16
 8008718:	431a      	orrs	r2, r3
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	3301      	adds	r3, #1
 8008724:	029a      	lsls	r2, r3, #10
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008738:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	655a      	str	r2, [r3, #84]	; 0x54
 8008742:	e00f      	b.n	8008764 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a58      	ldr	r2, [pc, #352]	; (80088ac <HAL_SD_GetCardCSD+0x344>)
 800874a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008750:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e09d      	b.n	80088a0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008768:	0b9b      	lsrs	r3, r3, #14
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	b2da      	uxtb	r2, r3
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800877a:	09db      	lsrs	r3, r3, #7
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008782:	b2da      	uxtb	r2, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800878c:	b2db      	uxtb	r3, r3
 800878e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008792:	b2da      	uxtb	r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800879c:	0fdb      	lsrs	r3, r3, #31
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087a8:	0f5b      	lsrs	r3, r3, #29
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ba:	0e9b      	lsrs	r3, r3, #26
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087cc:	0d9b      	lsrs	r3, r3, #22
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	f003 030f 	and.w	r3, r3, #15
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087de:	0d5b      	lsrs	r3, r3, #21
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087fa:	0c1b      	lsrs	r3, r3, #16
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	b2da      	uxtb	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800880e:	0bdb      	lsrs	r3, r3, #15
 8008810:	b2db      	uxtb	r3, r3
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	b2da      	uxtb	r2, r3
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008822:	0b9b      	lsrs	r3, r3, #14
 8008824:	b2db      	uxtb	r3, r3
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	b2da      	uxtb	r2, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008836:	0b5b      	lsrs	r3, r3, #13
 8008838:	b2db      	uxtb	r3, r3
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	b2da      	uxtb	r2, r3
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800884a:	0b1b      	lsrs	r3, r3, #12
 800884c:	b2db      	uxtb	r3, r3
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	b2da      	uxtb	r2, r3
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800885e:	0a9b      	lsrs	r3, r3, #10
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	b2da      	uxtb	r2, r3
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008872:	0a1b      	lsrs	r3, r3, #8
 8008874:	b2db      	uxtb	r3, r3
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	b2da      	uxtb	r2, r3
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008886:	085b      	lsrs	r3, r3, #1
 8008888:	b2db      	uxtb	r3, r3
 800888a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888e:	b2da      	uxtb	r2, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	1fe00fff 	.word	0x1fe00fff

080088b0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b094      	sub	sp, #80	; 0x50
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b03      	cmp	r3, #3
 80088ca:	d101      	bne.n	80088d0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e0a7      	b.n	8008a20 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80088d0:	f107 0308 	add.w	r3, r7, #8
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fb62 	bl	8008fa0 <SD_SendSDStatus>
 80088dc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80088de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d011      	beq.n	8008908 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a4f      	ldr	r2, [pc, #316]	; (8008a28 <HAL_SD_GetCardStatus+0x178>)
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008906:	e070      	b.n	80089ea <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	099b      	lsrs	r3, r3, #6
 800890c:	b2db      	uxtb	r3, r3
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	b2da      	uxtb	r2, r3
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	095b      	lsrs	r3, r3, #5
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	b2da      	uxtb	r2, r3
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	0a1b      	lsrs	r3, r3, #8
 800892c:	b29b      	uxth	r3, r3
 800892e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008932:	b29a      	uxth	r2, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	0e1b      	lsrs	r3, r3, #24
 8008938:	b29b      	uxth	r3, r3
 800893a:	4313      	orrs	r3, r2
 800893c:	b29a      	uxth	r2, r3
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	061a      	lsls	r2, r3, #24
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800894e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	0a1b      	lsrs	r3, r3, #8
 8008954:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008958:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	0e1b      	lsrs	r3, r3, #24
 800895e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	b2da      	uxtb	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	0a1b      	lsrs	r3, r3, #8
 8008970:	b2da      	uxtb	r2, r3
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	0d1b      	lsrs	r3, r3, #20
 800897a:	b2db      	uxtb	r3, r3
 800897c:	f003 030f 	and.w	r3, r3, #15
 8008980:	b2da      	uxtb	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	0c1b      	lsrs	r3, r3, #16
 800898a:	b29b      	uxth	r3, r3
 800898c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008990:	b29a      	uxth	r2, r3
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	b29b      	uxth	r3, r3
 8008996:	b2db      	uxtb	r3, r3
 8008998:	b29b      	uxth	r3, r3
 800899a:	4313      	orrs	r3, r2
 800899c:	b29a      	uxth	r2, r3
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	0a9b      	lsrs	r3, r3, #10
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	0a1b      	lsrs	r3, r3, #8
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	f003 0303 	and.w	r3, r3, #3
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	091b      	lsrs	r3, r3, #4
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	f003 030f 	and.w	r3, r3, #15
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	f003 030f 	and.w	r3, r3, #15
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	0e1b      	lsrs	r3, r3, #24
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089f2:	4618      	mov	r0, r3
 80089f4:	f001 f9a2 	bl	8009d3c <SDMMC_CmdBlockLength>
 80089f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80089fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00d      	beq.n	8008a1c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a08      	ldr	r2, [pc, #32]	; (8008a28 <HAL_SD_GetCardStatus+0x178>)
 8008a06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a0c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008a1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3750      	adds	r7, #80	; 0x50
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	1fe00fff 	.word	0x1fe00fff

08008a2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008a84:	b590      	push	{r4, r7, lr}
 8008a86:	b08d      	sub	sp, #52	; 0x34
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2203      	movs	r2, #3
 8008a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d02e      	beq.n	8008b02 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aaa:	d106      	bne.n	8008aba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	635a      	str	r2, [r3, #52]	; 0x34
 8008ab8:	e029      	b.n	8008b0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ac0:	d10a      	bne.n	8008ad8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fb64 	bl	8009190 <SD_WideBus_Enable>
 8008ac8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8008ad6:	e01a      	b.n	8008b0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10a      	bne.n	8008af4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fba1 	bl	8009226 <SD_WideBus_Disable>
 8008ae4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	431a      	orrs	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	635a      	str	r2, [r3, #52]	; 0x34
 8008af2:	e00c      	b.n	8008b0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	635a      	str	r2, [r3, #52]	; 0x34
 8008b00:	e005      	b.n	8008b0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d007      	beq.n	8008b26 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a5f      	ldr	r2, [pc, #380]	; (8008c98 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008b1c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b24:	e096      	b.n	8008c54 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008b26:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008b2a:	f04f 0100 	mov.w	r1, #0
 8008b2e:	f7fd fdf5 	bl	800671c <HAL_RCCEx_GetPeriphCLKFreq>
 8008b32:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 8083 	beq.w	8008c42 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	695a      	ldr	r2, [r3, #20]
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4950      	ldr	r1, [pc, #320]	; (8008c9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b5a:	fba1 1303 	umull	r1, r3, r1, r3
 8008b5e:	0e1b      	lsrs	r3, r3, #24
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d303      	bcc.n	8008b6c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	61bb      	str	r3, [r7, #24]
 8008b6a:	e05a      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b74:	d103      	bne.n	8008b7e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	61bb      	str	r3, [r7, #24]
 8008b7c:	e051      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b86:	d126      	bne.n	8008bd6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10e      	bne.n	8008bae <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	4a43      	ldr	r2, [pc, #268]	; (8008ca0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d906      	bls.n	8008ba6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	4a40      	ldr	r2, [pc, #256]	; (8008c9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba0:	0e5b      	lsrs	r3, r3, #25
 8008ba2:	61bb      	str	r3, [r7, #24]
 8008ba4:	e03d      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	61bb      	str	r3, [r7, #24]
 8008bac:	e039      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	69fa      	ldr	r2, [r7, #28]
 8008bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bba:	4a39      	ldr	r2, [pc, #228]	; (8008ca0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d906      	bls.n	8008bce <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	4a36      	ldr	r2, [pc, #216]	; (8008c9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc8:	0e5b      	lsrs	r3, r3, #25
 8008bca:	61bb      	str	r3, [r7, #24]
 8008bcc:	e029      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	61bb      	str	r3, [r7, #24]
 8008bd4:	e025      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10e      	bne.n	8008bfc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4a30      	ldr	r2, [pc, #192]	; (8008ca4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d906      	bls.n	8008bf4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	4a2c      	ldr	r2, [pc, #176]	; (8008c9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008bea:	fba2 2303 	umull	r2, r3, r2, r3
 8008bee:	0e1b      	lsrs	r3, r3, #24
 8008bf0:	61bb      	str	r3, [r7, #24]
 8008bf2:	e016      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	61bb      	str	r3, [r7, #24]
 8008bfa:	e012      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c08:	4a26      	ldr	r2, [pc, #152]	; (8008ca4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d906      	bls.n	8008c1c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	4a22      	ldr	r2, [pc, #136]	; (8008c9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008c12:	fba2 2303 	umull	r2, r3, r2, r3
 8008c16:	0e1b      	lsrs	r3, r3, #24
 8008c18:	61bb      	str	r3, [r7, #24]
 8008c1a:	e002      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681c      	ldr	r4, [r3, #0]
 8008c26:	466a      	mov	r2, sp
 8008c28:	f107 0314 	add.w	r3, r7, #20
 8008c2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c30:	e882 0003 	stmia.w	r2, {r0, r1}
 8008c34:	f107 0308 	add.w	r3, r7, #8
 8008c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 ffa0 	bl	8009b80 <SDMMC_Init>
 8008c40:	e008      	b.n	8008c54 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f001 f86d 	bl	8009d3c <SDMMC_CmdBlockLength>
 8008c62:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00c      	beq.n	8008c84 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a0a      	ldr	r2, [pc, #40]	; (8008c98 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008c70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	431a      	orrs	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	372c      	adds	r7, #44	; 0x2c
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd90      	pop	{r4, r7, pc}
 8008c98:	1fe00fff 	.word	0x1fe00fff
 8008c9c:	55e63b89 	.word	0x55e63b89
 8008ca0:	02faf080 	.word	0x02faf080
 8008ca4:	017d7840 	.word	0x017d7840

08008ca8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008cb4:	f107 030c 	add.w	r3, r7, #12
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fa40 	bl	8009140 <SD_SendStatus>
 8008cc0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d005      	beq.n	8008cd4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	0a5b      	lsrs	r3, r3, #9
 8008cd8:	f003 030f 	and.w	r3, r3, #15
 8008cdc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008cde:	693b      	ldr	r3, [r7, #16]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b090      	sub	sp, #64	; 0x40
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008cf4:	f7f8 fdb8 	bl	8001868 <HAL_GetTick>
 8008cf8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 ff97 	bl	8009c32 <SDMMC_GetPowerState>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d102      	bne.n	8008d10 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d0e:	e0b5      	b.n	8008e7c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d02e      	beq.n	8008d76 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 f9e2 	bl	800a0e6 <SDMMC_CmdSendCID>
 8008d22:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <SD_InitCard+0x46>
    {
      return errorstate;
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2c:	e0a6      	b.n	8008e7c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2100      	movs	r1, #0
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 ffc2 	bl	8009cbe <SDMMC_GetResponse>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2104      	movs	r1, #4
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 ffb9 	bl	8009cbe <SDMMC_GetResponse>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2108      	movs	r1, #8
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 ffb0 	bl	8009cbe <SDMMC_GetResponse>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	210c      	movs	r1, #12
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 ffa7 	bl	8009cbe <SDMMC_GetResponse>
 8008d70:	4602      	mov	r2, r0
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d01d      	beq.n	8008dba <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008d7e:	e019      	b.n	8008db4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f107 020a 	add.w	r2, r7, #10
 8008d88:	4611      	mov	r1, r2
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 f9ea 	bl	800a164 <SDMMC_CmdSetRelAdd>
 8008d90:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <SD_InitCard+0xb4>
      {
        return errorstate;
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	e06f      	b.n	8008e7c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008d9c:	f7f8 fd64 	bl	8001868 <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	f241 3287 	movw	r2, #4999	; 0x1387
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d902      	bls.n	8008db4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008dae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008db2:	e063      	b.n	8008e7c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008db4:	897b      	ldrh	r3, [r7, #10]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0e2      	beq.n	8008d80 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	d036      	beq.n	8008e30 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008dc2:	897b      	ldrh	r3, [r7, #10]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd2:	041b      	lsls	r3, r3, #16
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	f001 f9a4 	bl	800a124 <SDMMC_CmdSendCSD>
 8008ddc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <SD_InitCard+0x100>
    {
      return errorstate;
 8008de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de6:	e049      	b.n	8008e7c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2100      	movs	r1, #0
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 ff65 	bl	8009cbe <SDMMC_GetResponse>
 8008df4:	4602      	mov	r2, r0
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2104      	movs	r1, #4
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 ff5c 	bl	8009cbe <SDMMC_GetResponse>
 8008e06:	4602      	mov	r2, r0
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2108      	movs	r1, #8
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 ff53 	bl	8009cbe <SDMMC_GetResponse>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	210c      	movs	r1, #12
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 ff4a 	bl	8009cbe <SDMMC_GetResponse>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2104      	movs	r1, #4
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 ff41 	bl	8009cbe <SDMMC_GetResponse>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	0d1a      	lsrs	r2, r3, #20
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008e44:	f107 030c 	add.w	r3, r7, #12
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff fb8c 	bl	8008568 <HAL_SD_GetCardCSD>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d002      	beq.n	8008e5c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e5a:	e00f      	b.n	8008e7c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e64:	041b      	lsls	r3, r3, #16
 8008e66:	4619      	mov	r1, r3
 8008e68:	4610      	mov	r0, r2
 8008e6a:	f001 f853 	bl	8009f14 <SDMMC_CmdSelDesel>
 8008e6e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <SD_InitCard+0x192>
  {
    return errorstate;
 8008e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e78:	e000      	b.n	8008e7c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3740      	adds	r7, #64	; 0x40
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 f85c 	bl	8009f5a <SDMMC_CmdGoIdleState>
 8008ea2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <SD_PowerON+0x2a>
  {
    return errorstate;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	e072      	b.n	8008f94 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f001 f86f 	bl	8009f96 <SDMMC_CmdOperCond>
 8008eb8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ec0:	d10d      	bne.n	8008ede <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 f844 	bl	8009f5a <SDMMC_CmdGoIdleState>
 8008ed2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d004      	beq.n	8008ee4 <SD_PowerON+0x60>
    {
      return errorstate;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	e05a      	b.n	8008f94 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d137      	bne.n	8008f5c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f001 f86f 	bl	8009fd6 <SDMMC_CmdAppCommand>
 8008ef8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d02d      	beq.n	8008f5c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f04:	e046      	b.n	8008f94 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f001 f862 	bl	8009fd6 <SDMMC_CmdAppCommand>
 8008f12:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <SD_PowerON+0x9a>
    {
      return errorstate;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	e03a      	b.n	8008f94 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	491e      	ldr	r1, [pc, #120]	; (8008f9c <SD_PowerON+0x118>)
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 f879 	bl	800a01c <SDMMC_CmdAppOperCommand>
 8008f2a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f36:	e02d      	b.n	8008f94 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 febd 	bl	8009cbe <SDMMC_GetResponse>
 8008f44:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	0fdb      	lsrs	r3, r3, #31
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d101      	bne.n	8008f52 <SD_PowerON+0xce>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e000      	b.n	8008f54 <SD_PowerON+0xd0>
 8008f52:	2300      	movs	r3, #0
 8008f54:	613b      	str	r3, [r7, #16]

    count++;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d802      	bhi.n	8008f6c <SD_PowerON+0xe8>
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0cc      	beq.n	8008f06 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d902      	bls.n	8008f7c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008f76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f7a:	e00b      	b.n	8008f94 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3718      	adds	r7, #24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	c1100000 	.word	0xc1100000

08008fa0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08c      	sub	sp, #48	; 0x30
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008faa:	f7f8 fc5d 	bl	8001868 <HAL_GetTick>
 8008fae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fe7f 	bl	8009cbe <SDMMC_GetResponse>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fca:	d102      	bne.n	8008fd2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008fcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fd0:	e0b0      	b.n	8009134 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2140      	movs	r1, #64	; 0x40
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 feaf 	bl	8009d3c <SDMMC_CmdBlockLength>
 8008fde:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d005      	beq.n	8008ff2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008fee:	6a3b      	ldr	r3, [r7, #32]
 8008ff0:	e0a0      	b.n	8009134 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffa:	041b      	lsls	r3, r3, #16
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4610      	mov	r0, r2
 8009000:	f000 ffe9 	bl	8009fd6 <SDMMC_CmdAppCommand>
 8009004:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d005      	beq.n	8009018 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	e08d      	b.n	8009134 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800901c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800901e:	2340      	movs	r3, #64	; 0x40
 8009020:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009022:	2360      	movs	r3, #96	; 0x60
 8009024:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009026:	2302      	movs	r3, #2
 8009028:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800902a:	2300      	movs	r3, #0
 800902c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800902e:	2301      	movs	r3, #1
 8009030:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f107 0208 	add.w	r2, r7, #8
 800903a:	4611      	mov	r1, r2
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fe51 	bl	8009ce4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4618      	mov	r0, r3
 8009048:	f001 f8d1 	bl	800a1ee <SDMMC_CmdStatusRegister>
 800904c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d02b      	beq.n	80090ac <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	e069      	b.n	8009134 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d013      	beq.n	8009096 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800906e:	2300      	movs	r3, #0
 8009070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009072:	e00d      	b.n	8009090 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fdab 	bl	8009bd4 <SDMMC_ReadFIFO>
 800907e:	4602      	mov	r2, r0
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	601a      	str	r2, [r3, #0]
        pData++;
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	3304      	adds	r3, #4
 8009088:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	3301      	adds	r3, #1
 800908e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009092:	2b07      	cmp	r3, #7
 8009094:	d9ee      	bls.n	8009074 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009096:	f7f8 fbe7 	bl	8001868 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090a4:	d102      	bne.n	80090ac <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80090a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090aa:	e043      	b.n	8009134 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0d2      	beq.n	8009060 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c0:	f003 0308 	and.w	r3, r3, #8
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80090c8:	2308      	movs	r3, #8
 80090ca:	e033      	b.n	8009134 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80090da:	2302      	movs	r3, #2
 80090dc:	e02a      	b.n	8009134 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e4:	f003 0320 	and.w	r3, r3, #32
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d017      	beq.n	800911c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80090ec:	2320      	movs	r3, #32
 80090ee:	e021      	b.n	8009134 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 fd6d 	bl	8009bd4 <SDMMC_ReadFIFO>
 80090fa:	4602      	mov	r2, r0
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	601a      	str	r2, [r3, #0]
    pData++;
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	3304      	adds	r3, #4
 8009104:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009106:	f7f8 fbaf 	bl	8001868 <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009114:	d102      	bne.n	800911c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009116:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800911a:	e00b      	b.n	8009134 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e2      	bne.n	80090f0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a03      	ldr	r2, [pc, #12]	; (800913c <SD_SendSDStatus+0x19c>)
 8009130:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3730      	adds	r7, #48	; 0x30
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	18000f3a 	.word	0x18000f3a

08009140 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d102      	bne.n	8009156 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009150:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009154:	e018      	b.n	8009188 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915e:	041b      	lsls	r3, r3, #16
 8009160:	4619      	mov	r1, r3
 8009162:	4610      	mov	r0, r2
 8009164:	f001 f820 	bl	800a1a8 <SDMMC_CmdSendStatus>
 8009168:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	e009      	b.n	8009188 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2100      	movs	r1, #0
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fd9f 	bl	8009cbe <SDMMC_GetResponse>
 8009180:	4602      	mov	r2, r0
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009198:	2300      	movs	r3, #0
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	2300      	movs	r3, #0
 800919e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2100      	movs	r1, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fd89 	bl	8009cbe <SDMMC_GetResponse>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091b6:	d102      	bne.n	80091be <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091bc:	e02f      	b.n	800921e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80091be:	f107 030c 	add.w	r3, r7, #12
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f879 	bl	80092bc <SD_FindSCR>
 80091ca:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	e023      	b.n	800921e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d01c      	beq.n	800921a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e8:	041b      	lsls	r3, r3, #16
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f000 fef2 	bl	8009fd6 <SDMMC_CmdAppCommand>
 80091f2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	e00f      	b.n	800921e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2102      	movs	r1, #2
 8009204:	4618      	mov	r0, r3
 8009206:	f000 ff29 	bl	800a05c <SDMMC_CmdBusWidth>
 800920a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	e003      	b.n	800921e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009216:	2300      	movs	r3, #0
 8009218:	e001      	b.n	800921e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800921a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800921e:	4618      	mov	r0, r3
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b086      	sub	sp, #24
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800922e:	2300      	movs	r3, #0
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	2300      	movs	r3, #0
 8009234:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2100      	movs	r1, #0
 800923c:	4618      	mov	r0, r3
 800923e:	f000 fd3e 	bl	8009cbe <SDMMC_GetResponse>
 8009242:	4603      	mov	r3, r0
 8009244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800924c:	d102      	bne.n	8009254 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800924e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009252:	e02f      	b.n	80092b4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009254:	f107 030c 	add.w	r3, r7, #12
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f82e 	bl	80092bc <SD_FindSCR>
 8009260:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	e023      	b.n	80092b4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d01c      	beq.n	80092b0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927e:	041b      	lsls	r3, r3, #16
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f000 fea7 	bl	8009fd6 <SDMMC_CmdAppCommand>
 8009288:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	e00f      	b.n	80092b4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2100      	movs	r1, #0
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fede 	bl	800a05c <SDMMC_CmdBusWidth>
 80092a0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	e003      	b.n	80092b4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80092ac:	2300      	movs	r3, #0
 80092ae:	e001      	b.n	80092b4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80092b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08e      	sub	sp, #56	; 0x38
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80092c6:	f7f8 facf 	bl	8001868 <HAL_GetTick>
 80092ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80092d0:	2300      	movs	r3, #0
 80092d2:	60bb      	str	r3, [r7, #8]
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2108      	movs	r1, #8
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 fd2a 	bl	8009d3c <SDMMC_CmdBlockLength>
 80092e8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80092f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f2:	e0ad      	b.n	8009450 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fc:	041b      	lsls	r3, r3, #16
 80092fe:	4619      	mov	r1, r3
 8009300:	4610      	mov	r0, r2
 8009302:	f000 fe68 	bl	8009fd6 <SDMMC_CmdAppCommand>
 8009306:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <SD_FindSCR+0x56>
  {
    return errorstate;
 800930e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009310:	e09e      	b.n	8009450 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009316:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009318:	2308      	movs	r3, #8
 800931a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800931c:	2330      	movs	r3, #48	; 0x30
 800931e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009320:	2302      	movs	r3, #2
 8009322:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009324:	2300      	movs	r3, #0
 8009326:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009328:	2301      	movs	r3, #1
 800932a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f107 0210 	add.w	r2, r7, #16
 8009334:	4611      	mov	r1, r2
 8009336:	4618      	mov	r0, r3
 8009338:	f000 fcd4 	bl	8009ce4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4618      	mov	r0, r3
 8009342:	f000 feae 	bl	800a0a2 <SDMMC_CmdSendSCR>
 8009346:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	2b00      	cmp	r3, #0
 800934c:	d027      	beq.n	800939e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	e07e      	b.n	8009450 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d113      	bne.n	8009388 <SD_FindSCR+0xcc>
 8009360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009362:	2b00      	cmp	r3, #0
 8009364:	d110      	bne.n	8009388 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4618      	mov	r0, r3
 800936c:	f000 fc32 	bl	8009bd4 <SDMMC_ReadFIFO>
 8009370:	4603      	mov	r3, r0
 8009372:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4618      	mov	r0, r3
 800937a:	f000 fc2b 	bl	8009bd4 <SDMMC_ReadFIFO>
 800937e:	4603      	mov	r3, r0
 8009380:	60fb      	str	r3, [r7, #12]
      index++;
 8009382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009384:	3301      	adds	r3, #1
 8009386:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009388:	f7f8 fa6e 	bl	8001868 <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009396:	d102      	bne.n	800939e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800939c:	e058      	b.n	8009450 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093a4:	f240 532a 	movw	r3, #1322	; 0x52a
 80093a8:	4013      	ands	r3, r2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0d1      	beq.n	8009352 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b4:	f003 0308 	and.w	r3, r3, #8
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d005      	beq.n	80093c8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2208      	movs	r2, #8
 80093c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80093c4:	2308      	movs	r3, #8
 80093c6:	e043      	b.n	8009450 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ce:	f003 0302 	and.w	r3, r3, #2
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d005      	beq.n	80093e2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2202      	movs	r2, #2
 80093dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80093de:	2302      	movs	r3, #2
 80093e0:	e036      	b.n	8009450 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e8:	f003 0320 	and.w	r3, r3, #32
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d005      	beq.n	80093fc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2220      	movs	r2, #32
 80093f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80093f8:	2320      	movs	r3, #32
 80093fa:	e029      	b.n	8009450 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a15      	ldr	r2, [pc, #84]	; (8009458 <SD_FindSCR+0x19c>)
 8009402:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	061a      	lsls	r2, r3, #24
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	021b      	lsls	r3, r3, #8
 800940c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009410:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	0a1b      	lsrs	r3, r3, #8
 8009416:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800941a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	0e1b      	lsrs	r3, r3, #24
 8009420:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	601a      	str	r2, [r3, #0]
    scr++;
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	3304      	adds	r3, #4
 800942a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	061a      	lsls	r2, r3, #24
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	021b      	lsls	r3, r3, #8
 8009434:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009438:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	0a1b      	lsrs	r3, r3, #8
 800943e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009442:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	0e1b      	lsrs	r3, r3, #24
 8009448:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800944a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3738      	adds	r7, #56	; 0x38
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	18000f3a 	.word	0x18000f3a

0800945c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	2b1f      	cmp	r3, #31
 8009470:	d936      	bls.n	80094e0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8009472:	2300      	movs	r3, #0
 8009474:	617b      	str	r3, [r7, #20]
 8009476:	e027      	b.n	80094c8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4618      	mov	r0, r3
 800947e:	f000 fba9 	bl	8009bd4 <SDMMC_ReadFIFO>
 8009482:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	b2da      	uxtb	r2, r3
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	3301      	adds	r3, #1
 8009490:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	0a1b      	lsrs	r3, r3, #8
 8009496:	b2da      	uxtb	r2, r3
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	3301      	adds	r3, #1
 80094a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	0c1b      	lsrs	r3, r3, #16
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	3301      	adds	r3, #1
 80094b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	0e1b      	lsrs	r3, r3, #24
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	3301      	adds	r3, #1
 80094c0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	3301      	adds	r3, #1
 80094c6:	617b      	str	r3, [r7, #20]
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2b07      	cmp	r3, #7
 80094cc:	d9d4      	bls.n	8009478 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d8:	f1a3 0220 	sub.w	r2, r3, #32
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80094e0:	bf00      	nop
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	2b1f      	cmp	r3, #31
 80094fc:	d93a      	bls.n	8009574 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80094fe:	2300      	movs	r3, #0
 8009500:	617b      	str	r3, [r7, #20]
 8009502:	e02b      	b.n	800955c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	60fb      	str	r3, [r7, #12]
      tmp++;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	3301      	adds	r3, #1
 800950e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	021a      	lsls	r2, r3, #8
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	4313      	orrs	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	3301      	adds	r3, #1
 8009520:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	041a      	lsls	r2, r3, #16
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	3301      	adds	r3, #1
 8009532:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	061a      	lsls	r2, r3, #24
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4313      	orrs	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	3301      	adds	r3, #1
 8009544:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f107 020c 	add.w	r2, r7, #12
 800954e:	4611      	mov	r1, r2
 8009550:	4618      	mov	r0, r3
 8009552:	f000 fb4c 	bl	8009bee <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	3301      	adds	r3, #1
 800955a:	617b      	str	r3, [r7, #20]
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2b07      	cmp	r3, #7
 8009560:	d9d0      	bls.n	8009504 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	f1a3 0220 	sub.w	r2, r3, #32
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	621a      	str	r2, [r3, #32]
  }
}
 8009574:	bf00      	nop
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e049      	b.n	8009672 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d106      	bne.n	80095f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f841 	bl	800967a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2202      	movs	r2, #2
 80095fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3304      	adds	r3, #4
 8009608:	4619      	mov	r1, r3
 800960a:	4610      	mov	r0, r2
 800960c:	f000 fa00 	bl	8009a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009682:	bf00      	nop
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
	...

08009690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d001      	beq.n	80096a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e054      	b.n	8009752 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f042 0201 	orr.w	r2, r2, #1
 80096be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a26      	ldr	r2, [pc, #152]	; (8009760 <HAL_TIM_Base_Start_IT+0xd0>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d022      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x80>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096d2:	d01d      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x80>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a22      	ldr	r2, [pc, #136]	; (8009764 <HAL_TIM_Base_Start_IT+0xd4>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d018      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x80>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a21      	ldr	r2, [pc, #132]	; (8009768 <HAL_TIM_Base_Start_IT+0xd8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d013      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x80>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a1f      	ldr	r2, [pc, #124]	; (800976c <HAL_TIM_Base_Start_IT+0xdc>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00e      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x80>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a1e      	ldr	r2, [pc, #120]	; (8009770 <HAL_TIM_Base_Start_IT+0xe0>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d009      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x80>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a1c      	ldr	r2, [pc, #112]	; (8009774 <HAL_TIM_Base_Start_IT+0xe4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d004      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x80>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a1b      	ldr	r2, [pc, #108]	; (8009778 <HAL_TIM_Base_Start_IT+0xe8>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d115      	bne.n	800973c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	4b19      	ldr	r3, [pc, #100]	; (800977c <HAL_TIM_Base_Start_IT+0xec>)
 8009718:	4013      	ands	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2b06      	cmp	r3, #6
 8009720:	d015      	beq.n	800974e <HAL_TIM_Base_Start_IT+0xbe>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009728:	d011      	beq.n	800974e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f042 0201 	orr.w	r2, r2, #1
 8009738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800973a:	e008      	b.n	800974e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0201 	orr.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	e000      	b.n	8009750 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800974e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	40010000 	.word	0x40010000
 8009764:	40000400 	.word	0x40000400
 8009768:	40000800 	.word	0x40000800
 800976c:	40000c00 	.word	0x40000c00
 8009770:	40010400 	.word	0x40010400
 8009774:	40001800 	.word	0x40001800
 8009778:	40014000 	.word	0x40014000
 800977c:	00010007 	.word	0x00010007

08009780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	2b02      	cmp	r3, #2
 8009794:	d122      	bne.n	80097dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d11b      	bne.n	80097dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f06f 0202 	mvn.w	r2, #2
 80097ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f905 	bl	80099d2 <HAL_TIM_IC_CaptureCallback>
 80097c8:	e005      	b.n	80097d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f8f7 	bl	80099be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f908 	bl	80099e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	f003 0304 	and.w	r3, r3, #4
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d122      	bne.n	8009830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	2b04      	cmp	r3, #4
 80097f6:	d11b      	bne.n	8009830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f06f 0204 	mvn.w	r2, #4
 8009800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2202      	movs	r2, #2
 8009806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009812:	2b00      	cmp	r3, #0
 8009814:	d003      	beq.n	800981e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f8db 	bl	80099d2 <HAL_TIM_IC_CaptureCallback>
 800981c:	e005      	b.n	800982a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f8cd 	bl	80099be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f8de 	bl	80099e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	f003 0308 	and.w	r3, r3, #8
 800983a:	2b08      	cmp	r3, #8
 800983c:	d122      	bne.n	8009884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	f003 0308 	and.w	r3, r3, #8
 8009848:	2b08      	cmp	r3, #8
 800984a:	d11b      	bne.n	8009884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f06f 0208 	mvn.w	r2, #8
 8009854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2204      	movs	r2, #4
 800985a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	f003 0303 	and.w	r3, r3, #3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f8b1 	bl	80099d2 <HAL_TIM_IC_CaptureCallback>
 8009870:	e005      	b.n	800987e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f8a3 	bl	80099be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f8b4 	bl	80099e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	f003 0310 	and.w	r3, r3, #16
 800988e:	2b10      	cmp	r3, #16
 8009890:	d122      	bne.n	80098d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f003 0310 	and.w	r3, r3, #16
 800989c:	2b10      	cmp	r3, #16
 800989e:	d11b      	bne.n	80098d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f06f 0210 	mvn.w	r2, #16
 80098a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2208      	movs	r2, #8
 80098ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f887 	bl	80099d2 <HAL_TIM_IC_CaptureCallback>
 80098c4:	e005      	b.n	80098d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f879 	bl	80099be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f88a 	bl	80099e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d10e      	bne.n	8009904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d107      	bne.n	8009904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f06f 0201 	mvn.w	r2, #1
 80098fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7f7 fb92 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800990e:	2b80      	cmp	r3, #128	; 0x80
 8009910:	d10e      	bne.n	8009930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800991c:	2b80      	cmp	r3, #128	; 0x80
 800991e:	d107      	bne.n	8009930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f914 	bl	8009b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800993a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800993e:	d10e      	bne.n	800995e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994a:	2b80      	cmp	r3, #128	; 0x80
 800994c:	d107      	bne.n	800995e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f907 	bl	8009b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009968:	2b40      	cmp	r3, #64	; 0x40
 800996a:	d10e      	bne.n	800998a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009976:	2b40      	cmp	r3, #64	; 0x40
 8009978:	d107      	bne.n	800998a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f838 	bl	80099fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	f003 0320 	and.w	r3, r3, #32
 8009994:	2b20      	cmp	r3, #32
 8009996:	d10e      	bne.n	80099b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f003 0320 	and.w	r3, r3, #32
 80099a2:	2b20      	cmp	r3, #32
 80099a4:	d107      	bne.n	80099b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f06f 0220 	mvn.w	r2, #32
 80099ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f8c7 	bl	8009b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099b6:	bf00      	nop
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099c6:	bf00      	nop
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b083      	sub	sp, #12
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a02:	bf00      	nop
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
	...

08009a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a40      	ldr	r2, [pc, #256]	; (8009b24 <TIM_Base_SetConfig+0x114>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d013      	beq.n	8009a50 <TIM_Base_SetConfig+0x40>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a2e:	d00f      	beq.n	8009a50 <TIM_Base_SetConfig+0x40>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a3d      	ldr	r2, [pc, #244]	; (8009b28 <TIM_Base_SetConfig+0x118>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d00b      	beq.n	8009a50 <TIM_Base_SetConfig+0x40>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a3c      	ldr	r2, [pc, #240]	; (8009b2c <TIM_Base_SetConfig+0x11c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d007      	beq.n	8009a50 <TIM_Base_SetConfig+0x40>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a3b      	ldr	r2, [pc, #236]	; (8009b30 <TIM_Base_SetConfig+0x120>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d003      	beq.n	8009a50 <TIM_Base_SetConfig+0x40>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a3a      	ldr	r2, [pc, #232]	; (8009b34 <TIM_Base_SetConfig+0x124>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d108      	bne.n	8009a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a2f      	ldr	r2, [pc, #188]	; (8009b24 <TIM_Base_SetConfig+0x114>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d01f      	beq.n	8009aaa <TIM_Base_SetConfig+0x9a>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a70:	d01b      	beq.n	8009aaa <TIM_Base_SetConfig+0x9a>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a2c      	ldr	r2, [pc, #176]	; (8009b28 <TIM_Base_SetConfig+0x118>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d017      	beq.n	8009aaa <TIM_Base_SetConfig+0x9a>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a2b      	ldr	r2, [pc, #172]	; (8009b2c <TIM_Base_SetConfig+0x11c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d013      	beq.n	8009aaa <TIM_Base_SetConfig+0x9a>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a2a      	ldr	r2, [pc, #168]	; (8009b30 <TIM_Base_SetConfig+0x120>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d00f      	beq.n	8009aaa <TIM_Base_SetConfig+0x9a>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a29      	ldr	r2, [pc, #164]	; (8009b34 <TIM_Base_SetConfig+0x124>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00b      	beq.n	8009aaa <TIM_Base_SetConfig+0x9a>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a28      	ldr	r2, [pc, #160]	; (8009b38 <TIM_Base_SetConfig+0x128>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d007      	beq.n	8009aaa <TIM_Base_SetConfig+0x9a>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a27      	ldr	r2, [pc, #156]	; (8009b3c <TIM_Base_SetConfig+0x12c>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d003      	beq.n	8009aaa <TIM_Base_SetConfig+0x9a>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a26      	ldr	r2, [pc, #152]	; (8009b40 <TIM_Base_SetConfig+0x130>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d108      	bne.n	8009abc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a10      	ldr	r2, [pc, #64]	; (8009b24 <TIM_Base_SetConfig+0x114>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d00f      	beq.n	8009b08 <TIM_Base_SetConfig+0xf8>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a12      	ldr	r2, [pc, #72]	; (8009b34 <TIM_Base_SetConfig+0x124>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d00b      	beq.n	8009b08 <TIM_Base_SetConfig+0xf8>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a11      	ldr	r2, [pc, #68]	; (8009b38 <TIM_Base_SetConfig+0x128>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d007      	beq.n	8009b08 <TIM_Base_SetConfig+0xf8>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a10      	ldr	r2, [pc, #64]	; (8009b3c <TIM_Base_SetConfig+0x12c>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d003      	beq.n	8009b08 <TIM_Base_SetConfig+0xf8>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a0f      	ldr	r2, [pc, #60]	; (8009b40 <TIM_Base_SetConfig+0x130>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d103      	bne.n	8009b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	691a      	ldr	r2, [r3, #16]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	615a      	str	r2, [r3, #20]
}
 8009b16:	bf00      	nop
 8009b18:	3714      	adds	r7, #20
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	40010000 	.word	0x40010000
 8009b28:	40000400 	.word	0x40000400
 8009b2c:	40000800 	.word	0x40000800
 8009b30:	40000c00 	.word	0x40000c00
 8009b34:	40010400 	.word	0x40010400
 8009b38:	40014000 	.word	0x40014000
 8009b3c:	40014400 	.word	0x40014400
 8009b40:	40014800 	.word	0x40014800

08009b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009b80:	b084      	sub	sp, #16
 8009b82:	b480      	push	{r7}
 8009b84:	b085      	sub	sp, #20
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	f107 001c 	add.w	r0, r7, #28
 8009b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009b96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009b98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009b9a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009b9e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009ba2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009ba6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <SDMMC_Init+0x50>)
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	431a      	orrs	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	b004      	add	sp, #16
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	ffc02c00 	.word	0xffc02c00

08009bd4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	370c      	adds	r7, #12
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b083      	sub	sp, #12
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f043 0203 	orr.w	r2, r3, #3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f003 0303 	and.w	r3, r3, #3
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
	...

08009c50 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009c6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009c74:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009c7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68da      	ldr	r2, [r3, #12]
 8009c86:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <SDMMC_SendCommand+0x50>)
 8009c88:	4013      	ands	r3, r2
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	431a      	orrs	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	fffee0c0 	.word	0xfffee0c0

08009ca4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	b2db      	uxtb	r3, r3
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b085      	sub	sp, #20
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3314      	adds	r3, #20
 8009ccc:	461a      	mov	r2, r3
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009d0a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009d10:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009d16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	431a      	orrs	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0

}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b088      	sub	sp, #32
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009d4a:	2310      	movs	r3, #16
 8009d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d54:	2300      	movs	r3, #0
 8009d56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d5e:	f107 0308 	add.w	r3, r7, #8
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff ff73 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d6e:	2110      	movs	r1, #16
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fa5f 	bl	800a234 <SDMMC_GetCmdResp1>
 8009d76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d78:	69fb      	ldr	r3, [r7, #28]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3720      	adds	r7, #32
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b088      	sub	sp, #32
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009d90:	2311      	movs	r3, #17
 8009d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009da2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009da4:	f107 0308 	add.w	r3, r7, #8
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff ff50 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db4:	2111      	movs	r1, #17
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fa3c 	bl	800a234 <SDMMC_GetCmdResp1>
 8009dbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dbe:	69fb      	ldr	r3, [r7, #28]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3720      	adds	r7, #32
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009dd6:	2312      	movs	r3, #18
 8009dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009de0:	2300      	movs	r3, #0
 8009de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009de8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dea:	f107 0308 	add.w	r3, r7, #8
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff ff2d 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dfa:	2112      	movs	r1, #18
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fa19 	bl	800a234 <SDMMC_GetCmdResp1>
 8009e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e04:	69fb      	ldr	r3, [r7, #28]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3720      	adds	r7, #32
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b088      	sub	sp, #32
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009e1c:	2318      	movs	r3, #24
 8009e1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e26:	2300      	movs	r3, #0
 8009e28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e30:	f107 0308 	add.w	r3, r7, #8
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7ff ff0a 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e40:	2118      	movs	r1, #24
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f9f6 	bl	800a234 <SDMMC_GetCmdResp1>
 8009e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e4a:	69fb      	ldr	r3, [r7, #28]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3720      	adds	r7, #32
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b088      	sub	sp, #32
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009e62:	2319      	movs	r3, #25
 8009e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e76:	f107 0308 	add.w	r3, r7, #8
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff fee7 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e86:	2119      	movs	r1, #25
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f9d3 	bl	800a234 <SDMMC_GetCmdResp1>
 8009e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e90:	69fb      	ldr	r3, [r7, #28]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3720      	adds	r7, #32
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eba:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ed4:	f107 0308 	add.w	r3, r7, #8
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7ff feb8 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009ee0:	4a0b      	ldr	r2, [pc, #44]	; (8009f10 <SDMMC_CmdStopTransfer+0x74>)
 8009ee2:	210c      	movs	r1, #12
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f9a5 	bl	800a234 <SDMMC_GetCmdResp1>
 8009eea:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009efe:	d101      	bne.n	8009f04 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009f00:	2300      	movs	r3, #0
 8009f02:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009f04:	69fb      	ldr	r3, [r7, #28]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3720      	adds	r7, #32
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	05f5e100 	.word	0x05f5e100

08009f14 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009f22:	2307      	movs	r3, #7
 8009f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f36:	f107 0308 	add.w	r3, r7, #8
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7ff fe87 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f46:	2107      	movs	r1, #7
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f973 	bl	800a234 <SDMMC_GetCmdResp1>
 8009f4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f50:	69fb      	ldr	r3, [r7, #28]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3720      	adds	r7, #32
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b088      	sub	sp, #32
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f78:	f107 0308 	add.w	r3, r7, #8
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7ff fe66 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fb97 	bl	800a6b8 <SDMMC_GetCmdError>
 8009f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f8c:	69fb      	ldr	r3, [r7, #28]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3720      	adds	r7, #32
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b088      	sub	sp, #32
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009f9e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009fa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009fa4:	2308      	movs	r3, #8
 8009fa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fb8:	f107 0308 	add.w	r3, r7, #8
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7ff fe46 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fb29 	bl	800a61c <SDMMC_GetCmdResp7>
 8009fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fcc:	69fb      	ldr	r3, [r7, #28]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3720      	adds	r7, #32
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b088      	sub	sp, #32
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009fe4:	2337      	movs	r3, #55	; 0x37
 8009fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ff6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ff8:	f107 0308 	add.w	r3, r7, #8
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff fe26 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a004:	f241 3288 	movw	r2, #5000	; 0x1388
 800a008:	2137      	movs	r1, #55	; 0x37
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f912 	bl	800a234 <SDMMC_GetCmdResp1>
 800a010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a012:	69fb      	ldr	r3, [r7, #28]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3720      	adds	r7, #32
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b088      	sub	sp, #32
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a02a:	2329      	movs	r3, #41	; 0x29
 800a02c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a02e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a034:	2300      	movs	r3, #0
 800a036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a03c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a03e:	f107 0308 	add.w	r3, r7, #8
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff fe03 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fa2e 	bl	800a4ac <SDMMC_GetCmdResp3>
 800a050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a052:	69fb      	ldr	r3, [r7, #28]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3720      	adds	r7, #32
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a06a:	2306      	movs	r3, #6
 800a06c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a06e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a074:	2300      	movs	r3, #0
 800a076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a07c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a07e:	f107 0308 	add.w	r3, r7, #8
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff fde3 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a08a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a08e:	2106      	movs	r1, #6
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f8cf 	bl	800a234 <SDMMC_GetCmdResp1>
 800a096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a098:	69fb      	ldr	r3, [r7, #28]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b088      	sub	sp, #32
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a0ae:	2333      	movs	r3, #51	; 0x33
 800a0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0c2:	f107 0308 	add.w	r3, r7, #8
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff fdc1 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a0ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d2:	2133      	movs	r1, #51	; 0x33
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f8ad 	bl	800a234 <SDMMC_GetCmdResp1>
 800a0da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0dc:	69fb      	ldr	r3, [r7, #28]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3720      	adds	r7, #32
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b088      	sub	sp, #32
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a0f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a0fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a104:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a106:	f107 0308 	add.w	r3, r7, #8
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff fd9f 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f980 	bl	800a418 <SDMMC_GetCmdResp2>
 800a118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a11a:	69fb      	ldr	r3, [r7, #28]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3720      	adds	r7, #32
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b088      	sub	sp, #32
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a132:	2309      	movs	r3, #9
 800a134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a136:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a13a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a13c:	2300      	movs	r3, #0
 800a13e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a146:	f107 0308 	add.w	r3, r7, #8
 800a14a:	4619      	mov	r1, r3
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7ff fd7f 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f960 	bl	800a418 <SDMMC_GetCmdResp2>
 800a158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a15a:	69fb      	ldr	r3, [r7, #28]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3720      	adds	r7, #32
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b088      	sub	sp, #32
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a16e:	2300      	movs	r3, #0
 800a170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a172:	2303      	movs	r3, #3
 800a174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a17a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a17c:	2300      	movs	r3, #0
 800a17e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a184:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a186:	f107 0308 	add.w	r3, r7, #8
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7ff fd5f 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	2103      	movs	r1, #3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f9c8 	bl	800a52c <SDMMC_GetCmdResp6>
 800a19c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a19e:	69fb      	ldr	r3, [r7, #28]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3720      	adds	r7, #32
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b088      	sub	sp, #32
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a1b6:	230d      	movs	r3, #13
 800a1b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1ca:	f107 0308 	add.w	r3, r7, #8
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7ff fd3d 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a1d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1da:	210d      	movs	r1, #13
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f829 	bl	800a234 <SDMMC_GetCmdResp1>
 800a1e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1e4:	69fb      	ldr	r3, [r7, #28]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3720      	adds	r7, #32
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b088      	sub	sp, #32
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a1fa:	230d      	movs	r3, #13
 800a1fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a202:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a204:	2300      	movs	r3, #0
 800a206:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a20c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a20e:	f107 0308 	add.w	r3, r7, #8
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff fd1b 	bl	8009c50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a21a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a21e:	210d      	movs	r1, #13
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f807 	bl	800a234 <SDMMC_GetCmdResp1>
 800a226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a228:	69fb      	ldr	r3, [r7, #28]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3720      	adds	r7, #32
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	460b      	mov	r3, r1
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a242:	4b70      	ldr	r3, [pc, #448]	; (800a404 <SDMMC_GetCmdResp1+0x1d0>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a70      	ldr	r2, [pc, #448]	; (800a408 <SDMMC_GetCmdResp1+0x1d4>)
 800a248:	fba2 2303 	umull	r2, r3, r2, r3
 800a24c:	0a5a      	lsrs	r2, r3, #9
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	fb02 f303 	mul.w	r3, r2, r3
 800a254:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	1e5a      	subs	r2, r3, #1
 800a25a:	61fa      	str	r2, [r7, #28]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d102      	bne.n	800a266 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a260:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a264:	e0c9      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	4b67      	ldr	r3, [pc, #412]	; (800a40c <SDMMC_GetCmdResp1+0x1d8>)
 800a270:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0ef      	beq.n	800a256 <SDMMC_GetCmdResp1+0x22>
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1ea      	bne.n	800a256 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d004      	beq.n	800a296 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2204      	movs	r2, #4
 800a290:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a292:	2304      	movs	r3, #4
 800a294:	e0b1      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d004      	beq.n	800a2ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e0a6      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4a58      	ldr	r2, [pc, #352]	; (800a410 <SDMMC_GetCmdResp1+0x1dc>)
 800a2b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f7ff fcf6 	bl	8009ca4 <SDMMC_GetCommandResponse>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	7afb      	ldrb	r3, [r7, #11]
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d001      	beq.n	800a2c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e099      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7ff fcf8 	bl	8009cbe <SDMMC_GetResponse>
 800a2ce:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	4b50      	ldr	r3, [pc, #320]	; (800a414 <SDMMC_GetCmdResp1+0x1e0>)
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d101      	bne.n	800a2de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e08d      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	da02      	bge.n	800a2ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a2e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2e8:	e087      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a2f4:	2340      	movs	r3, #64	; 0x40
 800a2f6:	e080      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a302:	2380      	movs	r3, #128	; 0x80
 800a304:	e079      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a310:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a314:	e071      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a320:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a324:	e069      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a334:	e061      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a344:	e059      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a354:	e051      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d002      	beq.n	800a366 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a364:	e049      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a370:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a374:	e041      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a384:	e039      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a394:	e031      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a3a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a3a4:	e029      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a3b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a3b4:	e021      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a3c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a3c4:	e019      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a3d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a3d4:	e011      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a3e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a3e4:	e009      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f003 0308 	and.w	r3, r3, #8
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a3f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a3f4:	e001      	b.n	800a3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3720      	adds	r7, #32
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	24000000 	.word	0x24000000
 800a408:	10624dd3 	.word	0x10624dd3
 800a40c:	00200045 	.word	0x00200045
 800a410:	002000c5 	.word	0x002000c5
 800a414:	fdffe008 	.word	0xfdffe008

0800a418 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a420:	4b1f      	ldr	r3, [pc, #124]	; (800a4a0 <SDMMC_GetCmdResp2+0x88>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a1f      	ldr	r2, [pc, #124]	; (800a4a4 <SDMMC_GetCmdResp2+0x8c>)
 800a426:	fba2 2303 	umull	r2, r3, r2, r3
 800a42a:	0a5b      	lsrs	r3, r3, #9
 800a42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a430:	fb02 f303 	mul.w	r3, r2, r3
 800a434:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	1e5a      	subs	r2, r3, #1
 800a43a:	60fa      	str	r2, [r7, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d102      	bne.n	800a446 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a440:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a444:	e026      	b.n	800a494 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a44a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a452:	2b00      	cmp	r3, #0
 800a454:	d0ef      	beq.n	800a436 <SDMMC_GetCmdResp2+0x1e>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1ea      	bne.n	800a436 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d004      	beq.n	800a476 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2204      	movs	r2, #4
 800a470:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a472:	2304      	movs	r3, #4
 800a474:	e00e      	b.n	800a494 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d004      	beq.n	800a48c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2201      	movs	r2, #1
 800a486:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a488:	2301      	movs	r3, #1
 800a48a:	e003      	b.n	800a494 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a06      	ldr	r2, [pc, #24]	; (800a4a8 <SDMMC_GetCmdResp2+0x90>)
 800a490:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	24000000 	.word	0x24000000
 800a4a4:	10624dd3 	.word	0x10624dd3
 800a4a8:	002000c5 	.word	0x002000c5

0800a4ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4b4:	4b1a      	ldr	r3, [pc, #104]	; (800a520 <SDMMC_GetCmdResp3+0x74>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a1a      	ldr	r2, [pc, #104]	; (800a524 <SDMMC_GetCmdResp3+0x78>)
 800a4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a4be:	0a5b      	lsrs	r3, r3, #9
 800a4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4c4:	fb02 f303 	mul.w	r3, r2, r3
 800a4c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	1e5a      	subs	r2, r3, #1
 800a4ce:	60fa      	str	r2, [r7, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4d8:	e01b      	b.n	800a512 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4de:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d0ef      	beq.n	800a4ca <SDMMC_GetCmdResp3+0x1e>
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1ea      	bne.n	800a4ca <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d004      	beq.n	800a50a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2204      	movs	r2, #4
 800a504:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a506:	2304      	movs	r3, #4
 800a508:	e003      	b.n	800a512 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a06      	ldr	r2, [pc, #24]	; (800a528 <SDMMC_GetCmdResp3+0x7c>)
 800a50e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	24000000 	.word	0x24000000
 800a524:	10624dd3 	.word	0x10624dd3
 800a528:	002000c5 	.word	0x002000c5

0800a52c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b088      	sub	sp, #32
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	460b      	mov	r3, r1
 800a536:	607a      	str	r2, [r7, #4]
 800a538:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a53a:	4b35      	ldr	r3, [pc, #212]	; (800a610 <SDMMC_GetCmdResp6+0xe4>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a35      	ldr	r2, [pc, #212]	; (800a614 <SDMMC_GetCmdResp6+0xe8>)
 800a540:	fba2 2303 	umull	r2, r3, r2, r3
 800a544:	0a5b      	lsrs	r3, r3, #9
 800a546:	f241 3288 	movw	r2, #5000	; 0x1388
 800a54a:	fb02 f303 	mul.w	r3, r2, r3
 800a54e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	1e5a      	subs	r2, r3, #1
 800a554:	61fa      	str	r2, [r7, #28]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d102      	bne.n	800a560 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a55a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a55e:	e052      	b.n	800a606 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a564:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0ef      	beq.n	800a550 <SDMMC_GetCmdResp6+0x24>
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1ea      	bne.n	800a550 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57e:	f003 0304 	and.w	r3, r3, #4
 800a582:	2b00      	cmp	r3, #0
 800a584:	d004      	beq.n	800a590 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2204      	movs	r2, #4
 800a58a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a58c:	2304      	movs	r3, #4
 800a58e:	e03a      	b.n	800a606 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d004      	beq.n	800a5a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e02f      	b.n	800a606 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7ff fb7c 	bl	8009ca4 <SDMMC_GetCommandResponse>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	7afb      	ldrb	r3, [r7, #11]
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d001      	beq.n	800a5ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e025      	b.n	800a606 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	4a16      	ldr	r2, [pc, #88]	; (800a618 <SDMMC_GetCmdResp6+0xec>)
 800a5be:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f7ff fb7b 	bl	8009cbe <SDMMC_GetResponse>
 800a5c8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d106      	bne.n	800a5e2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	0c1b      	lsrs	r3, r3, #16
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	e011      	b.n	800a606 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a5ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5f0:	e009      	b.n	800a606 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a5fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a600:	e001      	b.n	800a606 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a606:	4618      	mov	r0, r3
 800a608:	3720      	adds	r7, #32
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	24000000 	.word	0x24000000
 800a614:	10624dd3 	.word	0x10624dd3
 800a618:	002000c5 	.word	0x002000c5

0800a61c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a624:	4b22      	ldr	r3, [pc, #136]	; (800a6b0 <SDMMC_GetCmdResp7+0x94>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a22      	ldr	r2, [pc, #136]	; (800a6b4 <SDMMC_GetCmdResp7+0x98>)
 800a62a:	fba2 2303 	umull	r2, r3, r2, r3
 800a62e:	0a5b      	lsrs	r3, r3, #9
 800a630:	f241 3288 	movw	r2, #5000	; 0x1388
 800a634:	fb02 f303 	mul.w	r3, r2, r3
 800a638:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	1e5a      	subs	r2, r3, #1
 800a63e:	60fa      	str	r2, [r7, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a644:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a648:	e02c      	b.n	800a6a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0ef      	beq.n	800a63a <SDMMC_GetCmdResp7+0x1e>
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1ea      	bne.n	800a63a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a668:	f003 0304 	and.w	r3, r3, #4
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d004      	beq.n	800a67a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2204      	movs	r2, #4
 800a674:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a676:	2304      	movs	r3, #4
 800a678:	e014      	b.n	800a6a4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	d004      	beq.n	800a690 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e009      	b.n	800a6a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2240      	movs	r2, #64	; 0x40
 800a6a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a6a2:	2300      	movs	r3, #0

}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	24000000 	.word	0x24000000
 800a6b4:	10624dd3 	.word	0x10624dd3

0800a6b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a6c0:	4b11      	ldr	r3, [pc, #68]	; (800a708 <SDMMC_GetCmdError+0x50>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a11      	ldr	r2, [pc, #68]	; (800a70c <SDMMC_GetCmdError+0x54>)
 800a6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ca:	0a5b      	lsrs	r3, r3, #9
 800a6cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6d0:	fb02 f303 	mul.w	r3, r2, r3
 800a6d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	1e5a      	subs	r2, r3, #1
 800a6da:	60fa      	str	r2, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6e4:	e009      	b.n	800a6fa <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d0f1      	beq.n	800a6d6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a06      	ldr	r2, [pc, #24]	; (800a710 <SDMMC_GetCmdError+0x58>)
 800a6f6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3714      	adds	r7, #20
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	24000000 	.word	0x24000000
 800a70c:	10624dd3 	.word	0x10624dd3
 800a710:	002000c5 	.word	0x002000c5

0800a714 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a714:	b480      	push	{r7}
 800a716:	af00      	add	r7, sp, #0
  //retSD = FATFS_LinkDriver(&SD_Driver, SDPath);

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a718:	bf00      	nop
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a722:	b480      	push	{r7}
 800a724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a726:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a728:	4618      	mov	r0, r3
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
	...

0800a734 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a73e:	f000 f885 	bl	800a84c <BSP_SD_IsDetected>
 800a742:	4603      	mov	r3, r0
 800a744:	2b01      	cmp	r3, #1
 800a746:	d001      	beq.n	800a74c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a748:	2302      	movs	r3, #2
 800a74a:	e012      	b.n	800a772 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a74c:	480b      	ldr	r0, [pc, #44]	; (800a77c <BSP_SD_Init+0x48>)
 800a74e:	f7fd fad9 	bl	8007d04 <HAL_SD_Init>
 800a752:	4603      	mov	r3, r0
 800a754:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a756:	79fb      	ldrb	r3, [r7, #7]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d109      	bne.n	800a770 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a75c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a760:	4806      	ldr	r0, [pc, #24]	; (800a77c <BSP_SD_Init+0x48>)
 800a762:	f7fe f98f 	bl	8008a84 <HAL_SD_ConfigWideBusOperation>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a770:	79fb      	ldrb	r3, [r7, #7]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	2400110c 	.word	0x2400110c

0800a780 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	68f9      	ldr	r1, [r7, #12]
 800a796:	4806      	ldr	r0, [pc, #24]	; (800a7b0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a798:	f7fd fbd4 	bl	8007f44 <HAL_SD_ReadBlocks_DMA>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3718      	adds	r7, #24
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	2400110c 	.word	0x2400110c

0800a7b4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	68f9      	ldr	r1, [r7, #12]
 800a7ca:	4806      	ldr	r0, [pc, #24]	; (800a7e4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a7cc:	f7fd fc62 	bl	8008094 <HAL_SD_WriteBlocks_DMA>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	2400110c 	.word	0x2400110c

0800a7e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a7ec:	4805      	ldr	r0, [pc, #20]	; (800a804 <BSP_SD_GetCardState+0x1c>)
 800a7ee:	f7fe fa5b 	bl	8008ca8 <HAL_SD_GetCardState>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	bf14      	ite	ne
 800a7f8:	2301      	movne	r3, #1
 800a7fa:	2300      	moveq	r3, #0
 800a7fc:	b2db      	uxtb	r3, r3
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	2400110c 	.word	0x2400110c

0800a808 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4803      	ldr	r0, [pc, #12]	; (800a820 <BSP_SD_GetCardInfo+0x18>)
 800a814:	f7fe f90a 	bl	8008a2c <HAL_SD_GetCardInfo>
}
 800a818:	bf00      	nop
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	2400110c 	.word	0x2400110c

0800a824 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a82c:	f000 fa4a 	bl	800acc4 <BSP_SD_WriteCpltCallback>
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a840:	f000 fa4e 	bl	800ace0 <BSP_SD_ReadCpltCallback>
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a852:	2301      	movs	r3, #1
 800a854:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a856:	f000 f80b 	bl	800a870 <BSP_PlatformIsDetected>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d101      	bne.n	800a864 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a860:	2300      	movs	r3, #0
 800a862:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a864:	79fb      	ldrb	r3, [r7, #7]
 800a866:	b2db      	uxtb	r3, r3
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a876:	2301      	movs	r3, #1
 800a878:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a87a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a87e:	4806      	ldr	r0, [pc, #24]	; (800a898 <BSP_PlatformIsDetected+0x28>)
 800a880:	f7f9 f8d8 	bl	8003a34 <HAL_GPIO_ReadPin>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a88a:	2300      	movs	r3, #0
 800a88c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a88e:	79fb      	ldrb	r3, [r7, #7]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	58022000 	.word	0x58022000

0800a89c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800a8a4:	f003 ff88 	bl	800e7b8 <osKernelSysTick>
 800a8a8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800a8aa:	e006      	b.n	800a8ba <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a8ac:	f7ff ff9c 	bl	800a7e8 <BSP_SD_GetCardState>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e009      	b.n	800a8ce <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800a8ba:	f003 ff7d 	bl	800e7b8 <osKernelSysTick>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d8f0      	bhi.n	800a8ac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a8ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
	...

0800a8d8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a8e2:	4b0b      	ldr	r3, [pc, #44]	; (800a910 <SD_CheckStatus+0x38>)
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a8e8:	f7ff ff7e 	bl	800a7e8 <BSP_SD_GetCardState>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d107      	bne.n	800a902 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a8f2:	4b07      	ldr	r3, [pc, #28]	; (800a910 <SD_CheckStatus+0x38>)
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	f023 0301 	bic.w	r3, r3, #1
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	4b04      	ldr	r3, [pc, #16]	; (800a910 <SD_CheckStatus+0x38>)
 800a900:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a902:	4b03      	ldr	r3, [pc, #12]	; (800a910 <SD_CheckStatus+0x38>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	b2db      	uxtb	r3, r3
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	2400000d 	.word	0x2400000d

0800a914 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a914:	b590      	push	{r4, r7, lr}
 800a916:	b087      	sub	sp, #28
 800a918:	af00      	add	r7, sp, #0
 800a91a:	4603      	mov	r3, r0
 800a91c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a91e:	4b20      	ldr	r3, [pc, #128]	; (800a9a0 <SD_initialize+0x8c>)
 800a920:	2201      	movs	r2, #1
 800a922:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800a924:	f003 ff3c 	bl	800e7a0 <osKernelRunning>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d030      	beq.n	800a990 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a92e:	f7ff ff01 	bl	800a734 <BSP_SD_Init>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d107      	bne.n	800a948 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff ffcc 	bl	800a8d8 <SD_CheckStatus>
 800a940:	4603      	mov	r3, r0
 800a942:	461a      	mov	r2, r3
 800a944:	4b16      	ldr	r3, [pc, #88]	; (800a9a0 <SD_initialize+0x8c>)
 800a946:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a948:	4b15      	ldr	r3, [pc, #84]	; (800a9a0 <SD_initialize+0x8c>)
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d01e      	beq.n	800a990 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800a952:	4b14      	ldr	r3, [pc, #80]	; (800a9a4 <SD_initialize+0x90>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10e      	bne.n	800a978 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800a95a:	4b13      	ldr	r3, [pc, #76]	; (800a9a8 <SD_initialize+0x94>)
 800a95c:	f107 0408 	add.w	r4, r7, #8
 800a960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a962:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800a966:	f107 0308 	add.w	r3, r7, #8
 800a96a:	2100      	movs	r1, #0
 800a96c:	4618      	mov	r0, r3
 800a96e:	f004 f8f8 	bl	800eb62 <osMessageCreate>
 800a972:	4603      	mov	r3, r0
 800a974:	4a0b      	ldr	r2, [pc, #44]	; (800a9a4 <SD_initialize+0x90>)
 800a976:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800a978:	4b0a      	ldr	r3, [pc, #40]	; (800a9a4 <SD_initialize+0x90>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d107      	bne.n	800a990 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800a980:	4b07      	ldr	r3, [pc, #28]	; (800a9a0 <SD_initialize+0x8c>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	b2db      	uxtb	r3, r3
 800a986:	f043 0301 	orr.w	r3, r3, #1
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	4b04      	ldr	r3, [pc, #16]	; (800a9a0 <SD_initialize+0x8c>)
 800a98e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a990:	4b03      	ldr	r3, [pc, #12]	; (800a9a0 <SD_initialize+0x8c>)
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	b2db      	uxtb	r3, r3
}
 800a996:	4618      	mov	r0, r3
 800a998:	371c      	adds	r7, #28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd90      	pop	{r4, r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	2400000d 	.word	0x2400000d
 800a9a4:	2400124c 	.word	0x2400124c
 800a9a8:	08020950 	.word	0x08020950

0800a9ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff ff8d 	bl	800a8d8 <SD_CheckStatus>
 800a9be:	4603      	mov	r3, r0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b094      	sub	sp, #80	; 0x50
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60b9      	str	r1, [r7, #8]
 800a9d0:	607a      	str	r2, [r7, #4]
 800a9d2:	603b      	str	r3, [r7, #0]
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  //uint32_t alignedAddr;

  /*---Edited for managing DCache*/
  uint32_t alignedAddr = (uint32_t)buff & ~0x1F;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	f023 031f 	bic.w	r3, r3, #31
 800a9e4:	64bb      	str	r3, [r7, #72]	; 0x48

  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr,
 800a9e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  	   	   count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800a9e8:	683a      	ldr	r2, [r7, #0]
 800a9ea:	0251      	lsls	r1, r2, #9
 800a9ec:	68b8      	ldr	r0, [r7, #8]
 800a9ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9f0:	1a82      	subs	r2, r0, r2
 800a9f2:	440a      	add	r2, r1
 800a9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9f6:	62ba      	str	r2, [r7, #40]	; 0x28
    if ( dsize > 0 ) { 
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	dd1d      	ble.n	800aa3a <SD_read+0x72>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa00:	f003 021f 	and.w	r2, r3, #31
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	4413      	add	r3, r2
 800aa08:	627b      	str	r3, [r7, #36]	; 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800aa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 800aa0e:	f3bf 8f4f 	dsb	sy
}
 800aa12:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800aa14:	4a3f      	ldr	r2, [pc, #252]	; (800ab14 <SD_read+0x14c>)
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	3320      	adds	r3, #32
 800aa20:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	3b20      	subs	r3, #32
 800aa26:	627b      	str	r3, [r7, #36]	; 0x24
      } while ( op_size > 0 );
 800aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	dcf2      	bgt.n	800aa14 <SD_read+0x4c>
  __ASM volatile ("dsb 0xF":::"memory");
 800aa2e:	f3bf 8f4f 	dsb	sy
}
 800aa32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aa34:	f3bf 8f6f 	isb	sy
}
 800aa38:	bf00      	nop
}
 800aa3a:	bf00      	nop

  SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr,
 800aa3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  		   	   	   count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	0251      	lsls	r1, r2, #9
 800aa42:	68b8      	ldr	r0, [r7, #8]
 800aa44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa46:	1a82      	subs	r2, r0, r2
 800aa48:	440a      	add	r2, r1
 800aa4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa4c:	63ba      	str	r2, [r7, #56]	; 0x38
    if ( dsize > 0 ) { 
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	dd1d      	ble.n	800aa90 <SD_read+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800aa54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa56:	f003 021f 	and.w	r2, r3, #31
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5c:	4413      	add	r3, r2
 800aa5e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800aa60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa62:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dsb 0xF":::"memory");
 800aa64:	f3bf 8f4f 	dsb	sy
}
 800aa68:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800aa6a:	4a2a      	ldr	r2, [pc, #168]	; (800ab14 <SD_read+0x14c>)
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	3320      	adds	r3, #32
 800aa76:	633b      	str	r3, [r7, #48]	; 0x30
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800aa78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7a:	3b20      	subs	r3, #32
 800aa7c:	637b      	str	r3, [r7, #52]	; 0x34
      } while ( op_size > 0 );
 800aa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	dcf2      	bgt.n	800aa6a <SD_read+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800aa84:	f3bf 8f4f 	dsb	sy
}
 800aa88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aa8a:	f3bf 8f6f 	isb	sy
}
 800aa8e:	bf00      	nop
}
 800aa90:	bf00      	nop
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa92:	f247 5030 	movw	r0, #30000	; 0x7530
 800aa96:	f7ff ff01 	bl	800a89c <SD_CheckStatusWithTimeout>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	da02      	bge.n	800aaa6 <SD_read+0xde>
  {
    return res;
 800aaa0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aaa4:	e032      	b.n	800ab0c <SD_read+0x144>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	68b8      	ldr	r0, [r7, #8]
 800aaac:	f7ff fe68 	bl	800a780 <BSP_SD_ReadBlocks_DMA>
 800aab0:	4603      	mov	r3, r0
 800aab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if (ret == MSD_OK) {
 800aab6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d124      	bne.n	800ab08 <SD_read+0x140>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800aabe:	4b16      	ldr	r3, [pc, #88]	; (800ab18 <SD_read+0x150>)
 800aac0:	6819      	ldr	r1, [r3, #0]
 800aac2:	f107 0314 	add.w	r3, r7, #20
 800aac6:	f247 5230 	movw	r2, #30000	; 0x7530
 800aaca:	4618      	mov	r0, r3
 800aacc:	f004 f8b2 	bl	800ec34 <osMessageGet>

    if (event.status == osEventMessage)
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	2b10      	cmp	r3, #16
 800aad4:	d118      	bne.n	800ab08 <SD_read+0x140>
    {
      if (event.value.v == READ_CPLT_MSG)
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d115      	bne.n	800ab08 <SD_read+0x140>
      {
        timer = osKernelSysTick();
 800aadc:	f003 fe6c 	bl	800e7b8 <osKernelSysTick>
 800aae0:	6438      	str	r0, [r7, #64]	; 0x40
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800aae2:	e008      	b.n	800aaf6 <SD_read+0x12e>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aae4:	f7ff fe80 	bl	800a7e8 <BSP_SD_GetCardState>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d103      	bne.n	800aaf6 <SD_read+0x12e>
              {
                res = RES_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

                //alignedAddr = (uint32_t)buff & ~0x1F;
                //SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

                break;
 800aaf4:	e008      	b.n	800ab08 <SD_read+0x140>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800aaf6:	f003 fe5f 	bl	800e7b8 <osKernelSysTick>
 800aafa:	4602      	mov	r2, r0
 800aafc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	f247 522f 	movw	r2, #29999	; 0x752f
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d9ed      	bls.n	800aae4 <SD_read+0x11c>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ab08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3750      	adds	r7, #80	; 0x50
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	e000ed00 	.word	0xe000ed00
 800ab18:	2400124c 	.word	0x2400124c

0800ab1c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08e      	sub	sp, #56	; 0x38
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60b9      	str	r1, [r7, #8]
 800ab24:	607a      	str	r2, [r7, #4]
 800ab26:	603b      	str	r3, [r7, #0]
 800ab28:	4603      	mov	r3, r0
 800ab2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ab32:	f247 5030 	movw	r0, #30000	; 0x7530
 800ab36:	f7ff feb1 	bl	800a89c <SD_CheckStatusWithTimeout>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	da02      	bge.n	800ab46 <SD_write+0x2a>
  {
    return res;
 800ab40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab44:	e05d      	b.n	800ac02 <SD_write+0xe6>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f023 031f 	bic.w	r3, r3, #31
 800ab4c:	633b      	str	r3, [r7, #48]	; 0x30
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	0251      	lsls	r1, r2, #9
 800ab54:	68b8      	ldr	r0, [r7, #8]
 800ab56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab58:	1a82      	subs	r2, r0, r2
 800ab5a:	440a      	add	r2, r1
 800ab5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab5e:	627a      	str	r2, [r7, #36]	; 0x24
    if ( dsize > 0 ) { 
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	dd1d      	ble.n	800aba2 <SD_write+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	f003 021f 	and.w	r2, r3, #31
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	4413      	add	r3, r2
 800ab70:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800ab72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 800ab76:	f3bf 8f4f 	dsb	sy
}
 800ab7a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800ab7c:	4a23      	ldr	r2, [pc, #140]	; (800ac0c <SD_write+0xf0>)
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	3320      	adds	r3, #32
 800ab88:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	3b20      	subs	r3, #32
 800ab8e:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 800ab90:	6a3b      	ldr	r3, [r7, #32]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	dcf2      	bgt.n	800ab7c <SD_write+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 800ab96:	f3bf 8f4f 	dsb	sy
}
 800ab9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ab9c:	f3bf 8f6f 	isb	sy
}
 800aba0:	bf00      	nop
}
 800aba2:	bf00      	nop
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	68b8      	ldr	r0, [r7, #8]
 800abaa:	f7ff fe03 	bl	800a7b4 <BSP_SD_WriteBlocks_DMA>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d124      	bne.n	800abfe <SD_write+0xe2>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800abb4:	4b16      	ldr	r3, [pc, #88]	; (800ac10 <SD_write+0xf4>)
 800abb6:	6819      	ldr	r1, [r3, #0]
 800abb8:	f107 0310 	add.w	r3, r7, #16
 800abbc:	f247 5230 	movw	r2, #30000	; 0x7530
 800abc0:	4618      	mov	r0, r3
 800abc2:	f004 f837 	bl	800ec34 <osMessageGet>

    if (event.status == osEventMessage)
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	2b10      	cmp	r3, #16
 800abca:	d118      	bne.n	800abfe <SD_write+0xe2>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d115      	bne.n	800abfe <SD_write+0xe2>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800abd2:	f003 fdf1 	bl	800e7b8 <osKernelSysTick>
 800abd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800abd8:	e008      	b.n	800abec <SD_write+0xd0>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800abda:	f7ff fe05 	bl	800a7e8 <BSP_SD_GetCardState>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d103      	bne.n	800abec <SD_write+0xd0>
          {
            res = RES_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 800abea:	e008      	b.n	800abfe <SD_write+0xe2>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800abec:	f003 fde4 	bl	800e7b8 <osKernelSysTick>
 800abf0:	4602      	mov	r2, r0
 800abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	f247 522f 	movw	r2, #29999	; 0x752f
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d9ed      	bls.n	800abda <SD_write+0xbe>
    }

  }
#endif

  return res;
 800abfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3738      	adds	r7, #56	; 0x38
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	e000ed00 	.word	0xe000ed00
 800ac10:	2400124c 	.word	0x2400124c

0800ac14 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08c      	sub	sp, #48	; 0x30
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	603a      	str	r2, [r7, #0]
 800ac1e:	71fb      	strb	r3, [r7, #7]
 800ac20:	460b      	mov	r3, r1
 800ac22:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac2a:	4b25      	ldr	r3, [pc, #148]	; (800acc0 <SD_ioctl+0xac>)
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	f003 0301 	and.w	r3, r3, #1
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <SD_ioctl+0x28>
 800ac38:	2303      	movs	r3, #3
 800ac3a:	e03c      	b.n	800acb6 <SD_ioctl+0xa2>

  switch (cmd)
 800ac3c:	79bb      	ldrb	r3, [r7, #6]
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d834      	bhi.n	800acac <SD_ioctl+0x98>
 800ac42:	a201      	add	r2, pc, #4	; (adr r2, 800ac48 <SD_ioctl+0x34>)
 800ac44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac48:	0800ac59 	.word	0x0800ac59
 800ac4c:	0800ac61 	.word	0x0800ac61
 800ac50:	0800ac79 	.word	0x0800ac79
 800ac54:	0800ac93 	.word	0x0800ac93
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac5e:	e028      	b.n	800acb2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac60:	f107 0308 	add.w	r3, r7, #8
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff fdcf 	bl	800a808 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ac6a:	6a3a      	ldr	r2, [r7, #32]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac76:	e01c      	b.n	800acb2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac78:	f107 0308 	add.w	r3, r7, #8
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7ff fdc3 	bl	800a808 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac90:	e00f      	b.n	800acb2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac92:	f107 0308 	add.w	r3, r7, #8
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff fdb6 	bl	800a808 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	0a5a      	lsrs	r2, r3, #9
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800acaa:	e002      	b.n	800acb2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800acac:	2304      	movs	r3, #4
 800acae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800acb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3730      	adds	r7, #48	; 0x30
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	2400000d 	.word	0x2400000d

0800acc4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800acc8:	4b04      	ldr	r3, [pc, #16]	; (800acdc <BSP_SD_WriteCpltCallback+0x18>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2200      	movs	r2, #0
 800acce:	2102      	movs	r1, #2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f003 ff6f 	bl	800ebb4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800acd6:	bf00      	nop
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	2400124c 	.word	0x2400124c

0800ace0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ace4:	4b04      	ldr	r3, [pc, #16]	; (800acf8 <BSP_SD_ReadCpltCallback+0x18>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2200      	movs	r2, #0
 800acea:	2101      	movs	r1, #1
 800acec:	4618      	mov	r0, r3
 800acee:	f003 ff61 	bl	800ebb4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800acf2:	bf00      	nop
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	2400124c 	.word	0x2400124c

0800acfc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ad02:	4b88      	ldr	r3, [pc, #544]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad04:	22c0      	movs	r2, #192	; 0xc0
 800ad06:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ad08:	4b86      	ldr	r3, [pc, #536]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad0a:	22a8      	movs	r2, #168	; 0xa8
 800ad0c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ad0e:	4b85      	ldr	r3, [pc, #532]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad10:	2201      	movs	r2, #1
 800ad12:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 30;
 800ad14:	4b83      	ldr	r3, [pc, #524]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad16:	221e      	movs	r2, #30
 800ad18:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ad1a:	4b83      	ldr	r3, [pc, #524]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ad1c:	22ff      	movs	r2, #255	; 0xff
 800ad1e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ad20:	4b81      	ldr	r3, [pc, #516]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ad22:	22ff      	movs	r2, #255	; 0xff
 800ad24:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ad26:	4b80      	ldr	r3, [pc, #512]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ad28:	22ff      	movs	r2, #255	; 0xff
 800ad2a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ad2c:	4b7e      	ldr	r3, [pc, #504]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800ad32:	4b7e      	ldr	r3, [pc, #504]	; (800af2c <MX_LWIP_Init+0x230>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800ad38:	4b7c      	ldr	r3, [pc, #496]	; (800af2c <MX_LWIP_Init+0x230>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800ad3e:	4b7b      	ldr	r3, [pc, #492]	; (800af2c <MX_LWIP_Init+0x230>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800ad44:	4b79      	ldr	r3, [pc, #484]	; (800af2c <MX_LWIP_Init+0x230>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	f013 fc81 	bl	801e654 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ad52:	4b74      	ldr	r3, [pc, #464]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	061a      	lsls	r2, r3, #24
 800ad58:	4b72      	ldr	r3, [pc, #456]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad5a:	785b      	ldrb	r3, [r3, #1]
 800ad5c:	041b      	lsls	r3, r3, #16
 800ad5e:	431a      	orrs	r2, r3
 800ad60:	4b70      	ldr	r3, [pc, #448]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad62:	789b      	ldrb	r3, [r3, #2]
 800ad64:	021b      	lsls	r3, r3, #8
 800ad66:	4313      	orrs	r3, r2
 800ad68:	4a6e      	ldr	r2, [pc, #440]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad6a:	78d2      	ldrb	r2, [r2, #3]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	061a      	lsls	r2, r3, #24
 800ad70:	4b6c      	ldr	r3, [pc, #432]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	0619      	lsls	r1, r3, #24
 800ad76:	4b6b      	ldr	r3, [pc, #428]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	041b      	lsls	r3, r3, #16
 800ad7c:	4319      	orrs	r1, r3
 800ad7e:	4b69      	ldr	r3, [pc, #420]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad80:	789b      	ldrb	r3, [r3, #2]
 800ad82:	021b      	lsls	r3, r3, #8
 800ad84:	430b      	orrs	r3, r1
 800ad86:	4967      	ldr	r1, [pc, #412]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad88:	78c9      	ldrb	r1, [r1, #3]
 800ad8a:	430b      	orrs	r3, r1
 800ad8c:	021b      	lsls	r3, r3, #8
 800ad8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad92:	431a      	orrs	r2, r3
 800ad94:	4b63      	ldr	r3, [pc, #396]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	0619      	lsls	r1, r3, #24
 800ad9a:	4b62      	ldr	r3, [pc, #392]	; (800af24 <MX_LWIP_Init+0x228>)
 800ad9c:	785b      	ldrb	r3, [r3, #1]
 800ad9e:	041b      	lsls	r3, r3, #16
 800ada0:	4319      	orrs	r1, r3
 800ada2:	4b60      	ldr	r3, [pc, #384]	; (800af24 <MX_LWIP_Init+0x228>)
 800ada4:	789b      	ldrb	r3, [r3, #2]
 800ada6:	021b      	lsls	r3, r3, #8
 800ada8:	430b      	orrs	r3, r1
 800adaa:	495e      	ldr	r1, [pc, #376]	; (800af24 <MX_LWIP_Init+0x228>)
 800adac:	78c9      	ldrb	r1, [r1, #3]
 800adae:	430b      	orrs	r3, r1
 800adb0:	0a1b      	lsrs	r3, r3, #8
 800adb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800adb6:	431a      	orrs	r2, r3
 800adb8:	4b5a      	ldr	r3, [pc, #360]	; (800af24 <MX_LWIP_Init+0x228>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	0619      	lsls	r1, r3, #24
 800adbe:	4b59      	ldr	r3, [pc, #356]	; (800af24 <MX_LWIP_Init+0x228>)
 800adc0:	785b      	ldrb	r3, [r3, #1]
 800adc2:	041b      	lsls	r3, r3, #16
 800adc4:	4319      	orrs	r1, r3
 800adc6:	4b57      	ldr	r3, [pc, #348]	; (800af24 <MX_LWIP_Init+0x228>)
 800adc8:	789b      	ldrb	r3, [r3, #2]
 800adca:	021b      	lsls	r3, r3, #8
 800adcc:	430b      	orrs	r3, r1
 800adce:	4955      	ldr	r1, [pc, #340]	; (800af24 <MX_LWIP_Init+0x228>)
 800add0:	78c9      	ldrb	r1, [r1, #3]
 800add2:	430b      	orrs	r3, r1
 800add4:	0e1b      	lsrs	r3, r3, #24
 800add6:	4313      	orrs	r3, r2
 800add8:	4a55      	ldr	r2, [pc, #340]	; (800af30 <MX_LWIP_Init+0x234>)
 800adda:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800addc:	4b52      	ldr	r3, [pc, #328]	; (800af28 <MX_LWIP_Init+0x22c>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	061a      	lsls	r2, r3, #24
 800ade2:	4b51      	ldr	r3, [pc, #324]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ade4:	785b      	ldrb	r3, [r3, #1]
 800ade6:	041b      	lsls	r3, r3, #16
 800ade8:	431a      	orrs	r2, r3
 800adea:	4b4f      	ldr	r3, [pc, #316]	; (800af28 <MX_LWIP_Init+0x22c>)
 800adec:	789b      	ldrb	r3, [r3, #2]
 800adee:	021b      	lsls	r3, r3, #8
 800adf0:	4313      	orrs	r3, r2
 800adf2:	4a4d      	ldr	r2, [pc, #308]	; (800af28 <MX_LWIP_Init+0x22c>)
 800adf4:	78d2      	ldrb	r2, [r2, #3]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	061a      	lsls	r2, r3, #24
 800adfa:	4b4b      	ldr	r3, [pc, #300]	; (800af28 <MX_LWIP_Init+0x22c>)
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	0619      	lsls	r1, r3, #24
 800ae00:	4b49      	ldr	r3, [pc, #292]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ae02:	785b      	ldrb	r3, [r3, #1]
 800ae04:	041b      	lsls	r3, r3, #16
 800ae06:	4319      	orrs	r1, r3
 800ae08:	4b47      	ldr	r3, [pc, #284]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ae0a:	789b      	ldrb	r3, [r3, #2]
 800ae0c:	021b      	lsls	r3, r3, #8
 800ae0e:	430b      	orrs	r3, r1
 800ae10:	4945      	ldr	r1, [pc, #276]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ae12:	78c9      	ldrb	r1, [r1, #3]
 800ae14:	430b      	orrs	r3, r1
 800ae16:	021b      	lsls	r3, r3, #8
 800ae18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae1c:	431a      	orrs	r2, r3
 800ae1e:	4b42      	ldr	r3, [pc, #264]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	0619      	lsls	r1, r3, #24
 800ae24:	4b40      	ldr	r3, [pc, #256]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ae26:	785b      	ldrb	r3, [r3, #1]
 800ae28:	041b      	lsls	r3, r3, #16
 800ae2a:	4319      	orrs	r1, r3
 800ae2c:	4b3e      	ldr	r3, [pc, #248]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ae2e:	789b      	ldrb	r3, [r3, #2]
 800ae30:	021b      	lsls	r3, r3, #8
 800ae32:	430b      	orrs	r3, r1
 800ae34:	493c      	ldr	r1, [pc, #240]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ae36:	78c9      	ldrb	r1, [r1, #3]
 800ae38:	430b      	orrs	r3, r1
 800ae3a:	0a1b      	lsrs	r3, r3, #8
 800ae3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae40:	431a      	orrs	r2, r3
 800ae42:	4b39      	ldr	r3, [pc, #228]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	0619      	lsls	r1, r3, #24
 800ae48:	4b37      	ldr	r3, [pc, #220]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ae4a:	785b      	ldrb	r3, [r3, #1]
 800ae4c:	041b      	lsls	r3, r3, #16
 800ae4e:	4319      	orrs	r1, r3
 800ae50:	4b35      	ldr	r3, [pc, #212]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ae52:	789b      	ldrb	r3, [r3, #2]
 800ae54:	021b      	lsls	r3, r3, #8
 800ae56:	430b      	orrs	r3, r1
 800ae58:	4933      	ldr	r1, [pc, #204]	; (800af28 <MX_LWIP_Init+0x22c>)
 800ae5a:	78c9      	ldrb	r1, [r1, #3]
 800ae5c:	430b      	orrs	r3, r1
 800ae5e:	0e1b      	lsrs	r3, r3, #24
 800ae60:	4313      	orrs	r3, r2
 800ae62:	4a34      	ldr	r2, [pc, #208]	; (800af34 <MX_LWIP_Init+0x238>)
 800ae64:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ae66:	4b31      	ldr	r3, [pc, #196]	; (800af2c <MX_LWIP_Init+0x230>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	061a      	lsls	r2, r3, #24
 800ae6c:	4b2f      	ldr	r3, [pc, #188]	; (800af2c <MX_LWIP_Init+0x230>)
 800ae6e:	785b      	ldrb	r3, [r3, #1]
 800ae70:	041b      	lsls	r3, r3, #16
 800ae72:	431a      	orrs	r2, r3
 800ae74:	4b2d      	ldr	r3, [pc, #180]	; (800af2c <MX_LWIP_Init+0x230>)
 800ae76:	789b      	ldrb	r3, [r3, #2]
 800ae78:	021b      	lsls	r3, r3, #8
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	4a2b      	ldr	r2, [pc, #172]	; (800af2c <MX_LWIP_Init+0x230>)
 800ae7e:	78d2      	ldrb	r2, [r2, #3]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	061a      	lsls	r2, r3, #24
 800ae84:	4b29      	ldr	r3, [pc, #164]	; (800af2c <MX_LWIP_Init+0x230>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	0619      	lsls	r1, r3, #24
 800ae8a:	4b28      	ldr	r3, [pc, #160]	; (800af2c <MX_LWIP_Init+0x230>)
 800ae8c:	785b      	ldrb	r3, [r3, #1]
 800ae8e:	041b      	lsls	r3, r3, #16
 800ae90:	4319      	orrs	r1, r3
 800ae92:	4b26      	ldr	r3, [pc, #152]	; (800af2c <MX_LWIP_Init+0x230>)
 800ae94:	789b      	ldrb	r3, [r3, #2]
 800ae96:	021b      	lsls	r3, r3, #8
 800ae98:	430b      	orrs	r3, r1
 800ae9a:	4924      	ldr	r1, [pc, #144]	; (800af2c <MX_LWIP_Init+0x230>)
 800ae9c:	78c9      	ldrb	r1, [r1, #3]
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	021b      	lsls	r3, r3, #8
 800aea2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aea6:	431a      	orrs	r2, r3
 800aea8:	4b20      	ldr	r3, [pc, #128]	; (800af2c <MX_LWIP_Init+0x230>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	0619      	lsls	r1, r3, #24
 800aeae:	4b1f      	ldr	r3, [pc, #124]	; (800af2c <MX_LWIP_Init+0x230>)
 800aeb0:	785b      	ldrb	r3, [r3, #1]
 800aeb2:	041b      	lsls	r3, r3, #16
 800aeb4:	4319      	orrs	r1, r3
 800aeb6:	4b1d      	ldr	r3, [pc, #116]	; (800af2c <MX_LWIP_Init+0x230>)
 800aeb8:	789b      	ldrb	r3, [r3, #2]
 800aeba:	021b      	lsls	r3, r3, #8
 800aebc:	430b      	orrs	r3, r1
 800aebe:	491b      	ldr	r1, [pc, #108]	; (800af2c <MX_LWIP_Init+0x230>)
 800aec0:	78c9      	ldrb	r1, [r1, #3]
 800aec2:	430b      	orrs	r3, r1
 800aec4:	0a1b      	lsrs	r3, r3, #8
 800aec6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aeca:	431a      	orrs	r2, r3
 800aecc:	4b17      	ldr	r3, [pc, #92]	; (800af2c <MX_LWIP_Init+0x230>)
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	0619      	lsls	r1, r3, #24
 800aed2:	4b16      	ldr	r3, [pc, #88]	; (800af2c <MX_LWIP_Init+0x230>)
 800aed4:	785b      	ldrb	r3, [r3, #1]
 800aed6:	041b      	lsls	r3, r3, #16
 800aed8:	4319      	orrs	r1, r3
 800aeda:	4b14      	ldr	r3, [pc, #80]	; (800af2c <MX_LWIP_Init+0x230>)
 800aedc:	789b      	ldrb	r3, [r3, #2]
 800aede:	021b      	lsls	r3, r3, #8
 800aee0:	430b      	orrs	r3, r1
 800aee2:	4912      	ldr	r1, [pc, #72]	; (800af2c <MX_LWIP_Init+0x230>)
 800aee4:	78c9      	ldrb	r1, [r1, #3]
 800aee6:	430b      	orrs	r3, r1
 800aee8:	0e1b      	lsrs	r3, r3, #24
 800aeea:	4313      	orrs	r3, r2
 800aeec:	4a12      	ldr	r2, [pc, #72]	; (800af38 <MX_LWIP_Init+0x23c>)
 800aeee:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800aef0:	4b12      	ldr	r3, [pc, #72]	; (800af3c <MX_LWIP_Init+0x240>)
 800aef2:	9302      	str	r3, [sp, #8]
 800aef4:	4b12      	ldr	r3, [pc, #72]	; (800af40 <MX_LWIP_Init+0x244>)
 800aef6:	9301      	str	r3, [sp, #4]
 800aef8:	2300      	movs	r3, #0
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	4b0e      	ldr	r3, [pc, #56]	; (800af38 <MX_LWIP_Init+0x23c>)
 800aefe:	4a0d      	ldr	r2, [pc, #52]	; (800af34 <MX_LWIP_Init+0x238>)
 800af00:	490b      	ldr	r1, [pc, #44]	; (800af30 <MX_LWIP_Init+0x234>)
 800af02:	4810      	ldr	r0, [pc, #64]	; (800af44 <MX_LWIP_Init+0x248>)
 800af04:	f00b fee4 	bl	8016cd0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800af08:	480e      	ldr	r0, [pc, #56]	; (800af44 <MX_LWIP_Init+0x248>)
 800af0a:	f00c f893 	bl	8017034 <netif_set_default>

  netif_set_down(&gnetif);
 800af0e:	480d      	ldr	r0, [pc, #52]	; (800af44 <MX_LWIP_Init+0x248>)
 800af10:	f00c f90c 	bl	801712c <netif_set_down>
//    /* When the netif link is down this function must be called */
//    netif_set_down(&gnetif);
//  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800af14:	490c      	ldr	r1, [pc, #48]	; (800af48 <MX_LWIP_Init+0x24c>)
 800af16:	480b      	ldr	r0, [pc, #44]	; (800af44 <MX_LWIP_Init+0x248>)
 800af18:	f00c f99e 	bl	8017258 <netif_set_link_callback>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800af1c:	bf00      	nop
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	24001290 	.word	0x24001290
 800af28:	24001294 	.word	0x24001294
 800af2c:	24001298 	.word	0x24001298
 800af30:	24001284 	.word	0x24001284
 800af34:	24001288 	.word	0x24001288
 800af38:	2400128c 	.word	0x2400128c
 800af3c:	0801e565 	.word	0x0801e565
 800af40:	0800b535 	.word	0x0800b535
 800af44:	24001250 	.word	0x24001250
 800af48:	0800af4d 	.word	0x0800af4d

0800af4c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800af68:	4b04      	ldr	r3, [pc, #16]	; (800af7c <HAL_ETH_RxCpltCallback+0x1c>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f003 fdaf 	bl	800ead0 <osSemaphoreRelease>
}
 800af72:	bf00      	nop
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	240012a4 	.word	0x240012a4

0800af80 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800af88:	4b04      	ldr	r3, [pc, #16]	; (800af9c <HAL_ETH_TxCpltCallback+0x1c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f003 fd9f 	bl	800ead0 <osSemaphoreRelease>
}
 800af92:	bf00      	nop
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	240012a8 	.word	0x240012a8

0800afa0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7f7 fe11 	bl	8002bd0 <HAL_ETH_GetDMAError>
 800afae:	4603      	mov	r3, r0
 800afb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afb4:	2b80      	cmp	r3, #128	; 0x80
 800afb6:	d104      	bne.n	800afc2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800afb8:	4b04      	ldr	r3, [pc, #16]	; (800afcc <HAL_ETH_ErrorCallback+0x2c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f003 fd87 	bl	800ead0 <osSemaphoreRelease>
  }
}
 800afc2:	bf00      	nop
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	240012a4 	.word	0x240012a4

0800afd0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800afd0:	b5b0      	push	{r4, r5, r7, lr}
 800afd2:	b0a8      	sub	sp, #160	; 0xa0
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800afea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afee:	2264      	movs	r2, #100	; 0x64
 800aff0:	2100      	movs	r1, #0
 800aff2:	4618      	mov	r0, r3
 800aff4:	f014 f9b4 	bl	801f360 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800aff8:	4b84      	ldr	r3, [pc, #528]	; (800b20c <low_level_init+0x23c>)
 800affa:	4a85      	ldr	r2, [pc, #532]	; (800b210 <low_level_init+0x240>)
 800affc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800affe:	2300      	movs	r3, #0
 800b000:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800b004:	2380      	movs	r3, #128	; 0x80
 800b006:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800b00a:	23e1      	movs	r3, #225	; 0xe1
 800b00c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 800b010:	2300      	movs	r3, #0
 800b012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800b016:	2300      	movs	r3, #0
 800b018:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 800b01c:	2300      	movs	r3, #0
 800b01e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800b022:	4a7a      	ldr	r2, [pc, #488]	; (800b20c <low_level_init+0x23c>)
 800b024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b028:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b02a:	4b78      	ldr	r3, [pc, #480]	; (800b20c <low_level_init+0x23c>)
 800b02c:	2201      	movs	r2, #1
 800b02e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b030:	4b76      	ldr	r3, [pc, #472]	; (800b20c <low_level_init+0x23c>)
 800b032:	4a78      	ldr	r2, [pc, #480]	; (800b214 <low_level_init+0x244>)
 800b034:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b036:	4b75      	ldr	r3, [pc, #468]	; (800b20c <low_level_init+0x23c>)
 800b038:	4a77      	ldr	r2, [pc, #476]	; (800b218 <low_level_init+0x248>)
 800b03a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b03c:	4b73      	ldr	r3, [pc, #460]	; (800b20c <low_level_init+0x23c>)
 800b03e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b042:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b044:	4871      	ldr	r0, [pc, #452]	; (800b20c <low_level_init+0x23c>)
 800b046:	f7f6 fdcf 	bl	8001be8 <HAL_ETH_Init>
 800b04a:	4603      	mov	r3, r0
 800b04c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b050:	2238      	movs	r2, #56	; 0x38
 800b052:	2100      	movs	r1, #0
 800b054:	4871      	ldr	r0, [pc, #452]	; (800b21c <low_level_init+0x24c>)
 800b056:	f014 f983 	bl	801f360 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b05a:	4b70      	ldr	r3, [pc, #448]	; (800b21c <low_level_init+0x24c>)
 800b05c:	2221      	movs	r2, #33	; 0x21
 800b05e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b060:	4b6e      	ldr	r3, [pc, #440]	; (800b21c <low_level_init+0x24c>)
 800b062:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800b066:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b068:	4b6c      	ldr	r3, [pc, #432]	; (800b21c <low_level_init+0x24c>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b06e:	486c      	ldr	r0, [pc, #432]	; (800b220 <low_level_init+0x250>)
 800b070:	f00b fc98 	bl	80169a4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2206      	movs	r2, #6
 800b078:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b07c:	4b63      	ldr	r3, [pc, #396]	; (800b20c <low_level_init+0x23c>)
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	781a      	ldrb	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b088:	4b60      	ldr	r3, [pc, #384]	; (800b20c <low_level_init+0x23c>)
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	785a      	ldrb	r2, [r3, #1]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b094:	4b5d      	ldr	r3, [pc, #372]	; (800b20c <low_level_init+0x23c>)
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	789a      	ldrb	r2, [r3, #2]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b0a0:	4b5a      	ldr	r3, [pc, #360]	; (800b20c <low_level_init+0x23c>)
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	78da      	ldrb	r2, [r3, #3]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b0ac:	4b57      	ldr	r3, [pc, #348]	; (800b20c <low_level_init+0x23c>)
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	791a      	ldrb	r2, [r3, #4]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b0b8:	4b54      	ldr	r3, [pc, #336]	; (800b20c <low_level_init+0x23c>)
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	795a      	ldrb	r2, [r3, #5]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b0ca:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0d2:	f043 030a 	orr.w	r3, r3, #10
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800b0de:	2203      	movs	r2, #3
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	2001      	movs	r0, #1
 800b0e4:	f004 fc10 	bl	800f908 <xQueueGenericCreate>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	4a4e      	ldr	r2, [pc, #312]	; (800b224 <low_level_init+0x254>)
 800b0ec:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800b0ee:	2203      	movs	r2, #3
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	2001      	movs	r0, #1
 800b0f4:	f004 fc08 	bl	800f908 <xQueueGenericCreate>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	4a4b      	ldr	r2, [pc, #300]	; (800b228 <low_level_init+0x258>)
 800b0fc:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b0fe:	4b4b      	ldr	r3, [pc, #300]	; (800b22c <low_level_init+0x25c>)
 800b100:	f107 0408 	add.w	r4, r7, #8
 800b104:	461d      	mov	r5, r3
 800b106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b10a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b10e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b112:	f107 0308 	add.w	r3, r7, #8
 800b116:	6879      	ldr	r1, [r7, #4]
 800b118:	4618      	mov	r0, r3
 800b11a:	f003 fb5d 	bl	800e7d8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b11e:	4944      	ldr	r1, [pc, #272]	; (800b230 <low_level_init+0x260>)
 800b120:	4844      	ldr	r0, [pc, #272]	; (800b234 <low_level_init+0x264>)
 800b122:	f7f6 f9f0 	bl	8001506 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b126:	4843      	ldr	r0, [pc, #268]	; (800b234 <low_level_init+0x264>)
 800b128:	f7f6 fa1f 	bl	800156a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b12c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b130:	2b00      	cmp	r3, #0
 800b132:	d164      	bne.n	800b1fe <low_level_init+0x22e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b134:	483f      	ldr	r0, [pc, #252]	; (800b234 <low_level_init+0x264>)
 800b136:	f7f6 fac0 	bl	80016ba <LAN8742_GetLinkState>
 800b13a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b13e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b142:	2b01      	cmp	r3, #1
 800b144:	dc06      	bgt.n	800b154 <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f00c f856 	bl	80171f8 <netif_set_link_down>
      netif_set_down(netif);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f00b ffed 	bl	801712c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b152:	e056      	b.n	800b202 <low_level_init+0x232>
      switch (PHYLinkState)
 800b154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b158:	3b02      	subs	r3, #2
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d82a      	bhi.n	800b1b4 <low_level_init+0x1e4>
 800b15e:	a201      	add	r2, pc, #4	; (adr r2, 800b164 <low_level_init+0x194>)
 800b160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b164:	0800b175 	.word	0x0800b175
 800b168:	0800b187 	.word	0x0800b187
 800b16c:	0800b197 	.word	0x0800b197
 800b170:	0800b1a7 	.word	0x0800b1a7
        duplex = ETH_FULLDUPLEX_MODE;
 800b174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b178:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800b17c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b184:	e01f      	b.n	800b1c6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 800b186:	2300      	movs	r3, #0
 800b188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800b18c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b194:	e017      	b.n	800b1c6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 800b196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b19a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b1a4:	e00f      	b.n	800b1c6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b1b2:	e008      	b.n	800b1c6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 800b1b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800b1bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b1c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b1c4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b1c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	480f      	ldr	r0, [pc, #60]	; (800b20c <low_level_init+0x23c>)
 800b1ce:	f7f7 fab9 	bl	8002744 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b1d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1d6:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800b1d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1dc:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b1de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	4809      	ldr	r0, [pc, #36]	; (800b20c <low_level_init+0x23c>)
 800b1e6:	f7f7 fc81 	bl	8002aec <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800b1ea:	4808      	ldr	r0, [pc, #32]	; (800b20c <low_level_init+0x23c>)
 800b1ec:	f7f6 fde2 	bl	8001db4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f00b ff2f 	bl	8017054 <netif_set_up>
    netif_set_link_up(netif);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f00b ffca 	bl	8017190 <netif_set_link_up>
}
 800b1fc:	e001      	b.n	800b202 <low_level_init+0x232>
    Error_Handler();
 800b1fe:	f7f5 ff25 	bl	800104c <Error_Handler>
}
 800b202:	bf00      	nop
 800b204:	37a0      	adds	r7, #160	; 0xa0
 800b206:	46bd      	mov	sp, r7
 800b208:	bdb0      	pop	{r4, r5, r7, pc}
 800b20a:	bf00      	nop
 800b20c:	240012ac 	.word	0x240012ac
 800b210:	40028000 	.word	0x40028000
 800b214:	30040060 	.word	0x30040060
 800b218:	30040000 	.word	0x30040000
 800b21c:	2400135c 	.word	0x2400135c
 800b220:	080243d8 	.word	0x080243d8
 800b224:	240012a4 	.word	0x240012a4
 800b228:	240012a8 	.word	0x240012a8
 800b22c:	08020968 	.word	0x08020968
 800b230:	24000010 	.word	0x24000010
 800b234:	24001394 	.word	0x24001394

0800b238 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b092      	sub	sp, #72	; 0x48
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800b246:	2300      	movs	r3, #0
 800b248:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b250:	f107 030c 	add.w	r3, r7, #12
 800b254:	2230      	movs	r2, #48	; 0x30
 800b256:	2100      	movs	r1, #0
 800b258:	4618      	mov	r0, r3
 800b25a:	f014 f881 	bl	801f360 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b25e:	f107 030c 	add.w	r3, r7, #12
 800b262:	2230      	movs	r2, #48	; 0x30
 800b264:	2100      	movs	r1, #0
 800b266:	4618      	mov	r0, r3
 800b268:	f014 f87a 	bl	801f360 <memset>

  for(q = p; q != NULL; q = q->next)
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	643b      	str	r3, [r7, #64]	; 0x40
 800b270:	e045      	b.n	800b2fe <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b274:	2b03      	cmp	r3, #3
 800b276:	d902      	bls.n	800b27e <low_level_output+0x46>
      return ERR_IF;
 800b278:	f06f 030b 	mvn.w	r3, #11
 800b27c:	e065      	b.n	800b34a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800b27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b280:	6859      	ldr	r1, [r3, #4]
 800b282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b284:	4613      	mov	r3, r2
 800b286:	005b      	lsls	r3, r3, #1
 800b288:	4413      	add	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	3348      	adds	r3, #72	; 0x48
 800b28e:	443b      	add	r3, r7
 800b290:	3b3c      	subs	r3, #60	; 0x3c
 800b292:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b296:	895b      	ldrh	r3, [r3, #10]
 800b298:	4619      	mov	r1, r3
 800b29a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b29c:	4613      	mov	r3, r2
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	4413      	add	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	3348      	adds	r3, #72	; 0x48
 800b2a6:	443b      	add	r3, r7
 800b2a8:	3b38      	subs	r3, #56	; 0x38
 800b2aa:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b2ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d011      	beq.n	800b2d6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b4:	1e5a      	subs	r2, r3, #1
 800b2b6:	f107 000c 	add.w	r0, r7, #12
 800b2ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2bc:	460b      	mov	r3, r1
 800b2be:	005b      	lsls	r3, r3, #1
 800b2c0:	440b      	add	r3, r1
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	18c1      	adds	r1, r0, r3
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	3348      	adds	r3, #72	; 0x48
 800b2d0:	443b      	add	r3, r7
 800b2d2:	3b34      	subs	r3, #52	; 0x34
 800b2d4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b2d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d109      	bne.n	800b2f2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b2de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	4413      	add	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	3348      	adds	r3, #72	; 0x48
 800b2ea:	443b      	add	r3, r7
 800b2ec:	3b34      	subs	r3, #52	; 0x34
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b2f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	643b      	str	r3, [r7, #64]	; 0x40
 800b2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1b6      	bne.n	800b272 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	891b      	ldrh	r3, [r3, #8]
 800b308:	461a      	mov	r2, r3
 800b30a:	4b12      	ldr	r3, [pc, #72]	; (800b354 <low_level_output+0x11c>)
 800b30c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b30e:	4a11      	ldr	r2, [pc, #68]	; (800b354 <low_level_output+0x11c>)
 800b310:	f107 030c 	add.w	r3, r7, #12
 800b314:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b316:	4a0f      	ldr	r2, [pc, #60]	; (800b354 <low_level_output+0x11c>)
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800b31c:	6838      	ldr	r0, [r7, #0]
 800b31e:	f00c fbef 	bl	8017b00 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800b322:	490c      	ldr	r1, [pc, #48]	; (800b354 <low_level_output+0x11c>)
 800b324:	480c      	ldr	r0, [pc, #48]	; (800b358 <low_level_output+0x120>)
 800b326:	f7f6 fe49 	bl	8001fbc <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800b32a:	bf00      	nop
 800b32c:	4b0b      	ldr	r3, [pc, #44]	; (800b35c <low_level_output+0x124>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b334:	4618      	mov	r0, r3
 800b336:	f003 fb7d 	bl	800ea34 <osSemaphoreWait>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1f5      	bne.n	800b32c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800b340:	4805      	ldr	r0, [pc, #20]	; (800b358 <low_level_output+0x120>)
 800b342:	f7f6 ffba 	bl	80022ba <HAL_ETH_ReleaseTxPacket>

  return errval;
 800b346:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3748      	adds	r7, #72	; 0x48
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	2400135c 	.word	0x2400135c
 800b358:	240012ac 	.word	0x240012ac
 800b35c:	240012a8 	.word	0x240012a8

0800b360 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b368:	2300      	movs	r3, #0
 800b36a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b36c:	4b07      	ldr	r3, [pc, #28]	; (800b38c <low_level_input+0x2c>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d105      	bne.n	800b380 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b374:	f107 030c 	add.w	r3, r7, #12
 800b378:	4619      	mov	r1, r3
 800b37a:	4805      	ldr	r0, [pc, #20]	; (800b390 <low_level_input+0x30>)
 800b37c:	f7f6 fe6f 	bl	800205e <HAL_ETH_ReadData>
  }

  return p;
 800b380:	68fb      	ldr	r3, [r7, #12]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	240012a0 	.word	0x240012a0
 800b390:	240012ac 	.word	0x240012ac

0800b394 <ethernetif_input>:
 * @param netif the lwip network interface structure for this ethernetif
 */
extern struct netif gnetif;

static void ethernetif_input(void const * argument)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b0a2      	sub	sp, #136	; 0x88
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]

	ETH_MACConfigTypeDef MACConf = {0};
 800b39c:	f107 030c 	add.w	r3, r7, #12
 800b3a0:	2264      	movs	r2, #100	; 0x64
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f013 ffdb 	bl	801f360 <memset>
	int32_t PHYLinkState = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	67fb      	str	r3, [r7, #124]	; 0x7c

	struct pbuf *p = NULL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	677b      	str	r3, [r7, #116]	; 0x74
	struct netif *netif = (struct netif *) argument;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	673b      	str	r3, [r7, #112]	; 0x70

  for( ;; )
  {
	  //TIME_WAITING_FOR_INPUT
    if (osSemaphoreWait(RxPktSemaphore, (uint32_t)5000UL) == osOK)
 800b3c6:	4b57      	ldr	r3, [pc, #348]	; (800b524 <ethernetif_input+0x190>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f241 3188 	movw	r1, #5000	; 0x1388
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f003 fb30 	bl	800ea34 <osSemaphoreWait>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d115      	bne.n	800b406 <ethernetif_input+0x72>
    {
      do
      {
        p = low_level_input( netif );
 800b3da:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b3dc:	f7ff ffc0 	bl	800b360 <low_level_input>
 800b3e0:	6778      	str	r0, [r7, #116]	; 0x74
        if (p != NULL)
 800b3e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00a      	beq.n	800b3fe <ethernetif_input+0x6a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b3e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b3ee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b3f0:	4798      	blx	r3
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d002      	beq.n	800b3fe <ethernetif_input+0x6a>
          {
            pbuf_free(p);
 800b3f8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b3fa:	f00c fadb 	bl	80179b4 <pbuf_free>
          }
        }

      } while(p!=NULL);
 800b3fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1ea      	bne.n	800b3da <ethernetif_input+0x46>
 800b404:	e089      	b.n	800b51a <ethernetif_input+0x186>
    }
    else
    {

	  if (netif_is_link_up(&gnetif))
 800b406:	4b48      	ldr	r3, [pc, #288]	; (800b528 <ethernetif_input+0x194>)
 800b408:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b40c:	089b      	lsrs	r3, r3, #2
 800b40e:	f003 0301 	and.w	r3, r3, #1
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b00      	cmp	r3, #0
 800b416:	d003      	beq.n	800b420 <ethernetif_input+0x8c>
	  {
	    /* When the netif is fully configured this function must be called */
	    netif_set_up(&gnetif);
 800b418:	4843      	ldr	r0, [pc, #268]	; (800b528 <ethernetif_input+0x194>)
 800b41a:	f00b fe1b 	bl	8017054 <netif_set_up>
 800b41e:	e002      	b.n	800b426 <ethernetif_input+0x92>
	  }
	  else
	  {
	    /* When the netif link is down this function must be called */
	    netif_set_down(&gnetif);
 800b420:	4841      	ldr	r0, [pc, #260]	; (800b528 <ethernetif_input+0x194>)
 800b422:	f00b fe83 	bl	801712c <netif_set_down>
	  }

  	  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b426:	4841      	ldr	r0, [pc, #260]	; (800b52c <ethernetif_input+0x198>)
 800b428:	f7f6 f947 	bl	80016ba <LAN8742_GetLinkState>
 800b42c:	67b8      	str	r0, [r7, #120]	; 0x78

  	  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b42e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b430:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b434:	089b      	lsrs	r3, r3, #2
 800b436:	f003 0301 	and.w	r3, r3, #1
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00c      	beq.n	800b45a <ethernetif_input+0xc6>
 800b440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b442:	2b01      	cmp	r3, #1
 800b444:	dc09      	bgt.n	800b45a <ethernetif_input+0xc6>
  	  {
  		HAL_ETH_Stop_IT(&heth);
 800b446:	483a      	ldr	r0, [pc, #232]	; (800b530 <ethernetif_input+0x19c>)
 800b448:	f7f6 fd40 	bl	8001ecc <HAL_ETH_Stop_IT>
  		netif_set_down(netif);
 800b44c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b44e:	f00b fe6d 	bl	801712c <netif_set_down>
  		netif_set_link_down(netif);
 800b452:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b454:	f00b fed0 	bl	80171f8 <netif_set_link_down>
 800b458:	e05f      	b.n	800b51a <ethernetif_input+0x186>
  	  }
  	  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b45a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b45c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b460:	f003 0304 	and.w	r3, r3, #4
 800b464:	2b00      	cmp	r3, #0
 800b466:	d158      	bne.n	800b51a <ethernetif_input+0x186>
 800b468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	dd55      	ble.n	800b51a <ethernetif_input+0x186>
  	  {
  		switch (PHYLinkState)
 800b46e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b470:	3b02      	subs	r3, #2
 800b472:	2b03      	cmp	r3, #3
 800b474:	d832      	bhi.n	800b4dc <ethernetif_input+0x148>
 800b476:	a201      	add	r2, pc, #4	; (adr r2, 800b47c <ethernetif_input+0xe8>)
 800b478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47c:	0800b48d 	.word	0x0800b48d
 800b480:	0800b4a3 	.word	0x0800b4a3
 800b484:	0800b4b7 	.word	0x0800b4b7
 800b488:	0800b4cb 	.word	0x0800b4cb
  		{
  		case LAN8742_STATUS_100MBITS_FULLDUPLEX:
  		  duplex = ETH_FULLDUPLEX_MODE;
 800b48c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b490:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_100M;
 800b492:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b49a:	2301      	movs	r3, #1
 800b49c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b4a0:	e01d      	b.n	800b4de <ethernetif_input+0x14a>
  		case LAN8742_STATUS_100MBITS_HALFDUPLEX:
  		  duplex = ETH_HALFDUPLEX_MODE;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_100M;
 800b4a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b4b4:	e013      	b.n	800b4de <ethernetif_input+0x14a>
  		case LAN8742_STATUS_10MBITS_FULLDUPLEX:
  		  duplex = ETH_FULLDUPLEX_MODE;
 800b4b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_10M;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b4c8:	e009      	b.n	800b4de <ethernetif_input+0x14a>
  		case LAN8742_STATUS_10MBITS_HALFDUPLEX:
  		  duplex = ETH_HALFDUPLEX_MODE;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_10M;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b4da:	e000      	b.n	800b4de <ethernetif_input+0x14a>
  		default:
  		  break;
 800b4dc:	bf00      	nop
  		}

  		if(linkchanged)
 800b4de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d019      	beq.n	800b51a <ethernetif_input+0x186>
  		{
  		  /* Get MAC Config MAC */
  		  HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b4e6:	f107 030c 	add.w	r3, r7, #12
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4810      	ldr	r0, [pc, #64]	; (800b530 <ethernetif_input+0x19c>)
 800b4ee:	f7f7 f929 	bl	8002744 <HAL_ETH_GetMACConfig>
  		  MACConf.DuplexMode = duplex;
 800b4f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b4f4:	627b      	str	r3, [r7, #36]	; 0x24
  		  MACConf.Speed = speed;
 800b4f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b4fa:	623b      	str	r3, [r7, #32]
  		  HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b4fc:	f107 030c 	add.w	r3, r7, #12
 800b500:	4619      	mov	r1, r3
 800b502:	480b      	ldr	r0, [pc, #44]	; (800b530 <ethernetif_input+0x19c>)
 800b504:	f7f7 faf2 	bl	8002aec <HAL_ETH_SetMACConfig>
  		  HAL_ETH_Start_IT(&heth);
 800b508:	4809      	ldr	r0, [pc, #36]	; (800b530 <ethernetif_input+0x19c>)
 800b50a:	f7f6 fc53 	bl	8001db4 <HAL_ETH_Start_IT>
  		  netif_set_up(netif);
 800b50e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b510:	f00b fda0 	bl	8017054 <netif_set_up>
  		  netif_set_link_up(netif);
 800b514:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b516:	f00b fe3b 	bl	8017190 <netif_set_link_up>
  		}
  	  }
    }
	osDelay(1);
 800b51a:	2001      	movs	r0, #1
 800b51c:	f003 f9a8 	bl	800e870 <osDelay>
    if (osSemaphoreWait(RxPktSemaphore, (uint32_t)5000UL) == osOK)
 800b520:	e751      	b.n	800b3c6 <ethernetif_input+0x32>
 800b522:	bf00      	nop
 800b524:	240012a4 	.word	0x240012a4
 800b528:	24001250 	.word	0x24001250
 800b52c:	24001394 	.word	0x24001394
 800b530:	240012ac 	.word	0x240012ac

0800b534 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d106      	bne.n	800b550 <ethernetif_init+0x1c>
 800b542:	4b0e      	ldr	r3, [pc, #56]	; (800b57c <ethernetif_init+0x48>)
 800b544:	f240 2243 	movw	r2, #579	; 0x243
 800b548:	490d      	ldr	r1, [pc, #52]	; (800b580 <ethernetif_init+0x4c>)
 800b54a:	480e      	ldr	r0, [pc, #56]	; (800b584 <ethernetif_init+0x50>)
 800b54c:	f014 fade 	bl	801fb0c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2273      	movs	r2, #115	; 0x73
 800b554:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2274      	movs	r2, #116	; 0x74
 800b55c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a09      	ldr	r2, [pc, #36]	; (800b588 <ethernetif_init+0x54>)
 800b564:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a08      	ldr	r2, [pc, #32]	; (800b58c <ethernetif_init+0x58>)
 800b56a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff fd2f 	bl	800afd0 <low_level_init>

  return ERR_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3708      	adds	r7, #8
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	08020984 	.word	0x08020984
 800b580:	080209a0 	.word	0x080209a0
 800b584:	080209b0 	.word	0x080209b0
 800b588:	08014301 	.word	0x08014301
 800b58c:	0800b239 	.word	0x0800b239

0800b590 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b59c:	68f9      	ldr	r1, [r7, #12]
 800b59e:	4809      	ldr	r0, [pc, #36]	; (800b5c4 <pbuf_free_custom+0x34>)
 800b5a0:	f00b faf0 	bl	8016b84 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b5a4:	4b08      	ldr	r3, [pc, #32]	; (800b5c8 <pbuf_free_custom+0x38>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d107      	bne.n	800b5bc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b5ac:	4b06      	ldr	r3, [pc, #24]	; (800b5c8 <pbuf_free_custom+0x38>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800b5b2:	4b06      	ldr	r3, [pc, #24]	; (800b5cc <pbuf_free_custom+0x3c>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f003 fa8a 	bl	800ead0 <osSemaphoreRelease>
  }
}
 800b5bc:	bf00      	nop
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	080243d8 	.word	0x080243d8
 800b5c8:	240012a0 	.word	0x240012a0
 800b5cc:	240012a4 	.word	0x240012a4

0800b5d0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b5d4:	f7f6 f948 	bl	8001868 <HAL_GetTick>
 800b5d8:	4603      	mov	r3, r0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08e      	sub	sp, #56	; 0x38
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	601a      	str	r2, [r3, #0]
 800b5f0:	605a      	str	r2, [r3, #4]
 800b5f2:	609a      	str	r2, [r3, #8]
 800b5f4:	60da      	str	r2, [r3, #12]
 800b5f6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a4d      	ldr	r2, [pc, #308]	; (800b734 <HAL_ETH_MspInit+0x154>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	f040 8093 	bne.w	800b72a <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800b604:	4b4c      	ldr	r3, [pc, #304]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b606:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b60a:	4a4b      	ldr	r2, [pc, #300]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b60c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b610:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b614:	4b48      	ldr	r3, [pc, #288]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b616:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b61a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b61e:	623b      	str	r3, [r7, #32]
 800b620:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800b622:	4b45      	ldr	r3, [pc, #276]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b628:	4a43      	ldr	r2, [pc, #268]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b62a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b62e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b632:	4b41      	ldr	r3, [pc, #260]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b63c:	61fb      	str	r3, [r7, #28]
 800b63e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800b640:	4b3d      	ldr	r3, [pc, #244]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b642:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b646:	4a3c      	ldr	r2, [pc, #240]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b64c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b650:	4b39      	ldr	r3, [pc, #228]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b652:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b65a:	61bb      	str	r3, [r7, #24]
 800b65c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b65e:	4b36      	ldr	r3, [pc, #216]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b664:	4a34      	ldr	r2, [pc, #208]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b66a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b66e:	4b32      	ldr	r3, [pc, #200]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b678:	617b      	str	r3, [r7, #20]
 800b67a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b67c:	4b2e      	ldr	r3, [pc, #184]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b67e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b682:	4a2d      	ldr	r2, [pc, #180]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b684:	f043 0304 	orr.w	r3, r3, #4
 800b688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b68c:	4b2a      	ldr	r3, [pc, #168]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b68e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b692:	f003 0304 	and.w	r3, r3, #4
 800b696:	613b      	str	r3, [r7, #16]
 800b698:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b69a:	4b27      	ldr	r3, [pc, #156]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b69c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b6a0:	4a25      	ldr	r2, [pc, #148]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b6a2:	f043 0301 	orr.w	r3, r3, #1
 800b6a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b6aa:	4b23      	ldr	r3, [pc, #140]	; (800b738 <HAL_ETH_MspInit+0x158>)
 800b6ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 800b6b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b6bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6be:	2302      	movs	r3, #2
 800b6c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b6ca:	230b      	movs	r3, #11
 800b6cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b6ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	4819      	ldr	r0, [pc, #100]	; (800b73c <HAL_ETH_MspInit+0x15c>)
 800b6d6:	f7f7 fffd 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 800b6da:	2332      	movs	r3, #50	; 0x32
 800b6dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6de:	2302      	movs	r3, #2
 800b6e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b6ea:	230b      	movs	r3, #11
 800b6ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b6ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	4812      	ldr	r0, [pc, #72]	; (800b740 <HAL_ETH_MspInit+0x160>)
 800b6f6:	f7f7 ffed 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 800b6fa:	2386      	movs	r3, #134	; 0x86
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6fe:	2302      	movs	r3, #2
 800b700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b702:	2300      	movs	r3, #0
 800b704:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b706:	2303      	movs	r3, #3
 800b708:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b70a:	230b      	movs	r3, #11
 800b70c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b70e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b712:	4619      	mov	r1, r3
 800b714:	480b      	ldr	r0, [pc, #44]	; (800b744 <HAL_ETH_MspInit+0x164>)
 800b716:	f7f7 ffdd 	bl	80036d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b71a:	2200      	movs	r2, #0
 800b71c:	2105      	movs	r1, #5
 800b71e:	203d      	movs	r0, #61	; 0x3d
 800b720:	f7f6 f9aa 	bl	8001a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b724:	203d      	movs	r0, #61	; 0x3d
 800b726:	f7f6 f9c1 	bl	8001aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b72a:	bf00      	nop
 800b72c:	3738      	adds	r7, #56	; 0x38
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	40028000 	.word	0x40028000
 800b738:	58024400 	.word	0x58024400
 800b73c:	58021800 	.word	0x58021800
 800b740:	58020800 	.word	0x58020800
 800b744:	58020000 	.word	0x58020000

0800b748 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b74c:	4802      	ldr	r0, [pc, #8]	; (800b758 <ETH_PHY_IO_Init+0x10>)
 800b74e:	f7f7 f9e7 	bl	8002b20 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	bd80      	pop	{r7, pc}
 800b758:	240012ac 	.word	0x240012ac

0800b75c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b75c:	b480      	push	{r7}
 800b75e:	af00      	add	r7, sp, #0
  return 0;
 800b760:	2300      	movs	r3, #0
}
 800b762:	4618      	mov	r0, r3
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	68f9      	ldr	r1, [r7, #12]
 800b77e:	4807      	ldr	r0, [pc, #28]	; (800b79c <ETH_PHY_IO_ReadReg+0x30>)
 800b780:	f7f6 ff38 	bl	80025f4 <HAL_ETH_ReadPHYRegister>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d002      	beq.n	800b790 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b78a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b78e:	e000      	b.n	800b792 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	240012ac 	.word	0x240012ac

0800b7a0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	68f9      	ldr	r1, [r7, #12]
 800b7b2:	4807      	ldr	r0, [pc, #28]	; (800b7d0 <ETH_PHY_IO_WriteReg+0x30>)
 800b7b4:	f7f6 ff72 	bl	800269c <HAL_ETH_WritePHYRegister>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d002      	beq.n	800b7c4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b7be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7c2:	e000      	b.n	800b7c6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	240012ac 	.word	0x240012ac

0800b7d4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b7d8:	f7f6 f846 	bl	8001868 <HAL_GetTick>
 800b7dc:	4603      	mov	r3, r0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af02      	add	r7, sp, #8
 800b7ea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b7ec:	4812      	ldr	r0, [pc, #72]	; (800b838 <HAL_ETH_RxAllocateCallback+0x54>)
 800b7ee:	f00b f955 	bl	8016a9c <memp_malloc_pool>
 800b7f2:	60f8      	str	r0, [r7, #12]
  if (p)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d014      	beq.n	800b824 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f103 0220 	add.w	r2, r3, #32
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	4a0d      	ldr	r2, [pc, #52]	; (800b83c <HAL_ETH_RxAllocateCallback+0x58>)
 800b808:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b812:	9201      	str	r2, [sp, #4]
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2241      	movs	r2, #65	; 0x41
 800b81a:	2100      	movs	r1, #0
 800b81c:	2000      	movs	r0, #0
 800b81e:	f00b ff11 	bl	8017644 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b822:	e005      	b.n	800b830 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b824:	4b06      	ldr	r3, [pc, #24]	; (800b840 <HAL_ETH_RxAllocateCallback+0x5c>)
 800b826:	2201      	movs	r2, #1
 800b828:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]
}
 800b830:	bf00      	nop
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	080243d8 	.word	0x080243d8
 800b83c:	0800b591 	.word	0x0800b591
 800b840:	240012a0 	.word	0x240012a0

0800b844 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b844:	b480      	push	{r7}
 800b846:	b08d      	sub	sp, #52	; 0x34
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800b85a:	2300      	movs	r3, #0
 800b85c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3b20      	subs	r3, #32
 800b862:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b866:	2200      	movs	r2, #0
 800b868:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	2200      	movs	r2, #0
 800b86e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b872:	887a      	ldrh	r2, [r7, #2]
 800b874:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d103      	bne.n	800b886 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b882:	601a      	str	r2, [r3, #0]
 800b884:	e003      	b.n	800b88e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b88c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b892:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b89a:	e009      	b.n	800b8b0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89e:	891a      	ldrh	r2, [r3, #8]
 800b8a0:	887b      	ldrh	r3, [r7, #2]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1f2      	bne.n	800b89c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800b8b6:	887b      	ldrh	r3, [r7, #2]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	623a      	str	r2, [r7, #32]
 800b8bc:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	dd1d      	ble.n	800b900 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	f003 021f 	and.w	r2, r3, #31
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
 800b8d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800b8d4:	f3bf 8f4f 	dsb	sy
}
 800b8d8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800b8da:	4a0d      	ldr	r2, [pc, #52]	; (800b910 <HAL_ETH_RxLinkCallback+0xcc>)
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	3320      	adds	r3, #32
 800b8e6:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	3b20      	subs	r3, #32
 800b8ec:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	dcf2      	bgt.n	800b8da <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800b8f4:	f3bf 8f4f 	dsb	sy
}
 800b8f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b8fa:	f3bf 8f6f 	isb	sy
}
 800b8fe:	bf00      	nop
}
 800b900:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b902:	bf00      	nop
 800b904:	3734      	adds	r7, #52	; 0x34
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	e000ed00 	.word	0xe000ed00

0800b914 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f00c f849 	bl	80179b4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
	...

0800b92c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b936:	79fb      	ldrb	r3, [r7, #7]
 800b938:	4a08      	ldr	r2, [pc, #32]	; (800b95c <disk_status+0x30>)
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	79fa      	ldrb	r2, [r7, #7]
 800b944:	4905      	ldr	r1, [pc, #20]	; (800b95c <disk_status+0x30>)
 800b946:	440a      	add	r2, r1
 800b948:	7a12      	ldrb	r2, [r2, #8]
 800b94a:	4610      	mov	r0, r2
 800b94c:	4798      	blx	r3
 800b94e:	4603      	mov	r3, r0
 800b950:	73fb      	strb	r3, [r7, #15]
	return stat;
 800b952:	7bfb      	ldrb	r3, [r7, #15]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	240013bc 	.word	0x240013bc

0800b960 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	4603      	mov	r3, r0
 800b968:	71fb      	strb	r3, [r7, #7]
	 DSTATUS stat = RES_OK;
 800b96a:	2300      	movs	r3, #0
 800b96c:	73fb      	strb	r3, [r7, #15]

	  if(disk.is_initialized[pdrv] == 0)
 800b96e:	79fb      	ldrb	r3, [r7, #7]
 800b970:	4a0d      	ldr	r2, [pc, #52]	; (800b9a8 <disk_initialize+0x48>)
 800b972:	5cd3      	ldrb	r3, [r2, r3]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d111      	bne.n	800b99c <disk_initialize+0x3c>
	  {
	    disk.is_initialized[pdrv] = 1;
 800b978:	79fb      	ldrb	r3, [r7, #7]
 800b97a:	4a0b      	ldr	r2, [pc, #44]	; (800b9a8 <disk_initialize+0x48>)
 800b97c:	2101      	movs	r1, #1
 800b97e:	54d1      	strb	r1, [r2, r3]
	    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b980:	79fb      	ldrb	r3, [r7, #7]
 800b982:	4a09      	ldr	r2, [pc, #36]	; (800b9a8 <disk_initialize+0x48>)
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4413      	add	r3, r2
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	79fa      	ldrb	r2, [r7, #7]
 800b98e:	4906      	ldr	r1, [pc, #24]	; (800b9a8 <disk_initialize+0x48>)
 800b990:	440a      	add	r2, r1
 800b992:	7a12      	ldrb	r2, [r2, #8]
 800b994:	4610      	mov	r0, r2
 800b996:	4798      	blx	r3
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]
	  }
	  return stat;
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	240013bc 	.word	0x240013bc

0800b9ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b9ac:	b590      	push	{r4, r7, lr}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60b9      	str	r1, [r7, #8]
 800b9b4:	607a      	str	r2, [r7, #4]
 800b9b6:	603b      	str	r3, [r7, #0]
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	73fb      	strb	r3, [r7, #15]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	4a0a      	ldr	r2, [pc, #40]	; (800b9e8 <disk_read+0x3c>)
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4413      	add	r3, r2
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	689c      	ldr	r4, [r3, #8]
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ca:	4a07      	ldr	r2, [pc, #28]	; (800b9e8 <disk_read+0x3c>)
 800b9cc:	4413      	add	r3, r2
 800b9ce:	7a18      	ldrb	r0, [r3, #8]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	68b9      	ldr	r1, [r7, #8]
 800b9d6:	47a0      	blx	r4
 800b9d8:	4603      	mov	r3, r0
 800b9da:	75fb      	strb	r3, [r7, #23]
	  return res;
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	371c      	adds	r7, #28
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd90      	pop	{r4, r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	240013bc 	.word	0x240013bc

0800b9ec <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 800b9ec:	b590      	push	{r4, r7, lr}
 800b9ee:	b087      	sub	sp, #28
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60b9      	str	r1, [r7, #8]
 800b9f4:	607a      	str	r2, [r7, #4]
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	73fb      	strb	r3, [r7, #15]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b9fc:	7bfb      	ldrb	r3, [r7, #15]
 800b9fe:	4a0a      	ldr	r2, [pc, #40]	; (800ba28 <disk_write+0x3c>)
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	68dc      	ldr	r4, [r3, #12]
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
 800ba0a:	4a07      	ldr	r2, [pc, #28]	; (800ba28 <disk_write+0x3c>)
 800ba0c:	4413      	add	r3, r2
 800ba0e:	7a18      	ldrb	r0, [r3, #8]
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	68b9      	ldr	r1, [r7, #8]
 800ba16:	47a0      	blx	r4
 800ba18:	4603      	mov	r3, r0
 800ba1a:	75fb      	strb	r3, [r7, #23]
	  return res;
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]

}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd90      	pop	{r4, r7, pc}
 800ba26:	bf00      	nop
 800ba28:	240013bc 	.word	0x240013bc

0800ba2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	4603      	mov	r3, r0
 800ba34:	603a      	str	r2, [r7, #0]
 800ba36:	71fb      	strb	r3, [r7, #7]
 800ba38:	460b      	mov	r3, r1
 800ba3a:	71bb      	strb	r3, [r7, #6]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ba3c:	79fb      	ldrb	r3, [r7, #7]
 800ba3e:	4a09      	ldr	r2, [pc, #36]	; (800ba64 <disk_ioctl+0x38>)
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	4413      	add	r3, r2
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	79fa      	ldrb	r2, [r7, #7]
 800ba4a:	4906      	ldr	r1, [pc, #24]	; (800ba64 <disk_ioctl+0x38>)
 800ba4c:	440a      	add	r2, r1
 800ba4e:	7a10      	ldrb	r0, [r2, #8]
 800ba50:	79b9      	ldrb	r1, [r7, #6]
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	4798      	blx	r3
 800ba56:	4603      	mov	r3, r0
 800ba58:	73fb      	strb	r3, [r7, #15]
	  return res;
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3710      	adds	r7, #16
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	240013bc 	.word	0x240013bc

0800ba68 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3301      	adds	r3, #1
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ba78:	89fb      	ldrh	r3, [r7, #14]
 800ba7a:	021b      	lsls	r3, r3, #8
 800ba7c:	b21a      	sxth	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	b21b      	sxth	r3, r3
 800ba84:	4313      	orrs	r3, r2
 800ba86:	b21b      	sxth	r3, r3
 800ba88:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ba8a:	89fb      	ldrh	r3, [r7, #14]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3303      	adds	r3, #3
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	021b      	lsls	r3, r3, #8
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	3202      	adds	r2, #2
 800bab0:	7812      	ldrb	r2, [r2, #0]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	021b      	lsls	r3, r3, #8
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	3201      	adds	r2, #1
 800babe:	7812      	ldrb	r2, [r2, #0]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	021b      	lsls	r3, r3, #8
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	7812      	ldrb	r2, [r2, #0]
 800bacc:	4313      	orrs	r3, r2
 800bace:	60fb      	str	r3, [r7, #12]
	return rv;
 800bad0:	68fb      	ldr	r3, [r7, #12]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bade:	b480      	push	{r7}
 800bae0:	b083      	sub	sp, #12
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	460b      	mov	r3, r1
 800bae8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	887a      	ldrh	r2, [r7, #2]
 800baf2:	b2d2      	uxtb	r2, r2
 800baf4:	701a      	strb	r2, [r3, #0]
 800baf6:	887b      	ldrh	r3, [r7, #2]
 800baf8:	0a1b      	lsrs	r3, r3, #8
 800bafa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	607a      	str	r2, [r7, #4]
 800bb02:	887a      	ldrh	r2, [r7, #2]
 800bb04:	b2d2      	uxtb	r2, r2
 800bb06:	701a      	strb	r2, [r3, #0]
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	1c5a      	adds	r2, r3, #1
 800bb22:	607a      	str	r2, [r7, #4]
 800bb24:	683a      	ldr	r2, [r7, #0]
 800bb26:	b2d2      	uxtb	r2, r2
 800bb28:	701a      	strb	r2, [r3, #0]
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	0a1b      	lsrs	r3, r3, #8
 800bb2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	1c5a      	adds	r2, r3, #1
 800bb34:	607a      	str	r2, [r7, #4]
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	b2d2      	uxtb	r2, r2
 800bb3a:	701a      	strb	r2, [r3, #0]
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	0a1b      	lsrs	r3, r3, #8
 800bb40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	607a      	str	r2, [r7, #4]
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	b2d2      	uxtb	r2, r2
 800bb4c:	701a      	strb	r2, [r3, #0]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	0a1b      	lsrs	r3, r3, #8
 800bb52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	1c5a      	adds	r2, r3, #1
 800bb58:	607a      	str	r2, [r7, #4]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	b2d2      	uxtb	r2, r2
 800bb5e:	701a      	strb	r2, [r3, #0]
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	4603      	mov	r3, r0
 800bb74:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 800bb76:	2281      	movs	r2, #129	; 0x81
 800bb78:	79fb      	ldrb	r3, [r7, #7]
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d30f      	bcc.n	800bb9e <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 800bb7e:	229f      	movs	r2, #159	; 0x9f
 800bb80:	79fb      	ldrb	r3, [r7, #7]
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d801      	bhi.n	800bb8a <dbc_1st+0x1e>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e00a      	b.n	800bba0 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 800bb8a:	22e0      	movs	r2, #224	; 0xe0
 800bb8c:	79fb      	ldrb	r3, [r7, #7]
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d305      	bcc.n	800bb9e <dbc_1st+0x32>
 800bb92:	22fc      	movs	r2, #252	; 0xfc
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d801      	bhi.n	800bb9e <dbc_1st+0x32>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e000      	b.n	800bba0 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 800bbb6:	2240      	movs	r2, #64	; 0x40
 800bbb8:	79fb      	ldrb	r3, [r7, #7]
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d319      	bcc.n	800bbf2 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 800bbbe:	227e      	movs	r2, #126	; 0x7e
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d801      	bhi.n	800bbca <dbc_2nd+0x1e>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e014      	b.n	800bbf4 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 800bbca:	2280      	movs	r2, #128	; 0x80
 800bbcc:	79fb      	ldrb	r3, [r7, #7]
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d305      	bcc.n	800bbde <dbc_2nd+0x32>
 800bbd2:	22fc      	movs	r2, #252	; 0xfc
 800bbd4:	79fb      	ldrb	r3, [r7, #7]
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d801      	bhi.n	800bbde <dbc_2nd+0x32>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e00a      	b.n	800bbf4 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 800bbde:	2200      	movs	r2, #0
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d305      	bcc.n	800bbf2 <dbc_2nd+0x46>
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	79fb      	ldrb	r3, [r7, #7]
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d801      	bhi.n	800bbf2 <dbc_2nd+0x46>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e000      	b.n	800bbf4 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	791b      	ldrb	r3, [r3, #4]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d02c      	beq.n	800bc6e <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7858      	ldrb	r0, [r3, #1]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc22:	2301      	movs	r3, #1
 800bc24:	f7ff fee2 	bl	800b9ec <disk_write>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d11d      	bne.n	800bc6a <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a1b      	ldr	r3, [r3, #32]
 800bc3c:	1ad2      	subs	r2, r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d213      	bcs.n	800bc6e <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	78db      	ldrb	r3, [r3, #3]
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d10f      	bne.n	800bc6e <sync_window+0x6e>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	7858      	ldrb	r0, [r3, #1]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	441a      	add	r2, r3
 800bc62:	2301      	movs	r3, #1
 800bc64:	f7ff fec2 	bl	800b9ec <disk_write>
 800bc68:	e001      	b.n	800bc6e <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d01b      	beq.n	800bcc8 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f7ff ffb5 	bl	800bc00 <sync_window>
 800bc96:	4603      	mov	r3, r0
 800bc98:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d113      	bne.n	800bcc8 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	7858      	ldrb	r0, [r3, #1]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcaa:	2301      	movs	r3, #1
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	f7ff fe7d 	bl	800b9ac <disk_read>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d004      	beq.n	800bcc2 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800bcb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcbc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bcc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
	...

0800bcd4 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7ff ff8f 	bl	800bc00 <sync_window>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d158      	bne.n	800bd9e <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d148      	bne.n	800bd86 <sync_fs+0xb2>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	795b      	ldrb	r3, [r3, #5]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d144      	bne.n	800bd86 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3330      	adds	r3, #48	; 0x30
 800bd00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd04:	2100      	movs	r1, #0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f013 fb2a 	bl	801f360 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	3330      	adds	r3, #48	; 0x30
 800bd10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd14:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7ff fee0 	bl	800bade <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	3330      	adds	r3, #48	; 0x30
 800bd22:	4921      	ldr	r1, [pc, #132]	; (800bda8 <sync_fs+0xd4>)
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff fef5 	bl	800bb14 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	3330      	adds	r3, #48	; 0x30
 800bd2e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bd32:	491e      	ldr	r1, [pc, #120]	; (800bdac <sync_fs+0xd8>)
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7ff feed 	bl	800bb14 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	3330      	adds	r3, #48	; 0x30
 800bd3e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	4619      	mov	r1, r3
 800bd48:	4610      	mov	r0, r2
 800bd4a:	f7ff fee3 	bl	800bb14 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3330      	adds	r3, #48	; 0x30
 800bd52:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	f7ff fed9 	bl	800bb14 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	69db      	ldr	r3, [r3, #28]
 800bd66:	1c5a      	adds	r2, r3, #1
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	7858      	ldrb	r0, [r3, #1]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	f7ff fe36 	bl	800b9ec <disk_write>
			fs->fsi_flag = 0;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	785b      	ldrb	r3, [r3, #1]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7ff fe4c 	bl	800ba2c <disk_ioctl>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <sync_fs+0xca>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	41615252 	.word	0x41615252
 800bdac:	61417272 	.word	0x61417272

0800bdb0 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	3b02      	subs	r3, #2
 800bdbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	695b      	ldr	r3, [r3, #20]
 800bdc4:	3b02      	subs	r3, #2
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d301      	bcc.n	800bdd0 <clst2sect+0x20>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	e008      	b.n	800bde2 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	895b      	ldrh	r3, [r3, #10]
 800bdd8:	4619      	mov	r1, r3
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	fb01 f303 	mul.w	r3, r1, r3
 800bde0:	4413      	add	r3, r2
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b086      	sub	sp, #24
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d904      	bls.n	800be0e <get_fat+0x20>
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d302      	bcc.n	800be14 <get_fat+0x26>
		val = 1;	/* Internal error */
 800be0e:	2301      	movs	r3, #1
 800be10:	617b      	str	r3, [r7, #20]
 800be12:	e08f      	b.n	800bf34 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800be14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be18:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	2b03      	cmp	r3, #3
 800be20:	d062      	beq.n	800bee8 <get_fat+0xfa>
 800be22:	2b03      	cmp	r3, #3
 800be24:	dc7c      	bgt.n	800bf20 <get_fat+0x132>
 800be26:	2b01      	cmp	r3, #1
 800be28:	d002      	beq.n	800be30 <get_fat+0x42>
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d042      	beq.n	800beb4 <get_fat+0xc6>
 800be2e:	e077      	b.n	800bf20 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	60fb      	str	r3, [r7, #12]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	085b      	lsrs	r3, r3, #1
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	4413      	add	r3, r2
 800be3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	6a1a      	ldr	r2, [r3, #32]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	0a5b      	lsrs	r3, r3, #9
 800be46:	4413      	add	r3, r2
 800be48:	4619      	mov	r1, r3
 800be4a:	6938      	ldr	r0, [r7, #16]
 800be4c:	f7ff ff14 	bl	800bc78 <move_window>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d167      	bne.n	800bf26 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	1c5a      	adds	r2, r3, #1
 800be5a:	60fa      	str	r2, [r7, #12]
 800be5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be60:	693a      	ldr	r2, [r7, #16]
 800be62:	4413      	add	r3, r2
 800be64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be68:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	6a1a      	ldr	r2, [r3, #32]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	0a5b      	lsrs	r3, r3, #9
 800be72:	4413      	add	r3, r2
 800be74:	4619      	mov	r1, r3
 800be76:	6938      	ldr	r0, [r7, #16]
 800be78:	f7ff fefe 	bl	800bc78 <move_window>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d153      	bne.n	800bf2a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	4413      	add	r3, r2
 800be8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be90:	021b      	lsls	r3, r3, #8
 800be92:	461a      	mov	r2, r3
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	4313      	orrs	r3, r2
 800be98:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	f003 0301 	and.w	r3, r3, #1
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <get_fat+0xbc>
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	091b      	lsrs	r3, r3, #4
 800bea8:	e002      	b.n	800beb0 <get_fat+0xc2>
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800beb0:	617b      	str	r3, [r7, #20]
			break;
 800beb2:	e03f      	b.n	800bf34 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	6a1a      	ldr	r2, [r3, #32]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	0a1b      	lsrs	r3, r3, #8
 800bebc:	4413      	add	r3, r2
 800bebe:	4619      	mov	r1, r3
 800bec0:	6938      	ldr	r0, [r7, #16]
 800bec2:	f7ff fed9 	bl	800bc78 <move_window>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d130      	bne.n	800bf2e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	005b      	lsls	r3, r3, #1
 800bed6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800beda:	4413      	add	r3, r2
 800bedc:	4618      	mov	r0, r3
 800bede:	f7ff fdc3 	bl	800ba68 <ld_word>
 800bee2:	4603      	mov	r3, r0
 800bee4:	617b      	str	r3, [r7, #20]
			break;
 800bee6:	e025      	b.n	800bf34 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	6a1a      	ldr	r2, [r3, #32]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	09db      	lsrs	r3, r3, #7
 800bef0:	4413      	add	r3, r2
 800bef2:	4619      	mov	r1, r3
 800bef4:	6938      	ldr	r0, [r7, #16]
 800bef6:	f7ff febf 	bl	800bc78 <move_window>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d118      	bne.n	800bf32 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bf0e:	4413      	add	r3, r2
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff fdc1 	bl	800ba98 <ld_dword>
 800bf16:	4603      	mov	r3, r0
 800bf18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bf1c:	617b      	str	r3, [r7, #20]
			break;
 800bf1e:	e009      	b.n	800bf34 <get_fat+0x146>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 800bf20:	2301      	movs	r3, #1
 800bf22:	617b      	str	r3, [r7, #20]
 800bf24:	e006      	b.n	800bf34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf26:	bf00      	nop
 800bf28:	e004      	b.n	800bf34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf2a:	bf00      	nop
 800bf2c:	e002      	b.n	800bf34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf2e:	bf00      	nop
 800bf30:	e000      	b.n	800bf34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf32:	bf00      	nop
		}
	}

	return val;
 800bf34:	697b      	ldr	r3, [r7, #20]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3718      	adds	r7, #24
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bf3e:	b590      	push	{r4, r7, lr}
 800bf40:	b089      	sub	sp, #36	; 0x24
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	60f8      	str	r0, [r7, #12]
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	f240 80d2 	bls.w	800c0fa <put_fat+0x1bc>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	695b      	ldr	r3, [r3, #20]
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	f080 80cc 	bcs.w	800c0fa <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	f000 8096 	beq.w	800c098 <put_fat+0x15a>
 800bf6c:	2b03      	cmp	r3, #3
 800bf6e:	f300 80cd 	bgt.w	800c10c <put_fat+0x1ce>
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d002      	beq.n	800bf7c <put_fat+0x3e>
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d06e      	beq.n	800c058 <put_fat+0x11a>
 800bf7a:	e0c7      	b.n	800c10c <put_fat+0x1ce>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	61bb      	str	r3, [r7, #24]
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	085b      	lsrs	r3, r3, #1
 800bf84:	69ba      	ldr	r2, [r7, #24]
 800bf86:	4413      	add	r3, r2
 800bf88:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6a1a      	ldr	r2, [r3, #32]
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	0a5b      	lsrs	r3, r3, #9
 800bf92:	4413      	add	r3, r2
 800bf94:	4619      	mov	r1, r3
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f7ff fe6e 	bl	800bc78 <move_window>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfa0:	7ffb      	ldrb	r3, [r7, #31]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f040 80ab 	bne.w	800c0fe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	1c59      	adds	r1, r3, #1
 800bfb2:	61b9      	str	r1, [r7, #24]
 800bfb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb8:	4413      	add	r3, r2
 800bfba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00d      	beq.n	800bfe2 <put_fat+0xa4>
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	b25b      	sxtb	r3, r3
 800bfcc:	f003 030f 	and.w	r3, r3, #15
 800bfd0:	b25a      	sxtb	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	011b      	lsls	r3, r3, #4
 800bfd8:	b25b      	sxtb	r3, r3
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	b25b      	sxtb	r3, r3
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	e001      	b.n	800bfe6 <put_fat+0xa8>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2201      	movs	r2, #1
 800bfee:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6a1a      	ldr	r2, [r3, #32]
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	0a5b      	lsrs	r3, r3, #9
 800bff8:	4413      	add	r3, r2
 800bffa:	4619      	mov	r1, r3
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f7ff fe3b 	bl	800bc78 <move_window>
 800c002:	4603      	mov	r3, r0
 800c004:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c006:	7ffb      	ldrb	r3, [r7, #31]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d17a      	bne.n	800c102 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c018:	4413      	add	r3, r2
 800c01a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	f003 0301 	and.w	r3, r3, #1
 800c022:	2b00      	cmp	r3, #0
 800c024:	d003      	beq.n	800c02e <put_fat+0xf0>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	091b      	lsrs	r3, r3, #4
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	e00e      	b.n	800c04c <put_fat+0x10e>
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	b25b      	sxtb	r3, r3
 800c034:	f023 030f 	bic.w	r3, r3, #15
 800c038:	b25a      	sxtb	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	0a1b      	lsrs	r3, r3, #8
 800c03e:	b25b      	sxtb	r3, r3
 800c040:	f003 030f 	and.w	r3, r3, #15
 800c044:	b25b      	sxtb	r3, r3
 800c046:	4313      	orrs	r3, r2
 800c048:	b25b      	sxtb	r3, r3
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2201      	movs	r2, #1
 800c054:	711a      	strb	r2, [r3, #4]
			break;
 800c056:	e059      	b.n	800c10c <put_fat+0x1ce>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6a1a      	ldr	r2, [r3, #32]
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	0a1b      	lsrs	r3, r3, #8
 800c060:	4413      	add	r3, r2
 800c062:	4619      	mov	r1, r3
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f7ff fe07 	bl	800bc78 <move_window>
 800c06a:	4603      	mov	r3, r0
 800c06c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c06e:	7ffb      	ldrb	r3, [r7, #31]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d148      	bne.n	800c106 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	005b      	lsls	r3, r3, #1
 800c07e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c082:	4413      	add	r3, r2
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	b292      	uxth	r2, r2
 800c088:	4611      	mov	r1, r2
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7ff fd27 	bl	800bade <st_word>
			fs->wflag = 1;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2201      	movs	r2, #1
 800c094:	711a      	strb	r2, [r3, #4]
			break;
 800c096:	e039      	b.n	800c10c <put_fat+0x1ce>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6a1a      	ldr	r2, [r3, #32]
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	09db      	lsrs	r3, r3, #7
 800c0a0:	4413      	add	r3, r2
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f7ff fde7 	bl	800bc78 <move_window>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0ae:	7ffb      	ldrb	r3, [r7, #31]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d12a      	bne.n	800c10a <put_fat+0x1cc>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c0c8:	4413      	add	r3, r2
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7ff fce4 	bl	800ba98 <ld_dword>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c0d6:	4323      	orrs	r3, r4
 800c0d8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c0e8:	4413      	add	r3, r2
 800c0ea:	6879      	ldr	r1, [r7, #4]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7ff fd11 	bl	800bb14 <st_dword>
			fs->wflag = 1;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	711a      	strb	r2, [r3, #4]
			break;
 800c0f8:	e008      	b.n	800c10c <put_fat+0x1ce>
		}
	}
 800c0fa:	bf00      	nop
 800c0fc:	e006      	b.n	800c10c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c0fe:	bf00      	nop
 800c100:	e004      	b.n	800c10c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c102:	bf00      	nop
 800c104:	e002      	b.n	800c10c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c106:	bf00      	nop
 800c108:	e000      	b.n	800c10c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c10a:	bf00      	nop
	return res;
 800c10c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3724      	adds	r7, #36	; 0x24
 800c112:	46bd      	mov	sp, r7
 800c114:	bd90      	pop	{r4, r7, pc}

0800c116 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b088      	sub	sp, #32
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	60f8      	str	r0, [r7, #12]
 800c11e:	60b9      	str	r1, [r7, #8]
 800c120:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d904      	bls.n	800c13c <remove_chain+0x26>
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d301      	bcc.n	800c140 <remove_chain+0x2a>
 800c13c:	2302      	movs	r3, #2
 800c13e:	e04b      	b.n	800c1d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00c      	beq.n	800c160 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c14a:	6879      	ldr	r1, [r7, #4]
 800c14c:	69b8      	ldr	r0, [r7, #24]
 800c14e:	f7ff fef6 	bl	800bf3e <put_fat>
 800c152:	4603      	mov	r3, r0
 800c154:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c156:	7ffb      	ldrb	r3, [r7, #31]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <remove_chain+0x4a>
 800c15c:	7ffb      	ldrb	r3, [r7, #31]
 800c15e:	e03b      	b.n	800c1d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c160:	68b9      	ldr	r1, [r7, #8]
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f7ff fe43 	bl	800bdee <get_fat>
 800c168:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d031      	beq.n	800c1d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d101      	bne.n	800c17a <remove_chain+0x64>
 800c176:	2302      	movs	r3, #2
 800c178:	e02e      	b.n	800c1d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c180:	d101      	bne.n	800c186 <remove_chain+0x70>
 800c182:	2301      	movs	r3, #1
 800c184:	e028      	b.n	800c1d8 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c186:	2200      	movs	r2, #0
 800c188:	68b9      	ldr	r1, [r7, #8]
 800c18a:	69b8      	ldr	r0, [r7, #24]
 800c18c:	f7ff fed7 	bl	800bf3e <put_fat>
 800c190:	4603      	mov	r3, r0
 800c192:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c194:	7ffb      	ldrb	r3, [r7, #31]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d001      	beq.n	800c19e <remove_chain+0x88>
 800c19a:	7ffb      	ldrb	r3, [r7, #31]
 800c19c:	e01c      	b.n	800c1d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	691a      	ldr	r2, [r3, #16]
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	3b02      	subs	r3, #2
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d20b      	bcs.n	800c1c4 <remove_chain+0xae>
			fs->free_clst++;
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	1c5a      	adds	r2, r3, #1
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	795b      	ldrb	r3, [r3, #5]
 800c1ba:	f043 0301 	orr.w	r3, r3, #1
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	695b      	ldr	r3, [r3, #20]
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d3c6      	bcc.n	800c160 <remove_chain+0x4a>
 800c1d2:	e000      	b.n	800c1d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c1d4:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3720      	adds	r7, #32
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b088      	sub	sp, #32
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10d      	bne.n	800c212 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d004      	beq.n	800c20c <create_chain+0x2c>
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	695b      	ldr	r3, [r3, #20]
 800c206:	69ba      	ldr	r2, [r7, #24]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d31b      	bcc.n	800c244 <create_chain+0x64>
 800c20c:	2301      	movs	r3, #1
 800c20e:	61bb      	str	r3, [r7, #24]
 800c210:	e018      	b.n	800c244 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7ff fdea 	bl	800bdee <get_fat>
 800c21a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d801      	bhi.n	800c226 <create_chain+0x46>
 800c222:	2301      	movs	r3, #1
 800c224:	e0a9      	b.n	800c37a <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c22c:	d101      	bne.n	800c232 <create_chain+0x52>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	e0a3      	b.n	800c37a <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	695b      	ldr	r3, [r3, #20]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d201      	bcs.n	800c240 <create_chain+0x60>
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	e09c      	b.n	800c37a <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <create_chain+0x70>
 800c24c:	2300      	movs	r3, #0
 800c24e:	e094      	b.n	800c37a <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800c250:	2300      	movs	r3, #0
 800c252:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800c254:	69ba      	ldr	r2, [r7, #24]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d129      	bne.n	800c2b0 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	3301      	adds	r3, #1
 800c260:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	69fa      	ldr	r2, [r7, #28]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d301      	bcc.n	800c270 <create_chain+0x90>
 800c26c:	2302      	movs	r3, #2
 800c26e:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800c270:	69f9      	ldr	r1, [r7, #28]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7ff fdbb 	bl	800bdee <get_fat>
 800c278:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d003      	beq.n	800c288 <create_chain+0xa8>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c286:	d101      	bne.n	800c28c <create_chain+0xac>
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	e076      	b.n	800c37a <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00e      	beq.n	800c2b0 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d906      	bls.n	800c2ac <create_chain+0xcc>
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	695b      	ldr	r3, [r3, #20]
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d201      	bcs.n	800c2ac <create_chain+0xcc>
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d129      	bne.n	800c30a <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	695b      	ldr	r3, [r3, #20]
 800c2c4:	69fa      	ldr	r2, [r7, #28]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d307      	bcc.n	800c2da <create_chain+0xfa>
					ncl = 2;
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800c2ce:	69fa      	ldr	r2, [r7, #28]
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d901      	bls.n	800c2da <create_chain+0xfa>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e04f      	b.n	800c37a <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c2da:	69f9      	ldr	r1, [r7, #28]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7ff fd86 	bl	800bdee <get_fat>
 800c2e2:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00e      	beq.n	800c308 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d003      	beq.n	800c2f8 <create_chain+0x118>
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2f6:	d101      	bne.n	800c2fc <create_chain+0x11c>
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	e03e      	b.n	800c37a <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800c2fc:	69fa      	ldr	r2, [r7, #28]
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	429a      	cmp	r2, r3
 800c302:	d1da      	bne.n	800c2ba <create_chain+0xda>
 800c304:	2300      	movs	r3, #0
 800c306:	e038      	b.n	800c37a <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800c308:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800c30a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c30e:	69f9      	ldr	r1, [r7, #28]
 800c310:	6938      	ldr	r0, [r7, #16]
 800c312:	f7ff fe14 	bl	800bf3e <put_fat>
 800c316:	4603      	mov	r3, r0
 800c318:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c31a:	7dfb      	ldrb	r3, [r7, #23]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d109      	bne.n	800c334 <create_chain+0x154>
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d006      	beq.n	800c334 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800c326:	69fa      	ldr	r2, [r7, #28]
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6938      	ldr	r0, [r7, #16]
 800c32c:	f7ff fe07 	bl	800bf3e <put_fat>
 800c330:	4603      	mov	r3, r0
 800c332:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c334:	7dfb      	ldrb	r3, [r7, #23]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d116      	bne.n	800c368 <create_chain+0x188>
		fs->last_clst = ncl;
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	69fa      	ldr	r2, [r7, #28]
 800c33e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	691a      	ldr	r2, [r3, #16]
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	695b      	ldr	r3, [r3, #20]
 800c348:	3b02      	subs	r3, #2
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d804      	bhi.n	800c358 <create_chain+0x178>
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	1e5a      	subs	r2, r3, #1
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	795b      	ldrb	r3, [r3, #5]
 800c35c:	f043 0301 	orr.w	r3, r3, #1
 800c360:	b2da      	uxtb	r2, r3
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	715a      	strb	r2, [r3, #5]
 800c366:	e007      	b.n	800c378 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c368:	7dfb      	ldrb	r3, [r7, #23]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d102      	bne.n	800c374 <create_chain+0x194>
 800c36e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c372:	e000      	b.n	800c376 <create_chain+0x196>
 800c374:	2301      	movs	r3, #1
 800c376:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c378:	69fb      	ldr	r3, [r7, #28]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3720      	adds	r7, #32
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b086      	sub	sp, #24
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
 800c38a:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7ff fc37 	bl	800bc00 <sync_window>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d001      	beq.n	800c39c <dir_clear+0x1a>
 800c398:	2301      	movs	r3, #1
 800c39a:	e036      	b.n	800c40a <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800c39c:	6839      	ldr	r1, [r7, #0]
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f7ff fd06 	bl	800bdb0 <clst2sect>
 800c3a4:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	62da      	str	r2, [r3, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	3330      	adds	r3, #48	; 0x30
 800c3b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f012 ffd2 	bl	801f360 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	3330      	adds	r3, #48	; 0x30
 800c3c0:	60fb      	str	r3, [r7, #12]
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	617b      	str	r3, [r7, #20]
 800c3ca:	e003      	b.n	800c3d4 <dir_clear+0x52>
 800c3cc:	697a      	ldr	r2, [r7, #20]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	617b      	str	r3, [r7, #20]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	895b      	ldrh	r3, [r3, #10]
 800c3d8:	461a      	mov	r2, r3
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d20b      	bcs.n	800c3f8 <dir_clear+0x76>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	7858      	ldrb	r0, [r3, #1]
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	441a      	add	r2, r3
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	68f9      	ldr	r1, [r7, #12]
 800c3ee:	f7ff fafd 	bl	800b9ec <disk_write>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d0e9      	beq.n	800c3cc <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	895b      	ldrh	r3, [r3, #10]
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	4293      	cmp	r3, r2
 800c402:	bf14      	ite	ne
 800c404:	2301      	movne	r3, #1
 800c406:	2300      	moveq	r3, #0
 800c408:	b2db      	uxtb	r3, r3
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3718      	adds	r7, #24
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b086      	sub	sp, #24
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c428:	d204      	bcs.n	800c434 <dir_sdi+0x22>
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	f003 031f 	and.w	r3, r3, #31
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c434:	2302      	movs	r3, #2
 800c436:	e063      	b.n	800c500 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	683a      	ldr	r2, [r7, #0]
 800c43c:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d106      	bne.n	800c458 <dir_sdi+0x46>
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d902      	bls.n	800c458 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c456:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10c      	bne.n	800c478 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	095b      	lsrs	r3, r3, #5
 800c462:	693a      	ldr	r2, [r7, #16]
 800c464:	8912      	ldrh	r2, [r2, #8]
 800c466:	4293      	cmp	r3, r2
 800c468:	d301      	bcc.n	800c46e <dir_sdi+0x5c>
 800c46a:	2302      	movs	r3, #2
 800c46c:	e048      	b.n	800c500 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	619a      	str	r2, [r3, #24]
 800c476:	e029      	b.n	800c4cc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	895b      	ldrh	r3, [r3, #10]
 800c47c:	025b      	lsls	r3, r3, #9
 800c47e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c480:	e019      	b.n	800c4b6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6979      	ldr	r1, [r7, #20]
 800c486:	4618      	mov	r0, r3
 800c488:	f7ff fcb1 	bl	800bdee <get_fat>
 800c48c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c494:	d101      	bne.n	800c49a <dir_sdi+0x88>
 800c496:	2301      	movs	r3, #1
 800c498:	e032      	b.n	800c500 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d904      	bls.n	800c4aa <dir_sdi+0x98>
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	695b      	ldr	r3, [r3, #20]
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d301      	bcc.n	800c4ae <dir_sdi+0x9c>
 800c4aa:	2302      	movs	r3, #2
 800c4ac:	e028      	b.n	800c500 <dir_sdi+0xee>
			ofs -= csz;
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d2e1      	bcs.n	800c482 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 800c4be:	6979      	ldr	r1, [r7, #20]
 800c4c0:	6938      	ldr	r0, [r7, #16]
 800c4c2:	f7ff fc75 	bl	800bdb0 <clst2sect>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d101      	bne.n	800c4de <dir_sdi+0xcc>
 800c4da:	2302      	movs	r3, #2
 800c4dc:	e010      	b.n	800c500 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	699a      	ldr	r2, [r3, #24]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	0a5b      	lsrs	r3, r3, #9
 800c4e6:	441a      	add	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f8:	441a      	add	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	3320      	adds	r3, #32
 800c51e:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c526:	d302      	bcc.n	800c52e <dir_next+0x26>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <dir_next+0x32>
 800c536:	2304      	movs	r3, #4
 800c538:	e078      	b.n	800c62c <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c540:	2b00      	cmp	r3, #0
 800c542:	d166      	bne.n	800c612 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	695b      	ldr	r3, [r3, #20]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	095b      	lsrs	r3, r3, #5
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	8912      	ldrh	r2, [r2, #8]
 800c55e:	4293      	cmp	r3, r2
 800c560:	d357      	bcc.n	800c612 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	619a      	str	r2, [r3, #24]
 800c568:	2304      	movs	r3, #4
 800c56a:	e05f      	b.n	800c62c <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	0a5b      	lsrs	r3, r3, #9
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	8952      	ldrh	r2, [r2, #10]
 800c574:	3a01      	subs	r2, #1
 800c576:	4013      	ands	r3, r2
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d14a      	bne.n	800c612 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	4619      	mov	r1, r3
 800c584:	4610      	mov	r0, r2
 800c586:	f7ff fc32 	bl	800bdee <get_fat>
 800c58a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d801      	bhi.n	800c596 <dir_next+0x8e>
 800c592:	2302      	movs	r3, #2
 800c594:	e04a      	b.n	800c62c <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c59c:	d101      	bne.n	800c5a2 <dir_next+0x9a>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e044      	b.n	800c62c <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	695b      	ldr	r3, [r3, #20]
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d328      	bcc.n	800c5fe <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d104      	bne.n	800c5bc <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	619a      	str	r2, [r3, #24]
 800c5b8:	2304      	movs	r3, #4
 800c5ba:	e037      	b.n	800c62c <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	695b      	ldr	r3, [r3, #20]
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	4610      	mov	r0, r2
 800c5c6:	f7ff fe0b 	bl	800c1e0 <create_chain>
 800c5ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d101      	bne.n	800c5d6 <dir_next+0xce>
 800c5d2:	2307      	movs	r3, #7
 800c5d4:	e02a      	b.n	800c62c <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d101      	bne.n	800c5e0 <dir_next+0xd8>
 800c5dc:	2302      	movs	r3, #2
 800c5de:	e025      	b.n	800c62c <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5e6:	d101      	bne.n	800c5ec <dir_next+0xe4>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e01f      	b.n	800c62c <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800c5ec:	6979      	ldr	r1, [r7, #20]
 800c5ee:	6938      	ldr	r0, [r7, #16]
 800c5f0:	f7ff fec7 	bl	800c382 <dir_clear>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <dir_next+0xf6>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e016      	b.n	800c62c <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	697a      	ldr	r2, [r7, #20]
 800c602:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 800c604:	6979      	ldr	r1, [r7, #20]
 800c606:	6938      	ldr	r0, [r7, #16]
 800c608:	f7ff fbd2 	bl	800bdb0 <clst2sect>
 800c60c:	4602      	mov	r2, r0
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c624:	441a      	add	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3718      	adds	r7, #24
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b086      	sub	sp, #24
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c644:	2100      	movs	r1, #0
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff fee3 	bl	800c412 <dir_sdi>
 800c64c:	4603      	mov	r3, r0
 800c64e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c650:	7dfb      	ldrb	r3, [r7, #23]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d12b      	bne.n	800c6ae <dir_alloc+0x7a>
		n = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	699b      	ldr	r3, [r3, #24]
 800c65e:	4619      	mov	r1, r3
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f7ff fb09 	bl	800bc78 <move_window>
 800c666:	4603      	mov	r3, r0
 800c668:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c66a:	7dfb      	ldrb	r3, [r7, #23]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d11d      	bne.n	800c6ac <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	69db      	ldr	r3, [r3, #28]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2be5      	cmp	r3, #229	; 0xe5
 800c678:	d004      	beq.n	800c684 <dir_alloc+0x50>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d107      	bne.n	800c694 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	3301      	adds	r3, #1
 800c688:	613b      	str	r3, [r7, #16]
 800c68a:	693a      	ldr	r2, [r7, #16]
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d102      	bne.n	800c698 <dir_alloc+0x64>
 800c692:	e00c      	b.n	800c6ae <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800c694:	2300      	movs	r3, #0
 800c696:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800c698:	2101      	movs	r1, #1
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7ff ff34 	bl	800c508 <dir_next>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c6a4:	7dfb      	ldrb	r3, [r7, #23]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0d7      	beq.n	800c65a <dir_alloc+0x26>
 800c6aa:	e000      	b.n	800c6ae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c6ac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c6ae:	7dfb      	ldrb	r3, [r7, #23]
 800c6b0:	2b04      	cmp	r3, #4
 800c6b2:	d101      	bne.n	800c6b8 <dir_alloc+0x84>
 800c6b4:	2307      	movs	r3, #7
 800c6b6:	75fb      	strb	r3, [r7, #23]
	return res;
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	331a      	adds	r3, #26
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7ff f9c9 	bl	800ba68 <ld_word>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	2b03      	cmp	r3, #3
 800c6e0:	d109      	bne.n	800c6f6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	3314      	adds	r3, #20
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff f9be 	bl	800ba68 <ld_word>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	041b      	lsls	r3, r3, #16
 800c6f0:	68fa      	ldr	r2, [r7, #12]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	331a      	adds	r3, #26
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	b292      	uxth	r2, r2
 800c714:	4611      	mov	r1, r2
 800c716:	4618      	mov	r0, r3
 800c718:	f7ff f9e1 	bl	800bade <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	2b03      	cmp	r3, #3
 800c722:	d109      	bne.n	800c738 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	f103 0214 	add.w	r2, r3, #20
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	0c1b      	lsrs	r3, r3, #16
 800c72e:	b29b      	uxth	r3, r3
 800c730:	4619      	mov	r1, r3
 800c732:	4610      	mov	r0, r2
 800c734:	f7ff f9d3 	bl	800bade <st_word>
	}
}
 800c738:	bf00      	nop
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c74e:	2100      	movs	r1, #0
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff fe5e 	bl	800c412 <dir_sdi>
 800c756:	4603      	mov	r3, r0
 800c758:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d001      	beq.n	800c764 <dir_find+0x24>
 800c760:	7dfb      	ldrb	r3, [r7, #23]
 800c762:	e03e      	b.n	800c7e2 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	4619      	mov	r1, r3
 800c76a:	6938      	ldr	r0, [r7, #16]
 800c76c:	f7ff fa84 	bl	800bc78 <move_window>
 800c770:	4603      	mov	r3, r0
 800c772:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c774:	7dfb      	ldrb	r3, [r7, #23]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d12f      	bne.n	800c7da <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c782:	7bfb      	ldrb	r3, [r7, #15]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <dir_find+0x4e>
 800c788:	2304      	movs	r3, #4
 800c78a:	75fb      	strb	r3, [r7, #23]
 800c78c:	e028      	b.n	800c7e0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	69db      	ldr	r3, [r3, #28]
 800c792:	330b      	adds	r3, #11
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	69db      	ldr	r3, [r3, #28]
 800c7a4:	330b      	adds	r3, #11
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	f003 0308 	and.w	r3, r3, #8
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d10a      	bne.n	800c7c6 <dir_find+0x86>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	69d8      	ldr	r0, [r3, #28]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	3320      	adds	r3, #32
 800c7b8:	220b      	movs	r2, #11
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	f012 fd98 	bl	801f2f0 <memcmp>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00b      	beq.n	800c7de <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7ff fe9d 	bl	800c508 <dir_next>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c7d2:	7dfb      	ldrb	r3, [r7, #23]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d0c5      	beq.n	800c764 <dir_find+0x24>
 800c7d8:	e002      	b.n	800c7e0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c7da:	bf00      	nop
 800c7dc:	e000      	b.n	800c7e0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c7de:	bf00      	nop

	return res;
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3718      	adds	r7, #24
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b084      	sub	sp, #16
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c7f8:	2101      	movs	r1, #1
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7ff ff1a 	bl	800c634 <dir_alloc>
 800c800:	4603      	mov	r3, r0
 800c802:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c804:	7bfb      	ldrb	r3, [r7, #15]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d11c      	bne.n	800c844 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	4619      	mov	r1, r3
 800c810:	68b8      	ldr	r0, [r7, #8]
 800c812:	f7ff fa31 	bl	800bc78 <move_window>
 800c816:	4603      	mov	r3, r0
 800c818:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d111      	bne.n	800c844 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	69db      	ldr	r3, [r3, #28]
 800c824:	2220      	movs	r2, #32
 800c826:	2100      	movs	r1, #0
 800c828:	4618      	mov	r0, r3
 800c82a:	f012 fd99 	bl	801f360 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	69d8      	ldr	r0, [r3, #28]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	3320      	adds	r3, #32
 800c836:	220b      	movs	r2, #11
 800c838:	4619      	mov	r1, r3
 800c83a:	f012 fd69 	bl	801f310 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	2201      	movs	r2, #1
 800c842:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800c844:	7bfb      	ldrb	r3, [r7, #15]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
	...

0800c850 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b08a      	sub	sp, #40	; 0x28
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	617b      	str	r3, [r7, #20]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	3320      	adds	r3, #32
 800c864:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 800c866:	220b      	movs	r2, #11
 800c868:	2120      	movs	r1, #32
 800c86a:	6938      	ldr	r0, [r7, #16]
 800c86c:	f012 fd78 	bl	801f360 <memset>
	si = i = 0; ni = 8;
 800c870:	2300      	movs	r3, #0
 800c872:	61bb      	str	r3, [r7, #24]
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	61fb      	str	r3, [r7, #28]
 800c878:	2308      	movs	r3, #8
 800c87a:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	1c5a      	adds	r2, r3, #1
 800c880:	61fa      	str	r2, [r7, #28]
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	4413      	add	r3, r2
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c88c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c890:	2b20      	cmp	r3, #32
 800c892:	d97c      	bls.n	800c98e <create_name+0x13e>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 800c894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c898:	2b2f      	cmp	r3, #47	; 0x2f
 800c89a:	d007      	beq.n	800c8ac <create_name+0x5c>
 800c89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8a0:	2b5c      	cmp	r3, #92	; 0x5c
 800c8a2:	d110      	bne.n	800c8c6 <create_name+0x76>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800c8a4:	e002      	b.n	800c8ac <create_name+0x5c>
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	61fb      	str	r3, [r7, #28]
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b2f      	cmp	r3, #47	; 0x2f
 800c8b6:	d0f6      	beq.n	800c8a6 <create_name+0x56>
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	4413      	add	r3, r2
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2b5c      	cmp	r3, #92	; 0x5c
 800c8c2:	d0f0      	beq.n	800c8a6 <create_name+0x56>
			break;
 800c8c4:	e064      	b.n	800c990 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 800c8c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c8cc:	d003      	beq.n	800c8d6 <create_name+0x86>
 800c8ce:	69ba      	ldr	r2, [r7, #24]
 800c8d0:	6a3b      	ldr	r3, [r7, #32]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d30d      	bcc.n	800c8f2 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 800c8d6:	6a3b      	ldr	r3, [r7, #32]
 800c8d8:	2b0b      	cmp	r3, #11
 800c8da:	d003      	beq.n	800c8e4 <create_name+0x94>
 800c8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c8e2:	d001      	beq.n	800c8e8 <create_name+0x98>
 800c8e4:	2306      	movs	r3, #6
 800c8e6:	e075      	b.n	800c9d4 <create_name+0x184>
			i = 8; ni = 11;				/* Enter file extension field */
 800c8e8:	2308      	movs	r3, #8
 800c8ea:	61bb      	str	r3, [r7, #24]
 800c8ec:	230b      	movs	r3, #11
 800c8ee:	623b      	str	r3, [r7, #32]
			continue;
 800c8f0:	e04c      	b.n	800c98c <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 800c8f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7ff f938 	bl	800bb6c <dbc_1st>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d024      	beq.n	800c94c <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	1c5a      	adds	r2, r3, #1
 800c906:	61fa      	str	r2, [r7, #28]
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	4413      	add	r3, r2
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	4618      	mov	r0, r3
 800c914:	f7ff f94a 	bl	800bbac <dbc_2nd>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d004      	beq.n	800c928 <create_name+0xd8>
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	3b01      	subs	r3, #1
 800c922:	69ba      	ldr	r2, [r7, #24]
 800c924:	429a      	cmp	r2, r3
 800c926:	d301      	bcc.n	800c92c <create_name+0xdc>
 800c928:	2306      	movs	r3, #6
 800c92a:	e053      	b.n	800c9d4 <create_name+0x184>
			sfn[i++] = c;
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	61ba      	str	r2, [r7, #24]
 800c932:	693a      	ldr	r2, [r7, #16]
 800c934:	4413      	add	r3, r2
 800c936:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c93a:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	1c5a      	adds	r2, r3, #1
 800c940:	61ba      	str	r2, [r7, #24]
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	4413      	add	r3, r2
 800c946:	7bfa      	ldrb	r2, [r7, #15]
 800c948:	701a      	strb	r2, [r3, #0]
 800c94a:	e797      	b.n	800c87c <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c94c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c950:	4619      	mov	r1, r3
 800c952:	4822      	ldr	r0, [pc, #136]	; (800c9dc <create_name+0x18c>)
 800c954:	f013 fa83 	bl	801fe5e <strchr>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d001      	beq.n	800c962 <create_name+0x112>
 800c95e:	2306      	movs	r3, #6
 800c960:	e038      	b.n	800c9d4 <create_name+0x184>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c966:	2b60      	cmp	r3, #96	; 0x60
 800c968:	d908      	bls.n	800c97c <create_name+0x12c>
 800c96a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c96e:	2b7a      	cmp	r3, #122	; 0x7a
 800c970:	d804      	bhi.n	800c97c <create_name+0x12c>
 800c972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c976:	3b20      	subs	r3, #32
 800c978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	1c5a      	adds	r2, r3, #1
 800c980:	61ba      	str	r2, [r7, #24]
 800c982:	693a      	ldr	r2, [r7, #16]
 800c984:	4413      	add	r3, r2
 800c986:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c98a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 800c98c:	e776      	b.n	800c87c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c98e:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c990:	697a      	ldr	r2, [r7, #20]
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	441a      	add	r2, r3
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <create_name+0x154>
 800c9a0:	2306      	movs	r3, #6
 800c9a2:	e017      	b.n	800c9d4 <create_name+0x184>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	2be5      	cmp	r3, #229	; 0xe5
 800c9aa:	d102      	bne.n	800c9b2 <create_name+0x162>
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	2205      	movs	r2, #5
 800c9b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 800c9b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9b6:	2b20      	cmp	r3, #32
 800c9b8:	d905      	bls.n	800c9c6 <create_name+0x176>
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	4413      	add	r3, r2
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b20      	cmp	r3, #32
 800c9c4:	d801      	bhi.n	800c9ca <create_name+0x17a>
 800c9c6:	2204      	movs	r2, #4
 800c9c8:	e000      	b.n	800c9cc <create_name+0x17c>
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	330b      	adds	r3, #11
 800c9d0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c9d2:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3728      	adds	r7, #40	; 0x28
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	080209d8 	.word	0x080209d8

0800c9e0 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800c9f0:	e002      	b.n	800c9f8 <follow_path+0x18>
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	603b      	str	r3, [r7, #0]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b2f      	cmp	r3, #47	; 0x2f
 800c9fe:	d0f8      	beq.n	800c9f2 <follow_path+0x12>
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	2b5c      	cmp	r3, #92	; 0x5c
 800ca06:	d0f4      	beq.n	800c9f2 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	2b1f      	cmp	r3, #31
 800ca14:	d80a      	bhi.n	800ca2c <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2280      	movs	r2, #128	; 0x80
 800ca1a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800ca1e:	2100      	movs	r1, #0
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7ff fcf6 	bl	800c412 <dir_sdi>
 800ca26:	4603      	mov	r3, r0
 800ca28:	75fb      	strb	r3, [r7, #23]
 800ca2a:	e043      	b.n	800cab4 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ca2c:	463b      	mov	r3, r7
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7ff ff0d 	bl	800c850 <create_name>
 800ca36:	4603      	mov	r3, r0
 800ca38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ca3a:	7dfb      	ldrb	r3, [r7, #23]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d134      	bne.n	800caaa <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7ff fe7d 	bl	800c740 <dir_find>
 800ca46:	4603      	mov	r3, r0
 800ca48:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ca50:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d00a      	beq.n	800ca6e <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ca58:	7dfb      	ldrb	r3, [r7, #23]
 800ca5a:	2b04      	cmp	r3, #4
 800ca5c:	d127      	bne.n	800caae <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d122      	bne.n	800caae <follow_path+0xce>
 800ca68:	2305      	movs	r3, #5
 800ca6a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ca6c:	e01f      	b.n	800caae <follow_path+0xce>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800ca6e:	7bfb      	ldrb	r3, [r7, #15]
 800ca70:	f003 0304 	and.w	r3, r3, #4
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d11c      	bne.n	800cab2 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	799b      	ldrb	r3, [r3, #6]
 800ca7c:	f003 0310 	and.w	r3, r3, #16
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d102      	bne.n	800ca8a <follow_path+0xaa>
				res = FR_NO_PATH; break;
 800ca84:	2305      	movs	r3, #5
 800ca86:	75fb      	strb	r3, [r7, #23]
 800ca88:	e014      	b.n	800cab4 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca98:	4413      	add	r3, r2
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	6938      	ldr	r0, [r7, #16]
 800ca9e:	f7ff fe10 	bl	800c6c2 <ld_clust>
 800caa2:	4602      	mov	r2, r0
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800caa8:	e7c0      	b.n	800ca2c <follow_path+0x4c>
			if (res != FR_OK) break;
 800caaa:	bf00      	nop
 800caac:	e002      	b.n	800cab4 <follow_path+0xd4>
				break;
 800caae:	bf00      	nop
 800cab0:	e000      	b.n	800cab4 <follow_path+0xd4>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800cab2:	bf00      	nop
			}
		}
	}

	return res;
 800cab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3718      	adds	r7, #24
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800cabe:	b480      	push	{r7}
 800cac0:	b089      	sub	sp, #36	; 0x24
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 800cac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caca:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	613b      	str	r3, [r7, #16]
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d101      	bne.n	800cae0 <get_ldnumber+0x22>
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	e02d      	b.n	800cb3c <get_ldnumber+0x7e>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	1c5a      	adds	r2, r3, #1
 800cae4:	61fa      	str	r2, [r7, #28]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 800caea:	7bfb      	ldrb	r3, [r7, #15]
 800caec:	2b20      	cmp	r3, #32
 800caee:	d902      	bls.n	800caf6 <get_ldnumber+0x38>
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
 800caf2:	2b3a      	cmp	r3, #58	; 0x3a
 800caf4:	d1f4      	bne.n	800cae0 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
 800caf8:	2b3a      	cmp	r3, #58	; 0x3a
 800cafa:	d11c      	bne.n	800cb36 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800cafc:	2301      	movs	r3, #1
 800cafe:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b2f      	cmp	r3, #47	; 0x2f
 800cb06:	d90c      	bls.n	800cb22 <get_ldnumber+0x64>
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b39      	cmp	r3, #57	; 0x39
 800cb0e:	d808      	bhi.n	800cb22 <get_ldnumber+0x64>
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	3302      	adds	r3, #2
 800cb14:	69fa      	ldr	r2, [r7, #28]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d103      	bne.n	800cb22 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	3b30      	subs	r3, #48	; 0x30
 800cb20:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	dc04      	bgt.n	800cb32 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	69fa      	ldr	r2, [r7, #28]
 800cb30:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	e002      	b.n	800cb3c <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800cb36:	2300      	movs	r3, #0
 800cb38:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800cb3a:	697b      	ldr	r3, [r7, #20]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3724      	adds	r7, #36	; 0x24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	711a      	strb	r2, [r3, #4]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb5e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800cb60:	6839      	ldr	r1, [r7, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7ff f888 	bl	800bc78 <move_window>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <check_fs+0x2a>
 800cb6e:	2304      	movs	r3, #4
 800cb70:	e088      	b.n	800cc84 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	3330      	adds	r3, #48	; 0x30
 800cb76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe ff74 	bl	800ba68 <ld_word>
 800cb80:	4603      	mov	r3, r0
 800cb82:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb8a:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800cb8c:	7b7b      	ldrb	r3, [r7, #13]
 800cb8e:	2beb      	cmp	r3, #235	; 0xeb
 800cb90:	d005      	beq.n	800cb9e <check_fs+0x56>
 800cb92:	7b7b      	ldrb	r3, [r7, #13]
 800cb94:	2be9      	cmp	r3, #233	; 0xe9
 800cb96:	d002      	beq.n	800cb9e <check_fs+0x56>
 800cb98:	7b7b      	ldrb	r3, [r7, #13]
 800cb9a:	2be8      	cmp	r3, #232	; 0xe8
 800cb9c:	d16a      	bne.n	800cc74 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800cb9e:	89fb      	ldrh	r3, [r7, #14]
 800cba0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d10c      	bne.n	800cbc2 <check_fs+0x7a>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3330      	adds	r3, #48	; 0x30
 800cbac:	3352      	adds	r3, #82	; 0x52
 800cbae:	2208      	movs	r2, #8
 800cbb0:	4936      	ldr	r1, [pc, #216]	; (800cc8c <check_fs+0x144>)
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f012 fb9c 	bl	801f2f0 <memcmp>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d101      	bne.n	800cbc2 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	e060      	b.n	800cc84 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	3330      	adds	r3, #48	; 0x30
 800cbc6:	330b      	adds	r3, #11
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fe ff4d 	bl	800ba68 <ld_word>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbd8:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800cbda:	897a      	ldrh	r2, [r7, #10]
 800cbdc:	897b      	ldrh	r3, [r7, #10]
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d146      	bne.n	800cc74 <check_fs+0x12c>
 800cbe6:	897b      	ldrh	r3, [r7, #10]
 800cbe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbec:	d342      	bcc.n	800cc74 <check_fs+0x12c>
 800cbee:	897b      	ldrh	r3, [r7, #10]
 800cbf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbf4:	d83e      	bhi.n	800cc74 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800cbf6:	7b7b      	ldrb	r3, [r7, #13]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d03b      	beq.n	800cc74 <check_fs+0x12c>
 800cbfc:	7b7a      	ldrb	r2, [r7, #13]
 800cbfe:	7b7b      	ldrb	r3, [r7, #13]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	4013      	ands	r3, r2
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d135      	bne.n	800cc74 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	3330      	adds	r3, #48	; 0x30
 800cc0c:	330e      	adds	r3, #14
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fe ff2a 	bl	800ba68 <ld_word>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d02c      	beq.n	800cc74 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc20:	3b01      	subs	r3, #1
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d826      	bhi.n	800cc74 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	3330      	adds	r3, #48	; 0x30
 800cc2a:	3311      	adds	r3, #17
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fe ff1b 	bl	800ba68 <ld_word>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d01d      	beq.n	800cc74 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	3330      	adds	r3, #48	; 0x30
 800cc3c:	3313      	adds	r3, #19
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fe ff12 	bl	800ba68 <ld_word>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b7f      	cmp	r3, #127	; 0x7f
 800cc48:	d809      	bhi.n	800cc5e <check_fs+0x116>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	3330      	adds	r3, #48	; 0x30
 800cc4e:	3320      	adds	r3, #32
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7fe ff21 	bl	800ba98 <ld_dword>
 800cc56:	4603      	mov	r3, r0
 800cc58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc5c:	d30a      	bcc.n	800cc74 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	3330      	adds	r3, #48	; 0x30
 800cc62:	3316      	adds	r3, #22
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe feff 	bl	800ba68 <ld_word>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d001      	beq.n	800cc74 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 800cc70:	2300      	movs	r3, #0
 800cc72:	e007      	b.n	800cc84 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800cc74:	89fb      	ldrh	r3, [r7, #14]
 800cc76:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d101      	bne.n	800cc82 <check_fs+0x13a>
 800cc7e:	2302      	movs	r3, #2
 800cc80:	e000      	b.n	800cc84 <check_fs+0x13c>
 800cc82:	2303      	movs	r3, #3
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	080209e8 	.word	0x080209e8

0800cc90 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b088      	sub	sp, #32
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7ff ff53 	bl	800cb48 <check_fs>
 800cca2:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d007      	beq.n	800ccba <find_volume+0x2a>
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	d802      	bhi.n	800ccb6 <find_volume+0x26>
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d101      	bne.n	800ccba <find_volume+0x2a>
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	e045      	b.n	800cd46 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800ccba:	2300      	movs	r3, #0
 800ccbc:	61fb      	str	r3, [r7, #28]
 800ccbe:	e014      	b.n	800ccea <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	011b      	lsls	r3, r3, #4
 800ccca:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800ccce:	4413      	add	r3, r2
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7fe fee1 	bl	800ba98 <ld_dword>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	3320      	adds	r3, #32
 800ccde:	443b      	add	r3, r7
 800cce0:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	3301      	adds	r3, #1
 800cce8:	61fb      	str	r3, [r7, #28]
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	d9e7      	bls.n	800ccc0 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d002      	beq.n	800ccfc <find_volume+0x6c>
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	e000      	b.n	800ccfe <find_volume+0x6e>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	3320      	adds	r3, #32
 800cd06:	443b      	add	r3, r7
 800cd08:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00b      	beq.n	800cd28 <find_volume+0x98>
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	3320      	adds	r3, #32
 800cd16:	443b      	add	r3, r7
 800cd18:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff ff12 	bl	800cb48 <check_fs>
 800cd24:	4603      	mov	r3, r0
 800cd26:	e000      	b.n	800cd2a <find_volume+0x9a>
 800cd28:	2303      	movs	r3, #3
 800cd2a:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d108      	bne.n	800cd44 <find_volume+0xb4>
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d905      	bls.n	800cd44 <find_volume+0xb4>
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	61fb      	str	r3, [r7, #28]
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	2b03      	cmp	r3, #3
 800cd42:	d9dd      	bls.n	800cd00 <find_volume+0x70>
	return fmt;
 800cd44:	69bb      	ldr	r3, [r7, #24]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3720      	adds	r7, #32
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
	...

0800cd50 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b090      	sub	sp, #64	; 0x40
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	2200      	movs	r2, #0
 800cd62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	f7ff feaa 	bl	800cabe <get_ldnumber>
 800cd6a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	da01      	bge.n	800cd76 <mount_volume+0x26>
 800cd72:	230b      	movs	r3, #11
 800cd74:	e1dc      	b.n	800d130 <mount_volume+0x3e0>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800cd76:	4a9d      	ldr	r2, [pc, #628]	; (800cfec <mount_volume+0x29c>)
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd7e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d101      	bne.n	800cd8a <mount_volume+0x3a>
 800cd86:	230c      	movs	r3, #12
 800cd88:	e1d2      	b.n	800d130 <mount_volume+0x3e0>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cd90:	79fb      	ldrb	r3, [r7, #7]
 800cd92:	f023 0301 	bic.w	r3, r3, #1
 800cd96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d01a      	beq.n	800cdd6 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	785b      	ldrb	r3, [r3, #1]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7fe fdc1 	bl	800b92c <disk_status>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cdb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdb4:	f003 0301 	and.w	r3, r3, #1
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10c      	bne.n	800cdd6 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cdbc:	79fb      	ldrb	r3, [r7, #7]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d007      	beq.n	800cdd2 <mount_volume+0x82>
 800cdc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdc6:	f003 0304 	and.w	r3, r3, #4
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d001      	beq.n	800cdd2 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cdce:	230a      	movs	r3, #10
 800cdd0:	e1ae      	b.n	800d130 <mount_volume+0x3e0>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e1ac      	b.n	800d130 <mount_volume+0x3e0>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800cdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd8:	2200      	movs	r2, #0
 800cdda:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800cddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdde:	785b      	ldrb	r3, [r3, #1]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fe fdbd 	bl	800b960 <disk_initialize>
 800cde6:	4603      	mov	r3, r0
 800cde8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cdec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdf0:	f003 0301 	and.w	r3, r3, #1
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d001      	beq.n	800cdfc <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	e199      	b.n	800d130 <mount_volume+0x3e0>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cdfc:	79fb      	ldrb	r3, [r7, #7]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d007      	beq.n	800ce12 <mount_volume+0xc2>
 800ce02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce06:	f003 0304 	and.w	r3, r3, #4
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d001      	beq.n	800ce12 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800ce0e:	230a      	movs	r3, #10
 800ce10:	e18e      	b.n	800d130 <mount_volume+0x3e0>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800ce12:	2100      	movs	r1, #0
 800ce14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce16:	f7ff ff3b 	bl	800cc90 <find_volume>
 800ce1a:	6338      	str	r0, [r7, #48]	; 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800ce1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1e:	2b04      	cmp	r3, #4
 800ce20:	d101      	bne.n	800ce26 <mount_volume+0xd6>
 800ce22:	2301      	movs	r3, #1
 800ce24:	e184      	b.n	800d130 <mount_volume+0x3e0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d901      	bls.n	800ce30 <mount_volume+0xe0>
 800ce2c:	230d      	movs	r3, #13
 800ce2e:	e17f      	b.n	800d130 <mount_volume+0x3e0>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800ce30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce34:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ce36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce38:	3330      	adds	r3, #48	; 0x30
 800ce3a:	330b      	adds	r3, #11
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fe fe13 	bl	800ba68 <ld_word>
 800ce42:	4603      	mov	r3, r0
 800ce44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce48:	d001      	beq.n	800ce4e <mount_volume+0xfe>
 800ce4a:	230d      	movs	r3, #13
 800ce4c:	e170      	b.n	800d130 <mount_volume+0x3e0>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ce4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce50:	3330      	adds	r3, #48	; 0x30
 800ce52:	3316      	adds	r3, #22
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fe fe07 	bl	800ba68 <ld_word>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	63bb      	str	r3, [r7, #56]	; 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d106      	bne.n	800ce72 <mount_volume+0x122>
 800ce64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce66:	3330      	adds	r3, #48	; 0x30
 800ce68:	3324      	adds	r3, #36	; 0x24
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fe fe14 	bl	800ba98 <ld_dword>
 800ce70:	63b8      	str	r0, [r7, #56]	; 0x38
		fs->fsize = fasize;
 800ce72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce76:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ce78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ce7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce80:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ce82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce84:	78db      	ldrb	r3, [r3, #3]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d005      	beq.n	800ce96 <mount_volume+0x146>
 800ce8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8c:	78db      	ldrb	r3, [r3, #3]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d001      	beq.n	800ce96 <mount_volume+0x146>
 800ce92:	230d      	movs	r3, #13
 800ce94:	e14c      	b.n	800d130 <mount_volume+0x3e0>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ce96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce98:	78db      	ldrb	r3, [r3, #3]
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	fb02 f303 	mul.w	r3, r2, r3
 800cea2:	63bb      	str	r3, [r7, #56]	; 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ceb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb2:	895b      	ldrh	r3, [r3, #10]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d008      	beq.n	800ceca <mount_volume+0x17a>
 800ceb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceba:	895b      	ldrh	r3, [r3, #10]
 800cebc:	461a      	mov	r2, r3
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	895b      	ldrh	r3, [r3, #10]
 800cec2:	3b01      	subs	r3, #1
 800cec4:	4013      	ands	r3, r2
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <mount_volume+0x17e>
 800ceca:	230d      	movs	r3, #13
 800cecc:	e130      	b.n	800d130 <mount_volume+0x3e0>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced0:	3330      	adds	r3, #48	; 0x30
 800ced2:	3311      	adds	r3, #17
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fe fdc7 	bl	800ba68 <ld_word>
 800ceda:	4603      	mov	r3, r0
 800cedc:	461a      	mov	r2, r3
 800cede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee0:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee4:	891b      	ldrh	r3, [r3, #8]
 800cee6:	f003 030f 	and.w	r3, r3, #15
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d001      	beq.n	800cef4 <mount_volume+0x1a4>
 800cef0:	230d      	movs	r3, #13
 800cef2:	e11d      	b.n	800d130 <mount_volume+0x3e0>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef6:	3330      	adds	r3, #48	; 0x30
 800cef8:	3313      	adds	r3, #19
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fe fdb4 	bl	800ba68 <ld_word>
 800cf00:	4603      	mov	r3, r0
 800cf02:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cf04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d106      	bne.n	800cf18 <mount_volume+0x1c8>
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	3330      	adds	r3, #48	; 0x30
 800cf0e:	3320      	adds	r3, #32
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe fdc1 	bl	800ba98 <ld_dword>
 800cf16:	63f8      	str	r0, [r7, #60]	; 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1a:	3330      	adds	r3, #48	; 0x30
 800cf1c:	330e      	adds	r3, #14
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe fda2 	bl	800ba68 <ld_word>
 800cf24:	4603      	mov	r3, r0
 800cf26:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cf28:	8bfb      	ldrh	r3, [r7, #30]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d101      	bne.n	800cf32 <mount_volume+0x1e2>
 800cf2e:	230d      	movs	r3, #13
 800cf30:	e0fe      	b.n	800d130 <mount_volume+0x3e0>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cf32:	8bfa      	ldrh	r2, [r7, #30]
 800cf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf36:	4413      	add	r3, r2
 800cf38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf3a:	8912      	ldrh	r2, [r2, #8]
 800cf3c:	0912      	lsrs	r2, r2, #4
 800cf3e:	b292      	uxth	r2, r2
 800cf40:	4413      	add	r3, r2
 800cf42:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cf44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d201      	bcs.n	800cf50 <mount_volume+0x200>
 800cf4c:	230d      	movs	r3, #13
 800cf4e:	e0ef      	b.n	800d130 <mount_volume+0x3e0>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cf50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf58:	8952      	ldrh	r2, [r2, #10]
 800cf5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf5e:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <mount_volume+0x21a>
 800cf66:	230d      	movs	r3, #13
 800cf68:	e0e2      	b.n	800d130 <mount_volume+0x3e0>
		fmt = 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	4a1f      	ldr	r2, [pc, #124]	; (800cff0 <mount_volume+0x2a0>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d801      	bhi.n	800cf7a <mount_volume+0x22a>
 800cf76:	2303      	movs	r3, #3
 800cf78:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d801      	bhi.n	800cf88 <mount_volume+0x238>
 800cf84:	2302      	movs	r3, #2
 800cf86:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d801      	bhi.n	800cf96 <mount_volume+0x246>
 800cf92:	2301      	movs	r3, #1
 800cf94:	633b      	str	r3, [r7, #48]	; 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d101      	bne.n	800cfa0 <mount_volume+0x250>
 800cf9c:	230d      	movs	r3, #13
 800cf9e:	e0c7      	b.n	800d130 <mount_volume+0x3e0>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	1c9a      	adds	r2, r3, #2
 800cfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	6a3a      	ldr	r2, [r7, #32]
 800cfac:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cfae:	8bfa      	ldrh	r2, [r7, #30]
 800cfb0:	6a3b      	ldr	r3, [r7, #32]
 800cfb2:	441a      	add	r2, r3
 800cfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cfb8:	6a3a      	ldr	r2, [r7, #32]
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	441a      	add	r2, r3
 800cfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800cfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc4:	2b03      	cmp	r3, #3
 800cfc6:	d123      	bne.n	800d010 <mount_volume+0x2c0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfca:	3330      	adds	r3, #48	; 0x30
 800cfcc:	332a      	adds	r3, #42	; 0x2a
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fe fd4a 	bl	800ba68 <ld_word>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d001      	beq.n	800cfde <mount_volume+0x28e>
 800cfda:	230d      	movs	r3, #13
 800cfdc:	e0a8      	b.n	800d130 <mount_volume+0x3e0>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe0:	891b      	ldrh	r3, [r3, #8]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d006      	beq.n	800cff4 <mount_volume+0x2a4>
 800cfe6:	230d      	movs	r3, #13
 800cfe8:	e0a2      	b.n	800d130 <mount_volume+0x3e0>
 800cfea:	bf00      	nop
 800cfec:	240013b4 	.word	0x240013b4
 800cff0:	0ffffff5 	.word	0x0ffffff5
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff6:	3330      	adds	r3, #48	; 0x30
 800cff8:	332c      	adds	r3, #44	; 0x2c
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fe fd4c 	bl	800ba98 <ld_dword>
 800d000:	4602      	mov	r2, r0
 800d002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d004:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d008:	695b      	ldr	r3, [r3, #20]
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	637b      	str	r3, [r7, #52]	; 0x34
 800d00e:	e01e      	b.n	800d04e <mount_volume+0x2fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d012:	891b      	ldrh	r3, [r3, #8]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d101      	bne.n	800d01c <mount_volume+0x2cc>
 800d018:	230d      	movs	r3, #13
 800d01a:	e089      	b.n	800d130 <mount_volume+0x3e0>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	6a1a      	ldr	r2, [r3, #32]
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	441a      	add	r2, r3
 800d024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d026:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	d103      	bne.n	800d036 <mount_volume+0x2e6>
 800d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	005b      	lsls	r3, r3, #1
 800d034:	e00a      	b.n	800d04c <mount_volume+0x2fc>
 800d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d038:	695a      	ldr	r2, [r3, #20]
 800d03a:	4613      	mov	r3, r2
 800d03c:	005b      	lsls	r3, r3, #1
 800d03e:	4413      	add	r3, r2
 800d040:	085a      	lsrs	r2, r3, #1
 800d042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	f003 0301 	and.w	r3, r3, #1
 800d04a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d04c:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	699a      	ldr	r2, [r3, #24]
 800d052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d054:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d058:	0a5b      	lsrs	r3, r3, #9
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d201      	bcs.n	800d062 <mount_volume+0x312>
 800d05e:	230d      	movs	r3, #13
 800d060:	e066      	b.n	800d130 <mount_volume+0x3e0>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d068:	611a      	str	r2, [r3, #16]
 800d06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06c:	691a      	ldr	r2, [r3, #16]
 800d06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d070:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	2280      	movs	r2, #128	; 0x80
 800d076:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800d078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	d149      	bne.n	800d112 <mount_volume+0x3c2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	3330      	adds	r3, #48	; 0x30
 800d082:	3330      	adds	r3, #48	; 0x30
 800d084:	4618      	mov	r0, r3
 800d086:	f7fe fcef 	bl	800ba68 <ld_word>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d140      	bne.n	800d112 <mount_volume+0x3c2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	3301      	adds	r3, #1
 800d094:	4619      	mov	r1, r3
 800d096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d098:	f7fe fdee 	bl	800bc78 <move_window>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d137      	bne.n	800d112 <mount_volume+0x3c2>
		{
			fs->fsi_flag = 0;
 800d0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800d0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0aa:	3330      	adds	r3, #48	; 0x30
 800d0ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fe fcd9 	bl	800ba68 <ld_word>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d127      	bne.n	800d112 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c4:	3330      	adds	r3, #48	; 0x30
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fe fce6 	bl	800ba98 <ld_dword>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	4a1a      	ldr	r2, [pc, #104]	; (800d138 <mount_volume+0x3e8>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d11e      	bne.n	800d112 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d6:	3330      	adds	r3, #48	; 0x30
 800d0d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fe fcdb 	bl	800ba98 <ld_dword>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	4a15      	ldr	r2, [pc, #84]	; (800d13c <mount_volume+0x3ec>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d113      	bne.n	800d112 <mount_volume+0x3c2>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ec:	3330      	adds	r3, #48	; 0x30
 800d0ee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7fe fcd0 	bl	800ba98 <ld_dword>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fc:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d100:	3330      	adds	r3, #48	; 0x30
 800d102:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fcc6 	bl	800ba98 <ld_dword>
 800d10c:	4602      	mov	r2, r0
 800d10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d110:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	b2da      	uxtb	r2, r3
 800d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d118:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800d11a:	4b09      	ldr	r3, [pc, #36]	; (800d140 <mount_volume+0x3f0>)
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	3301      	adds	r3, #1
 800d120:	b29a      	uxth	r2, r3
 800d122:	4b07      	ldr	r3, [pc, #28]	; (800d140 <mount_volume+0x3f0>)
 800d124:	801a      	strh	r2, [r3, #0]
 800d126:	4b06      	ldr	r3, [pc, #24]	; (800d140 <mount_volume+0x3f0>)
 800d128:	881a      	ldrh	r2, [r3, #0]
 800d12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12c:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3740      	adds	r7, #64	; 0x40
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	41615252 	.word	0x41615252
 800d13c:	61417272 	.word	0x61417272
 800d140:	240013b8 	.word	0x240013b8

0800d144 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d14e:	2309      	movs	r3, #9
 800d150:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d01c      	beq.n	800d192 <validate+0x4e>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d018      	beq.n	800d192 <validate+0x4e>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d013      	beq.n	800d192 <validate+0x4e>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	889a      	ldrh	r2, [r3, #4]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	88db      	ldrh	r3, [r3, #6]
 800d174:	429a      	cmp	r2, r3
 800d176:	d10c      	bne.n	800d192 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	785b      	ldrb	r3, [r3, #1]
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fe fbd4 	bl	800b92c <disk_status>
 800d184:	4603      	mov	r3, r0
 800d186:	f003 0301 	and.w	r3, r3, #1
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <validate+0x4e>
			res = FR_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800d192:	7bfb      	ldrb	r3, [r7, #15]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d102      	bne.n	800d19e <validate+0x5a>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	e000      	b.n	800d1a0 <validate+0x5c>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	683a      	ldr	r2, [r7, #0]
 800d1a2:	6013      	str	r3, [r2, #0]
	return res;
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b088      	sub	sp, #32
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800d1c2:	f107 0310 	add.w	r3, r7, #16
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff fc79 	bl	800cabe <get_ldnumber>
 800d1cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	da01      	bge.n	800d1d8 <f_mount+0x28>
 800d1d4:	230b      	movs	r3, #11
 800d1d6:	e02e      	b.n	800d236 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800d1d8:	4a19      	ldr	r2, [pc, #100]	; (800d240 <f_mount+0x90>)
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d007      	beq.n	800d1f8 <f_mount+0x48>
		FatFs[vol] = 0;
 800d1e8:	4a15      	ldr	r2, [pc, #84]	; (800d240 <f_mount+0x90>)
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00b      	beq.n	800d216 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	69fa      	ldr	r2, [r7, #28]
 800d202:	b2d2      	uxtb	r2, r2
 800d204:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	490c      	ldr	r1, [pc, #48]	; (800d240 <f_mount+0x90>)
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800d216:	79fb      	ldrb	r3, [r7, #7]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d101      	bne.n	800d220 <f_mount+0x70>
 800d21c:	2300      	movs	r3, #0
 800d21e:	e00a      	b.n	800d236 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d220:	f107 010c 	add.w	r1, r7, #12
 800d224:	f107 0308 	add.w	r3, r7, #8
 800d228:	2200      	movs	r2, #0
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7ff fd90 	bl	800cd50 <mount_volume>
 800d230:	4603      	mov	r3, r0
 800d232:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d234:	7dfb      	ldrb	r3, [r7, #23]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3720      	adds	r7, #32
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	240013b4 	.word	0x240013b4

0800d244 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b098      	sub	sp, #96	; 0x60
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	4613      	mov	r3, r2
 800d250:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <f_open+0x18>
 800d258:	2309      	movs	r3, #9
 800d25a:	e177      	b.n	800d54c <f_open+0x308>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800d25c:	79fb      	ldrb	r3, [r7, #7]
 800d25e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d262:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 800d264:	79fa      	ldrb	r2, [r7, #7]
 800d266:	f107 0114 	add.w	r1, r7, #20
 800d26a:	f107 0308 	add.w	r3, r7, #8
 800d26e:	4618      	mov	r0, r3
 800d270:	f7ff fd6e 	bl	800cd50 <mount_volume>
 800d274:	4603      	mov	r3, r0
 800d276:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d27a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f040 815b 	bne.w	800d53a <f_open+0x2f6>
		dj.obj.fs = fs;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d288:	68ba      	ldr	r2, [r7, #8]
 800d28a:	f107 0318 	add.w	r3, r7, #24
 800d28e:	4611      	mov	r1, r2
 800d290:	4618      	mov	r0, r3
 800d292:	f7ff fba5 	bl	800c9e0 <follow_path>
 800d296:	4603      	mov	r3, r0
 800d298:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800d29c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d107      	bne.n	800d2b4 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d2a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d2a8:	b25b      	sxtb	r3, r3
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	da02      	bge.n	800d2b4 <f_open+0x70>
				res = FR_INVALID_NAME;
 800d2ae:	2306      	movs	r3, #6
 800d2b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d2b4:	79fb      	ldrb	r3, [r7, #7]
 800d2b6:	f003 031c 	and.w	r3, r3, #28
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d078      	beq.n	800d3b0 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 800d2be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d010      	beq.n	800d2e8 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d2c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2ca:	2b04      	cmp	r3, #4
 800d2cc:	d107      	bne.n	800d2de <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800d2ce:	f107 0318 	add.w	r3, r7, #24
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff fa89 	bl	800c7ea <dir_register>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d2de:	79fb      	ldrb	r3, [r7, #7]
 800d2e0:	f043 0308 	orr.w	r3, r3, #8
 800d2e4:	71fb      	strb	r3, [r7, #7]
 800d2e6:	e010      	b.n	800d30a <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d2e8:	7fbb      	ldrb	r3, [r7, #30]
 800d2ea:	f003 0311 	and.w	r3, r3, #17
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d003      	beq.n	800d2fa <f_open+0xb6>
					res = FR_DENIED;
 800d2f2:	2307      	movs	r3, #7
 800d2f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d2f8:	e007      	b.n	800d30a <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d2fa:	79fb      	ldrb	r3, [r7, #7]
 800d2fc:	f003 0304 	and.w	r3, r3, #4
 800d300:	2b00      	cmp	r3, #0
 800d302:	d002      	beq.n	800d30a <f_open+0xc6>
 800d304:	2308      	movs	r3, #8
 800d306:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800d30a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d168      	bne.n	800d3e4 <f_open+0x1a0>
 800d312:	79fb      	ldrb	r3, [r7, #7]
 800d314:	f003 0308 	and.w	r3, r3, #8
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d063      	beq.n	800d3e4 <f_open+0x1a0>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800d31c:	f7fd fa01 	bl	800a722 <get_fattime>
 800d320:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 800d322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d324:	330e      	adds	r3, #14
 800d326:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d328:	4618      	mov	r0, r3
 800d32a:	f7fe fbf3 	bl	800bb14 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800d32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d330:	3316      	adds	r3, #22
 800d332:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d334:	4618      	mov	r0, r3
 800d336:	f7fe fbed 	bl	800bb14 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d33e:	4611      	mov	r1, r2
 800d340:	4618      	mov	r0, r3
 800d342:	f7ff f9be 	bl	800c6c2 <ld_clust>
 800d346:	64f8      	str	r0, [r7, #76]	; 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d34a:	330b      	adds	r3, #11
 800d34c:	2220      	movs	r2, #32
 800d34e:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d354:	2200      	movs	r2, #0
 800d356:	4618      	mov	r0, r3
 800d358:	f7ff f9d2 	bl	800c700 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35e:	331c      	adds	r3, #28
 800d360:	2100      	movs	r1, #0
 800d362:	4618      	mov	r0, r3
 800d364:	f7fe fbd6 	bl	800bb14 <st_dword>
					fs->wflag = 1;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	2201      	movs	r2, #1
 800d36c:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800d36e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d370:	2b00      	cmp	r3, #0
 800d372:	d037      	beq.n	800d3e4 <f_open+0x1a0>
						sc = fs->winsect;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d378:	64bb      	str	r3, [r7, #72]	; 0x48
						res = remove_chain(&dj.obj, cl, 0);
 800d37a:	f107 0318 	add.w	r3, r7, #24
 800d37e:	2200      	movs	r2, #0
 800d380:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d382:	4618      	mov	r0, r3
 800d384:	f7fe fec7 	bl	800c116 <remove_chain>
 800d388:	4603      	mov	r3, r0
 800d38a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d38e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d392:	2b00      	cmp	r3, #0
 800d394:	d126      	bne.n	800d3e4 <f_open+0x1a0>
							res = move_window(fs, sc);
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7fe fc6c 	bl	800bc78 <move_window>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3aa:	3a01      	subs	r2, #1
 800d3ac:	60da      	str	r2, [r3, #12]
 800d3ae:	e019      	b.n	800d3e4 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800d3b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d115      	bne.n	800d3e4 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800d3b8:	7fbb      	ldrb	r3, [r7, #30]
 800d3ba:	f003 0310 	and.w	r3, r3, #16
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d003      	beq.n	800d3ca <f_open+0x186>
					res = FR_NO_FILE;
 800d3c2:	2304      	movs	r3, #4
 800d3c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d3c8:	e00c      	b.n	800d3e4 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800d3ca:	79fb      	ldrb	r3, [r7, #7]
 800d3cc:	f003 0302 	and.w	r3, r3, #2
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d007      	beq.n	800d3e4 <f_open+0x1a0>
 800d3d4:	7fbb      	ldrb	r3, [r7, #30]
 800d3d6:	f003 0301 	and.w	r3, r3, #1
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d002      	beq.n	800d3e4 <f_open+0x1a0>
						res = FR_DENIED;
 800d3de:	2307      	movs	r3, #7
 800d3e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d3e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10f      	bne.n	800d40c <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800d3ec:	79fb      	ldrb	r3, [r7, #7]
 800d3ee:	f003 0308 	and.w	r3, r3, #8
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d003      	beq.n	800d3fe <f_open+0x1ba>
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 800d406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d40c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d410:	2b00      	cmp	r3, #0
 800d412:	f040 8092 	bne.w	800d53a <f_open+0x2f6>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d41a:	4611      	mov	r1, r2
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7ff f950 	bl	800c6c2 <ld_clust>
 800d422:	4602      	mov	r2, r0
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42a:	331c      	adds	r3, #28
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fe fb33 	bl	800ba98 <ld_dword>
 800d432:	4602      	mov	r2, r0
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 800d438:	697a      	ldr	r2, [r7, #20]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	88da      	ldrh	r2, [r3, #6]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	79fa      	ldrb	r2, [r7, #7]
 800d44a:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2200      	movs	r2, #0
 800d450:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2200      	movs	r2, #0
 800d45c:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	3328      	adds	r3, #40	; 0x28
 800d462:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d466:	2100      	movs	r1, #0
 800d468:	4618      	mov	r0, r3
 800d46a:	f011 ff79 	bl	801f360 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d46e:	79fb      	ldrb	r3, [r7, #7]
 800d470:	f003 0320 	and.w	r3, r3, #32
 800d474:	2b00      	cmp	r3, #0
 800d476:	d060      	beq.n	800d53a <f_open+0x2f6>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d05c      	beq.n	800d53a <f_open+0x2f6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	68da      	ldr	r2, [r3, #12]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	895b      	ldrh	r3, [r3, #10]
 800d48c:	025b      	lsls	r3, r3, #9
 800d48e:	647b      	str	r3, [r7, #68]	; 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	657b      	str	r3, [r7, #84]	; 0x54
 800d49c:	e016      	b.n	800d4cc <f_open+0x288>
					clst = get_fat(&fp->obj, clst);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fe fca3 	bl	800bdee <get_fat>
 800d4a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d4aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d802      	bhi.n	800d4b6 <f_open+0x272>
 800d4b0:	2302      	movs	r3, #2
 800d4b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d4b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4bc:	d102      	bne.n	800d4c4 <f_open+0x280>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d4c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	657b      	str	r3, [r7, #84]	; 0x54
 800d4cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d103      	bne.n	800d4dc <f_open+0x298>
 800d4d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d8e0      	bhi.n	800d49e <f_open+0x25a>
				}
				fp->clust = clst;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d4e0:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d4e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d127      	bne.n	800d53a <f_open+0x2f6>
 800d4ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d022      	beq.n	800d53a <f_open+0x2f6>
					sc = clst2sect(fs, clst);
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7fe fc59 	bl	800bdb0 <clst2sect>
 800d4fe:	64b8      	str	r0, [r7, #72]	; 0x48
					if (sc == 0) {
 800d500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d502:	2b00      	cmp	r3, #0
 800d504:	d103      	bne.n	800d50e <f_open+0x2ca>
						res = FR_INT_ERR;
 800d506:	2302      	movs	r3, #2
 800d508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d50c:	e015      	b.n	800d53a <f_open+0x2f6>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d50e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d510:	0a5a      	lsrs	r2, r3, #9
 800d512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d514:	441a      	add	r2, r3
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	7858      	ldrb	r0, [r3, #1]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	69da      	ldr	r2, [r3, #28]
 800d528:	2301      	movs	r3, #1
 800d52a:	f7fe fa3f 	bl	800b9ac <disk_read>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d002      	beq.n	800d53a <f_open+0x2f6>
 800d534:	2301      	movs	r3, #1
 800d536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d53a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d002      	beq.n	800d548 <f_open+0x304>
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2200      	movs	r2, #0
 800d546:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3760      	adds	r7, #96	; 0x60
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08e      	sub	sp, #56	; 0x38
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
 800d560:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	2200      	movs	r2, #0
 800d56a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f107 0214 	add.w	r2, r7, #20
 800d572:	4611      	mov	r1, r2
 800d574:	4618      	mov	r0, r3
 800d576:	f7ff fde5 	bl	800d144 <validate>
 800d57a:	4603      	mov	r3, r0
 800d57c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d584:	2b00      	cmp	r3, #0
 800d586:	d107      	bne.n	800d598 <f_read+0x44>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	7c5b      	ldrb	r3, [r3, #17]
 800d58c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d590:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d594:	2b00      	cmp	r3, #0
 800d596:	d002      	beq.n	800d59e <f_read+0x4a>
 800d598:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d59c:	e109      	b.n	800d7b2 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	7c1b      	ldrb	r3, [r3, #16]
 800d5a2:	f003 0301 	and.w	r3, r3, #1
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <f_read+0x5a>
 800d5aa:	2307      	movs	r3, #7
 800d5ac:	e101      	b.n	800d7b2 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	68da      	ldr	r2, [r3, #12]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	695b      	ldr	r3, [r3, #20]
 800d5b6:	1ad3      	subs	r3, r2, r3
 800d5b8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	f240 80f2 	bls.w	800d7a8 <f_read+0x254>
 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800d5c8:	e0ee      	b.n	800d7a8 <f_read+0x254>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	695b      	ldr	r3, [r3, #20]
 800d5ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	f040 80ba 	bne.w	800d74c <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	695b      	ldr	r3, [r3, #20]
 800d5dc:	0a5b      	lsrs	r3, r3, #9
 800d5de:	697a      	ldr	r2, [r7, #20]
 800d5e0:	8952      	ldrh	r2, [r2, #10]
 800d5e2:	3a01      	subs	r2, #1
 800d5e4:	4013      	ands	r3, r2
 800d5e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d123      	bne.n	800d636 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	695b      	ldr	r3, [r3, #20]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d103      	bne.n	800d5fe <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	633b      	str	r3, [r7, #48]	; 0x30
 800d5fc:	e007      	b.n	800d60e <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d5fe:	68fa      	ldr	r2, [r7, #12]
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	699b      	ldr	r3, [r3, #24]
 800d604:	4619      	mov	r1, r3
 800d606:	4610      	mov	r0, r2
 800d608:	f7fe fbf1 	bl	800bdee <get_fat>
 800d60c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d610:	2b01      	cmp	r3, #1
 800d612:	d804      	bhi.n	800d61e <f_read+0xca>
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2202      	movs	r2, #2
 800d618:	745a      	strb	r2, [r3, #17]
 800d61a:	2302      	movs	r3, #2
 800d61c:	e0c9      	b.n	800d7b2 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d624:	d104      	bne.n	800d630 <f_read+0xdc>
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2201      	movs	r2, #1
 800d62a:	745a      	strb	r2, [r3, #17]
 800d62c:	2301      	movs	r3, #1
 800d62e:	e0c0      	b.n	800d7b2 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d634:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800d636:	697a      	ldr	r2, [r7, #20]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	699b      	ldr	r3, [r3, #24]
 800d63c:	4619      	mov	r1, r3
 800d63e:	4610      	mov	r0, r2
 800d640:	f7fe fbb6 	bl	800bdb0 <clst2sect>
 800d644:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d104      	bne.n	800d656 <f_read+0x102>
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2202      	movs	r2, #2
 800d650:	745a      	strb	r2, [r3, #17]
 800d652:	2302      	movs	r3, #2
 800d654:	e0ad      	b.n	800d7b2 <f_read+0x25e>
			sect += csect;
 800d656:	69ba      	ldr	r2, [r7, #24]
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	4413      	add	r3, r2
 800d65c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	0a5b      	lsrs	r3, r3, #9
 800d662:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800d664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d666:	2b00      	cmp	r3, #0
 800d668:	d039      	beq.n	800d6de <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d66a:	69fa      	ldr	r2, [r7, #28]
 800d66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66e:	4413      	add	r3, r2
 800d670:	697a      	ldr	r2, [r7, #20]
 800d672:	8952      	ldrh	r2, [r2, #10]
 800d674:	4293      	cmp	r3, r2
 800d676:	d905      	bls.n	800d684 <f_read+0x130>
					cc = fs->csize - csect;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	895b      	ldrh	r3, [r3, #10]
 800d67c:	461a      	mov	r2, r3
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	7858      	ldrb	r0, [r3, #1]
 800d688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68a:	69ba      	ldr	r2, [r7, #24]
 800d68c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d68e:	f7fe f98d 	bl	800b9ac <disk_read>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d004      	beq.n	800d6a2 <f_read+0x14e>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2201      	movs	r2, #1
 800d69c:	745a      	strb	r2, [r3, #17]
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e087      	b.n	800d7b2 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	7c1b      	ldrb	r3, [r3, #16]
 800d6a6:	b25b      	sxtb	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	da14      	bge.n	800d6d6 <f_read+0x182>
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	69da      	ldr	r2, [r3, #28]
 800d6b0:	69bb      	ldr	r3, [r7, #24]
 800d6b2:	1ad3      	subs	r3, r2, r3
 800d6b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d90d      	bls.n	800d6d6 <f_read+0x182>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	69da      	ldr	r2, [r3, #28]
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	1ad3      	subs	r3, r2, r3
 800d6c2:	025b      	lsls	r3, r3, #9
 800d6c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6c6:	18d0      	adds	r0, r2, r3
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	3328      	adds	r3, #40	; 0x28
 800d6cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	f011 fe1d 	bl	801f310 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d8:	025b      	lsls	r3, r3, #9
 800d6da:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d6dc:	e050      	b.n	800d780 <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	69db      	ldr	r3, [r3, #28]
 800d6e2:	69ba      	ldr	r2, [r7, #24]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d02e      	beq.n	800d746 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	7c1b      	ldrb	r3, [r3, #16]
 800d6ec:	b25b      	sxtb	r3, r3
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	da18      	bge.n	800d724 <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	7858      	ldrb	r0, [r3, #1]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	69da      	ldr	r2, [r3, #28]
 800d700:	2301      	movs	r3, #1
 800d702:	f7fe f973 	bl	800b9ec <disk_write>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d004      	beq.n	800d716 <f_read+0x1c2>
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2201      	movs	r2, #1
 800d710:	745a      	strb	r2, [r3, #17]
 800d712:	2301      	movs	r3, #1
 800d714:	e04d      	b.n	800d7b2 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	7c1b      	ldrb	r3, [r3, #16]
 800d71a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	7858      	ldrb	r0, [r3, #1]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d72e:	2301      	movs	r3, #1
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	f7fe f93b 	bl	800b9ac <disk_read>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d004      	beq.n	800d746 <f_read+0x1f2>
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2201      	movs	r2, #1
 800d740:	745a      	strb	r2, [r3, #17]
 800d742:	2301      	movs	r3, #1
 800d744:	e035      	b.n	800d7b2 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	69ba      	ldr	r2, [r7, #24]
 800d74a:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	695b      	ldr	r3, [r3, #20]
 800d750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d754:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d758:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d901      	bls.n	800d766 <f_read+0x212>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	695b      	ldr	r3, [r3, #20]
 800d770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d774:	4413      	add	r3, r2
 800d776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d778:	4619      	mov	r1, r3
 800d77a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d77c:	f011 fdc8 	bl	801f310 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	607b      	str	r3, [r7, #4]
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78e:	441a      	add	r2, r3
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d798:	4413      	add	r3, r2
 800d79a:	627b      	str	r3, [r7, #36]	; 0x24
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	695a      	ldr	r2, [r3, #20]
 800d7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a2:	441a      	add	r2, r3
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	615a      	str	r2, [r3, #20]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f47f af0d 	bne.w	800d5ca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3738      	adds	r7, #56	; 0x38
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b08c      	sub	sp, #48	; 0x30
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	607a      	str	r2, [r7, #4]
 800d7c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f107 0210 	add.w	r2, r7, #16
 800d7d8:	4611      	mov	r1, r2
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7ff fcb2 	bl	800d144 <validate>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d7e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d107      	bne.n	800d7fe <f_write+0x44>
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	7c5b      	ldrb	r3, [r3, #17]
 800d7f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d7f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <f_write+0x4a>
 800d7fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d802:	e13f      	b.n	800da84 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	7c1b      	ldrb	r3, [r3, #16]
 800d808:	f003 0302 	and.w	r3, r3, #2
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d101      	bne.n	800d814 <f_write+0x5a>
 800d810:	2307      	movs	r3, #7
 800d812:	e137      	b.n	800da84 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	695a      	ldr	r2, [r3, #20]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	441a      	add	r2, r3
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	695b      	ldr	r3, [r3, #20]
 800d820:	429a      	cmp	r2, r3
 800d822:	f080 8121 	bcs.w	800da68 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	695b      	ldr	r3, [r3, #20]
 800d82a:	43db      	mvns	r3, r3
 800d82c:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800d82e:	e11b      	b.n	800da68 <f_write+0x2ae>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	695b      	ldr	r3, [r3, #20]
 800d834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d838:	2b00      	cmp	r3, #0
 800d83a:	f040 80d7 	bne.w	800d9ec <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	695b      	ldr	r3, [r3, #20]
 800d842:	0a5b      	lsrs	r3, r3, #9
 800d844:	693a      	ldr	r2, [r7, #16]
 800d846:	8952      	ldrh	r2, [r2, #10]
 800d848:	3a01      	subs	r2, #1
 800d84a:	4013      	ands	r3, r2
 800d84c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d137      	bne.n	800d8c4 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10c      	bne.n	800d876 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10e      	bne.n	800d886 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2100      	movs	r1, #0
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fe fcb7 	bl	800c1e0 <create_chain>
 800d872:	62b8      	str	r0, [r7, #40]	; 0x28
 800d874:	e007      	b.n	800d886 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d876:	68fa      	ldr	r2, [r7, #12]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	699b      	ldr	r3, [r3, #24]
 800d87c:	4619      	mov	r1, r3
 800d87e:	4610      	mov	r0, r2
 800d880:	f7fe fcae 	bl	800c1e0 <create_chain>
 800d884:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 80f2 	beq.w	800da72 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d890:	2b01      	cmp	r3, #1
 800d892:	d104      	bne.n	800d89e <f_write+0xe4>
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2202      	movs	r2, #2
 800d898:	745a      	strb	r2, [r3, #17]
 800d89a:	2302      	movs	r3, #2
 800d89c:	e0f2      	b.n	800da84 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8a4:	d104      	bne.n	800d8b0 <f_write+0xf6>
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	745a      	strb	r2, [r3, #17]
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e0e9      	b.n	800da84 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8b4:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	689b      	ldr	r3, [r3, #8]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d102      	bne.n	800d8c4 <f_write+0x10a>
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8c2:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	7c1b      	ldrb	r3, [r3, #16]
 800d8c8:	b25b      	sxtb	r3, r3
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	da18      	bge.n	800d900 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	7858      	ldrb	r0, [r3, #1]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	69da      	ldr	r2, [r3, #28]
 800d8dc:	2301      	movs	r3, #1
 800d8de:	f7fe f885 	bl	800b9ec <disk_write>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d004      	beq.n	800d8f2 <f_write+0x138>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	745a      	strb	r2, [r3, #17]
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e0c8      	b.n	800da84 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	7c1b      	ldrb	r3, [r3, #16]
 800d8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	699b      	ldr	r3, [r3, #24]
 800d906:	4619      	mov	r1, r3
 800d908:	4610      	mov	r0, r2
 800d90a:	f7fe fa51 	bl	800bdb0 <clst2sect>
 800d90e:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d104      	bne.n	800d920 <f_write+0x166>
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2202      	movs	r2, #2
 800d91a:	745a      	strb	r2, [r3, #17]
 800d91c:	2302      	movs	r3, #2
 800d91e:	e0b1      	b.n	800da84 <f_write+0x2ca>
			sect += csect;
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	4413      	add	r3, r2
 800d926:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	0a5b      	lsrs	r3, r3, #9
 800d92c:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800d92e:	6a3b      	ldr	r3, [r7, #32]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d03c      	beq.n	800d9ae <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d934:	69ba      	ldr	r2, [r7, #24]
 800d936:	6a3b      	ldr	r3, [r7, #32]
 800d938:	4413      	add	r3, r2
 800d93a:	693a      	ldr	r2, [r7, #16]
 800d93c:	8952      	ldrh	r2, [r2, #10]
 800d93e:	4293      	cmp	r3, r2
 800d940:	d905      	bls.n	800d94e <f_write+0x194>
					cc = fs->csize - csect;
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	895b      	ldrh	r3, [r3, #10]
 800d946:	461a      	mov	r2, r3
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	7858      	ldrb	r0, [r3, #1]
 800d952:	6a3b      	ldr	r3, [r7, #32]
 800d954:	697a      	ldr	r2, [r7, #20]
 800d956:	69f9      	ldr	r1, [r7, #28]
 800d958:	f7fe f848 	bl	800b9ec <disk_write>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d004      	beq.n	800d96c <f_write+0x1b2>
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2201      	movs	r2, #1
 800d966:	745a      	strb	r2, [r3, #17]
 800d968:	2301      	movs	r3, #1
 800d96a:	e08b      	b.n	800da84 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	69da      	ldr	r2, [r3, #28]
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	6a3a      	ldr	r2, [r7, #32]
 800d976:	429a      	cmp	r2, r3
 800d978:	d915      	bls.n	800d9a6 <f_write+0x1ec>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	69da      	ldr	r2, [r3, #28]
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	025b      	lsls	r3, r3, #9
 800d98a:	69fa      	ldr	r2, [r7, #28]
 800d98c:	4413      	add	r3, r2
 800d98e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d992:	4619      	mov	r1, r3
 800d994:	f011 fcbc 	bl	801f310 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	7c1b      	ldrb	r3, [r3, #16]
 800d99c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d9a6:	6a3b      	ldr	r3, [r7, #32]
 800d9a8:	025b      	lsls	r3, r3, #9
 800d9aa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d9ac:	e03f      	b.n	800da2e <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	69db      	ldr	r3, [r3, #28]
 800d9b2:	697a      	ldr	r2, [r7, #20]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d016      	beq.n	800d9e6 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	695a      	ldr	r2, [r3, #20]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d210      	bcs.n	800d9e6 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	7858      	ldrb	r0, [r3, #1]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	697a      	ldr	r2, [r7, #20]
 800d9d2:	f7fd ffeb 	bl	800b9ac <disk_read>
 800d9d6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d004      	beq.n	800d9e6 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	745a      	strb	r2, [r3, #17]
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e04e      	b.n	800da84 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	697a      	ldr	r2, [r7, #20]
 800d9ea:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	695b      	ldr	r3, [r3, #20]
 800d9f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9f4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d9f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d9fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d901      	bls.n	800da06 <f_write+0x24c>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	695b      	ldr	r3, [r3, #20]
 800da10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da14:	4413      	add	r3, r2
 800da16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da18:	69f9      	ldr	r1, [r7, #28]
 800da1a:	4618      	mov	r0, r3
 800da1c:	f011 fc78 	bl	801f310 <memcpy>
		fp->flag |= FA_DIRTY;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	7c1b      	ldrb	r3, [r3, #16]
 800da24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da28:	b2da      	uxtb	r2, r3
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	607b      	str	r3, [r7, #4]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3c:	441a      	add	r2, r3
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	69fa      	ldr	r2, [r7, #28]
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	4413      	add	r3, r2
 800da48:	61fb      	str	r3, [r7, #28]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	695a      	ldr	r2, [r3, #20]
 800da4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da50:	441a      	add	r2, r3
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	615a      	str	r2, [r3, #20]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	68da      	ldr	r2, [r3, #12]
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	695b      	ldr	r3, [r3, #20]
 800da5e:	429a      	cmp	r2, r3
 800da60:	bf38      	it	cc
 800da62:	461a      	movcc	r2, r3
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	60da      	str	r2, [r3, #12]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	f47f aee0 	bne.w	800d830 <f_write+0x76>
 800da70:	e000      	b.n	800da74 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800da72:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	7c1b      	ldrb	r3, [r3, #16]
 800da78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da7c:	b2da      	uxtb	r2, r3
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3730      	adds	r7, #48	; 0x30
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f107 0208 	add.w	r2, r7, #8
 800da9a:	4611      	mov	r1, r2
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7ff fb51 	bl	800d144 <validate>
 800daa2:	4603      	mov	r3, r0
 800daa4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800daa6:	7dfb      	ldrb	r3, [r7, #23]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d168      	bne.n	800db7e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	7c1b      	ldrb	r3, [r3, #16]
 800dab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d062      	beq.n	800db7e <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	7c1b      	ldrb	r3, [r3, #16]
 800dabc:	b25b      	sxtb	r3, r3
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	da15      	bge.n	800daee <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	7858      	ldrb	r0, [r3, #1]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	69da      	ldr	r2, [r3, #28]
 800dad0:	2301      	movs	r3, #1
 800dad2:	f7fd ff8b 	bl	800b9ec <disk_write>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <f_sync+0x54>
 800dadc:	2301      	movs	r3, #1
 800dade:	e04f      	b.n	800db80 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	7c1b      	ldrb	r3, [r3, #16]
 800dae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dae8:	b2da      	uxtb	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800daee:	f7fc fe18 	bl	800a722 <get_fattime>
 800daf2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a1b      	ldr	r3, [r3, #32]
 800dafa:	4619      	mov	r1, r3
 800dafc:	4610      	mov	r0, r2
 800dafe:	f7fe f8bb 	bl	800bc78 <move_window>
 800db02:	4603      	mov	r3, r0
 800db04:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800db06:	7dfb      	ldrb	r3, [r7, #23]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d138      	bne.n	800db7e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db10:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	330b      	adds	r3, #11
 800db16:	781a      	ldrb	r2, [r3, #0]
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	330b      	adds	r3, #11
 800db1c:	f042 0220 	orr.w	r2, r2, #32
 800db20:	b2d2      	uxtb	r2, r2
 800db22:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6818      	ldr	r0, [r3, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	461a      	mov	r2, r3
 800db2e:	68f9      	ldr	r1, [r7, #12]
 800db30:	f7fe fde6 	bl	800c700 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f103 021c 	add.w	r2, r3, #28
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	4619      	mov	r1, r3
 800db40:	4610      	mov	r0, r2
 800db42:	f7fd ffe7 	bl	800bb14 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	3316      	adds	r3, #22
 800db4a:	6939      	ldr	r1, [r7, #16]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fd ffe1 	bl	800bb14 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	3312      	adds	r3, #18
 800db56:	2100      	movs	r1, #0
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fd ffc0 	bl	800bade <st_word>
					fs->wflag = 1;
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	2201      	movs	r2, #1
 800db62:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	4618      	mov	r0, r3
 800db68:	f7fe f8b4 	bl	800bcd4 <sync_fs>
 800db6c:	4603      	mov	r3, r0
 800db6e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	7c1b      	ldrb	r3, [r3, #16]
 800db74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db80:	4618      	mov	r0, r3
 800db82:	3718      	adds	r7, #24
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7ff ff7b 	bl	800da8c <f_sync>
 800db96:	4603      	mov	r3, r0
 800db98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800db9a:	7bfb      	ldrb	r3, [r7, #15]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d10e      	bne.n	800dbbe <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f107 0208 	add.w	r2, r7, #8
 800dba6:	4611      	mov	r1, r2
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7ff facb 	bl	800d144 <validate>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dbb2:	7bfb      	ldrb	r3, [r7, #15]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d102      	bne.n	800dbbe <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b08e      	sub	sp, #56	; 0x38
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60b9      	str	r1, [r7, #8]
 800dbd0:	607b      	str	r3, [r7, #4]
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	73fb      	strb	r3, [r7, #15]
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800dbda:	f107 0210 	add.w	r2, r7, #16
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
 800dbe0:	2101      	movs	r1, #1
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fd ff22 	bl	800ba2c <disk_ioctl>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d001      	beq.n	800dbf2 <create_partition+0x2a>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e108      	b.n	800de04 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800dbf6:	233f      	movs	r3, #63	; 0x3f
 800dbf8:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800dbfa:	2308      	movs	r3, #8
 800dbfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc00:	e004      	b.n	800dc0c <create_partition+0x44>
 800dc02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc06:	005b      	lsls	r3, r3, #1
 800dc08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00a      	beq.n	800dc2a <create_partition+0x62>
 800dc14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc18:	6a3a      	ldr	r2, [r7, #32]
 800dc1a:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc1e:	7ffb      	ldrb	r3, [r7, #31]
 800dc20:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc28:	d8eb      	bhi.n	800dc02 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800dc2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d102      	bne.n	800dc38 <create_partition+0x70>
 800dc32:	23ff      	movs	r3, #255	; 0xff
 800dc34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800dc38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f011 fb8e 	bl	801f360 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dc4a:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	637b      	str	r3, [r7, #52]	; 0x34
 800dc50:	7ffb      	ldrb	r3, [r7, #31]
 800dc52:	633b      	str	r3, [r7, #48]	; 0x30
 800dc54:	e0b5      	b.n	800ddc2 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800dc56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	68ba      	ldr	r2, [r7, #8]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800dc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc64:	2b64      	cmp	r3, #100	; 0x64
 800dc66:	d80d      	bhi.n	800dc84 <create_partition+0xbc>
 800dc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6a:	2b64      	cmp	r3, #100	; 0x64
 800dc6c:	d008      	beq.n	800dc80 <create_partition+0xb8>
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	4a66      	ldr	r2, [pc, #408]	; (800de0c <create_partition+0x244>)
 800dc72:	fba2 2303 	umull	r2, r3, r2, r3
 800dc76:	095b      	lsrs	r3, r3, #5
 800dc78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc7a:	fb02 f303 	mul.w	r3, r2, r3
 800dc7e:	e000      	b.n	800dc82 <create_partition+0xba>
 800dc80:	6a3b      	ldr	r3, [r7, #32]
 800dc82:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800dc84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc88:	4413      	add	r3, r2
 800dc8a:	6a3a      	ldr	r2, [r7, #32]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d305      	bcc.n	800dc9c <create_partition+0xd4>
 800dc90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc94:	4413      	add	r3, r2
 800dc96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d903      	bls.n	800dca4 <create_partition+0xdc>
 800dc9c:	6a3a      	ldr	r2, [r7, #32]
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca0:	1ad3      	subs	r3, r2, r3
 800dca2:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800dca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f000 8097 	beq.w	800ddda <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800dcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcae:	3308      	adds	r3, #8
 800dcb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fd ff2e 	bl	800bb14 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcba:	330c      	adds	r3, #12
 800dcbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fd ff28 	bl	800bb14 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	3304      	adds	r3, #4
 800dcc8:	7bba      	ldrb	r2, [r7, #14]
 800dcca:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800dccc:	7ffb      	ldrb	r3, [r7, #31]
 800dcce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcd0:	fbb2 f2f3 	udiv	r2, r2, r3
 800dcd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcdc:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800dcde:	7ffb      	ldrb	r3, [r7, #31]
 800dce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dce2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dce6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dcea:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcee:	fb01 f202 	mul.w	r2, r1, r2
 800dcf2:	1a9b      	subs	r3, r3, r2
 800dcf4:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800dcf6:	7ffa      	ldrb	r2, [r7, #31]
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfa:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcfe:	fb01 f202 	mul.w	r2, r1, r2
 800dd02:	1a9b      	subs	r3, r3, r2
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	3301      	adds	r3, #1
 800dd08:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800dd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	7dfa      	ldrb	r2, [r7, #23]
 800dd10:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	089b      	lsrs	r3, r3, #2
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dd1c:	b2d9      	uxtb	r1, r3
 800dd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd20:	3302      	adds	r3, #2
 800dd22:	7dba      	ldrb	r2, [r7, #22]
 800dd24:	430a      	orrs	r2, r1
 800dd26:	b2d2      	uxtb	r2, r2
 800dd28:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800dd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2c:	3303      	adds	r3, #3
 800dd2e:	69ba      	ldr	r2, [r7, #24]
 800dd30:	b2d2      	uxtb	r2, r2
 800dd32:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800dd34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd38:	4413      	add	r3, r2
 800dd3a:	1e5a      	subs	r2, r3, #1
 800dd3c:	7ffb      	ldrb	r3, [r7, #31]
 800dd3e:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd46:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd4a:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800dd4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd50:	4413      	add	r3, r2
 800dd52:	1e5a      	subs	r2, r3, #1
 800dd54:	7ffb      	ldrb	r3, [r7, #31]
 800dd56:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dd5e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd62:	fb01 f202 	mul.w	r2, r1, r2
 800dd66:	1a9b      	subs	r3, r3, r2
 800dd68:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800dd6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6e:	4413      	add	r3, r2
 800dd70:	3b01      	subs	r3, #1
 800dd72:	7ffa      	ldrb	r2, [r7, #31]
 800dd74:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd78:	fb01 f202 	mul.w	r2, r1, r2
 800dd7c:	1a9b      	subs	r3, r3, r2
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	3301      	adds	r3, #1
 800dd82:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	3305      	adds	r3, #5
 800dd88:	7dfa      	ldrb	r2, [r7, #23]
 800dd8a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	089b      	lsrs	r3, r3, #2
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dd96:	b2d9      	uxtb	r1, r3
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	3306      	adds	r3, #6
 800dd9c:	7dba      	ldrb	r2, [r7, #22]
 800dd9e:	430a      	orrs	r2, r1
 800dda0:	b2d2      	uxtb	r2, r2
 800dda2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800dda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda6:	3307      	adds	r3, #7
 800dda8:	69ba      	ldr	r2, [r7, #24]
 800ddaa:	b2d2      	uxtb	r2, r2
 800ddac:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800ddae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb0:	3310      	adds	r3, #16
 800ddb2:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800ddb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	637b      	str	r3, [r7, #52]	; 0x34
 800ddba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	4413      	add	r3, r2
 800ddc0:	633b      	str	r3, [r7, #48]	; 0x30
 800ddc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddc4:	2b03      	cmp	r3, #3
 800ddc6:	d809      	bhi.n	800dddc <create_partition+0x214>
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d006      	beq.n	800dddc <create_partition+0x214>
 800ddce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	f4ff af3f 	bcc.w	800dc56 <create_partition+0x8e>
 800ddd8:	e000      	b.n	800dddc <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800ddda:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dde2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fd fe79 	bl	800bade <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800ddec:	7bf8      	ldrb	r0, [r7, #15]
 800ddee:	2301      	movs	r3, #1
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	f7fd fdfa 	bl	800b9ec <disk_write>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d001      	beq.n	800de02 <create_partition+0x23a>
 800ddfe:	2301      	movs	r3, #1
 800de00:	e000      	b.n	800de04 <create_partition+0x23c>
	}

	return FR_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3738      	adds	r7, #56	; 0x38
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	51eb851f 	.word	0x51eb851f

0800de10 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b0a0      	sub	sp, #128	; 0x80
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800de1e:	f107 030c 	add.w	r3, r7, #12
 800de22:	4618      	mov	r0, r3
 800de24:	f7fe fe4b 	bl	800cabe <get_ldnumber>
 800de28:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 800de2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	da02      	bge.n	800de36 <f_mkfs+0x26>
 800de30:	230b      	movs	r3, #11
 800de32:	f000 bc1b 	b.w	800e66c <f_mkfs+0x85c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800de36:	4aa2      	ldr	r2, [pc, #648]	; (800e0c0 <f_mkfs+0x2b0>)
 800de38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d005      	beq.n	800de4e <f_mkfs+0x3e>
 800de42:	4a9f      	ldr	r2, [pc, #636]	; (800e0c0 <f_mkfs+0x2b0>)
 800de44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de4a:	2200      	movs	r2, #0
 800de4c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800de4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de50:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800de54:	2300      	movs	r3, #0
 800de56:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800de5a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800de5e:	4618      	mov	r0, r3
 800de60:	f7fd fd7e 	bl	800b960 <disk_initialize>
 800de64:	4603      	mov	r3, r0
 800de66:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800de6a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800de6e:	f003 0301 	and.w	r3, r3, #1
 800de72:	2b00      	cmp	r3, #0
 800de74:	d001      	beq.n	800de7a <f_mkfs+0x6a>
 800de76:	2303      	movs	r3, #3
 800de78:	e3f8      	b.n	800e66c <f_mkfs+0x85c>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800de7a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800de7e:	f003 0304 	and.w	r3, r3, #4
 800de82:	2b00      	cmp	r3, #0
 800de84:	d001      	beq.n	800de8a <f_mkfs+0x7a>
 800de86:	230a      	movs	r3, #10
 800de88:	e3f0      	b.n	800e66c <f_mkfs+0x85c>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d101      	bne.n	800de94 <f_mkfs+0x84>
 800de90:	4b8c      	ldr	r3, [pc, #560]	; (800e0c4 <f_mkfs+0x2b4>)
 800de92:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	623b      	str	r3, [r7, #32]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800de9a:	6a3b      	ldr	r3, [r7, #32]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d107      	bne.n	800deb0 <f_mkfs+0xa0>
 800dea0:	f107 0220 	add.w	r2, r7, #32
 800dea4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800dea8:	2103      	movs	r1, #3
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fd fdbe 	bl	800ba2c <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800deb0:	6a3b      	ldr	r3, [r7, #32]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d009      	beq.n	800deca <f_mkfs+0xba>
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800debc:	d805      	bhi.n	800deca <f_mkfs+0xba>
 800debe:	6a3b      	ldr	r3, [r7, #32]
 800dec0:	1e5a      	subs	r2, r3, #1
 800dec2:	6a3b      	ldr	r3, [r7, #32]
 800dec4:	4013      	ands	r3, r2
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <f_mkfs+0xbe>
 800deca:	2301      	movs	r3, #1
 800decc:	623b      	str	r3, [r7, #32]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
 800dece:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ded2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	f003 030f 	and.w	r3, r3, #15
 800dede:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	785b      	ldrb	r3, [r3, #1]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d006      	beq.n	800def8 <f_mkfs+0xe8>
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	785b      	ldrb	r3, [r3, #1]
 800deee:	2b02      	cmp	r3, #2
 800def0:	d802      	bhi.n	800def8 <f_mkfs+0xe8>
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	785b      	ldrb	r3, [r3, #1]
 800def6:	e000      	b.n	800defa <f_mkfs+0xea>
 800def8:	2301      	movs	r3, #1
 800defa:	643b      	str	r3, [r7, #64]	; 0x40
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d014      	beq.n	800df2e <f_mkfs+0x11e>
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df0c:	d80f      	bhi.n	800df2e <f_mkfs+0x11e>
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800df16:	0952      	lsrs	r2, r2, #5
 800df18:	b292      	uxth	r2, r2
 800df1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800df1e:	fb01 f202 	mul.w	r2, r1, r2
 800df22:	1a9b      	subs	r3, r3, r2
 800df24:	2b00      	cmp	r3, #0
 800df26:	d102      	bne.n	800df2e <f_mkfs+0x11e>
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	e001      	b.n	800df32 <f_mkfs+0x122>
 800df2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df32:	63fb      	str	r3, [r7, #60]	; 0x3c
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800df3c:	d80a      	bhi.n	800df54 <f_mkfs+0x144>
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	68da      	ldr	r2, [r3, #12]
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	3b01      	subs	r3, #1
 800df48:	4013      	ands	r3, r2
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d102      	bne.n	800df54 <f_mkfs+0x144>
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	e000      	b.n	800df56 <f_mkfs+0x146>
 800df54:	2300      	movs	r3, #0
 800df56:	657b      	str	r3, [r7, #84]	; 0x54
	sz_au /= ss;	/* Byte --> Sector */
 800df58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800df5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800df62:	657b      	str	r3, [r7, #84]	; 0x54

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800df64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800df68:	683a      	ldr	r2, [r7, #0]
 800df6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800df6e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800df70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df72:	2b00      	cmp	r3, #0
 800df74:	d101      	bne.n	800df7a <f_mkfs+0x16a>
 800df76:	2311      	movs	r3, #17
 800df78:	e378      	b.n	800e66c <f_mkfs+0x85c>
	buf = (BYTE*)work;		/* Working buffer */
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	637b      	str	r3, [r7, #52]	; 0x34
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800df7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df80:	2b00      	cmp	r3, #0
 800df82:	d101      	bne.n	800df88 <f_mkfs+0x178>
 800df84:	2311      	movs	r3, #17
 800df86:	e371      	b.n	800e66c <f_mkfs+0x85c>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800df88:	2300      	movs	r3, #0
 800df8a:	61fb      	str	r3, [r7, #28]
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	677b      	str	r3, [r7, #116]	; 0x74
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800df90:	f107 021c 	add.w	r2, r7, #28
 800df94:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800df98:	2101      	movs	r1, #1
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fd fd46 	bl	800ba2c <disk_ioctl>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d001      	beq.n	800dfaa <f_mkfs+0x19a>
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e360      	b.n	800e66c <f_mkfs+0x85c>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800dfaa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800dfae:	f003 0308 	and.w	r3, r3, #8
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d108      	bne.n	800dfc8 <f_mkfs+0x1b8>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	2b3f      	cmp	r3, #63	; 0x3f
 800dfba:	d905      	bls.n	800dfc8 <f_mkfs+0x1b8>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800dfbc:	233f      	movs	r3, #63	; 0x3f
 800dfbe:	677b      	str	r3, [r7, #116]	; 0x74
 800dfc0:	69fa      	ldr	r2, [r7, #28]
 800dfc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	61fb      	str	r3, [r7, #28]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800dfc8:	69fb      	ldr	r3, [r7, #28]
 800dfca:	2b7f      	cmp	r3, #127	; 0x7f
 800dfcc:	d801      	bhi.n	800dfd2 <f_mkfs+0x1c2>
 800dfce:	230e      	movs	r3, #14
 800dfd0:	e34c      	b.n	800e66c <f_mkfs+0x85c>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800dfd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfd4:	2b80      	cmp	r3, #128	; 0x80
 800dfd6:	d901      	bls.n	800dfdc <f_mkfs+0x1cc>
 800dfd8:	2380      	movs	r3, #128	; 0x80
 800dfda:	657b      	str	r3, [r7, #84]	; 0x54
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800dfdc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800dfe0:	f003 0302 	and.w	r3, r3, #2
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d009      	beq.n	800dffc <f_mkfs+0x1ec>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800dfe8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800dfec:	f003 0301 	and.w	r3, r3, #1
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d103      	bne.n	800dffc <f_mkfs+0x1ec>
				fsty = FS_FAT32; break;
 800dff4:	2303      	movs	r3, #3
 800dff6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800dffa:	e00a      	b.n	800e012 <f_mkfs+0x202>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800dffc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e000:	f003 0301 	and.w	r3, r3, #1
 800e004:	2b00      	cmp	r3, #0
 800e006:	d101      	bne.n	800e00c <f_mkfs+0x1fc>
 800e008:	2313      	movs	r3, #19
 800e00a:	e32f      	b.n	800e66c <f_mkfs+0x85c>
		fsty = FS_FAT16;
 800e00c:	2302      	movs	r3, #2
 800e00e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800e012:	f7fc fb86 	bl	800a722 <get_fattime>
 800e016:	4602      	mov	r2, r0
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	4413      	add	r3, r2
 800e01c:	633b      	str	r3, [r7, #48]	; 0x30

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800e01e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e020:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800e022:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e026:	2b03      	cmp	r3, #3
 800e028:	d13e      	bne.n	800e0a8 <f_mkfs+0x298>
				if (pau == 0) {	/* AU auto-selection */
 800e02a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d11b      	bne.n	800e068 <f_mkfs+0x258>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	0c5b      	lsrs	r3, r3, #17
 800e034:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e036:	2300      	movs	r3, #0
 800e038:	653b      	str	r3, [r7, #80]	; 0x50
 800e03a:	2301      	movs	r3, #1
 800e03c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e03e:	e005      	b.n	800e04c <f_mkfs+0x23c>
 800e040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e042:	3301      	adds	r3, #1
 800e044:	653b      	str	r3, [r7, #80]	; 0x50
 800e046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e048:	005b      	lsls	r3, r3, #1
 800e04a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e04c:	4a1e      	ldr	r2, [pc, #120]	; (800e0c8 <f_mkfs+0x2b8>)
 800e04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d007      	beq.n	800e068 <f_mkfs+0x258>
 800e058:	4a1b      	ldr	r2, [pc, #108]	; (800e0c8 <f_mkfs+0x2b8>)
 800e05a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e05c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e060:	461a      	mov	r2, r3
 800e062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e064:	4293      	cmp	r3, r2
 800e066:	d2eb      	bcs.n	800e040 <f_mkfs+0x230>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800e068:	69fa      	ldr	r2, [r7, #28]
 800e06a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e070:	62fb      	str	r3, [r7, #44]	; 0x2c
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800e072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e074:	3302      	adds	r3, #2
 800e076:	009a      	lsls	r2, r3, #2
 800e078:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e07c:	4413      	add	r3, r2
 800e07e:	1e5a      	subs	r2, r3, #1
 800e080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e084:	fbb2 f3f3 	udiv	r3, r2, r3
 800e088:	65fb      	str	r3, [r7, #92]	; 0x5c
				sz_rsv = 32;	/* Number of reserved sectors */
 800e08a:	2320      	movs	r3, #32
 800e08c:	67fb      	str	r3, [r7, #124]	; 0x7c
				sz_dir = 0;		/* No static directory */
 800e08e:	2300      	movs	r3, #0
 800e090:	65bb      	str	r3, [r7, #88]	; 0x58
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800e092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e094:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e098:	4293      	cmp	r3, r2
 800e09a:	d903      	bls.n	800e0a4 <f_mkfs+0x294>
 800e09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09e:	4a0b      	ldr	r2, [pc, #44]	; (800e0cc <f_mkfs+0x2bc>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d956      	bls.n	800e152 <f_mkfs+0x342>
 800e0a4:	230e      	movs	r3, #14
 800e0a6:	e2e1      	b.n	800e66c <f_mkfs+0x85c>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800e0a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d124      	bne.n	800e0f8 <f_mkfs+0x2e8>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	0b1b      	lsrs	r3, r3, #12
 800e0b2:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	653b      	str	r3, [r7, #80]	; 0x50
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0bc:	e00e      	b.n	800e0dc <f_mkfs+0x2cc>
 800e0be:	bf00      	nop
 800e0c0:	240013b4 	.word	0x240013b4
 800e0c4:	080243e4 	.word	0x080243e4
 800e0c8:	080243f4 	.word	0x080243f4
 800e0cc:	0ffffff5 	.word	0x0ffffff5
 800e0d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	653b      	str	r3, [r7, #80]	; 0x50
 800e0d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0dc:	4a99      	ldr	r2, [pc, #612]	; (800e344 <f_mkfs+0x534>)
 800e0de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d007      	beq.n	800e0f8 <f_mkfs+0x2e8>
 800e0e8:	4a96      	ldr	r2, [pc, #600]	; (800e344 <f_mkfs+0x534>)
 800e0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d2eb      	bcs.n	800e0d0 <f_mkfs+0x2c0>
				}
				n_clst = (DWORD)sz_vol / pau;
 800e0f8:	69fa      	ldr	r2, [r7, #28]
 800e0fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e100:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (n_clst > MAX_FAT12) {
 800e102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e104:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e108:	4293      	cmp	r3, r2
 800e10a:	d904      	bls.n	800e116 <f_mkfs+0x306>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10e:	3302      	adds	r3, #2
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e114:	e00a      	b.n	800e12c <f_mkfs+0x31c>
				} else {
					fsty = FS_FAT12;
 800e116:	2301      	movs	r3, #1
 800e118:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e11c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e11e:	4613      	mov	r3, r2
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	4413      	add	r3, r2
 800e124:	3301      	adds	r3, #1
 800e126:	085b      	lsrs	r3, r3, #1
 800e128:	3303      	adds	r3, #3
 800e12a:	66fb      	str	r3, [r7, #108]	; 0x6c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e12c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e132:	4413      	add	r3, r2
 800e134:	1e5a      	subs	r2, r3, #1
 800e136:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e13e:	65fb      	str	r3, [r7, #92]	; 0x5c
				sz_rsv = 1;						/* Number of reserved sectors */
 800e140:	2301      	movs	r3, #1
 800e142:	67fb      	str	r3, [r7, #124]	; 0x7c
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800e144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e146:	015a      	lsls	r2, r3, #5
 800e148:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e14c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e150:	65bb      	str	r3, [r7, #88]	; 0x58
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e152:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e156:	4413      	add	r3, r2
 800e158:	673b      	str	r3, [r7, #112]	; 0x70
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800e15a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e15c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e15e:	fb03 f202 	mul.w	r2, r3, r2
 800e162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e164:	4413      	add	r3, r2
 800e166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e168:	4413      	add	r3, r2
 800e16a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800e16c:	6a3a      	ldr	r2, [r7, #32]
 800e16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e170:	4413      	add	r3, r2
 800e172:	1e5a      	subs	r2, r3, #1
 800e174:	6a3b      	ldr	r3, [r7, #32]
 800e176:	425b      	negs	r3, r3
 800e178:	401a      	ands	r2, r3
 800e17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800e180:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e184:	2b03      	cmp	r3, #3
 800e186:	d108      	bne.n	800e19a <f_mkfs+0x38a>
				sz_rsv += n; b_fat += n;
 800e188:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e18a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e18c:	4413      	add	r3, r2
 800e18e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e190:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e194:	4413      	add	r3, r2
 800e196:	673b      	str	r3, [r7, #112]	; 0x70
 800e198:	e019      	b.n	800e1ce <f_mkfs+0x3be>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800e19a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e19c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e19e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e1a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1a4:	fb01 f202 	mul.w	r2, r1, r2
 800e1a8:	1a9b      	subs	r3, r3, r2
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d008      	beq.n	800e1c0 <f_mkfs+0x3b0>
					n--; sz_rsv++; b_fat++;
 800e1ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e1b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e1ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e1bc:	3301      	adds	r3, #1
 800e1be:	673b      	str	r3, [r7, #112]	; 0x70
				}
				sz_fat += n / n_fat;
 800e1c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1ca:	4413      	add	r3, r2
 800e1cc:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800e1ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e1d0:	011a      	lsls	r2, r3, #4
 800e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d4:	441a      	add	r2, r3
 800e1d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1d8:	1ad2      	subs	r2, r2, r3
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d901      	bls.n	800e1e4 <f_mkfs+0x3d4>
 800e1e0:	230e      	movs	r3, #14
 800e1e2:	e243      	b.n	800e66c <f_mkfs+0x85c>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800e1e4:	69fa      	ldr	r2, [r7, #28]
 800e1e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e1e8:	1ad2      	subs	r2, r2, r3
 800e1ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1ee:	fb01 f303 	mul.w	r3, r1, r3
 800e1f2:	1ad2      	subs	r2, r2, r3
 800e1f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1f6:	1ad2      	subs	r2, r2, r3
 800e1f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (fsty == FS_FAT32) {
 800e200:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e204:	2b03      	cmp	r3, #3
 800e206:	d10f      	bne.n	800e228 <f_mkfs+0x418>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800e208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e20e:	4293      	cmp	r3, r2
 800e210:	d80a      	bhi.n	800e228 <f_mkfs+0x418>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e214:	2b00      	cmp	r3, #0
 800e216:	d105      	bne.n	800e224 <f_mkfs+0x414>
 800e218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e21a:	085b      	lsrs	r3, r3, #1
 800e21c:	657b      	str	r3, [r7, #84]	; 0x54
 800e21e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e220:	2b00      	cmp	r3, #0
 800e222:	d145      	bne.n	800e2b0 <f_mkfs+0x4a0>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800e224:	230e      	movs	r3, #14
 800e226:	e221      	b.n	800e66c <f_mkfs+0x85c>
				}
			}
			if (fsty == FS_FAT16) {
 800e228:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e22c:	2b02      	cmp	r3, #2
 800e22e:	d134      	bne.n	800e29a <f_mkfs+0x48a>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e232:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e236:	4293      	cmp	r3, r2
 800e238:	d91f      	bls.n	800e27a <f_mkfs+0x46a>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800e23a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d107      	bne.n	800e250 <f_mkfs+0x440>
 800e240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e242:	005b      	lsls	r3, r3, #1
 800e244:	2b40      	cmp	r3, #64	; 0x40
 800e246:	d803      	bhi.n	800e250 <f_mkfs+0x440>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800e248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e24a:	005b      	lsls	r3, r3, #1
 800e24c:	657b      	str	r3, [r7, #84]	; 0x54
 800e24e:	e034      	b.n	800e2ba <f_mkfs+0x4aa>
					}
					if ((fsopt & FM_FAT32)) {
 800e250:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e254:	f003 0302 	and.w	r3, r3, #2
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d003      	beq.n	800e264 <f_mkfs+0x454>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e25c:	2303      	movs	r3, #3
 800e25e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800e262:	e02a      	b.n	800e2ba <f_mkfs+0x4aa>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e266:	2b00      	cmp	r3, #0
 800e268:	d105      	bne.n	800e276 <f_mkfs+0x466>
 800e26a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e26c:	005b      	lsls	r3, r3, #1
 800e26e:	657b      	str	r3, [r7, #84]	; 0x54
 800e270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e272:	2b80      	cmp	r3, #128	; 0x80
 800e274:	d91e      	bls.n	800e2b4 <f_mkfs+0x4a4>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800e276:	230e      	movs	r3, #14
 800e278:	e1f8      	b.n	800e66c <f_mkfs+0x85c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e280:	4293      	cmp	r3, r2
 800e282:	d80a      	bhi.n	800e29a <f_mkfs+0x48a>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e286:	2b00      	cmp	r3, #0
 800e288:	d105      	bne.n	800e296 <f_mkfs+0x486>
 800e28a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e28c:	005b      	lsls	r3, r3, #1
 800e28e:	657b      	str	r3, [r7, #84]	; 0x54
 800e290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e292:	2b80      	cmp	r3, #128	; 0x80
 800e294:	d910      	bls.n	800e2b8 <f_mkfs+0x4a8>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800e296:	230e      	movs	r3, #14
 800e298:	e1e8      	b.n	800e66c <f_mkfs+0x85c>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800e29a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d10c      	bne.n	800e2bc <f_mkfs+0x4ac>
 800e2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d907      	bls.n	800e2bc <f_mkfs+0x4ac>
 800e2ac:	230e      	movs	r3, #14
 800e2ae:	e1dd      	b.n	800e66c <f_mkfs+0x85c>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e2b0:	bf00      	nop
 800e2b2:	e6b4      	b.n	800e01e <f_mkfs+0x20e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e2b4:	bf00      	nop
 800e2b6:	e6b2      	b.n	800e01e <f_mkfs+0x20e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e2b8:	bf00      	nop
			pau = sz_au;
 800e2ba:	e6b0      	b.n	800e01e <f_mkfs+0x20e>

			/* Ok, it is the valid cluster configuration */
			break;
 800e2bc:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800e2be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2c8:	f011 f84a 	bl	801f360 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800e2cc:	220b      	movs	r2, #11
 800e2ce:	491e      	ldr	r1, [pc, #120]	; (800e348 <f_mkfs+0x538>)
 800e2d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2d2:	f011 f81d 	bl	801f310 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d8:	330b      	adds	r3, #11
 800e2da:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e2de:	4611      	mov	r1, r2
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fd fbfc 	bl	800bade <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2e8:	330d      	adds	r3, #13
 800e2ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e2ec:	b2d2      	uxtb	r2, r2
 800e2ee:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f2:	330e      	adds	r3, #14
 800e2f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e2f6:	b292      	uxth	r2, r2
 800e2f8:	4611      	mov	r1, r2
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fd fbef 	bl	800bade <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800e300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e302:	3310      	adds	r3, #16
 800e304:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e306:	b2d2      	uxtb	r2, r2
 800e308:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800e30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e30c:	f103 0211 	add.w	r2, r3, #17
 800e310:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e314:	2b03      	cmp	r3, #3
 800e316:	d002      	beq.n	800e31e <f_mkfs+0x50e>
 800e318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	e000      	b.n	800e320 <f_mkfs+0x510>
 800e31e:	2300      	movs	r3, #0
 800e320:	4619      	mov	r1, r3
 800e322:	4610      	mov	r0, r2
 800e324:	f7fd fbdb 	bl	800bade <st_word>
		if (sz_vol < 0x10000) {
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e32e:	d20d      	bcs.n	800e34c <f_mkfs+0x53c>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e332:	3313      	adds	r3, #19
 800e334:	69fa      	ldr	r2, [r7, #28]
 800e336:	b292      	uxth	r2, r2
 800e338:	4611      	mov	r1, r2
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7fd fbcf 	bl	800bade <st_word>
 800e340:	e00b      	b.n	800e35a <f_mkfs+0x54a>
 800e342:	bf00      	nop
 800e344:	08024404 	.word	0x08024404
 800e348:	080209f4 	.word	0x080209f4
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800e34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e34e:	3320      	adds	r3, #32
 800e350:	69fa      	ldr	r2, [r7, #28]
 800e352:	4611      	mov	r1, r2
 800e354:	4618      	mov	r0, r3
 800e356:	f7fd fbdd 	bl	800bb14 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e35c:	3315      	adds	r3, #21
 800e35e:	22f8      	movs	r2, #248	; 0xf8
 800e360:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e364:	3318      	adds	r3, #24
 800e366:	213f      	movs	r1, #63	; 0x3f
 800e368:	4618      	mov	r0, r3
 800e36a:	f7fd fbb8 	bl	800bade <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e370:	331a      	adds	r3, #26
 800e372:	21ff      	movs	r1, #255	; 0xff
 800e374:	4618      	mov	r0, r3
 800e376:	f7fd fbb2 	bl	800bade <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800e37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e37c:	331c      	adds	r3, #28
 800e37e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e380:	4618      	mov	r0, r3
 800e382:	f7fd fbc7 	bl	800bb14 <st_dword>
		if (fsty == FS_FAT32) {
 800e386:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e38a:	2b03      	cmp	r3, #3
 800e38c:	d12d      	bne.n	800e3ea <f_mkfs+0x5da>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800e38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e390:	3343      	adds	r3, #67	; 0x43
 800e392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e394:	4618      	mov	r0, r3
 800e396:	f7fd fbbd 	bl	800bb14 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e39c:	3324      	adds	r3, #36	; 0x24
 800e39e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fd fbb7 	bl	800bb14 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a8:	332c      	adds	r3, #44	; 0x2c
 800e3aa:	2102      	movs	r1, #2
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fd fbb1 	bl	800bb14 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b4:	3330      	adds	r3, #48	; 0x30
 800e3b6:	2101      	movs	r1, #1
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fd fb90 	bl	800bade <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c0:	3332      	adds	r3, #50	; 0x32
 800e3c2:	2106      	movs	r1, #6
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fd fb8a 	bl	800bade <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3cc:	3340      	adds	r3, #64	; 0x40
 800e3ce:	2280      	movs	r2, #128	; 0x80
 800e3d0:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3d4:	3342      	adds	r3, #66	; 0x42
 800e3d6:	2229      	movs	r2, #41	; 0x29
 800e3d8:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3dc:	3347      	adds	r3, #71	; 0x47
 800e3de:	2213      	movs	r2, #19
 800e3e0:	49a4      	ldr	r1, [pc, #656]	; (800e674 <f_mkfs+0x864>)
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f010 ff94 	bl	801f310 <memcpy>
 800e3e8:	e01c      	b.n	800e424 <f_mkfs+0x614>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800e3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ec:	3327      	adds	r3, #39	; 0x27
 800e3ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fd fb8f 	bl	800bb14 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f8:	3316      	adds	r3, #22
 800e3fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e3fc:	b292      	uxth	r2, r2
 800e3fe:	4611      	mov	r1, r2
 800e400:	4618      	mov	r0, r3
 800e402:	f7fd fb6c 	bl	800bade <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e408:	3324      	adds	r3, #36	; 0x24
 800e40a:	2280      	movs	r2, #128	; 0x80
 800e40c:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e410:	3326      	adds	r3, #38	; 0x26
 800e412:	2229      	movs	r2, #41	; 0x29
 800e414:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e418:	332b      	adds	r3, #43	; 0x2b
 800e41a:	2213      	movs	r2, #19
 800e41c:	4996      	ldr	r1, [pc, #600]	; (800e678 <f_mkfs+0x868>)
 800e41e:	4618      	mov	r0, r3
 800e420:	f010 ff76 	bl	801f310 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e426:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e42a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fd fb55 	bl	800bade <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800e434:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e438:	2301      	movs	r3, #1
 800e43a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e43c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e43e:	f7fd fad5 	bl	800b9ec <disk_write>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d001      	beq.n	800e44c <f_mkfs+0x63c>
 800e448:	2301      	movs	r3, #1
 800e44a:	e10f      	b.n	800e66c <f_mkfs+0x85c>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800e44c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e450:	2b03      	cmp	r3, #3
 800e452:	d141      	bne.n	800e4d8 <f_mkfs+0x6c8>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e456:	1d9a      	adds	r2, r3, #6
 800e458:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e45c:	2301      	movs	r3, #1
 800e45e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e460:	f7fd fac4 	bl	800b9ec <disk_write>
			memset(buf, 0, ss);
 800e464:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e468:	461a      	mov	r2, r3
 800e46a:	2100      	movs	r1, #0
 800e46c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e46e:	f010 ff77 	bl	801f360 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e472:	4982      	ldr	r1, [pc, #520]	; (800e67c <f_mkfs+0x86c>)
 800e474:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e476:	f7fd fb4d 	bl	800bb14 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e47c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e480:	497f      	ldr	r1, [pc, #508]	; (800e680 <f_mkfs+0x870>)
 800e482:	4618      	mov	r0, r3
 800e484:	f7fd fb46 	bl	800bb14 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e48a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e490:	3b01      	subs	r3, #1
 800e492:	4619      	mov	r1, r3
 800e494:	4610      	mov	r0, r2
 800e496:	f7fd fb3d 	bl	800bb14 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e49c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e4a0:	2102      	movs	r1, #2
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fd fb36 	bl	800bb14 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e4ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fd fb13 	bl	800bade <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e4b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4ba:	1dda      	adds	r2, r3, #7
 800e4bc:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e4c4:	f7fd fa92 	bl	800b9ec <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e4c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4ca:	1c5a      	adds	r2, r3, #1
 800e4cc:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e4d4:	f7fd fa8a 	bl	800b9ec <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800e4d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e4dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4de:	fb02 f303 	mul.w	r3, r2, r3
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e4e8:	f010 ff3a 	bl	801f360 <memset>
		sect = b_fat;		/* FAT start sector */
 800e4ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4ee:	67bb      	str	r3, [r7, #120]	; 0x78
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	653b      	str	r3, [r7, #80]	; 0x50
 800e4f4:	e04c      	b.n	800e590 <f_mkfs+0x780>
			if (fsty == FS_FAT32) {
 800e4f6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e4fa:	2b03      	cmp	r3, #3
 800e4fc:	d113      	bne.n	800e526 <f_mkfs+0x716>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800e4fe:	f06f 0107 	mvn.w	r1, #7
 800e502:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e504:	f7fd fb06 	bl	800bb14 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800e508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e50a:	3304      	adds	r3, #4
 800e50c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e510:	4618      	mov	r0, r3
 800e512:	f7fd faff 	bl	800bb14 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800e516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e518:	3308      	adds	r3, #8
 800e51a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fd faf8 	bl	800bb14 <st_dword>
 800e524:	e00b      	b.n	800e53e <f_mkfs+0x72e>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800e526:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d101      	bne.n	800e532 <f_mkfs+0x722>
 800e52e:	4b55      	ldr	r3, [pc, #340]	; (800e684 <f_mkfs+0x874>)
 800e530:	e001      	b.n	800e536 <f_mkfs+0x726>
 800e532:	f06f 0307 	mvn.w	r3, #7
 800e536:	4619      	mov	r1, r3
 800e538:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e53a:	f7fd faeb 	bl	800bb14 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e53e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e540:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e542:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e546:	4293      	cmp	r3, r2
 800e548:	bf28      	it	cs
 800e54a:	4613      	movcs	r3, r2
 800e54c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800e54e:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e554:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e556:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e558:	f7fd fa48 	bl	800b9ec <disk_write>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <f_mkfs+0x756>
 800e562:	2301      	movs	r3, #1
 800e564:	e082      	b.n	800e66c <f_mkfs+0x85c>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800e566:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e56a:	461a      	mov	r2, r3
 800e56c:	2100      	movs	r1, #0
 800e56e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e570:	f010 fef6 	bl	801f360 <memset>
				sect += n; nsect -= n;
 800e574:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e578:	4413      	add	r3, r2
 800e57a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e57c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e57e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e580:	1ad3      	subs	r3, r2, r3
 800e582:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800e584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e586:	2b00      	cmp	r3, #0
 800e588:	d1db      	bne.n	800e542 <f_mkfs+0x732>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800e58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e58c:	3301      	adds	r3, #1
 800e58e:	653b      	str	r3, [r7, #80]	; 0x50
 800e590:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e594:	429a      	cmp	r2, r3
 800e596:	d3ae      	bcc.n	800e4f6 <f_mkfs+0x6e6>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e598:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e59c:	2b03      	cmp	r3, #3
 800e59e:	d101      	bne.n	800e5a4 <f_mkfs+0x794>
 800e5a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e5a2:	e000      	b.n	800e5a6 <f_mkfs+0x796>
 800e5a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5a6:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e5a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	bf28      	it	cs
 800e5b0:	4613      	movcs	r3, r2
 800e5b2:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800e5b4:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e5bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e5be:	f7fd fa15 	bl	800b9ec <disk_write>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d001      	beq.n	800e5cc <f_mkfs+0x7bc>
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e04f      	b.n	800e66c <f_mkfs+0x85c>
			sect += n; nsect -= n;
 800e5cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e5ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5d0:	4413      	add	r3, r2
 800e5d2:	67bb      	str	r3, [r7, #120]	; 0x78
 800e5d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5d8:	1ad3      	subs	r3, r2, r3
 800e5da:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800e5dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1e2      	bne.n	800e5a8 <f_mkfs+0x798>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800e5e2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d103      	bne.n	800e5f2 <f_mkfs+0x7e2>
		sys = 0x0C;		/* FAT32X */
 800e5ea:	230c      	movs	r3, #12
 800e5ec:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800e5f0:	e012      	b.n	800e618 <f_mkfs+0x808>
	} else if (sz_vol >= 0x10000) {
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5f8:	d303      	bcc.n	800e602 <f_mkfs+0x7f2>
		sys = 0x06;		/* FAT12/16 (large) */
 800e5fa:	2306      	movs	r3, #6
 800e5fc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800e600:	e00a      	b.n	800e618 <f_mkfs+0x808>
	} else if (fsty == FS_FAT16) {
 800e602:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e606:	2b02      	cmp	r3, #2
 800e608:	d103      	bne.n	800e612 <f_mkfs+0x802>
		sys = 0x04;		/* FAT16 */
 800e60a:	2304      	movs	r3, #4
 800e60c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800e610:	e002      	b.n	800e618 <f_mkfs+0x808>
	} else {
		sys = 0x01;		/* FAT12 */
 800e612:	2301      	movs	r3, #1
 800e614:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800e618:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e61c:	f003 0308 	and.w	r3, r3, #8
 800e620:	2b00      	cmp	r3, #0
 800e622:	d116      	bne.n	800e652 <f_mkfs+0x842>
			lba[0] = sz_vol; lba[1] = 0;
 800e624:	69fb      	ldr	r3, [r7, #28]
 800e626:	617b      	str	r3, [r7, #20]
 800e628:	2300      	movs	r3, #0
 800e62a:	61bb      	str	r3, [r7, #24]
			res = create_partition(pdrv, lba, sys, buf);
 800e62c:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 800e630:	f107 0114 	add.w	r1, r7, #20
 800e634:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e63a:	f7ff fac5 	bl	800dbc8 <create_partition>
 800e63e:	4603      	mov	r3, r0
 800e640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) LEAVE_MKFS(res);
 800e644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d002      	beq.n	800e652 <f_mkfs+0x842>
 800e64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e650:	e00c      	b.n	800e66c <f_mkfs+0x85c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800e652:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e656:	2200      	movs	r2, #0
 800e658:	2100      	movs	r1, #0
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fd f9e6 	bl	800ba2c <disk_ioctl>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d001      	beq.n	800e66a <f_mkfs+0x85a>
 800e666:	2301      	movs	r3, #1
 800e668:	e000      	b.n	800e66c <f_mkfs+0x85c>

	LEAVE_MKFS(FR_OK);
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3780      	adds	r7, #128	; 0x80
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	08020a00 	.word	0x08020a00
 800e678:	08020a14 	.word	0x08020a14
 800e67c:	41615252 	.word	0x41615252
 800e680:	61417272 	.word	0x61417272
 800e684:	00fffff8 	.word	0x00fffff8

0800e688 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e688:	b480      	push	{r7}
 800e68a:	b087      	sub	sp, #28
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	4613      	mov	r3, r2
 800e694:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e696:	2301      	movs	r3, #1
 800e698:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e69a:	2300      	movs	r3, #0
 800e69c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < FF_VOLUMES)
 800e69e:	4b1f      	ldr	r3, [pc, #124]	; (800e71c <FATFS_LinkDriverEx+0x94>)
 800e6a0:	7a5b      	ldrb	r3, [r3, #9]
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d131      	bne.n	800e70c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e6a8:	4b1c      	ldr	r3, [pc, #112]	; (800e71c <FATFS_LinkDriverEx+0x94>)
 800e6aa:	7a5b      	ldrb	r3, [r3, #9]
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	4b1a      	ldr	r3, [pc, #104]	; (800e71c <FATFS_LinkDriverEx+0x94>)
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e6b6:	4b19      	ldr	r3, [pc, #100]	; (800e71c <FATFS_LinkDriverEx+0x94>)
 800e6b8:	7a5b      	ldrb	r3, [r3, #9]
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	4a17      	ldr	r2, [pc, #92]	; (800e71c <FATFS_LinkDriverEx+0x94>)
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	68fa      	ldr	r2, [r7, #12]
 800e6c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e6c6:	4b15      	ldr	r3, [pc, #84]	; (800e71c <FATFS_LinkDriverEx+0x94>)
 800e6c8:	7a5b      	ldrb	r3, [r3, #9]
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	4b13      	ldr	r3, [pc, #76]	; (800e71c <FATFS_LinkDriverEx+0x94>)
 800e6d0:	4413      	add	r3, r2
 800e6d2:	79fa      	ldrb	r2, [r7, #7]
 800e6d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e6d6:	4b11      	ldr	r3, [pc, #68]	; (800e71c <FATFS_LinkDriverEx+0x94>)
 800e6d8:	7a5b      	ldrb	r3, [r3, #9]
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	b2d1      	uxtb	r1, r2
 800e6e0:	4a0e      	ldr	r2, [pc, #56]	; (800e71c <FATFS_LinkDriverEx+0x94>)
 800e6e2:	7251      	strb	r1, [r2, #9]
 800e6e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e6e6:	7dbb      	ldrb	r3, [r7, #22]
 800e6e8:	3330      	adds	r3, #48	; 0x30
 800e6ea:	b2da      	uxtb	r2, r3
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	223a      	movs	r2, #58	; 0x3a
 800e6f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	3302      	adds	r3, #2
 800e6fc:	222f      	movs	r2, #47	; 0x2f
 800e6fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	3303      	adds	r3, #3
 800e704:	2200      	movs	r2, #0
 800e706:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e708:	2300      	movs	r3, #0
 800e70a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e70c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e70e:	4618      	mov	r0, r3
 800e710:	371c      	adds	r7, #28
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	240013bc 	.word	0x240013bc

0800e720 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e72a:	2200      	movs	r2, #0
 800e72c:	6839      	ldr	r1, [r7, #0]
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f7ff ffaa 	bl	800e688 <FATFS_LinkDriverEx>
 800e734:	4603      	mov	r3, r0
}
 800e736:	4618      	mov	r0, r3
 800e738:	3708      	adds	r7, #8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e73e:	b480      	push	{r7}
 800e740:	b085      	sub	sp, #20
 800e742:	af00      	add	r7, sp, #0
 800e744:	4603      	mov	r3, r0
 800e746:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e748:	2300      	movs	r3, #0
 800e74a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e74c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e750:	2b84      	cmp	r3, #132	; 0x84
 800e752:	d005      	beq.n	800e760 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e754:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	4413      	add	r3, r2
 800e75c:	3303      	adds	r3, #3
 800e75e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e760:	68fb      	ldr	r3, [r7, #12]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3714      	adds	r7, #20
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e76e:	b480      	push	{r7}
 800e770:	b083      	sub	sp, #12
 800e772:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e774:	f3ef 8305 	mrs	r3, IPSR
 800e778:	607b      	str	r3, [r7, #4]
  return(result);
 800e77a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	bf14      	ite	ne
 800e780:	2301      	movne	r3, #1
 800e782:	2300      	moveq	r3, #0
 800e784:	b2db      	uxtb	r3, r3
}
 800e786:	4618      	mov	r0, r3
 800e788:	370c      	adds	r7, #12
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr

0800e792 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e792:	b580      	push	{r7, lr}
 800e794:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e796:	f002 fa0f 	bl	8010bb8 <vTaskStartScheduler>
  
  return osOK;
 800e79a:	2300      	movs	r3, #0
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800e7a4:	f002 fe4c 	bl	8011440 <xTaskGetSchedulerState>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d101      	bne.n	800e7b2 <osKernelRunning+0x12>
    return 0;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	e000      	b.n	800e7b4 <osKernelRunning+0x14>
  else
    return 1;
 800e7b2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800e7bc:	f7ff ffd7 	bl	800e76e <inHandlerMode>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d003      	beq.n	800e7ce <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800e7c6:	f002 fb1b 	bl	8010e00 <xTaskGetTickCountFromISR>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	e002      	b.n	800e7d4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800e7ce:	f002 fb07 	bl	8010de0 <xTaskGetTickCount>
 800e7d2:	4603      	mov	r3, r0
  }
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7da:	b089      	sub	sp, #36	; 0x24
 800e7dc:	af04      	add	r7, sp, #16
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	695b      	ldr	r3, [r3, #20]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d020      	beq.n	800e82c <osThreadCreate+0x54>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	699b      	ldr	r3, [r3, #24]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d01c      	beq.n	800e82c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	685c      	ldr	r4, [r3, #4]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681d      	ldr	r5, [r3, #0]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	691e      	ldr	r6, [r3, #16]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e804:	4618      	mov	r0, r3
 800e806:	f7ff ff9a 	bl	800e73e <makeFreeRtosPriority>
 800e80a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	695b      	ldr	r3, [r3, #20]
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e814:	9202      	str	r2, [sp, #8]
 800e816:	9301      	str	r3, [sp, #4]
 800e818:	9100      	str	r1, [sp, #0]
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	4632      	mov	r2, r6
 800e81e:	4629      	mov	r1, r5
 800e820:	4620      	mov	r0, r4
 800e822:	f001 ff5b 	bl	80106dc <xTaskCreateStatic>
 800e826:	4603      	mov	r3, r0
 800e828:	60fb      	str	r3, [r7, #12]
 800e82a:	e01c      	b.n	800e866 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	685c      	ldr	r4, [r3, #4]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e838:	b29e      	uxth	r6, r3
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e840:	4618      	mov	r0, r3
 800e842:	f7ff ff7c 	bl	800e73e <makeFreeRtosPriority>
 800e846:	4602      	mov	r2, r0
 800e848:	f107 030c 	add.w	r3, r7, #12
 800e84c:	9301      	str	r3, [sp, #4]
 800e84e:	9200      	str	r2, [sp, #0]
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	4632      	mov	r2, r6
 800e854:	4629      	mov	r1, r5
 800e856:	4620      	mov	r0, r4
 800e858:	f001 ff9d 	bl	8010796 <xTaskCreate>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d001      	beq.n	800e866 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e862:	2300      	movs	r3, #0
 800e864:	e000      	b.n	800e868 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e866:	68fb      	ldr	r3, [r7, #12]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3714      	adds	r7, #20
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e870 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <osDelay+0x16>
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	e000      	b.n	800e888 <osDelay+0x18>
 800e886:	2301      	movs	r3, #1
 800e888:	4618      	mov	r0, r3
 800e88a:	f002 f961 	bl	8010b50 <vTaskDelay>
  
  return osOK;
 800e88e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e890:	4618      	mov	r0, r3
 800e892:	3710      	adds	r7, #16
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d007      	beq.n	800e8b8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	2001      	movs	r0, #1
 800e8b0:	f001 f8b5 	bl	800fa1e <xQueueCreateMutexStatic>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	e003      	b.n	800e8c0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800e8b8:	2001      	movs	r0, #1
 800e8ba:	f001 f898 	bl	800f9ee <xQueueCreateMutex>
 800e8be:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d101      	bne.n	800e8e0 <osMutexWait+0x18>
    return osErrorParameter;
 800e8dc:	2380      	movs	r3, #128	; 0x80
 800e8de:	e03a      	b.n	800e956 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8ea:	d103      	bne.n	800e8f4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800e8ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8f0:	60fb      	str	r3, [r7, #12]
 800e8f2:	e009      	b.n	800e908 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d006      	beq.n	800e908 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d101      	bne.n	800e908 <osMutexWait+0x40>
      ticks = 1;
 800e904:	2301      	movs	r3, #1
 800e906:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e908:	f7ff ff31 	bl	800e76e <inHandlerMode>
 800e90c:	4603      	mov	r3, r0
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d017      	beq.n	800e942 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800e912:	f107 0308 	add.w	r3, r7, #8
 800e916:	461a      	mov	r2, r3
 800e918:	2100      	movs	r1, #0
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f001 fcac 	bl	8010278 <xQueueReceiveFromISR>
 800e920:	4603      	mov	r3, r0
 800e922:	2b01      	cmp	r3, #1
 800e924:	d001      	beq.n	800e92a <osMutexWait+0x62>
      return osErrorOS;
 800e926:	23ff      	movs	r3, #255	; 0xff
 800e928:	e015      	b.n	800e956 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d011      	beq.n	800e954 <osMutexWait+0x8c>
 800e930:	4b0b      	ldr	r3, [pc, #44]	; (800e960 <osMutexWait+0x98>)
 800e932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e936:	601a      	str	r2, [r3, #0]
 800e938:	f3bf 8f4f 	dsb	sy
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	e008      	b.n	800e954 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800e942:	68f9      	ldr	r1, [r7, #12]
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f001 fb8b 	bl	8010060 <xQueueSemaphoreTake>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d001      	beq.n	800e954 <osMutexWait+0x8c>
    return osErrorOS;
 800e950:	23ff      	movs	r3, #255	; 0xff
 800e952:	e000      	b.n	800e956 <osMutexWait+0x8e>
  }
  
  return osOK;
 800e954:	2300      	movs	r3, #0
}
 800e956:	4618      	mov	r0, r3
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	e000ed04 	.word	0xe000ed04

0800e964 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e96c:	2300      	movs	r3, #0
 800e96e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e970:	2300      	movs	r3, #0
 800e972:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800e974:	f7ff fefb 	bl	800e76e <inHandlerMode>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d016      	beq.n	800e9ac <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800e97e:	f107 0308 	add.w	r3, r7, #8
 800e982:	4619      	mov	r1, r3
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f001 f9fe 	bl	800fd86 <xQueueGiveFromISR>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d001      	beq.n	800e994 <osMutexRelease+0x30>
      return osErrorOS;
 800e990:	23ff      	movs	r3, #255	; 0xff
 800e992:	e017      	b.n	800e9c4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d013      	beq.n	800e9c2 <osMutexRelease+0x5e>
 800e99a:	4b0c      	ldr	r3, [pc, #48]	; (800e9cc <osMutexRelease+0x68>)
 800e99c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9a0:	601a      	str	r2, [r3, #0]
 800e9a2:	f3bf 8f4f 	dsb	sy
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	e00a      	b.n	800e9c2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f001 f84e 	bl	800fa54 <xQueueGenericSend>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d001      	beq.n	800e9c2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800e9be:	23ff      	movs	r3, #255	; 0xff
 800e9c0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	e000ed04 	.word	0xe000ed04

0800e9d0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af02      	add	r7, sp, #8
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00f      	beq.n	800ea02 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d10a      	bne.n	800e9fe <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	2203      	movs	r2, #3
 800e9ee:	9200      	str	r2, [sp, #0]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	2001      	movs	r0, #1
 800e9f6:	f000 ff0f 	bl	800f818 <xQueueGenericCreateStatic>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	e016      	b.n	800ea2c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	e014      	b.n	800ea2c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d110      	bne.n	800ea2a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ea08:	2203      	movs	r2, #3
 800ea0a:	2100      	movs	r1, #0
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	f000 ff7b 	bl	800f908 <xQueueGenericCreate>
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d005      	beq.n	800ea26 <osSemaphoreCreate+0x56>
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	2100      	movs	r1, #0
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f001 f817 	bl	800fa54 <xQueueGenericSend>
      return sema;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	e000      	b.n	800ea2c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ea2a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3710      	adds	r7, #16
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ea3e:	2300      	movs	r3, #0
 800ea40:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d101      	bne.n	800ea4c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ea48:	2380      	movs	r3, #128	; 0x80
 800ea4a:	e03a      	b.n	800eac2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea56:	d103      	bne.n	800ea60 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ea58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea5c:	60fb      	str	r3, [r7, #12]
 800ea5e:	e009      	b.n	800ea74 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d006      	beq.n	800ea74 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d101      	bne.n	800ea74 <osSemaphoreWait+0x40>
      ticks = 1;
 800ea70:	2301      	movs	r3, #1
 800ea72:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ea74:	f7ff fe7b 	bl	800e76e <inHandlerMode>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d017      	beq.n	800eaae <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ea7e:	f107 0308 	add.w	r3, r7, #8
 800ea82:	461a      	mov	r2, r3
 800ea84:	2100      	movs	r1, #0
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f001 fbf6 	bl	8010278 <xQueueReceiveFromISR>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d001      	beq.n	800ea96 <osSemaphoreWait+0x62>
      return osErrorOS;
 800ea92:	23ff      	movs	r3, #255	; 0xff
 800ea94:	e015      	b.n	800eac2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d011      	beq.n	800eac0 <osSemaphoreWait+0x8c>
 800ea9c:	4b0b      	ldr	r3, [pc, #44]	; (800eacc <osSemaphoreWait+0x98>)
 800ea9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaa2:	601a      	str	r2, [r3, #0]
 800eaa4:	f3bf 8f4f 	dsb	sy
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	e008      	b.n	800eac0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800eaae:	68f9      	ldr	r1, [r7, #12]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f001 fad5 	bl	8010060 <xQueueSemaphoreTake>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d001      	beq.n	800eac0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800eabc:	23ff      	movs	r3, #255	; 0xff
 800eabe:	e000      	b.n	800eac2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	e000ed04 	.word	0xe000ed04

0800ead0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ead8:	2300      	movs	r3, #0
 800eada:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800eadc:	2300      	movs	r3, #0
 800eade:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800eae0:	f7ff fe45 	bl	800e76e <inHandlerMode>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d016      	beq.n	800eb18 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800eaea:	f107 0308 	add.w	r3, r7, #8
 800eaee:	4619      	mov	r1, r3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f001 f948 	bl	800fd86 <xQueueGiveFromISR>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d001      	beq.n	800eb00 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800eafc:	23ff      	movs	r3, #255	; 0xff
 800eafe:	e017      	b.n	800eb30 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d013      	beq.n	800eb2e <osSemaphoreRelease+0x5e>
 800eb06:	4b0c      	ldr	r3, [pc, #48]	; (800eb38 <osSemaphoreRelease+0x68>)
 800eb08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb0c:	601a      	str	r2, [r3, #0]
 800eb0e:	f3bf 8f4f 	dsb	sy
 800eb12:	f3bf 8f6f 	isb	sy
 800eb16:	e00a      	b.n	800eb2e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800eb18:	2300      	movs	r3, #0
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 ff98 	bl	800fa54 <xQueueGenericSend>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d001      	beq.n	800eb2e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800eb2a:	23ff      	movs	r3, #255	; 0xff
 800eb2c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	e000ed04 	.word	0xe000ed04

0800eb3c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800eb44:	f7ff fe13 	bl	800e76e <inHandlerMode>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800eb4e:	2382      	movs	r3, #130	; 0x82
 800eb50:	e003      	b.n	800eb5a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f001 fc4c 	bl	80103f0 <vQueueDelete>

  return osOK; 
 800eb58:	2300      	movs	r3, #0
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800eb62:	b590      	push	{r4, r7, lr}
 800eb64:	b085      	sub	sp, #20
 800eb66:	af02      	add	r7, sp, #8
 800eb68:	6078      	str	r0, [r7, #4]
 800eb6a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	689b      	ldr	r3, [r3, #8]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d011      	beq.n	800eb98 <osMessageCreate+0x36>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d00d      	beq.n	800eb98 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6818      	ldr	r0, [r3, #0]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6859      	ldr	r1, [r3, #4]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	689a      	ldr	r2, [r3, #8]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	68db      	ldr	r3, [r3, #12]
 800eb8c:	2400      	movs	r4, #0
 800eb8e:	9400      	str	r4, [sp, #0]
 800eb90:	f000 fe42 	bl	800f818 <xQueueGenericCreateStatic>
 800eb94:	4603      	mov	r3, r0
 800eb96:	e008      	b.n	800ebaa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6818      	ldr	r0, [r3, #0]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	4619      	mov	r1, r3
 800eba4:	f000 feb0 	bl	800f908 <xQueueGenericCreate>
 800eba8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	370c      	adds	r7, #12
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd90      	pop	{r4, r7, pc}
	...

0800ebb4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b086      	sub	sp, #24
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d101      	bne.n	800ebd2 <osMessagePut+0x1e>
    ticks = 1;
 800ebce:	2301      	movs	r3, #1
 800ebd0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ebd2:	f7ff fdcc 	bl	800e76e <inHandlerMode>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d018      	beq.n	800ec0e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ebdc:	f107 0210 	add.w	r2, r7, #16
 800ebe0:	f107 0108 	add.w	r1, r7, #8
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f001 f832 	bl	800fc50 <xQueueGenericSendFromISR>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d001      	beq.n	800ebf6 <osMessagePut+0x42>
      return osErrorOS;
 800ebf2:	23ff      	movs	r3, #255	; 0xff
 800ebf4:	e018      	b.n	800ec28 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d014      	beq.n	800ec26 <osMessagePut+0x72>
 800ebfc:	4b0c      	ldr	r3, [pc, #48]	; (800ec30 <osMessagePut+0x7c>)
 800ebfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec02:	601a      	str	r2, [r3, #0]
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	f3bf 8f6f 	isb	sy
 800ec0c:	e00b      	b.n	800ec26 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ec0e:	f107 0108 	add.w	r1, r7, #8
 800ec12:	2300      	movs	r3, #0
 800ec14:	697a      	ldr	r2, [r7, #20]
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f000 ff1c 	bl	800fa54 <xQueueGenericSend>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d001      	beq.n	800ec26 <osMessagePut+0x72>
      return osErrorOS;
 800ec22:	23ff      	movs	r3, #255	; 0xff
 800ec24:	e000      	b.n	800ec28 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ec26:	2300      	movs	r3, #0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3718      	adds	r7, #24
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	e000ed04 	.word	0xe000ed04

0800ec34 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ec34:	b590      	push	{r4, r7, lr}
 800ec36:	b08b      	sub	sp, #44	; 0x2c
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ec44:	2300      	movs	r3, #0
 800ec46:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d10a      	bne.n	800ec64 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ec4e:	2380      	movs	r3, #128	; 0x80
 800ec50:	617b      	str	r3, [r7, #20]
    return event;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	461c      	mov	r4, r3
 800ec56:	f107 0314 	add.w	r3, r7, #20
 800ec5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ec5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ec62:	e054      	b.n	800ed0e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ec64:	2300      	movs	r3, #0
 800ec66:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec72:	d103      	bne.n	800ec7c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ec74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec78:	627b      	str	r3, [r7, #36]	; 0x24
 800ec7a:	e009      	b.n	800ec90 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d006      	beq.n	800ec90 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ec86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d101      	bne.n	800ec90 <osMessageGet+0x5c>
      ticks = 1;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ec90:	f7ff fd6d 	bl	800e76e <inHandlerMode>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d01c      	beq.n	800ecd4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ec9a:	f107 0220 	add.w	r2, r7, #32
 800ec9e:	f107 0314 	add.w	r3, r7, #20
 800eca2:	3304      	adds	r3, #4
 800eca4:	4619      	mov	r1, r3
 800eca6:	68b8      	ldr	r0, [r7, #8]
 800eca8:	f001 fae6 	bl	8010278 <xQueueReceiveFromISR>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d102      	bne.n	800ecb8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ecb2:	2310      	movs	r3, #16
 800ecb4:	617b      	str	r3, [r7, #20]
 800ecb6:	e001      	b.n	800ecbc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ecbc:	6a3b      	ldr	r3, [r7, #32]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d01d      	beq.n	800ecfe <osMessageGet+0xca>
 800ecc2:	4b15      	ldr	r3, [pc, #84]	; (800ed18 <osMessageGet+0xe4>)
 800ecc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	f3bf 8f4f 	dsb	sy
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	e014      	b.n	800ecfe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ecd4:	f107 0314 	add.w	r3, r7, #20
 800ecd8:	3304      	adds	r3, #4
 800ecda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecdc:	4619      	mov	r1, r3
 800ecde:	68b8      	ldr	r0, [r7, #8]
 800ece0:	f001 f8de 	bl	800fea0 <xQueueReceive>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d102      	bne.n	800ecf0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ecea:	2310      	movs	r3, #16
 800ecec:	617b      	str	r3, [r7, #20]
 800ecee:	e006      	b.n	800ecfe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d101      	bne.n	800ecfa <osMessageGet+0xc6>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	e000      	b.n	800ecfc <osMessageGet+0xc8>
 800ecfa:	2340      	movs	r3, #64	; 0x40
 800ecfc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	461c      	mov	r4, r3
 800ed02:	f107 0314 	add.w	r3, r7, #20
 800ed06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ed0e:	68f8      	ldr	r0, [r7, #12]
 800ed10:	372c      	adds	r7, #44	; 0x2c
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd90      	pop	{r4, r7, pc}
 800ed16:	bf00      	nop
 800ed18:	e000ed04 	.word	0xe000ed04

0800ed1c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ed24:	f7ff fd23 	bl	800e76e <inHandlerMode>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d004      	beq.n	800ed38 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f001 fb40 	bl	80103b4 <uxQueueMessagesWaitingFromISR>
 800ed34:	4603      	mov	r3, r0
 800ed36:	e003      	b.n	800ed40 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f001 fb1d 	bl	8010378 <uxQueueMessagesWaiting>
 800ed3e:	4603      	mov	r3, r0
  }
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ed50:	f7ff fd0d 	bl	800e76e <inHandlerMode>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d001      	beq.n	800ed5e <osMessageDelete+0x16>
    return osErrorISR;
 800ed5a:	2382      	movs	r3, #130	; 0x82
 800ed5c:	e003      	b.n	800ed66 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f001 fb46 	bl	80103f0 <vQueueDelete>

  return osOK; 
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3708      	adds	r7, #8
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
	...

0800ed70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b08a      	sub	sp, #40	; 0x28
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ed7c:	f001 ff86 	bl	8010c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ed80:	4b5b      	ldr	r3, [pc, #364]	; (800eef0 <pvPortMalloc+0x180>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d101      	bne.n	800ed8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ed88:	f000 f920 	bl	800efcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ed8c:	4b59      	ldr	r3, [pc, #356]	; (800eef4 <pvPortMalloc+0x184>)
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4013      	ands	r3, r2
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f040 8093 	bne.w	800eec0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d01d      	beq.n	800eddc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eda0:	2208      	movs	r2, #8
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4413      	add	r3, r2
 800eda6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f003 0307 	and.w	r3, r3, #7
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d014      	beq.n	800eddc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f023 0307 	bic.w	r3, r3, #7
 800edb8:	3308      	adds	r3, #8
 800edba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f003 0307 	and.w	r3, r3, #7
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00a      	beq.n	800eddc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800edc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edca:	f383 8811 	msr	BASEPRI, r3
 800edce:	f3bf 8f6f 	isb	sy
 800edd2:	f3bf 8f4f 	dsb	sy
 800edd6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800edd8:	bf00      	nop
 800edda:	e7fe      	b.n	800edda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d06e      	beq.n	800eec0 <pvPortMalloc+0x150>
 800ede2:	4b45      	ldr	r3, [pc, #276]	; (800eef8 <pvPortMalloc+0x188>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d869      	bhi.n	800eec0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800edec:	4b43      	ldr	r3, [pc, #268]	; (800eefc <pvPortMalloc+0x18c>)
 800edee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800edf0:	4b42      	ldr	r3, [pc, #264]	; (800eefc <pvPortMalloc+0x18c>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800edf6:	e004      	b.n	800ee02 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800edf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800edfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d903      	bls.n	800ee14 <pvPortMalloc+0xa4>
 800ee0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d1f1      	bne.n	800edf8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ee14:	4b36      	ldr	r3, [pc, #216]	; (800eef0 <pvPortMalloc+0x180>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d050      	beq.n	800eec0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ee1e:	6a3b      	ldr	r3, [r7, #32]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	2208      	movs	r2, #8
 800ee24:	4413      	add	r3, r2
 800ee26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ee28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	6a3b      	ldr	r3, [r7, #32]
 800ee2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ee30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee32:	685a      	ldr	r2, [r3, #4]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	1ad2      	subs	r2, r2, r3
 800ee38:	2308      	movs	r3, #8
 800ee3a:	005b      	lsls	r3, r3, #1
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d91f      	bls.n	800ee80 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ee40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4413      	add	r3, r2
 800ee46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	f003 0307 	and.w	r3, r3, #7
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00a      	beq.n	800ee68 <pvPortMalloc+0xf8>
	__asm volatile
 800ee52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee56:	f383 8811 	msr	BASEPRI, r3
 800ee5a:	f3bf 8f6f 	isb	sy
 800ee5e:	f3bf 8f4f 	dsb	sy
 800ee62:	613b      	str	r3, [r7, #16]
}
 800ee64:	bf00      	nop
 800ee66:	e7fe      	b.n	800ee66 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ee68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6a:	685a      	ldr	r2, [r3, #4]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	1ad2      	subs	r2, r2, r3
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ee74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee76:	687a      	ldr	r2, [r7, #4]
 800ee78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ee7a:	69b8      	ldr	r0, [r7, #24]
 800ee7c:	f000 f908 	bl	800f090 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ee80:	4b1d      	ldr	r3, [pc, #116]	; (800eef8 <pvPortMalloc+0x188>)
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	4a1b      	ldr	r2, [pc, #108]	; (800eef8 <pvPortMalloc+0x188>)
 800ee8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ee8e:	4b1a      	ldr	r3, [pc, #104]	; (800eef8 <pvPortMalloc+0x188>)
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	4b1b      	ldr	r3, [pc, #108]	; (800ef00 <pvPortMalloc+0x190>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d203      	bcs.n	800eea2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ee9a:	4b17      	ldr	r3, [pc, #92]	; (800eef8 <pvPortMalloc+0x188>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a18      	ldr	r2, [pc, #96]	; (800ef00 <pvPortMalloc+0x190>)
 800eea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea4:	685a      	ldr	r2, [r3, #4]
 800eea6:	4b13      	ldr	r3, [pc, #76]	; (800eef4 <pvPortMalloc+0x184>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	431a      	orrs	r2, r3
 800eeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eeb6:	4b13      	ldr	r3, [pc, #76]	; (800ef04 <pvPortMalloc+0x194>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	3301      	adds	r3, #1
 800eebc:	4a11      	ldr	r2, [pc, #68]	; (800ef04 <pvPortMalloc+0x194>)
 800eebe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eec0:	f001 fef2 	bl	8010ca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	f003 0307 	and.w	r3, r3, #7
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00a      	beq.n	800eee4 <pvPortMalloc+0x174>
	__asm volatile
 800eece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	60fb      	str	r3, [r7, #12]
}
 800eee0:	bf00      	nop
 800eee2:	e7fe      	b.n	800eee2 <pvPortMalloc+0x172>
	return pvReturn;
 800eee4:	69fb      	ldr	r3, [r7, #28]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3728      	adds	r7, #40	; 0x28
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	24008bd0 	.word	0x24008bd0
 800eef4:	24008be4 	.word	0x24008be4
 800eef8:	24008bd4 	.word	0x24008bd4
 800eefc:	24008bc8 	.word	0x24008bc8
 800ef00:	24008bd8 	.word	0x24008bd8
 800ef04:	24008bdc 	.word	0x24008bdc

0800ef08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b086      	sub	sp, #24
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d04d      	beq.n	800efb6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ef1a:	2308      	movs	r3, #8
 800ef1c:	425b      	negs	r3, r3
 800ef1e:	697a      	ldr	r2, [r7, #20]
 800ef20:	4413      	add	r3, r2
 800ef22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	4b24      	ldr	r3, [pc, #144]	; (800efc0 <vPortFree+0xb8>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4013      	ands	r3, r2
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d10a      	bne.n	800ef4c <vPortFree+0x44>
	__asm volatile
 800ef36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef3a:	f383 8811 	msr	BASEPRI, r3
 800ef3e:	f3bf 8f6f 	isb	sy
 800ef42:	f3bf 8f4f 	dsb	sy
 800ef46:	60fb      	str	r3, [r7, #12]
}
 800ef48:	bf00      	nop
 800ef4a:	e7fe      	b.n	800ef4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00a      	beq.n	800ef6a <vPortFree+0x62>
	__asm volatile
 800ef54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef58:	f383 8811 	msr	BASEPRI, r3
 800ef5c:	f3bf 8f6f 	isb	sy
 800ef60:	f3bf 8f4f 	dsb	sy
 800ef64:	60bb      	str	r3, [r7, #8]
}
 800ef66:	bf00      	nop
 800ef68:	e7fe      	b.n	800ef68 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	685a      	ldr	r2, [r3, #4]
 800ef6e:	4b14      	ldr	r3, [pc, #80]	; (800efc0 <vPortFree+0xb8>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4013      	ands	r3, r2
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d01e      	beq.n	800efb6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d11a      	bne.n	800efb6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	685a      	ldr	r2, [r3, #4]
 800ef84:	4b0e      	ldr	r3, [pc, #56]	; (800efc0 <vPortFree+0xb8>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	43db      	mvns	r3, r3
 800ef8a:	401a      	ands	r2, r3
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ef90:	f001 fe7c 	bl	8010c8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	685a      	ldr	r2, [r3, #4]
 800ef98:	4b0a      	ldr	r3, [pc, #40]	; (800efc4 <vPortFree+0xbc>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4413      	add	r3, r2
 800ef9e:	4a09      	ldr	r2, [pc, #36]	; (800efc4 <vPortFree+0xbc>)
 800efa0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800efa2:	6938      	ldr	r0, [r7, #16]
 800efa4:	f000 f874 	bl	800f090 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800efa8:	4b07      	ldr	r3, [pc, #28]	; (800efc8 <vPortFree+0xc0>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	3301      	adds	r3, #1
 800efae:	4a06      	ldr	r2, [pc, #24]	; (800efc8 <vPortFree+0xc0>)
 800efb0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800efb2:	f001 fe79 	bl	8010ca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800efb6:	bf00      	nop
 800efb8:	3718      	adds	r7, #24
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	24008be4 	.word	0x24008be4
 800efc4:	24008bd4 	.word	0x24008bd4
 800efc8:	24008be0 	.word	0x24008be0

0800efcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800efcc:	b480      	push	{r7}
 800efce:	b085      	sub	sp, #20
 800efd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800efd2:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800efd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800efd8:	4b27      	ldr	r3, [pc, #156]	; (800f078 <prvHeapInit+0xac>)
 800efda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f003 0307 	and.w	r3, r3, #7
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00c      	beq.n	800f000 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	3307      	adds	r3, #7
 800efea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f023 0307 	bic.w	r3, r3, #7
 800eff2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eff4:	68ba      	ldr	r2, [r7, #8]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	1ad3      	subs	r3, r2, r3
 800effa:	4a1f      	ldr	r2, [pc, #124]	; (800f078 <prvHeapInit+0xac>)
 800effc:	4413      	add	r3, r2
 800effe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f004:	4a1d      	ldr	r2, [pc, #116]	; (800f07c <prvHeapInit+0xb0>)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f00a:	4b1c      	ldr	r3, [pc, #112]	; (800f07c <prvHeapInit+0xb0>)
 800f00c:	2200      	movs	r2, #0
 800f00e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	68ba      	ldr	r2, [r7, #8]
 800f014:	4413      	add	r3, r2
 800f016:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f018:	2208      	movs	r2, #8
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	1a9b      	subs	r3, r3, r2
 800f01e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f023 0307 	bic.w	r3, r3, #7
 800f026:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	4a15      	ldr	r2, [pc, #84]	; (800f080 <prvHeapInit+0xb4>)
 800f02c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f02e:	4b14      	ldr	r3, [pc, #80]	; (800f080 <prvHeapInit+0xb4>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2200      	movs	r2, #0
 800f034:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f036:	4b12      	ldr	r3, [pc, #72]	; (800f080 <prvHeapInit+0xb4>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2200      	movs	r2, #0
 800f03c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	1ad2      	subs	r2, r2, r3
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f04c:	4b0c      	ldr	r3, [pc, #48]	; (800f080 <prvHeapInit+0xb4>)
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	4a0a      	ldr	r2, [pc, #40]	; (800f084 <prvHeapInit+0xb8>)
 800f05a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	4a09      	ldr	r2, [pc, #36]	; (800f088 <prvHeapInit+0xbc>)
 800f062:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f064:	4b09      	ldr	r3, [pc, #36]	; (800f08c <prvHeapInit+0xc0>)
 800f066:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f06a:	601a      	str	r2, [r3, #0]
}
 800f06c:	bf00      	nop
 800f06e:	3714      	adds	r7, #20
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr
 800f078:	240013c8 	.word	0x240013c8
 800f07c:	24008bc8 	.word	0x24008bc8
 800f080:	24008bd0 	.word	0x24008bd0
 800f084:	24008bd8 	.word	0x24008bd8
 800f088:	24008bd4 	.word	0x24008bd4
 800f08c:	24008be4 	.word	0x24008be4

0800f090 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f090:	b480      	push	{r7}
 800f092:	b085      	sub	sp, #20
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f098:	4b28      	ldr	r3, [pc, #160]	; (800f13c <prvInsertBlockIntoFreeList+0xac>)
 800f09a:	60fb      	str	r3, [r7, #12]
 800f09c:	e002      	b.n	800f0a4 <prvInsertBlockIntoFreeList+0x14>
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	60fb      	str	r3, [r7, #12]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d8f7      	bhi.n	800f09e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	68ba      	ldr	r2, [r7, #8]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d108      	bne.n	800f0d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	685a      	ldr	r2, [r3, #4]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	441a      	add	r2, r3
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	68ba      	ldr	r2, [r7, #8]
 800f0dc:	441a      	add	r2, r3
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d118      	bne.n	800f118 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	4b15      	ldr	r3, [pc, #84]	; (800f140 <prvInsertBlockIntoFreeList+0xb0>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d00d      	beq.n	800f10e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	685a      	ldr	r2, [r3, #4]
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	441a      	add	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	681a      	ldr	r2, [r3, #0]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	601a      	str	r2, [r3, #0]
 800f10c:	e008      	b.n	800f120 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f10e:	4b0c      	ldr	r3, [pc, #48]	; (800f140 <prvInsertBlockIntoFreeList+0xb0>)
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	601a      	str	r2, [r3, #0]
 800f116:	e003      	b.n	800f120 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	429a      	cmp	r2, r3
 800f126:	d002      	beq.n	800f12e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f12e:	bf00      	nop
 800f130:	3714      	adds	r7, #20
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	24008bc8 	.word	0x24008bc8
 800f140:	24008bd0 	.word	0x24008bd0

0800f144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f103 0208 	add.w	r2, r3, #8
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f15c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f103 0208 	add.w	r2, r3, #8
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f103 0208 	add.w	r2, r3, #8
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2200      	movs	r2, #0
 800f176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f192:	bf00      	nop
 800f194:	370c      	adds	r7, #12
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr

0800f19e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f19e:	b480      	push	{r7}
 800f1a0:	b085      	sub	sp, #20
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
 800f1a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	689a      	ldr	r2, [r3, #8]
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	683a      	ldr	r2, [r7, #0]
 800f1c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	1c5a      	adds	r2, r3, #1
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	601a      	str	r2, [r3, #0]
}
 800f1da:	bf00      	nop
 800f1dc:	3714      	adds	r7, #20
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e4:	4770      	bx	lr

0800f1e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f1e6:	b480      	push	{r7}
 800f1e8:	b085      	sub	sp, #20
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	6078      	str	r0, [r7, #4]
 800f1ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1fc:	d103      	bne.n	800f206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	691b      	ldr	r3, [r3, #16]
 800f202:	60fb      	str	r3, [r7, #12]
 800f204:	e00c      	b.n	800f220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	3308      	adds	r3, #8
 800f20a:	60fb      	str	r3, [r7, #12]
 800f20c:	e002      	b.n	800f214 <vListInsert+0x2e>
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	60fb      	str	r3, [r7, #12]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	68ba      	ldr	r2, [r7, #8]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d2f6      	bcs.n	800f20e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	685a      	ldr	r2, [r3, #4]
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	683a      	ldr	r2, [r7, #0]
 800f22e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	683a      	ldr	r2, [r7, #0]
 800f23a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	1c5a      	adds	r2, r3, #1
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	601a      	str	r2, [r3, #0]
}
 800f24c:	bf00      	nop
 800f24e:	3714      	adds	r7, #20
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr

0800f258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f258:	b480      	push	{r7}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	691b      	ldr	r3, [r3, #16]
 800f264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	685b      	ldr	r3, [r3, #4]
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	6892      	ldr	r2, [r2, #8]
 800f26e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	687a      	ldr	r2, [r7, #4]
 800f276:	6852      	ldr	r2, [r2, #4]
 800f278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	429a      	cmp	r2, r3
 800f282:	d103      	bne.n	800f28c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	689a      	ldr	r2, [r3, #8]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	1e5a      	subs	r2, r3, #1
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3714      	adds	r7, #20
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b085      	sub	sp, #20
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	3b04      	subs	r3, #4
 800f2bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f2c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	3b04      	subs	r3, #4
 800f2ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	f023 0201 	bic.w	r2, r3, #1
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	3b04      	subs	r3, #4
 800f2da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f2dc:	4a0c      	ldr	r2, [pc, #48]	; (800f310 <pxPortInitialiseStack+0x64>)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	3b14      	subs	r3, #20
 800f2e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	3b04      	subs	r3, #4
 800f2f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f06f 0202 	mvn.w	r2, #2
 800f2fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	3b20      	subs	r3, #32
 800f300:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f302:	68fb      	ldr	r3, [r7, #12]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3714      	adds	r7, #20
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr
 800f310:	0800f315 	.word	0x0800f315

0800f314 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f314:	b480      	push	{r7}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f31a:	2300      	movs	r3, #0
 800f31c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f31e:	4b12      	ldr	r3, [pc, #72]	; (800f368 <prvTaskExitError+0x54>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f326:	d00a      	beq.n	800f33e <prvTaskExitError+0x2a>
	__asm volatile
 800f328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32c:	f383 8811 	msr	BASEPRI, r3
 800f330:	f3bf 8f6f 	isb	sy
 800f334:	f3bf 8f4f 	dsb	sy
 800f338:	60fb      	str	r3, [r7, #12]
}
 800f33a:	bf00      	nop
 800f33c:	e7fe      	b.n	800f33c <prvTaskExitError+0x28>
	__asm volatile
 800f33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f342:	f383 8811 	msr	BASEPRI, r3
 800f346:	f3bf 8f6f 	isb	sy
 800f34a:	f3bf 8f4f 	dsb	sy
 800f34e:	60bb      	str	r3, [r7, #8]
}
 800f350:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f352:	bf00      	nop
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d0fc      	beq.n	800f354 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f35a:	bf00      	nop
 800f35c:	bf00      	nop
 800f35e:	3714      	adds	r7, #20
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr
 800f368:	24000024 	.word	0x24000024
 800f36c:	00000000 	.word	0x00000000

0800f370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f370:	4b07      	ldr	r3, [pc, #28]	; (800f390 <pxCurrentTCBConst2>)
 800f372:	6819      	ldr	r1, [r3, #0]
 800f374:	6808      	ldr	r0, [r1, #0]
 800f376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f37a:	f380 8809 	msr	PSP, r0
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f04f 0000 	mov.w	r0, #0
 800f386:	f380 8811 	msr	BASEPRI, r0
 800f38a:	4770      	bx	lr
 800f38c:	f3af 8000 	nop.w

0800f390 <pxCurrentTCBConst2>:
 800f390:	24008c30 	.word	0x24008c30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f394:	bf00      	nop
 800f396:	bf00      	nop

0800f398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f398:	4808      	ldr	r0, [pc, #32]	; (800f3bc <prvPortStartFirstTask+0x24>)
 800f39a:	6800      	ldr	r0, [r0, #0]
 800f39c:	6800      	ldr	r0, [r0, #0]
 800f39e:	f380 8808 	msr	MSP, r0
 800f3a2:	f04f 0000 	mov.w	r0, #0
 800f3a6:	f380 8814 	msr	CONTROL, r0
 800f3aa:	b662      	cpsie	i
 800f3ac:	b661      	cpsie	f
 800f3ae:	f3bf 8f4f 	dsb	sy
 800f3b2:	f3bf 8f6f 	isb	sy
 800f3b6:	df00      	svc	0
 800f3b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f3ba:	bf00      	nop
 800f3bc:	e000ed08 	.word	0xe000ed08

0800f3c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b086      	sub	sp, #24
 800f3c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f3c6:	4b46      	ldr	r3, [pc, #280]	; (800f4e0 <xPortStartScheduler+0x120>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4a46      	ldr	r2, [pc, #280]	; (800f4e4 <xPortStartScheduler+0x124>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d10a      	bne.n	800f3e6 <xPortStartScheduler+0x26>
	__asm volatile
 800f3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d4:	f383 8811 	msr	BASEPRI, r3
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	613b      	str	r3, [r7, #16]
}
 800f3e2:	bf00      	nop
 800f3e4:	e7fe      	b.n	800f3e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f3e6:	4b3e      	ldr	r3, [pc, #248]	; (800f4e0 <xPortStartScheduler+0x120>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	4a3f      	ldr	r2, [pc, #252]	; (800f4e8 <xPortStartScheduler+0x128>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d10a      	bne.n	800f406 <xPortStartScheduler+0x46>
	__asm volatile
 800f3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f4:	f383 8811 	msr	BASEPRI, r3
 800f3f8:	f3bf 8f6f 	isb	sy
 800f3fc:	f3bf 8f4f 	dsb	sy
 800f400:	60fb      	str	r3, [r7, #12]
}
 800f402:	bf00      	nop
 800f404:	e7fe      	b.n	800f404 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f406:	4b39      	ldr	r3, [pc, #228]	; (800f4ec <xPortStartScheduler+0x12c>)
 800f408:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	b2db      	uxtb	r3, r3
 800f410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	22ff      	movs	r2, #255	; 0xff
 800f416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f420:	78fb      	ldrb	r3, [r7, #3]
 800f422:	b2db      	uxtb	r3, r3
 800f424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f428:	b2da      	uxtb	r2, r3
 800f42a:	4b31      	ldr	r3, [pc, #196]	; (800f4f0 <xPortStartScheduler+0x130>)
 800f42c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f42e:	4b31      	ldr	r3, [pc, #196]	; (800f4f4 <xPortStartScheduler+0x134>)
 800f430:	2207      	movs	r2, #7
 800f432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f434:	e009      	b.n	800f44a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f436:	4b2f      	ldr	r3, [pc, #188]	; (800f4f4 <xPortStartScheduler+0x134>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	3b01      	subs	r3, #1
 800f43c:	4a2d      	ldr	r2, [pc, #180]	; (800f4f4 <xPortStartScheduler+0x134>)
 800f43e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f440:	78fb      	ldrb	r3, [r7, #3]
 800f442:	b2db      	uxtb	r3, r3
 800f444:	005b      	lsls	r3, r3, #1
 800f446:	b2db      	uxtb	r3, r3
 800f448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f44a:	78fb      	ldrb	r3, [r7, #3]
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f452:	2b80      	cmp	r3, #128	; 0x80
 800f454:	d0ef      	beq.n	800f436 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f456:	4b27      	ldr	r3, [pc, #156]	; (800f4f4 <xPortStartScheduler+0x134>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	f1c3 0307 	rsb	r3, r3, #7
 800f45e:	2b04      	cmp	r3, #4
 800f460:	d00a      	beq.n	800f478 <xPortStartScheduler+0xb8>
	__asm volatile
 800f462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f466:	f383 8811 	msr	BASEPRI, r3
 800f46a:	f3bf 8f6f 	isb	sy
 800f46e:	f3bf 8f4f 	dsb	sy
 800f472:	60bb      	str	r3, [r7, #8]
}
 800f474:	bf00      	nop
 800f476:	e7fe      	b.n	800f476 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f478:	4b1e      	ldr	r3, [pc, #120]	; (800f4f4 <xPortStartScheduler+0x134>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	021b      	lsls	r3, r3, #8
 800f47e:	4a1d      	ldr	r2, [pc, #116]	; (800f4f4 <xPortStartScheduler+0x134>)
 800f480:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f482:	4b1c      	ldr	r3, [pc, #112]	; (800f4f4 <xPortStartScheduler+0x134>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f48a:	4a1a      	ldr	r2, [pc, #104]	; (800f4f4 <xPortStartScheduler+0x134>)
 800f48c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	b2da      	uxtb	r2, r3
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f496:	4b18      	ldr	r3, [pc, #96]	; (800f4f8 <xPortStartScheduler+0x138>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4a17      	ldr	r2, [pc, #92]	; (800f4f8 <xPortStartScheduler+0x138>)
 800f49c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f4a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f4a2:	4b15      	ldr	r3, [pc, #84]	; (800f4f8 <xPortStartScheduler+0x138>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4a14      	ldr	r2, [pc, #80]	; (800f4f8 <xPortStartScheduler+0x138>)
 800f4a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f4ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f4ae:	f000 f8dd 	bl	800f66c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f4b2:	4b12      	ldr	r3, [pc, #72]	; (800f4fc <xPortStartScheduler+0x13c>)
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f4b8:	f000 f8fc 	bl	800f6b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f4bc:	4b10      	ldr	r3, [pc, #64]	; (800f500 <xPortStartScheduler+0x140>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4a0f      	ldr	r2, [pc, #60]	; (800f500 <xPortStartScheduler+0x140>)
 800f4c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f4c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f4c8:	f7ff ff66 	bl	800f398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f4cc:	f001 fd62 	bl	8010f94 <vTaskSwitchContext>
	prvTaskExitError();
 800f4d0:	f7ff ff20 	bl	800f314 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3718      	adds	r7, #24
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	e000ed00 	.word	0xe000ed00
 800f4e4:	410fc271 	.word	0x410fc271
 800f4e8:	410fc270 	.word	0x410fc270
 800f4ec:	e000e400 	.word	0xe000e400
 800f4f0:	24008be8 	.word	0x24008be8
 800f4f4:	24008bec 	.word	0x24008bec
 800f4f8:	e000ed20 	.word	0xe000ed20
 800f4fc:	24000024 	.word	0x24000024
 800f500:	e000ef34 	.word	0xe000ef34

0800f504 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
	__asm volatile
 800f50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50e:	f383 8811 	msr	BASEPRI, r3
 800f512:	f3bf 8f6f 	isb	sy
 800f516:	f3bf 8f4f 	dsb	sy
 800f51a:	607b      	str	r3, [r7, #4]
}
 800f51c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f51e:	4b0f      	ldr	r3, [pc, #60]	; (800f55c <vPortEnterCritical+0x58>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3301      	adds	r3, #1
 800f524:	4a0d      	ldr	r2, [pc, #52]	; (800f55c <vPortEnterCritical+0x58>)
 800f526:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f528:	4b0c      	ldr	r3, [pc, #48]	; (800f55c <vPortEnterCritical+0x58>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d10f      	bne.n	800f550 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f530:	4b0b      	ldr	r3, [pc, #44]	; (800f560 <vPortEnterCritical+0x5c>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	b2db      	uxtb	r3, r3
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00a      	beq.n	800f550 <vPortEnterCritical+0x4c>
	__asm volatile
 800f53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f53e:	f383 8811 	msr	BASEPRI, r3
 800f542:	f3bf 8f6f 	isb	sy
 800f546:	f3bf 8f4f 	dsb	sy
 800f54a:	603b      	str	r3, [r7, #0]
}
 800f54c:	bf00      	nop
 800f54e:	e7fe      	b.n	800f54e <vPortEnterCritical+0x4a>
	}
}
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr
 800f55c:	24000024 	.word	0x24000024
 800f560:	e000ed04 	.word	0xe000ed04

0800f564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f56a:	4b12      	ldr	r3, [pc, #72]	; (800f5b4 <vPortExitCritical+0x50>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d10a      	bne.n	800f588 <vPortExitCritical+0x24>
	__asm volatile
 800f572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f576:	f383 8811 	msr	BASEPRI, r3
 800f57a:	f3bf 8f6f 	isb	sy
 800f57e:	f3bf 8f4f 	dsb	sy
 800f582:	607b      	str	r3, [r7, #4]
}
 800f584:	bf00      	nop
 800f586:	e7fe      	b.n	800f586 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f588:	4b0a      	ldr	r3, [pc, #40]	; (800f5b4 <vPortExitCritical+0x50>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	3b01      	subs	r3, #1
 800f58e:	4a09      	ldr	r2, [pc, #36]	; (800f5b4 <vPortExitCritical+0x50>)
 800f590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f592:	4b08      	ldr	r3, [pc, #32]	; (800f5b4 <vPortExitCritical+0x50>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d105      	bne.n	800f5a6 <vPortExitCritical+0x42>
 800f59a:	2300      	movs	r3, #0
 800f59c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f5a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f5a6:	bf00      	nop
 800f5a8:	370c      	adds	r7, #12
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	24000024 	.word	0x24000024
	...

0800f5c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f5c0:	f3ef 8009 	mrs	r0, PSP
 800f5c4:	f3bf 8f6f 	isb	sy
 800f5c8:	4b15      	ldr	r3, [pc, #84]	; (800f620 <pxCurrentTCBConst>)
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	f01e 0f10 	tst.w	lr, #16
 800f5d0:	bf08      	it	eq
 800f5d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f5d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5da:	6010      	str	r0, [r2, #0]
 800f5dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f5e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f5e4:	f380 8811 	msr	BASEPRI, r0
 800f5e8:	f3bf 8f4f 	dsb	sy
 800f5ec:	f3bf 8f6f 	isb	sy
 800f5f0:	f001 fcd0 	bl	8010f94 <vTaskSwitchContext>
 800f5f4:	f04f 0000 	mov.w	r0, #0
 800f5f8:	f380 8811 	msr	BASEPRI, r0
 800f5fc:	bc09      	pop	{r0, r3}
 800f5fe:	6819      	ldr	r1, [r3, #0]
 800f600:	6808      	ldr	r0, [r1, #0]
 800f602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f606:	f01e 0f10 	tst.w	lr, #16
 800f60a:	bf08      	it	eq
 800f60c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f610:	f380 8809 	msr	PSP, r0
 800f614:	f3bf 8f6f 	isb	sy
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	f3af 8000 	nop.w

0800f620 <pxCurrentTCBConst>:
 800f620:	24008c30 	.word	0x24008c30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f624:	bf00      	nop
 800f626:	bf00      	nop

0800f628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
	__asm volatile
 800f62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f632:	f383 8811 	msr	BASEPRI, r3
 800f636:	f3bf 8f6f 	isb	sy
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	607b      	str	r3, [r7, #4]
}
 800f640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f642:	f001 fbef 	bl	8010e24 <xTaskIncrementTick>
 800f646:	4603      	mov	r3, r0
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d003      	beq.n	800f654 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f64c:	4b06      	ldr	r3, [pc, #24]	; (800f668 <SysTick_Handler+0x40>)
 800f64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f652:	601a      	str	r2, [r3, #0]
 800f654:	2300      	movs	r3, #0
 800f656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	f383 8811 	msr	BASEPRI, r3
}
 800f65e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f660:	bf00      	nop
 800f662:	3708      	adds	r7, #8
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	e000ed04 	.word	0xe000ed04

0800f66c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f66c:	b480      	push	{r7}
 800f66e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f670:	4b0b      	ldr	r3, [pc, #44]	; (800f6a0 <vPortSetupTimerInterrupt+0x34>)
 800f672:	2200      	movs	r2, #0
 800f674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f676:	4b0b      	ldr	r3, [pc, #44]	; (800f6a4 <vPortSetupTimerInterrupt+0x38>)
 800f678:	2200      	movs	r2, #0
 800f67a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f67c:	4b0a      	ldr	r3, [pc, #40]	; (800f6a8 <vPortSetupTimerInterrupt+0x3c>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a0a      	ldr	r2, [pc, #40]	; (800f6ac <vPortSetupTimerInterrupt+0x40>)
 800f682:	fba2 2303 	umull	r2, r3, r2, r3
 800f686:	099b      	lsrs	r3, r3, #6
 800f688:	4a09      	ldr	r2, [pc, #36]	; (800f6b0 <vPortSetupTimerInterrupt+0x44>)
 800f68a:	3b01      	subs	r3, #1
 800f68c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f68e:	4b04      	ldr	r3, [pc, #16]	; (800f6a0 <vPortSetupTimerInterrupt+0x34>)
 800f690:	2207      	movs	r2, #7
 800f692:	601a      	str	r2, [r3, #0]
}
 800f694:	bf00      	nop
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	e000e010 	.word	0xe000e010
 800f6a4:	e000e018 	.word	0xe000e018
 800f6a8:	24000000 	.word	0x24000000
 800f6ac:	10624dd3 	.word	0x10624dd3
 800f6b0:	e000e014 	.word	0xe000e014

0800f6b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f6b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f6c4 <vPortEnableVFP+0x10>
 800f6b8:	6801      	ldr	r1, [r0, #0]
 800f6ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f6be:	6001      	str	r1, [r0, #0]
 800f6c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f6c2:	bf00      	nop
 800f6c4:	e000ed88 	.word	0xe000ed88

0800f6c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f6ce:	f3ef 8305 	mrs	r3, IPSR
 800f6d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2b0f      	cmp	r3, #15
 800f6d8:	d914      	bls.n	800f704 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f6da:	4a17      	ldr	r2, [pc, #92]	; (800f738 <vPortValidateInterruptPriority+0x70>)
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	4413      	add	r3, r2
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f6e4:	4b15      	ldr	r3, [pc, #84]	; (800f73c <vPortValidateInterruptPriority+0x74>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	7afa      	ldrb	r2, [r7, #11]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d20a      	bcs.n	800f704 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	607b      	str	r3, [r7, #4]
}
 800f700:	bf00      	nop
 800f702:	e7fe      	b.n	800f702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f704:	4b0e      	ldr	r3, [pc, #56]	; (800f740 <vPortValidateInterruptPriority+0x78>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f70c:	4b0d      	ldr	r3, [pc, #52]	; (800f744 <vPortValidateInterruptPriority+0x7c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	429a      	cmp	r2, r3
 800f712:	d90a      	bls.n	800f72a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f718:	f383 8811 	msr	BASEPRI, r3
 800f71c:	f3bf 8f6f 	isb	sy
 800f720:	f3bf 8f4f 	dsb	sy
 800f724:	603b      	str	r3, [r7, #0]
}
 800f726:	bf00      	nop
 800f728:	e7fe      	b.n	800f728 <vPortValidateInterruptPriority+0x60>
	}
 800f72a:	bf00      	nop
 800f72c:	3714      	adds	r7, #20
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop
 800f738:	e000e3f0 	.word	0xe000e3f0
 800f73c:	24008be8 	.word	0x24008be8
 800f740:	e000ed0c 	.word	0xe000ed0c
 800f744:	24008bec 	.word	0x24008bec

0800f748 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d10a      	bne.n	800f772 <xQueueGenericReset+0x2a>
	__asm volatile
 800f75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f760:	f383 8811 	msr	BASEPRI, r3
 800f764:	f3bf 8f6f 	isb	sy
 800f768:	f3bf 8f4f 	dsb	sy
 800f76c:	60bb      	str	r3, [r7, #8]
}
 800f76e:	bf00      	nop
 800f770:	e7fe      	b.n	800f770 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f772:	f7ff fec7 	bl	800f504 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f77e:	68f9      	ldr	r1, [r7, #12]
 800f780:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f782:	fb01 f303 	mul.w	r3, r1, r3
 800f786:	441a      	add	r2, r3
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2200      	movs	r2, #0
 800f790:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	68f9      	ldr	r1, [r7, #12]
 800f7a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f7a8:	fb01 f303 	mul.w	r3, r1, r3
 800f7ac:	441a      	add	r2, r3
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	22ff      	movs	r2, #255	; 0xff
 800f7b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	22ff      	movs	r2, #255	; 0xff
 800f7be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d114      	bne.n	800f7f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	691b      	ldr	r3, [r3, #16]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d01a      	beq.n	800f806 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	3310      	adds	r3, #16
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f001 fc73 	bl	80110c0 <xTaskRemoveFromEventList>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d012      	beq.n	800f806 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f7e0:	4b0c      	ldr	r3, [pc, #48]	; (800f814 <xQueueGenericReset+0xcc>)
 800f7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7e6:	601a      	str	r2, [r3, #0]
 800f7e8:	f3bf 8f4f 	dsb	sy
 800f7ec:	f3bf 8f6f 	isb	sy
 800f7f0:	e009      	b.n	800f806 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	3310      	adds	r3, #16
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7ff fca4 	bl	800f144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	3324      	adds	r3, #36	; 0x24
 800f800:	4618      	mov	r0, r3
 800f802:	f7ff fc9f 	bl	800f144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f806:	f7ff fead 	bl	800f564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f80a:	2301      	movs	r3, #1
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3710      	adds	r7, #16
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	e000ed04 	.word	0xe000ed04

0800f818 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b08e      	sub	sp, #56	; 0x38
 800f81c:	af02      	add	r7, sp, #8
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
 800f824:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10a      	bne.n	800f842 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f830:	f383 8811 	msr	BASEPRI, r3
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	f3bf 8f4f 	dsb	sy
 800f83c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f83e:	bf00      	nop
 800f840:	e7fe      	b.n	800f840 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d10a      	bne.n	800f85e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f84c:	f383 8811 	msr	BASEPRI, r3
 800f850:	f3bf 8f6f 	isb	sy
 800f854:	f3bf 8f4f 	dsb	sy
 800f858:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f85a:	bf00      	nop
 800f85c:	e7fe      	b.n	800f85c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d002      	beq.n	800f86a <xQueueGenericCreateStatic+0x52>
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d001      	beq.n	800f86e <xQueueGenericCreateStatic+0x56>
 800f86a:	2301      	movs	r3, #1
 800f86c:	e000      	b.n	800f870 <xQueueGenericCreateStatic+0x58>
 800f86e:	2300      	movs	r3, #0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d10a      	bne.n	800f88a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f878:	f383 8811 	msr	BASEPRI, r3
 800f87c:	f3bf 8f6f 	isb	sy
 800f880:	f3bf 8f4f 	dsb	sy
 800f884:	623b      	str	r3, [r7, #32]
}
 800f886:	bf00      	nop
 800f888:	e7fe      	b.n	800f888 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d102      	bne.n	800f896 <xQueueGenericCreateStatic+0x7e>
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d101      	bne.n	800f89a <xQueueGenericCreateStatic+0x82>
 800f896:	2301      	movs	r3, #1
 800f898:	e000      	b.n	800f89c <xQueueGenericCreateStatic+0x84>
 800f89a:	2300      	movs	r3, #0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d10a      	bne.n	800f8b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a4:	f383 8811 	msr	BASEPRI, r3
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	61fb      	str	r3, [r7, #28]
}
 800f8b2:	bf00      	nop
 800f8b4:	e7fe      	b.n	800f8b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f8b6:	2348      	movs	r3, #72	; 0x48
 800f8b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	2b48      	cmp	r3, #72	; 0x48
 800f8be:	d00a      	beq.n	800f8d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c4:	f383 8811 	msr	BASEPRI, r3
 800f8c8:	f3bf 8f6f 	isb	sy
 800f8cc:	f3bf 8f4f 	dsb	sy
 800f8d0:	61bb      	str	r3, [r7, #24]
}
 800f8d2:	bf00      	nop
 800f8d4:	e7fe      	b.n	800f8d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f8d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d00d      	beq.n	800f8fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f8ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f0:	9300      	str	r3, [sp, #0]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	68b9      	ldr	r1, [r7, #8]
 800f8f8:	68f8      	ldr	r0, [r7, #12]
 800f8fa:	f000 f83f 	bl	800f97c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f900:	4618      	mov	r0, r3
 800f902:	3730      	adds	r7, #48	; 0x30
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b08a      	sub	sp, #40	; 0x28
 800f90c:	af02      	add	r7, sp, #8
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	4613      	mov	r3, r2
 800f914:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d10a      	bne.n	800f932 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f920:	f383 8811 	msr	BASEPRI, r3
 800f924:	f3bf 8f6f 	isb	sy
 800f928:	f3bf 8f4f 	dsb	sy
 800f92c:	613b      	str	r3, [r7, #16]
}
 800f92e:	bf00      	nop
 800f930:	e7fe      	b.n	800f930 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	68ba      	ldr	r2, [r7, #8]
 800f936:	fb02 f303 	mul.w	r3, r2, r3
 800f93a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	3348      	adds	r3, #72	; 0x48
 800f940:	4618      	mov	r0, r3
 800f942:	f7ff fa15 	bl	800ed70 <pvPortMalloc>
 800f946:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f948:	69bb      	ldr	r3, [r7, #24]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d011      	beq.n	800f972 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	3348      	adds	r3, #72	; 0x48
 800f956:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f960:	79fa      	ldrb	r2, [r7, #7]
 800f962:	69bb      	ldr	r3, [r7, #24]
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	4613      	mov	r3, r2
 800f968:	697a      	ldr	r2, [r7, #20]
 800f96a:	68b9      	ldr	r1, [r7, #8]
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f000 f805 	bl	800f97c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f972:	69bb      	ldr	r3, [r7, #24]
	}
 800f974:	4618      	mov	r0, r3
 800f976:	3720      	adds	r7, #32
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
 800f988:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d103      	bne.n	800f998 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	69ba      	ldr	r2, [r7, #24]
 800f994:	601a      	str	r2, [r3, #0]
 800f996:	e002      	b.n	800f99e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	68fa      	ldr	r2, [r7, #12]
 800f9a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f9a4:	69bb      	ldr	r3, [r7, #24]
 800f9a6:	68ba      	ldr	r2, [r7, #8]
 800f9a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f9aa:	2101      	movs	r1, #1
 800f9ac:	69b8      	ldr	r0, [r7, #24]
 800f9ae:	f7ff fecb 	bl	800f748 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f9b2:	bf00      	nop
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b082      	sub	sp, #8
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d00e      	beq.n	800f9e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f9da:	2300      	movs	r3, #0
 800f9dc:	2200      	movs	r2, #0
 800f9de:	2100      	movs	r1, #0
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f000 f837 	bl	800fa54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f9e6:	bf00      	nop
 800f9e8:	3708      	adds	r7, #8
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}

0800f9ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f9ee:	b580      	push	{r7, lr}
 800f9f0:	b086      	sub	sp, #24
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	617b      	str	r3, [r7, #20]
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fa00:	79fb      	ldrb	r3, [r7, #7]
 800fa02:	461a      	mov	r2, r3
 800fa04:	6939      	ldr	r1, [r7, #16]
 800fa06:	6978      	ldr	r0, [r7, #20]
 800fa08:	f7ff ff7e 	bl	800f908 <xQueueGenericCreate>
 800fa0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f7ff ffd3 	bl	800f9ba <prvInitialiseMutex>

		return xNewQueue;
 800fa14:	68fb      	ldr	r3, [r7, #12]
	}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3718      	adds	r7, #24
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}

0800fa1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fa1e:	b580      	push	{r7, lr}
 800fa20:	b088      	sub	sp, #32
 800fa22:	af02      	add	r7, sp, #8
 800fa24:	4603      	mov	r3, r0
 800fa26:	6039      	str	r1, [r7, #0]
 800fa28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	617b      	str	r3, [r7, #20]
 800fa2e:	2300      	movs	r3, #0
 800fa30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fa32:	79fb      	ldrb	r3, [r7, #7]
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	6939      	ldr	r1, [r7, #16]
 800fa3c:	6978      	ldr	r0, [r7, #20]
 800fa3e:	f7ff feeb 	bl	800f818 <xQueueGenericCreateStatic>
 800fa42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f7ff ffb8 	bl	800f9ba <prvInitialiseMutex>

		return xNewQueue;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
	}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3718      	adds	r7, #24
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08e      	sub	sp, #56	; 0x38
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	607a      	str	r2, [r7, #4]
 800fa60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fa62:	2300      	movs	r3, #0
 800fa64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10a      	bne.n	800fa86 <xQueueGenericSend+0x32>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fa82:	bf00      	nop
 800fa84:	e7fe      	b.n	800fa84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d103      	bne.n	800fa94 <xQueueGenericSend+0x40>
 800fa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d101      	bne.n	800fa98 <xQueueGenericSend+0x44>
 800fa94:	2301      	movs	r3, #1
 800fa96:	e000      	b.n	800fa9a <xQueueGenericSend+0x46>
 800fa98:	2300      	movs	r3, #0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d10a      	bne.n	800fab4 <xQueueGenericSend+0x60>
	__asm volatile
 800fa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa2:	f383 8811 	msr	BASEPRI, r3
 800faa6:	f3bf 8f6f 	isb	sy
 800faaa:	f3bf 8f4f 	dsb	sy
 800faae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fab0:	bf00      	nop
 800fab2:	e7fe      	b.n	800fab2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	2b02      	cmp	r3, #2
 800fab8:	d103      	bne.n	800fac2 <xQueueGenericSend+0x6e>
 800faba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fabc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d101      	bne.n	800fac6 <xQueueGenericSend+0x72>
 800fac2:	2301      	movs	r3, #1
 800fac4:	e000      	b.n	800fac8 <xQueueGenericSend+0x74>
 800fac6:	2300      	movs	r3, #0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10a      	bne.n	800fae2 <xQueueGenericSend+0x8e>
	__asm volatile
 800facc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad0:	f383 8811 	msr	BASEPRI, r3
 800fad4:	f3bf 8f6f 	isb	sy
 800fad8:	f3bf 8f4f 	dsb	sy
 800fadc:	623b      	str	r3, [r7, #32]
}
 800fade:	bf00      	nop
 800fae0:	e7fe      	b.n	800fae0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fae2:	f001 fcad 	bl	8011440 <xTaskGetSchedulerState>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d102      	bne.n	800faf2 <xQueueGenericSend+0x9e>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d101      	bne.n	800faf6 <xQueueGenericSend+0xa2>
 800faf2:	2301      	movs	r3, #1
 800faf4:	e000      	b.n	800faf8 <xQueueGenericSend+0xa4>
 800faf6:	2300      	movs	r3, #0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d10a      	bne.n	800fb12 <xQueueGenericSend+0xbe>
	__asm volatile
 800fafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb00:	f383 8811 	msr	BASEPRI, r3
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	61fb      	str	r3, [r7, #28]
}
 800fb0e:	bf00      	nop
 800fb10:	e7fe      	b.n	800fb10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb12:	f7ff fcf7 	bl	800f504 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d302      	bcc.n	800fb28 <xQueueGenericSend+0xd4>
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	d129      	bne.n	800fb7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb28:	683a      	ldr	r2, [r7, #0]
 800fb2a:	68b9      	ldr	r1, [r7, #8]
 800fb2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb2e:	f000 fc9a 	bl	8010466 <prvCopyDataToQueue>
 800fb32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d010      	beq.n	800fb5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3e:	3324      	adds	r3, #36	; 0x24
 800fb40:	4618      	mov	r0, r3
 800fb42:	f001 fabd 	bl	80110c0 <xTaskRemoveFromEventList>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d013      	beq.n	800fb74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fb4c:	4b3f      	ldr	r3, [pc, #252]	; (800fc4c <xQueueGenericSend+0x1f8>)
 800fb4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb52:	601a      	str	r2, [r3, #0]
 800fb54:	f3bf 8f4f 	dsb	sy
 800fb58:	f3bf 8f6f 	isb	sy
 800fb5c:	e00a      	b.n	800fb74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d007      	beq.n	800fb74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fb64:	4b39      	ldr	r3, [pc, #228]	; (800fc4c <xQueueGenericSend+0x1f8>)
 800fb66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb6a:	601a      	str	r2, [r3, #0]
 800fb6c:	f3bf 8f4f 	dsb	sy
 800fb70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fb74:	f7ff fcf6 	bl	800f564 <vPortExitCritical>
				return pdPASS;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	e063      	b.n	800fc44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d103      	bne.n	800fb8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb82:	f7ff fcef 	bl	800f564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fb86:	2300      	movs	r3, #0
 800fb88:	e05c      	b.n	800fc44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d106      	bne.n	800fb9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb90:	f107 0314 	add.w	r3, r7, #20
 800fb94:	4618      	mov	r0, r3
 800fb96:	f001 faf5 	bl	8011184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb9e:	f7ff fce1 	bl	800f564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fba2:	f001 f873 	bl	8010c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fba6:	f7ff fcad 	bl	800f504 <vPortEnterCritical>
 800fbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fbb0:	b25b      	sxtb	r3, r3
 800fbb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbb6:	d103      	bne.n	800fbc0 <xQueueGenericSend+0x16c>
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbc6:	b25b      	sxtb	r3, r3
 800fbc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbcc:	d103      	bne.n	800fbd6 <xQueueGenericSend+0x182>
 800fbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbd6:	f7ff fcc5 	bl	800f564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbda:	1d3a      	adds	r2, r7, #4
 800fbdc:	f107 0314 	add.w	r3, r7, #20
 800fbe0:	4611      	mov	r1, r2
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f001 fae4 	bl	80111b0 <xTaskCheckForTimeOut>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d124      	bne.n	800fc38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fbee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbf0:	f000 fd31 	bl	8010656 <prvIsQueueFull>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d018      	beq.n	800fc2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfc:	3310      	adds	r3, #16
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	4611      	mov	r1, r2
 800fc02:	4618      	mov	r0, r3
 800fc04:	f001 fa38 	bl	8011078 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fc08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc0a:	f000 fcbc 	bl	8010586 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fc0e:	f001 f84b 	bl	8010ca8 <xTaskResumeAll>
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	f47f af7c 	bne.w	800fb12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fc1a:	4b0c      	ldr	r3, [pc, #48]	; (800fc4c <xQueueGenericSend+0x1f8>)
 800fc1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc20:	601a      	str	r2, [r3, #0]
 800fc22:	f3bf 8f4f 	dsb	sy
 800fc26:	f3bf 8f6f 	isb	sy
 800fc2a:	e772      	b.n	800fb12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fc2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc2e:	f000 fcaa 	bl	8010586 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc32:	f001 f839 	bl	8010ca8 <xTaskResumeAll>
 800fc36:	e76c      	b.n	800fb12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fc38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc3a:	f000 fca4 	bl	8010586 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc3e:	f001 f833 	bl	8010ca8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fc42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3738      	adds	r7, #56	; 0x38
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	e000ed04 	.word	0xe000ed04

0800fc50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b090      	sub	sp, #64	; 0x40
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	60b9      	str	r1, [r7, #8]
 800fc5a:	607a      	str	r2, [r7, #4]
 800fc5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d10a      	bne.n	800fc7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc6c:	f383 8811 	msr	BASEPRI, r3
 800fc70:	f3bf 8f6f 	isb	sy
 800fc74:	f3bf 8f4f 	dsb	sy
 800fc78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fc7a:	bf00      	nop
 800fc7c:	e7fe      	b.n	800fc7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d103      	bne.n	800fc8c <xQueueGenericSendFromISR+0x3c>
 800fc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d101      	bne.n	800fc90 <xQueueGenericSendFromISR+0x40>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	e000      	b.n	800fc92 <xQueueGenericSendFromISR+0x42>
 800fc90:	2300      	movs	r3, #0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d10a      	bne.n	800fcac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc9a:	f383 8811 	msr	BASEPRI, r3
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f3bf 8f4f 	dsb	sy
 800fca6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fca8:	bf00      	nop
 800fcaa:	e7fe      	b.n	800fcaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d103      	bne.n	800fcba <xQueueGenericSendFromISR+0x6a>
 800fcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d101      	bne.n	800fcbe <xQueueGenericSendFromISR+0x6e>
 800fcba:	2301      	movs	r3, #1
 800fcbc:	e000      	b.n	800fcc0 <xQueueGenericSendFromISR+0x70>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d10a      	bne.n	800fcda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc8:	f383 8811 	msr	BASEPRI, r3
 800fccc:	f3bf 8f6f 	isb	sy
 800fcd0:	f3bf 8f4f 	dsb	sy
 800fcd4:	623b      	str	r3, [r7, #32]
}
 800fcd6:	bf00      	nop
 800fcd8:	e7fe      	b.n	800fcd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcda:	f7ff fcf5 	bl	800f6c8 <vPortValidateInterruptPriority>
	__asm volatile
 800fcde:	f3ef 8211 	mrs	r2, BASEPRI
 800fce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce6:	f383 8811 	msr	BASEPRI, r3
 800fcea:	f3bf 8f6f 	isb	sy
 800fcee:	f3bf 8f4f 	dsb	sy
 800fcf2:	61fa      	str	r2, [r7, #28]
 800fcf4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800fcf6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fcf8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d302      	bcc.n	800fd0c <xQueueGenericSendFromISR+0xbc>
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	2b02      	cmp	r3, #2
 800fd0a:	d12f      	bne.n	800fd6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fd1c:	683a      	ldr	r2, [r7, #0]
 800fd1e:	68b9      	ldr	r1, [r7, #8]
 800fd20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd22:	f000 fba0 	bl	8010466 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fd26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fd2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd2e:	d112      	bne.n	800fd56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d016      	beq.n	800fd66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3a:	3324      	adds	r3, #36	; 0x24
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f001 f9bf 	bl	80110c0 <xTaskRemoveFromEventList>
 800fd42:	4603      	mov	r3, r0
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00e      	beq.n	800fd66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00b      	beq.n	800fd66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2201      	movs	r2, #1
 800fd52:	601a      	str	r2, [r3, #0]
 800fd54:	e007      	b.n	800fd66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fd56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	b25a      	sxtb	r2, r3
 800fd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fd66:	2301      	movs	r3, #1
 800fd68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fd6a:	e001      	b.n	800fd70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd72:	617b      	str	r3, [r7, #20]
	__asm volatile
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	f383 8811 	msr	BASEPRI, r3
}
 800fd7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3740      	adds	r7, #64	; 0x40
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}

0800fd86 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fd86:	b580      	push	{r7, lr}
 800fd88:	b08e      	sub	sp, #56	; 0x38
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	6078      	str	r0, [r7, #4]
 800fd8e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d10a      	bne.n	800fdb0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800fd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd9e:	f383 8811 	msr	BASEPRI, r3
 800fda2:	f3bf 8f6f 	isb	sy
 800fda6:	f3bf 8f4f 	dsb	sy
 800fdaa:	623b      	str	r3, [r7, #32]
}
 800fdac:	bf00      	nop
 800fdae:	e7fe      	b.n	800fdae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d00a      	beq.n	800fdce <xQueueGiveFromISR+0x48>
	__asm volatile
 800fdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdbc:	f383 8811 	msr	BASEPRI, r3
 800fdc0:	f3bf 8f6f 	isb	sy
 800fdc4:	f3bf 8f4f 	dsb	sy
 800fdc8:	61fb      	str	r3, [r7, #28]
}
 800fdca:	bf00      	nop
 800fdcc:	e7fe      	b.n	800fdcc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d103      	bne.n	800fdde <xQueueGiveFromISR+0x58>
 800fdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d101      	bne.n	800fde2 <xQueueGiveFromISR+0x5c>
 800fdde:	2301      	movs	r3, #1
 800fde0:	e000      	b.n	800fde4 <xQueueGiveFromISR+0x5e>
 800fde2:	2300      	movs	r3, #0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d10a      	bne.n	800fdfe <xQueueGiveFromISR+0x78>
	__asm volatile
 800fde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdec:	f383 8811 	msr	BASEPRI, r3
 800fdf0:	f3bf 8f6f 	isb	sy
 800fdf4:	f3bf 8f4f 	dsb	sy
 800fdf8:	61bb      	str	r3, [r7, #24]
}
 800fdfa:	bf00      	nop
 800fdfc:	e7fe      	b.n	800fdfc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fdfe:	f7ff fc63 	bl	800f6c8 <vPortValidateInterruptPriority>
	__asm volatile
 800fe02:	f3ef 8211 	mrs	r2, BASEPRI
 800fe06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0a:	f383 8811 	msr	BASEPRI, r3
 800fe0e:	f3bf 8f6f 	isb	sy
 800fe12:	f3bf 8f4f 	dsb	sy
 800fe16:	617a      	str	r2, [r7, #20]
 800fe18:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fe1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fe24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d22b      	bcs.n	800fe86 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fe2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3a:	1c5a      	adds	r2, r3, #1
 800fe3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fe40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fe44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe48:	d112      	bne.n	800fe70 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d016      	beq.n	800fe80 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe54:	3324      	adds	r3, #36	; 0x24
 800fe56:	4618      	mov	r0, r3
 800fe58:	f001 f932 	bl	80110c0 <xTaskRemoveFromEventList>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d00e      	beq.n	800fe80 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00b      	beq.n	800fe80 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	e007      	b.n	800fe80 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fe70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe74:	3301      	adds	r3, #1
 800fe76:	b2db      	uxtb	r3, r3
 800fe78:	b25a      	sxtb	r2, r3
 800fe7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fe80:	2301      	movs	r3, #1
 800fe82:	637b      	str	r3, [r7, #52]	; 0x34
 800fe84:	e001      	b.n	800fe8a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fe86:	2300      	movs	r3, #0
 800fe88:	637b      	str	r3, [r7, #52]	; 0x34
 800fe8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	f383 8811 	msr	BASEPRI, r3
}
 800fe94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3738      	adds	r7, #56	; 0x38
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}

0800fea0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b08c      	sub	sp, #48	; 0x30
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800feac:	2300      	movs	r3, #0
 800feae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800feb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d10a      	bne.n	800fed0 <xQueueReceive+0x30>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	623b      	str	r3, [r7, #32]
}
 800fecc:	bf00      	nop
 800fece:	e7fe      	b.n	800fece <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d103      	bne.n	800fede <xQueueReceive+0x3e>
 800fed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d101      	bne.n	800fee2 <xQueueReceive+0x42>
 800fede:	2301      	movs	r3, #1
 800fee0:	e000      	b.n	800fee4 <xQueueReceive+0x44>
 800fee2:	2300      	movs	r3, #0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d10a      	bne.n	800fefe <xQueueReceive+0x5e>
	__asm volatile
 800fee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feec:	f383 8811 	msr	BASEPRI, r3
 800fef0:	f3bf 8f6f 	isb	sy
 800fef4:	f3bf 8f4f 	dsb	sy
 800fef8:	61fb      	str	r3, [r7, #28]
}
 800fefa:	bf00      	nop
 800fefc:	e7fe      	b.n	800fefc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fefe:	f001 fa9f 	bl	8011440 <xTaskGetSchedulerState>
 800ff02:	4603      	mov	r3, r0
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d102      	bne.n	800ff0e <xQueueReceive+0x6e>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d101      	bne.n	800ff12 <xQueueReceive+0x72>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e000      	b.n	800ff14 <xQueueReceive+0x74>
 800ff12:	2300      	movs	r3, #0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10a      	bne.n	800ff2e <xQueueReceive+0x8e>
	__asm volatile
 800ff18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff1c:	f383 8811 	msr	BASEPRI, r3
 800ff20:	f3bf 8f6f 	isb	sy
 800ff24:	f3bf 8f4f 	dsb	sy
 800ff28:	61bb      	str	r3, [r7, #24]
}
 800ff2a:	bf00      	nop
 800ff2c:	e7fe      	b.n	800ff2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff2e:	f7ff fae9 	bl	800f504 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d01f      	beq.n	800ff7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff3e:	68b9      	ldr	r1, [r7, #8]
 800ff40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff42:	f000 fafa 	bl	801053a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff48:	1e5a      	subs	r2, r3, #1
 800ff4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff50:	691b      	ldr	r3, [r3, #16]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00f      	beq.n	800ff76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff58:	3310      	adds	r3, #16
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f001 f8b0 	bl	80110c0 <xTaskRemoveFromEventList>
 800ff60:	4603      	mov	r3, r0
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d007      	beq.n	800ff76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff66:	4b3d      	ldr	r3, [pc, #244]	; (801005c <xQueueReceive+0x1bc>)
 800ff68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff6c:	601a      	str	r2, [r3, #0]
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff76:	f7ff faf5 	bl	800f564 <vPortExitCritical>
				return pdPASS;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e069      	b.n	8010052 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d103      	bne.n	800ff8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ff84:	f7ff faee 	bl	800f564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	e062      	b.n	8010052 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d106      	bne.n	800ffa0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff92:	f107 0310 	add.w	r3, r7, #16
 800ff96:	4618      	mov	r0, r3
 800ff98:	f001 f8f4 	bl	8011184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ffa0:	f7ff fae0 	bl	800f564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ffa4:	f000 fe72 	bl	8010c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ffa8:	f7ff faac 	bl	800f504 <vPortEnterCritical>
 800ffac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ffb2:	b25b      	sxtb	r3, r3
 800ffb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffb8:	d103      	bne.n	800ffc2 <xQueueReceive+0x122>
 800ffba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ffc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ffc8:	b25b      	sxtb	r3, r3
 800ffca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffce:	d103      	bne.n	800ffd8 <xQueueReceive+0x138>
 800ffd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ffd8:	f7ff fac4 	bl	800f564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffdc:	1d3a      	adds	r2, r7, #4
 800ffde:	f107 0310 	add.w	r3, r7, #16
 800ffe2:	4611      	mov	r1, r2
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f001 f8e3 	bl	80111b0 <xTaskCheckForTimeOut>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d123      	bne.n	8010038 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fff2:	f000 fb1a 	bl	801062a <prvIsQueueEmpty>
 800fff6:	4603      	mov	r3, r0
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d017      	beq.n	801002c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffe:	3324      	adds	r3, #36	; 0x24
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	4611      	mov	r1, r2
 8010004:	4618      	mov	r0, r3
 8010006:	f001 f837 	bl	8011078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801000a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801000c:	f000 fabb 	bl	8010586 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010010:	f000 fe4a 	bl	8010ca8 <xTaskResumeAll>
 8010014:	4603      	mov	r3, r0
 8010016:	2b00      	cmp	r3, #0
 8010018:	d189      	bne.n	800ff2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801001a:	4b10      	ldr	r3, [pc, #64]	; (801005c <xQueueReceive+0x1bc>)
 801001c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010020:	601a      	str	r2, [r3, #0]
 8010022:	f3bf 8f4f 	dsb	sy
 8010026:	f3bf 8f6f 	isb	sy
 801002a:	e780      	b.n	800ff2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801002c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801002e:	f000 faaa 	bl	8010586 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010032:	f000 fe39 	bl	8010ca8 <xTaskResumeAll>
 8010036:	e77a      	b.n	800ff2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801003a:	f000 faa4 	bl	8010586 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801003e:	f000 fe33 	bl	8010ca8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010044:	f000 faf1 	bl	801062a <prvIsQueueEmpty>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	f43f af6f 	beq.w	800ff2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010050:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010052:	4618      	mov	r0, r3
 8010054:	3730      	adds	r7, #48	; 0x30
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	e000ed04 	.word	0xe000ed04

08010060 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b08e      	sub	sp, #56	; 0x38
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801006a:	2300      	movs	r3, #0
 801006c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010072:	2300      	movs	r3, #0
 8010074:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010078:	2b00      	cmp	r3, #0
 801007a:	d10a      	bne.n	8010092 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801007c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010080:	f383 8811 	msr	BASEPRI, r3
 8010084:	f3bf 8f6f 	isb	sy
 8010088:	f3bf 8f4f 	dsb	sy
 801008c:	623b      	str	r3, [r7, #32]
}
 801008e:	bf00      	nop
 8010090:	e7fe      	b.n	8010090 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010096:	2b00      	cmp	r3, #0
 8010098:	d00a      	beq.n	80100b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801009a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009e:	f383 8811 	msr	BASEPRI, r3
 80100a2:	f3bf 8f6f 	isb	sy
 80100a6:	f3bf 8f4f 	dsb	sy
 80100aa:	61fb      	str	r3, [r7, #28]
}
 80100ac:	bf00      	nop
 80100ae:	e7fe      	b.n	80100ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80100b0:	f001 f9c6 	bl	8011440 <xTaskGetSchedulerState>
 80100b4:	4603      	mov	r3, r0
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d102      	bne.n	80100c0 <xQueueSemaphoreTake+0x60>
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <xQueueSemaphoreTake+0x64>
 80100c0:	2301      	movs	r3, #1
 80100c2:	e000      	b.n	80100c6 <xQueueSemaphoreTake+0x66>
 80100c4:	2300      	movs	r3, #0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d10a      	bne.n	80100e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80100ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ce:	f383 8811 	msr	BASEPRI, r3
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	f3bf 8f4f 	dsb	sy
 80100da:	61bb      	str	r3, [r7, #24]
}
 80100dc:	bf00      	nop
 80100de:	e7fe      	b.n	80100de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100e0:	f7ff fa10 	bl	800f504 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80100e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80100ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d024      	beq.n	801013a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80100f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f2:	1e5a      	subs	r2, r3, #1
 80100f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80100f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d104      	bne.n	801010a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010100:	f001 fb46 	bl	8011790 <pvTaskIncrementMutexHeldCount>
 8010104:	4602      	mov	r2, r0
 8010106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010108:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	691b      	ldr	r3, [r3, #16]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d00f      	beq.n	8010132 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010114:	3310      	adds	r3, #16
 8010116:	4618      	mov	r0, r3
 8010118:	f000 ffd2 	bl	80110c0 <xTaskRemoveFromEventList>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d007      	beq.n	8010132 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010122:	4b54      	ldr	r3, [pc, #336]	; (8010274 <xQueueSemaphoreTake+0x214>)
 8010124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010128:	601a      	str	r2, [r3, #0]
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010132:	f7ff fa17 	bl	800f564 <vPortExitCritical>
				return pdPASS;
 8010136:	2301      	movs	r3, #1
 8010138:	e097      	b.n	801026a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d111      	bne.n	8010164 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00a      	beq.n	801015c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014a:	f383 8811 	msr	BASEPRI, r3
 801014e:	f3bf 8f6f 	isb	sy
 8010152:	f3bf 8f4f 	dsb	sy
 8010156:	617b      	str	r3, [r7, #20]
}
 8010158:	bf00      	nop
 801015a:	e7fe      	b.n	801015a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801015c:	f7ff fa02 	bl	800f564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010160:	2300      	movs	r3, #0
 8010162:	e082      	b.n	801026a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010166:	2b00      	cmp	r3, #0
 8010168:	d106      	bne.n	8010178 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801016a:	f107 030c 	add.w	r3, r7, #12
 801016e:	4618      	mov	r0, r3
 8010170:	f001 f808 	bl	8011184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010174:	2301      	movs	r3, #1
 8010176:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010178:	f7ff f9f4 	bl	800f564 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801017c:	f000 fd86 	bl	8010c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010180:	f7ff f9c0 	bl	800f504 <vPortEnterCritical>
 8010184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801018a:	b25b      	sxtb	r3, r3
 801018c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010190:	d103      	bne.n	801019a <xQueueSemaphoreTake+0x13a>
 8010192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010194:	2200      	movs	r2, #0
 8010196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801019a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101a0:	b25b      	sxtb	r3, r3
 80101a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101a6:	d103      	bne.n	80101b0 <xQueueSemaphoreTake+0x150>
 80101a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101aa:	2200      	movs	r2, #0
 80101ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80101b0:	f7ff f9d8 	bl	800f564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80101b4:	463a      	mov	r2, r7
 80101b6:	f107 030c 	add.w	r3, r7, #12
 80101ba:	4611      	mov	r1, r2
 80101bc:	4618      	mov	r0, r3
 80101be:	f000 fff7 	bl	80111b0 <xTaskCheckForTimeOut>
 80101c2:	4603      	mov	r3, r0
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d132      	bne.n	801022e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101ca:	f000 fa2e 	bl	801062a <prvIsQueueEmpty>
 80101ce:	4603      	mov	r3, r0
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d026      	beq.n	8010222 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d109      	bne.n	80101f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80101dc:	f7ff f992 	bl	800f504 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80101e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f001 f949 	bl	801147c <xTaskPriorityInherit>
 80101ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80101ec:	f7ff f9ba 	bl	800f564 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80101f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f2:	3324      	adds	r3, #36	; 0x24
 80101f4:	683a      	ldr	r2, [r7, #0]
 80101f6:	4611      	mov	r1, r2
 80101f8:	4618      	mov	r0, r3
 80101fa:	f000 ff3d 	bl	8011078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80101fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010200:	f000 f9c1 	bl	8010586 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010204:	f000 fd50 	bl	8010ca8 <xTaskResumeAll>
 8010208:	4603      	mov	r3, r0
 801020a:	2b00      	cmp	r3, #0
 801020c:	f47f af68 	bne.w	80100e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010210:	4b18      	ldr	r3, [pc, #96]	; (8010274 <xQueueSemaphoreTake+0x214>)
 8010212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010216:	601a      	str	r2, [r3, #0]
 8010218:	f3bf 8f4f 	dsb	sy
 801021c:	f3bf 8f6f 	isb	sy
 8010220:	e75e      	b.n	80100e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010224:	f000 f9af 	bl	8010586 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010228:	f000 fd3e 	bl	8010ca8 <xTaskResumeAll>
 801022c:	e758      	b.n	80100e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801022e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010230:	f000 f9a9 	bl	8010586 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010234:	f000 fd38 	bl	8010ca8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801023a:	f000 f9f6 	bl	801062a <prvIsQueueEmpty>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	f43f af4d 	beq.w	80100e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00d      	beq.n	8010268 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801024c:	f7ff f95a 	bl	800f504 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010252:	f000 f8f0 	bl	8010436 <prvGetDisinheritPriorityAfterTimeout>
 8010256:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025a:	689b      	ldr	r3, [r3, #8]
 801025c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801025e:	4618      	mov	r0, r3
 8010260:	f001 fa08 	bl	8011674 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010264:	f7ff f97e 	bl	800f564 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010268:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801026a:	4618      	mov	r0, r3
 801026c:	3738      	adds	r7, #56	; 0x38
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	e000ed04 	.word	0xe000ed04

08010278 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b08e      	sub	sp, #56	; 0x38
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028a:	2b00      	cmp	r3, #0
 801028c:	d10a      	bne.n	80102a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801028e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010292:	f383 8811 	msr	BASEPRI, r3
 8010296:	f3bf 8f6f 	isb	sy
 801029a:	f3bf 8f4f 	dsb	sy
 801029e:	623b      	str	r3, [r7, #32]
}
 80102a0:	bf00      	nop
 80102a2:	e7fe      	b.n	80102a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d103      	bne.n	80102b2 <xQueueReceiveFromISR+0x3a>
 80102aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d101      	bne.n	80102b6 <xQueueReceiveFromISR+0x3e>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e000      	b.n	80102b8 <xQueueReceiveFromISR+0x40>
 80102b6:	2300      	movs	r3, #0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d10a      	bne.n	80102d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80102bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c0:	f383 8811 	msr	BASEPRI, r3
 80102c4:	f3bf 8f6f 	isb	sy
 80102c8:	f3bf 8f4f 	dsb	sy
 80102cc:	61fb      	str	r3, [r7, #28]
}
 80102ce:	bf00      	nop
 80102d0:	e7fe      	b.n	80102d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102d2:	f7ff f9f9 	bl	800f6c8 <vPortValidateInterruptPriority>
	__asm volatile
 80102d6:	f3ef 8211 	mrs	r2, BASEPRI
 80102da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102de:	f383 8811 	msr	BASEPRI, r3
 80102e2:	f3bf 8f6f 	isb	sy
 80102e6:	f3bf 8f4f 	dsb	sy
 80102ea:	61ba      	str	r2, [r7, #24]
 80102ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80102ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d02f      	beq.n	801035e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80102fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010308:	68b9      	ldr	r1, [r7, #8]
 801030a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801030c:	f000 f915 	bl	801053a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010312:	1e5a      	subs	r2, r3, #1
 8010314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010316:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010318:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801031c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010320:	d112      	bne.n	8010348 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	691b      	ldr	r3, [r3, #16]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d016      	beq.n	8010358 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801032a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032c:	3310      	adds	r3, #16
 801032e:	4618      	mov	r0, r3
 8010330:	f000 fec6 	bl	80110c0 <xTaskRemoveFromEventList>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00e      	beq.n	8010358 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d00b      	beq.n	8010358 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2201      	movs	r2, #1
 8010344:	601a      	str	r2, [r3, #0]
 8010346:	e007      	b.n	8010358 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801034c:	3301      	adds	r3, #1
 801034e:	b2db      	uxtb	r3, r3
 8010350:	b25a      	sxtb	r2, r3
 8010352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010358:	2301      	movs	r3, #1
 801035a:	637b      	str	r3, [r7, #52]	; 0x34
 801035c:	e001      	b.n	8010362 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801035e:	2300      	movs	r3, #0
 8010360:	637b      	str	r3, [r7, #52]	; 0x34
 8010362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010364:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	f383 8811 	msr	BASEPRI, r3
}
 801036c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801036e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010370:	4618      	mov	r0, r3
 8010372:	3738      	adds	r7, #56	; 0x38
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d10a      	bne.n	801039c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8010386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801038a:	f383 8811 	msr	BASEPRI, r3
 801038e:	f3bf 8f6f 	isb	sy
 8010392:	f3bf 8f4f 	dsb	sy
 8010396:	60bb      	str	r3, [r7, #8]
}
 8010398:	bf00      	nop
 801039a:	e7fe      	b.n	801039a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 801039c:	f7ff f8b2 	bl	800f504 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80103a6:	f7ff f8dd 	bl	800f564 <vPortExitCritical>

	return uxReturn;
 80103aa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80103ac:	4618      	mov	r0, r3
 80103ae:	3710      	adds	r7, #16
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80103b4:	b480      	push	{r7}
 80103b6:	b087      	sub	sp, #28
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d10a      	bne.n	80103dc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80103c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ca:	f383 8811 	msr	BASEPRI, r3
 80103ce:	f3bf 8f6f 	isb	sy
 80103d2:	f3bf 8f4f 	dsb	sy
 80103d6:	60fb      	str	r3, [r7, #12]
}
 80103d8:	bf00      	nop
 80103da:	e7fe      	b.n	80103da <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80103e2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80103e4:	4618      	mov	r0, r3
 80103e6:	371c      	adds	r7, #28
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d10a      	bne.n	8010418 <vQueueDelete+0x28>
	__asm volatile
 8010402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010406:	f383 8811 	msr	BASEPRI, r3
 801040a:	f3bf 8f6f 	isb	sy
 801040e:	f3bf 8f4f 	dsb	sy
 8010412:	60bb      	str	r3, [r7, #8]
}
 8010414:	bf00      	nop
 8010416:	e7fe      	b.n	8010416 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	f000 f935 	bl	8010688 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010424:	2b00      	cmp	r3, #0
 8010426:	d102      	bne.n	801042e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010428:	68f8      	ldr	r0, [r7, #12]
 801042a:	f7fe fd6d 	bl	800ef08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801042e:	bf00      	nop
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}

08010436 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010436:	b480      	push	{r7}
 8010438:	b085      	sub	sp, #20
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010442:	2b00      	cmp	r3, #0
 8010444:	d006      	beq.n	8010454 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f1c3 0307 	rsb	r3, r3, #7
 8010450:	60fb      	str	r3, [r7, #12]
 8010452:	e001      	b.n	8010458 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010454:	2300      	movs	r3, #0
 8010456:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010458:	68fb      	ldr	r3, [r7, #12]
	}
 801045a:	4618      	mov	r0, r3
 801045c:	3714      	adds	r7, #20
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr

08010466 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b086      	sub	sp, #24
 801046a:	af00      	add	r7, sp, #0
 801046c:	60f8      	str	r0, [r7, #12]
 801046e:	60b9      	str	r1, [r7, #8]
 8010470:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010472:	2300      	movs	r3, #0
 8010474:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801047a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10d      	bne.n	80104a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d14d      	bne.n	8010528 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	4618      	mov	r0, r3
 8010492:	f001 f869 	bl	8011568 <xTaskPriorityDisinherit>
 8010496:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2200      	movs	r2, #0
 801049c:	609a      	str	r2, [r3, #8]
 801049e:	e043      	b.n	8010528 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d119      	bne.n	80104da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6858      	ldr	r0, [r3, #4]
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ae:	461a      	mov	r2, r3
 80104b0:	68b9      	ldr	r1, [r7, #8]
 80104b2:	f00e ff2d 	bl	801f310 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	685a      	ldr	r2, [r3, #4]
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104be:	441a      	add	r2, r3
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	685a      	ldr	r2, [r3, #4]
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	689b      	ldr	r3, [r3, #8]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d32b      	bcc.n	8010528 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	605a      	str	r2, [r3, #4]
 80104d8:	e026      	b.n	8010528 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	68d8      	ldr	r0, [r3, #12]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104e2:	461a      	mov	r2, r3
 80104e4:	68b9      	ldr	r1, [r7, #8]
 80104e6:	f00e ff13 	bl	801f310 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	68da      	ldr	r2, [r3, #12]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f2:	425b      	negs	r3, r3
 80104f4:	441a      	add	r2, r3
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	68da      	ldr	r2, [r3, #12]
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	429a      	cmp	r2, r3
 8010504:	d207      	bcs.n	8010516 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	689a      	ldr	r2, [r3, #8]
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801050e:	425b      	negs	r3, r3
 8010510:	441a      	add	r2, r3
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b02      	cmp	r3, #2
 801051a:	d105      	bne.n	8010528 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d002      	beq.n	8010528 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	3b01      	subs	r3, #1
 8010526:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	1c5a      	adds	r2, r3, #1
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010530:	697b      	ldr	r3, [r7, #20]
}
 8010532:	4618      	mov	r0, r3
 8010534:	3718      	adds	r7, #24
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}

0801053a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801053a:	b580      	push	{r7, lr}
 801053c:	b082      	sub	sp, #8
 801053e:	af00      	add	r7, sp, #0
 8010540:	6078      	str	r0, [r7, #4]
 8010542:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010548:	2b00      	cmp	r3, #0
 801054a:	d018      	beq.n	801057e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	68da      	ldr	r2, [r3, #12]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010554:	441a      	add	r2, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	68da      	ldr	r2, [r3, #12]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	689b      	ldr	r3, [r3, #8]
 8010562:	429a      	cmp	r2, r3
 8010564:	d303      	bcc.n	801056e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	68d9      	ldr	r1, [r3, #12]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010576:	461a      	mov	r2, r3
 8010578:	6838      	ldr	r0, [r7, #0]
 801057a:	f00e fec9 	bl	801f310 <memcpy>
	}
}
 801057e:	bf00      	nop
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010586:	b580      	push	{r7, lr}
 8010588:	b084      	sub	sp, #16
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801058e:	f7fe ffb9 	bl	800f504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010598:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801059a:	e011      	b.n	80105c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d012      	beq.n	80105ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	3324      	adds	r3, #36	; 0x24
 80105a8:	4618      	mov	r0, r3
 80105aa:	f000 fd89 	bl	80110c0 <xTaskRemoveFromEventList>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d001      	beq.n	80105b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80105b4:	f000 fe5e 	bl	8011274 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80105b8:	7bfb      	ldrb	r3, [r7, #15]
 80105ba:	3b01      	subs	r3, #1
 80105bc:	b2db      	uxtb	r3, r3
 80105be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	dce9      	bgt.n	801059c <prvUnlockQueue+0x16>
 80105c8:	e000      	b.n	80105cc <prvUnlockQueue+0x46>
					break;
 80105ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	22ff      	movs	r2, #255	; 0xff
 80105d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80105d4:	f7fe ffc6 	bl	800f564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80105d8:	f7fe ff94 	bl	800f504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80105e4:	e011      	b.n	801060a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	691b      	ldr	r3, [r3, #16]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d012      	beq.n	8010614 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	3310      	adds	r3, #16
 80105f2:	4618      	mov	r0, r3
 80105f4:	f000 fd64 	bl	80110c0 <xTaskRemoveFromEventList>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d001      	beq.n	8010602 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80105fe:	f000 fe39 	bl	8011274 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010602:	7bbb      	ldrb	r3, [r7, #14]
 8010604:	3b01      	subs	r3, #1
 8010606:	b2db      	uxtb	r3, r3
 8010608:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801060a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801060e:	2b00      	cmp	r3, #0
 8010610:	dce9      	bgt.n	80105e6 <prvUnlockQueue+0x60>
 8010612:	e000      	b.n	8010616 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010614:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	22ff      	movs	r2, #255	; 0xff
 801061a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801061e:	f7fe ffa1 	bl	800f564 <vPortExitCritical>
}
 8010622:	bf00      	nop
 8010624:	3710      	adds	r7, #16
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}

0801062a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801062a:	b580      	push	{r7, lr}
 801062c:	b084      	sub	sp, #16
 801062e:	af00      	add	r7, sp, #0
 8010630:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010632:	f7fe ff67 	bl	800f504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801063a:	2b00      	cmp	r3, #0
 801063c:	d102      	bne.n	8010644 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801063e:	2301      	movs	r3, #1
 8010640:	60fb      	str	r3, [r7, #12]
 8010642:	e001      	b.n	8010648 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010644:	2300      	movs	r3, #0
 8010646:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010648:	f7fe ff8c 	bl	800f564 <vPortExitCritical>

	return xReturn;
 801064c:	68fb      	ldr	r3, [r7, #12]
}
 801064e:	4618      	mov	r0, r3
 8010650:	3710      	adds	r7, #16
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010656:	b580      	push	{r7, lr}
 8010658:	b084      	sub	sp, #16
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801065e:	f7fe ff51 	bl	800f504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801066a:	429a      	cmp	r2, r3
 801066c:	d102      	bne.n	8010674 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801066e:	2301      	movs	r3, #1
 8010670:	60fb      	str	r3, [r7, #12]
 8010672:	e001      	b.n	8010678 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010674:	2300      	movs	r3, #0
 8010676:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010678:	f7fe ff74 	bl	800f564 <vPortExitCritical>

	return xReturn;
 801067c:	68fb      	ldr	r3, [r7, #12]
}
 801067e:	4618      	mov	r0, r3
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
	...

08010688 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010688:	b480      	push	{r7}
 801068a:	b085      	sub	sp, #20
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010690:	2300      	movs	r3, #0
 8010692:	60fb      	str	r3, [r7, #12]
 8010694:	e016      	b.n	80106c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010696:	4a10      	ldr	r2, [pc, #64]	; (80106d8 <vQueueUnregisterQueue+0x50>)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	00db      	lsls	r3, r3, #3
 801069c:	4413      	add	r3, r2
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d10b      	bne.n	80106be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80106a6:	4a0c      	ldr	r2, [pc, #48]	; (80106d8 <vQueueUnregisterQueue+0x50>)
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	2100      	movs	r1, #0
 80106ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80106b0:	4a09      	ldr	r2, [pc, #36]	; (80106d8 <vQueueUnregisterQueue+0x50>)
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	00db      	lsls	r3, r3, #3
 80106b6:	4413      	add	r3, r2
 80106b8:	2200      	movs	r2, #0
 80106ba:	605a      	str	r2, [r3, #4]
				break;
 80106bc:	e006      	b.n	80106cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	3301      	adds	r3, #1
 80106c2:	60fb      	str	r3, [r7, #12]
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2b07      	cmp	r3, #7
 80106c8:	d9e5      	bls.n	8010696 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80106ca:	bf00      	nop
 80106cc:	bf00      	nop
 80106ce:	3714      	adds	r7, #20
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	4770      	bx	lr
 80106d8:	24008bf0 	.word	0x24008bf0

080106dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b08e      	sub	sp, #56	; 0x38
 80106e0:	af04      	add	r7, sp, #16
 80106e2:	60f8      	str	r0, [r7, #12]
 80106e4:	60b9      	str	r1, [r7, #8]
 80106e6:	607a      	str	r2, [r7, #4]
 80106e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80106ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d10a      	bne.n	8010706 <xTaskCreateStatic+0x2a>
	__asm volatile
 80106f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f4:	f383 8811 	msr	BASEPRI, r3
 80106f8:	f3bf 8f6f 	isb	sy
 80106fc:	f3bf 8f4f 	dsb	sy
 8010700:	623b      	str	r3, [r7, #32]
}
 8010702:	bf00      	nop
 8010704:	e7fe      	b.n	8010704 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010708:	2b00      	cmp	r3, #0
 801070a:	d10a      	bne.n	8010722 <xTaskCreateStatic+0x46>
	__asm volatile
 801070c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010710:	f383 8811 	msr	BASEPRI, r3
 8010714:	f3bf 8f6f 	isb	sy
 8010718:	f3bf 8f4f 	dsb	sy
 801071c:	61fb      	str	r3, [r7, #28]
}
 801071e:	bf00      	nop
 8010720:	e7fe      	b.n	8010720 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010722:	23b4      	movs	r3, #180	; 0xb4
 8010724:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	2bb4      	cmp	r3, #180	; 0xb4
 801072a:	d00a      	beq.n	8010742 <xTaskCreateStatic+0x66>
	__asm volatile
 801072c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010730:	f383 8811 	msr	BASEPRI, r3
 8010734:	f3bf 8f6f 	isb	sy
 8010738:	f3bf 8f4f 	dsb	sy
 801073c:	61bb      	str	r3, [r7, #24]
}
 801073e:	bf00      	nop
 8010740:	e7fe      	b.n	8010740 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010742:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010746:	2b00      	cmp	r3, #0
 8010748:	d01e      	beq.n	8010788 <xTaskCreateStatic+0xac>
 801074a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801074c:	2b00      	cmp	r3, #0
 801074e:	d01b      	beq.n	8010788 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010752:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010758:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075c:	2202      	movs	r2, #2
 801075e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010762:	2300      	movs	r3, #0
 8010764:	9303      	str	r3, [sp, #12]
 8010766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010768:	9302      	str	r3, [sp, #8]
 801076a:	f107 0314 	add.w	r3, r7, #20
 801076e:	9301      	str	r3, [sp, #4]
 8010770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010772:	9300      	str	r3, [sp, #0]
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	68b9      	ldr	r1, [r7, #8]
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f000 f850 	bl	8010820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010782:	f000 f8eb 	bl	801095c <prvAddNewTaskToReadyList>
 8010786:	e001      	b.n	801078c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010788:	2300      	movs	r3, #0
 801078a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801078c:	697b      	ldr	r3, [r7, #20]
	}
 801078e:	4618      	mov	r0, r3
 8010790:	3728      	adds	r7, #40	; 0x28
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010796:	b580      	push	{r7, lr}
 8010798:	b08c      	sub	sp, #48	; 0x30
 801079a:	af04      	add	r7, sp, #16
 801079c:	60f8      	str	r0, [r7, #12]
 801079e:	60b9      	str	r1, [r7, #8]
 80107a0:	603b      	str	r3, [r7, #0]
 80107a2:	4613      	mov	r3, r2
 80107a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80107a6:	88fb      	ldrh	r3, [r7, #6]
 80107a8:	009b      	lsls	r3, r3, #2
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fe fae0 	bl	800ed70 <pvPortMalloc>
 80107b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d00e      	beq.n	80107d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80107b8:	20b4      	movs	r0, #180	; 0xb4
 80107ba:	f7fe fad9 	bl	800ed70 <pvPortMalloc>
 80107be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80107c0:	69fb      	ldr	r3, [r7, #28]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d003      	beq.n	80107ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80107c6:	69fb      	ldr	r3, [r7, #28]
 80107c8:	697a      	ldr	r2, [r7, #20]
 80107ca:	631a      	str	r2, [r3, #48]	; 0x30
 80107cc:	e005      	b.n	80107da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80107ce:	6978      	ldr	r0, [r7, #20]
 80107d0:	f7fe fb9a 	bl	800ef08 <vPortFree>
 80107d4:	e001      	b.n	80107da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80107d6:	2300      	movs	r3, #0
 80107d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d017      	beq.n	8010810 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	2200      	movs	r2, #0
 80107e4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80107e8:	88fa      	ldrh	r2, [r7, #6]
 80107ea:	2300      	movs	r3, #0
 80107ec:	9303      	str	r3, [sp, #12]
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	9302      	str	r3, [sp, #8]
 80107f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f4:	9301      	str	r3, [sp, #4]
 80107f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f8:	9300      	str	r3, [sp, #0]
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	68b9      	ldr	r1, [r7, #8]
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f000 f80e 	bl	8010820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010804:	69f8      	ldr	r0, [r7, #28]
 8010806:	f000 f8a9 	bl	801095c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801080a:	2301      	movs	r3, #1
 801080c:	61bb      	str	r3, [r7, #24]
 801080e:	e002      	b.n	8010816 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010814:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010816:	69bb      	ldr	r3, [r7, #24]
	}
 8010818:	4618      	mov	r0, r3
 801081a:	3720      	adds	r7, #32
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b088      	sub	sp, #32
 8010824:	af00      	add	r7, sp, #0
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	60b9      	str	r1, [r7, #8]
 801082a:	607a      	str	r2, [r7, #4]
 801082c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010832:	6879      	ldr	r1, [r7, #4]
 8010834:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010838:	440b      	add	r3, r1
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	4413      	add	r3, r2
 801083e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	f023 0307 	bic.w	r3, r3, #7
 8010846:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	f003 0307 	and.w	r3, r3, #7
 801084e:	2b00      	cmp	r3, #0
 8010850:	d00a      	beq.n	8010868 <prvInitialiseNewTask+0x48>
	__asm volatile
 8010852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010856:	f383 8811 	msr	BASEPRI, r3
 801085a:	f3bf 8f6f 	isb	sy
 801085e:	f3bf 8f4f 	dsb	sy
 8010862:	617b      	str	r3, [r7, #20]
}
 8010864:	bf00      	nop
 8010866:	e7fe      	b.n	8010866 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d01f      	beq.n	80108ae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801086e:	2300      	movs	r3, #0
 8010870:	61fb      	str	r3, [r7, #28]
 8010872:	e012      	b.n	801089a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010874:	68ba      	ldr	r2, [r7, #8]
 8010876:	69fb      	ldr	r3, [r7, #28]
 8010878:	4413      	add	r3, r2
 801087a:	7819      	ldrb	r1, [r3, #0]
 801087c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801087e:	69fb      	ldr	r3, [r7, #28]
 8010880:	4413      	add	r3, r2
 8010882:	3334      	adds	r3, #52	; 0x34
 8010884:	460a      	mov	r2, r1
 8010886:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010888:	68ba      	ldr	r2, [r7, #8]
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	4413      	add	r3, r2
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d006      	beq.n	80108a2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	3301      	adds	r3, #1
 8010898:	61fb      	str	r3, [r7, #28]
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	2b0f      	cmp	r3, #15
 801089e:	d9e9      	bls.n	8010874 <prvInitialiseNewTask+0x54>
 80108a0:	e000      	b.n	80108a4 <prvInitialiseNewTask+0x84>
			{
				break;
 80108a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80108a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a6:	2200      	movs	r2, #0
 80108a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80108ac:	e003      	b.n	80108b6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80108ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b0:	2200      	movs	r2, #0
 80108b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80108b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b8:	2b06      	cmp	r3, #6
 80108ba:	d901      	bls.n	80108c0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80108bc:	2306      	movs	r3, #6
 80108be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80108c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80108c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80108cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ce:	2200      	movs	r2, #0
 80108d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80108d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d4:	3304      	adds	r3, #4
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7fe fc54 	bl	800f184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80108dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108de:	3318      	adds	r3, #24
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fe fc4f 	bl	800f184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80108e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ee:	f1c3 0207 	rsb	r2, r3, #7
 80108f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80108f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80108fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108fe:	2200      	movs	r2, #0
 8010900:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010906:	2200      	movs	r2, #0
 8010908:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801090c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090e:	334c      	adds	r3, #76	; 0x4c
 8010910:	2260      	movs	r2, #96	; 0x60
 8010912:	2100      	movs	r1, #0
 8010914:	4618      	mov	r0, r3
 8010916:	f00e fd23 	bl	801f360 <memset>
 801091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091c:	4a0c      	ldr	r2, [pc, #48]	; (8010950 <prvInitialiseNewTask+0x130>)
 801091e:	651a      	str	r2, [r3, #80]	; 0x50
 8010920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010922:	4a0c      	ldr	r2, [pc, #48]	; (8010954 <prvInitialiseNewTask+0x134>)
 8010924:	655a      	str	r2, [r3, #84]	; 0x54
 8010926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010928:	4a0b      	ldr	r2, [pc, #44]	; (8010958 <prvInitialiseNewTask+0x138>)
 801092a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801092c:	683a      	ldr	r2, [r7, #0]
 801092e:	68f9      	ldr	r1, [r7, #12]
 8010930:	69b8      	ldr	r0, [r7, #24]
 8010932:	f7fe fcbb 	bl	800f2ac <pxPortInitialiseStack>
 8010936:	4602      	mov	r2, r0
 8010938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093e:	2b00      	cmp	r3, #0
 8010940:	d002      	beq.n	8010948 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010946:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010948:	bf00      	nop
 801094a:	3720      	adds	r7, #32
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}
 8010950:	080245a0 	.word	0x080245a0
 8010954:	080245c0 	.word	0x080245c0
 8010958:	08024580 	.word	0x08024580

0801095c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010964:	f7fe fdce 	bl	800f504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010968:	4b2a      	ldr	r3, [pc, #168]	; (8010a14 <prvAddNewTaskToReadyList+0xb8>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	3301      	adds	r3, #1
 801096e:	4a29      	ldr	r2, [pc, #164]	; (8010a14 <prvAddNewTaskToReadyList+0xb8>)
 8010970:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010972:	4b29      	ldr	r3, [pc, #164]	; (8010a18 <prvAddNewTaskToReadyList+0xbc>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d109      	bne.n	801098e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801097a:	4a27      	ldr	r2, [pc, #156]	; (8010a18 <prvAddNewTaskToReadyList+0xbc>)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010980:	4b24      	ldr	r3, [pc, #144]	; (8010a14 <prvAddNewTaskToReadyList+0xb8>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b01      	cmp	r3, #1
 8010986:	d110      	bne.n	80109aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010988:	f000 fc98 	bl	80112bc <prvInitialiseTaskLists>
 801098c:	e00d      	b.n	80109aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801098e:	4b23      	ldr	r3, [pc, #140]	; (8010a1c <prvAddNewTaskToReadyList+0xc0>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d109      	bne.n	80109aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010996:	4b20      	ldr	r3, [pc, #128]	; (8010a18 <prvAddNewTaskToReadyList+0xbc>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d802      	bhi.n	80109aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80109a4:	4a1c      	ldr	r2, [pc, #112]	; (8010a18 <prvAddNewTaskToReadyList+0xbc>)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80109aa:	4b1d      	ldr	r3, [pc, #116]	; (8010a20 <prvAddNewTaskToReadyList+0xc4>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	3301      	adds	r3, #1
 80109b0:	4a1b      	ldr	r2, [pc, #108]	; (8010a20 <prvAddNewTaskToReadyList+0xc4>)
 80109b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109b8:	2201      	movs	r2, #1
 80109ba:	409a      	lsls	r2, r3
 80109bc:	4b19      	ldr	r3, [pc, #100]	; (8010a24 <prvAddNewTaskToReadyList+0xc8>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4313      	orrs	r3, r2
 80109c2:	4a18      	ldr	r2, [pc, #96]	; (8010a24 <prvAddNewTaskToReadyList+0xc8>)
 80109c4:	6013      	str	r3, [r2, #0]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109ca:	4613      	mov	r3, r2
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	4413      	add	r3, r2
 80109d0:	009b      	lsls	r3, r3, #2
 80109d2:	4a15      	ldr	r2, [pc, #84]	; (8010a28 <prvAddNewTaskToReadyList+0xcc>)
 80109d4:	441a      	add	r2, r3
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	3304      	adds	r3, #4
 80109da:	4619      	mov	r1, r3
 80109dc:	4610      	mov	r0, r2
 80109de:	f7fe fbde 	bl	800f19e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80109e2:	f7fe fdbf 	bl	800f564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80109e6:	4b0d      	ldr	r3, [pc, #52]	; (8010a1c <prvAddNewTaskToReadyList+0xc0>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d00e      	beq.n	8010a0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80109ee:	4b0a      	ldr	r3, [pc, #40]	; (8010a18 <prvAddNewTaskToReadyList+0xbc>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d207      	bcs.n	8010a0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80109fc:	4b0b      	ldr	r3, [pc, #44]	; (8010a2c <prvAddNewTaskToReadyList+0xd0>)
 80109fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a02:	601a      	str	r2, [r3, #0]
 8010a04:	f3bf 8f4f 	dsb	sy
 8010a08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a0c:	bf00      	nop
 8010a0e:	3708      	adds	r7, #8
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	24008d30 	.word	0x24008d30
 8010a18:	24008c30 	.word	0x24008c30
 8010a1c:	24008d3c 	.word	0x24008d3c
 8010a20:	24008d4c 	.word	0x24008d4c
 8010a24:	24008d38 	.word	0x24008d38
 8010a28:	24008c34 	.word	0x24008c34
 8010a2c:	e000ed04 	.word	0xe000ed04

08010a30 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010a38:	f7fe fd64 	bl	800f504 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d102      	bne.n	8010a48 <vTaskDelete+0x18>
 8010a42:	4b39      	ldr	r3, [pc, #228]	; (8010b28 <vTaskDelete+0xf8>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	e000      	b.n	8010a4a <vTaskDelete+0x1a>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	3304      	adds	r3, #4
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fe fc01 	bl	800f258 <uxListRemove>
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d115      	bne.n	8010a88 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a60:	4932      	ldr	r1, [pc, #200]	; (8010b2c <vTaskDelete+0xfc>)
 8010a62:	4613      	mov	r3, r2
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	4413      	add	r3, r2
 8010a68:	009b      	lsls	r3, r3, #2
 8010a6a:	440b      	add	r3, r1
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d10a      	bne.n	8010a88 <vTaskDelete+0x58>
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a76:	2201      	movs	r2, #1
 8010a78:	fa02 f303 	lsl.w	r3, r2, r3
 8010a7c:	43da      	mvns	r2, r3
 8010a7e:	4b2c      	ldr	r3, [pc, #176]	; (8010b30 <vTaskDelete+0x100>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4013      	ands	r3, r2
 8010a84:	4a2a      	ldr	r2, [pc, #168]	; (8010b30 <vTaskDelete+0x100>)
 8010a86:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d004      	beq.n	8010a9a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	3318      	adds	r3, #24
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7fe fbdf 	bl	800f258 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010a9a:	4b26      	ldr	r3, [pc, #152]	; (8010b34 <vTaskDelete+0x104>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	4a24      	ldr	r2, [pc, #144]	; (8010b34 <vTaskDelete+0x104>)
 8010aa2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010aa4:	4b20      	ldr	r3, [pc, #128]	; (8010b28 <vTaskDelete+0xf8>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	68fa      	ldr	r2, [r7, #12]
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d10b      	bne.n	8010ac6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	3304      	adds	r3, #4
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	4820      	ldr	r0, [pc, #128]	; (8010b38 <vTaskDelete+0x108>)
 8010ab6:	f7fe fb72 	bl	800f19e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010aba:	4b20      	ldr	r3, [pc, #128]	; (8010b3c <vTaskDelete+0x10c>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	4a1e      	ldr	r2, [pc, #120]	; (8010b3c <vTaskDelete+0x10c>)
 8010ac2:	6013      	str	r3, [r2, #0]
 8010ac4:	e009      	b.n	8010ada <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010ac6:	4b1e      	ldr	r3, [pc, #120]	; (8010b40 <vTaskDelete+0x110>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	3b01      	subs	r3, #1
 8010acc:	4a1c      	ldr	r2, [pc, #112]	; (8010b40 <vTaskDelete+0x110>)
 8010ace:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f000 fc61 	bl	8011398 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010ad6:	f000 fc93 	bl	8011400 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8010ada:	f7fe fd43 	bl	800f564 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010ade:	4b19      	ldr	r3, [pc, #100]	; (8010b44 <vTaskDelete+0x114>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d01b      	beq.n	8010b1e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8010ae6:	4b10      	ldr	r3, [pc, #64]	; (8010b28 <vTaskDelete+0xf8>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	68fa      	ldr	r2, [r7, #12]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d116      	bne.n	8010b1e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8010af0:	4b15      	ldr	r3, [pc, #84]	; (8010b48 <vTaskDelete+0x118>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d00a      	beq.n	8010b0e <vTaskDelete+0xde>
	__asm volatile
 8010af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010afc:	f383 8811 	msr	BASEPRI, r3
 8010b00:	f3bf 8f6f 	isb	sy
 8010b04:	f3bf 8f4f 	dsb	sy
 8010b08:	60bb      	str	r3, [r7, #8]
}
 8010b0a:	bf00      	nop
 8010b0c:	e7fe      	b.n	8010b0c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8010b0e:	4b0f      	ldr	r3, [pc, #60]	; (8010b4c <vTaskDelete+0x11c>)
 8010b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b14:	601a      	str	r2, [r3, #0]
 8010b16:	f3bf 8f4f 	dsb	sy
 8010b1a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010b1e:	bf00      	nop
 8010b20:	3710      	adds	r7, #16
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	24008c30 	.word	0x24008c30
 8010b2c:	24008c34 	.word	0x24008c34
 8010b30:	24008d38 	.word	0x24008d38
 8010b34:	24008d4c 	.word	0x24008d4c
 8010b38:	24008d04 	.word	0x24008d04
 8010b3c:	24008d18 	.word	0x24008d18
 8010b40:	24008d30 	.word	0x24008d30
 8010b44:	24008d3c 	.word	0x24008d3c
 8010b48:	24008d58 	.word	0x24008d58
 8010b4c:	e000ed04 	.word	0xe000ed04

08010b50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b084      	sub	sp, #16
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d017      	beq.n	8010b92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010b62:	4b13      	ldr	r3, [pc, #76]	; (8010bb0 <vTaskDelay+0x60>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d00a      	beq.n	8010b80 <vTaskDelay+0x30>
	__asm volatile
 8010b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b6e:	f383 8811 	msr	BASEPRI, r3
 8010b72:	f3bf 8f6f 	isb	sy
 8010b76:	f3bf 8f4f 	dsb	sy
 8010b7a:	60bb      	str	r3, [r7, #8]
}
 8010b7c:	bf00      	nop
 8010b7e:	e7fe      	b.n	8010b7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010b80:	f000 f884 	bl	8010c8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010b84:	2100      	movs	r1, #0
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 fe16 	bl	80117b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010b8c:	f000 f88c 	bl	8010ca8 <xTaskResumeAll>
 8010b90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d107      	bne.n	8010ba8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010b98:	4b06      	ldr	r3, [pc, #24]	; (8010bb4 <vTaskDelay+0x64>)
 8010b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b9e:	601a      	str	r2, [r3, #0]
 8010ba0:	f3bf 8f4f 	dsb	sy
 8010ba4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010ba8:	bf00      	nop
 8010baa:	3710      	adds	r7, #16
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	24008d58 	.word	0x24008d58
 8010bb4:	e000ed04 	.word	0xe000ed04

08010bb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b08a      	sub	sp, #40	; 0x28
 8010bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010bc6:	463a      	mov	r2, r7
 8010bc8:	1d39      	adds	r1, r7, #4
 8010bca:	f107 0308 	add.w	r3, r7, #8
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7ef fed6 	bl	8000980 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010bd4:	6839      	ldr	r1, [r7, #0]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	68ba      	ldr	r2, [r7, #8]
 8010bda:	9202      	str	r2, [sp, #8]
 8010bdc:	9301      	str	r3, [sp, #4]
 8010bde:	2300      	movs	r3, #0
 8010be0:	9300      	str	r3, [sp, #0]
 8010be2:	2300      	movs	r3, #0
 8010be4:	460a      	mov	r2, r1
 8010be6:	4921      	ldr	r1, [pc, #132]	; (8010c6c <vTaskStartScheduler+0xb4>)
 8010be8:	4821      	ldr	r0, [pc, #132]	; (8010c70 <vTaskStartScheduler+0xb8>)
 8010bea:	f7ff fd77 	bl	80106dc <xTaskCreateStatic>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	4a20      	ldr	r2, [pc, #128]	; (8010c74 <vTaskStartScheduler+0xbc>)
 8010bf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010bf4:	4b1f      	ldr	r3, [pc, #124]	; (8010c74 <vTaskStartScheduler+0xbc>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d002      	beq.n	8010c02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	617b      	str	r3, [r7, #20]
 8010c00:	e001      	b.n	8010c06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010c02:	2300      	movs	r3, #0
 8010c04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	d11b      	bne.n	8010c44 <vTaskStartScheduler+0x8c>
	__asm volatile
 8010c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c10:	f383 8811 	msr	BASEPRI, r3
 8010c14:	f3bf 8f6f 	isb	sy
 8010c18:	f3bf 8f4f 	dsb	sy
 8010c1c:	613b      	str	r3, [r7, #16]
}
 8010c1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010c20:	4b15      	ldr	r3, [pc, #84]	; (8010c78 <vTaskStartScheduler+0xc0>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	334c      	adds	r3, #76	; 0x4c
 8010c26:	4a15      	ldr	r2, [pc, #84]	; (8010c7c <vTaskStartScheduler+0xc4>)
 8010c28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010c2a:	4b15      	ldr	r3, [pc, #84]	; (8010c80 <vTaskStartScheduler+0xc8>)
 8010c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010c32:	4b14      	ldr	r3, [pc, #80]	; (8010c84 <vTaskStartScheduler+0xcc>)
 8010c34:	2201      	movs	r2, #1
 8010c36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010c38:	4b13      	ldr	r3, [pc, #76]	; (8010c88 <vTaskStartScheduler+0xd0>)
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010c3e:	f7fe fbbf 	bl	800f3c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010c42:	e00e      	b.n	8010c62 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c4a:	d10a      	bne.n	8010c62 <vTaskStartScheduler+0xaa>
	__asm volatile
 8010c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c50:	f383 8811 	msr	BASEPRI, r3
 8010c54:	f3bf 8f6f 	isb	sy
 8010c58:	f3bf 8f4f 	dsb	sy
 8010c5c:	60fb      	str	r3, [r7, #12]
}
 8010c5e:	bf00      	nop
 8010c60:	e7fe      	b.n	8010c60 <vTaskStartScheduler+0xa8>
}
 8010c62:	bf00      	nop
 8010c64:	3718      	adds	r7, #24
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	08020a28 	.word	0x08020a28
 8010c70:	0801128d 	.word	0x0801128d
 8010c74:	24008d54 	.word	0x24008d54
 8010c78:	24008c30 	.word	0x24008c30
 8010c7c:	24000034 	.word	0x24000034
 8010c80:	24008d50 	.word	0x24008d50
 8010c84:	24008d3c 	.word	0x24008d3c
 8010c88:	24008d34 	.word	0x24008d34

08010c8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010c90:	4b04      	ldr	r3, [pc, #16]	; (8010ca4 <vTaskSuspendAll+0x18>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	3301      	adds	r3, #1
 8010c96:	4a03      	ldr	r2, [pc, #12]	; (8010ca4 <vTaskSuspendAll+0x18>)
 8010c98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010c9a:	bf00      	nop
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr
 8010ca4:	24008d58 	.word	0x24008d58

08010ca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010cb6:	4b41      	ldr	r3, [pc, #260]	; (8010dbc <xTaskResumeAll+0x114>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d10a      	bne.n	8010cd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8010cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc2:	f383 8811 	msr	BASEPRI, r3
 8010cc6:	f3bf 8f6f 	isb	sy
 8010cca:	f3bf 8f4f 	dsb	sy
 8010cce:	603b      	str	r3, [r7, #0]
}
 8010cd0:	bf00      	nop
 8010cd2:	e7fe      	b.n	8010cd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010cd4:	f7fe fc16 	bl	800f504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010cd8:	4b38      	ldr	r3, [pc, #224]	; (8010dbc <xTaskResumeAll+0x114>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	3b01      	subs	r3, #1
 8010cde:	4a37      	ldr	r2, [pc, #220]	; (8010dbc <xTaskResumeAll+0x114>)
 8010ce0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ce2:	4b36      	ldr	r3, [pc, #216]	; (8010dbc <xTaskResumeAll+0x114>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d161      	bne.n	8010dae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010cea:	4b35      	ldr	r3, [pc, #212]	; (8010dc0 <xTaskResumeAll+0x118>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d05d      	beq.n	8010dae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010cf2:	e02e      	b.n	8010d52 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cf4:	4b33      	ldr	r3, [pc, #204]	; (8010dc4 <xTaskResumeAll+0x11c>)
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	3318      	adds	r3, #24
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7fe faa9 	bl	800f258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	3304      	adds	r3, #4
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7fe faa4 	bl	800f258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d14:	2201      	movs	r2, #1
 8010d16:	409a      	lsls	r2, r3
 8010d18:	4b2b      	ldr	r3, [pc, #172]	; (8010dc8 <xTaskResumeAll+0x120>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4313      	orrs	r3, r2
 8010d1e:	4a2a      	ldr	r2, [pc, #168]	; (8010dc8 <xTaskResumeAll+0x120>)
 8010d20:	6013      	str	r3, [r2, #0]
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d26:	4613      	mov	r3, r2
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	4413      	add	r3, r2
 8010d2c:	009b      	lsls	r3, r3, #2
 8010d2e:	4a27      	ldr	r2, [pc, #156]	; (8010dcc <xTaskResumeAll+0x124>)
 8010d30:	441a      	add	r2, r3
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	3304      	adds	r3, #4
 8010d36:	4619      	mov	r1, r3
 8010d38:	4610      	mov	r0, r2
 8010d3a:	f7fe fa30 	bl	800f19e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d42:	4b23      	ldr	r3, [pc, #140]	; (8010dd0 <xTaskResumeAll+0x128>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d302      	bcc.n	8010d52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010d4c:	4b21      	ldr	r3, [pc, #132]	; (8010dd4 <xTaskResumeAll+0x12c>)
 8010d4e:	2201      	movs	r2, #1
 8010d50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d52:	4b1c      	ldr	r3, [pc, #112]	; (8010dc4 <xTaskResumeAll+0x11c>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d1cc      	bne.n	8010cf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d001      	beq.n	8010d64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010d60:	f000 fb4e 	bl	8011400 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010d64:	4b1c      	ldr	r3, [pc, #112]	; (8010dd8 <xTaskResumeAll+0x130>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d010      	beq.n	8010d92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010d70:	f000 f858 	bl	8010e24 <xTaskIncrementTick>
 8010d74:	4603      	mov	r3, r0
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d002      	beq.n	8010d80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010d7a:	4b16      	ldr	r3, [pc, #88]	; (8010dd4 <xTaskResumeAll+0x12c>)
 8010d7c:	2201      	movs	r2, #1
 8010d7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	3b01      	subs	r3, #1
 8010d84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d1f1      	bne.n	8010d70 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010d8c:	4b12      	ldr	r3, [pc, #72]	; (8010dd8 <xTaskResumeAll+0x130>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010d92:	4b10      	ldr	r3, [pc, #64]	; (8010dd4 <xTaskResumeAll+0x12c>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d009      	beq.n	8010dae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010d9e:	4b0f      	ldr	r3, [pc, #60]	; (8010ddc <xTaskResumeAll+0x134>)
 8010da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010da4:	601a      	str	r2, [r3, #0]
 8010da6:	f3bf 8f4f 	dsb	sy
 8010daa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010dae:	f7fe fbd9 	bl	800f564 <vPortExitCritical>

	return xAlreadyYielded;
 8010db2:	68bb      	ldr	r3, [r7, #8]
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3710      	adds	r7, #16
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	24008d58 	.word	0x24008d58
 8010dc0:	24008d30 	.word	0x24008d30
 8010dc4:	24008cf0 	.word	0x24008cf0
 8010dc8:	24008d38 	.word	0x24008d38
 8010dcc:	24008c34 	.word	0x24008c34
 8010dd0:	24008c30 	.word	0x24008c30
 8010dd4:	24008d44 	.word	0x24008d44
 8010dd8:	24008d40 	.word	0x24008d40
 8010ddc:	e000ed04 	.word	0xe000ed04

08010de0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010de0:	b480      	push	{r7}
 8010de2:	b083      	sub	sp, #12
 8010de4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010de6:	4b05      	ldr	r3, [pc, #20]	; (8010dfc <xTaskGetTickCount+0x1c>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010dec:	687b      	ldr	r3, [r7, #4]
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	370c      	adds	r7, #12
 8010df2:	46bd      	mov	sp, r7
 8010df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop
 8010dfc:	24008d34 	.word	0x24008d34

08010e00 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e06:	f7fe fc5f 	bl	800f6c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010e0e:	4b04      	ldr	r3, [pc, #16]	; (8010e20 <xTaskGetTickCountFromISR+0x20>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e14:	683b      	ldr	r3, [r7, #0]
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3708      	adds	r7, #8
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	24008d34 	.word	0x24008d34

08010e24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b086      	sub	sp, #24
 8010e28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e2e:	4b4e      	ldr	r3, [pc, #312]	; (8010f68 <xTaskIncrementTick+0x144>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f040 808e 	bne.w	8010f54 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010e38:	4b4c      	ldr	r3, [pc, #304]	; (8010f6c <xTaskIncrementTick+0x148>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010e40:	4a4a      	ldr	r2, [pc, #296]	; (8010f6c <xTaskIncrementTick+0x148>)
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d120      	bne.n	8010e8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010e4c:	4b48      	ldr	r3, [pc, #288]	; (8010f70 <xTaskIncrementTick+0x14c>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d00a      	beq.n	8010e6c <xTaskIncrementTick+0x48>
	__asm volatile
 8010e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5a:	f383 8811 	msr	BASEPRI, r3
 8010e5e:	f3bf 8f6f 	isb	sy
 8010e62:	f3bf 8f4f 	dsb	sy
 8010e66:	603b      	str	r3, [r7, #0]
}
 8010e68:	bf00      	nop
 8010e6a:	e7fe      	b.n	8010e6a <xTaskIncrementTick+0x46>
 8010e6c:	4b40      	ldr	r3, [pc, #256]	; (8010f70 <xTaskIncrementTick+0x14c>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	60fb      	str	r3, [r7, #12]
 8010e72:	4b40      	ldr	r3, [pc, #256]	; (8010f74 <xTaskIncrementTick+0x150>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	4a3e      	ldr	r2, [pc, #248]	; (8010f70 <xTaskIncrementTick+0x14c>)
 8010e78:	6013      	str	r3, [r2, #0]
 8010e7a:	4a3e      	ldr	r2, [pc, #248]	; (8010f74 <xTaskIncrementTick+0x150>)
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	6013      	str	r3, [r2, #0]
 8010e80:	4b3d      	ldr	r3, [pc, #244]	; (8010f78 <xTaskIncrementTick+0x154>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	3301      	adds	r3, #1
 8010e86:	4a3c      	ldr	r2, [pc, #240]	; (8010f78 <xTaskIncrementTick+0x154>)
 8010e88:	6013      	str	r3, [r2, #0]
 8010e8a:	f000 fab9 	bl	8011400 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e8e:	4b3b      	ldr	r3, [pc, #236]	; (8010f7c <xTaskIncrementTick+0x158>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	693a      	ldr	r2, [r7, #16]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d348      	bcc.n	8010f2a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e98:	4b35      	ldr	r3, [pc, #212]	; (8010f70 <xTaskIncrementTick+0x14c>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d104      	bne.n	8010eac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ea2:	4b36      	ldr	r3, [pc, #216]	; (8010f7c <xTaskIncrementTick+0x158>)
 8010ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ea8:	601a      	str	r2, [r3, #0]
					break;
 8010eaa:	e03e      	b.n	8010f2a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010eac:	4b30      	ldr	r3, [pc, #192]	; (8010f70 <xTaskIncrementTick+0x14c>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	68db      	ldr	r3, [r3, #12]
 8010eb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010ebc:	693a      	ldr	r2, [r7, #16]
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d203      	bcs.n	8010ecc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010ec4:	4a2d      	ldr	r2, [pc, #180]	; (8010f7c <xTaskIncrementTick+0x158>)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010eca:	e02e      	b.n	8010f2a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	3304      	adds	r3, #4
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fe f9c1 	bl	800f258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d004      	beq.n	8010ee8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	3318      	adds	r3, #24
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7fe f9b8 	bl	800f258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eec:	2201      	movs	r2, #1
 8010eee:	409a      	lsls	r2, r3
 8010ef0:	4b23      	ldr	r3, [pc, #140]	; (8010f80 <xTaskIncrementTick+0x15c>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	4313      	orrs	r3, r2
 8010ef6:	4a22      	ldr	r2, [pc, #136]	; (8010f80 <xTaskIncrementTick+0x15c>)
 8010ef8:	6013      	str	r3, [r2, #0]
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010efe:	4613      	mov	r3, r2
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	4413      	add	r3, r2
 8010f04:	009b      	lsls	r3, r3, #2
 8010f06:	4a1f      	ldr	r2, [pc, #124]	; (8010f84 <xTaskIncrementTick+0x160>)
 8010f08:	441a      	add	r2, r3
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	3304      	adds	r3, #4
 8010f0e:	4619      	mov	r1, r3
 8010f10:	4610      	mov	r0, r2
 8010f12:	f7fe f944 	bl	800f19e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f1a:	4b1b      	ldr	r3, [pc, #108]	; (8010f88 <xTaskIncrementTick+0x164>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d3b9      	bcc.n	8010e98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010f24:	2301      	movs	r3, #1
 8010f26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f28:	e7b6      	b.n	8010e98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010f2a:	4b17      	ldr	r3, [pc, #92]	; (8010f88 <xTaskIncrementTick+0x164>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f30:	4914      	ldr	r1, [pc, #80]	; (8010f84 <xTaskIncrementTick+0x160>)
 8010f32:	4613      	mov	r3, r2
 8010f34:	009b      	lsls	r3, r3, #2
 8010f36:	4413      	add	r3, r2
 8010f38:	009b      	lsls	r3, r3, #2
 8010f3a:	440b      	add	r3, r1
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2b01      	cmp	r3, #1
 8010f40:	d901      	bls.n	8010f46 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8010f42:	2301      	movs	r3, #1
 8010f44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010f46:	4b11      	ldr	r3, [pc, #68]	; (8010f8c <xTaskIncrementTick+0x168>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d007      	beq.n	8010f5e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010f4e:	2301      	movs	r3, #1
 8010f50:	617b      	str	r3, [r7, #20]
 8010f52:	e004      	b.n	8010f5e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010f54:	4b0e      	ldr	r3, [pc, #56]	; (8010f90 <xTaskIncrementTick+0x16c>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	4a0d      	ldr	r2, [pc, #52]	; (8010f90 <xTaskIncrementTick+0x16c>)
 8010f5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010f5e:	697b      	ldr	r3, [r7, #20]
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3718      	adds	r7, #24
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	24008d58 	.word	0x24008d58
 8010f6c:	24008d34 	.word	0x24008d34
 8010f70:	24008ce8 	.word	0x24008ce8
 8010f74:	24008cec 	.word	0x24008cec
 8010f78:	24008d48 	.word	0x24008d48
 8010f7c:	24008d50 	.word	0x24008d50
 8010f80:	24008d38 	.word	0x24008d38
 8010f84:	24008c34 	.word	0x24008c34
 8010f88:	24008c30 	.word	0x24008c30
 8010f8c:	24008d44 	.word	0x24008d44
 8010f90:	24008d40 	.word	0x24008d40

08010f94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b086      	sub	sp, #24
 8010f98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010f9a:	4b31      	ldr	r3, [pc, #196]	; (8011060 <vTaskSwitchContext+0xcc>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d003      	beq.n	8010faa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010fa2:	4b30      	ldr	r3, [pc, #192]	; (8011064 <vTaskSwitchContext+0xd0>)
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010fa8:	e055      	b.n	8011056 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 8010faa:	4b2e      	ldr	r3, [pc, #184]	; (8011064 <vTaskSwitchContext+0xd0>)
 8010fac:	2200      	movs	r2, #0
 8010fae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010fb0:	4b2d      	ldr	r3, [pc, #180]	; (8011068 <vTaskSwitchContext+0xd4>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	681a      	ldr	r2, [r3, #0]
 8010fb6:	4b2c      	ldr	r3, [pc, #176]	; (8011068 <vTaskSwitchContext+0xd4>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d808      	bhi.n	8010fd2 <vTaskSwitchContext+0x3e>
 8010fc0:	4b29      	ldr	r3, [pc, #164]	; (8011068 <vTaskSwitchContext+0xd4>)
 8010fc2:	681a      	ldr	r2, [r3, #0]
 8010fc4:	4b28      	ldr	r3, [pc, #160]	; (8011068 <vTaskSwitchContext+0xd4>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	3334      	adds	r3, #52	; 0x34
 8010fca:	4619      	mov	r1, r3
 8010fcc:	4610      	mov	r0, r2
 8010fce:	f7ef fccb 	bl	8000968 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fd2:	4b26      	ldr	r3, [pc, #152]	; (801106c <vTaskSwitchContext+0xd8>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	fab3 f383 	clz	r3, r3
 8010fde:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010fe0:	7afb      	ldrb	r3, [r7, #11]
 8010fe2:	f1c3 031f 	rsb	r3, r3, #31
 8010fe6:	617b      	str	r3, [r7, #20]
 8010fe8:	4921      	ldr	r1, [pc, #132]	; (8011070 <vTaskSwitchContext+0xdc>)
 8010fea:	697a      	ldr	r2, [r7, #20]
 8010fec:	4613      	mov	r3, r2
 8010fee:	009b      	lsls	r3, r3, #2
 8010ff0:	4413      	add	r3, r2
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	440b      	add	r3, r1
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d10a      	bne.n	8011012 <vTaskSwitchContext+0x7e>
	__asm volatile
 8010ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011000:	f383 8811 	msr	BASEPRI, r3
 8011004:	f3bf 8f6f 	isb	sy
 8011008:	f3bf 8f4f 	dsb	sy
 801100c:	607b      	str	r3, [r7, #4]
}
 801100e:	bf00      	nop
 8011010:	e7fe      	b.n	8011010 <vTaskSwitchContext+0x7c>
 8011012:	697a      	ldr	r2, [r7, #20]
 8011014:	4613      	mov	r3, r2
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	4413      	add	r3, r2
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	4a14      	ldr	r2, [pc, #80]	; (8011070 <vTaskSwitchContext+0xdc>)
 801101e:	4413      	add	r3, r2
 8011020:	613b      	str	r3, [r7, #16]
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	685a      	ldr	r2, [r3, #4]
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	605a      	str	r2, [r3, #4]
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	685a      	ldr	r2, [r3, #4]
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	3308      	adds	r3, #8
 8011034:	429a      	cmp	r2, r3
 8011036:	d104      	bne.n	8011042 <vTaskSwitchContext+0xae>
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	685a      	ldr	r2, [r3, #4]
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	605a      	str	r2, [r3, #4]
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	4a07      	ldr	r2, [pc, #28]	; (8011068 <vTaskSwitchContext+0xd4>)
 801104a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801104c:	4b06      	ldr	r3, [pc, #24]	; (8011068 <vTaskSwitchContext+0xd4>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	334c      	adds	r3, #76	; 0x4c
 8011052:	4a08      	ldr	r2, [pc, #32]	; (8011074 <vTaskSwitchContext+0xe0>)
 8011054:	6013      	str	r3, [r2, #0]
}
 8011056:	bf00      	nop
 8011058:	3718      	adds	r7, #24
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	24008d58 	.word	0x24008d58
 8011064:	24008d44 	.word	0x24008d44
 8011068:	24008c30 	.word	0x24008c30
 801106c:	24008d38 	.word	0x24008d38
 8011070:	24008c34 	.word	0x24008c34
 8011074:	24000034 	.word	0x24000034

08011078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b084      	sub	sp, #16
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d10a      	bne.n	801109e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108c:	f383 8811 	msr	BASEPRI, r3
 8011090:	f3bf 8f6f 	isb	sy
 8011094:	f3bf 8f4f 	dsb	sy
 8011098:	60fb      	str	r3, [r7, #12]
}
 801109a:	bf00      	nop
 801109c:	e7fe      	b.n	801109c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801109e:	4b07      	ldr	r3, [pc, #28]	; (80110bc <vTaskPlaceOnEventList+0x44>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	3318      	adds	r3, #24
 80110a4:	4619      	mov	r1, r3
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7fe f89d 	bl	800f1e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80110ac:	2101      	movs	r1, #1
 80110ae:	6838      	ldr	r0, [r7, #0]
 80110b0:	f000 fb82 	bl	80117b8 <prvAddCurrentTaskToDelayedList>
}
 80110b4:	bf00      	nop
 80110b6:	3710      	adds	r7, #16
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}
 80110bc:	24008c30 	.word	0x24008c30

080110c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b086      	sub	sp, #24
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	68db      	ldr	r3, [r3, #12]
 80110cc:	68db      	ldr	r3, [r3, #12]
 80110ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d10a      	bne.n	80110ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80110d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110da:	f383 8811 	msr	BASEPRI, r3
 80110de:	f3bf 8f6f 	isb	sy
 80110e2:	f3bf 8f4f 	dsb	sy
 80110e6:	60fb      	str	r3, [r7, #12]
}
 80110e8:	bf00      	nop
 80110ea:	e7fe      	b.n	80110ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	3318      	adds	r3, #24
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7fe f8b1 	bl	800f258 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110f6:	4b1d      	ldr	r3, [pc, #116]	; (801116c <xTaskRemoveFromEventList+0xac>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d11c      	bne.n	8011138 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	3304      	adds	r3, #4
 8011102:	4618      	mov	r0, r3
 8011104:	f7fe f8a8 	bl	800f258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801110c:	2201      	movs	r2, #1
 801110e:	409a      	lsls	r2, r3
 8011110:	4b17      	ldr	r3, [pc, #92]	; (8011170 <xTaskRemoveFromEventList+0xb0>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	4313      	orrs	r3, r2
 8011116:	4a16      	ldr	r2, [pc, #88]	; (8011170 <xTaskRemoveFromEventList+0xb0>)
 8011118:	6013      	str	r3, [r2, #0]
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801111e:	4613      	mov	r3, r2
 8011120:	009b      	lsls	r3, r3, #2
 8011122:	4413      	add	r3, r2
 8011124:	009b      	lsls	r3, r3, #2
 8011126:	4a13      	ldr	r2, [pc, #76]	; (8011174 <xTaskRemoveFromEventList+0xb4>)
 8011128:	441a      	add	r2, r3
 801112a:	693b      	ldr	r3, [r7, #16]
 801112c:	3304      	adds	r3, #4
 801112e:	4619      	mov	r1, r3
 8011130:	4610      	mov	r0, r2
 8011132:	f7fe f834 	bl	800f19e <vListInsertEnd>
 8011136:	e005      	b.n	8011144 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	3318      	adds	r3, #24
 801113c:	4619      	mov	r1, r3
 801113e:	480e      	ldr	r0, [pc, #56]	; (8011178 <xTaskRemoveFromEventList+0xb8>)
 8011140:	f7fe f82d 	bl	800f19e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011148:	4b0c      	ldr	r3, [pc, #48]	; (801117c <xTaskRemoveFromEventList+0xbc>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801114e:	429a      	cmp	r2, r3
 8011150:	d905      	bls.n	801115e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011152:	2301      	movs	r3, #1
 8011154:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011156:	4b0a      	ldr	r3, [pc, #40]	; (8011180 <xTaskRemoveFromEventList+0xc0>)
 8011158:	2201      	movs	r2, #1
 801115a:	601a      	str	r2, [r3, #0]
 801115c:	e001      	b.n	8011162 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801115e:	2300      	movs	r3, #0
 8011160:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011162:	697b      	ldr	r3, [r7, #20]
}
 8011164:	4618      	mov	r0, r3
 8011166:	3718      	adds	r7, #24
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	24008d58 	.word	0x24008d58
 8011170:	24008d38 	.word	0x24008d38
 8011174:	24008c34 	.word	0x24008c34
 8011178:	24008cf0 	.word	0x24008cf0
 801117c:	24008c30 	.word	0x24008c30
 8011180:	24008d44 	.word	0x24008d44

08011184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011184:	b480      	push	{r7}
 8011186:	b083      	sub	sp, #12
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801118c:	4b06      	ldr	r3, [pc, #24]	; (80111a8 <vTaskInternalSetTimeOutState+0x24>)
 801118e:	681a      	ldr	r2, [r3, #0]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011194:	4b05      	ldr	r3, [pc, #20]	; (80111ac <vTaskInternalSetTimeOutState+0x28>)
 8011196:	681a      	ldr	r2, [r3, #0]
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	605a      	str	r2, [r3, #4]
}
 801119c:	bf00      	nop
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr
 80111a8:	24008d48 	.word	0x24008d48
 80111ac:	24008d34 	.word	0x24008d34

080111b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b088      	sub	sp, #32
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d10a      	bne.n	80111d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80111c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c4:	f383 8811 	msr	BASEPRI, r3
 80111c8:	f3bf 8f6f 	isb	sy
 80111cc:	f3bf 8f4f 	dsb	sy
 80111d0:	613b      	str	r3, [r7, #16]
}
 80111d2:	bf00      	nop
 80111d4:	e7fe      	b.n	80111d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d10a      	bne.n	80111f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80111dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e0:	f383 8811 	msr	BASEPRI, r3
 80111e4:	f3bf 8f6f 	isb	sy
 80111e8:	f3bf 8f4f 	dsb	sy
 80111ec:	60fb      	str	r3, [r7, #12]
}
 80111ee:	bf00      	nop
 80111f0:	e7fe      	b.n	80111f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80111f2:	f7fe f987 	bl	800f504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80111f6:	4b1d      	ldr	r3, [pc, #116]	; (801126c <xTaskCheckForTimeOut+0xbc>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	69ba      	ldr	r2, [r7, #24]
 8011202:	1ad3      	subs	r3, r2, r3
 8011204:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801120e:	d102      	bne.n	8011216 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011210:	2300      	movs	r3, #0
 8011212:	61fb      	str	r3, [r7, #28]
 8011214:	e023      	b.n	801125e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681a      	ldr	r2, [r3, #0]
 801121a:	4b15      	ldr	r3, [pc, #84]	; (8011270 <xTaskCheckForTimeOut+0xc0>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	429a      	cmp	r2, r3
 8011220:	d007      	beq.n	8011232 <xTaskCheckForTimeOut+0x82>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	69ba      	ldr	r2, [r7, #24]
 8011228:	429a      	cmp	r2, r3
 801122a:	d302      	bcc.n	8011232 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801122c:	2301      	movs	r3, #1
 801122e:	61fb      	str	r3, [r7, #28]
 8011230:	e015      	b.n	801125e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	697a      	ldr	r2, [r7, #20]
 8011238:	429a      	cmp	r2, r3
 801123a:	d20b      	bcs.n	8011254 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	1ad2      	subs	r2, r2, r3
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7ff ff9b 	bl	8011184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801124e:	2300      	movs	r3, #0
 8011250:	61fb      	str	r3, [r7, #28]
 8011252:	e004      	b.n	801125e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	2200      	movs	r2, #0
 8011258:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801125a:	2301      	movs	r3, #1
 801125c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801125e:	f7fe f981 	bl	800f564 <vPortExitCritical>

	return xReturn;
 8011262:	69fb      	ldr	r3, [r7, #28]
}
 8011264:	4618      	mov	r0, r3
 8011266:	3720      	adds	r7, #32
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	24008d34 	.word	0x24008d34
 8011270:	24008d48 	.word	0x24008d48

08011274 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011274:	b480      	push	{r7}
 8011276:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011278:	4b03      	ldr	r3, [pc, #12]	; (8011288 <vTaskMissedYield+0x14>)
 801127a:	2201      	movs	r2, #1
 801127c:	601a      	str	r2, [r3, #0]
}
 801127e:	bf00      	nop
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr
 8011288:	24008d44 	.word	0x24008d44

0801128c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011294:	f000 f852 	bl	801133c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011298:	4b06      	ldr	r3, [pc, #24]	; (80112b4 <prvIdleTask+0x28>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	2b01      	cmp	r3, #1
 801129e:	d9f9      	bls.n	8011294 <prvIdleTask+0x8>
			{
				taskYIELD();
 80112a0:	4b05      	ldr	r3, [pc, #20]	; (80112b8 <prvIdleTask+0x2c>)
 80112a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112a6:	601a      	str	r2, [r3, #0]
 80112a8:	f3bf 8f4f 	dsb	sy
 80112ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80112b0:	e7f0      	b.n	8011294 <prvIdleTask+0x8>
 80112b2:	bf00      	nop
 80112b4:	24008c34 	.word	0x24008c34
 80112b8:	e000ed04 	.word	0xe000ed04

080112bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112c2:	2300      	movs	r3, #0
 80112c4:	607b      	str	r3, [r7, #4]
 80112c6:	e00c      	b.n	80112e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80112c8:	687a      	ldr	r2, [r7, #4]
 80112ca:	4613      	mov	r3, r2
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	4413      	add	r3, r2
 80112d0:	009b      	lsls	r3, r3, #2
 80112d2:	4a12      	ldr	r2, [pc, #72]	; (801131c <prvInitialiseTaskLists+0x60>)
 80112d4:	4413      	add	r3, r2
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fd ff34 	bl	800f144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	3301      	adds	r3, #1
 80112e0:	607b      	str	r3, [r7, #4]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2b06      	cmp	r3, #6
 80112e6:	d9ef      	bls.n	80112c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80112e8:	480d      	ldr	r0, [pc, #52]	; (8011320 <prvInitialiseTaskLists+0x64>)
 80112ea:	f7fd ff2b 	bl	800f144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80112ee:	480d      	ldr	r0, [pc, #52]	; (8011324 <prvInitialiseTaskLists+0x68>)
 80112f0:	f7fd ff28 	bl	800f144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80112f4:	480c      	ldr	r0, [pc, #48]	; (8011328 <prvInitialiseTaskLists+0x6c>)
 80112f6:	f7fd ff25 	bl	800f144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80112fa:	480c      	ldr	r0, [pc, #48]	; (801132c <prvInitialiseTaskLists+0x70>)
 80112fc:	f7fd ff22 	bl	800f144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011300:	480b      	ldr	r0, [pc, #44]	; (8011330 <prvInitialiseTaskLists+0x74>)
 8011302:	f7fd ff1f 	bl	800f144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011306:	4b0b      	ldr	r3, [pc, #44]	; (8011334 <prvInitialiseTaskLists+0x78>)
 8011308:	4a05      	ldr	r2, [pc, #20]	; (8011320 <prvInitialiseTaskLists+0x64>)
 801130a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801130c:	4b0a      	ldr	r3, [pc, #40]	; (8011338 <prvInitialiseTaskLists+0x7c>)
 801130e:	4a05      	ldr	r2, [pc, #20]	; (8011324 <prvInitialiseTaskLists+0x68>)
 8011310:	601a      	str	r2, [r3, #0]
}
 8011312:	bf00      	nop
 8011314:	3708      	adds	r7, #8
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	24008c34 	.word	0x24008c34
 8011320:	24008cc0 	.word	0x24008cc0
 8011324:	24008cd4 	.word	0x24008cd4
 8011328:	24008cf0 	.word	0x24008cf0
 801132c:	24008d04 	.word	0x24008d04
 8011330:	24008d1c 	.word	0x24008d1c
 8011334:	24008ce8 	.word	0x24008ce8
 8011338:	24008cec 	.word	0x24008cec

0801133c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011342:	e019      	b.n	8011378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011344:	f7fe f8de 	bl	800f504 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011348:	4b10      	ldr	r3, [pc, #64]	; (801138c <prvCheckTasksWaitingTermination+0x50>)
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	3304      	adds	r3, #4
 8011354:	4618      	mov	r0, r3
 8011356:	f7fd ff7f 	bl	800f258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801135a:	4b0d      	ldr	r3, [pc, #52]	; (8011390 <prvCheckTasksWaitingTermination+0x54>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	3b01      	subs	r3, #1
 8011360:	4a0b      	ldr	r2, [pc, #44]	; (8011390 <prvCheckTasksWaitingTermination+0x54>)
 8011362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011364:	4b0b      	ldr	r3, [pc, #44]	; (8011394 <prvCheckTasksWaitingTermination+0x58>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	3b01      	subs	r3, #1
 801136a:	4a0a      	ldr	r2, [pc, #40]	; (8011394 <prvCheckTasksWaitingTermination+0x58>)
 801136c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801136e:	f7fe f8f9 	bl	800f564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f000 f810 	bl	8011398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011378:	4b06      	ldr	r3, [pc, #24]	; (8011394 <prvCheckTasksWaitingTermination+0x58>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d1e1      	bne.n	8011344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011380:	bf00      	nop
 8011382:	bf00      	nop
 8011384:	3708      	adds	r7, #8
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	24008d04 	.word	0x24008d04
 8011390:	24008d30 	.word	0x24008d30
 8011394:	24008d18 	.word	0x24008d18

08011398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011398:	b580      	push	{r7, lr}
 801139a:	b084      	sub	sp, #16
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	334c      	adds	r3, #76	; 0x4c
 80113a4:	4618      	mov	r0, r3
 80113a6:	f00e fc8b 	bl	801fcc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d108      	bne.n	80113c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7fd fda5 	bl	800ef08 <vPortFree>
				vPortFree( pxTCB );
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f7fd fda2 	bl	800ef08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80113c4:	e018      	b.n	80113f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d103      	bne.n	80113d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7fd fd99 	bl	800ef08 <vPortFree>
	}
 80113d6:	e00f      	b.n	80113f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80113de:	2b02      	cmp	r3, #2
 80113e0:	d00a      	beq.n	80113f8 <prvDeleteTCB+0x60>
	__asm volatile
 80113e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e6:	f383 8811 	msr	BASEPRI, r3
 80113ea:	f3bf 8f6f 	isb	sy
 80113ee:	f3bf 8f4f 	dsb	sy
 80113f2:	60fb      	str	r3, [r7, #12]
}
 80113f4:	bf00      	nop
 80113f6:	e7fe      	b.n	80113f6 <prvDeleteTCB+0x5e>
	}
 80113f8:	bf00      	nop
 80113fa:	3710      	adds	r7, #16
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011400:	b480      	push	{r7}
 8011402:	b083      	sub	sp, #12
 8011404:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011406:	4b0c      	ldr	r3, [pc, #48]	; (8011438 <prvResetNextTaskUnblockTime+0x38>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d104      	bne.n	801141a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011410:	4b0a      	ldr	r3, [pc, #40]	; (801143c <prvResetNextTaskUnblockTime+0x3c>)
 8011412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011416:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011418:	e008      	b.n	801142c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801141a:	4b07      	ldr	r3, [pc, #28]	; (8011438 <prvResetNextTaskUnblockTime+0x38>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	68db      	ldr	r3, [r3, #12]
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	4a04      	ldr	r2, [pc, #16]	; (801143c <prvResetNextTaskUnblockTime+0x3c>)
 801142a:	6013      	str	r3, [r2, #0]
}
 801142c:	bf00      	nop
 801142e:	370c      	adds	r7, #12
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr
 8011438:	24008ce8 	.word	0x24008ce8
 801143c:	24008d50 	.word	0x24008d50

08011440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011440:	b480      	push	{r7}
 8011442:	b083      	sub	sp, #12
 8011444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011446:	4b0b      	ldr	r3, [pc, #44]	; (8011474 <xTaskGetSchedulerState+0x34>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d102      	bne.n	8011454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801144e:	2301      	movs	r3, #1
 8011450:	607b      	str	r3, [r7, #4]
 8011452:	e008      	b.n	8011466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011454:	4b08      	ldr	r3, [pc, #32]	; (8011478 <xTaskGetSchedulerState+0x38>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d102      	bne.n	8011462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801145c:	2302      	movs	r3, #2
 801145e:	607b      	str	r3, [r7, #4]
 8011460:	e001      	b.n	8011466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011462:	2300      	movs	r3, #0
 8011464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011466:	687b      	ldr	r3, [r7, #4]
	}
 8011468:	4618      	mov	r0, r3
 801146a:	370c      	adds	r7, #12
 801146c:	46bd      	mov	sp, r7
 801146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011472:	4770      	bx	lr
 8011474:	24008d3c 	.word	0x24008d3c
 8011478:	24008d58 	.word	0x24008d58

0801147c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801147c:	b580      	push	{r7, lr}
 801147e:	b084      	sub	sp, #16
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011488:	2300      	movs	r3, #0
 801148a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d05e      	beq.n	8011550 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011496:	4b31      	ldr	r3, [pc, #196]	; (801155c <xTaskPriorityInherit+0xe0>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801149c:	429a      	cmp	r2, r3
 801149e:	d24e      	bcs.n	801153e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	699b      	ldr	r3, [r3, #24]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	db06      	blt.n	80114b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114a8:	4b2c      	ldr	r3, [pc, #176]	; (801155c <xTaskPriorityInherit+0xe0>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ae:	f1c3 0207 	rsb	r2, r3, #7
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	6959      	ldr	r1, [r3, #20]
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114be:	4613      	mov	r3, r2
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	4413      	add	r3, r2
 80114c4:	009b      	lsls	r3, r3, #2
 80114c6:	4a26      	ldr	r2, [pc, #152]	; (8011560 <xTaskPriorityInherit+0xe4>)
 80114c8:	4413      	add	r3, r2
 80114ca:	4299      	cmp	r1, r3
 80114cc:	d12f      	bne.n	801152e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	3304      	adds	r3, #4
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7fd fec0 	bl	800f258 <uxListRemove>
 80114d8:	4603      	mov	r3, r0
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d10a      	bne.n	80114f4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114e2:	2201      	movs	r2, #1
 80114e4:	fa02 f303 	lsl.w	r3, r2, r3
 80114e8:	43da      	mvns	r2, r3
 80114ea:	4b1e      	ldr	r3, [pc, #120]	; (8011564 <xTaskPriorityInherit+0xe8>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	4013      	ands	r3, r2
 80114f0:	4a1c      	ldr	r2, [pc, #112]	; (8011564 <xTaskPriorityInherit+0xe8>)
 80114f2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80114f4:	4b19      	ldr	r3, [pc, #100]	; (801155c <xTaskPriorityInherit+0xe0>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011502:	2201      	movs	r2, #1
 8011504:	409a      	lsls	r2, r3
 8011506:	4b17      	ldr	r3, [pc, #92]	; (8011564 <xTaskPriorityInherit+0xe8>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	4313      	orrs	r3, r2
 801150c:	4a15      	ldr	r2, [pc, #84]	; (8011564 <xTaskPriorityInherit+0xe8>)
 801150e:	6013      	str	r3, [r2, #0]
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011514:	4613      	mov	r3, r2
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	4413      	add	r3, r2
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	4a10      	ldr	r2, [pc, #64]	; (8011560 <xTaskPriorityInherit+0xe4>)
 801151e:	441a      	add	r2, r3
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	3304      	adds	r3, #4
 8011524:	4619      	mov	r1, r3
 8011526:	4610      	mov	r0, r2
 8011528:	f7fd fe39 	bl	800f19e <vListInsertEnd>
 801152c:	e004      	b.n	8011538 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801152e:	4b0b      	ldr	r3, [pc, #44]	; (801155c <xTaskPriorityInherit+0xe0>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011538:	2301      	movs	r3, #1
 801153a:	60fb      	str	r3, [r7, #12]
 801153c:	e008      	b.n	8011550 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011542:	4b06      	ldr	r3, [pc, #24]	; (801155c <xTaskPriorityInherit+0xe0>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011548:	429a      	cmp	r2, r3
 801154a:	d201      	bcs.n	8011550 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801154c:	2301      	movs	r3, #1
 801154e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011550:	68fb      	ldr	r3, [r7, #12]
	}
 8011552:	4618      	mov	r0, r3
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	24008c30 	.word	0x24008c30
 8011560:	24008c34 	.word	0x24008c34
 8011564:	24008d38 	.word	0x24008d38

08011568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011568:	b580      	push	{r7, lr}
 801156a:	b086      	sub	sp, #24
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011574:	2300      	movs	r3, #0
 8011576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d06e      	beq.n	801165c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801157e:	4b3a      	ldr	r3, [pc, #232]	; (8011668 <xTaskPriorityDisinherit+0x100>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	693a      	ldr	r2, [r7, #16]
 8011584:	429a      	cmp	r2, r3
 8011586:	d00a      	beq.n	801159e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158c:	f383 8811 	msr	BASEPRI, r3
 8011590:	f3bf 8f6f 	isb	sy
 8011594:	f3bf 8f4f 	dsb	sy
 8011598:	60fb      	str	r3, [r7, #12]
}
 801159a:	bf00      	nop
 801159c:	e7fe      	b.n	801159c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d10a      	bne.n	80115bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80115a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115aa:	f383 8811 	msr	BASEPRI, r3
 80115ae:	f3bf 8f6f 	isb	sy
 80115b2:	f3bf 8f4f 	dsb	sy
 80115b6:	60bb      	str	r3, [r7, #8]
}
 80115b8:	bf00      	nop
 80115ba:	e7fe      	b.n	80115ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115c0:	1e5a      	subs	r2, r3, #1
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d044      	beq.n	801165c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d140      	bne.n	801165c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	3304      	adds	r3, #4
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fd fe3a 	bl	800f258 <uxListRemove>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d115      	bne.n	8011616 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ee:	491f      	ldr	r1, [pc, #124]	; (801166c <xTaskPriorityDisinherit+0x104>)
 80115f0:	4613      	mov	r3, r2
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	4413      	add	r3, r2
 80115f6:	009b      	lsls	r3, r3, #2
 80115f8:	440b      	add	r3, r1
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d10a      	bne.n	8011616 <xTaskPriorityDisinherit+0xae>
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011604:	2201      	movs	r2, #1
 8011606:	fa02 f303 	lsl.w	r3, r2, r3
 801160a:	43da      	mvns	r2, r3
 801160c:	4b18      	ldr	r3, [pc, #96]	; (8011670 <xTaskPriorityDisinherit+0x108>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4013      	ands	r3, r2
 8011612:	4a17      	ldr	r2, [pc, #92]	; (8011670 <xTaskPriorityDisinherit+0x108>)
 8011614:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011616:	693b      	ldr	r3, [r7, #16]
 8011618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011622:	f1c3 0207 	rsb	r2, r3, #7
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801162e:	2201      	movs	r2, #1
 8011630:	409a      	lsls	r2, r3
 8011632:	4b0f      	ldr	r3, [pc, #60]	; (8011670 <xTaskPriorityDisinherit+0x108>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	4313      	orrs	r3, r2
 8011638:	4a0d      	ldr	r2, [pc, #52]	; (8011670 <xTaskPriorityDisinherit+0x108>)
 801163a:	6013      	str	r3, [r2, #0]
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011640:	4613      	mov	r3, r2
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	4413      	add	r3, r2
 8011646:	009b      	lsls	r3, r3, #2
 8011648:	4a08      	ldr	r2, [pc, #32]	; (801166c <xTaskPriorityDisinherit+0x104>)
 801164a:	441a      	add	r2, r3
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	3304      	adds	r3, #4
 8011650:	4619      	mov	r1, r3
 8011652:	4610      	mov	r0, r2
 8011654:	f7fd fda3 	bl	800f19e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011658:	2301      	movs	r3, #1
 801165a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801165c:	697b      	ldr	r3, [r7, #20]
	}
 801165e:	4618      	mov	r0, r3
 8011660:	3718      	adds	r7, #24
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
 8011666:	bf00      	nop
 8011668:	24008c30 	.word	0x24008c30
 801166c:	24008c34 	.word	0x24008c34
 8011670:	24008d38 	.word	0x24008d38

08011674 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011674:	b580      	push	{r7, lr}
 8011676:	b088      	sub	sp, #32
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011682:	2301      	movs	r3, #1
 8011684:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d077      	beq.n	801177c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801168c:	69bb      	ldr	r3, [r7, #24]
 801168e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011690:	2b00      	cmp	r3, #0
 8011692:	d10a      	bne.n	80116aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011698:	f383 8811 	msr	BASEPRI, r3
 801169c:	f3bf 8f6f 	isb	sy
 80116a0:	f3bf 8f4f 	dsb	sy
 80116a4:	60fb      	str	r3, [r7, #12]
}
 80116a6:	bf00      	nop
 80116a8:	e7fe      	b.n	80116a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80116aa:	69bb      	ldr	r3, [r7, #24]
 80116ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116ae:	683a      	ldr	r2, [r7, #0]
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d902      	bls.n	80116ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	61fb      	str	r3, [r7, #28]
 80116b8:	e002      	b.n	80116c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116c4:	69fa      	ldr	r2, [r7, #28]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d058      	beq.n	801177c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80116ca:	69bb      	ldr	r3, [r7, #24]
 80116cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80116ce:	697a      	ldr	r2, [r7, #20]
 80116d0:	429a      	cmp	r2, r3
 80116d2:	d153      	bne.n	801177c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80116d4:	4b2b      	ldr	r3, [pc, #172]	; (8011784 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	69ba      	ldr	r2, [r7, #24]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d10a      	bne.n	80116f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80116de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e2:	f383 8811 	msr	BASEPRI, r3
 80116e6:	f3bf 8f6f 	isb	sy
 80116ea:	f3bf 8f4f 	dsb	sy
 80116ee:	60bb      	str	r3, [r7, #8]
}
 80116f0:	bf00      	nop
 80116f2:	e7fe      	b.n	80116f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80116f4:	69bb      	ldr	r3, [r7, #24]
 80116f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	69fa      	ldr	r2, [r7, #28]
 80116fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011700:	69bb      	ldr	r3, [r7, #24]
 8011702:	699b      	ldr	r3, [r3, #24]
 8011704:	2b00      	cmp	r3, #0
 8011706:	db04      	blt.n	8011712 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	f1c3 0207 	rsb	r2, r3, #7
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011712:	69bb      	ldr	r3, [r7, #24]
 8011714:	6959      	ldr	r1, [r3, #20]
 8011716:	693a      	ldr	r2, [r7, #16]
 8011718:	4613      	mov	r3, r2
 801171a:	009b      	lsls	r3, r3, #2
 801171c:	4413      	add	r3, r2
 801171e:	009b      	lsls	r3, r3, #2
 8011720:	4a19      	ldr	r2, [pc, #100]	; (8011788 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011722:	4413      	add	r3, r2
 8011724:	4299      	cmp	r1, r3
 8011726:	d129      	bne.n	801177c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011728:	69bb      	ldr	r3, [r7, #24]
 801172a:	3304      	adds	r3, #4
 801172c:	4618      	mov	r0, r3
 801172e:	f7fd fd93 	bl	800f258 <uxListRemove>
 8011732:	4603      	mov	r3, r0
 8011734:	2b00      	cmp	r3, #0
 8011736:	d10a      	bne.n	801174e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011738:	69bb      	ldr	r3, [r7, #24]
 801173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801173c:	2201      	movs	r2, #1
 801173e:	fa02 f303 	lsl.w	r3, r2, r3
 8011742:	43da      	mvns	r2, r3
 8011744:	4b11      	ldr	r3, [pc, #68]	; (801178c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	4013      	ands	r3, r2
 801174a:	4a10      	ldr	r2, [pc, #64]	; (801178c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801174c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801174e:	69bb      	ldr	r3, [r7, #24]
 8011750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011752:	2201      	movs	r2, #1
 8011754:	409a      	lsls	r2, r3
 8011756:	4b0d      	ldr	r3, [pc, #52]	; (801178c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	4313      	orrs	r3, r2
 801175c:	4a0b      	ldr	r2, [pc, #44]	; (801178c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801175e:	6013      	str	r3, [r2, #0]
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011764:	4613      	mov	r3, r2
 8011766:	009b      	lsls	r3, r3, #2
 8011768:	4413      	add	r3, r2
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	4a06      	ldr	r2, [pc, #24]	; (8011788 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801176e:	441a      	add	r2, r3
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	3304      	adds	r3, #4
 8011774:	4619      	mov	r1, r3
 8011776:	4610      	mov	r0, r2
 8011778:	f7fd fd11 	bl	800f19e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801177c:	bf00      	nop
 801177e:	3720      	adds	r7, #32
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	24008c30 	.word	0x24008c30
 8011788:	24008c34 	.word	0x24008c34
 801178c:	24008d38 	.word	0x24008d38

08011790 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011790:	b480      	push	{r7}
 8011792:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011794:	4b07      	ldr	r3, [pc, #28]	; (80117b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d004      	beq.n	80117a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801179c:	4b05      	ldr	r3, [pc, #20]	; (80117b4 <pvTaskIncrementMutexHeldCount+0x24>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80117a2:	3201      	adds	r2, #1
 80117a4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80117a6:	4b03      	ldr	r3, [pc, #12]	; (80117b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80117a8:	681b      	ldr	r3, [r3, #0]
	}
 80117aa:	4618      	mov	r0, r3
 80117ac:	46bd      	mov	sp, r7
 80117ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b2:	4770      	bx	lr
 80117b4:	24008c30 	.word	0x24008c30

080117b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b084      	sub	sp, #16
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80117c2:	4b29      	ldr	r3, [pc, #164]	; (8011868 <prvAddCurrentTaskToDelayedList+0xb0>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117c8:	4b28      	ldr	r3, [pc, #160]	; (801186c <prvAddCurrentTaskToDelayedList+0xb4>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	3304      	adds	r3, #4
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7fd fd42 	bl	800f258 <uxListRemove>
 80117d4:	4603      	mov	r3, r0
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d10b      	bne.n	80117f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80117da:	4b24      	ldr	r3, [pc, #144]	; (801186c <prvAddCurrentTaskToDelayedList+0xb4>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117e0:	2201      	movs	r2, #1
 80117e2:	fa02 f303 	lsl.w	r3, r2, r3
 80117e6:	43da      	mvns	r2, r3
 80117e8:	4b21      	ldr	r3, [pc, #132]	; (8011870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4013      	ands	r3, r2
 80117ee:	4a20      	ldr	r2, [pc, #128]	; (8011870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80117f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117f8:	d10a      	bne.n	8011810 <prvAddCurrentTaskToDelayedList+0x58>
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d007      	beq.n	8011810 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011800:	4b1a      	ldr	r3, [pc, #104]	; (801186c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	3304      	adds	r3, #4
 8011806:	4619      	mov	r1, r3
 8011808:	481a      	ldr	r0, [pc, #104]	; (8011874 <prvAddCurrentTaskToDelayedList+0xbc>)
 801180a:	f7fd fcc8 	bl	800f19e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801180e:	e026      	b.n	801185e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011810:	68fa      	ldr	r2, [r7, #12]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	4413      	add	r3, r2
 8011816:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011818:	4b14      	ldr	r3, [pc, #80]	; (801186c <prvAddCurrentTaskToDelayedList+0xb4>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	68ba      	ldr	r2, [r7, #8]
 801181e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011820:	68ba      	ldr	r2, [r7, #8]
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	429a      	cmp	r2, r3
 8011826:	d209      	bcs.n	801183c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011828:	4b13      	ldr	r3, [pc, #76]	; (8011878 <prvAddCurrentTaskToDelayedList+0xc0>)
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	4b0f      	ldr	r3, [pc, #60]	; (801186c <prvAddCurrentTaskToDelayedList+0xb4>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	3304      	adds	r3, #4
 8011832:	4619      	mov	r1, r3
 8011834:	4610      	mov	r0, r2
 8011836:	f7fd fcd6 	bl	800f1e6 <vListInsert>
}
 801183a:	e010      	b.n	801185e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801183c:	4b0f      	ldr	r3, [pc, #60]	; (801187c <prvAddCurrentTaskToDelayedList+0xc4>)
 801183e:	681a      	ldr	r2, [r3, #0]
 8011840:	4b0a      	ldr	r3, [pc, #40]	; (801186c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	3304      	adds	r3, #4
 8011846:	4619      	mov	r1, r3
 8011848:	4610      	mov	r0, r2
 801184a:	f7fd fccc 	bl	800f1e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801184e:	4b0c      	ldr	r3, [pc, #48]	; (8011880 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	68ba      	ldr	r2, [r7, #8]
 8011854:	429a      	cmp	r2, r3
 8011856:	d202      	bcs.n	801185e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011858:	4a09      	ldr	r2, [pc, #36]	; (8011880 <prvAddCurrentTaskToDelayedList+0xc8>)
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	6013      	str	r3, [r2, #0]
}
 801185e:	bf00      	nop
 8011860:	3710      	adds	r7, #16
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
 8011866:	bf00      	nop
 8011868:	24008d34 	.word	0x24008d34
 801186c:	24008c30 	.word	0x24008c30
 8011870:	24008d38 	.word	0x24008d38
 8011874:	24008d1c 	.word	0x24008d1c
 8011878:	24008cec 	.word	0x24008cec
 801187c:	24008ce8 	.word	0x24008ce8
 8011880:	24008d50 	.word	0x24008d50

08011884 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	330c      	adds	r3, #12
 8011894:	461a      	mov	r2, r3
 8011896:	6839      	ldr	r1, [r7, #0]
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f00c fec5 	bl	801e628 <tcpip_send_msg_wait_sem>
 801189e:	4603      	mov	r3, r0
 80118a0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80118a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d103      	bne.n	80118b2 <netconn_apimsg+0x2e>
    return apimsg->err;
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80118b0:	e001      	b.n	80118b6 <netconn_apimsg+0x32>
  }
  return err;
 80118b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
	...

080118c0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b08c      	sub	sp, #48	; 0x30
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	4603      	mov	r3, r0
 80118c8:	603a      	str	r2, [r7, #0]
 80118ca:	71fb      	strb	r3, [r7, #7]
 80118cc:	460b      	mov	r3, r1
 80118ce:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80118d0:	79fb      	ldrb	r3, [r7, #7]
 80118d2:	6839      	ldr	r1, [r7, #0]
 80118d4:	4618      	mov	r0, r3
 80118d6:	f001 f927 	bl	8012b28 <netconn_alloc>
 80118da:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80118dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d054      	beq.n	801198c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80118e2:	79bb      	ldrb	r3, [r7, #6]
 80118e4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80118e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80118ea:	f107 0308 	add.w	r3, r7, #8
 80118ee:	4619      	mov	r1, r3
 80118f0:	4829      	ldr	r0, [pc, #164]	; (8011998 <netconn_new_with_proto_and_callback+0xd8>)
 80118f2:	f7ff ffc7 	bl	8011884 <netconn_apimsg>
 80118f6:	4603      	mov	r3, r0
 80118f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80118fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011900:	2b00      	cmp	r3, #0
 8011902:	d043      	beq.n	801198c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8011904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d005      	beq.n	8011918 <netconn_new_with_proto_and_callback+0x58>
 801190c:	4b23      	ldr	r3, [pc, #140]	; (801199c <netconn_new_with_proto_and_callback+0xdc>)
 801190e:	22a3      	movs	r2, #163	; 0xa3
 8011910:	4923      	ldr	r1, [pc, #140]	; (80119a0 <netconn_new_with_proto_and_callback+0xe0>)
 8011912:	4824      	ldr	r0, [pc, #144]	; (80119a4 <netconn_new_with_proto_and_callback+0xe4>)
 8011914:	f00e f8fa 	bl	801fb0c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8011918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191a:	3310      	adds	r3, #16
 801191c:	4618      	mov	r0, r3
 801191e:	f006 fb8c 	bl	801803a <sys_mbox_valid>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	d105      	bne.n	8011934 <netconn_new_with_proto_and_callback+0x74>
 8011928:	4b1c      	ldr	r3, [pc, #112]	; (801199c <netconn_new_with_proto_and_callback+0xdc>)
 801192a:	22a4      	movs	r2, #164	; 0xa4
 801192c:	491e      	ldr	r1, [pc, #120]	; (80119a8 <netconn_new_with_proto_and_callback+0xe8>)
 801192e:	481d      	ldr	r0, [pc, #116]	; (80119a4 <netconn_new_with_proto_and_callback+0xe4>)
 8011930:	f00e f8ec 	bl	801fb0c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8011934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011936:	3314      	adds	r3, #20
 8011938:	4618      	mov	r0, r3
 801193a:	f006 fb7e 	bl	801803a <sys_mbox_valid>
 801193e:	4603      	mov	r3, r0
 8011940:	2b00      	cmp	r3, #0
 8011942:	d005      	beq.n	8011950 <netconn_new_with_proto_and_callback+0x90>
 8011944:	4b15      	ldr	r3, [pc, #84]	; (801199c <netconn_new_with_proto_and_callback+0xdc>)
 8011946:	22a6      	movs	r2, #166	; 0xa6
 8011948:	4918      	ldr	r1, [pc, #96]	; (80119ac <netconn_new_with_proto_and_callback+0xec>)
 801194a:	4816      	ldr	r0, [pc, #88]	; (80119a4 <netconn_new_with_proto_and_callback+0xe4>)
 801194c:	f00e f8de 	bl	801fb0c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8011950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011952:	330c      	adds	r3, #12
 8011954:	4618      	mov	r0, r3
 8011956:	f006 fc01 	bl	801815c <sys_sem_valid>
 801195a:	4603      	mov	r3, r0
 801195c:	2b00      	cmp	r3, #0
 801195e:	d105      	bne.n	801196c <netconn_new_with_proto_and_callback+0xac>
 8011960:	4b0e      	ldr	r3, [pc, #56]	; (801199c <netconn_new_with_proto_and_callback+0xdc>)
 8011962:	22a9      	movs	r2, #169	; 0xa9
 8011964:	4912      	ldr	r1, [pc, #72]	; (80119b0 <netconn_new_with_proto_and_callback+0xf0>)
 8011966:	480f      	ldr	r0, [pc, #60]	; (80119a4 <netconn_new_with_proto_and_callback+0xe4>)
 8011968:	f00e f8d0 	bl	801fb0c <iprintf>
      sys_sem_free(&conn->op_completed);
 801196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196e:	330c      	adds	r3, #12
 8011970:	4618      	mov	r0, r3
 8011972:	f006 fbe6 	bl	8018142 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8011976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011978:	3310      	adds	r3, #16
 801197a:	4618      	mov	r0, r3
 801197c:	f006 fad6 	bl	8017f2c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011982:	2007      	movs	r0, #7
 8011984:	f005 f922 	bl	8016bcc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8011988:	2300      	movs	r3, #0
 801198a:	e000      	b.n	801198e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 801198c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801198e:	4618      	mov	r0, r3
 8011990:	3730      	adds	r7, #48	; 0x30
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	08012afd 	.word	0x08012afd
 801199c:	08020a30 	.word	0x08020a30
 80119a0:	08020aa8 	.word	0x08020aa8
 80119a4:	08020acc 	.word	0x08020acc
 80119a8:	08020af4 	.word	0x08020af4
 80119ac:	08020b0c 	.word	0x08020b0c
 80119b0:	08020b30 	.word	0x08020b30

080119b4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b08c      	sub	sp, #48	; 0x30
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d101      	bne.n	80119c6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 80119c2:	2300      	movs	r3, #0
 80119c4:	e014      	b.n	80119f0 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80119ca:	2329      	movs	r3, #41	; 0x29
 80119cc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80119ce:	f107 030c 	add.w	r3, r7, #12
 80119d2:	4619      	mov	r1, r3
 80119d4:	4808      	ldr	r0, [pc, #32]	; (80119f8 <netconn_prepare_delete+0x44>)
 80119d6:	f7ff ff55 	bl	8011884 <netconn_apimsg>
 80119da:	4603      	mov	r3, r0
 80119dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80119e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d002      	beq.n	80119ee <netconn_prepare_delete+0x3a>
    return err;
 80119e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80119ec:	e000      	b.n	80119f0 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80119ee:	2300      	movs	r3, #0
}
 80119f0:	4618      	mov	r0, r3
 80119f2:	3730      	adds	r7, #48	; 0x30
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}
 80119f8:	08013069 	.word	0x08013069

080119fc <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d101      	bne.n	8011a0e <netconn_delete+0x12>
    return ERR_OK;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	e00d      	b.n	8011a2a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7ff ffd0 	bl	80119b4 <netconn_prepare_delete>
 8011a14:	4603      	mov	r3, r0
 8011a16:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8011a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d102      	bne.n	8011a26 <netconn_delete+0x2a>
    netconn_free(conn);
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f001 f8ef 	bl	8012c04 <netconn_free>
  }
  return err;
 8011a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3710      	adds	r7, #16
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
	...

08011a34 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b08e      	sub	sp, #56	; 0x38
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	60f8      	str	r0, [r7, #12]
 8011a3c:	60b9      	str	r1, [r7, #8]
 8011a3e:	4613      	mov	r3, r2
 8011a40:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d109      	bne.n	8011a5c <netconn_bind+0x28>
 8011a48:	4b11      	ldr	r3, [pc, #68]	; (8011a90 <netconn_bind+0x5c>)
 8011a4a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8011a4e:	4911      	ldr	r1, [pc, #68]	; (8011a94 <netconn_bind+0x60>)
 8011a50:	4811      	ldr	r0, [pc, #68]	; (8011a98 <netconn_bind+0x64>)
 8011a52:	f00e f85b 	bl	801fb0c <iprintf>
 8011a56:	f06f 030f 	mvn.w	r3, #15
 8011a5a:	e015      	b.n	8011a88 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d101      	bne.n	8011a66 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8011a62:	4b0e      	ldr	r3, [pc, #56]	; (8011a9c <netconn_bind+0x68>)
 8011a64:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8011a6e:	88fb      	ldrh	r3, [r7, #6]
 8011a70:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8011a72:	f107 0314 	add.w	r3, r7, #20
 8011a76:	4619      	mov	r1, r3
 8011a78:	4809      	ldr	r0, [pc, #36]	; (8011aa0 <netconn_bind+0x6c>)
 8011a7a:	f7ff ff03 	bl	8011884 <netconn_apimsg>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011a84:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3738      	adds	r7, #56	; 0x38
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}
 8011a90:	08020a30 	.word	0x08020a30
 8011a94:	08020bac 	.word	0x08020bac
 8011a98:	08020acc 	.word	0x08020acc
 8011a9c:	08024428 	.word	0x08024428
 8011aa0:	08013231 	.word	0x08013231

08011aa4 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b08c      	sub	sp, #48	; 0x30
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	460b      	mov	r3, r1
 8011aae:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d109      	bne.n	8011aca <netconn_listen_with_backlog+0x26>
 8011ab6:	4b0d      	ldr	r3, [pc, #52]	; (8011aec <netconn_listen_with_backlog+0x48>)
 8011ab8:	f240 12bb 	movw	r2, #443	; 0x1bb
 8011abc:	490c      	ldr	r1, [pc, #48]	; (8011af0 <netconn_listen_with_backlog+0x4c>)
 8011abe:	480d      	ldr	r0, [pc, #52]	; (8011af4 <netconn_listen_with_backlog+0x50>)
 8011ac0:	f00e f824 	bl	801fb0c <iprintf>
 8011ac4:	f06f 030f 	mvn.w	r3, #15
 8011ac8:	e00c      	b.n	8011ae4 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8011ace:	f107 030c 	add.w	r3, r7, #12
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	4808      	ldr	r0, [pc, #32]	; (8011af8 <netconn_listen_with_backlog+0x54>)
 8011ad6:	f7ff fed5 	bl	8011884 <netconn_apimsg>
 8011ada:	4603      	mov	r3, r0
 8011adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011ae0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3730      	adds	r7, #48	; 0x30
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	08020a30 	.word	0x08020a30
 8011af0:	08020c2c 	.word	0x08020c2c
 8011af4:	08020acc 	.word	0x08020acc
 8011af8:	080132a5 	.word	0x080132a5

08011afc <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b086      	sub	sp, #24
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d109      	bne.n	8011b20 <netconn_accept+0x24>
 8011b0c:	4b3d      	ldr	r3, [pc, #244]	; (8011c04 <netconn_accept+0x108>)
 8011b0e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011b12:	493d      	ldr	r1, [pc, #244]	; (8011c08 <netconn_accept+0x10c>)
 8011b14:	483d      	ldr	r0, [pc, #244]	; (8011c0c <netconn_accept+0x110>)
 8011b16:	f00d fff9 	bl	801fb0c <iprintf>
 8011b1a:	f06f 030f 	mvn.w	r3, #15
 8011b1e:	e06c      	b.n	8011bfa <netconn_accept+0xfe>
  *new_conn = NULL;
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	2200      	movs	r2, #0
 8011b24:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d109      	bne.n	8011b40 <netconn_accept+0x44>
 8011b2c:	4b35      	ldr	r3, [pc, #212]	; (8011c04 <netconn_accept+0x108>)
 8011b2e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8011b32:	4937      	ldr	r1, [pc, #220]	; (8011c10 <netconn_accept+0x114>)
 8011b34:	4835      	ldr	r0, [pc, #212]	; (8011c0c <netconn_accept+0x110>)
 8011b36:	f00d ffe9 	bl	801fb0c <iprintf>
 8011b3a:	f06f 030f 	mvn.w	r3, #15
 8011b3e:	e05c      	b.n	8011bfa <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f000 fb6c 	bl	801221e <netconn_err>
 8011b46:	4603      	mov	r3, r0
 8011b48:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8011b4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d002      	beq.n	8011b58 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8011b52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b56:	e050      	b.n	8011bfa <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	3314      	adds	r3, #20
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f006 fa6c 	bl	801803a <sys_mbox_valid>
 8011b62:	4603      	mov	r3, r0
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d005      	beq.n	8011b74 <netconn_accept+0x78>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	7f1b      	ldrb	r3, [r3, #28]
 8011b6c:	f003 0301 	and.w	r3, r3, #1
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d002      	beq.n	8011b7a <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8011b74:	f06f 030e 	mvn.w	r3, #14
 8011b78:	e03f      	b.n	8011bfa <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	7f1b      	ldrb	r3, [r3, #28]
 8011b7e:	f003 0302 	and.w	r3, r3, #2
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d00e      	beq.n	8011ba4 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	3314      	adds	r3, #20
 8011b8a:	f107 020c 	add.w	r2, r7, #12
 8011b8e:	4611      	mov	r1, r2
 8011b90:	4618      	mov	r0, r3
 8011b92:	f006 fa36 	bl	8018002 <sys_arch_mbox_tryfetch>
 8011b96:	4603      	mov	r3, r0
 8011b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b9c:	d10a      	bne.n	8011bb4 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8011b9e:	f06f 0306 	mvn.w	r3, #6
 8011ba2:	e02a      	b.n	8011bfa <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	3314      	adds	r3, #20
 8011ba8:	f107 010c 	add.w	r1, r7, #12
 8011bac:	2200      	movs	r2, #0
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f006 f9e8 	bl	8017f84 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d005      	beq.n	8011bc8 <netconn_accept+0xcc>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	2101      	movs	r1, #1
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	f107 0213 	add.w	r2, r7, #19
 8011bce:	4611      	mov	r1, r2
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f000 fb75 	bl	80122c0 <lwip_netconn_is_err_msg>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d002      	beq.n	8011be2 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8011bdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011be0:	e00b      	b.n	8011bfa <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d102      	bne.n	8011bee <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8011be8:	f06f 030e 	mvn.w	r3, #14
 8011bec:	e005      	b.n	8011bfa <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	697a      	ldr	r2, [r7, #20]
 8011bf6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011bf8:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3718      	adds	r7, #24
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	08020a30 	.word	0x08020a30
 8011c08:	08020c4c 	.word	0x08020c4c
 8011c0c:	08020acc 	.word	0x08020acc
 8011c10:	08020c6c 	.word	0x08020c6c

08011c14 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b088      	sub	sp, #32
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	60f8      	str	r0, [r7, #12]
 8011c1c:	60b9      	str	r1, [r7, #8]
 8011c1e:	4613      	mov	r3, r2
 8011c20:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8011c22:	2300      	movs	r3, #0
 8011c24:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d109      	bne.n	8011c40 <netconn_recv_data+0x2c>
 8011c2c:	4b58      	ldr	r3, [pc, #352]	; (8011d90 <netconn_recv_data+0x17c>)
 8011c2e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8011c32:	4958      	ldr	r1, [pc, #352]	; (8011d94 <netconn_recv_data+0x180>)
 8011c34:	4858      	ldr	r0, [pc, #352]	; (8011d98 <netconn_recv_data+0x184>)
 8011c36:	f00d ff69 	bl	801fb0c <iprintf>
 8011c3a:	f06f 030f 	mvn.w	r3, #15
 8011c3e:	e0a2      	b.n	8011d86 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	2200      	movs	r2, #0
 8011c44:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d109      	bne.n	8011c60 <netconn_recv_data+0x4c>
 8011c4c:	4b50      	ldr	r3, [pc, #320]	; (8011d90 <netconn_recv_data+0x17c>)
 8011c4e:	f240 224a 	movw	r2, #586	; 0x24a
 8011c52:	4952      	ldr	r1, [pc, #328]	; (8011d9c <netconn_recv_data+0x188>)
 8011c54:	4850      	ldr	r0, [pc, #320]	; (8011d98 <netconn_recv_data+0x184>)
 8011c56:	f00d ff59 	bl	801fb0c <iprintf>
 8011c5a:	f06f 030f 	mvn.w	r3, #15
 8011c5e:	e092      	b.n	8011d86 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	3310      	adds	r3, #16
 8011c64:	4618      	mov	r0, r3
 8011c66:	f006 f9e8 	bl	801803a <sys_mbox_valid>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d10e      	bne.n	8011c8e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	f000 fad4 	bl	801221e <netconn_err>
 8011c76:	4603      	mov	r3, r0
 8011c78:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8011c7a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d002      	beq.n	8011c88 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8011c82:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011c86:	e07e      	b.n	8011d86 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8011c88:	f06f 030a 	mvn.w	r3, #10
 8011c8c:	e07b      	b.n	8011d86 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	7f1b      	ldrb	r3, [r3, #28]
 8011c92:	f003 0302 	and.w	r3, r3, #2
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d10f      	bne.n	8011cba <netconn_recv_data+0xa6>
 8011c9a:	79fb      	ldrb	r3, [r7, #7]
 8011c9c:	f003 0304 	and.w	r3, r3, #4
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d10a      	bne.n	8011cba <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	7f1b      	ldrb	r3, [r3, #28]
 8011ca8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d104      	bne.n	8011cba <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d023      	beq.n	8011d02 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	3310      	adds	r3, #16
 8011cbe:	f107 0218 	add.w	r2, r7, #24
 8011cc2:	4611      	mov	r1, r2
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f006 f99c 	bl	8018002 <sys_arch_mbox_tryfetch>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011cd0:	d11f      	bne.n	8011d12 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8011cd2:	68f8      	ldr	r0, [r7, #12]
 8011cd4:	f000 faa3 	bl	801221e <netconn_err>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8011cdc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d002      	beq.n	8011cea <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8011ce4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011ce8:	e04d      	b.n	8011d86 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	7f1b      	ldrb	r3, [r3, #28]
 8011cee:	f003 0301 	and.w	r3, r3, #1
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d002      	beq.n	8011cfc <netconn_recv_data+0xe8>
        return ERR_CONN;
 8011cf6:	f06f 030a 	mvn.w	r3, #10
 8011cfa:	e044      	b.n	8011d86 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8011cfc:	f06f 0306 	mvn.w	r3, #6
 8011d00:	e041      	b.n	8011d86 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	3310      	adds	r3, #16
 8011d06:	f107 0118 	add.w	r1, r7, #24
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f006 f939 	bl	8017f84 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d1a:	2b10      	cmp	r3, #16
 8011d1c:	d117      	bne.n	8011d4e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8011d1e:	69bb      	ldr	r3, [r7, #24]
 8011d20:	f107 0217 	add.w	r2, r7, #23
 8011d24:	4611      	mov	r1, r2
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 faca 	bl	80122c0 <lwip_netconn_is_err_msg>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d009      	beq.n	8011d46 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8011d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d36:	f113 0f0f 	cmn.w	r3, #15
 8011d3a:	d101      	bne.n	8011d40 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	e022      	b.n	8011d86 <netconn_recv_data+0x172>
      }
      return err;
 8011d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d44:	e01f      	b.n	8011d86 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8011d46:	69bb      	ldr	r3, [r7, #24]
 8011d48:	891b      	ldrh	r3, [r3, #8]
 8011d4a:	83fb      	strh	r3, [r7, #30]
 8011d4c:	e00d      	b.n	8011d6a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8011d4e:	69bb      	ldr	r3, [r7, #24]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d106      	bne.n	8011d62 <netconn_recv_data+0x14e>
 8011d54:	4b0e      	ldr	r3, [pc, #56]	; (8011d90 <netconn_recv_data+0x17c>)
 8011d56:	f240 2291 	movw	r2, #657	; 0x291
 8011d5a:	4911      	ldr	r1, [pc, #68]	; (8011da0 <netconn_recv_data+0x18c>)
 8011d5c:	480e      	ldr	r0, [pc, #56]	; (8011d98 <netconn_recv_data+0x184>)
 8011d5e:	f00d fed5 	bl	801fb0c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	891b      	ldrh	r3, [r3, #8]
 8011d68:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d005      	beq.n	8011d7e <netconn_recv_data+0x16a>
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d76:	8bfa      	ldrh	r2, [r7, #30]
 8011d78:	2101      	movs	r1, #1
 8011d7a:	68f8      	ldr	r0, [r7, #12]
 8011d7c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8011d7e:	69ba      	ldr	r2, [r7, #24]
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011d84:	2300      	movs	r3, #0
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3720      	adds	r7, #32
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	08020a30 	.word	0x08020a30
 8011d94:	08020c8c 	.word	0x08020c8c
 8011d98:	08020acc 	.word	0x08020acc
 8011d9c:	08020cac 	.word	0x08020cac
 8011da0:	08020cc8 	.word	0x08020cc8

08011da4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b084      	sub	sp, #16
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	60f8      	str	r0, [r7, #12]
 8011dac:	60b9      	str	r1, [r7, #8]
 8011dae:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d005      	beq.n	8011dc2 <netconn_tcp_recvd_msg+0x1e>
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011dbe:	2b10      	cmp	r3, #16
 8011dc0:	d009      	beq.n	8011dd6 <netconn_tcp_recvd_msg+0x32>
 8011dc2:	4b0c      	ldr	r3, [pc, #48]	; (8011df4 <netconn_tcp_recvd_msg+0x50>)
 8011dc4:	f240 22a7 	movw	r2, #679	; 0x2a7
 8011dc8:	490b      	ldr	r1, [pc, #44]	; (8011df8 <netconn_tcp_recvd_msg+0x54>)
 8011dca:	480c      	ldr	r0, [pc, #48]	; (8011dfc <netconn_tcp_recvd_msg+0x58>)
 8011dcc:	f00d fe9e 	bl	801fb0c <iprintf>
 8011dd0:	f06f 030f 	mvn.w	r3, #15
 8011dd4:	e00a      	b.n	8011dec <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	68fa      	ldr	r2, [r7, #12]
 8011dda:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	68ba      	ldr	r2, [r7, #8]
 8011de0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8011de2:	6879      	ldr	r1, [r7, #4]
 8011de4:	4806      	ldr	r0, [pc, #24]	; (8011e00 <netconn_tcp_recvd_msg+0x5c>)
 8011de6:	f7ff fd4d 	bl	8011884 <netconn_apimsg>
 8011dea:	4603      	mov	r3, r0
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	08020a30 	.word	0x08020a30
 8011df8:	08020cd4 	.word	0x08020cd4
 8011dfc:	08020acc 	.word	0x08020acc
 8011e00:	080133d5 	.word	0x080133d5

08011e04 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b090      	sub	sp, #64	; 0x40
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	60b9      	str	r1, [r7, #8]
 8011e0e:	4613      	mov	r3, r2
 8011e10:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	3310      	adds	r3, #16
 8011e16:	4618      	mov	r0, r3
 8011e18:	f006 f90f 	bl	801803a <sys_mbox_valid>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d102      	bne.n	8011e28 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8011e22:	f06f 030a 	mvn.w	r3, #10
 8011e26:	e06d      	b.n	8011f04 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	7f1b      	ldrb	r3, [r3, #28]
 8011e2c:	b25b      	sxtb	r3, r3
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	da07      	bge.n	8011e42 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	7f1b      	ldrb	r3, [r3, #28]
 8011e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e3a:	b2da      	uxtb	r2, r3
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011e40:	e039      	b.n	8011eb6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011e42:	79fb      	ldrb	r3, [r7, #7]
 8011e44:	461a      	mov	r2, r3
 8011e46:	68b9      	ldr	r1, [r7, #8]
 8011e48:	68f8      	ldr	r0, [r7, #12]
 8011e4a:	f7ff fee3 	bl	8011c14 <netconn_recv_data>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8011e54:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d002      	beq.n	8011e62 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8011e5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011e60:	e050      	b.n	8011f04 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8011e68:	79fb      	ldrb	r3, [r7, #7]
 8011e6a:	f003 0308 	and.w	r3, r3, #8
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d10e      	bne.n	8011e90 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d002      	beq.n	8011e7e <netconn_recv_data_tcp+0x7a>
 8011e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7a:	891b      	ldrh	r3, [r3, #8]
 8011e7c:	e000      	b.n	8011e80 <netconn_recv_data_tcp+0x7c>
 8011e7e:	2301      	movs	r3, #1
 8011e80:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011e82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011e84:	f107 0214 	add.w	r2, r7, #20
 8011e88:	4619      	mov	r1, r3
 8011e8a:	68f8      	ldr	r0, [r7, #12]
 8011e8c:	f7ff ff8a 	bl	8011da4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d134      	bne.n	8011f00 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8011e96:	79fb      	ldrb	r3, [r7, #7]
 8011e98:	f003 0310 	and.w	r3, r3, #16
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d009      	beq.n	8011eb4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	7f1b      	ldrb	r3, [r3, #28]
 8011ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ea8:	b2da      	uxtb	r2, r3
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8011eae:	f06f 0306 	mvn.w	r3, #6
 8011eb2:	e027      	b.n	8011f04 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8011eb4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d005      	beq.n	8011eca <netconn_recv_data_tcp+0xc6>
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	2101      	movs	r1, #1
 8011ec6:	68f8      	ldr	r0, [r7, #12]
 8011ec8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d10f      	bne.n	8011ef2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8011ed2:	68f8      	ldr	r0, [r7, #12]
 8011ed4:	f000 f9a3 	bl	801221e <netconn_err>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8011ede:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d002      	beq.n	8011eec <netconn_recv_data_tcp+0xe8>
          return err;
 8011ee6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011eea:	e00b      	b.n	8011f04 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8011eec:	f06f 030d 	mvn.w	r3, #13
 8011ef0:	e008      	b.n	8011f04 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011ef2:	2101      	movs	r1, #1
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f000 f955 	bl	80121a4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8011efa:	f06f 030e 	mvn.w	r3, #14
 8011efe:	e001      	b.n	8011f04 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011f00:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3740      	adds	r7, #64	; 0x40
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}

08011f0c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b086      	sub	sp, #24
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8011f16:	2300      	movs	r3, #0
 8011f18:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d109      	bne.n	8011f34 <netconn_recv+0x28>
 8011f20:	4b32      	ldr	r3, [pc, #200]	; (8011fec <netconn_recv+0xe0>)
 8011f22:	f240 3263 	movw	r2, #867	; 0x363
 8011f26:	4932      	ldr	r1, [pc, #200]	; (8011ff0 <netconn_recv+0xe4>)
 8011f28:	4832      	ldr	r0, [pc, #200]	; (8011ff4 <netconn_recv+0xe8>)
 8011f2a:	f00d fdef 	bl	801fb0c <iprintf>
 8011f2e:	f06f 030f 	mvn.w	r3, #15
 8011f32:	e056      	b.n	8011fe2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	2200      	movs	r2, #0
 8011f38:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d109      	bne.n	8011f54 <netconn_recv+0x48>
 8011f40:	4b2a      	ldr	r3, [pc, #168]	; (8011fec <netconn_recv+0xe0>)
 8011f42:	f240 3265 	movw	r2, #869	; 0x365
 8011f46:	492c      	ldr	r1, [pc, #176]	; (8011ff8 <netconn_recv+0xec>)
 8011f48:	482a      	ldr	r0, [pc, #168]	; (8011ff4 <netconn_recv+0xe8>)
 8011f4a:	f00d fddf 	bl	801fb0c <iprintf>
 8011f4e:	f06f 030f 	mvn.w	r3, #15
 8011f52:	e046      	b.n	8011fe2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f5c:	2b10      	cmp	r3, #16
 8011f5e:	d13a      	bne.n	8011fd6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011f60:	2300      	movs	r3, #0
 8011f62:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011f64:	2006      	movs	r0, #6
 8011f66:	f004 fdbb 	bl	8016ae0 <memp_malloc>
 8011f6a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d102      	bne.n	8011f78 <netconn_recv+0x6c>
      return ERR_MEM;
 8011f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f76:	e034      	b.n	8011fe2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011f78:	f107 030c 	add.w	r3, r7, #12
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	4619      	mov	r1, r3
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f7ff ff3f 	bl	8011e04 <netconn_recv_data_tcp>
 8011f86:	4603      	mov	r3, r0
 8011f88:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011f8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d006      	beq.n	8011fa0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8011f92:	6979      	ldr	r1, [r7, #20]
 8011f94:	2006      	movs	r0, #6
 8011f96:	f004 fe19 	bl	8016bcc <memp_free>
      return err;
 8011f9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f9e:	e020      	b.n	8011fe2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d106      	bne.n	8011fb4 <netconn_recv+0xa8>
 8011fa6:	4b11      	ldr	r3, [pc, #68]	; (8011fec <netconn_recv+0xe0>)
 8011fa8:	f240 3279 	movw	r2, #889	; 0x379
 8011fac:	4913      	ldr	r1, [pc, #76]	; (8011ffc <netconn_recv+0xf0>)
 8011fae:	4811      	ldr	r0, [pc, #68]	; (8011ff4 <netconn_recv+0xe8>)
 8011fb0:	f00d fdac 	bl	801fb0c <iprintf>

    buf->p = p;
 8011fb4:	68fa      	ldr	r2, [r7, #12]
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011fba:	68fa      	ldr	r2, [r7, #12]
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	697a      	ldr	r2, [r7, #20]
 8011fd0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	e005      	b.n	8011fe2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	6839      	ldr	r1, [r7, #0]
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7ff fe1a 	bl	8011c14 <netconn_recv_data>
 8011fe0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3718      	adds	r7, #24
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	08020a30 	.word	0x08020a30
 8011ff0:	08020c8c 	.word	0x08020c8c
 8011ff4:	08020acc 	.word	0x08020acc
 8011ff8:	08020cac 	.word	0x08020cac
 8011ffc:	08020d24 	.word	0x08020d24

08012000 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b088      	sub	sp, #32
 8012004:	af02      	add	r7, sp, #8
 8012006:	60f8      	str	r0, [r7, #12]
 8012008:	60b9      	str	r1, [r7, #8]
 801200a:	607a      	str	r2, [r7, #4]
 801200c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8012016:	78fa      	ldrb	r2, [r7, #3]
 8012018:	f107 0110 	add.w	r1, r7, #16
 801201c:	6a3b      	ldr	r3, [r7, #32]
 801201e:	9300      	str	r3, [sp, #0]
 8012020:	4613      	mov	r3, r2
 8012022:	2201      	movs	r2, #1
 8012024:	68f8      	ldr	r0, [r7, #12]
 8012026:	f000 f805 	bl	8012034 <netconn_write_vectors_partly>
 801202a:	4603      	mov	r3, r0
}
 801202c:	4618      	mov	r0, r3
 801202e:	3718      	adds	r7, #24
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b092      	sub	sp, #72	; 0x48
 8012038:	af00      	add	r7, sp, #0
 801203a:	60f8      	str	r0, [r7, #12]
 801203c:	60b9      	str	r1, [r7, #8]
 801203e:	4611      	mov	r1, r2
 8012040:	461a      	mov	r2, r3
 8012042:	460b      	mov	r3, r1
 8012044:	80fb      	strh	r3, [r7, #6]
 8012046:	4613      	mov	r3, r2
 8012048:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d109      	bne.n	8012064 <netconn_write_vectors_partly+0x30>
 8012050:	4b4e      	ldr	r3, [pc, #312]	; (801218c <netconn_write_vectors_partly+0x158>)
 8012052:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012056:	494e      	ldr	r1, [pc, #312]	; (8012190 <netconn_write_vectors_partly+0x15c>)
 8012058:	484e      	ldr	r0, [pc, #312]	; (8012194 <netconn_write_vectors_partly+0x160>)
 801205a:	f00d fd57 	bl	801fb0c <iprintf>
 801205e:	f06f 030f 	mvn.w	r3, #15
 8012062:	e08e      	b.n	8012182 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801206c:	2b10      	cmp	r3, #16
 801206e:	d009      	beq.n	8012084 <netconn_write_vectors_partly+0x50>
 8012070:	4b46      	ldr	r3, [pc, #280]	; (801218c <netconn_write_vectors_partly+0x158>)
 8012072:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8012076:	4948      	ldr	r1, [pc, #288]	; (8012198 <netconn_write_vectors_partly+0x164>)
 8012078:	4846      	ldr	r0, [pc, #280]	; (8012194 <netconn_write_vectors_partly+0x160>)
 801207a:	f00d fd47 	bl	801fb0c <iprintf>
 801207e:	f06f 0305 	mvn.w	r3, #5
 8012082:	e07e      	b.n	8012182 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	7f1b      	ldrb	r3, [r3, #28]
 8012088:	f003 0302 	and.w	r3, r3, #2
 801208c:	2b00      	cmp	r3, #0
 801208e:	d104      	bne.n	801209a <netconn_write_vectors_partly+0x66>
 8012090:	797b      	ldrb	r3, [r7, #5]
 8012092:	f003 0304 	and.w	r3, r3, #4
 8012096:	2b00      	cmp	r3, #0
 8012098:	d001      	beq.n	801209e <netconn_write_vectors_partly+0x6a>
 801209a:	2301      	movs	r3, #1
 801209c:	e000      	b.n	80120a0 <netconn_write_vectors_partly+0x6c>
 801209e:	2300      	movs	r3, #0
 80120a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80120a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d005      	beq.n	80120b8 <netconn_write_vectors_partly+0x84>
 80120ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d102      	bne.n	80120b8 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80120b2:	f06f 0305 	mvn.w	r3, #5
 80120b6:	e064      	b.n	8012182 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80120b8:	2300      	movs	r3, #0
 80120ba:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80120bc:	2300      	movs	r3, #0
 80120be:	643b      	str	r3, [r7, #64]	; 0x40
 80120c0:	e015      	b.n	80120ee <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80120c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120c4:	00db      	lsls	r3, r3, #3
 80120c6:	68ba      	ldr	r2, [r7, #8]
 80120c8:	4413      	add	r3, r2
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120ce:	4413      	add	r3, r2
 80120d0:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80120d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120d4:	00db      	lsls	r3, r3, #3
 80120d6:	68ba      	ldr	r2, [r7, #8]
 80120d8:	4413      	add	r3, r2
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120de:	429a      	cmp	r2, r3
 80120e0:	d202      	bcs.n	80120e8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80120e2:	f06f 0305 	mvn.w	r3, #5
 80120e6:	e04c      	b.n	8012182 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80120e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120ea:	3301      	adds	r3, #1
 80120ec:	643b      	str	r3, [r7, #64]	; 0x40
 80120ee:	88fb      	ldrh	r3, [r7, #6]
 80120f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80120f2:	429a      	cmp	r2, r3
 80120f4:	dbe5      	blt.n	80120c2 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80120f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d101      	bne.n	8012100 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80120fc:	2300      	movs	r3, #0
 80120fe:	e040      	b.n	8012182 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8012100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012102:	2b00      	cmp	r3, #0
 8012104:	da0a      	bge.n	801211c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8012106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012108:	2b00      	cmp	r3, #0
 801210a:	d102      	bne.n	8012112 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 801210c:	f06f 0305 	mvn.w	r3, #5
 8012110:	e037      	b.n	8012182 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8012112:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012116:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8012118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801211a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8012124:	88fb      	ldrh	r3, [r7, #6]
 8012126:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8012128:	2300      	movs	r3, #0
 801212a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 801212c:	797b      	ldrb	r3, [r7, #5]
 801212e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8012132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012134:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8012136:	2300      	movs	r3, #0
 8012138:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 801213a:	f107 0314 	add.w	r3, r7, #20
 801213e:	4619      	mov	r1, r3
 8012140:	4816      	ldr	r0, [pc, #88]	; (801219c <netconn_write_vectors_partly+0x168>)
 8012142:	f7ff fb9f 	bl	8011884 <netconn_apimsg>
 8012146:	4603      	mov	r3, r0
 8012148:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 801214c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012150:	2b00      	cmp	r3, #0
 8012152:	d114      	bne.n	801217e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8012154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012156:	2b00      	cmp	r3, #0
 8012158:	d002      	beq.n	8012160 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 801215a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801215c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801215e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8012160:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012164:	2b00      	cmp	r3, #0
 8012166:	d10a      	bne.n	801217e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8012168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801216a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801216c:	429a      	cmp	r2, r3
 801216e:	d006      	beq.n	801217e <netconn_write_vectors_partly+0x14a>
 8012170:	4b06      	ldr	r3, [pc, #24]	; (801218c <netconn_write_vectors_partly+0x158>)
 8012172:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012176:	490a      	ldr	r1, [pc, #40]	; (80121a0 <netconn_write_vectors_partly+0x16c>)
 8012178:	4806      	ldr	r0, [pc, #24]	; (8012194 <netconn_write_vectors_partly+0x160>)
 801217a:	f00d fcc7 	bl	801fb0c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 801217e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8012182:	4618      	mov	r0, r3
 8012184:	3748      	adds	r7, #72	; 0x48
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	08020a30 	.word	0x08020a30
 8012190:	08020d4c 	.word	0x08020d4c
 8012194:	08020acc 	.word	0x08020acc
 8012198:	08020d68 	.word	0x08020d68
 801219c:	080137dd 	.word	0x080137dd
 80121a0:	08020d8c 	.word	0x08020d8c

080121a4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b08c      	sub	sp, #48	; 0x30
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	460b      	mov	r3, r1
 80121ae:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d109      	bne.n	80121ca <netconn_close_shutdown+0x26>
 80121b6:	4b0f      	ldr	r3, [pc, #60]	; (80121f4 <netconn_close_shutdown+0x50>)
 80121b8:	f240 4247 	movw	r2, #1095	; 0x447
 80121bc:	490e      	ldr	r1, [pc, #56]	; (80121f8 <netconn_close_shutdown+0x54>)
 80121be:	480f      	ldr	r0, [pc, #60]	; (80121fc <netconn_close_shutdown+0x58>)
 80121c0:	f00d fca4 	bl	801fb0c <iprintf>
 80121c4:	f06f 030f 	mvn.w	r3, #15
 80121c8:	e010      	b.n	80121ec <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80121ce:	78fb      	ldrb	r3, [r7, #3]
 80121d0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80121d2:	2329      	movs	r3, #41	; 0x29
 80121d4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80121d6:	f107 030c 	add.w	r3, r7, #12
 80121da:	4619      	mov	r1, r3
 80121dc:	4808      	ldr	r0, [pc, #32]	; (8012200 <netconn_close_shutdown+0x5c>)
 80121de:	f7ff fb51 	bl	8011884 <netconn_apimsg>
 80121e2:	4603      	mov	r3, r0
 80121e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80121e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3730      	adds	r7, #48	; 0x30
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	08020a30 	.word	0x08020a30
 80121f8:	08020db0 	.word	0x08020db0
 80121fc:	08020acc 	.word	0x08020acc
 8012200:	080138f5 	.word	0x080138f5

08012204 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 801220c:	2103      	movs	r1, #3
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f7ff ffc8 	bl	80121a4 <netconn_close_shutdown>
 8012214:	4603      	mov	r3, r0
}
 8012216:	4618      	mov	r0, r3
 8012218:	3708      	adds	r7, #8
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}

0801221e <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 801221e:	b580      	push	{r7, lr}
 8012220:	b084      	sub	sp, #16
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d101      	bne.n	8012230 <netconn_err+0x12>
    return ERR_OK;
 801222c:	2300      	movs	r3, #0
 801222e:	e00d      	b.n	801224c <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8012230:	f006 f81e 	bl	8018270 <sys_arch_protect>
 8012234:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	7a1b      	ldrb	r3, [r3, #8]
 801223a:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2200      	movs	r2, #0
 8012240:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8012242:	68f8      	ldr	r0, [r7, #12]
 8012244:	f006 f822 	bl	801828c <sys_arch_unprotect>
  return err;
 8012248:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801224c:	4618      	mov	r0, r3
 801224e:	3710      	adds	r7, #16
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}

08012254 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	4603      	mov	r3, r0
 801225c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 801225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012262:	f113 0f0d 	cmn.w	r3, #13
 8012266:	d009      	beq.n	801227c <lwip_netconn_err_to_msg+0x28>
 8012268:	f113 0f0d 	cmn.w	r3, #13
 801226c:	dc0c      	bgt.n	8012288 <lwip_netconn_err_to_msg+0x34>
 801226e:	f113 0f0f 	cmn.w	r3, #15
 8012272:	d007      	beq.n	8012284 <lwip_netconn_err_to_msg+0x30>
 8012274:	f113 0f0e 	cmn.w	r3, #14
 8012278:	d002      	beq.n	8012280 <lwip_netconn_err_to_msg+0x2c>
 801227a:	e005      	b.n	8012288 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 801227c:	4b0a      	ldr	r3, [pc, #40]	; (80122a8 <lwip_netconn_err_to_msg+0x54>)
 801227e:	e00e      	b.n	801229e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8012280:	4b0a      	ldr	r3, [pc, #40]	; (80122ac <lwip_netconn_err_to_msg+0x58>)
 8012282:	e00c      	b.n	801229e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8012284:	4b0a      	ldr	r3, [pc, #40]	; (80122b0 <lwip_netconn_err_to_msg+0x5c>)
 8012286:	e00a      	b.n	801229e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8012288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d005      	beq.n	801229c <lwip_netconn_err_to_msg+0x48>
 8012290:	4b08      	ldr	r3, [pc, #32]	; (80122b4 <lwip_netconn_err_to_msg+0x60>)
 8012292:	227d      	movs	r2, #125	; 0x7d
 8012294:	4908      	ldr	r1, [pc, #32]	; (80122b8 <lwip_netconn_err_to_msg+0x64>)
 8012296:	4809      	ldr	r0, [pc, #36]	; (80122bc <lwip_netconn_err_to_msg+0x68>)
 8012298:	f00d fc38 	bl	801fb0c <iprintf>
      return NULL;
 801229c:	2300      	movs	r3, #0
  }
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3708      	adds	r7, #8
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}
 80122a6:	bf00      	nop
 80122a8:	08024412 	.word	0x08024412
 80122ac:	08024413 	.word	0x08024413
 80122b0:	08024414 	.word	0x08024414
 80122b4:	08020dcc 	.word	0x08020dcc
 80122b8:	08020e44 	.word	0x08020e44
 80122bc:	08020e54 	.word	0x08020e54

080122c0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b082      	sub	sp, #8
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
 80122c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d105      	bne.n	80122dc <lwip_netconn_is_err_msg+0x1c>
 80122d0:	4b12      	ldr	r3, [pc, #72]	; (801231c <lwip_netconn_is_err_msg+0x5c>)
 80122d2:	2285      	movs	r2, #133	; 0x85
 80122d4:	4912      	ldr	r1, [pc, #72]	; (8012320 <lwip_netconn_is_err_msg+0x60>)
 80122d6:	4813      	ldr	r0, [pc, #76]	; (8012324 <lwip_netconn_is_err_msg+0x64>)
 80122d8:	f00d fc18 	bl	801fb0c <iprintf>

  if (msg == &netconn_aborted) {
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	4a12      	ldr	r2, [pc, #72]	; (8012328 <lwip_netconn_is_err_msg+0x68>)
 80122e0:	4293      	cmp	r3, r2
 80122e2:	d104      	bne.n	80122ee <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	22f3      	movs	r2, #243	; 0xf3
 80122e8:	701a      	strb	r2, [r3, #0]
    return 1;
 80122ea:	2301      	movs	r3, #1
 80122ec:	e012      	b.n	8012314 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	4a0e      	ldr	r2, [pc, #56]	; (801232c <lwip_netconn_is_err_msg+0x6c>)
 80122f2:	4293      	cmp	r3, r2
 80122f4:	d104      	bne.n	8012300 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	22f2      	movs	r2, #242	; 0xf2
 80122fa:	701a      	strb	r2, [r3, #0]
    return 1;
 80122fc:	2301      	movs	r3, #1
 80122fe:	e009      	b.n	8012314 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	4a0b      	ldr	r2, [pc, #44]	; (8012330 <lwip_netconn_is_err_msg+0x70>)
 8012304:	4293      	cmp	r3, r2
 8012306:	d104      	bne.n	8012312 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	22f1      	movs	r2, #241	; 0xf1
 801230c:	701a      	strb	r2, [r3, #0]
    return 1;
 801230e:	2301      	movs	r3, #1
 8012310:	e000      	b.n	8012314 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8012312:	2300      	movs	r3, #0
}
 8012314:	4618      	mov	r0, r3
 8012316:	3708      	adds	r7, #8
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}
 801231c:	08020dcc 	.word	0x08020dcc
 8012320:	08020e7c 	.word	0x08020e7c
 8012324:	08020e54 	.word	0x08020e54
 8012328:	08024412 	.word	0x08024412
 801232c:	08024413 	.word	0x08024413
 8012330:	08024414 	.word	0x08024414

08012334 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b088      	sub	sp, #32
 8012338:	af00      	add	r7, sp, #0
 801233a:	60f8      	str	r0, [r7, #12]
 801233c:	60b9      	str	r1, [r7, #8]
 801233e:	607a      	str	r2, [r7, #4]
 8012340:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d105      	bne.n	8012354 <recv_udp+0x20>
 8012348:	4b34      	ldr	r3, [pc, #208]	; (801241c <recv_udp+0xe8>)
 801234a:	22e5      	movs	r2, #229	; 0xe5
 801234c:	4934      	ldr	r1, [pc, #208]	; (8012420 <recv_udp+0xec>)
 801234e:	4835      	ldr	r0, [pc, #212]	; (8012424 <recv_udp+0xf0>)
 8012350:	f00d fbdc 	bl	801fb0c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d105      	bne.n	8012366 <recv_udp+0x32>
 801235a:	4b30      	ldr	r3, [pc, #192]	; (801241c <recv_udp+0xe8>)
 801235c:	22e6      	movs	r2, #230	; 0xe6
 801235e:	4932      	ldr	r1, [pc, #200]	; (8012428 <recv_udp+0xf4>)
 8012360:	4830      	ldr	r0, [pc, #192]	; (8012424 <recv_udp+0xf0>)
 8012362:	f00d fbd3 	bl	801fb0c <iprintf>
  conn = (struct netconn *)arg;
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801236a:	69fb      	ldr	r3, [r7, #28]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d103      	bne.n	8012378 <recv_udp+0x44>
    pbuf_free(p);
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f005 fb1f 	bl	80179b4 <pbuf_free>
    return;
 8012376:	e04d      	b.n	8012414 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8012378:	69fb      	ldr	r3, [r7, #28]
 801237a:	685b      	ldr	r3, [r3, #4]
 801237c:	68ba      	ldr	r2, [r7, #8]
 801237e:	429a      	cmp	r2, r3
 8012380:	d005      	beq.n	801238e <recv_udp+0x5a>
 8012382:	4b26      	ldr	r3, [pc, #152]	; (801241c <recv_udp+0xe8>)
 8012384:	22ee      	movs	r2, #238	; 0xee
 8012386:	4929      	ldr	r1, [pc, #164]	; (801242c <recv_udp+0xf8>)
 8012388:	4826      	ldr	r0, [pc, #152]	; (8012424 <recv_udp+0xf0>)
 801238a:	f00d fbbf 	bl	801fb0c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	3310      	adds	r3, #16
 8012392:	4618      	mov	r0, r3
 8012394:	f005 fe51 	bl	801803a <sys_mbox_valid>
 8012398:	4603      	mov	r3, r0
 801239a:	2b00      	cmp	r3, #0
 801239c:	d103      	bne.n	80123a6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f005 fb08 	bl	80179b4 <pbuf_free>
    return;
 80123a4:	e036      	b.n	8012414 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80123a6:	2006      	movs	r0, #6
 80123a8:	f004 fb9a 	bl	8016ae0 <memp_malloc>
 80123ac:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80123ae:	69bb      	ldr	r3, [r7, #24]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d103      	bne.n	80123bc <recv_udp+0x88>
    pbuf_free(p);
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f005 fafd 	bl	80179b4 <pbuf_free>
    return;
 80123ba:	e02b      	b.n	8012414 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80123bc:	69bb      	ldr	r3, [r7, #24]
 80123be:	687a      	ldr	r2, [r7, #4]
 80123c0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	687a      	ldr	r2, [r7, #4]
 80123c6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d002      	beq.n	80123d4 <recv_udp+0xa0>
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	e000      	b.n	80123d6 <recv_udp+0xa2>
 80123d4:	2300      	movs	r3, #0
 80123d6:	69ba      	ldr	r2, [r7, #24]
 80123d8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80123da:	69bb      	ldr	r3, [r7, #24]
 80123dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80123de:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	891b      	ldrh	r3, [r3, #8]
 80123e4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	3310      	adds	r3, #16
 80123ea:	69b9      	ldr	r1, [r7, #24]
 80123ec:	4618      	mov	r0, r3
 80123ee:	f005 fdaf 	bl	8017f50 <sys_mbox_trypost>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d003      	beq.n	8012400 <recv_udp+0xcc>
    netbuf_delete(buf);
 80123f8:	69b8      	ldr	r0, [r7, #24]
 80123fa:	f004 fc11 	bl	8016c20 <netbuf_delete>
    return;
 80123fe:	e009      	b.n	8012414 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8012400:	69fb      	ldr	r3, [r7, #28]
 8012402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012404:	2b00      	cmp	r3, #0
 8012406:	d005      	beq.n	8012414 <recv_udp+0xe0>
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801240c:	8afa      	ldrh	r2, [r7, #22]
 801240e:	2100      	movs	r1, #0
 8012410:	69f8      	ldr	r0, [r7, #28]
 8012412:	4798      	blx	r3
  }
}
 8012414:	3720      	adds	r7, #32
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	08020dcc 	.word	0x08020dcc
 8012420:	08020e88 	.word	0x08020e88
 8012424:	08020e54 	.word	0x08020e54
 8012428:	08020eac 	.word	0x08020eac
 801242c:	08020ecc 	.word	0x08020ecc

08012430 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b088      	sub	sp, #32
 8012434:	af00      	add	r7, sp, #0
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	60b9      	str	r1, [r7, #8]
 801243a:	607a      	str	r2, [r7, #4]
 801243c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d106      	bne.n	8012452 <recv_tcp+0x22>
 8012444:	4b36      	ldr	r3, [pc, #216]	; (8012520 <recv_tcp+0xf0>)
 8012446:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801244a:	4936      	ldr	r1, [pc, #216]	; (8012524 <recv_tcp+0xf4>)
 801244c:	4836      	ldr	r0, [pc, #216]	; (8012528 <recv_tcp+0xf8>)
 801244e:	f00d fb5d 	bl	801fb0c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d106      	bne.n	8012466 <recv_tcp+0x36>
 8012458:	4b31      	ldr	r3, [pc, #196]	; (8012520 <recv_tcp+0xf0>)
 801245a:	f240 122d 	movw	r2, #301	; 0x12d
 801245e:	4933      	ldr	r1, [pc, #204]	; (801252c <recv_tcp+0xfc>)
 8012460:	4831      	ldr	r0, [pc, #196]	; (8012528 <recv_tcp+0xf8>)
 8012462:	f00d fb53 	bl	801fb0c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8012466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d006      	beq.n	801247c <recv_tcp+0x4c>
 801246e:	4b2c      	ldr	r3, [pc, #176]	; (8012520 <recv_tcp+0xf0>)
 8012470:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8012474:	492e      	ldr	r1, [pc, #184]	; (8012530 <recv_tcp+0x100>)
 8012476:	482c      	ldr	r0, [pc, #176]	; (8012528 <recv_tcp+0xf8>)
 8012478:	f00d fb48 	bl	801fb0c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d102      	bne.n	801248c <recv_tcp+0x5c>
    return ERR_VAL;
 8012486:	f06f 0305 	mvn.w	r3, #5
 801248a:	e045      	b.n	8012518 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	685b      	ldr	r3, [r3, #4]
 8012490:	68ba      	ldr	r2, [r7, #8]
 8012492:	429a      	cmp	r2, r3
 8012494:	d006      	beq.n	80124a4 <recv_tcp+0x74>
 8012496:	4b22      	ldr	r3, [pc, #136]	; (8012520 <recv_tcp+0xf0>)
 8012498:	f240 1235 	movw	r2, #309	; 0x135
 801249c:	4925      	ldr	r1, [pc, #148]	; (8012534 <recv_tcp+0x104>)
 801249e:	4822      	ldr	r0, [pc, #136]	; (8012528 <recv_tcp+0xf8>)
 80124a0:	f00d fb34 	bl	801fb0c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	3310      	adds	r3, #16
 80124a8:	4618      	mov	r0, r3
 80124aa:	f005 fdc6 	bl	801803a <sys_mbox_valid>
 80124ae:	4603      	mov	r3, r0
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d10d      	bne.n	80124d0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d008      	beq.n	80124cc <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	891b      	ldrh	r3, [r3, #8]
 80124be:	4619      	mov	r1, r3
 80124c0:	68b8      	ldr	r0, [r7, #8]
 80124c2:	f006 fc11 	bl	8018ce8 <tcp_recved>
      pbuf_free(p);
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f005 fa74 	bl	80179b4 <pbuf_free>
    }
    return ERR_OK;
 80124cc:	2300      	movs	r3, #0
 80124ce:	e023      	b.n	8012518 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d005      	beq.n	80124e2 <recv_tcp+0xb2>
    msg = p;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	891b      	ldrh	r3, [r3, #8]
 80124de:	83fb      	strh	r3, [r7, #30]
 80124e0:	e003      	b.n	80124ea <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80124e2:	4b15      	ldr	r3, [pc, #84]	; (8012538 <recv_tcp+0x108>)
 80124e4:	61bb      	str	r3, [r7, #24]
    len = 0;
 80124e6:	2300      	movs	r3, #0
 80124e8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	3310      	adds	r3, #16
 80124ee:	69b9      	ldr	r1, [r7, #24]
 80124f0:	4618      	mov	r0, r3
 80124f2:	f005 fd2d 	bl	8017f50 <sys_mbox_trypost>
 80124f6:	4603      	mov	r3, r0
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d002      	beq.n	8012502 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80124fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012500:	e00a      	b.n	8012518 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012506:	2b00      	cmp	r3, #0
 8012508:	d005      	beq.n	8012516 <recv_tcp+0xe6>
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801250e:	8bfa      	ldrh	r2, [r7, #30]
 8012510:	2100      	movs	r1, #0
 8012512:	6978      	ldr	r0, [r7, #20]
 8012514:	4798      	blx	r3
  }

  return ERR_OK;
 8012516:	2300      	movs	r3, #0
}
 8012518:	4618      	mov	r0, r3
 801251a:	3720      	adds	r7, #32
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}
 8012520:	08020dcc 	.word	0x08020dcc
 8012524:	08020eec 	.word	0x08020eec
 8012528:	08020e54 	.word	0x08020e54
 801252c:	08020f10 	.word	0x08020f10
 8012530:	08020f30 	.word	0x08020f30
 8012534:	08020f48 	.word	0x08020f48
 8012538:	08024414 	.word	0x08024414

0801253c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b084      	sub	sp, #16
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d106      	bne.n	801255e <poll_tcp+0x22>
 8012550:	4b2a      	ldr	r3, [pc, #168]	; (80125fc <poll_tcp+0xc0>)
 8012552:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8012556:	492a      	ldr	r1, [pc, #168]	; (8012600 <poll_tcp+0xc4>)
 8012558:	482a      	ldr	r0, [pc, #168]	; (8012604 <poll_tcp+0xc8>)
 801255a:	f00d fad7 	bl	801fb0c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	785b      	ldrb	r3, [r3, #1]
 8012562:	2b01      	cmp	r3, #1
 8012564:	d104      	bne.n	8012570 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8012566:	2101      	movs	r1, #1
 8012568:	68f8      	ldr	r0, [r7, #12]
 801256a:	f000 ff69 	bl	8013440 <lwip_netconn_do_writemore>
 801256e:	e016      	b.n	801259e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	785b      	ldrb	r3, [r3, #1]
 8012574:	2b04      	cmp	r3, #4
 8012576:	d112      	bne.n	801259e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	6a1b      	ldr	r3, [r3, #32]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d00a      	beq.n	8012596 <poll_tcp+0x5a>
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	6a1b      	ldr	r3, [r3, #32]
 8012584:	7a5b      	ldrb	r3, [r3, #9]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d005      	beq.n	8012596 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	6a1b      	ldr	r3, [r3, #32]
 801258e:	7a5a      	ldrb	r2, [r3, #9]
 8012590:	3a01      	subs	r2, #1
 8012592:	b2d2      	uxtb	r2, r2
 8012594:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8012596:	2101      	movs	r1, #1
 8012598:	68f8      	ldr	r0, [r7, #12]
 801259a:	f000 fbfb 	bl	8012d94 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	7f1b      	ldrb	r3, [r3, #28]
 80125a2:	f003 0310 	and.w	r3, r3, #16
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d022      	beq.n	80125f0 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	685b      	ldr	r3, [r3, #4]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d01e      	beq.n	80125f0 <poll_tcp+0xb4>
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80125ba:	f640 3269 	movw	r2, #2921	; 0xb69
 80125be:	4293      	cmp	r3, r2
 80125c0:	d916      	bls.n	80125f0 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80125ca:	2b07      	cmp	r3, #7
 80125cc:	d810      	bhi.n	80125f0 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	7f1b      	ldrb	r3, [r3, #28]
 80125d2:	f023 0310 	bic.w	r3, r3, #16
 80125d6:	b2da      	uxtb	r2, r3
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d005      	beq.n	80125f0 <poll_tcp+0xb4>
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e8:	2200      	movs	r2, #0
 80125ea:	2102      	movs	r1, #2
 80125ec:	68f8      	ldr	r0, [r7, #12]
 80125ee:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80125f0:	2300      	movs	r3, #0
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3710      	adds	r7, #16
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop
 80125fc:	08020dcc 	.word	0x08020dcc
 8012600:	08020f68 	.word	0x08020f68
 8012604:	08020e54 	.word	0x08020e54

08012608 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b086      	sub	sp, #24
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	4613      	mov	r3, r2
 8012614:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d106      	bne.n	801262e <sent_tcp+0x26>
 8012620:	4b21      	ldr	r3, [pc, #132]	; (80126a8 <sent_tcp+0xa0>)
 8012622:	f240 1293 	movw	r2, #403	; 0x193
 8012626:	4921      	ldr	r1, [pc, #132]	; (80126ac <sent_tcp+0xa4>)
 8012628:	4821      	ldr	r0, [pc, #132]	; (80126b0 <sent_tcp+0xa8>)
 801262a:	f00d fa6f 	bl	801fb0c <iprintf>

  if (conn) {
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d033      	beq.n	801269c <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	785b      	ldrb	r3, [r3, #1]
 8012638:	2b01      	cmp	r3, #1
 801263a:	d104      	bne.n	8012646 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801263c:	2101      	movs	r1, #1
 801263e:	6978      	ldr	r0, [r7, #20]
 8012640:	f000 fefe 	bl	8013440 <lwip_netconn_do_writemore>
 8012644:	e007      	b.n	8012656 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	785b      	ldrb	r3, [r3, #1]
 801264a:	2b04      	cmp	r3, #4
 801264c:	d103      	bne.n	8012656 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801264e:	2101      	movs	r1, #1
 8012650:	6978      	ldr	r0, [r7, #20]
 8012652:	f000 fb9f 	bl	8012d94 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d01e      	beq.n	801269c <sent_tcp+0x94>
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012666:	f640 3269 	movw	r2, #2921	; 0xb69
 801266a:	4293      	cmp	r3, r2
 801266c:	d916      	bls.n	801269c <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012676:	2b07      	cmp	r3, #7
 8012678:	d810      	bhi.n	801269c <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	7f1b      	ldrb	r3, [r3, #28]
 801267e:	f023 0310 	bic.w	r3, r3, #16
 8012682:	b2da      	uxtb	r2, r3
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801268c:	2b00      	cmp	r3, #0
 801268e:	d005      	beq.n	801269c <sent_tcp+0x94>
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012694:	88fa      	ldrh	r2, [r7, #6]
 8012696:	2102      	movs	r1, #2
 8012698:	6978      	ldr	r0, [r7, #20]
 801269a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801269c:	2300      	movs	r3, #0
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3718      	adds	r7, #24
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	08020dcc 	.word	0x08020dcc
 80126ac:	08020f68 	.word	0x08020f68
 80126b0:	08020e54 	.word	0x08020e54

080126b4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b088      	sub	sp, #32
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
 80126bc:	460b      	mov	r3, r1
 80126be:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d106      	bne.n	80126d8 <err_tcp+0x24>
 80126ca:	4b5f      	ldr	r3, [pc, #380]	; (8012848 <err_tcp+0x194>)
 80126cc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80126d0:	495e      	ldr	r1, [pc, #376]	; (801284c <err_tcp+0x198>)
 80126d2:	485f      	ldr	r0, [pc, #380]	; (8012850 <err_tcp+0x19c>)
 80126d4:	f00d fa1a 	bl	801fb0c <iprintf>

  SYS_ARCH_PROTECT(lev);
 80126d8:	f005 fdca 	bl	8018270 <sys_arch_protect>
 80126dc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80126de:	69fb      	ldr	r3, [r7, #28]
 80126e0:	2200      	movs	r2, #0
 80126e2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80126e4:	69fb      	ldr	r3, [r7, #28]
 80126e6:	78fa      	ldrb	r2, [r7, #3]
 80126e8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	7f1b      	ldrb	r3, [r3, #28]
 80126ee:	f043 0301 	orr.w	r3, r3, #1
 80126f2:	b2da      	uxtb	r2, r3
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	785b      	ldrb	r3, [r3, #1]
 80126fc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	2200      	movs	r2, #0
 8012702:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8012704:	69b8      	ldr	r0, [r7, #24]
 8012706:	f005 fdc1 	bl	801828c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801270a:	69fb      	ldr	r3, [r7, #28]
 801270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801270e:	2b00      	cmp	r3, #0
 8012710:	d005      	beq.n	801271e <err_tcp+0x6a>
 8012712:	69fb      	ldr	r3, [r7, #28]
 8012714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012716:	2200      	movs	r2, #0
 8012718:	2104      	movs	r1, #4
 801271a:	69f8      	ldr	r0, [r7, #28]
 801271c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801271e:	69fb      	ldr	r3, [r7, #28]
 8012720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012722:	2b00      	cmp	r3, #0
 8012724:	d005      	beq.n	8012732 <err_tcp+0x7e>
 8012726:	69fb      	ldr	r3, [r7, #28]
 8012728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801272a:	2200      	movs	r2, #0
 801272c:	2100      	movs	r1, #0
 801272e:	69f8      	ldr	r0, [r7, #28]
 8012730:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012736:	2b00      	cmp	r3, #0
 8012738:	d005      	beq.n	8012746 <err_tcp+0x92>
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801273e:	2200      	movs	r2, #0
 8012740:	2102      	movs	r1, #2
 8012742:	69f8      	ldr	r0, [r7, #28]
 8012744:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8012746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801274a:	4618      	mov	r0, r3
 801274c:	f7ff fd82 	bl	8012254 <lwip_netconn_err_to_msg>
 8012750:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8012752:	69fb      	ldr	r3, [r7, #28]
 8012754:	3310      	adds	r3, #16
 8012756:	4618      	mov	r0, r3
 8012758:	f005 fc6f 	bl	801803a <sys_mbox_valid>
 801275c:	4603      	mov	r3, r0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d005      	beq.n	801276e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	3310      	adds	r3, #16
 8012766:	6939      	ldr	r1, [r7, #16]
 8012768:	4618      	mov	r0, r3
 801276a:	f005 fbf1 	bl	8017f50 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801276e:	69fb      	ldr	r3, [r7, #28]
 8012770:	3314      	adds	r3, #20
 8012772:	4618      	mov	r0, r3
 8012774:	f005 fc61 	bl	801803a <sys_mbox_valid>
 8012778:	4603      	mov	r3, r0
 801277a:	2b00      	cmp	r3, #0
 801277c:	d005      	beq.n	801278a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801277e:	69fb      	ldr	r3, [r7, #28]
 8012780:	3314      	adds	r3, #20
 8012782:	6939      	ldr	r1, [r7, #16]
 8012784:	4618      	mov	r0, r3
 8012786:	f005 fbe3 	bl	8017f50 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801278a:	7dfb      	ldrb	r3, [r7, #23]
 801278c:	2b01      	cmp	r3, #1
 801278e:	d005      	beq.n	801279c <err_tcp+0xe8>
 8012790:	7dfb      	ldrb	r3, [r7, #23]
 8012792:	2b04      	cmp	r3, #4
 8012794:	d002      	beq.n	801279c <err_tcp+0xe8>
 8012796:	7dfb      	ldrb	r3, [r7, #23]
 8012798:	2b03      	cmp	r3, #3
 801279a:	d143      	bne.n	8012824 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	7f1b      	ldrb	r3, [r3, #28]
 80127a0:	f003 0304 	and.w	r3, r3, #4
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	bf14      	ite	ne
 80127a8:	2301      	movne	r3, #1
 80127aa:	2300      	moveq	r3, #0
 80127ac:	b2db      	uxtb	r3, r3
 80127ae:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80127b0:	69fb      	ldr	r3, [r7, #28]
 80127b2:	7f1b      	ldrb	r3, [r3, #28]
 80127b4:	f023 0304 	bic.w	r3, r3, #4
 80127b8:	b2da      	uxtb	r2, r3
 80127ba:	69fb      	ldr	r3, [r7, #28]
 80127bc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d13b      	bne.n	801283c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	6a1b      	ldr	r3, [r3, #32]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d106      	bne.n	80127da <err_tcp+0x126>
 80127cc:	4b1e      	ldr	r3, [pc, #120]	; (8012848 <err_tcp+0x194>)
 80127ce:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80127d2:	4920      	ldr	r1, [pc, #128]	; (8012854 <err_tcp+0x1a0>)
 80127d4:	481e      	ldr	r0, [pc, #120]	; (8012850 <err_tcp+0x19c>)
 80127d6:	f00d f999 	bl	801fb0c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80127da:	7dfb      	ldrb	r3, [r7, #23]
 80127dc:	2b04      	cmp	r3, #4
 80127de:	d104      	bne.n	80127ea <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	6a1b      	ldr	r3, [r3, #32]
 80127e4:	2200      	movs	r2, #0
 80127e6:	711a      	strb	r2, [r3, #4]
 80127e8:	e003      	b.n	80127f2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	6a1b      	ldr	r3, [r3, #32]
 80127ee:	78fa      	ldrb	r2, [r7, #3]
 80127f0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80127f2:	69fb      	ldr	r3, [r7, #28]
 80127f4:	6a1b      	ldr	r3, [r3, #32]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	330c      	adds	r3, #12
 80127fa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80127fc:	68b8      	ldr	r0, [r7, #8]
 80127fe:	f005 fcad 	bl	801815c <sys_sem_valid>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d106      	bne.n	8012816 <err_tcp+0x162>
 8012808:	4b0f      	ldr	r3, [pc, #60]	; (8012848 <err_tcp+0x194>)
 801280a:	f240 12ef 	movw	r2, #495	; 0x1ef
 801280e:	4912      	ldr	r1, [pc, #72]	; (8012858 <err_tcp+0x1a4>)
 8012810:	480f      	ldr	r0, [pc, #60]	; (8012850 <err_tcp+0x19c>)
 8012812:	f00d f97b 	bl	801fb0c <iprintf>
      conn->current_msg = NULL;
 8012816:	69fb      	ldr	r3, [r7, #28]
 8012818:	2200      	movs	r2, #0
 801281a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 801281c:	68b8      	ldr	r0, [r7, #8]
 801281e:	f005 fc83 	bl	8018128 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8012822:	e00b      	b.n	801283c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	6a1b      	ldr	r3, [r3, #32]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d008      	beq.n	801283e <err_tcp+0x18a>
 801282c:	4b06      	ldr	r3, [pc, #24]	; (8012848 <err_tcp+0x194>)
 801282e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8012832:	490a      	ldr	r1, [pc, #40]	; (801285c <err_tcp+0x1a8>)
 8012834:	4806      	ldr	r0, [pc, #24]	; (8012850 <err_tcp+0x19c>)
 8012836:	f00d f969 	bl	801fb0c <iprintf>
  }
}
 801283a:	e000      	b.n	801283e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 801283c:	bf00      	nop
}
 801283e:	bf00      	nop
 8012840:	3720      	adds	r7, #32
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	08020dcc 	.word	0x08020dcc
 801284c:	08020f68 	.word	0x08020f68
 8012850:	08020e54 	.word	0x08020e54
 8012854:	08020f78 	.word	0x08020f78
 8012858:	08020f94 	.word	0x08020f94
 801285c:	08020fb0 	.word	0x08020fb0

08012860 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b084      	sub	sp, #16
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	685b      	ldr	r3, [r3, #4]
 801286c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801286e:	6879      	ldr	r1, [r7, #4]
 8012870:	68f8      	ldr	r0, [r7, #12]
 8012872:	f007 f903 	bl	8019a7c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8012876:	490a      	ldr	r1, [pc, #40]	; (80128a0 <setup_tcp+0x40>)
 8012878:	68f8      	ldr	r0, [r7, #12]
 801287a:	f007 f911 	bl	8019aa0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801287e:	4909      	ldr	r1, [pc, #36]	; (80128a4 <setup_tcp+0x44>)
 8012880:	68f8      	ldr	r0, [r7, #12]
 8012882:	f007 f92f 	bl	8019ae4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8012886:	2202      	movs	r2, #2
 8012888:	4907      	ldr	r1, [pc, #28]	; (80128a8 <setup_tcp+0x48>)
 801288a:	68f8      	ldr	r0, [r7, #12]
 801288c:	f007 f986 	bl	8019b9c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8012890:	4906      	ldr	r1, [pc, #24]	; (80128ac <setup_tcp+0x4c>)
 8012892:	68f8      	ldr	r0, [r7, #12]
 8012894:	f007 f948 	bl	8019b28 <tcp_err>
}
 8012898:	bf00      	nop
 801289a:	3710      	adds	r7, #16
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	08012431 	.word	0x08012431
 80128a4:	08012609 	.word	0x08012609
 80128a8:	0801253d 	.word	0x0801253d
 80128ac:	080126b5 	.word	0x080126b5

080128b0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80128b0:	b590      	push	{r4, r7, lr}
 80128b2:	b089      	sub	sp, #36	; 0x24
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	60f8      	str	r0, [r7, #12]
 80128b8:	60b9      	str	r1, [r7, #8]
 80128ba:	4613      	mov	r3, r2
 80128bc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80128c2:	69fb      	ldr	r3, [r7, #28]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d102      	bne.n	80128ce <accept_function+0x1e>
    return ERR_VAL;
 80128c8:	f06f 0305 	mvn.w	r3, #5
 80128cc:	e0a1      	b.n	8012a12 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80128ce:	69fb      	ldr	r3, [r7, #28]
 80128d0:	3314      	adds	r3, #20
 80128d2:	4618      	mov	r0, r3
 80128d4:	f005 fbb1 	bl	801803a <sys_mbox_valid>
 80128d8:	4603      	mov	r3, r0
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d102      	bne.n	80128e4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80128de:	f06f 0305 	mvn.w	r3, #5
 80128e2:	e096      	b.n	8012a12 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d11b      	bne.n	8012922 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80128ea:	69fb      	ldr	r3, [r7, #28]
 80128ec:	f103 0414 	add.w	r4, r3, #20
 80128f0:	f06f 000c 	mvn.w	r0, #12
 80128f4:	f7ff fcae 	bl	8012254 <lwip_netconn_err_to_msg>
 80128f8:	4603      	mov	r3, r0
 80128fa:	4619      	mov	r1, r3
 80128fc:	4620      	mov	r0, r4
 80128fe:	f005 fb27 	bl	8017f50 <sys_mbox_trypost>
 8012902:	4603      	mov	r3, r0
 8012904:	2b00      	cmp	r3, #0
 8012906:	d109      	bne.n	801291c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801290c:	2b00      	cmp	r3, #0
 801290e:	d005      	beq.n	801291c <accept_function+0x6c>
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012914:	2200      	movs	r2, #0
 8012916:	2100      	movs	r1, #0
 8012918:	69f8      	ldr	r0, [r7, #28]
 801291a:	4798      	blx	r3
    }
    return ERR_VAL;
 801291c:	f06f 0305 	mvn.w	r3, #5
 8012920:	e077      	b.n	8012a12 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8012922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d006      	beq.n	8012938 <accept_function+0x88>
 801292a:	4b3c      	ldr	r3, [pc, #240]	; (8012a1c <accept_function+0x16c>)
 801292c:	f240 222a 	movw	r2, #554	; 0x22a
 8012930:	493b      	ldr	r1, [pc, #236]	; (8012a20 <accept_function+0x170>)
 8012932:	483c      	ldr	r0, [pc, #240]	; (8012a24 <accept_function+0x174>)
 8012934:	f00d f8ea 	bl	801fb0c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	781a      	ldrb	r2, [r3, #0]
 801293c:	69fb      	ldr	r3, [r7, #28]
 801293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012940:	4619      	mov	r1, r3
 8012942:	4610      	mov	r0, r2
 8012944:	f000 f8f0 	bl	8012b28 <netconn_alloc>
 8012948:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 801294a:	69bb      	ldr	r3, [r7, #24]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d11b      	bne.n	8012988 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8012950:	69fb      	ldr	r3, [r7, #28]
 8012952:	f103 0414 	add.w	r4, r3, #20
 8012956:	f06f 000c 	mvn.w	r0, #12
 801295a:	f7ff fc7b 	bl	8012254 <lwip_netconn_err_to_msg>
 801295e:	4603      	mov	r3, r0
 8012960:	4619      	mov	r1, r3
 8012962:	4620      	mov	r0, r4
 8012964:	f005 faf4 	bl	8017f50 <sys_mbox_trypost>
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d109      	bne.n	8012982 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801296e:	69fb      	ldr	r3, [r7, #28]
 8012970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012972:	2b00      	cmp	r3, #0
 8012974:	d005      	beq.n	8012982 <accept_function+0xd2>
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801297a:	2200      	movs	r2, #0
 801297c:	2100      	movs	r1, #0
 801297e:	69f8      	ldr	r0, [r7, #28]
 8012980:	4798      	blx	r3
    }
    return ERR_MEM;
 8012982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012986:	e044      	b.n	8012a12 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8012988:	69bb      	ldr	r3, [r7, #24]
 801298a:	68ba      	ldr	r2, [r7, #8]
 801298c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 801298e:	69b8      	ldr	r0, [r7, #24]
 8012990:	f7ff ff66 	bl	8012860 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	3314      	adds	r3, #20
 8012998:	69b9      	ldr	r1, [r7, #24]
 801299a:	4618      	mov	r0, r3
 801299c:	f005 fad8 	bl	8017f50 <sys_mbox_trypost>
 80129a0:	4603      	mov	r3, r0
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d02a      	beq.n	80129fc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80129a6:	69bb      	ldr	r3, [r7, #24]
 80129a8:	685b      	ldr	r3, [r3, #4]
 80129aa:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80129ac:	2100      	movs	r1, #0
 80129ae:	6978      	ldr	r0, [r7, #20]
 80129b0:	f007 f864 	bl	8019a7c <tcp_arg>
    tcp_recv(pcb, NULL);
 80129b4:	2100      	movs	r1, #0
 80129b6:	6978      	ldr	r0, [r7, #20]
 80129b8:	f007 f872 	bl	8019aa0 <tcp_recv>
    tcp_sent(pcb, NULL);
 80129bc:	2100      	movs	r1, #0
 80129be:	6978      	ldr	r0, [r7, #20]
 80129c0:	f007 f890 	bl	8019ae4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80129c4:	2200      	movs	r2, #0
 80129c6:	2100      	movs	r1, #0
 80129c8:	6978      	ldr	r0, [r7, #20]
 80129ca:	f007 f8e7 	bl	8019b9c <tcp_poll>
    tcp_err(pcb, NULL);
 80129ce:	2100      	movs	r1, #0
 80129d0:	6978      	ldr	r0, [r7, #20]
 80129d2:	f007 f8a9 	bl	8019b28 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80129d6:	69bb      	ldr	r3, [r7, #24]
 80129d8:	2200      	movs	r2, #0
 80129da:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80129dc:	69bb      	ldr	r3, [r7, #24]
 80129de:	3310      	adds	r3, #16
 80129e0:	4618      	mov	r0, r3
 80129e2:	f005 faa3 	bl	8017f2c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80129e6:	69bb      	ldr	r3, [r7, #24]
 80129e8:	3310      	adds	r3, #16
 80129ea:	4618      	mov	r0, r3
 80129ec:	f005 fb36 	bl	801805c <sys_mbox_set_invalid>
    netconn_free(newconn);
 80129f0:	69b8      	ldr	r0, [r7, #24]
 80129f2:	f000 f907 	bl	8012c04 <netconn_free>
    return ERR_MEM;
 80129f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129fa:	e00a      	b.n	8012a12 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80129fc:	69fb      	ldr	r3, [r7, #28]
 80129fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d005      	beq.n	8012a10 <accept_function+0x160>
 8012a04:	69fb      	ldr	r3, [r7, #28]
 8012a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a08:	2200      	movs	r2, #0
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	69f8      	ldr	r0, [r7, #28]
 8012a0e:	4798      	blx	r3
  }

  return ERR_OK;
 8012a10:	2300      	movs	r3, #0
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	3724      	adds	r7, #36	; 0x24
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd90      	pop	{r4, r7, pc}
 8012a1a:	bf00      	nop
 8012a1c:	08020dcc 	.word	0x08020dcc
 8012a20:	08020fcc 	.word	0x08020fcc
 8012a24:	08020e54 	.word	0x08020e54

08012a28 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8012a28:	b590      	push	{r4, r7, lr}
 8012a2a:	b085      	sub	sp, #20
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8012a30:	2300      	movs	r3, #0
 8012a32:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d006      	beq.n	8012a4c <pcb_new+0x24>
 8012a3e:	4b2b      	ldr	r3, [pc, #172]	; (8012aec <pcb_new+0xc4>)
 8012a40:	f240 2265 	movw	r2, #613	; 0x265
 8012a44:	492a      	ldr	r1, [pc, #168]	; (8012af0 <pcb_new+0xc8>)
 8012a46:	482b      	ldr	r0, [pc, #172]	; (8012af4 <pcb_new+0xcc>)
 8012a48:	f00d f860 	bl	801fb0c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a56:	2b10      	cmp	r3, #16
 8012a58:	d022      	beq.n	8012aa0 <pcb_new+0x78>
 8012a5a:	2b20      	cmp	r3, #32
 8012a5c:	d133      	bne.n	8012ac6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681c      	ldr	r4, [r3, #0]
 8012a62:	7bfb      	ldrb	r3, [r7, #15]
 8012a64:	4618      	mov	r0, r3
 8012a66:	f00c faa0 	bl	801efaa <udp_new_ip_type>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d02a      	beq.n	8012ace <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	2b22      	cmp	r3, #34	; 0x22
 8012a80:	d104      	bne.n	8012a8c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	2201      	movs	r2, #1
 8012a8a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	6858      	ldr	r0, [r3, #4]
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	461a      	mov	r2, r3
 8012a98:	4917      	ldr	r1, [pc, #92]	; (8012af8 <pcb_new+0xd0>)
 8012a9a:	f00c fa0d 	bl	801eeb8 <udp_recv>
      }
      break;
 8012a9e:	e016      	b.n	8012ace <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681c      	ldr	r4, [r3, #0]
 8012aa4:	7bfb      	ldrb	r3, [r7, #15]
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f006 ffda 	bl	8019a60 <tcp_new_ip_type>
 8012aac:	4603      	mov	r3, r0
 8012aae:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d00b      	beq.n	8012ad2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7ff fece 	bl	8012860 <setup_tcp>
      }
      break;
 8012ac4:	e005      	b.n	8012ad2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	22fa      	movs	r2, #250	; 0xfa
 8012aca:	711a      	strb	r2, [r3, #4]
      return;
 8012acc:	e00a      	b.n	8012ae4 <pcb_new+0xbc>
      break;
 8012ace:	bf00      	nop
 8012ad0:	e000      	b.n	8012ad4 <pcb_new+0xac>
      break;
 8012ad2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d102      	bne.n	8012ae4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	22ff      	movs	r2, #255	; 0xff
 8012ae2:	711a      	strb	r2, [r3, #4]
  }
}
 8012ae4:	3714      	adds	r7, #20
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd90      	pop	{r4, r7, pc}
 8012aea:	bf00      	nop
 8012aec:	08020dcc 	.word	0x08020dcc
 8012af0:	08020ff4 	.word	0x08020ff4
 8012af4:	08020e54 	.word	0x08020e54
 8012af8:	08012335 	.word	0x08012335

08012afc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	685b      	ldr	r3, [r3, #4]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d102      	bne.n	8012b1e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8012b18:	68f8      	ldr	r0, [r7, #12]
 8012b1a:	f7ff ff85 	bl	8012a28 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8012b1e:	bf00      	nop
 8012b20:	3710      	adds	r7, #16
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}
	...

08012b28 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b086      	sub	sp, #24
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	4603      	mov	r3, r0
 8012b30:	6039      	str	r1, [r7, #0]
 8012b32:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8012b34:	2300      	movs	r3, #0
 8012b36:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8012b38:	2007      	movs	r0, #7
 8012b3a:	f003 ffd1 	bl	8016ae0 <memp_malloc>
 8012b3e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d101      	bne.n	8012b4a <netconn_alloc+0x22>
    return NULL;
 8012b46:	2300      	movs	r3, #0
 8012b48:	e052      	b.n	8012bf0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	79fa      	ldrb	r2, [r7, #7]
 8012b54:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8012b5c:	79fb      	ldrb	r3, [r7, #7]
 8012b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012b62:	2b10      	cmp	r3, #16
 8012b64:	d004      	beq.n	8012b70 <netconn_alloc+0x48>
 8012b66:	2b20      	cmp	r3, #32
 8012b68:	d105      	bne.n	8012b76 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8012b6a:	2306      	movs	r3, #6
 8012b6c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8012b6e:	e00a      	b.n	8012b86 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8012b70:	2306      	movs	r3, #6
 8012b72:	617b      	str	r3, [r7, #20]
      break;
 8012b74:	e007      	b.n	8012b86 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8012b76:	4b20      	ldr	r3, [pc, #128]	; (8012bf8 <netconn_alloc+0xd0>)
 8012b78:	f240 22e5 	movw	r2, #741	; 0x2e5
 8012b7c:	491f      	ldr	r1, [pc, #124]	; (8012bfc <netconn_alloc+0xd4>)
 8012b7e:	4820      	ldr	r0, [pc, #128]	; (8012c00 <netconn_alloc+0xd8>)
 8012b80:	f00c ffc4 	bl	801fb0c <iprintf>
      goto free_and_return;
 8012b84:	e02f      	b.n	8012be6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	3310      	adds	r3, #16
 8012b8a:	6979      	ldr	r1, [r7, #20]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f005 f9ab 	bl	8017ee8 <sys_mbox_new>
 8012b92:	4603      	mov	r3, r0
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d125      	bne.n	8012be4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	330c      	adds	r3, #12
 8012b9c:	2100      	movs	r1, #0
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f005 fa69 	bl	8018076 <sys_sem_new>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d005      	beq.n	8012bb6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	3310      	adds	r3, #16
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f005 f9bc 	bl	8017f2c <sys_mbox_free>
    goto free_and_return;
 8012bb4:	e017      	b.n	8012be6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	3314      	adds	r3, #20
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f005 fa4e 	bl	801805c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012bcc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	683a      	ldr	r2, [r7, #0]
 8012bd2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	7cfa      	ldrb	r2, [r7, #19]
 8012bde:	771a      	strb	r2, [r3, #28]
  return conn;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	e005      	b.n	8012bf0 <netconn_alloc+0xc8>
    goto free_and_return;
 8012be4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8012be6:	68f9      	ldr	r1, [r7, #12]
 8012be8:	2007      	movs	r0, #7
 8012bea:	f003 ffef 	bl	8016bcc <memp_free>
  return NULL;
 8012bee:	2300      	movs	r3, #0
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3718      	adds	r7, #24
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}
 8012bf8:	08020dcc 	.word	0x08020dcc
 8012bfc:	08021014 	.word	0x08021014
 8012c00:	08020e54 	.word	0x08020e54

08012c04 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	685b      	ldr	r3, [r3, #4]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d006      	beq.n	8012c22 <netconn_free+0x1e>
 8012c14:	4b1b      	ldr	r3, [pc, #108]	; (8012c84 <netconn_free+0x80>)
 8012c16:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012c1a:	491b      	ldr	r1, [pc, #108]	; (8012c88 <netconn_free+0x84>)
 8012c1c:	481b      	ldr	r0, [pc, #108]	; (8012c8c <netconn_free+0x88>)
 8012c1e:	f00c ff75 	bl	801fb0c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	3310      	adds	r3, #16
 8012c26:	4618      	mov	r0, r3
 8012c28:	f005 fa07 	bl	801803a <sys_mbox_valid>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d006      	beq.n	8012c40 <netconn_free+0x3c>
 8012c32:	4b14      	ldr	r3, [pc, #80]	; (8012c84 <netconn_free+0x80>)
 8012c34:	f240 3223 	movw	r2, #803	; 0x323
 8012c38:	4915      	ldr	r1, [pc, #84]	; (8012c90 <netconn_free+0x8c>)
 8012c3a:	4814      	ldr	r0, [pc, #80]	; (8012c8c <netconn_free+0x88>)
 8012c3c:	f00c ff66 	bl	801fb0c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	3314      	adds	r3, #20
 8012c44:	4618      	mov	r0, r3
 8012c46:	f005 f9f8 	bl	801803a <sys_mbox_valid>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d006      	beq.n	8012c5e <netconn_free+0x5a>
 8012c50:	4b0c      	ldr	r3, [pc, #48]	; (8012c84 <netconn_free+0x80>)
 8012c52:	f240 3226 	movw	r2, #806	; 0x326
 8012c56:	490f      	ldr	r1, [pc, #60]	; (8012c94 <netconn_free+0x90>)
 8012c58:	480c      	ldr	r0, [pc, #48]	; (8012c8c <netconn_free+0x88>)
 8012c5a:	f00c ff57 	bl	801fb0c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	330c      	adds	r3, #12
 8012c62:	4618      	mov	r0, r3
 8012c64:	f005 fa6d 	bl	8018142 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	330c      	adds	r3, #12
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f005 fa86 	bl	801817e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8012c72:	6879      	ldr	r1, [r7, #4]
 8012c74:	2007      	movs	r0, #7
 8012c76:	f003 ffa9 	bl	8016bcc <memp_free>
}
 8012c7a:	bf00      	nop
 8012c7c:	3708      	adds	r7, #8
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	bf00      	nop
 8012c84:	08020dcc 	.word	0x08020dcc
 8012c88:	0802103c 	.word	0x0802103c
 8012c8c:	08020e54 	.word	0x08020e54
 8012c90:	0802106c 	.word	0x0802106c
 8012c94:	080210a8 	.word	0x080210a8

08012c98 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b086      	sub	sp, #24
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	3310      	adds	r3, #16
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f005 f9c8 	bl	801803a <sys_mbox_valid>
 8012caa:	4603      	mov	r3, r0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d02f      	beq.n	8012d10 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012cb0:	e018      	b.n	8012ce4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	781b      	ldrb	r3, [r3, #0]
 8012cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012cba:	2b10      	cmp	r3, #16
 8012cbc:	d10e      	bne.n	8012cdc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	f107 020f 	add.w	r2, r7, #15
 8012cc4:	4611      	mov	r1, r2
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7ff fafa 	bl	80122c0 <lwip_netconn_is_err_msg>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d108      	bne.n	8012ce4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f004 fe6d 	bl	80179b4 <pbuf_free>
 8012cda:	e003      	b.n	8012ce4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f003 ff9e 	bl	8016c20 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	3310      	adds	r3, #16
 8012ce8:	f107 0210 	add.w	r2, r7, #16
 8012cec:	4611      	mov	r1, r2
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f005 f987 	bl	8018002 <sys_arch_mbox_tryfetch>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012cfa:	d1da      	bne.n	8012cb2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	3310      	adds	r3, #16
 8012d00:	4618      	mov	r0, r3
 8012d02:	f005 f913 	bl	8017f2c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	3310      	adds	r3, #16
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f005 f9a6 	bl	801805c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	3314      	adds	r3, #20
 8012d14:	4618      	mov	r0, r3
 8012d16:	f005 f990 	bl	801803a <sys_mbox_valid>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d034      	beq.n	8012d8a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012d20:	e01d      	b.n	8012d5e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	f107 020e 	add.w	r2, r7, #14
 8012d28:	4611      	mov	r1, r2
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7ff fac8 	bl	80122c0 <lwip_netconn_is_err_msg>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d113      	bne.n	8012d5e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8012d3a:	6978      	ldr	r0, [r7, #20]
 8012d3c:	f7ff ffac 	bl	8012c98 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d007      	beq.n	8012d58 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f005 fe03 	bl	8018958 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	2200      	movs	r2, #0
 8012d56:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8012d58:	6978      	ldr	r0, [r7, #20]
 8012d5a:	f7ff ff53 	bl	8012c04 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	3314      	adds	r3, #20
 8012d62:	f107 0210 	add.w	r2, r7, #16
 8012d66:	4611      	mov	r1, r2
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f005 f94a 	bl	8018002 <sys_arch_mbox_tryfetch>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d74:	d1d5      	bne.n	8012d22 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	3314      	adds	r3, #20
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f005 f8d6 	bl	8017f2c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	3314      	adds	r3, #20
 8012d84:	4618      	mov	r0, r3
 8012d86:	f005 f969 	bl	801805c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8012d8a:	bf00      	nop
 8012d8c:	3718      	adds	r7, #24
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
	...

08012d94 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b086      	sub	sp, #24
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8012da0:	2300      	movs	r3, #0
 8012da2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d106      	bne.n	8012db8 <lwip_netconn_do_close_internal+0x24>
 8012daa:	4b87      	ldr	r3, [pc, #540]	; (8012fc8 <lwip_netconn_do_close_internal+0x234>)
 8012dac:	f240 32a2 	movw	r2, #930	; 0x3a2
 8012db0:	4986      	ldr	r1, [pc, #536]	; (8012fcc <lwip_netconn_do_close_internal+0x238>)
 8012db2:	4887      	ldr	r0, [pc, #540]	; (8012fd0 <lwip_netconn_do_close_internal+0x23c>)
 8012db4:	f00c feaa 	bl	801fb0c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012dc0:	2b10      	cmp	r3, #16
 8012dc2:	d006      	beq.n	8012dd2 <lwip_netconn_do_close_internal+0x3e>
 8012dc4:	4b80      	ldr	r3, [pc, #512]	; (8012fc8 <lwip_netconn_do_close_internal+0x234>)
 8012dc6:	f240 32a3 	movw	r2, #931	; 0x3a3
 8012dca:	4982      	ldr	r1, [pc, #520]	; (8012fd4 <lwip_netconn_do_close_internal+0x240>)
 8012dcc:	4880      	ldr	r0, [pc, #512]	; (8012fd0 <lwip_netconn_do_close_internal+0x23c>)
 8012dce:	f00c fe9d 	bl	801fb0c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	785b      	ldrb	r3, [r3, #1]
 8012dd6:	2b04      	cmp	r3, #4
 8012dd8:	d006      	beq.n	8012de8 <lwip_netconn_do_close_internal+0x54>
 8012dda:	4b7b      	ldr	r3, [pc, #492]	; (8012fc8 <lwip_netconn_do_close_internal+0x234>)
 8012ddc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8012de0:	497d      	ldr	r1, [pc, #500]	; (8012fd8 <lwip_netconn_do_close_internal+0x244>)
 8012de2:	487b      	ldr	r0, [pc, #492]	; (8012fd0 <lwip_netconn_do_close_internal+0x23c>)
 8012de4:	f00c fe92 	bl	801fb0c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d106      	bne.n	8012dfe <lwip_netconn_do_close_internal+0x6a>
 8012df0:	4b75      	ldr	r3, [pc, #468]	; (8012fc8 <lwip_netconn_do_close_internal+0x234>)
 8012df2:	f240 32a5 	movw	r2, #933	; 0x3a5
 8012df6:	4979      	ldr	r1, [pc, #484]	; (8012fdc <lwip_netconn_do_close_internal+0x248>)
 8012df8:	4875      	ldr	r0, [pc, #468]	; (8012fd0 <lwip_netconn_do_close_internal+0x23c>)
 8012dfa:	f00c fe87 	bl	801fb0c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6a1b      	ldr	r3, [r3, #32]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d106      	bne.n	8012e14 <lwip_netconn_do_close_internal+0x80>
 8012e06:	4b70      	ldr	r3, [pc, #448]	; (8012fc8 <lwip_netconn_do_close_internal+0x234>)
 8012e08:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012e0c:	4974      	ldr	r1, [pc, #464]	; (8012fe0 <lwip_netconn_do_close_internal+0x24c>)
 8012e0e:	4870      	ldr	r0, [pc, #448]	; (8012fd0 <lwip_netconn_do_close_internal+0x23c>)
 8012e10:	f00c fe7c 	bl	801fb0c <iprintf>

  tpcb = conn->pcb.tcp;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	6a1b      	ldr	r3, [r3, #32]
 8012e1e:	7a1b      	ldrb	r3, [r3, #8]
 8012e20:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8012e22:	7bfb      	ldrb	r3, [r7, #15]
 8012e24:	f003 0301 	and.w	r3, r3, #1
 8012e28:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8012e2a:	7bfb      	ldrb	r3, [r7, #15]
 8012e2c:	f003 0302 	and.w	r3, r3, #2
 8012e30:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8012e32:	7bfb      	ldrb	r3, [r7, #15]
 8012e34:	2b03      	cmp	r3, #3
 8012e36:	d102      	bne.n	8012e3e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8012e38:	2301      	movs	r3, #1
 8012e3a:	75bb      	strb	r3, [r7, #22]
 8012e3c:	e01f      	b.n	8012e7e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8012e3e:	7bbb      	ldrb	r3, [r7, #14]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d00e      	beq.n	8012e62 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8012e44:	693b      	ldr	r3, [r7, #16]
 8012e46:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8012e48:	2b05      	cmp	r3, #5
 8012e4a:	d007      	beq.n	8012e5c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8012e50:	2b06      	cmp	r3, #6
 8012e52:	d003      	beq.n	8012e5c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8012e58:	2b08      	cmp	r3, #8
 8012e5a:	d102      	bne.n	8012e62 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	75bb      	strb	r3, [r7, #22]
 8012e60:	e00d      	b.n	8012e7e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8012e62:	7b7b      	ldrb	r3, [r7, #13]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d008      	beq.n	8012e7a <lwip_netconn_do_close_internal+0xe6>
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	8b5b      	ldrh	r3, [r3, #26]
 8012e6c:	f003 0310 	and.w	r3, r3, #16
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d002      	beq.n	8012e7a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8012e74:	2301      	movs	r3, #1
 8012e76:	75bb      	strb	r3, [r7, #22]
 8012e78:	e001      	b.n	8012e7e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8012e7e:	7dbb      	ldrb	r3, [r7, #22]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d003      	beq.n	8012e8c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8012e84:	2100      	movs	r1, #0
 8012e86:	6938      	ldr	r0, [r7, #16]
 8012e88:	f006 fdf8 	bl	8019a7c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	7d1b      	ldrb	r3, [r3, #20]
 8012e90:	2b01      	cmp	r3, #1
 8012e92:	d104      	bne.n	8012e9e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8012e94:	2100      	movs	r1, #0
 8012e96:	6938      	ldr	r0, [r7, #16]
 8012e98:	f006 fe68 	bl	8019b6c <tcp_accept>
 8012e9c:	e01d      	b.n	8012eda <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8012e9e:	7bbb      	ldrb	r3, [r7, #14]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d007      	beq.n	8012eb4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	6938      	ldr	r0, [r7, #16]
 8012ea8:	f006 fdfa 	bl	8019aa0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8012eac:	2100      	movs	r1, #0
 8012eae:	6938      	ldr	r0, [r7, #16]
 8012eb0:	f006 fe5c 	bl	8019b6c <tcp_accept>
    }
    if (shut_tx) {
 8012eb4:	7b7b      	ldrb	r3, [r7, #13]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d003      	beq.n	8012ec2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8012eba:	2100      	movs	r1, #0
 8012ebc:	6938      	ldr	r0, [r7, #16]
 8012ebe:	f006 fe11 	bl	8019ae4 <tcp_sent>
    }
    if (shut_close) {
 8012ec2:	7dbb      	ldrb	r3, [r7, #22]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d008      	beq.n	8012eda <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8012ec8:	2200      	movs	r2, #0
 8012eca:	2100      	movs	r1, #0
 8012ecc:	6938      	ldr	r0, [r7, #16]
 8012ece:	f006 fe65 	bl	8019b9c <tcp_poll>
      tcp_err(tpcb, NULL);
 8012ed2:	2100      	movs	r1, #0
 8012ed4:	6938      	ldr	r0, [r7, #16]
 8012ed6:	f006 fe27 	bl	8019b28 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8012eda:	7dbb      	ldrb	r3, [r7, #22]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d005      	beq.n	8012eec <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8012ee0:	6938      	ldr	r0, [r7, #16]
 8012ee2:	f005 fbf3 	bl	80186cc <tcp_close>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	75fb      	strb	r3, [r7, #23]
 8012eea:	e007      	b.n	8012efc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8012eec:	7bbb      	ldrb	r3, [r7, #14]
 8012eee:	7b7a      	ldrb	r2, [r7, #13]
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	6938      	ldr	r0, [r7, #16]
 8012ef4:	f005 fc16 	bl	8018724 <tcp_shutdown>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d102      	bne.n	8012f0a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8012f04:	2301      	movs	r3, #1
 8012f06:	757b      	strb	r3, [r7, #21]
 8012f08:	e016      	b.n	8012f38 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8012f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f12:	d10f      	bne.n	8012f34 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	6a1b      	ldr	r3, [r3, #32]
 8012f18:	7a5b      	ldrb	r3, [r3, #9]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d10c      	bne.n	8012f38 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8012f1e:	2301      	movs	r3, #1
 8012f20:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8012f22:	7dbb      	ldrb	r3, [r7, #22]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d007      	beq.n	8012f38 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8012f28:	6938      	ldr	r0, [r7, #16]
 8012f2a:	f005 fd15 	bl	8018958 <tcp_abort>
          err = ERR_OK;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	75fb      	strb	r3, [r7, #23]
 8012f32:	e001      	b.n	8012f38 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8012f34:	2301      	movs	r3, #1
 8012f36:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8012f38:	7d7b      	ldrb	r3, [r7, #21]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d052      	beq.n	8012fe4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6a1b      	ldr	r3, [r3, #32]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	330c      	adds	r3, #12
 8012f46:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6a1b      	ldr	r3, [r3, #32]
 8012f4c:	7dfa      	ldrb	r2, [r7, #23]
 8012f4e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2200      	movs	r2, #0
 8012f54:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8012f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d129      	bne.n	8012fb8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8012f64:	7dbb      	ldrb	r3, [r7, #22]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d00c      	beq.n	8012f84 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d005      	beq.n	8012f84 <lwip_netconn_do_close_internal+0x1f0>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	2104      	movs	r1, #4
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	4798      	blx	r3
      }
      if (shut_rx) {
 8012f84:	7bbb      	ldrb	r3, [r7, #14]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d009      	beq.n	8012f9e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d005      	beq.n	8012f9e <lwip_netconn_do_close_internal+0x20a>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f96:	2200      	movs	r2, #0
 8012f98:	2100      	movs	r1, #0
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	4798      	blx	r3
      }
      if (shut_tx) {
 8012f9e:	7b7b      	ldrb	r3, [r7, #13]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d009      	beq.n	8012fb8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d005      	beq.n	8012fb8 <lwip_netconn_do_close_internal+0x224>
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	2102      	movs	r1, #2
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012fb8:	78fb      	ldrb	r3, [r7, #3]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d002      	beq.n	8012fc4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012fbe:	68b8      	ldr	r0, [r7, #8]
 8012fc0:	f005 f8b2 	bl	8018128 <sys_sem_signal>
    }
    return ERR_OK;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	e03c      	b.n	8013042 <lwip_netconn_do_close_internal+0x2ae>
 8012fc8:	08020dcc 	.word	0x08020dcc
 8012fcc:	080210e4 	.word	0x080210e4
 8012fd0:	08020e54 	.word	0x08020e54
 8012fd4:	080210f4 	.word	0x080210f4
 8012fd8:	08021114 	.word	0x08021114
 8012fdc:	08021138 	.word	0x08021138
 8012fe0:	08020f78 	.word	0x08020f78
  }
  if (!close_finished) {
 8012fe4:	7d7b      	ldrb	r3, [r7, #21]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d11e      	bne.n	8013028 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8012fea:	693b      	ldr	r3, [r7, #16]
 8012fec:	7d1b      	ldrb	r3, [r3, #20]
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	d106      	bne.n	8013000 <lwip_netconn_do_close_internal+0x26c>
 8012ff2:	4b16      	ldr	r3, [pc, #88]	; (801304c <lwip_netconn_do_close_internal+0x2b8>)
 8012ff4:	f240 4241 	movw	r2, #1089	; 0x441
 8012ff8:	4915      	ldr	r1, [pc, #84]	; (8013050 <lwip_netconn_do_close_internal+0x2bc>)
 8012ffa:	4816      	ldr	r0, [pc, #88]	; (8013054 <lwip_netconn_do_close_internal+0x2c0>)
 8012ffc:	f00c fd86 	bl	801fb0c <iprintf>
    if (shut_tx) {
 8013000:	7b7b      	ldrb	r3, [r7, #13]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d003      	beq.n	801300e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8013006:	4914      	ldr	r1, [pc, #80]	; (8013058 <lwip_netconn_do_close_internal+0x2c4>)
 8013008:	6938      	ldr	r0, [r7, #16]
 801300a:	f006 fd6b 	bl	8019ae4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801300e:	2201      	movs	r2, #1
 8013010:	4912      	ldr	r1, [pc, #72]	; (801305c <lwip_netconn_do_close_internal+0x2c8>)
 8013012:	6938      	ldr	r0, [r7, #16]
 8013014:	f006 fdc2 	bl	8019b9c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8013018:	4911      	ldr	r1, [pc, #68]	; (8013060 <lwip_netconn_do_close_internal+0x2cc>)
 801301a:	6938      	ldr	r0, [r7, #16]
 801301c:	f006 fd84 	bl	8019b28 <tcp_err>
    tcp_arg(tpcb, conn);
 8013020:	6879      	ldr	r1, [r7, #4]
 8013022:	6938      	ldr	r0, [r7, #16]
 8013024:	f006 fd2a 	bl	8019a7c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8013028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d106      	bne.n	801303e <lwip_netconn_do_close_internal+0x2aa>
 8013030:	4b06      	ldr	r3, [pc, #24]	; (801304c <lwip_netconn_do_close_internal+0x2b8>)
 8013032:	f240 424d 	movw	r2, #1101	; 0x44d
 8013036:	490b      	ldr	r1, [pc, #44]	; (8013064 <lwip_netconn_do_close_internal+0x2d0>)
 8013038:	4806      	ldr	r0, [pc, #24]	; (8013054 <lwip_netconn_do_close_internal+0x2c0>)
 801303a:	f00c fd67 	bl	801fb0c <iprintf>
  return err;
 801303e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013042:	4618      	mov	r0, r3
 8013044:	3718      	adds	r7, #24
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}
 801304a:	bf00      	nop
 801304c:	08020dcc 	.word	0x08020dcc
 8013050:	0802114c 	.word	0x0802114c
 8013054:	08020e54 	.word	0x08020e54
 8013058:	08012609 	.word	0x08012609
 801305c:	0801253d 	.word	0x0801253d
 8013060:	080126b5 	.word	0x080126b5
 8013064:	08021170 	.word	0x08021170

08013068 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b084      	sub	sp, #16
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	785b      	ldrb	r3, [r3, #1]
 801307a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 801307c:	7afb      	ldrb	r3, [r7, #11]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d00d      	beq.n	801309e <lwip_netconn_do_delconn+0x36>
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801308c:	2b10      	cmp	r3, #16
 801308e:	d006      	beq.n	801309e <lwip_netconn_do_delconn+0x36>
 8013090:	4b60      	ldr	r3, [pc, #384]	; (8013214 <lwip_netconn_do_delconn+0x1ac>)
 8013092:	f240 425e 	movw	r2, #1118	; 0x45e
 8013096:	4960      	ldr	r1, [pc, #384]	; (8013218 <lwip_netconn_do_delconn+0x1b0>)
 8013098:	4860      	ldr	r0, [pc, #384]	; (801321c <lwip_netconn_do_delconn+0x1b4>)
 801309a:	f00c fd37 	bl	801fb0c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801309e:	7afb      	ldrb	r3, [r7, #11]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d005      	beq.n	80130b0 <lwip_netconn_do_delconn+0x48>
 80130a4:	7afb      	ldrb	r3, [r7, #11]
 80130a6:	2b02      	cmp	r3, #2
 80130a8:	d002      	beq.n	80130b0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80130aa:	7afb      	ldrb	r3, [r7, #11]
 80130ac:	2b03      	cmp	r3, #3
 80130ae:	d109      	bne.n	80130c4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80130b0:	7afb      	ldrb	r3, [r7, #11]
 80130b2:	2b03      	cmp	r3, #3
 80130b4:	d10a      	bne.n	80130cc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	7f1b      	ldrb	r3, [r3, #28]
 80130bc:	f003 0304 	and.w	r3, r3, #4
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d103      	bne.n	80130cc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	22fb      	movs	r2, #251	; 0xfb
 80130c8:	711a      	strb	r2, [r3, #4]
 80130ca:	e097      	b.n	80131fc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80130cc:	7afb      	ldrb	r3, [r7, #11]
 80130ce:	2b03      	cmp	r3, #3
 80130d0:	d10d      	bne.n	80130ee <lwip_netconn_do_delconn+0x86>
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	7f1b      	ldrb	r3, [r3, #28]
 80130d8:	f003 0304 	and.w	r3, r3, #4
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d106      	bne.n	80130ee <lwip_netconn_do_delconn+0x86>
 80130e0:	4b4c      	ldr	r3, [pc, #304]	; (8013214 <lwip_netconn_do_delconn+0x1ac>)
 80130e2:	f240 427a 	movw	r2, #1146	; 0x47a
 80130e6:	494e      	ldr	r1, [pc, #312]	; (8013220 <lwip_netconn_do_delconn+0x1b8>)
 80130e8:	484c      	ldr	r0, [pc, #304]	; (801321c <lwip_netconn_do_delconn+0x1b4>)
 80130ea:	f00c fd0f 	bl	801fb0c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2200      	movs	r2, #0
 80130f2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7ff fdcd 	bl	8012c98 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d05f      	beq.n	80131c8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013112:	2b10      	cmp	r3, #16
 8013114:	d00d      	beq.n	8013132 <lwip_netconn_do_delconn+0xca>
 8013116:	2b20      	cmp	r3, #32
 8013118:	d151      	bne.n	80131be <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	2200      	movs	r2, #0
 8013122:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	4618      	mov	r0, r3
 801312c:	f00b fee4 	bl	801eef8 <udp_remove>
          break;
 8013130:	e046      	b.n	80131c0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	6a1b      	ldr	r3, [r3, #32]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d006      	beq.n	801314a <lwip_netconn_do_delconn+0xe2>
 801313c:	4b35      	ldr	r3, [pc, #212]	; (8013214 <lwip_netconn_do_delconn+0x1ac>)
 801313e:	f240 4294 	movw	r2, #1172	; 0x494
 8013142:	4938      	ldr	r1, [pc, #224]	; (8013224 <lwip_netconn_do_delconn+0x1bc>)
 8013144:	4835      	ldr	r0, [pc, #212]	; (801321c <lwip_netconn_do_delconn+0x1b4>)
 8013146:	f00c fce1 	bl	801fb0c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	2204      	movs	r2, #4
 8013150:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	2203      	movs	r2, #3
 8013156:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	68fa      	ldr	r2, [r7, #12]
 801315e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	2100      	movs	r1, #0
 8013166:	4618      	mov	r0, r3
 8013168:	f7ff fe14 	bl	8012d94 <lwip_netconn_do_close_internal>
 801316c:	4603      	mov	r3, r0
 801316e:	2b00      	cmp	r3, #0
 8013170:	d04b      	beq.n	801320a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	785b      	ldrb	r3, [r3, #1]
 8013178:	2b04      	cmp	r3, #4
 801317a:	d006      	beq.n	801318a <lwip_netconn_do_delconn+0x122>
 801317c:	4b25      	ldr	r3, [pc, #148]	; (8013214 <lwip_netconn_do_delconn+0x1ac>)
 801317e:	f240 429a 	movw	r2, #1178	; 0x49a
 8013182:	4929      	ldr	r1, [pc, #164]	; (8013228 <lwip_netconn_do_delconn+0x1c0>)
 8013184:	4825      	ldr	r0, [pc, #148]	; (801321c <lwip_netconn_do_delconn+0x1b4>)
 8013186:	f00c fcc1 	bl	801fb0c <iprintf>
            UNLOCK_TCPIP_CORE();
 801318a:	4828      	ldr	r0, [pc, #160]	; (801322c <lwip_netconn_do_delconn+0x1c4>)
 801318c:	f005 f83d 	bl	801820a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	330c      	adds	r3, #12
 8013196:	2100      	movs	r1, #0
 8013198:	4618      	mov	r0, r3
 801319a:	f004 ff94 	bl	80180c6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801319e:	4823      	ldr	r0, [pc, #140]	; (801322c <lwip_netconn_do_delconn+0x1c4>)
 80131a0:	f005 f824 	bl	80181ec <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	785b      	ldrb	r3, [r3, #1]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d02d      	beq.n	801320a <lwip_netconn_do_delconn+0x1a2>
 80131ae:	4b19      	ldr	r3, [pc, #100]	; (8013214 <lwip_netconn_do_delconn+0x1ac>)
 80131b0:	f240 429e 	movw	r2, #1182	; 0x49e
 80131b4:	491c      	ldr	r1, [pc, #112]	; (8013228 <lwip_netconn_do_delconn+0x1c0>)
 80131b6:	4819      	ldr	r0, [pc, #100]	; (801321c <lwip_netconn_do_delconn+0x1b4>)
 80131b8:	f00c fca8 	bl	801fb0c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80131bc:	e025      	b.n	801320a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80131be:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	2200      	movs	r2, #0
 80131c6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d007      	beq.n	80131e2 <lwip_netconn_do_delconn+0x17a>
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131d8:	68fa      	ldr	r2, [r7, #12]
 80131da:	6810      	ldr	r0, [r2, #0]
 80131dc:	2200      	movs	r2, #0
 80131de:	2100      	movs	r1, #0
 80131e0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d007      	beq.n	80131fc <lwip_netconn_do_delconn+0x194>
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f2:	68fa      	ldr	r2, [r7, #12]
 80131f4:	6810      	ldr	r0, [r2, #0]
 80131f6:	2200      	movs	r2, #0
 80131f8:	2102      	movs	r1, #2
 80131fa:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	330c      	adds	r3, #12
 8013202:	4618      	mov	r0, r3
 8013204:	f004 ffaa 	bl	801815c <sys_sem_valid>
 8013208:	e000      	b.n	801320c <lwip_netconn_do_delconn+0x1a4>
          return;
 801320a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 801320c:	3710      	adds	r7, #16
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}
 8013212:	bf00      	nop
 8013214:	08020dcc 	.word	0x08020dcc
 8013218:	08021180 	.word	0x08021180
 801321c:	08020e54 	.word	0x08020e54
 8013220:	08021194 	.word	0x08021194
 8013224:	080211b4 	.word	0x080211b4
 8013228:	080211d0 	.word	0x080211d0
 801322c:	2400f97c 	.word	0x2400f97c

08013230 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	685b      	ldr	r3, [r3, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d025      	beq.n	8013292 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013250:	2b10      	cmp	r3, #16
 8013252:	d00e      	beq.n	8013272 <lwip_netconn_do_bind+0x42>
 8013254:	2b20      	cmp	r3, #32
 8013256:	d119      	bne.n	801328c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	6858      	ldr	r0, [r3, #4]
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	6899      	ldr	r1, [r3, #8]
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	899b      	ldrh	r3, [r3, #12]
 8013266:	461a      	mov	r2, r3
 8013268:	f00b fd9e 	bl	801eda8 <udp_bind>
 801326c:	4603      	mov	r3, r0
 801326e:	73fb      	strb	r3, [r7, #15]
        break;
 8013270:	e011      	b.n	8013296 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	6858      	ldr	r0, [r3, #4]
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	6899      	ldr	r1, [r3, #8]
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	899b      	ldrh	r3, [r3, #12]
 8013280:	461a      	mov	r2, r3
 8013282:	f005 fb75 	bl	8018970 <tcp_bind>
 8013286:	4603      	mov	r3, r0
 8013288:	73fb      	strb	r3, [r7, #15]
        break;
 801328a:	e004      	b.n	8013296 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801328c:	23fa      	movs	r3, #250	; 0xfa
 801328e:	73fb      	strb	r3, [r7, #15]
        break;
 8013290:	e001      	b.n	8013296 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8013292:	23fa      	movs	r3, #250	; 0xfa
 8013294:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	7bfa      	ldrb	r2, [r7, #15]
 801329a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801329c:	bf00      	nop
 801329e:	3710      	adds	r7, #16
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}

080132a4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b086      	sub	sp, #24
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	685b      	ldr	r3, [r3, #4]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d07f      	beq.n	80133ba <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80132c4:	2b10      	cmp	r3, #16
 80132c6:	d175      	bne.n	80133b4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	785b      	ldrb	r3, [r3, #1]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d165      	bne.n	801339e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	685b      	ldr	r3, [r3, #4]
 80132d8:	7d1b      	ldrb	r3, [r3, #20]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d002      	beq.n	80132e4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80132de:	23fa      	movs	r3, #250	; 0xfa
 80132e0:	72fb      	strb	r3, [r7, #11]
 80132e2:	e06c      	b.n	80133be <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80132e4:	23ff      	movs	r3, #255	; 0xff
 80132e6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80132e8:	697b      	ldr	r3, [r7, #20]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	f107 020b 	add.w	r2, r7, #11
 80132f2:	7cf9      	ldrb	r1, [r7, #19]
 80132f4:	4618      	mov	r0, r3
 80132f6:	f005 fbf3 	bl	8018ae0 <tcp_listen_with_backlog_and_err>
 80132fa:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d05d      	beq.n	80133be <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	3310      	adds	r3, #16
 8013308:	4618      	mov	r0, r3
 801330a:	f004 fe96 	bl	801803a <sys_mbox_valid>
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d00b      	beq.n	801332c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	3310      	adds	r3, #16
 801331a:	4618      	mov	r0, r3
 801331c:	f004 fe06 	bl	8017f2c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	3310      	adds	r3, #16
 8013326:	4618      	mov	r0, r3
 8013328:	f004 fe98 	bl	801805c <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 801332c:	2300      	movs	r3, #0
 801332e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	3314      	adds	r3, #20
 8013336:	4618      	mov	r0, r3
 8013338:	f004 fe7f 	bl	801803a <sys_mbox_valid>
 801333c:	4603      	mov	r3, r0
 801333e:	2b00      	cmp	r3, #0
 8013340:	d108      	bne.n	8013354 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	3314      	adds	r3, #20
 8013348:	2106      	movs	r1, #6
 801334a:	4618      	mov	r0, r3
 801334c:	f004 fdcc 	bl	8017ee8 <sys_mbox_new>
 8013350:	4603      	mov	r3, r0
 8013352:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8013354:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d118      	bne.n	801338e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	2202      	movs	r2, #2
 8013362:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	68fa      	ldr	r2, [r7, #12]
 801336a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	685a      	ldr	r2, [r3, #4]
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	4619      	mov	r1, r3
 8013378:	4610      	mov	r0, r2
 801337a:	f006 fb7f 	bl	8019a7c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	685b      	ldr	r3, [r3, #4]
 8013384:	4912      	ldr	r1, [pc, #72]	; (80133d0 <lwip_netconn_do_listen+0x12c>)
 8013386:	4618      	mov	r0, r3
 8013388:	f006 fbf0 	bl	8019b6c <tcp_accept>
 801338c:	e017      	b.n	80133be <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801338e:	68f8      	ldr	r0, [r7, #12]
 8013390:	f005 f99c 	bl	80186cc <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	2200      	movs	r2, #0
 801339a:	605a      	str	r2, [r3, #4]
 801339c:	e00f      	b.n	80133be <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	785b      	ldrb	r3, [r3, #1]
 80133a4:	2b02      	cmp	r3, #2
 80133a6:	d102      	bne.n	80133ae <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80133a8:	2300      	movs	r3, #0
 80133aa:	72fb      	strb	r3, [r7, #11]
 80133ac:	e007      	b.n	80133be <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80133ae:	23f5      	movs	r3, #245	; 0xf5
 80133b0:	72fb      	strb	r3, [r7, #11]
 80133b2:	e004      	b.n	80133be <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80133b4:	23f0      	movs	r3, #240	; 0xf0
 80133b6:	72fb      	strb	r3, [r7, #11]
 80133b8:	e001      	b.n	80133be <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80133ba:	23f5      	movs	r3, #245	; 0xf5
 80133bc:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80133be:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80133c2:	697b      	ldr	r3, [r7, #20]
 80133c4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80133c6:	bf00      	nop
 80133c8:	3718      	adds	r7, #24
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	080128b1 	.word	0x080128b1

080133d4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b086      	sub	sp, #24
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	2200      	movs	r2, #0
 80133e4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d022      	beq.n	8013436 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80133fa:	2b10      	cmp	r3, #16
 80133fc:	d11b      	bne.n	8013436 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	689b      	ldr	r3, [r3, #8]
 8013402:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801340a:	d202      	bcs.n	8013412 <lwip_netconn_do_recv+0x3e>
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	b29b      	uxth	r3, r3
 8013410:	e001      	b.n	8013416 <lwip_netconn_do_recv+0x42>
 8013412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013416:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	89fa      	ldrh	r2, [r7, #14]
 8013420:	4611      	mov	r1, r2
 8013422:	4618      	mov	r0, r3
 8013424:	f005 fc60 	bl	8018ce8 <tcp_recved>
        remaining -= recved;
 8013428:	89fb      	ldrh	r3, [r7, #14]
 801342a:	697a      	ldr	r2, [r7, #20]
 801342c:	1ad3      	subs	r3, r2, r3
 801342e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d1e6      	bne.n	8013404 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8013436:	bf00      	nop
 8013438:	3718      	adds	r7, #24
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
	...

08013440 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b088      	sub	sp, #32
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	460b      	mov	r3, r1
 801344a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801344c:	2300      	movs	r3, #0
 801344e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d106      	bne.n	8013464 <lwip_netconn_do_writemore+0x24>
 8013456:	4b96      	ldr	r3, [pc, #600]	; (80136b0 <lwip_netconn_do_writemore+0x270>)
 8013458:	f240 6273 	movw	r2, #1651	; 0x673
 801345c:	4995      	ldr	r1, [pc, #596]	; (80136b4 <lwip_netconn_do_writemore+0x274>)
 801345e:	4896      	ldr	r0, [pc, #600]	; (80136b8 <lwip_netconn_do_writemore+0x278>)
 8013460:	f00c fb54 	bl	801fb0c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	785b      	ldrb	r3, [r3, #1]
 8013468:	2b01      	cmp	r3, #1
 801346a:	d006      	beq.n	801347a <lwip_netconn_do_writemore+0x3a>
 801346c:	4b90      	ldr	r3, [pc, #576]	; (80136b0 <lwip_netconn_do_writemore+0x270>)
 801346e:	f240 6274 	movw	r2, #1652	; 0x674
 8013472:	4992      	ldr	r1, [pc, #584]	; (80136bc <lwip_netconn_do_writemore+0x27c>)
 8013474:	4890      	ldr	r0, [pc, #576]	; (80136b8 <lwip_netconn_do_writemore+0x278>)
 8013476:	f00c fb49 	bl	801fb0c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	6a1b      	ldr	r3, [r3, #32]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d106      	bne.n	8013490 <lwip_netconn_do_writemore+0x50>
 8013482:	4b8b      	ldr	r3, [pc, #556]	; (80136b0 <lwip_netconn_do_writemore+0x270>)
 8013484:	f240 6275 	movw	r2, #1653	; 0x675
 8013488:	498d      	ldr	r1, [pc, #564]	; (80136c0 <lwip_netconn_do_writemore+0x280>)
 801348a:	488b      	ldr	r0, [pc, #556]	; (80136b8 <lwip_netconn_do_writemore+0x278>)
 801348c:	f00c fb3e 	bl	801fb0c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d106      	bne.n	80134a6 <lwip_netconn_do_writemore+0x66>
 8013498:	4b85      	ldr	r3, [pc, #532]	; (80136b0 <lwip_netconn_do_writemore+0x270>)
 801349a:	f240 6276 	movw	r2, #1654	; 0x676
 801349e:	4989      	ldr	r1, [pc, #548]	; (80136c4 <lwip_netconn_do_writemore+0x284>)
 80134a0:	4885      	ldr	r0, [pc, #532]	; (80136b8 <lwip_netconn_do_writemore+0x278>)
 80134a2:	f00c fb33 	bl	801fb0c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6a1b      	ldr	r3, [r3, #32]
 80134aa:	699a      	ldr	r2, [r3, #24]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6a1b      	ldr	r3, [r3, #32]
 80134b0:	695b      	ldr	r3, [r3, #20]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d306      	bcc.n	80134c4 <lwip_netconn_do_writemore+0x84>
 80134b6:	4b7e      	ldr	r3, [pc, #504]	; (80136b0 <lwip_netconn_do_writemore+0x270>)
 80134b8:	f240 6277 	movw	r2, #1655	; 0x677
 80134bc:	4982      	ldr	r1, [pc, #520]	; (80136c8 <lwip_netconn_do_writemore+0x288>)
 80134be:	487e      	ldr	r0, [pc, #504]	; (80136b8 <lwip_netconn_do_writemore+0x278>)
 80134c0:	f00c fb24 	bl	801fb0c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	6a1b      	ldr	r3, [r3, #32]
 80134c8:	899b      	ldrh	r3, [r3, #12]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d106      	bne.n	80134dc <lwip_netconn_do_writemore+0x9c>
 80134ce:	4b78      	ldr	r3, [pc, #480]	; (80136b0 <lwip_netconn_do_writemore+0x270>)
 80134d0:	f240 6279 	movw	r2, #1657	; 0x679
 80134d4:	497d      	ldr	r1, [pc, #500]	; (80136cc <lwip_netconn_do_writemore+0x28c>)
 80134d6:	4878      	ldr	r0, [pc, #480]	; (80136b8 <lwip_netconn_do_writemore+0x278>)
 80134d8:	f00c fb18 	bl	801fb0c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6a1b      	ldr	r3, [r3, #32]
 80134e0:	7f1b      	ldrb	r3, [r3, #28]
 80134e2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	7f1b      	ldrb	r3, [r3, #28]
 80134e8:	f003 0302 	and.w	r3, r3, #2
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d104      	bne.n	80134fa <lwip_netconn_do_writemore+0xba>
 80134f0:	7ebb      	ldrb	r3, [r7, #26]
 80134f2:	f003 0304 	and.w	r3, r3, #4
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d001      	beq.n	80134fe <lwip_netconn_do_writemore+0xbe>
 80134fa:	2301      	movs	r3, #1
 80134fc:	e000      	b.n	8013500 <lwip_netconn_do_writemore+0xc0>
 80134fe:	2300      	movs	r3, #0
 8013500:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6a1b      	ldr	r3, [r3, #32]
 8013506:	689b      	ldr	r3, [r3, #8]
 8013508:	681a      	ldr	r2, [r3, #0]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6a1b      	ldr	r3, [r3, #32]
 801350e:	691b      	ldr	r3, [r3, #16]
 8013510:	4413      	add	r3, r2
 8013512:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6a1b      	ldr	r3, [r3, #32]
 8013518:	689b      	ldr	r3, [r3, #8]
 801351a:	685a      	ldr	r2, [r3, #4]
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6a1b      	ldr	r3, [r3, #32]
 8013520:	691b      	ldr	r3, [r3, #16]
 8013522:	1ad3      	subs	r3, r2, r3
 8013524:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801352c:	d307      	bcc.n	801353e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801352e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013532:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8013534:	7ebb      	ldrb	r3, [r7, #26]
 8013536:	f043 0302 	orr.w	r3, r3, #2
 801353a:	76bb      	strb	r3, [r7, #26]
 801353c:	e001      	b.n	8013542 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801354a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801354c:	89fa      	ldrh	r2, [r7, #14]
 801354e:	8bbb      	ldrh	r3, [r7, #28]
 8013550:	429a      	cmp	r2, r3
 8013552:	d216      	bcs.n	8013582 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8013554:	89fb      	ldrh	r3, [r7, #14]
 8013556:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8013558:	7e3b      	ldrb	r3, [r7, #24]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d00d      	beq.n	801357a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801355e:	8bbb      	ldrh	r3, [r7, #28]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d10e      	bne.n	8013582 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6a1b      	ldr	r3, [r3, #32]
 8013568:	699b      	ldr	r3, [r3, #24]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d102      	bne.n	8013574 <lwip_netconn_do_writemore+0x134>
 801356e:	f06f 0306 	mvn.w	r3, #6
 8013572:	e000      	b.n	8013576 <lwip_netconn_do_writemore+0x136>
 8013574:	2300      	movs	r3, #0
 8013576:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8013578:	e07d      	b.n	8013676 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801357a:	7ebb      	ldrb	r3, [r7, #26]
 801357c:	f043 0302 	orr.w	r3, r3, #2
 8013580:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6a1b      	ldr	r3, [r3, #32]
 8013586:	691a      	ldr	r2, [r3, #16]
 8013588:	8bbb      	ldrh	r3, [r7, #28]
 801358a:	441a      	add	r2, r3
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	6a1b      	ldr	r3, [r3, #32]
 8013590:	689b      	ldr	r3, [r3, #8]
 8013592:	685b      	ldr	r3, [r3, #4]
 8013594:	429a      	cmp	r2, r3
 8013596:	d906      	bls.n	80135a6 <lwip_netconn_do_writemore+0x166>
 8013598:	4b45      	ldr	r3, [pc, #276]	; (80136b0 <lwip_netconn_do_writemore+0x270>)
 801359a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801359e:	494c      	ldr	r1, [pc, #304]	; (80136d0 <lwip_netconn_do_writemore+0x290>)
 80135a0:	4845      	ldr	r0, [pc, #276]	; (80136b8 <lwip_netconn_do_writemore+0x278>)
 80135a2:	f00c fab3 	bl	801fb0c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80135a6:	8bbb      	ldrh	r3, [r7, #28]
 80135a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135ac:	4293      	cmp	r3, r2
 80135ae:	d103      	bne.n	80135b8 <lwip_netconn_do_writemore+0x178>
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135b6:	d209      	bcs.n	80135cc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80135bc:	8bba      	ldrh	r2, [r7, #28]
 80135be:	429a      	cmp	r2, r3
 80135c0:	d10b      	bne.n	80135da <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6a1b      	ldr	r3, [r3, #32]
 80135c6:	899b      	ldrh	r3, [r3, #12]
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d906      	bls.n	80135da <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80135cc:	2301      	movs	r3, #1
 80135ce:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80135d0:	7ebb      	ldrb	r3, [r7, #26]
 80135d2:	f043 0302 	orr.w	r3, r3, #2
 80135d6:	76bb      	strb	r3, [r7, #26]
 80135d8:	e001      	b.n	80135de <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80135da:	2300      	movs	r3, #0
 80135dc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6858      	ldr	r0, [r3, #4]
 80135e2:	7ebb      	ldrb	r3, [r7, #26]
 80135e4:	8bba      	ldrh	r2, [r7, #28]
 80135e6:	6979      	ldr	r1, [r7, #20]
 80135e8:	f009 f98a 	bl	801c900 <tcp_write>
 80135ec:	4603      	mov	r3, r0
 80135ee:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80135f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d12c      	bne.n	8013652 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6a1b      	ldr	r3, [r3, #32]
 80135fc:	6999      	ldr	r1, [r3, #24]
 80135fe:	8bba      	ldrh	r2, [r7, #28]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6a1b      	ldr	r3, [r3, #32]
 8013604:	440a      	add	r2, r1
 8013606:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6a1b      	ldr	r3, [r3, #32]
 801360c:	6919      	ldr	r1, [r3, #16]
 801360e:	8bba      	ldrh	r2, [r7, #28]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6a1b      	ldr	r3, [r3, #32]
 8013614:	440a      	add	r2, r1
 8013616:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	6a1b      	ldr	r3, [r3, #32]
 801361c:	691a      	ldr	r2, [r3, #16]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6a1b      	ldr	r3, [r3, #32]
 8013622:	689b      	ldr	r3, [r3, #8]
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	429a      	cmp	r2, r3
 8013628:	d113      	bne.n	8013652 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6a1b      	ldr	r3, [r3, #32]
 801362e:	899a      	ldrh	r2, [r3, #12]
 8013630:	3a01      	subs	r2, #1
 8013632:	b292      	uxth	r2, r2
 8013634:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	6a1b      	ldr	r3, [r3, #32]
 801363a:	899b      	ldrh	r3, [r3, #12]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d008      	beq.n	8013652 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6a1b      	ldr	r3, [r3, #32]
 8013644:	689a      	ldr	r2, [r3, #8]
 8013646:	3208      	adds	r2, #8
 8013648:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	6a1b      	ldr	r3, [r3, #32]
 801364e:	2200      	movs	r2, #0
 8013650:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8013652:	7e7b      	ldrb	r3, [r7, #25]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d004      	beq.n	8013662 <lwip_netconn_do_writemore+0x222>
 8013658:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801365c:	2b00      	cmp	r3, #0
 801365e:	f43f af50 	beq.w	8013502 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8013662:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d004      	beq.n	8013674 <lwip_netconn_do_writemore+0x234>
 801366a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801366e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013672:	d147      	bne.n	8013704 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 8013674:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8013676:	7e3b      	ldrb	r3, [r7, #24]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d02b      	beq.n	80136d4 <lwip_netconn_do_writemore+0x294>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6a1b      	ldr	r3, [r3, #32]
 8013680:	699a      	ldr	r2, [r3, #24]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6a1b      	ldr	r3, [r3, #32]
 8013686:	695b      	ldr	r3, [r3, #20]
 8013688:	429a      	cmp	r2, r3
 801368a:	d223      	bcs.n	80136d4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013690:	2b00      	cmp	r3, #0
 8013692:	d005      	beq.n	80136a0 <lwip_netconn_do_writemore+0x260>
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013698:	2200      	movs	r2, #0
 801369a:	2103      	movs	r1, #3
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	7f1b      	ldrb	r3, [r3, #28]
 80136a4:	f043 0310 	orr.w	r3, r3, #16
 80136a8:	b2da      	uxtb	r2, r3
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	771a      	strb	r2, [r3, #28]
 80136ae:	e029      	b.n	8013704 <lwip_netconn_do_writemore+0x2c4>
 80136b0:	08020dcc 	.word	0x08020dcc
 80136b4:	08020f68 	.word	0x08020f68
 80136b8:	08020e54 	.word	0x08020e54
 80136bc:	08021270 	.word	0x08021270
 80136c0:	08020f78 	.word	0x08020f78
 80136c4:	08021290 	.word	0x08021290
 80136c8:	080212a8 	.word	0x080212a8
 80136cc:	080212e8 	.word	0x080212e8
 80136d0:	08021310 	.word	0x08021310
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	685b      	ldr	r3, [r3, #4]
 80136d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80136dc:	f640 3269 	movw	r2, #2921	; 0xb69
 80136e0:	4293      	cmp	r3, r2
 80136e2:	d905      	bls.n	80136f0 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	685b      	ldr	r3, [r3, #4]
 80136e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80136ec:	2b07      	cmp	r3, #7
 80136ee:	d909      	bls.n	8013704 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d005      	beq.n	8013704 <lwip_netconn_do_writemore+0x2c4>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136fc:	2200      	movs	r2, #0
 80136fe:	2103      	movs	r1, #3
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8013704:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d11d      	bne.n	8013748 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6a1b      	ldr	r3, [r3, #32]
 8013710:	699a      	ldr	r2, [r3, #24]
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	6a1b      	ldr	r3, [r3, #32]
 8013716:	695b      	ldr	r3, [r3, #20]
 8013718:	429a      	cmp	r2, r3
 801371a:	d002      	beq.n	8013722 <lwip_netconn_do_writemore+0x2e2>
 801371c:	7e3b      	ldrb	r3, [r7, #24]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d001      	beq.n	8013726 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8013722:	2301      	movs	r3, #1
 8013724:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	4618      	mov	r0, r3
 801372c:	f009 fed2 	bl	801d4d4 <tcp_output>
 8013730:	4603      	mov	r3, r0
 8013732:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8013734:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8013738:	f113 0f04 	cmn.w	r3, #4
 801373c:	d12c      	bne.n	8013798 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801373e:	7b3b      	ldrb	r3, [r7, #12]
 8013740:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013742:	2301      	movs	r3, #1
 8013744:	76fb      	strb	r3, [r7, #27]
 8013746:	e027      	b.n	8013798 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 8013748:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801374c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013750:	d120      	bne.n	8013794 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	685b      	ldr	r3, [r3, #4]
 8013756:	4618      	mov	r0, r3
 8013758:	f009 febc 	bl	801d4d4 <tcp_output>
 801375c:	4603      	mov	r3, r0
 801375e:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8013760:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8013764:	f113 0f04 	cmn.w	r3, #4
 8013768:	d104      	bne.n	8013774 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801376a:	7b7b      	ldrb	r3, [r7, #13]
 801376c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801376e:	2301      	movs	r3, #1
 8013770:	76fb      	strb	r3, [r7, #27]
 8013772:	e011      	b.n	8013798 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 8013774:	7e3b      	ldrb	r3, [r7, #24]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d00e      	beq.n	8013798 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6a1b      	ldr	r3, [r3, #32]
 801377e:	699b      	ldr	r3, [r3, #24]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d102      	bne.n	801378a <lwip_netconn_do_writemore+0x34a>
 8013784:	f06f 0306 	mvn.w	r3, #6
 8013788:	e000      	b.n	801378c <lwip_netconn_do_writemore+0x34c>
 801378a:	2300      	movs	r3, #0
 801378c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801378e:	2301      	movs	r3, #1
 8013790:	76fb      	strb	r3, [r7, #27]
 8013792:	e001      	b.n	8013798 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8013794:	2301      	movs	r3, #1
 8013796:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8013798:	7efb      	ldrb	r3, [r7, #27]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d015      	beq.n	80137ca <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	6a1b      	ldr	r3, [r3, #32]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	330c      	adds	r3, #12
 80137a6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6a1b      	ldr	r3, [r3, #32]
 80137ac:	7ffa      	ldrb	r2, [r7, #31]
 80137ae:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2200      	movs	r2, #0
 80137b4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2200      	movs	r2, #0
 80137ba:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80137bc:	78fb      	ldrb	r3, [r7, #3]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d006      	beq.n	80137d0 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80137c2:	68b8      	ldr	r0, [r7, #8]
 80137c4:	f004 fcb0 	bl	8018128 <sys_sem_signal>
 80137c8:	e002      	b.n	80137d0 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80137ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137ce:	e000      	b.n	80137d2 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 80137d0:	2300      	movs	r3, #0
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3720      	adds	r7, #32
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}
 80137da:	bf00      	nop

080137dc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b084      	sub	sp, #16
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7fe fd16 	bl	801221e <netconn_err>
 80137f2:	4603      	mov	r3, r0
 80137f4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80137f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d166      	bne.n	80138cc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013808:	2b10      	cmp	r3, #16
 801380a:	d15d      	bne.n	80138c8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	785b      	ldrb	r3, [r3, #1]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d002      	beq.n	801381c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8013816:	23fb      	movs	r3, #251	; 0xfb
 8013818:	73fb      	strb	r3, [r7, #15]
 801381a:	e057      	b.n	80138cc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d04d      	beq.n	80138c2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	2201      	movs	r2, #1
 801382c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	6a1b      	ldr	r3, [r3, #32]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d006      	beq.n	8013846 <lwip_netconn_do_write+0x6a>
 8013838:	4b28      	ldr	r3, [pc, #160]	; (80138dc <lwip_netconn_do_write+0x100>)
 801383a:	f240 7223 	movw	r2, #1827	; 0x723
 801383e:	4928      	ldr	r1, [pc, #160]	; (80138e0 <lwip_netconn_do_write+0x104>)
 8013840:	4828      	ldr	r0, [pc, #160]	; (80138e4 <lwip_netconn_do_write+0x108>)
 8013842:	f00c f963 	bl	801fb0c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	695b      	ldr	r3, [r3, #20]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d106      	bne.n	801385c <lwip_netconn_do_write+0x80>
 801384e:	4b23      	ldr	r3, [pc, #140]	; (80138dc <lwip_netconn_do_write+0x100>)
 8013850:	f240 7224 	movw	r2, #1828	; 0x724
 8013854:	4924      	ldr	r1, [pc, #144]	; (80138e8 <lwip_netconn_do_write+0x10c>)
 8013856:	4823      	ldr	r0, [pc, #140]	; (80138e4 <lwip_netconn_do_write+0x108>)
 8013858:	f00c f958 	bl	801fb0c <iprintf>
        msg->conn->current_msg = msg;
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	68ba      	ldr	r2, [r7, #8]
 8013862:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8013864:	68bb      	ldr	r3, [r7, #8]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	2100      	movs	r1, #0
 801386a:	4618      	mov	r0, r3
 801386c:	f7ff fde8 	bl	8013440 <lwip_netconn_do_writemore>
 8013870:	4603      	mov	r3, r0
 8013872:	2b00      	cmp	r3, #0
 8013874:	d02e      	beq.n	80138d4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	785b      	ldrb	r3, [r3, #1]
 801387c:	2b01      	cmp	r3, #1
 801387e:	d006      	beq.n	801388e <lwip_netconn_do_write+0xb2>
 8013880:	4b16      	ldr	r3, [pc, #88]	; (80138dc <lwip_netconn_do_write+0x100>)
 8013882:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013886:	4919      	ldr	r1, [pc, #100]	; (80138ec <lwip_netconn_do_write+0x110>)
 8013888:	4816      	ldr	r0, [pc, #88]	; (80138e4 <lwip_netconn_do_write+0x108>)
 801388a:	f00c f93f 	bl	801fb0c <iprintf>
          UNLOCK_TCPIP_CORE();
 801388e:	4818      	ldr	r0, [pc, #96]	; (80138f0 <lwip_netconn_do_write+0x114>)
 8013890:	f004 fcbb 	bl	801820a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	330c      	adds	r3, #12
 801389a:	2100      	movs	r1, #0
 801389c:	4618      	mov	r0, r3
 801389e:	f004 fc12 	bl	80180c6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80138a2:	4813      	ldr	r0, [pc, #76]	; (80138f0 <lwip_netconn_do_write+0x114>)
 80138a4:	f004 fca2 	bl	80181ec <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	785b      	ldrb	r3, [r3, #1]
 80138ae:	2b01      	cmp	r3, #1
 80138b0:	d110      	bne.n	80138d4 <lwip_netconn_do_write+0xf8>
 80138b2:	4b0a      	ldr	r3, [pc, #40]	; (80138dc <lwip_netconn_do_write+0x100>)
 80138b4:	f240 722c 	movw	r2, #1836	; 0x72c
 80138b8:	490c      	ldr	r1, [pc, #48]	; (80138ec <lwip_netconn_do_write+0x110>)
 80138ba:	480a      	ldr	r0, [pc, #40]	; (80138e4 <lwip_netconn_do_write+0x108>)
 80138bc:	f00c f926 	bl	801fb0c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80138c0:	e008      	b.n	80138d4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80138c2:	23f5      	movs	r3, #245	; 0xf5
 80138c4:	73fb      	strb	r3, [r7, #15]
 80138c6:	e001      	b.n	80138cc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80138c8:	23fa      	movs	r3, #250	; 0xfa
 80138ca:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	7bfa      	ldrb	r2, [r7, #15]
 80138d0:	711a      	strb	r2, [r3, #4]
 80138d2:	e000      	b.n	80138d6 <lwip_netconn_do_write+0xfa>
        return;
 80138d4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80138d6:	3710      	adds	r7, #16
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}
 80138dc:	08020dcc 	.word	0x08020dcc
 80138e0:	080211b4 	.word	0x080211b4
 80138e4:	08020e54 	.word	0x08020e54
 80138e8:	0802133c 	.word	0x0802133c
 80138ec:	080211d0 	.word	0x080211d0
 80138f0:	2400f97c 	.word	0x2400f97c

080138f4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	785b      	ldrb	r3, [r3, #1]
 8013906:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d069      	beq.n	80139e6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 801391c:	2b10      	cmp	r3, #16
 801391e:	d162      	bne.n	80139e6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013924:	2b03      	cmp	r3, #3
 8013926:	d002      	beq.n	801392e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8013928:	7afb      	ldrb	r3, [r7, #11]
 801392a:	2b02      	cmp	r3, #2
 801392c:	d05b      	beq.n	80139e6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801392e:	7afb      	ldrb	r3, [r7, #11]
 8013930:	2b03      	cmp	r3, #3
 8013932:	d103      	bne.n	801393c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	22f5      	movs	r2, #245	; 0xf5
 8013938:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801393a:	e059      	b.n	80139f0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 801393c:	7afb      	ldrb	r3, [r7, #11]
 801393e:	2b01      	cmp	r3, #1
 8013940:	d103      	bne.n	801394a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	22fb      	movs	r2, #251	; 0xfb
 8013946:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8013948:	e052      	b.n	80139f0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	7a1b      	ldrb	r3, [r3, #8]
 801394e:	f003 0301 	and.w	r3, r3, #1
 8013952:	2b00      	cmp	r3, #0
 8013954:	d004      	beq.n	8013960 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	4618      	mov	r0, r3
 801395c:	f7ff f99c 	bl	8012c98 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	6a1b      	ldr	r3, [r3, #32]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d006      	beq.n	8013978 <lwip_netconn_do_close+0x84>
 801396a:	4b23      	ldr	r3, [pc, #140]	; (80139f8 <lwip_netconn_do_close+0x104>)
 801396c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8013970:	4922      	ldr	r1, [pc, #136]	; (80139fc <lwip_netconn_do_close+0x108>)
 8013972:	4823      	ldr	r0, [pc, #140]	; (8013a00 <lwip_netconn_do_close+0x10c>)
 8013974:	f00c f8ca 	bl	801fb0c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2204      	movs	r2, #4
 801397e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	68fa      	ldr	r2, [r7, #12]
 8013986:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	2100      	movs	r1, #0
 801398e:	4618      	mov	r0, r3
 8013990:	f7ff fa00 	bl	8012d94 <lwip_netconn_do_close_internal>
 8013994:	4603      	mov	r3, r0
 8013996:	2b00      	cmp	r3, #0
 8013998:	d029      	beq.n	80139ee <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	785b      	ldrb	r3, [r3, #1]
 80139a0:	2b04      	cmp	r3, #4
 80139a2:	d006      	beq.n	80139b2 <lwip_netconn_do_close+0xbe>
 80139a4:	4b14      	ldr	r3, [pc, #80]	; (80139f8 <lwip_netconn_do_close+0x104>)
 80139a6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80139aa:	4916      	ldr	r1, [pc, #88]	; (8013a04 <lwip_netconn_do_close+0x110>)
 80139ac:	4814      	ldr	r0, [pc, #80]	; (8013a00 <lwip_netconn_do_close+0x10c>)
 80139ae:	f00c f8ad 	bl	801fb0c <iprintf>
        UNLOCK_TCPIP_CORE();
 80139b2:	4815      	ldr	r0, [pc, #84]	; (8013a08 <lwip_netconn_do_close+0x114>)
 80139b4:	f004 fc29 	bl	801820a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	330c      	adds	r3, #12
 80139be:	2100      	movs	r1, #0
 80139c0:	4618      	mov	r0, r3
 80139c2:	f004 fb80 	bl	80180c6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80139c6:	4810      	ldr	r0, [pc, #64]	; (8013a08 <lwip_netconn_do_close+0x114>)
 80139c8:	f004 fc10 	bl	80181ec <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	785b      	ldrb	r3, [r3, #1]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d00b      	beq.n	80139ee <lwip_netconn_do_close+0xfa>
 80139d6:	4b08      	ldr	r3, [pc, #32]	; (80139f8 <lwip_netconn_do_close+0x104>)
 80139d8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80139dc:	4909      	ldr	r1, [pc, #36]	; (8013a04 <lwip_netconn_do_close+0x110>)
 80139de:	4808      	ldr	r0, [pc, #32]	; (8013a00 <lwip_netconn_do_close+0x10c>)
 80139e0:	f00c f894 	bl	801fb0c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80139e4:	e003      	b.n	80139ee <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	22f5      	movs	r2, #245	; 0xf5
 80139ea:	711a      	strb	r2, [r3, #4]
 80139ec:	e000      	b.n	80139f0 <lwip_netconn_do_close+0xfc>
      return;
 80139ee:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80139f0:	3710      	adds	r7, #16
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	08020dcc 	.word	0x08020dcc
 80139fc:	080211b4 	.word	0x080211b4
 8013a00:	08020e54 	.word	0x08020e54
 8013a04:	080211d0 	.word	0x080211d0
 8013a08:	2400f97c 	.word	0x2400f97c

08013a0c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	b083      	sub	sp, #12
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	4603      	mov	r3, r0
 8013a14:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8013a16:	88fb      	ldrh	r3, [r7, #6]
 8013a18:	021b      	lsls	r3, r3, #8
 8013a1a:	b21a      	sxth	r2, r3
 8013a1c:	88fb      	ldrh	r3, [r7, #6]
 8013a1e:	0a1b      	lsrs	r3, r3, #8
 8013a20:	b29b      	uxth	r3, r3
 8013a22:	b21b      	sxth	r3, r3
 8013a24:	4313      	orrs	r3, r2
 8013a26:	b21b      	sxth	r3, r3
 8013a28:	b29b      	uxth	r3, r3
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	370c      	adds	r7, #12
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr

08013a36 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013a36:	b480      	push	{r7}
 8013a38:	b083      	sub	sp, #12
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	061a      	lsls	r2, r3, #24
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	021b      	lsls	r3, r3, #8
 8013a46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013a4a:	431a      	orrs	r2, r3
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	0a1b      	lsrs	r3, r3, #8
 8013a50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013a54:	431a      	orrs	r2, r3
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	0e1b      	lsrs	r3, r3, #24
 8013a5a:	4313      	orrs	r3, r2
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	370c      	adds	r7, #12
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr

08013a68 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013a70:	4915      	ldr	r1, [pc, #84]	; (8013ac8 <etharp_free_entry+0x60>)
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	4613      	mov	r3, r2
 8013a76:	005b      	lsls	r3, r3, #1
 8013a78:	4413      	add	r3, r2
 8013a7a:	00db      	lsls	r3, r3, #3
 8013a7c:	440b      	add	r3, r1
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d013      	beq.n	8013aac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013a84:	4910      	ldr	r1, [pc, #64]	; (8013ac8 <etharp_free_entry+0x60>)
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	4613      	mov	r3, r2
 8013a8a:	005b      	lsls	r3, r3, #1
 8013a8c:	4413      	add	r3, r2
 8013a8e:	00db      	lsls	r3, r3, #3
 8013a90:	440b      	add	r3, r1
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	4618      	mov	r0, r3
 8013a96:	f003 ff8d 	bl	80179b4 <pbuf_free>
    arp_table[i].q = NULL;
 8013a9a:	490b      	ldr	r1, [pc, #44]	; (8013ac8 <etharp_free_entry+0x60>)
 8013a9c:	687a      	ldr	r2, [r7, #4]
 8013a9e:	4613      	mov	r3, r2
 8013aa0:	005b      	lsls	r3, r3, #1
 8013aa2:	4413      	add	r3, r2
 8013aa4:	00db      	lsls	r3, r3, #3
 8013aa6:	440b      	add	r3, r1
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013aac:	4906      	ldr	r1, [pc, #24]	; (8013ac8 <etharp_free_entry+0x60>)
 8013aae:	687a      	ldr	r2, [r7, #4]
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	005b      	lsls	r3, r3, #1
 8013ab4:	4413      	add	r3, r2
 8013ab6:	00db      	lsls	r3, r3, #3
 8013ab8:	440b      	add	r3, r1
 8013aba:	3314      	adds	r3, #20
 8013abc:	2200      	movs	r2, #0
 8013abe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013ac0:	bf00      	nop
 8013ac2:	3708      	adds	r7, #8
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	24008d5c 	.word	0x24008d5c

08013acc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	607b      	str	r3, [r7, #4]
 8013ad6:	e096      	b.n	8013c06 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013ad8:	494f      	ldr	r1, [pc, #316]	; (8013c18 <etharp_tmr+0x14c>)
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	4613      	mov	r3, r2
 8013ade:	005b      	lsls	r3, r3, #1
 8013ae0:	4413      	add	r3, r2
 8013ae2:	00db      	lsls	r3, r3, #3
 8013ae4:	440b      	add	r3, r1
 8013ae6:	3314      	adds	r3, #20
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013aec:	78fb      	ldrb	r3, [r7, #3]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	f000 8086 	beq.w	8013c00 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013af4:	4948      	ldr	r1, [pc, #288]	; (8013c18 <etharp_tmr+0x14c>)
 8013af6:	687a      	ldr	r2, [r7, #4]
 8013af8:	4613      	mov	r3, r2
 8013afa:	005b      	lsls	r3, r3, #1
 8013afc:	4413      	add	r3, r2
 8013afe:	00db      	lsls	r3, r3, #3
 8013b00:	440b      	add	r3, r1
 8013b02:	3312      	adds	r3, #18
 8013b04:	881b      	ldrh	r3, [r3, #0]
 8013b06:	3301      	adds	r3, #1
 8013b08:	b298      	uxth	r0, r3
 8013b0a:	4943      	ldr	r1, [pc, #268]	; (8013c18 <etharp_tmr+0x14c>)
 8013b0c:	687a      	ldr	r2, [r7, #4]
 8013b0e:	4613      	mov	r3, r2
 8013b10:	005b      	lsls	r3, r3, #1
 8013b12:	4413      	add	r3, r2
 8013b14:	00db      	lsls	r3, r3, #3
 8013b16:	440b      	add	r3, r1
 8013b18:	3312      	adds	r3, #18
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013b1e:	493e      	ldr	r1, [pc, #248]	; (8013c18 <etharp_tmr+0x14c>)
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	4613      	mov	r3, r2
 8013b24:	005b      	lsls	r3, r3, #1
 8013b26:	4413      	add	r3, r2
 8013b28:	00db      	lsls	r3, r3, #3
 8013b2a:	440b      	add	r3, r1
 8013b2c:	3312      	adds	r3, #18
 8013b2e:	881b      	ldrh	r3, [r3, #0]
 8013b30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013b34:	d215      	bcs.n	8013b62 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013b36:	4938      	ldr	r1, [pc, #224]	; (8013c18 <etharp_tmr+0x14c>)
 8013b38:	687a      	ldr	r2, [r7, #4]
 8013b3a:	4613      	mov	r3, r2
 8013b3c:	005b      	lsls	r3, r3, #1
 8013b3e:	4413      	add	r3, r2
 8013b40:	00db      	lsls	r3, r3, #3
 8013b42:	440b      	add	r3, r1
 8013b44:	3314      	adds	r3, #20
 8013b46:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013b48:	2b01      	cmp	r3, #1
 8013b4a:	d10e      	bne.n	8013b6a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013b4c:	4932      	ldr	r1, [pc, #200]	; (8013c18 <etharp_tmr+0x14c>)
 8013b4e:	687a      	ldr	r2, [r7, #4]
 8013b50:	4613      	mov	r3, r2
 8013b52:	005b      	lsls	r3, r3, #1
 8013b54:	4413      	add	r3, r2
 8013b56:	00db      	lsls	r3, r3, #3
 8013b58:	440b      	add	r3, r1
 8013b5a:	3312      	adds	r3, #18
 8013b5c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013b5e:	2b04      	cmp	r3, #4
 8013b60:	d903      	bls.n	8013b6a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f7ff ff80 	bl	8013a68 <etharp_free_entry>
 8013b68:	e04a      	b.n	8013c00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013b6a:	492b      	ldr	r1, [pc, #172]	; (8013c18 <etharp_tmr+0x14c>)
 8013b6c:	687a      	ldr	r2, [r7, #4]
 8013b6e:	4613      	mov	r3, r2
 8013b70:	005b      	lsls	r3, r3, #1
 8013b72:	4413      	add	r3, r2
 8013b74:	00db      	lsls	r3, r3, #3
 8013b76:	440b      	add	r3, r1
 8013b78:	3314      	adds	r3, #20
 8013b7a:	781b      	ldrb	r3, [r3, #0]
 8013b7c:	2b03      	cmp	r3, #3
 8013b7e:	d10a      	bne.n	8013b96 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013b80:	4925      	ldr	r1, [pc, #148]	; (8013c18 <etharp_tmr+0x14c>)
 8013b82:	687a      	ldr	r2, [r7, #4]
 8013b84:	4613      	mov	r3, r2
 8013b86:	005b      	lsls	r3, r3, #1
 8013b88:	4413      	add	r3, r2
 8013b8a:	00db      	lsls	r3, r3, #3
 8013b8c:	440b      	add	r3, r1
 8013b8e:	3314      	adds	r3, #20
 8013b90:	2204      	movs	r2, #4
 8013b92:	701a      	strb	r2, [r3, #0]
 8013b94:	e034      	b.n	8013c00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013b96:	4920      	ldr	r1, [pc, #128]	; (8013c18 <etharp_tmr+0x14c>)
 8013b98:	687a      	ldr	r2, [r7, #4]
 8013b9a:	4613      	mov	r3, r2
 8013b9c:	005b      	lsls	r3, r3, #1
 8013b9e:	4413      	add	r3, r2
 8013ba0:	00db      	lsls	r3, r3, #3
 8013ba2:	440b      	add	r3, r1
 8013ba4:	3314      	adds	r3, #20
 8013ba6:	781b      	ldrb	r3, [r3, #0]
 8013ba8:	2b04      	cmp	r3, #4
 8013baa:	d10a      	bne.n	8013bc2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013bac:	491a      	ldr	r1, [pc, #104]	; (8013c18 <etharp_tmr+0x14c>)
 8013bae:	687a      	ldr	r2, [r7, #4]
 8013bb0:	4613      	mov	r3, r2
 8013bb2:	005b      	lsls	r3, r3, #1
 8013bb4:	4413      	add	r3, r2
 8013bb6:	00db      	lsls	r3, r3, #3
 8013bb8:	440b      	add	r3, r1
 8013bba:	3314      	adds	r3, #20
 8013bbc:	2202      	movs	r2, #2
 8013bbe:	701a      	strb	r2, [r3, #0]
 8013bc0:	e01e      	b.n	8013c00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013bc2:	4915      	ldr	r1, [pc, #84]	; (8013c18 <etharp_tmr+0x14c>)
 8013bc4:	687a      	ldr	r2, [r7, #4]
 8013bc6:	4613      	mov	r3, r2
 8013bc8:	005b      	lsls	r3, r3, #1
 8013bca:	4413      	add	r3, r2
 8013bcc:	00db      	lsls	r3, r3, #3
 8013bce:	440b      	add	r3, r1
 8013bd0:	3314      	adds	r3, #20
 8013bd2:	781b      	ldrb	r3, [r3, #0]
 8013bd4:	2b01      	cmp	r3, #1
 8013bd6:	d113      	bne.n	8013c00 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013bd8:	490f      	ldr	r1, [pc, #60]	; (8013c18 <etharp_tmr+0x14c>)
 8013bda:	687a      	ldr	r2, [r7, #4]
 8013bdc:	4613      	mov	r3, r2
 8013bde:	005b      	lsls	r3, r3, #1
 8013be0:	4413      	add	r3, r2
 8013be2:	00db      	lsls	r3, r3, #3
 8013be4:	440b      	add	r3, r1
 8013be6:	3308      	adds	r3, #8
 8013be8:	6818      	ldr	r0, [r3, #0]
 8013bea:	687a      	ldr	r2, [r7, #4]
 8013bec:	4613      	mov	r3, r2
 8013bee:	005b      	lsls	r3, r3, #1
 8013bf0:	4413      	add	r3, r2
 8013bf2:	00db      	lsls	r3, r3, #3
 8013bf4:	4a08      	ldr	r2, [pc, #32]	; (8013c18 <etharp_tmr+0x14c>)
 8013bf6:	4413      	add	r3, r2
 8013bf8:	3304      	adds	r3, #4
 8013bfa:	4619      	mov	r1, r3
 8013bfc:	f000 fe6e 	bl	80148dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	3301      	adds	r3, #1
 8013c04:	607b      	str	r3, [r7, #4]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2b09      	cmp	r3, #9
 8013c0a:	f77f af65 	ble.w	8013ad8 <etharp_tmr+0xc>
      }
    }
  }
}
 8013c0e:	bf00      	nop
 8013c10:	bf00      	nop
 8013c12:	3708      	adds	r7, #8
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}
 8013c18:	24008d5c 	.word	0x24008d5c

08013c1c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b08a      	sub	sp, #40	; 0x28
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	460b      	mov	r3, r1
 8013c26:	607a      	str	r2, [r7, #4]
 8013c28:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013c2a:	230a      	movs	r3, #10
 8013c2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013c2e:	230a      	movs	r3, #10
 8013c30:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013c32:	230a      	movs	r3, #10
 8013c34:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013c36:	2300      	movs	r3, #0
 8013c38:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013c3a:	230a      	movs	r3, #10
 8013c3c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	83bb      	strh	r3, [r7, #28]
 8013c42:	2300      	movs	r3, #0
 8013c44:	837b      	strh	r3, [r7, #26]
 8013c46:	2300      	movs	r3, #0
 8013c48:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	843b      	strh	r3, [r7, #32]
 8013c4e:	e0ae      	b.n	8013dae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013c50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c54:	49a6      	ldr	r1, [pc, #664]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013c56:	4613      	mov	r3, r2
 8013c58:	005b      	lsls	r3, r3, #1
 8013c5a:	4413      	add	r3, r2
 8013c5c:	00db      	lsls	r3, r3, #3
 8013c5e:	440b      	add	r3, r1
 8013c60:	3314      	adds	r3, #20
 8013c62:	781b      	ldrb	r3, [r3, #0]
 8013c64:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013c66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013c6a:	2b0a      	cmp	r3, #10
 8013c6c:	d105      	bne.n	8013c7a <etharp_find_entry+0x5e>
 8013c6e:	7dfb      	ldrb	r3, [r7, #23]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d102      	bne.n	8013c7a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013c74:	8c3b      	ldrh	r3, [r7, #32]
 8013c76:	847b      	strh	r3, [r7, #34]	; 0x22
 8013c78:	e095      	b.n	8013da6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013c7a:	7dfb      	ldrb	r3, [r7, #23]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	f000 8092 	beq.w	8013da6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013c82:	7dfb      	ldrb	r3, [r7, #23]
 8013c84:	2b01      	cmp	r3, #1
 8013c86:	d009      	beq.n	8013c9c <etharp_find_entry+0x80>
 8013c88:	7dfb      	ldrb	r3, [r7, #23]
 8013c8a:	2b01      	cmp	r3, #1
 8013c8c:	d806      	bhi.n	8013c9c <etharp_find_entry+0x80>
 8013c8e:	4b99      	ldr	r3, [pc, #612]	; (8013ef4 <etharp_find_entry+0x2d8>)
 8013c90:	f240 1223 	movw	r2, #291	; 0x123
 8013c94:	4998      	ldr	r1, [pc, #608]	; (8013ef8 <etharp_find_entry+0x2dc>)
 8013c96:	4899      	ldr	r0, [pc, #612]	; (8013efc <etharp_find_entry+0x2e0>)
 8013c98:	f00b ff38 	bl	801fb0c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d020      	beq.n	8013ce4 <etharp_find_entry+0xc8>
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	6819      	ldr	r1, [r3, #0]
 8013ca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013caa:	4891      	ldr	r0, [pc, #580]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013cac:	4613      	mov	r3, r2
 8013cae:	005b      	lsls	r3, r3, #1
 8013cb0:	4413      	add	r3, r2
 8013cb2:	00db      	lsls	r3, r3, #3
 8013cb4:	4403      	add	r3, r0
 8013cb6:	3304      	adds	r3, #4
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	4299      	cmp	r1, r3
 8013cbc:	d112      	bne.n	8013ce4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d00c      	beq.n	8013cde <etharp_find_entry+0xc2>
 8013cc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cc8:	4989      	ldr	r1, [pc, #548]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013cca:	4613      	mov	r3, r2
 8013ccc:	005b      	lsls	r3, r3, #1
 8013cce:	4413      	add	r3, r2
 8013cd0:	00db      	lsls	r3, r3, #3
 8013cd2:	440b      	add	r3, r1
 8013cd4:	3308      	adds	r3, #8
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d102      	bne.n	8013ce4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013cde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013ce2:	e100      	b.n	8013ee6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013ce4:	7dfb      	ldrb	r3, [r7, #23]
 8013ce6:	2b01      	cmp	r3, #1
 8013ce8:	d140      	bne.n	8013d6c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013cea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cee:	4980      	ldr	r1, [pc, #512]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013cf0:	4613      	mov	r3, r2
 8013cf2:	005b      	lsls	r3, r3, #1
 8013cf4:	4413      	add	r3, r2
 8013cf6:	00db      	lsls	r3, r3, #3
 8013cf8:	440b      	add	r3, r1
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d01a      	beq.n	8013d36 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013d00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d04:	497a      	ldr	r1, [pc, #488]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013d06:	4613      	mov	r3, r2
 8013d08:	005b      	lsls	r3, r3, #1
 8013d0a:	4413      	add	r3, r2
 8013d0c:	00db      	lsls	r3, r3, #3
 8013d0e:	440b      	add	r3, r1
 8013d10:	3312      	adds	r3, #18
 8013d12:	881b      	ldrh	r3, [r3, #0]
 8013d14:	8bba      	ldrh	r2, [r7, #28]
 8013d16:	429a      	cmp	r2, r3
 8013d18:	d845      	bhi.n	8013da6 <etharp_find_entry+0x18a>
            old_queue = i;
 8013d1a:	8c3b      	ldrh	r3, [r7, #32]
 8013d1c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013d1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d22:	4973      	ldr	r1, [pc, #460]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013d24:	4613      	mov	r3, r2
 8013d26:	005b      	lsls	r3, r3, #1
 8013d28:	4413      	add	r3, r2
 8013d2a:	00db      	lsls	r3, r3, #3
 8013d2c:	440b      	add	r3, r1
 8013d2e:	3312      	adds	r3, #18
 8013d30:	881b      	ldrh	r3, [r3, #0]
 8013d32:	83bb      	strh	r3, [r7, #28]
 8013d34:	e037      	b.n	8013da6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013d36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d3a:	496d      	ldr	r1, [pc, #436]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013d3c:	4613      	mov	r3, r2
 8013d3e:	005b      	lsls	r3, r3, #1
 8013d40:	4413      	add	r3, r2
 8013d42:	00db      	lsls	r3, r3, #3
 8013d44:	440b      	add	r3, r1
 8013d46:	3312      	adds	r3, #18
 8013d48:	881b      	ldrh	r3, [r3, #0]
 8013d4a:	8b7a      	ldrh	r2, [r7, #26]
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d82a      	bhi.n	8013da6 <etharp_find_entry+0x18a>
            old_pending = i;
 8013d50:	8c3b      	ldrh	r3, [r7, #32]
 8013d52:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013d54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d58:	4965      	ldr	r1, [pc, #404]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013d5a:	4613      	mov	r3, r2
 8013d5c:	005b      	lsls	r3, r3, #1
 8013d5e:	4413      	add	r3, r2
 8013d60:	00db      	lsls	r3, r3, #3
 8013d62:	440b      	add	r3, r1
 8013d64:	3312      	adds	r3, #18
 8013d66:	881b      	ldrh	r3, [r3, #0]
 8013d68:	837b      	strh	r3, [r7, #26]
 8013d6a:	e01c      	b.n	8013da6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013d6c:	7dfb      	ldrb	r3, [r7, #23]
 8013d6e:	2b01      	cmp	r3, #1
 8013d70:	d919      	bls.n	8013da6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013d72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d76:	495e      	ldr	r1, [pc, #376]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013d78:	4613      	mov	r3, r2
 8013d7a:	005b      	lsls	r3, r3, #1
 8013d7c:	4413      	add	r3, r2
 8013d7e:	00db      	lsls	r3, r3, #3
 8013d80:	440b      	add	r3, r1
 8013d82:	3312      	adds	r3, #18
 8013d84:	881b      	ldrh	r3, [r3, #0]
 8013d86:	8b3a      	ldrh	r2, [r7, #24]
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	d80c      	bhi.n	8013da6 <etharp_find_entry+0x18a>
            old_stable = i;
 8013d8c:	8c3b      	ldrh	r3, [r7, #32]
 8013d8e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013d90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d94:	4956      	ldr	r1, [pc, #344]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013d96:	4613      	mov	r3, r2
 8013d98:	005b      	lsls	r3, r3, #1
 8013d9a:	4413      	add	r3, r2
 8013d9c:	00db      	lsls	r3, r3, #3
 8013d9e:	440b      	add	r3, r1
 8013da0:	3312      	adds	r3, #18
 8013da2:	881b      	ldrh	r3, [r3, #0]
 8013da4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013da6:	8c3b      	ldrh	r3, [r7, #32]
 8013da8:	3301      	adds	r3, #1
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	843b      	strh	r3, [r7, #32]
 8013dae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013db2:	2b09      	cmp	r3, #9
 8013db4:	f77f af4c 	ble.w	8013c50 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013db8:	7afb      	ldrb	r3, [r7, #11]
 8013dba:	f003 0302 	and.w	r3, r3, #2
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d108      	bne.n	8013dd4 <etharp_find_entry+0x1b8>
 8013dc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013dc6:	2b0a      	cmp	r3, #10
 8013dc8:	d107      	bne.n	8013dda <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013dca:	7afb      	ldrb	r3, [r7, #11]
 8013dcc:	f003 0301 	and.w	r3, r3, #1
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d102      	bne.n	8013dda <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013dd8:	e085      	b.n	8013ee6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013dda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013dde:	2b09      	cmp	r3, #9
 8013de0:	dc02      	bgt.n	8013de8 <etharp_find_entry+0x1cc>
    i = empty;
 8013de2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013de4:	843b      	strh	r3, [r7, #32]
 8013de6:	e039      	b.n	8013e5c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013de8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013dec:	2b09      	cmp	r3, #9
 8013dee:	dc14      	bgt.n	8013e1a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013df2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013df4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013df8:	493d      	ldr	r1, [pc, #244]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013dfa:	4613      	mov	r3, r2
 8013dfc:	005b      	lsls	r3, r3, #1
 8013dfe:	4413      	add	r3, r2
 8013e00:	00db      	lsls	r3, r3, #3
 8013e02:	440b      	add	r3, r1
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d018      	beq.n	8013e3c <etharp_find_entry+0x220>
 8013e0a:	4b3a      	ldr	r3, [pc, #232]	; (8013ef4 <etharp_find_entry+0x2d8>)
 8013e0c:	f240 126d 	movw	r2, #365	; 0x16d
 8013e10:	493b      	ldr	r1, [pc, #236]	; (8013f00 <etharp_find_entry+0x2e4>)
 8013e12:	483a      	ldr	r0, [pc, #232]	; (8013efc <etharp_find_entry+0x2e0>)
 8013e14:	f00b fe7a 	bl	801fb0c <iprintf>
 8013e18:	e010      	b.n	8013e3c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013e1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013e1e:	2b09      	cmp	r3, #9
 8013e20:	dc02      	bgt.n	8013e28 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013e22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013e24:	843b      	strh	r3, [r7, #32]
 8013e26:	e009      	b.n	8013e3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013e28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013e2c:	2b09      	cmp	r3, #9
 8013e2e:	dc02      	bgt.n	8013e36 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013e30:	8bfb      	ldrh	r3, [r7, #30]
 8013e32:	843b      	strh	r3, [r7, #32]
 8013e34:	e002      	b.n	8013e3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e3a:	e054      	b.n	8013ee6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013e3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e40:	2b09      	cmp	r3, #9
 8013e42:	dd06      	ble.n	8013e52 <etharp_find_entry+0x236>
 8013e44:	4b2b      	ldr	r3, [pc, #172]	; (8013ef4 <etharp_find_entry+0x2d8>)
 8013e46:	f240 127f 	movw	r2, #383	; 0x17f
 8013e4a:	492e      	ldr	r1, [pc, #184]	; (8013f04 <etharp_find_entry+0x2e8>)
 8013e4c:	482b      	ldr	r0, [pc, #172]	; (8013efc <etharp_find_entry+0x2e0>)
 8013e4e:	f00b fe5d 	bl	801fb0c <iprintf>
    etharp_free_entry(i);
 8013e52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7ff fe06 	bl	8013a68 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013e5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e60:	2b09      	cmp	r3, #9
 8013e62:	dd06      	ble.n	8013e72 <etharp_find_entry+0x256>
 8013e64:	4b23      	ldr	r3, [pc, #140]	; (8013ef4 <etharp_find_entry+0x2d8>)
 8013e66:	f240 1283 	movw	r2, #387	; 0x183
 8013e6a:	4926      	ldr	r1, [pc, #152]	; (8013f04 <etharp_find_entry+0x2e8>)
 8013e6c:	4823      	ldr	r0, [pc, #140]	; (8013efc <etharp_find_entry+0x2e0>)
 8013e6e:	f00b fe4d 	bl	801fb0c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013e72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e76:	491e      	ldr	r1, [pc, #120]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013e78:	4613      	mov	r3, r2
 8013e7a:	005b      	lsls	r3, r3, #1
 8013e7c:	4413      	add	r3, r2
 8013e7e:	00db      	lsls	r3, r3, #3
 8013e80:	440b      	add	r3, r1
 8013e82:	3314      	adds	r3, #20
 8013e84:	781b      	ldrb	r3, [r3, #0]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d006      	beq.n	8013e98 <etharp_find_entry+0x27c>
 8013e8a:	4b1a      	ldr	r3, [pc, #104]	; (8013ef4 <etharp_find_entry+0x2d8>)
 8013e8c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013e90:	491d      	ldr	r1, [pc, #116]	; (8013f08 <etharp_find_entry+0x2ec>)
 8013e92:	481a      	ldr	r0, [pc, #104]	; (8013efc <etharp_find_entry+0x2e0>)
 8013e94:	f00b fe3a 	bl	801fb0c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d00b      	beq.n	8013eb6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013e9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	6819      	ldr	r1, [r3, #0]
 8013ea6:	4812      	ldr	r0, [pc, #72]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013ea8:	4613      	mov	r3, r2
 8013eaa:	005b      	lsls	r3, r3, #1
 8013eac:	4413      	add	r3, r2
 8013eae:	00db      	lsls	r3, r3, #3
 8013eb0:	4403      	add	r3, r0
 8013eb2:	3304      	adds	r3, #4
 8013eb4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013eb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013eba:	490d      	ldr	r1, [pc, #52]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013ebc:	4613      	mov	r3, r2
 8013ebe:	005b      	lsls	r3, r3, #1
 8013ec0:	4413      	add	r3, r2
 8013ec2:	00db      	lsls	r3, r3, #3
 8013ec4:	440b      	add	r3, r1
 8013ec6:	3312      	adds	r3, #18
 8013ec8:	2200      	movs	r2, #0
 8013eca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013ecc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ed0:	4907      	ldr	r1, [pc, #28]	; (8013ef0 <etharp_find_entry+0x2d4>)
 8013ed2:	4613      	mov	r3, r2
 8013ed4:	005b      	lsls	r3, r3, #1
 8013ed6:	4413      	add	r3, r2
 8013ed8:	00db      	lsls	r3, r3, #3
 8013eda:	440b      	add	r3, r1
 8013edc:	3308      	adds	r3, #8
 8013ede:	687a      	ldr	r2, [r7, #4]
 8013ee0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013ee2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3728      	adds	r7, #40	; 0x28
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}
 8013eee:	bf00      	nop
 8013ef0:	24008d5c 	.word	0x24008d5c
 8013ef4:	08021368 	.word	0x08021368
 8013ef8:	080213e4 	.word	0x080213e4
 8013efc:	08021424 	.word	0x08021424
 8013f00:	0802144c 	.word	0x0802144c
 8013f04:	08021464 	.word	0x08021464
 8013f08:	08021478 	.word	0x08021478

08013f0c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b088      	sub	sp, #32
 8013f10:	af02      	add	r7, sp, #8
 8013f12:	60f8      	str	r0, [r7, #12]
 8013f14:	60b9      	str	r1, [r7, #8]
 8013f16:	607a      	str	r2, [r7, #4]
 8013f18:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013f20:	2b06      	cmp	r3, #6
 8013f22:	d006      	beq.n	8013f32 <etharp_update_arp_entry+0x26>
 8013f24:	4b48      	ldr	r3, [pc, #288]	; (8014048 <etharp_update_arp_entry+0x13c>)
 8013f26:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013f2a:	4948      	ldr	r1, [pc, #288]	; (801404c <etharp_update_arp_entry+0x140>)
 8013f2c:	4848      	ldr	r0, [pc, #288]	; (8014050 <etharp_update_arp_entry+0x144>)
 8013f2e:	f00b fded 	bl	801fb0c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d012      	beq.n	8013f5e <etharp_update_arp_entry+0x52>
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d00e      	beq.n	8013f5e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	68f9      	ldr	r1, [r7, #12]
 8013f46:	4618      	mov	r0, r3
 8013f48:	f001 face 	bl	80154e8 <ip4_addr_isbroadcast_u32>
 8013f4c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d105      	bne.n	8013f5e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f5a:	2be0      	cmp	r3, #224	; 0xe0
 8013f5c:	d102      	bne.n	8013f64 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013f5e:	f06f 030f 	mvn.w	r3, #15
 8013f62:	e06c      	b.n	801403e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013f64:	78fb      	ldrb	r3, [r7, #3]
 8013f66:	68fa      	ldr	r2, [r7, #12]
 8013f68:	4619      	mov	r1, r3
 8013f6a:	68b8      	ldr	r0, [r7, #8]
 8013f6c:	f7ff fe56 	bl	8013c1c <etharp_find_entry>
 8013f70:	4603      	mov	r3, r0
 8013f72:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013f74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	da02      	bge.n	8013f82 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013f7c:	8afb      	ldrh	r3, [r7, #22]
 8013f7e:	b25b      	sxtb	r3, r3
 8013f80:	e05d      	b.n	801403e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013f82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f86:	4933      	ldr	r1, [pc, #204]	; (8014054 <etharp_update_arp_entry+0x148>)
 8013f88:	4613      	mov	r3, r2
 8013f8a:	005b      	lsls	r3, r3, #1
 8013f8c:	4413      	add	r3, r2
 8013f8e:	00db      	lsls	r3, r3, #3
 8013f90:	440b      	add	r3, r1
 8013f92:	3314      	adds	r3, #20
 8013f94:	2202      	movs	r2, #2
 8013f96:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013f98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f9c:	492d      	ldr	r1, [pc, #180]	; (8014054 <etharp_update_arp_entry+0x148>)
 8013f9e:	4613      	mov	r3, r2
 8013fa0:	005b      	lsls	r3, r3, #1
 8013fa2:	4413      	add	r3, r2
 8013fa4:	00db      	lsls	r3, r3, #3
 8013fa6:	440b      	add	r3, r1
 8013fa8:	3308      	adds	r3, #8
 8013faa:	68fa      	ldr	r2, [r7, #12]
 8013fac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013fae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fb2:	4613      	mov	r3, r2
 8013fb4:	005b      	lsls	r3, r3, #1
 8013fb6:	4413      	add	r3, r2
 8013fb8:	00db      	lsls	r3, r3, #3
 8013fba:	3308      	adds	r3, #8
 8013fbc:	4a25      	ldr	r2, [pc, #148]	; (8014054 <etharp_update_arp_entry+0x148>)
 8013fbe:	4413      	add	r3, r2
 8013fc0:	3304      	adds	r3, #4
 8013fc2:	2206      	movs	r2, #6
 8013fc4:	6879      	ldr	r1, [r7, #4]
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f00b f9a2 	bl	801f310 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013fcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fd0:	4920      	ldr	r1, [pc, #128]	; (8014054 <etharp_update_arp_entry+0x148>)
 8013fd2:	4613      	mov	r3, r2
 8013fd4:	005b      	lsls	r3, r3, #1
 8013fd6:	4413      	add	r3, r2
 8013fd8:	00db      	lsls	r3, r3, #3
 8013fda:	440b      	add	r3, r1
 8013fdc:	3312      	adds	r3, #18
 8013fde:	2200      	movs	r2, #0
 8013fe0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013fe2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fe6:	491b      	ldr	r1, [pc, #108]	; (8014054 <etharp_update_arp_entry+0x148>)
 8013fe8:	4613      	mov	r3, r2
 8013fea:	005b      	lsls	r3, r3, #1
 8013fec:	4413      	add	r3, r2
 8013fee:	00db      	lsls	r3, r3, #3
 8013ff0:	440b      	add	r3, r1
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d021      	beq.n	801403c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013ff8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ffc:	4915      	ldr	r1, [pc, #84]	; (8014054 <etharp_update_arp_entry+0x148>)
 8013ffe:	4613      	mov	r3, r2
 8014000:	005b      	lsls	r3, r3, #1
 8014002:	4413      	add	r3, r2
 8014004:	00db      	lsls	r3, r3, #3
 8014006:	440b      	add	r3, r1
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801400c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014010:	4910      	ldr	r1, [pc, #64]	; (8014054 <etharp_update_arp_entry+0x148>)
 8014012:	4613      	mov	r3, r2
 8014014:	005b      	lsls	r3, r3, #1
 8014016:	4413      	add	r3, r2
 8014018:	00db      	lsls	r3, r3, #3
 801401a:	440b      	add	r3, r1
 801401c:	2200      	movs	r2, #0
 801401e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014026:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801402a:	9300      	str	r3, [sp, #0]
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6939      	ldr	r1, [r7, #16]
 8014030:	68f8      	ldr	r0, [r7, #12]
 8014032:	f000 fcf3 	bl	8014a1c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014036:	6938      	ldr	r0, [r7, #16]
 8014038:	f003 fcbc 	bl	80179b4 <pbuf_free>
  }
  return ERR_OK;
 801403c:	2300      	movs	r3, #0
}
 801403e:	4618      	mov	r0, r3
 8014040:	3718      	adds	r7, #24
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	08021368 	.word	0x08021368
 801404c:	080214a4 	.word	0x080214a4
 8014050:	08021424 	.word	0x08021424
 8014054:	24008d5c 	.word	0x24008d5c

08014058 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b084      	sub	sp, #16
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014060:	2300      	movs	r3, #0
 8014062:	60fb      	str	r3, [r7, #12]
 8014064:	e01e      	b.n	80140a4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014066:	4913      	ldr	r1, [pc, #76]	; (80140b4 <etharp_cleanup_netif+0x5c>)
 8014068:	68fa      	ldr	r2, [r7, #12]
 801406a:	4613      	mov	r3, r2
 801406c:	005b      	lsls	r3, r3, #1
 801406e:	4413      	add	r3, r2
 8014070:	00db      	lsls	r3, r3, #3
 8014072:	440b      	add	r3, r1
 8014074:	3314      	adds	r3, #20
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801407a:	7afb      	ldrb	r3, [r7, #11]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d00e      	beq.n	801409e <etharp_cleanup_netif+0x46>
 8014080:	490c      	ldr	r1, [pc, #48]	; (80140b4 <etharp_cleanup_netif+0x5c>)
 8014082:	68fa      	ldr	r2, [r7, #12]
 8014084:	4613      	mov	r3, r2
 8014086:	005b      	lsls	r3, r3, #1
 8014088:	4413      	add	r3, r2
 801408a:	00db      	lsls	r3, r3, #3
 801408c:	440b      	add	r3, r1
 801408e:	3308      	adds	r3, #8
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	429a      	cmp	r2, r3
 8014096:	d102      	bne.n	801409e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014098:	68f8      	ldr	r0, [r7, #12]
 801409a:	f7ff fce5 	bl	8013a68 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	3301      	adds	r3, #1
 80140a2:	60fb      	str	r3, [r7, #12]
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	2b09      	cmp	r3, #9
 80140a8:	dddd      	ble.n	8014066 <etharp_cleanup_netif+0xe>
    }
  }
}
 80140aa:	bf00      	nop
 80140ac:	bf00      	nop
 80140ae:	3710      	adds	r7, #16
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	24008d5c 	.word	0x24008d5c

080140b8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80140b8:	b5b0      	push	{r4, r5, r7, lr}
 80140ba:	b08a      	sub	sp, #40	; 0x28
 80140bc:	af04      	add	r7, sp, #16
 80140be:	6078      	str	r0, [r7, #4]
 80140c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d107      	bne.n	80140d8 <etharp_input+0x20>
 80140c8:	4b3d      	ldr	r3, [pc, #244]	; (80141c0 <etharp_input+0x108>)
 80140ca:	f240 228a 	movw	r2, #650	; 0x28a
 80140ce:	493d      	ldr	r1, [pc, #244]	; (80141c4 <etharp_input+0x10c>)
 80140d0:	483d      	ldr	r0, [pc, #244]	; (80141c8 <etharp_input+0x110>)
 80140d2:	f00b fd1b 	bl	801fb0c <iprintf>
 80140d6:	e06f      	b.n	80141b8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	685b      	ldr	r3, [r3, #4]
 80140dc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	881b      	ldrh	r3, [r3, #0]
 80140e2:	b29b      	uxth	r3, r3
 80140e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80140e8:	d10c      	bne.n	8014104 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80140ee:	2b06      	cmp	r3, #6
 80140f0:	d108      	bne.n	8014104 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80140f6:	2b04      	cmp	r3, #4
 80140f8:	d104      	bne.n	8014104 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	885b      	ldrh	r3, [r3, #2]
 80140fe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014100:	2b08      	cmp	r3, #8
 8014102:	d003      	beq.n	801410c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f003 fc55 	bl	80179b4 <pbuf_free>
    return;
 801410a:	e055      	b.n	80141b8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801410c:	693b      	ldr	r3, [r7, #16]
 801410e:	330e      	adds	r3, #14
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014114:	693b      	ldr	r3, [r7, #16]
 8014116:	3318      	adds	r3, #24
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	3304      	adds	r3, #4
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d102      	bne.n	801412c <etharp_input+0x74>
    for_us = 0;
 8014126:	2300      	movs	r3, #0
 8014128:	75fb      	strb	r3, [r7, #23]
 801412a:	e009      	b.n	8014140 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801412c:	68ba      	ldr	r2, [r7, #8]
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	3304      	adds	r3, #4
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	429a      	cmp	r2, r3
 8014136:	bf0c      	ite	eq
 8014138:	2301      	moveq	r3, #1
 801413a:	2300      	movne	r3, #0
 801413c:	b2db      	uxtb	r3, r3
 801413e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014140:	693b      	ldr	r3, [r7, #16]
 8014142:	f103 0208 	add.w	r2, r3, #8
 8014146:	7dfb      	ldrb	r3, [r7, #23]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d001      	beq.n	8014150 <etharp_input+0x98>
 801414c:	2301      	movs	r3, #1
 801414e:	e000      	b.n	8014152 <etharp_input+0x9a>
 8014150:	2302      	movs	r3, #2
 8014152:	f107 010c 	add.w	r1, r7, #12
 8014156:	6838      	ldr	r0, [r7, #0]
 8014158:	f7ff fed8 	bl	8013f0c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	88db      	ldrh	r3, [r3, #6]
 8014160:	b29b      	uxth	r3, r3
 8014162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014166:	d003      	beq.n	8014170 <etharp_input+0xb8>
 8014168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801416c:	d01e      	beq.n	80141ac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801416e:	e020      	b.n	80141b2 <etharp_input+0xfa>
      if (for_us) {
 8014170:	7dfb      	ldrb	r3, [r7, #23]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d01c      	beq.n	80141b0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801417c:	693b      	ldr	r3, [r7, #16]
 801417e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014182:	683b      	ldr	r3, [r7, #0]
 8014184:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801418c:	693a      	ldr	r2, [r7, #16]
 801418e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014190:	2102      	movs	r1, #2
 8014192:	9103      	str	r1, [sp, #12]
 8014194:	f107 010c 	add.w	r1, r7, #12
 8014198:	9102      	str	r1, [sp, #8]
 801419a:	9201      	str	r2, [sp, #4]
 801419c:	9300      	str	r3, [sp, #0]
 801419e:	462b      	mov	r3, r5
 80141a0:	4622      	mov	r2, r4
 80141a2:	4601      	mov	r1, r0
 80141a4:	6838      	ldr	r0, [r7, #0]
 80141a6:	f000 faeb 	bl	8014780 <etharp_raw>
      break;
 80141aa:	e001      	b.n	80141b0 <etharp_input+0xf8>
      break;
 80141ac:	bf00      	nop
 80141ae:	e000      	b.n	80141b2 <etharp_input+0xfa>
      break;
 80141b0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80141b2:	6878      	ldr	r0, [r7, #4]
 80141b4:	f003 fbfe 	bl	80179b4 <pbuf_free>
}
 80141b8:	3718      	adds	r7, #24
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bdb0      	pop	{r4, r5, r7, pc}
 80141be:	bf00      	nop
 80141c0:	08021368 	.word	0x08021368
 80141c4:	080214fc 	.word	0x080214fc
 80141c8:	08021424 	.word	0x08021424

080141cc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b086      	sub	sp, #24
 80141d0:	af02      	add	r7, sp, #8
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	60b9      	str	r1, [r7, #8]
 80141d6:	4613      	mov	r3, r2
 80141d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80141da:	79fa      	ldrb	r2, [r7, #7]
 80141dc:	4944      	ldr	r1, [pc, #272]	; (80142f0 <etharp_output_to_arp_index+0x124>)
 80141de:	4613      	mov	r3, r2
 80141e0:	005b      	lsls	r3, r3, #1
 80141e2:	4413      	add	r3, r2
 80141e4:	00db      	lsls	r3, r3, #3
 80141e6:	440b      	add	r3, r1
 80141e8:	3314      	adds	r3, #20
 80141ea:	781b      	ldrb	r3, [r3, #0]
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d806      	bhi.n	80141fe <etharp_output_to_arp_index+0x32>
 80141f0:	4b40      	ldr	r3, [pc, #256]	; (80142f4 <etharp_output_to_arp_index+0x128>)
 80141f2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80141f6:	4940      	ldr	r1, [pc, #256]	; (80142f8 <etharp_output_to_arp_index+0x12c>)
 80141f8:	4840      	ldr	r0, [pc, #256]	; (80142fc <etharp_output_to_arp_index+0x130>)
 80141fa:	f00b fc87 	bl	801fb0c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80141fe:	79fa      	ldrb	r2, [r7, #7]
 8014200:	493b      	ldr	r1, [pc, #236]	; (80142f0 <etharp_output_to_arp_index+0x124>)
 8014202:	4613      	mov	r3, r2
 8014204:	005b      	lsls	r3, r3, #1
 8014206:	4413      	add	r3, r2
 8014208:	00db      	lsls	r3, r3, #3
 801420a:	440b      	add	r3, r1
 801420c:	3314      	adds	r3, #20
 801420e:	781b      	ldrb	r3, [r3, #0]
 8014210:	2b02      	cmp	r3, #2
 8014212:	d153      	bne.n	80142bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014214:	79fa      	ldrb	r2, [r7, #7]
 8014216:	4936      	ldr	r1, [pc, #216]	; (80142f0 <etharp_output_to_arp_index+0x124>)
 8014218:	4613      	mov	r3, r2
 801421a:	005b      	lsls	r3, r3, #1
 801421c:	4413      	add	r3, r2
 801421e:	00db      	lsls	r3, r3, #3
 8014220:	440b      	add	r3, r1
 8014222:	3312      	adds	r3, #18
 8014224:	881b      	ldrh	r3, [r3, #0]
 8014226:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801422a:	d919      	bls.n	8014260 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801422c:	79fa      	ldrb	r2, [r7, #7]
 801422e:	4613      	mov	r3, r2
 8014230:	005b      	lsls	r3, r3, #1
 8014232:	4413      	add	r3, r2
 8014234:	00db      	lsls	r3, r3, #3
 8014236:	4a2e      	ldr	r2, [pc, #184]	; (80142f0 <etharp_output_to_arp_index+0x124>)
 8014238:	4413      	add	r3, r2
 801423a:	3304      	adds	r3, #4
 801423c:	4619      	mov	r1, r3
 801423e:	68f8      	ldr	r0, [r7, #12]
 8014240:	f000 fb4c 	bl	80148dc <etharp_request>
 8014244:	4603      	mov	r3, r0
 8014246:	2b00      	cmp	r3, #0
 8014248:	d138      	bne.n	80142bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801424a:	79fa      	ldrb	r2, [r7, #7]
 801424c:	4928      	ldr	r1, [pc, #160]	; (80142f0 <etharp_output_to_arp_index+0x124>)
 801424e:	4613      	mov	r3, r2
 8014250:	005b      	lsls	r3, r3, #1
 8014252:	4413      	add	r3, r2
 8014254:	00db      	lsls	r3, r3, #3
 8014256:	440b      	add	r3, r1
 8014258:	3314      	adds	r3, #20
 801425a:	2203      	movs	r2, #3
 801425c:	701a      	strb	r2, [r3, #0]
 801425e:	e02d      	b.n	80142bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014260:	79fa      	ldrb	r2, [r7, #7]
 8014262:	4923      	ldr	r1, [pc, #140]	; (80142f0 <etharp_output_to_arp_index+0x124>)
 8014264:	4613      	mov	r3, r2
 8014266:	005b      	lsls	r3, r3, #1
 8014268:	4413      	add	r3, r2
 801426a:	00db      	lsls	r3, r3, #3
 801426c:	440b      	add	r3, r1
 801426e:	3312      	adds	r3, #18
 8014270:	881b      	ldrh	r3, [r3, #0]
 8014272:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014276:	d321      	bcc.n	80142bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014278:	79fa      	ldrb	r2, [r7, #7]
 801427a:	4613      	mov	r3, r2
 801427c:	005b      	lsls	r3, r3, #1
 801427e:	4413      	add	r3, r2
 8014280:	00db      	lsls	r3, r3, #3
 8014282:	4a1b      	ldr	r2, [pc, #108]	; (80142f0 <etharp_output_to_arp_index+0x124>)
 8014284:	4413      	add	r3, r2
 8014286:	1d19      	adds	r1, r3, #4
 8014288:	79fa      	ldrb	r2, [r7, #7]
 801428a:	4613      	mov	r3, r2
 801428c:	005b      	lsls	r3, r3, #1
 801428e:	4413      	add	r3, r2
 8014290:	00db      	lsls	r3, r3, #3
 8014292:	3308      	adds	r3, #8
 8014294:	4a16      	ldr	r2, [pc, #88]	; (80142f0 <etharp_output_to_arp_index+0x124>)
 8014296:	4413      	add	r3, r2
 8014298:	3304      	adds	r3, #4
 801429a:	461a      	mov	r2, r3
 801429c:	68f8      	ldr	r0, [r7, #12]
 801429e:	f000 fafb 	bl	8014898 <etharp_request_dst>
 80142a2:	4603      	mov	r3, r0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d109      	bne.n	80142bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80142a8:	79fa      	ldrb	r2, [r7, #7]
 80142aa:	4911      	ldr	r1, [pc, #68]	; (80142f0 <etharp_output_to_arp_index+0x124>)
 80142ac:	4613      	mov	r3, r2
 80142ae:	005b      	lsls	r3, r3, #1
 80142b0:	4413      	add	r3, r2
 80142b2:	00db      	lsls	r3, r3, #3
 80142b4:	440b      	add	r3, r1
 80142b6:	3314      	adds	r3, #20
 80142b8:	2203      	movs	r2, #3
 80142ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80142c2:	79fa      	ldrb	r2, [r7, #7]
 80142c4:	4613      	mov	r3, r2
 80142c6:	005b      	lsls	r3, r3, #1
 80142c8:	4413      	add	r3, r2
 80142ca:	00db      	lsls	r3, r3, #3
 80142cc:	3308      	adds	r3, #8
 80142ce:	4a08      	ldr	r2, [pc, #32]	; (80142f0 <etharp_output_to_arp_index+0x124>)
 80142d0:	4413      	add	r3, r2
 80142d2:	3304      	adds	r3, #4
 80142d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80142d8:	9200      	str	r2, [sp, #0]
 80142da:	460a      	mov	r2, r1
 80142dc:	68b9      	ldr	r1, [r7, #8]
 80142de:	68f8      	ldr	r0, [r7, #12]
 80142e0:	f000 fb9c 	bl	8014a1c <ethernet_output>
 80142e4:	4603      	mov	r3, r0
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3710      	adds	r7, #16
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}
 80142ee:	bf00      	nop
 80142f0:	24008d5c 	.word	0x24008d5c
 80142f4:	08021368 	.word	0x08021368
 80142f8:	0802151c 	.word	0x0802151c
 80142fc:	08021424 	.word	0x08021424

08014300 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b08a      	sub	sp, #40	; 0x28
 8014304:	af02      	add	r7, sp, #8
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	60b9      	str	r1, [r7, #8]
 801430a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d106      	bne.n	8014324 <etharp_output+0x24>
 8014316:	4b73      	ldr	r3, [pc, #460]	; (80144e4 <etharp_output+0x1e4>)
 8014318:	f240 321e 	movw	r2, #798	; 0x31e
 801431c:	4972      	ldr	r1, [pc, #456]	; (80144e8 <etharp_output+0x1e8>)
 801431e:	4873      	ldr	r0, [pc, #460]	; (80144ec <etharp_output+0x1ec>)
 8014320:	f00b fbf4 	bl	801fb0c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d106      	bne.n	8014338 <etharp_output+0x38>
 801432a:	4b6e      	ldr	r3, [pc, #440]	; (80144e4 <etharp_output+0x1e4>)
 801432c:	f240 321f 	movw	r2, #799	; 0x31f
 8014330:	496f      	ldr	r1, [pc, #444]	; (80144f0 <etharp_output+0x1f0>)
 8014332:	486e      	ldr	r0, [pc, #440]	; (80144ec <etharp_output+0x1ec>)
 8014334:	f00b fbea 	bl	801fb0c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d106      	bne.n	801434c <etharp_output+0x4c>
 801433e:	4b69      	ldr	r3, [pc, #420]	; (80144e4 <etharp_output+0x1e4>)
 8014340:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014344:	496b      	ldr	r1, [pc, #428]	; (80144f4 <etharp_output+0x1f4>)
 8014346:	4869      	ldr	r0, [pc, #420]	; (80144ec <etharp_output+0x1ec>)
 8014348:	f00b fbe0 	bl	801fb0c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	68f9      	ldr	r1, [r7, #12]
 8014352:	4618      	mov	r0, r3
 8014354:	f001 f8c8 	bl	80154e8 <ip4_addr_isbroadcast_u32>
 8014358:	4603      	mov	r3, r0
 801435a:	2b00      	cmp	r3, #0
 801435c:	d002      	beq.n	8014364 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801435e:	4b66      	ldr	r3, [pc, #408]	; (80144f8 <etharp_output+0x1f8>)
 8014360:	61fb      	str	r3, [r7, #28]
 8014362:	e0af      	b.n	80144c4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801436c:	2be0      	cmp	r3, #224	; 0xe0
 801436e:	d118      	bne.n	80143a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014370:	2301      	movs	r3, #1
 8014372:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014374:	2300      	movs	r3, #0
 8014376:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014378:	235e      	movs	r3, #94	; 0x5e
 801437a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	3301      	adds	r3, #1
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014386:	b2db      	uxtb	r3, r3
 8014388:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	3302      	adds	r3, #2
 801438e:	781b      	ldrb	r3, [r3, #0]
 8014390:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	3303      	adds	r3, #3
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801439a:	f107 0310 	add.w	r3, r7, #16
 801439e:	61fb      	str	r3, [r7, #28]
 80143a0:	e090      	b.n	80144c4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681a      	ldr	r2, [r3, #0]
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	3304      	adds	r3, #4
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	405a      	eors	r2, r3
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	3308      	adds	r3, #8
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	4013      	ands	r3, r2
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d012      	beq.n	80143e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80143c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80143c4:	4293      	cmp	r3, r2
 80143c6:	d00b      	beq.n	80143e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	330c      	adds	r3, #12
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d003      	beq.n	80143da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	330c      	adds	r3, #12
 80143d6:	61bb      	str	r3, [r7, #24]
 80143d8:	e002      	b.n	80143e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80143da:	f06f 0303 	mvn.w	r3, #3
 80143de:	e07d      	b.n	80144dc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80143e0:	4b46      	ldr	r3, [pc, #280]	; (80144fc <etharp_output+0x1fc>)
 80143e2:	781b      	ldrb	r3, [r3, #0]
 80143e4:	4619      	mov	r1, r3
 80143e6:	4a46      	ldr	r2, [pc, #280]	; (8014500 <etharp_output+0x200>)
 80143e8:	460b      	mov	r3, r1
 80143ea:	005b      	lsls	r3, r3, #1
 80143ec:	440b      	add	r3, r1
 80143ee:	00db      	lsls	r3, r3, #3
 80143f0:	4413      	add	r3, r2
 80143f2:	3314      	adds	r3, #20
 80143f4:	781b      	ldrb	r3, [r3, #0]
 80143f6:	2b01      	cmp	r3, #1
 80143f8:	d925      	bls.n	8014446 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80143fa:	4b40      	ldr	r3, [pc, #256]	; (80144fc <etharp_output+0x1fc>)
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	4619      	mov	r1, r3
 8014400:	4a3f      	ldr	r2, [pc, #252]	; (8014500 <etharp_output+0x200>)
 8014402:	460b      	mov	r3, r1
 8014404:	005b      	lsls	r3, r3, #1
 8014406:	440b      	add	r3, r1
 8014408:	00db      	lsls	r3, r3, #3
 801440a:	4413      	add	r3, r2
 801440c:	3308      	adds	r3, #8
 801440e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014410:	68fa      	ldr	r2, [r7, #12]
 8014412:	429a      	cmp	r2, r3
 8014414:	d117      	bne.n	8014446 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014416:	69bb      	ldr	r3, [r7, #24]
 8014418:	681a      	ldr	r2, [r3, #0]
 801441a:	4b38      	ldr	r3, [pc, #224]	; (80144fc <etharp_output+0x1fc>)
 801441c:	781b      	ldrb	r3, [r3, #0]
 801441e:	4618      	mov	r0, r3
 8014420:	4937      	ldr	r1, [pc, #220]	; (8014500 <etharp_output+0x200>)
 8014422:	4603      	mov	r3, r0
 8014424:	005b      	lsls	r3, r3, #1
 8014426:	4403      	add	r3, r0
 8014428:	00db      	lsls	r3, r3, #3
 801442a:	440b      	add	r3, r1
 801442c:	3304      	adds	r3, #4
 801442e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014430:	429a      	cmp	r2, r3
 8014432:	d108      	bne.n	8014446 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014434:	4b31      	ldr	r3, [pc, #196]	; (80144fc <etharp_output+0x1fc>)
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	461a      	mov	r2, r3
 801443a:	68b9      	ldr	r1, [r7, #8]
 801443c:	68f8      	ldr	r0, [r7, #12]
 801443e:	f7ff fec5 	bl	80141cc <etharp_output_to_arp_index>
 8014442:	4603      	mov	r3, r0
 8014444:	e04a      	b.n	80144dc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014446:	2300      	movs	r3, #0
 8014448:	75fb      	strb	r3, [r7, #23]
 801444a:	e031      	b.n	80144b0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801444c:	7dfa      	ldrb	r2, [r7, #23]
 801444e:	492c      	ldr	r1, [pc, #176]	; (8014500 <etharp_output+0x200>)
 8014450:	4613      	mov	r3, r2
 8014452:	005b      	lsls	r3, r3, #1
 8014454:	4413      	add	r3, r2
 8014456:	00db      	lsls	r3, r3, #3
 8014458:	440b      	add	r3, r1
 801445a:	3314      	adds	r3, #20
 801445c:	781b      	ldrb	r3, [r3, #0]
 801445e:	2b01      	cmp	r3, #1
 8014460:	d923      	bls.n	80144aa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014462:	7dfa      	ldrb	r2, [r7, #23]
 8014464:	4926      	ldr	r1, [pc, #152]	; (8014500 <etharp_output+0x200>)
 8014466:	4613      	mov	r3, r2
 8014468:	005b      	lsls	r3, r3, #1
 801446a:	4413      	add	r3, r2
 801446c:	00db      	lsls	r3, r3, #3
 801446e:	440b      	add	r3, r1
 8014470:	3308      	adds	r3, #8
 8014472:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014474:	68fa      	ldr	r2, [r7, #12]
 8014476:	429a      	cmp	r2, r3
 8014478:	d117      	bne.n	80144aa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801447a:	69bb      	ldr	r3, [r7, #24]
 801447c:	6819      	ldr	r1, [r3, #0]
 801447e:	7dfa      	ldrb	r2, [r7, #23]
 8014480:	481f      	ldr	r0, [pc, #124]	; (8014500 <etharp_output+0x200>)
 8014482:	4613      	mov	r3, r2
 8014484:	005b      	lsls	r3, r3, #1
 8014486:	4413      	add	r3, r2
 8014488:	00db      	lsls	r3, r3, #3
 801448a:	4403      	add	r3, r0
 801448c:	3304      	adds	r3, #4
 801448e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014490:	4299      	cmp	r1, r3
 8014492:	d10a      	bne.n	80144aa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014494:	4a19      	ldr	r2, [pc, #100]	; (80144fc <etharp_output+0x1fc>)
 8014496:	7dfb      	ldrb	r3, [r7, #23]
 8014498:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801449a:	7dfb      	ldrb	r3, [r7, #23]
 801449c:	461a      	mov	r2, r3
 801449e:	68b9      	ldr	r1, [r7, #8]
 80144a0:	68f8      	ldr	r0, [r7, #12]
 80144a2:	f7ff fe93 	bl	80141cc <etharp_output_to_arp_index>
 80144a6:	4603      	mov	r3, r0
 80144a8:	e018      	b.n	80144dc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80144aa:	7dfb      	ldrb	r3, [r7, #23]
 80144ac:	3301      	adds	r3, #1
 80144ae:	75fb      	strb	r3, [r7, #23]
 80144b0:	7dfb      	ldrb	r3, [r7, #23]
 80144b2:	2b09      	cmp	r3, #9
 80144b4:	d9ca      	bls.n	801444c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80144b6:	68ba      	ldr	r2, [r7, #8]
 80144b8:	69b9      	ldr	r1, [r7, #24]
 80144ba:	68f8      	ldr	r0, [r7, #12]
 80144bc:	f000 f822 	bl	8014504 <etharp_query>
 80144c0:	4603      	mov	r3, r0
 80144c2:	e00b      	b.n	80144dc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80144ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80144ce:	9300      	str	r3, [sp, #0]
 80144d0:	69fb      	ldr	r3, [r7, #28]
 80144d2:	68b9      	ldr	r1, [r7, #8]
 80144d4:	68f8      	ldr	r0, [r7, #12]
 80144d6:	f000 faa1 	bl	8014a1c <ethernet_output>
 80144da:	4603      	mov	r3, r0
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3720      	adds	r7, #32
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}
 80144e4:	08021368 	.word	0x08021368
 80144e8:	080214fc 	.word	0x080214fc
 80144ec:	08021424 	.word	0x08021424
 80144f0:	0802154c 	.word	0x0802154c
 80144f4:	080214ec 	.word	0x080214ec
 80144f8:	08024418 	.word	0x08024418
 80144fc:	24008e4c 	.word	0x24008e4c
 8014500:	24008d5c 	.word	0x24008d5c

08014504 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b08c      	sub	sp, #48	; 0x30
 8014508:	af02      	add	r7, sp, #8
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	60b9      	str	r1, [r7, #8]
 801450e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	3326      	adds	r3, #38	; 0x26
 8014514:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014516:	23ff      	movs	r3, #255	; 0xff
 8014518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801451c:	2300      	movs	r3, #0
 801451e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014520:	68bb      	ldr	r3, [r7, #8]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	68f9      	ldr	r1, [r7, #12]
 8014526:	4618      	mov	r0, r3
 8014528:	f000 ffde 	bl	80154e8 <ip4_addr_isbroadcast_u32>
 801452c:	4603      	mov	r3, r0
 801452e:	2b00      	cmp	r3, #0
 8014530:	d10c      	bne.n	801454c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801453a:	2be0      	cmp	r3, #224	; 0xe0
 801453c:	d006      	beq.n	801454c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d003      	beq.n	801454c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d102      	bne.n	8014552 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801454c:	f06f 030f 	mvn.w	r3, #15
 8014550:	e101      	b.n	8014756 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014552:	68fa      	ldr	r2, [r7, #12]
 8014554:	2101      	movs	r1, #1
 8014556:	68b8      	ldr	r0, [r7, #8]
 8014558:	f7ff fb60 	bl	8013c1c <etharp_find_entry>
 801455c:	4603      	mov	r3, r0
 801455e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014560:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014564:	2b00      	cmp	r3, #0
 8014566:	da02      	bge.n	801456e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014568:	8a7b      	ldrh	r3, [r7, #18]
 801456a:	b25b      	sxtb	r3, r3
 801456c:	e0f3      	b.n	8014756 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801456e:	8a7b      	ldrh	r3, [r7, #18]
 8014570:	2b7e      	cmp	r3, #126	; 0x7e
 8014572:	d906      	bls.n	8014582 <etharp_query+0x7e>
 8014574:	4b7a      	ldr	r3, [pc, #488]	; (8014760 <etharp_query+0x25c>)
 8014576:	f240 32c1 	movw	r2, #961	; 0x3c1
 801457a:	497a      	ldr	r1, [pc, #488]	; (8014764 <etharp_query+0x260>)
 801457c:	487a      	ldr	r0, [pc, #488]	; (8014768 <etharp_query+0x264>)
 801457e:	f00b fac5 	bl	801fb0c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014582:	8a7b      	ldrh	r3, [r7, #18]
 8014584:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014586:	7c7a      	ldrb	r2, [r7, #17]
 8014588:	4978      	ldr	r1, [pc, #480]	; (801476c <etharp_query+0x268>)
 801458a:	4613      	mov	r3, r2
 801458c:	005b      	lsls	r3, r3, #1
 801458e:	4413      	add	r3, r2
 8014590:	00db      	lsls	r3, r3, #3
 8014592:	440b      	add	r3, r1
 8014594:	3314      	adds	r3, #20
 8014596:	781b      	ldrb	r3, [r3, #0]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d115      	bne.n	80145c8 <etharp_query+0xc4>
    is_new_entry = 1;
 801459c:	2301      	movs	r3, #1
 801459e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80145a0:	7c7a      	ldrb	r2, [r7, #17]
 80145a2:	4972      	ldr	r1, [pc, #456]	; (801476c <etharp_query+0x268>)
 80145a4:	4613      	mov	r3, r2
 80145a6:	005b      	lsls	r3, r3, #1
 80145a8:	4413      	add	r3, r2
 80145aa:	00db      	lsls	r3, r3, #3
 80145ac:	440b      	add	r3, r1
 80145ae:	3314      	adds	r3, #20
 80145b0:	2201      	movs	r2, #1
 80145b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80145b4:	7c7a      	ldrb	r2, [r7, #17]
 80145b6:	496d      	ldr	r1, [pc, #436]	; (801476c <etharp_query+0x268>)
 80145b8:	4613      	mov	r3, r2
 80145ba:	005b      	lsls	r3, r3, #1
 80145bc:	4413      	add	r3, r2
 80145be:	00db      	lsls	r3, r3, #3
 80145c0:	440b      	add	r3, r1
 80145c2:	3308      	adds	r3, #8
 80145c4:	68fa      	ldr	r2, [r7, #12]
 80145c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80145c8:	7c7a      	ldrb	r2, [r7, #17]
 80145ca:	4968      	ldr	r1, [pc, #416]	; (801476c <etharp_query+0x268>)
 80145cc:	4613      	mov	r3, r2
 80145ce:	005b      	lsls	r3, r3, #1
 80145d0:	4413      	add	r3, r2
 80145d2:	00db      	lsls	r3, r3, #3
 80145d4:	440b      	add	r3, r1
 80145d6:	3314      	adds	r3, #20
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	2b01      	cmp	r3, #1
 80145dc:	d011      	beq.n	8014602 <etharp_query+0xfe>
 80145de:	7c7a      	ldrb	r2, [r7, #17]
 80145e0:	4962      	ldr	r1, [pc, #392]	; (801476c <etharp_query+0x268>)
 80145e2:	4613      	mov	r3, r2
 80145e4:	005b      	lsls	r3, r3, #1
 80145e6:	4413      	add	r3, r2
 80145e8:	00db      	lsls	r3, r3, #3
 80145ea:	440b      	add	r3, r1
 80145ec:	3314      	adds	r3, #20
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	d806      	bhi.n	8014602 <etharp_query+0xfe>
 80145f4:	4b5a      	ldr	r3, [pc, #360]	; (8014760 <etharp_query+0x25c>)
 80145f6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80145fa:	495d      	ldr	r1, [pc, #372]	; (8014770 <etharp_query+0x26c>)
 80145fc:	485a      	ldr	r0, [pc, #360]	; (8014768 <etharp_query+0x264>)
 80145fe:	f00b fa85 	bl	801fb0c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014602:	6a3b      	ldr	r3, [r7, #32]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d102      	bne.n	801460e <etharp_query+0x10a>
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d10c      	bne.n	8014628 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801460e:	68b9      	ldr	r1, [r7, #8]
 8014610:	68f8      	ldr	r0, [r7, #12]
 8014612:	f000 f963 	bl	80148dc <etharp_request>
 8014616:	4603      	mov	r3, r0
 8014618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d102      	bne.n	8014628 <etharp_query+0x124>
      return result;
 8014622:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014626:	e096      	b.n	8014756 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d106      	bne.n	801463c <etharp_query+0x138>
 801462e:	4b4c      	ldr	r3, [pc, #304]	; (8014760 <etharp_query+0x25c>)
 8014630:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014634:	494f      	ldr	r1, [pc, #316]	; (8014774 <etharp_query+0x270>)
 8014636:	484c      	ldr	r0, [pc, #304]	; (8014768 <etharp_query+0x264>)
 8014638:	f00b fa68 	bl	801fb0c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801463c:	7c7a      	ldrb	r2, [r7, #17]
 801463e:	494b      	ldr	r1, [pc, #300]	; (801476c <etharp_query+0x268>)
 8014640:	4613      	mov	r3, r2
 8014642:	005b      	lsls	r3, r3, #1
 8014644:	4413      	add	r3, r2
 8014646:	00db      	lsls	r3, r3, #3
 8014648:	440b      	add	r3, r1
 801464a:	3314      	adds	r3, #20
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	2b01      	cmp	r3, #1
 8014650:	d917      	bls.n	8014682 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014652:	4a49      	ldr	r2, [pc, #292]	; (8014778 <etharp_query+0x274>)
 8014654:	7c7b      	ldrb	r3, [r7, #17]
 8014656:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014658:	7c7a      	ldrb	r2, [r7, #17]
 801465a:	4613      	mov	r3, r2
 801465c:	005b      	lsls	r3, r3, #1
 801465e:	4413      	add	r3, r2
 8014660:	00db      	lsls	r3, r3, #3
 8014662:	3308      	adds	r3, #8
 8014664:	4a41      	ldr	r2, [pc, #260]	; (801476c <etharp_query+0x268>)
 8014666:	4413      	add	r3, r2
 8014668:	3304      	adds	r3, #4
 801466a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801466e:	9200      	str	r2, [sp, #0]
 8014670:	697a      	ldr	r2, [r7, #20]
 8014672:	6879      	ldr	r1, [r7, #4]
 8014674:	68f8      	ldr	r0, [r7, #12]
 8014676:	f000 f9d1 	bl	8014a1c <ethernet_output>
 801467a:	4603      	mov	r3, r0
 801467c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014680:	e067      	b.n	8014752 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014682:	7c7a      	ldrb	r2, [r7, #17]
 8014684:	4939      	ldr	r1, [pc, #228]	; (801476c <etharp_query+0x268>)
 8014686:	4613      	mov	r3, r2
 8014688:	005b      	lsls	r3, r3, #1
 801468a:	4413      	add	r3, r2
 801468c:	00db      	lsls	r3, r3, #3
 801468e:	440b      	add	r3, r1
 8014690:	3314      	adds	r3, #20
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	2b01      	cmp	r3, #1
 8014696:	d15c      	bne.n	8014752 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014698:	2300      	movs	r3, #0
 801469a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80146a0:	e01c      	b.n	80146dc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	895a      	ldrh	r2, [r3, #10]
 80146a6:	69fb      	ldr	r3, [r7, #28]
 80146a8:	891b      	ldrh	r3, [r3, #8]
 80146aa:	429a      	cmp	r2, r3
 80146ac:	d10a      	bne.n	80146c4 <etharp_query+0x1c0>
 80146ae:	69fb      	ldr	r3, [r7, #28]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d006      	beq.n	80146c4 <etharp_query+0x1c0>
 80146b6:	4b2a      	ldr	r3, [pc, #168]	; (8014760 <etharp_query+0x25c>)
 80146b8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80146bc:	492f      	ldr	r1, [pc, #188]	; (801477c <etharp_query+0x278>)
 80146be:	482a      	ldr	r0, [pc, #168]	; (8014768 <etharp_query+0x264>)
 80146c0:	f00b fa24 	bl	801fb0c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80146c4:	69fb      	ldr	r3, [r7, #28]
 80146c6:	7b1b      	ldrb	r3, [r3, #12]
 80146c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d002      	beq.n	80146d6 <etharp_query+0x1d2>
        copy_needed = 1;
 80146d0:	2301      	movs	r3, #1
 80146d2:	61bb      	str	r3, [r7, #24]
        break;
 80146d4:	e005      	b.n	80146e2 <etharp_query+0x1de>
      }
      p = p->next;
 80146d6:	69fb      	ldr	r3, [r7, #28]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d1df      	bne.n	80146a2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80146e2:	69bb      	ldr	r3, [r7, #24]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d007      	beq.n	80146f8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80146e8:	687a      	ldr	r2, [r7, #4]
 80146ea:	f44f 7120 	mov.w	r1, #640	; 0x280
 80146ee:	200e      	movs	r0, #14
 80146f0:	f003 fbc8 	bl	8017e84 <pbuf_clone>
 80146f4:	61f8      	str	r0, [r7, #28]
 80146f6:	e004      	b.n	8014702 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80146fc:	69f8      	ldr	r0, [r7, #28]
 80146fe:	f003 f9ff 	bl	8017b00 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014702:	69fb      	ldr	r3, [r7, #28]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d021      	beq.n	801474c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014708:	7c7a      	ldrb	r2, [r7, #17]
 801470a:	4918      	ldr	r1, [pc, #96]	; (801476c <etharp_query+0x268>)
 801470c:	4613      	mov	r3, r2
 801470e:	005b      	lsls	r3, r3, #1
 8014710:	4413      	add	r3, r2
 8014712:	00db      	lsls	r3, r3, #3
 8014714:	440b      	add	r3, r1
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d00a      	beq.n	8014732 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801471c:	7c7a      	ldrb	r2, [r7, #17]
 801471e:	4913      	ldr	r1, [pc, #76]	; (801476c <etharp_query+0x268>)
 8014720:	4613      	mov	r3, r2
 8014722:	005b      	lsls	r3, r3, #1
 8014724:	4413      	add	r3, r2
 8014726:	00db      	lsls	r3, r3, #3
 8014728:	440b      	add	r3, r1
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	4618      	mov	r0, r3
 801472e:	f003 f941 	bl	80179b4 <pbuf_free>
      }
      arp_table[i].q = p;
 8014732:	7c7a      	ldrb	r2, [r7, #17]
 8014734:	490d      	ldr	r1, [pc, #52]	; (801476c <etharp_query+0x268>)
 8014736:	4613      	mov	r3, r2
 8014738:	005b      	lsls	r3, r3, #1
 801473a:	4413      	add	r3, r2
 801473c:	00db      	lsls	r3, r3, #3
 801473e:	440b      	add	r3, r1
 8014740:	69fa      	ldr	r2, [r7, #28]
 8014742:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014744:	2300      	movs	r3, #0
 8014746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801474a:	e002      	b.n	8014752 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801474c:	23ff      	movs	r3, #255	; 0xff
 801474e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014752:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014756:	4618      	mov	r0, r3
 8014758:	3728      	adds	r7, #40	; 0x28
 801475a:	46bd      	mov	sp, r7
 801475c:	bd80      	pop	{r7, pc}
 801475e:	bf00      	nop
 8014760:	08021368 	.word	0x08021368
 8014764:	08021558 	.word	0x08021558
 8014768:	08021424 	.word	0x08021424
 801476c:	24008d5c 	.word	0x24008d5c
 8014770:	08021568 	.word	0x08021568
 8014774:	0802154c 	.word	0x0802154c
 8014778:	24008e4c 	.word	0x24008e4c
 801477c:	08021590 	.word	0x08021590

08014780 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b08a      	sub	sp, #40	; 0x28
 8014784:	af02      	add	r7, sp, #8
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
 801478c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801478e:	2300      	movs	r3, #0
 8014790:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d106      	bne.n	80147a6 <etharp_raw+0x26>
 8014798:	4b3a      	ldr	r3, [pc, #232]	; (8014884 <etharp_raw+0x104>)
 801479a:	f240 4257 	movw	r2, #1111	; 0x457
 801479e:	493a      	ldr	r1, [pc, #232]	; (8014888 <etharp_raw+0x108>)
 80147a0:	483a      	ldr	r0, [pc, #232]	; (801488c <etharp_raw+0x10c>)
 80147a2:	f00b f9b3 	bl	801fb0c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80147a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80147aa:	211c      	movs	r1, #28
 80147ac:	200e      	movs	r0, #14
 80147ae:	f002 fe1d 	bl	80173ec <pbuf_alloc>
 80147b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80147b4:	69bb      	ldr	r3, [r7, #24]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d102      	bne.n	80147c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80147ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147be:	e05d      	b.n	801487c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80147c0:	69bb      	ldr	r3, [r7, #24]
 80147c2:	895b      	ldrh	r3, [r3, #10]
 80147c4:	2b1b      	cmp	r3, #27
 80147c6:	d806      	bhi.n	80147d6 <etharp_raw+0x56>
 80147c8:	4b2e      	ldr	r3, [pc, #184]	; (8014884 <etharp_raw+0x104>)
 80147ca:	f240 4262 	movw	r2, #1122	; 0x462
 80147ce:	4930      	ldr	r1, [pc, #192]	; (8014890 <etharp_raw+0x110>)
 80147d0:	482e      	ldr	r0, [pc, #184]	; (801488c <etharp_raw+0x10c>)
 80147d2:	f00b f99b 	bl	801fb0c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80147d6:	69bb      	ldr	r3, [r7, #24]
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80147dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80147de:	4618      	mov	r0, r3
 80147e0:	f7ff f914 	bl	8013a0c <lwip_htons>
 80147e4:	4603      	mov	r3, r0
 80147e6:	461a      	mov	r2, r3
 80147e8:	697b      	ldr	r3, [r7, #20]
 80147ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80147f2:	2b06      	cmp	r3, #6
 80147f4:	d006      	beq.n	8014804 <etharp_raw+0x84>
 80147f6:	4b23      	ldr	r3, [pc, #140]	; (8014884 <etharp_raw+0x104>)
 80147f8:	f240 4269 	movw	r2, #1129	; 0x469
 80147fc:	4925      	ldr	r1, [pc, #148]	; (8014894 <etharp_raw+0x114>)
 80147fe:	4823      	ldr	r0, [pc, #140]	; (801488c <etharp_raw+0x10c>)
 8014800:	f00b f984 	bl	801fb0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014804:	697b      	ldr	r3, [r7, #20]
 8014806:	3308      	adds	r3, #8
 8014808:	2206      	movs	r2, #6
 801480a:	6839      	ldr	r1, [r7, #0]
 801480c:	4618      	mov	r0, r3
 801480e:	f00a fd7f 	bl	801f310 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	3312      	adds	r3, #18
 8014816:	2206      	movs	r2, #6
 8014818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801481a:	4618      	mov	r0, r3
 801481c:	f00a fd78 	bl	801f310 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014820:	697b      	ldr	r3, [r7, #20]
 8014822:	330e      	adds	r3, #14
 8014824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014826:	6812      	ldr	r2, [r2, #0]
 8014828:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801482a:	697b      	ldr	r3, [r7, #20]
 801482c:	3318      	adds	r3, #24
 801482e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014830:	6812      	ldr	r2, [r2, #0]
 8014832:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	2200      	movs	r2, #0
 8014838:	701a      	strb	r2, [r3, #0]
 801483a:	2200      	movs	r2, #0
 801483c:	f042 0201 	orr.w	r2, r2, #1
 8014840:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014842:	697b      	ldr	r3, [r7, #20]
 8014844:	2200      	movs	r2, #0
 8014846:	f042 0208 	orr.w	r2, r2, #8
 801484a:	709a      	strb	r2, [r3, #2]
 801484c:	2200      	movs	r2, #0
 801484e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014850:	697b      	ldr	r3, [r7, #20]
 8014852:	2206      	movs	r2, #6
 8014854:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	2204      	movs	r2, #4
 801485a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801485c:	f640 0306 	movw	r3, #2054	; 0x806
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	68ba      	ldr	r2, [r7, #8]
 8014866:	69b9      	ldr	r1, [r7, #24]
 8014868:	68f8      	ldr	r0, [r7, #12]
 801486a:	f000 f8d7 	bl	8014a1c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801486e:	69b8      	ldr	r0, [r7, #24]
 8014870:	f003 f8a0 	bl	80179b4 <pbuf_free>
  p = NULL;
 8014874:	2300      	movs	r3, #0
 8014876:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014878:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801487c:	4618      	mov	r0, r3
 801487e:	3720      	adds	r7, #32
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}
 8014884:	08021368 	.word	0x08021368
 8014888:	080214fc 	.word	0x080214fc
 801488c:	08021424 	.word	0x08021424
 8014890:	080215ac 	.word	0x080215ac
 8014894:	080215e0 	.word	0x080215e0

08014898 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b088      	sub	sp, #32
 801489c:	af04      	add	r7, sp, #16
 801489e:	60f8      	str	r0, [r7, #12]
 80148a0:	60b9      	str	r1, [r7, #8]
 80148a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80148b4:	2201      	movs	r2, #1
 80148b6:	9203      	str	r2, [sp, #12]
 80148b8:	68ba      	ldr	r2, [r7, #8]
 80148ba:	9202      	str	r2, [sp, #8]
 80148bc:	4a06      	ldr	r2, [pc, #24]	; (80148d8 <etharp_request_dst+0x40>)
 80148be:	9201      	str	r2, [sp, #4]
 80148c0:	9300      	str	r3, [sp, #0]
 80148c2:	4603      	mov	r3, r0
 80148c4:	687a      	ldr	r2, [r7, #4]
 80148c6:	68f8      	ldr	r0, [r7, #12]
 80148c8:	f7ff ff5a 	bl	8014780 <etharp_raw>
 80148cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	3710      	adds	r7, #16
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}
 80148d6:	bf00      	nop
 80148d8:	08024420 	.word	0x08024420

080148dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80148e6:	4a05      	ldr	r2, [pc, #20]	; (80148fc <etharp_request+0x20>)
 80148e8:	6839      	ldr	r1, [r7, #0]
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f7ff ffd4 	bl	8014898 <etharp_request_dst>
 80148f0:	4603      	mov	r3, r0
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3708      	adds	r7, #8
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	08024418 	.word	0x08024418

08014900 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b086      	sub	sp, #24
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801490a:	230e      	movs	r3, #14
 801490c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	895b      	ldrh	r3, [r3, #10]
 8014912:	2b0e      	cmp	r3, #14
 8014914:	d96e      	bls.n	80149f4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	7bdb      	ldrb	r3, [r3, #15]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d106      	bne.n	801492c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014924:	3301      	adds	r3, #1
 8014926:	b2da      	uxtb	r2, r3
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	7b1a      	ldrb	r2, [r3, #12]
 8014936:	7b5b      	ldrb	r3, [r3, #13]
 8014938:	021b      	lsls	r3, r3, #8
 801493a:	4313      	orrs	r3, r2
 801493c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	f003 0301 	and.w	r3, r3, #1
 8014946:	2b00      	cmp	r3, #0
 8014948:	d023      	beq.n	8014992 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	781b      	ldrb	r3, [r3, #0]
 801494e:	2b01      	cmp	r3, #1
 8014950:	d10f      	bne.n	8014972 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	785b      	ldrb	r3, [r3, #1]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d11b      	bne.n	8014992 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801495a:	693b      	ldr	r3, [r7, #16]
 801495c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801495e:	2b5e      	cmp	r3, #94	; 0x5e
 8014960:	d117      	bne.n	8014992 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	7b5b      	ldrb	r3, [r3, #13]
 8014966:	f043 0310 	orr.w	r3, r3, #16
 801496a:	b2da      	uxtb	r2, r3
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	735a      	strb	r2, [r3, #13]
 8014970:	e00f      	b.n	8014992 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014972:	693b      	ldr	r3, [r7, #16]
 8014974:	2206      	movs	r2, #6
 8014976:	4928      	ldr	r1, [pc, #160]	; (8014a18 <ethernet_input+0x118>)
 8014978:	4618      	mov	r0, r3
 801497a:	f00a fcb9 	bl	801f2f0 <memcmp>
 801497e:	4603      	mov	r3, r0
 8014980:	2b00      	cmp	r3, #0
 8014982:	d106      	bne.n	8014992 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	7b5b      	ldrb	r3, [r3, #13]
 8014988:	f043 0308 	orr.w	r3, r3, #8
 801498c:	b2da      	uxtb	r2, r3
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014992:	89fb      	ldrh	r3, [r7, #14]
 8014994:	2b08      	cmp	r3, #8
 8014996:	d003      	beq.n	80149a0 <ethernet_input+0xa0>
 8014998:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801499c:	d014      	beq.n	80149c8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801499e:	e032      	b.n	8014a06 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80149a6:	f003 0308 	and.w	r3, r3, #8
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d024      	beq.n	80149f8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80149ae:	8afb      	ldrh	r3, [r7, #22]
 80149b0:	4619      	mov	r1, r3
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f002 ff78 	bl	80178a8 <pbuf_remove_header>
 80149b8:	4603      	mov	r3, r0
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d11e      	bne.n	80149fc <ethernet_input+0xfc>
        ip4_input(p, netif);
 80149be:	6839      	ldr	r1, [r7, #0]
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f000 fb95 	bl	80150f0 <ip4_input>
      break;
 80149c6:	e013      	b.n	80149f0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80149ce:	f003 0308 	and.w	r3, r3, #8
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d014      	beq.n	8014a00 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80149d6:	8afb      	ldrh	r3, [r7, #22]
 80149d8:	4619      	mov	r1, r3
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f002 ff64 	bl	80178a8 <pbuf_remove_header>
 80149e0:	4603      	mov	r3, r0
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d10e      	bne.n	8014a04 <ethernet_input+0x104>
        etharp_input(p, netif);
 80149e6:	6839      	ldr	r1, [r7, #0]
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f7ff fb65 	bl	80140b8 <etharp_input>
      break;
 80149ee:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80149f0:	2300      	movs	r3, #0
 80149f2:	e00c      	b.n	8014a0e <ethernet_input+0x10e>
    goto free_and_return;
 80149f4:	bf00      	nop
 80149f6:	e006      	b.n	8014a06 <ethernet_input+0x106>
        goto free_and_return;
 80149f8:	bf00      	nop
 80149fa:	e004      	b.n	8014a06 <ethernet_input+0x106>
        goto free_and_return;
 80149fc:	bf00      	nop
 80149fe:	e002      	b.n	8014a06 <ethernet_input+0x106>
        goto free_and_return;
 8014a00:	bf00      	nop
 8014a02:	e000      	b.n	8014a06 <ethernet_input+0x106>
        goto free_and_return;
 8014a04:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f002 ffd4 	bl	80179b4 <pbuf_free>
  return ERR_OK;
 8014a0c:	2300      	movs	r3, #0
}
 8014a0e:	4618      	mov	r0, r3
 8014a10:	3718      	adds	r7, #24
 8014a12:	46bd      	mov	sp, r7
 8014a14:	bd80      	pop	{r7, pc}
 8014a16:	bf00      	nop
 8014a18:	08024418 	.word	0x08024418

08014a1c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b086      	sub	sp, #24
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	60f8      	str	r0, [r7, #12]
 8014a24:	60b9      	str	r1, [r7, #8]
 8014a26:	607a      	str	r2, [r7, #4]
 8014a28:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014a2a:	8c3b      	ldrh	r3, [r7, #32]
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7fe ffed 	bl	8013a0c <lwip_htons>
 8014a32:	4603      	mov	r3, r0
 8014a34:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014a36:	210e      	movs	r1, #14
 8014a38:	68b8      	ldr	r0, [r7, #8]
 8014a3a:	f002 ff25 	bl	8017888 <pbuf_add_header>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d125      	bne.n	8014a90 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014a4a:	693b      	ldr	r3, [r7, #16]
 8014a4c:	8afa      	ldrh	r2, [r7, #22]
 8014a4e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014a50:	693b      	ldr	r3, [r7, #16]
 8014a52:	2206      	movs	r2, #6
 8014a54:	6839      	ldr	r1, [r7, #0]
 8014a56:	4618      	mov	r0, r3
 8014a58:	f00a fc5a 	bl	801f310 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014a5c:	693b      	ldr	r3, [r7, #16]
 8014a5e:	3306      	adds	r3, #6
 8014a60:	2206      	movs	r2, #6
 8014a62:	6879      	ldr	r1, [r7, #4]
 8014a64:	4618      	mov	r0, r3
 8014a66:	f00a fc53 	bl	801f310 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014a70:	2b06      	cmp	r3, #6
 8014a72:	d006      	beq.n	8014a82 <ethernet_output+0x66>
 8014a74:	4b0a      	ldr	r3, [pc, #40]	; (8014aa0 <ethernet_output+0x84>)
 8014a76:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014a7a:	490a      	ldr	r1, [pc, #40]	; (8014aa4 <ethernet_output+0x88>)
 8014a7c:	480a      	ldr	r0, [pc, #40]	; (8014aa8 <ethernet_output+0x8c>)
 8014a7e:	f00b f845 	bl	801fb0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	699b      	ldr	r3, [r3, #24]
 8014a86:	68b9      	ldr	r1, [r7, #8]
 8014a88:	68f8      	ldr	r0, [r7, #12]
 8014a8a:	4798      	blx	r3
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	e002      	b.n	8014a96 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014a90:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014a92:	f06f 0301 	mvn.w	r3, #1
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3718      	adds	r7, #24
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	08021624 	.word	0x08021624
 8014aa4:	0802169c 	.word	0x0802169c
 8014aa8:	080216d0 	.word	0x080216d0

08014aac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b08e      	sub	sp, #56	; 0x38
 8014ab0:	af04      	add	r7, sp, #16
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014ab6:	4b87      	ldr	r3, [pc, #540]	; (8014cd4 <icmp_input+0x228>)
 8014ab8:	689b      	ldr	r3, [r3, #8]
 8014aba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	f003 030f 	and.w	r3, r3, #15
 8014ac4:	b2db      	uxtb	r3, r3
 8014ac6:	009b      	lsls	r3, r3, #2
 8014ac8:	b2db      	uxtb	r3, r3
 8014aca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014acc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ace:	2b13      	cmp	r3, #19
 8014ad0:	f240 80e8 	bls.w	8014ca4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	895b      	ldrh	r3, [r3, #10]
 8014ad8:	2b03      	cmp	r3, #3
 8014ada:	f240 80e5 	bls.w	8014ca8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	685b      	ldr	r3, [r3, #4]
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014ae8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	f000 80d2 	beq.w	8014c96 <icmp_input+0x1ea>
 8014af2:	2b08      	cmp	r3, #8
 8014af4:	f040 80d2 	bne.w	8014c9c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014af8:	4b77      	ldr	r3, [pc, #476]	; (8014cd8 <icmp_input+0x22c>)
 8014afa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014afc:	4b75      	ldr	r3, [pc, #468]	; (8014cd4 <icmp_input+0x228>)
 8014afe:	695b      	ldr	r3, [r3, #20]
 8014b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b04:	2be0      	cmp	r3, #224	; 0xe0
 8014b06:	f000 80d6 	beq.w	8014cb6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014b0a:	4b72      	ldr	r3, [pc, #456]	; (8014cd4 <icmp_input+0x228>)
 8014b0c:	695b      	ldr	r3, [r3, #20]
 8014b0e:	4a71      	ldr	r2, [pc, #452]	; (8014cd4 <icmp_input+0x228>)
 8014b10:	6812      	ldr	r2, [r2, #0]
 8014b12:	4611      	mov	r1, r2
 8014b14:	4618      	mov	r0, r3
 8014b16:	f000 fce7 	bl	80154e8 <ip4_addr_isbroadcast_u32>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	f040 80cc 	bne.w	8014cba <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	891b      	ldrh	r3, [r3, #8]
 8014b26:	2b07      	cmp	r3, #7
 8014b28:	f240 80c0 	bls.w	8014cac <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014b2c:	6878      	ldr	r0, [r7, #4]
 8014b2e:	f000 f9e0 	bl	8014ef2 <inet_chksum_pbuf>
 8014b32:	4603      	mov	r3, r0
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d003      	beq.n	8014b40 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8014b38:	6878      	ldr	r0, [r7, #4]
 8014b3a:	f002 ff3b 	bl	80179b4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8014b3e:	e0c5      	b.n	8014ccc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014b40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b42:	330e      	adds	r3, #14
 8014b44:	4619      	mov	r1, r3
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	f002 fe9e 	bl	8017888 <pbuf_add_header>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d04b      	beq.n	8014bea <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	891a      	ldrh	r2, [r3, #8]
 8014b56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b58:	4413      	add	r3, r2
 8014b5a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	891b      	ldrh	r3, [r3, #8]
 8014b60:	8b7a      	ldrh	r2, [r7, #26]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	f0c0 80ab 	bcc.w	8014cbe <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014b68:	8b7b      	ldrh	r3, [r7, #26]
 8014b6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b6e:	4619      	mov	r1, r3
 8014b70:	200e      	movs	r0, #14
 8014b72:	f002 fc3b 	bl	80173ec <pbuf_alloc>
 8014b76:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	f000 80a1 	beq.w	8014cc2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	895b      	ldrh	r3, [r3, #10]
 8014b84:	461a      	mov	r2, r3
 8014b86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b88:	3308      	adds	r3, #8
 8014b8a:	429a      	cmp	r2, r3
 8014b8c:	d203      	bcs.n	8014b96 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014b8e:	6978      	ldr	r0, [r7, #20]
 8014b90:	f002 ff10 	bl	80179b4 <pbuf_free>
          goto icmperr;
 8014b94:	e096      	b.n	8014cc4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	685b      	ldr	r3, [r3, #4]
 8014b9a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f00a fbb6 	bl	801f310 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014ba4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	6978      	ldr	r0, [r7, #20]
 8014baa:	f002 fe7d 	bl	80178a8 <pbuf_remove_header>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d009      	beq.n	8014bc8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014bb4:	4b49      	ldr	r3, [pc, #292]	; (8014cdc <icmp_input+0x230>)
 8014bb6:	22b6      	movs	r2, #182	; 0xb6
 8014bb8:	4949      	ldr	r1, [pc, #292]	; (8014ce0 <icmp_input+0x234>)
 8014bba:	484a      	ldr	r0, [pc, #296]	; (8014ce4 <icmp_input+0x238>)
 8014bbc:	f00a ffa6 	bl	801fb0c <iprintf>
          pbuf_free(r);
 8014bc0:	6978      	ldr	r0, [r7, #20]
 8014bc2:	f002 fef7 	bl	80179b4 <pbuf_free>
          goto icmperr;
 8014bc6:	e07d      	b.n	8014cc4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014bc8:	6879      	ldr	r1, [r7, #4]
 8014bca:	6978      	ldr	r0, [r7, #20]
 8014bcc:	f003 f816 	bl	8017bfc <pbuf_copy>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d003      	beq.n	8014bde <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014bd6:	6978      	ldr	r0, [r7, #20]
 8014bd8:	f002 feec 	bl	80179b4 <pbuf_free>
          goto icmperr;
 8014bdc:	e072      	b.n	8014cc4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8014bde:	6878      	ldr	r0, [r7, #4]
 8014be0:	f002 fee8 	bl	80179b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	607b      	str	r3, [r7, #4]
 8014be8:	e00f      	b.n	8014c0a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014bea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bec:	330e      	adds	r3, #14
 8014bee:	4619      	mov	r1, r3
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f002 fe59 	bl	80178a8 <pbuf_remove_header>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d006      	beq.n	8014c0a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014bfc:	4b37      	ldr	r3, [pc, #220]	; (8014cdc <icmp_input+0x230>)
 8014bfe:	22c7      	movs	r2, #199	; 0xc7
 8014c00:	4939      	ldr	r1, [pc, #228]	; (8014ce8 <icmp_input+0x23c>)
 8014c02:	4838      	ldr	r0, [pc, #224]	; (8014ce4 <icmp_input+0x238>)
 8014c04:	f00a ff82 	bl	801fb0c <iprintf>
          goto icmperr;
 8014c08:	e05c      	b.n	8014cc4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014c10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c12:	4619      	mov	r1, r3
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f002 fe37 	bl	8017888 <pbuf_add_header>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d13c      	bne.n	8014c9a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	685b      	ldr	r3, [r3, #4]
 8014c24:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014c26:	69fb      	ldr	r3, [r7, #28]
 8014c28:	681a      	ldr	r2, [r3, #0]
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014c2e:	4b29      	ldr	r3, [pc, #164]	; (8014cd4 <icmp_input+0x228>)
 8014c30:	691a      	ldr	r2, [r3, #16]
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014c36:	693b      	ldr	r3, [r7, #16]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	885b      	ldrh	r3, [r3, #2]
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014c46:	4293      	cmp	r3, r2
 8014c48:	d907      	bls.n	8014c5a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014c4a:	693b      	ldr	r3, [r7, #16]
 8014c4c:	885b      	ldrh	r3, [r3, #2]
 8014c4e:	b29b      	uxth	r3, r3
 8014c50:	3309      	adds	r3, #9
 8014c52:	b29a      	uxth	r2, r3
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	805a      	strh	r2, [r3, #2]
 8014c58:	e006      	b.n	8014c68 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	885b      	ldrh	r3, [r3, #2]
 8014c5e:	b29b      	uxth	r3, r3
 8014c60:	3308      	adds	r3, #8
 8014c62:	b29a      	uxth	r2, r3
 8014c64:	693b      	ldr	r3, [r7, #16]
 8014c66:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	22ff      	movs	r2, #255	; 0xff
 8014c6c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2200      	movs	r2, #0
 8014c72:	729a      	strb	r2, [r3, #10]
 8014c74:	2200      	movs	r2, #0
 8014c76:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	9302      	str	r3, [sp, #8]
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	9301      	str	r3, [sp, #4]
 8014c80:	2300      	movs	r3, #0
 8014c82:	9300      	str	r3, [sp, #0]
 8014c84:	23ff      	movs	r3, #255	; 0xff
 8014c86:	2200      	movs	r2, #0
 8014c88:	69f9      	ldr	r1, [r7, #28]
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f000 fb54 	bl	8015338 <ip4_output_if>
 8014c90:	4603      	mov	r3, r0
 8014c92:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014c94:	e001      	b.n	8014c9a <icmp_input+0x1ee>
      break;
 8014c96:	bf00      	nop
 8014c98:	e000      	b.n	8014c9c <icmp_input+0x1f0>
      break;
 8014c9a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f002 fe89 	bl	80179b4 <pbuf_free>
  return;
 8014ca2:	e013      	b.n	8014ccc <icmp_input+0x220>
    goto lenerr;
 8014ca4:	bf00      	nop
 8014ca6:	e002      	b.n	8014cae <icmp_input+0x202>
    goto lenerr;
 8014ca8:	bf00      	nop
 8014caa:	e000      	b.n	8014cae <icmp_input+0x202>
        goto lenerr;
 8014cac:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f002 fe80 	bl	80179b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014cb4:	e00a      	b.n	8014ccc <icmp_input+0x220>
        goto icmperr;
 8014cb6:	bf00      	nop
 8014cb8:	e004      	b.n	8014cc4 <icmp_input+0x218>
        goto icmperr;
 8014cba:	bf00      	nop
 8014cbc:	e002      	b.n	8014cc4 <icmp_input+0x218>
          goto icmperr;
 8014cbe:	bf00      	nop
 8014cc0:	e000      	b.n	8014cc4 <icmp_input+0x218>
          goto icmperr;
 8014cc2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f002 fe75 	bl	80179b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014cca:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014ccc:	3728      	adds	r7, #40	; 0x28
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	bf00      	nop
 8014cd4:	24008e50 	.word	0x24008e50
 8014cd8:	24008e64 	.word	0x24008e64
 8014cdc:	080216f8 	.word	0x080216f8
 8014ce0:	08021770 	.word	0x08021770
 8014ce4:	080217a8 	.word	0x080217a8
 8014ce8:	080217d0 	.word	0x080217d0

08014cec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b082      	sub	sp, #8
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014cf8:	78fb      	ldrb	r3, [r7, #3]
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	2103      	movs	r1, #3
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f000 f814 	bl	8014d2c <icmp_send_response>
}
 8014d04:	bf00      	nop
 8014d06:	3708      	adds	r7, #8
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}

08014d0c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b082      	sub	sp, #8
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	460b      	mov	r3, r1
 8014d16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014d18:	78fb      	ldrb	r3, [r7, #3]
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	210b      	movs	r1, #11
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f000 f804 	bl	8014d2c <icmp_send_response>
}
 8014d24:	bf00      	nop
 8014d26:	3708      	adds	r7, #8
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}

08014d2c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b08c      	sub	sp, #48	; 0x30
 8014d30:	af04      	add	r7, sp, #16
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	460b      	mov	r3, r1
 8014d36:	70fb      	strb	r3, [r7, #3]
 8014d38:	4613      	mov	r3, r2
 8014d3a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014d3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d40:	2124      	movs	r1, #36	; 0x24
 8014d42:	2022      	movs	r0, #34	; 0x22
 8014d44:	f002 fb52 	bl	80173ec <pbuf_alloc>
 8014d48:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014d4a:	69fb      	ldr	r3, [r7, #28]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d056      	beq.n	8014dfe <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014d50:	69fb      	ldr	r3, [r7, #28]
 8014d52:	895b      	ldrh	r3, [r3, #10]
 8014d54:	2b23      	cmp	r3, #35	; 0x23
 8014d56:	d806      	bhi.n	8014d66 <icmp_send_response+0x3a>
 8014d58:	4b2b      	ldr	r3, [pc, #172]	; (8014e08 <icmp_send_response+0xdc>)
 8014d5a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014d5e:	492b      	ldr	r1, [pc, #172]	; (8014e0c <icmp_send_response+0xe0>)
 8014d60:	482b      	ldr	r0, [pc, #172]	; (8014e10 <icmp_send_response+0xe4>)
 8014d62:	f00a fed3 	bl	801fb0c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	685b      	ldr	r3, [r3, #4]
 8014d6a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014d6c:	69fb      	ldr	r3, [r7, #28]
 8014d6e:	685b      	ldr	r3, [r3, #4]
 8014d70:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	78fa      	ldrb	r2, [r7, #3]
 8014d76:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	78ba      	ldrb	r2, [r7, #2]
 8014d7c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	2200      	movs	r2, #0
 8014d82:	711a      	strb	r2, [r3, #4]
 8014d84:	2200      	movs	r2, #0
 8014d86:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	719a      	strb	r2, [r3, #6]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014d92:	69fb      	ldr	r3, [r7, #28]
 8014d94:	685b      	ldr	r3, [r3, #4]
 8014d96:	f103 0008 	add.w	r0, r3, #8
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	221c      	movs	r2, #28
 8014da0:	4619      	mov	r1, r3
 8014da2:	f00a fab5 	bl	801f310 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014da6:	69bb      	ldr	r3, [r7, #24]
 8014da8:	68db      	ldr	r3, [r3, #12]
 8014daa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014dac:	f107 030c 	add.w	r3, r7, #12
 8014db0:	4618      	mov	r0, r3
 8014db2:	f000 f903 	bl	8014fbc <ip4_route>
 8014db6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014db8:	693b      	ldr	r3, [r7, #16]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d01b      	beq.n	8014df6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	709a      	strb	r2, [r3, #2]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8014dc8:	69fb      	ldr	r3, [r7, #28]
 8014dca:	895b      	ldrh	r3, [r3, #10]
 8014dcc:	4619      	mov	r1, r3
 8014dce:	6978      	ldr	r0, [r7, #20]
 8014dd0:	f000 f87d 	bl	8014ece <inet_chksum>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	461a      	mov	r2, r3
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014ddc:	f107 020c 	add.w	r2, r7, #12
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	9302      	str	r3, [sp, #8]
 8014de4:	2301      	movs	r3, #1
 8014de6:	9301      	str	r3, [sp, #4]
 8014de8:	2300      	movs	r3, #0
 8014dea:	9300      	str	r3, [sp, #0]
 8014dec:	23ff      	movs	r3, #255	; 0xff
 8014dee:	2100      	movs	r1, #0
 8014df0:	69f8      	ldr	r0, [r7, #28]
 8014df2:	f000 faa1 	bl	8015338 <ip4_output_if>
  }
  pbuf_free(q);
 8014df6:	69f8      	ldr	r0, [r7, #28]
 8014df8:	f002 fddc 	bl	80179b4 <pbuf_free>
 8014dfc:	e000      	b.n	8014e00 <icmp_send_response+0xd4>
    return;
 8014dfe:	bf00      	nop
}
 8014e00:	3720      	adds	r7, #32
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop
 8014e08:	080216f8 	.word	0x080216f8
 8014e0c:	08021804 	.word	0x08021804
 8014e10:	080217a8 	.word	0x080217a8

08014e14 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8014e14:	b480      	push	{r7}
 8014e16:	b089      	sub	sp, #36	; 0x24
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8014e22:	2300      	movs	r3, #0
 8014e24:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8014e26:	2300      	movs	r3, #0
 8014e28:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8014e2a:	69fb      	ldr	r3, [r7, #28]
 8014e2c:	f003 0301 	and.w	r3, r3, #1
 8014e30:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d00d      	beq.n	8014e54 <lwip_standard_chksum+0x40>
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	dd0a      	ble.n	8014e54 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8014e3e:	69fa      	ldr	r2, [r7, #28]
 8014e40:	1c53      	adds	r3, r2, #1
 8014e42:	61fb      	str	r3, [r7, #28]
 8014e44:	f107 030e 	add.w	r3, r7, #14
 8014e48:	3301      	adds	r3, #1
 8014e4a:	7812      	ldrb	r2, [r2, #0]
 8014e4c:	701a      	strb	r2, [r3, #0]
    len--;
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	3b01      	subs	r3, #1
 8014e52:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8014e54:	69fb      	ldr	r3, [r7, #28]
 8014e56:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8014e58:	e00a      	b.n	8014e70 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8014e5a:	69bb      	ldr	r3, [r7, #24]
 8014e5c:	1c9a      	adds	r2, r3, #2
 8014e5e:	61ba      	str	r2, [r7, #24]
 8014e60:	881b      	ldrh	r3, [r3, #0]
 8014e62:	461a      	mov	r2, r3
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	4413      	add	r3, r2
 8014e68:	617b      	str	r3, [r7, #20]
    len -= 2;
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	3b02      	subs	r3, #2
 8014e6e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	2b01      	cmp	r3, #1
 8014e74:	dcf1      	bgt.n	8014e5a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	dd04      	ble.n	8014e86 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8014e7c:	f107 030e 	add.w	r3, r7, #14
 8014e80:	69ba      	ldr	r2, [r7, #24]
 8014e82:	7812      	ldrb	r2, [r2, #0]
 8014e84:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8014e86:	89fb      	ldrh	r3, [r7, #14]
 8014e88:	461a      	mov	r2, r3
 8014e8a:	697b      	ldr	r3, [r7, #20]
 8014e8c:	4413      	add	r3, r2
 8014e8e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8014e90:	697b      	ldr	r3, [r7, #20]
 8014e92:	0c1a      	lsrs	r2, r3, #16
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	4413      	add	r3, r2
 8014e9a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	0c1a      	lsrs	r2, r3, #16
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	b29b      	uxth	r3, r3
 8014ea4:	4413      	add	r3, r2
 8014ea6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d007      	beq.n	8014ebe <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	021b      	lsls	r3, r3, #8
 8014eb2:	b29a      	uxth	r2, r3
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	0a1b      	lsrs	r3, r3, #8
 8014eb8:	b2db      	uxtb	r3, r3
 8014eba:	4313      	orrs	r3, r2
 8014ebc:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8014ebe:	697b      	ldr	r3, [r7, #20]
 8014ec0:	b29b      	uxth	r3, r3
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3724      	adds	r7, #36	; 0x24
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr

08014ece <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8014ece:	b580      	push	{r7, lr}
 8014ed0:	b082      	sub	sp, #8
 8014ed2:	af00      	add	r7, sp, #0
 8014ed4:	6078      	str	r0, [r7, #4]
 8014ed6:	460b      	mov	r3, r1
 8014ed8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8014eda:	887b      	ldrh	r3, [r7, #2]
 8014edc:	4619      	mov	r1, r3
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f7ff ff98 	bl	8014e14 <lwip_standard_chksum>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	43db      	mvns	r3, r3
 8014ee8:	b29b      	uxth	r3, r3
}
 8014eea:	4618      	mov	r0, r3
 8014eec:	3708      	adds	r7, #8
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	bd80      	pop	{r7, pc}

08014ef2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8014ef2:	b580      	push	{r7, lr}
 8014ef4:	b086      	sub	sp, #24
 8014ef6:	af00      	add	r7, sp, #0
 8014ef8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8014efa:	2300      	movs	r3, #0
 8014efc:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8014efe:	2300      	movs	r3, #0
 8014f00:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	613b      	str	r3, [r7, #16]
 8014f06:	e02b      	b.n	8014f60 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8014f08:	693b      	ldr	r3, [r7, #16]
 8014f0a:	685a      	ldr	r2, [r3, #4]
 8014f0c:	693b      	ldr	r3, [r7, #16]
 8014f0e:	895b      	ldrh	r3, [r3, #10]
 8014f10:	4619      	mov	r1, r3
 8014f12:	4610      	mov	r0, r2
 8014f14:	f7ff ff7e 	bl	8014e14 <lwip_standard_chksum>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	4413      	add	r3, r2
 8014f20:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	0c1a      	lsrs	r2, r3, #16
 8014f26:	697b      	ldr	r3, [r7, #20]
 8014f28:	b29b      	uxth	r3, r3
 8014f2a:	4413      	add	r3, r2
 8014f2c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	895b      	ldrh	r3, [r3, #10]
 8014f32:	f003 0301 	and.w	r3, r3, #1
 8014f36:	b29b      	uxth	r3, r3
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d00e      	beq.n	8014f5a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	bf0c      	ite	eq
 8014f42:	2301      	moveq	r3, #1
 8014f44:	2300      	movne	r3, #0
 8014f46:	b2db      	uxtb	r3, r3
 8014f48:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	021b      	lsls	r3, r3, #8
 8014f4e:	b29a      	uxth	r2, r3
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	0a1b      	lsrs	r3, r3, #8
 8014f54:	b2db      	uxtb	r3, r3
 8014f56:	4313      	orrs	r3, r2
 8014f58:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8014f5a:	693b      	ldr	r3, [r7, #16]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	613b      	str	r3, [r7, #16]
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d1d0      	bne.n	8014f08 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d007      	beq.n	8014f7c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	021b      	lsls	r3, r3, #8
 8014f70:	b29a      	uxth	r2, r3
 8014f72:	697b      	ldr	r3, [r7, #20]
 8014f74:	0a1b      	lsrs	r3, r3, #8
 8014f76:	b2db      	uxtb	r3, r3
 8014f78:	4313      	orrs	r3, r2
 8014f7a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	43db      	mvns	r3, r3
 8014f82:	b29b      	uxth	r3, r3
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3718      	adds	r7, #24
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}

08014f8c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b082      	sub	sp, #8
 8014f90:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8014f92:	2300      	movs	r3, #0
 8014f94:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8014f96:	f003 f8ff 	bl	8018198 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8014f9a:	f001 f9e9 	bl	8016370 <mem_init>
  memp_init();
 8014f9e:	f001 fd31 	bl	8016a04 <memp_init>
  pbuf_init();
  netif_init();
 8014fa2:	f001 fe8d 	bl	8016cc0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8014fa6:	f009 fd3d 	bl	801ea24 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8014faa:	f003 f97f 	bl	80182ac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8014fae:	f009 fc7f 	bl	801e8b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8014fb2:	bf00      	nop
 8014fb4:	3708      	adds	r7, #8
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}
	...

08014fbc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014fbc:	b480      	push	{r7}
 8014fbe:	b085      	sub	sp, #20
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014fc4:	4b33      	ldr	r3, [pc, #204]	; (8015094 <ip4_route+0xd8>)
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	60fb      	str	r3, [r7, #12]
 8014fca:	e036      	b.n	801503a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014fd2:	f003 0301 	and.w	r3, r3, #1
 8014fd6:	b2db      	uxtb	r3, r3
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d02b      	beq.n	8015034 <ip4_route+0x78>
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014fe2:	089b      	lsrs	r3, r3, #2
 8014fe4:	f003 0301 	and.w	r3, r3, #1
 8014fe8:	b2db      	uxtb	r3, r3
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d022      	beq.n	8015034 <ip4_route+0x78>
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	3304      	adds	r3, #4
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d01d      	beq.n	8015034 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	681a      	ldr	r2, [r3, #0]
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	3304      	adds	r3, #4
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	405a      	eors	r2, r3
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	3308      	adds	r3, #8
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	4013      	ands	r3, r2
 801500c:	2b00      	cmp	r3, #0
 801500e:	d101      	bne.n	8015014 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	e038      	b.n	8015086 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801501a:	f003 0302 	and.w	r3, r3, #2
 801501e:	2b00      	cmp	r3, #0
 8015020:	d108      	bne.n	8015034 <ip4_route+0x78>
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	681a      	ldr	r2, [r3, #0]
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	330c      	adds	r3, #12
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	429a      	cmp	r2, r3
 801502e:	d101      	bne.n	8015034 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	e028      	b.n	8015086 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	60fb      	str	r3, [r7, #12]
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d1c5      	bne.n	8014fcc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015040:	4b15      	ldr	r3, [pc, #84]	; (8015098 <ip4_route+0xdc>)
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d01a      	beq.n	801507e <ip4_route+0xc2>
 8015048:	4b13      	ldr	r3, [pc, #76]	; (8015098 <ip4_route+0xdc>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015050:	f003 0301 	and.w	r3, r3, #1
 8015054:	2b00      	cmp	r3, #0
 8015056:	d012      	beq.n	801507e <ip4_route+0xc2>
 8015058:	4b0f      	ldr	r3, [pc, #60]	; (8015098 <ip4_route+0xdc>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015060:	f003 0304 	and.w	r3, r3, #4
 8015064:	2b00      	cmp	r3, #0
 8015066:	d00a      	beq.n	801507e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015068:	4b0b      	ldr	r3, [pc, #44]	; (8015098 <ip4_route+0xdc>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	3304      	adds	r3, #4
 801506e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015070:	2b00      	cmp	r3, #0
 8015072:	d004      	beq.n	801507e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	b2db      	uxtb	r3, r3
 801507a:	2b7f      	cmp	r3, #127	; 0x7f
 801507c:	d101      	bne.n	8015082 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801507e:	2300      	movs	r3, #0
 8015080:	e001      	b.n	8015086 <ip4_route+0xca>
  }

  return netif_default;
 8015082:	4b05      	ldr	r3, [pc, #20]	; (8015098 <ip4_route+0xdc>)
 8015084:	681b      	ldr	r3, [r3, #0]
}
 8015086:	4618      	mov	r0, r3
 8015088:	3714      	adds	r7, #20
 801508a:	46bd      	mov	sp, r7
 801508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015090:	4770      	bx	lr
 8015092:	bf00      	nop
 8015094:	2400f910 	.word	0x2400f910
 8015098:	2400f914 	.word	0x2400f914

0801509c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b082      	sub	sp, #8
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150aa:	f003 0301 	and.w	r3, r3, #1
 80150ae:	b2db      	uxtb	r3, r3
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d016      	beq.n	80150e2 <ip4_input_accept+0x46>
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	3304      	adds	r3, #4
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d011      	beq.n	80150e2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80150be:	4b0b      	ldr	r3, [pc, #44]	; (80150ec <ip4_input_accept+0x50>)
 80150c0:	695a      	ldr	r2, [r3, #20]
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	3304      	adds	r3, #4
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d008      	beq.n	80150de <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80150cc:	4b07      	ldr	r3, [pc, #28]	; (80150ec <ip4_input_accept+0x50>)
 80150ce:	695b      	ldr	r3, [r3, #20]
 80150d0:	6879      	ldr	r1, [r7, #4]
 80150d2:	4618      	mov	r0, r3
 80150d4:	f000 fa08 	bl	80154e8 <ip4_addr_isbroadcast_u32>
 80150d8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d001      	beq.n	80150e2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80150de:	2301      	movs	r3, #1
 80150e0:	e000      	b.n	80150e4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80150e2:	2300      	movs	r3, #0
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3708      	adds	r7, #8
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}
 80150ec:	24008e50 	.word	0x24008e50

080150f0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b086      	sub	sp, #24
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	685b      	ldr	r3, [r3, #4]
 80150fe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015100:	697b      	ldr	r3, [r7, #20]
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	091b      	lsrs	r3, r3, #4
 8015106:	b2db      	uxtb	r3, r3
 8015108:	2b04      	cmp	r3, #4
 801510a:	d004      	beq.n	8015116 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801510c:	6878      	ldr	r0, [r7, #4]
 801510e:	f002 fc51 	bl	80179b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015112:	2300      	movs	r3, #0
 8015114:	e107      	b.n	8015326 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	781b      	ldrb	r3, [r3, #0]
 801511a:	f003 030f 	and.w	r3, r3, #15
 801511e:	b2db      	uxtb	r3, r3
 8015120:	009b      	lsls	r3, r3, #2
 8015122:	b2db      	uxtb	r3, r3
 8015124:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	885b      	ldrh	r3, [r3, #2]
 801512a:	b29b      	uxth	r3, r3
 801512c:	4618      	mov	r0, r3
 801512e:	f7fe fc6d 	bl	8013a0c <lwip_htons>
 8015132:	4603      	mov	r3, r0
 8015134:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	891b      	ldrh	r3, [r3, #8]
 801513a:	89ba      	ldrh	r2, [r7, #12]
 801513c:	429a      	cmp	r2, r3
 801513e:	d204      	bcs.n	801514a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015140:	89bb      	ldrh	r3, [r7, #12]
 8015142:	4619      	mov	r1, r3
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f002 fab1 	bl	80176ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	895b      	ldrh	r3, [r3, #10]
 801514e:	89fa      	ldrh	r2, [r7, #14]
 8015150:	429a      	cmp	r2, r3
 8015152:	d807      	bhi.n	8015164 <ip4_input+0x74>
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	891b      	ldrh	r3, [r3, #8]
 8015158:	89ba      	ldrh	r2, [r7, #12]
 801515a:	429a      	cmp	r2, r3
 801515c:	d802      	bhi.n	8015164 <ip4_input+0x74>
 801515e:	89fb      	ldrh	r3, [r7, #14]
 8015160:	2b13      	cmp	r3, #19
 8015162:	d804      	bhi.n	801516e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f002 fc25 	bl	80179b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801516a:	2300      	movs	r3, #0
 801516c:	e0db      	b.n	8015326 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801516e:	697b      	ldr	r3, [r7, #20]
 8015170:	691b      	ldr	r3, [r3, #16]
 8015172:	4a6f      	ldr	r2, [pc, #444]	; (8015330 <ip4_input+0x240>)
 8015174:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015176:	697b      	ldr	r3, [r7, #20]
 8015178:	68db      	ldr	r3, [r3, #12]
 801517a:	4a6d      	ldr	r2, [pc, #436]	; (8015330 <ip4_input+0x240>)
 801517c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801517e:	4b6c      	ldr	r3, [pc, #432]	; (8015330 <ip4_input+0x240>)
 8015180:	695b      	ldr	r3, [r3, #20]
 8015182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015186:	2be0      	cmp	r3, #224	; 0xe0
 8015188:	d112      	bne.n	80151b0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015190:	f003 0301 	and.w	r3, r3, #1
 8015194:	b2db      	uxtb	r3, r3
 8015196:	2b00      	cmp	r3, #0
 8015198:	d007      	beq.n	80151aa <ip4_input+0xba>
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	3304      	adds	r3, #4
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d002      	beq.n	80151aa <ip4_input+0xba>
      netif = inp;
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	613b      	str	r3, [r7, #16]
 80151a8:	e02a      	b.n	8015200 <ip4_input+0x110>
    } else {
      netif = NULL;
 80151aa:	2300      	movs	r3, #0
 80151ac:	613b      	str	r3, [r7, #16]
 80151ae:	e027      	b.n	8015200 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80151b0:	6838      	ldr	r0, [r7, #0]
 80151b2:	f7ff ff73 	bl	801509c <ip4_input_accept>
 80151b6:	4603      	mov	r3, r0
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d002      	beq.n	80151c2 <ip4_input+0xd2>
      netif = inp;
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	613b      	str	r3, [r7, #16]
 80151c0:	e01e      	b.n	8015200 <ip4_input+0x110>
    } else {
      netif = NULL;
 80151c2:	2300      	movs	r3, #0
 80151c4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80151c6:	4b5a      	ldr	r3, [pc, #360]	; (8015330 <ip4_input+0x240>)
 80151c8:	695b      	ldr	r3, [r3, #20]
 80151ca:	b2db      	uxtb	r3, r3
 80151cc:	2b7f      	cmp	r3, #127	; 0x7f
 80151ce:	d017      	beq.n	8015200 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80151d0:	4b58      	ldr	r3, [pc, #352]	; (8015334 <ip4_input+0x244>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	613b      	str	r3, [r7, #16]
 80151d6:	e00e      	b.n	80151f6 <ip4_input+0x106>
          if (netif == inp) {
 80151d8:	693a      	ldr	r2, [r7, #16]
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	429a      	cmp	r2, r3
 80151de:	d006      	beq.n	80151ee <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80151e0:	6938      	ldr	r0, [r7, #16]
 80151e2:	f7ff ff5b 	bl	801509c <ip4_input_accept>
 80151e6:	4603      	mov	r3, r0
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d108      	bne.n	80151fe <ip4_input+0x10e>
 80151ec:	e000      	b.n	80151f0 <ip4_input+0x100>
            continue;
 80151ee:	bf00      	nop
        NETIF_FOREACH(netif) {
 80151f0:	693b      	ldr	r3, [r7, #16]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	613b      	str	r3, [r7, #16]
 80151f6:	693b      	ldr	r3, [r7, #16]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d1ed      	bne.n	80151d8 <ip4_input+0xe8>
 80151fc:	e000      	b.n	8015200 <ip4_input+0x110>
            break;
 80151fe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015200:	4b4b      	ldr	r3, [pc, #300]	; (8015330 <ip4_input+0x240>)
 8015202:	691b      	ldr	r3, [r3, #16]
 8015204:	6839      	ldr	r1, [r7, #0]
 8015206:	4618      	mov	r0, r3
 8015208:	f000 f96e 	bl	80154e8 <ip4_addr_isbroadcast_u32>
 801520c:	4603      	mov	r3, r0
 801520e:	2b00      	cmp	r3, #0
 8015210:	d105      	bne.n	801521e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015212:	4b47      	ldr	r3, [pc, #284]	; (8015330 <ip4_input+0x240>)
 8015214:	691b      	ldr	r3, [r3, #16]
 8015216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801521a:	2be0      	cmp	r3, #224	; 0xe0
 801521c:	d104      	bne.n	8015228 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801521e:	6878      	ldr	r0, [r7, #4]
 8015220:	f002 fbc8 	bl	80179b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015224:	2300      	movs	r3, #0
 8015226:	e07e      	b.n	8015326 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d104      	bne.n	8015238 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801522e:	6878      	ldr	r0, [r7, #4]
 8015230:	f002 fbc0 	bl	80179b4 <pbuf_free>
    return ERR_OK;
 8015234:	2300      	movs	r3, #0
 8015236:	e076      	b.n	8015326 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	88db      	ldrh	r3, [r3, #6]
 801523c:	b29b      	uxth	r3, r3
 801523e:	461a      	mov	r2, r3
 8015240:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015244:	4013      	ands	r3, r2
 8015246:	2b00      	cmp	r3, #0
 8015248:	d00b      	beq.n	8015262 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	f000 fc92 	bl	8015b74 <ip4_reass>
 8015250:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d101      	bne.n	801525c <ip4_input+0x16c>
      return ERR_OK;
 8015258:	2300      	movs	r3, #0
 801525a:	e064      	b.n	8015326 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015262:	4a33      	ldr	r2, [pc, #204]	; (8015330 <ip4_input+0x240>)
 8015264:	693b      	ldr	r3, [r7, #16]
 8015266:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015268:	4a31      	ldr	r2, [pc, #196]	; (8015330 <ip4_input+0x240>)
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801526e:	4a30      	ldr	r2, [pc, #192]	; (8015330 <ip4_input+0x240>)
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	781b      	ldrb	r3, [r3, #0]
 8015278:	f003 030f 	and.w	r3, r3, #15
 801527c:	b2db      	uxtb	r3, r3
 801527e:	009b      	lsls	r3, r3, #2
 8015280:	b2db      	uxtb	r3, r3
 8015282:	b29a      	uxth	r2, r3
 8015284:	4b2a      	ldr	r3, [pc, #168]	; (8015330 <ip4_input+0x240>)
 8015286:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015288:	89fb      	ldrh	r3, [r7, #14]
 801528a:	4619      	mov	r1, r3
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f002 fb0b 	bl	80178a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015292:	697b      	ldr	r3, [r7, #20]
 8015294:	7a5b      	ldrb	r3, [r3, #9]
 8015296:	2b11      	cmp	r3, #17
 8015298:	d006      	beq.n	80152a8 <ip4_input+0x1b8>
 801529a:	2b11      	cmp	r3, #17
 801529c:	dc13      	bgt.n	80152c6 <ip4_input+0x1d6>
 801529e:	2b01      	cmp	r3, #1
 80152a0:	d00c      	beq.n	80152bc <ip4_input+0x1cc>
 80152a2:	2b06      	cmp	r3, #6
 80152a4:	d005      	beq.n	80152b2 <ip4_input+0x1c2>
 80152a6:	e00e      	b.n	80152c6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80152a8:	6839      	ldr	r1, [r7, #0]
 80152aa:	6878      	ldr	r0, [r7, #4]
 80152ac:	f009 fc68 	bl	801eb80 <udp_input>
        break;
 80152b0:	e026      	b.n	8015300 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80152b2:	6839      	ldr	r1, [r7, #0]
 80152b4:	6878      	ldr	r0, [r7, #4]
 80152b6:	f004 fe69 	bl	8019f8c <tcp_input>
        break;
 80152ba:	e021      	b.n	8015300 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80152bc:	6839      	ldr	r1, [r7, #0]
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f7ff fbf4 	bl	8014aac <icmp_input>
        break;
 80152c4:	e01c      	b.n	8015300 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80152c6:	4b1a      	ldr	r3, [pc, #104]	; (8015330 <ip4_input+0x240>)
 80152c8:	695b      	ldr	r3, [r3, #20]
 80152ca:	6939      	ldr	r1, [r7, #16]
 80152cc:	4618      	mov	r0, r3
 80152ce:	f000 f90b 	bl	80154e8 <ip4_addr_isbroadcast_u32>
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d10f      	bne.n	80152f8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80152d8:	4b15      	ldr	r3, [pc, #84]	; (8015330 <ip4_input+0x240>)
 80152da:	695b      	ldr	r3, [r3, #20]
 80152dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80152e0:	2be0      	cmp	r3, #224	; 0xe0
 80152e2:	d009      	beq.n	80152f8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80152e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80152e8:	4619      	mov	r1, r3
 80152ea:	6878      	ldr	r0, [r7, #4]
 80152ec:	f002 fb4f 	bl	801798e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80152f0:	2102      	movs	r1, #2
 80152f2:	6878      	ldr	r0, [r7, #4]
 80152f4:	f7ff fcfa 	bl	8014cec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80152f8:	6878      	ldr	r0, [r7, #4]
 80152fa:	f002 fb5b 	bl	80179b4 <pbuf_free>
        break;
 80152fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015300:	4b0b      	ldr	r3, [pc, #44]	; (8015330 <ip4_input+0x240>)
 8015302:	2200      	movs	r2, #0
 8015304:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015306:	4b0a      	ldr	r3, [pc, #40]	; (8015330 <ip4_input+0x240>)
 8015308:	2200      	movs	r2, #0
 801530a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801530c:	4b08      	ldr	r3, [pc, #32]	; (8015330 <ip4_input+0x240>)
 801530e:	2200      	movs	r2, #0
 8015310:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015312:	4b07      	ldr	r3, [pc, #28]	; (8015330 <ip4_input+0x240>)
 8015314:	2200      	movs	r2, #0
 8015316:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015318:	4b05      	ldr	r3, [pc, #20]	; (8015330 <ip4_input+0x240>)
 801531a:	2200      	movs	r2, #0
 801531c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801531e:	4b04      	ldr	r3, [pc, #16]	; (8015330 <ip4_input+0x240>)
 8015320:	2200      	movs	r2, #0
 8015322:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015324:	2300      	movs	r3, #0
}
 8015326:	4618      	mov	r0, r3
 8015328:	3718      	adds	r7, #24
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}
 801532e:	bf00      	nop
 8015330:	24008e50 	.word	0x24008e50
 8015334:	2400f910 	.word	0x2400f910

08015338 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b08a      	sub	sp, #40	; 0x28
 801533c:	af04      	add	r7, sp, #16
 801533e:	60f8      	str	r0, [r7, #12]
 8015340:	60b9      	str	r1, [r7, #8]
 8015342:	607a      	str	r2, [r7, #4]
 8015344:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d009      	beq.n	8015364 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d003      	beq.n	801535e <ip4_output_if+0x26>
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d102      	bne.n	8015364 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015360:	3304      	adds	r3, #4
 8015362:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015364:	78fa      	ldrb	r2, [r7, #3]
 8015366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015368:	9302      	str	r3, [sp, #8]
 801536a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801536e:	9301      	str	r3, [sp, #4]
 8015370:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015374:	9300      	str	r3, [sp, #0]
 8015376:	4613      	mov	r3, r2
 8015378:	687a      	ldr	r2, [r7, #4]
 801537a:	6979      	ldr	r1, [r7, #20]
 801537c:	68f8      	ldr	r0, [r7, #12]
 801537e:	f000 f805 	bl	801538c <ip4_output_if_src>
 8015382:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015384:	4618      	mov	r0, r3
 8015386:	3718      	adds	r7, #24
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}

0801538c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b088      	sub	sp, #32
 8015390:	af00      	add	r7, sp, #0
 8015392:	60f8      	str	r0, [r7, #12]
 8015394:	60b9      	str	r1, [r7, #8]
 8015396:	607a      	str	r2, [r7, #4]
 8015398:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	7b9b      	ldrb	r3, [r3, #14]
 801539e:	2b01      	cmp	r3, #1
 80153a0:	d006      	beq.n	80153b0 <ip4_output_if_src+0x24>
 80153a2:	4b4b      	ldr	r3, [pc, #300]	; (80154d0 <ip4_output_if_src+0x144>)
 80153a4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80153a8:	494a      	ldr	r1, [pc, #296]	; (80154d4 <ip4_output_if_src+0x148>)
 80153aa:	484b      	ldr	r0, [pc, #300]	; (80154d8 <ip4_output_if_src+0x14c>)
 80153ac:	f00a fbae 	bl	801fb0c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d060      	beq.n	8015478 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80153b6:	2314      	movs	r3, #20
 80153b8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80153ba:	2114      	movs	r1, #20
 80153bc:	68f8      	ldr	r0, [r7, #12]
 80153be:	f002 fa63 	bl	8017888 <pbuf_add_header>
 80153c2:	4603      	mov	r3, r0
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d002      	beq.n	80153ce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80153c8:	f06f 0301 	mvn.w	r3, #1
 80153cc:	e07c      	b.n	80154c8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	895b      	ldrh	r3, [r3, #10]
 80153d8:	2b13      	cmp	r3, #19
 80153da:	d806      	bhi.n	80153ea <ip4_output_if_src+0x5e>
 80153dc:	4b3c      	ldr	r3, [pc, #240]	; (80154d0 <ip4_output_if_src+0x144>)
 80153de:	f44f 7262 	mov.w	r2, #904	; 0x388
 80153e2:	493e      	ldr	r1, [pc, #248]	; (80154dc <ip4_output_if_src+0x150>)
 80153e4:	483c      	ldr	r0, [pc, #240]	; (80154d8 <ip4_output_if_src+0x14c>)
 80153e6:	f00a fb91 	bl	801fb0c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80153ea:	69fb      	ldr	r3, [r7, #28]
 80153ec:	78fa      	ldrb	r2, [r7, #3]
 80153ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80153f0:	69fb      	ldr	r3, [r7, #28]
 80153f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80153f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	681a      	ldr	r2, [r3, #0]
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015400:	8b7b      	ldrh	r3, [r7, #26]
 8015402:	089b      	lsrs	r3, r3, #2
 8015404:	b29b      	uxth	r3, r3
 8015406:	b2db      	uxtb	r3, r3
 8015408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801540c:	b2da      	uxtb	r2, r3
 801540e:	69fb      	ldr	r3, [r7, #28]
 8015410:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015412:	69fb      	ldr	r3, [r7, #28]
 8015414:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015418:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	891b      	ldrh	r3, [r3, #8]
 801541e:	4618      	mov	r0, r3
 8015420:	f7fe faf4 	bl	8013a0c <lwip_htons>
 8015424:	4603      	mov	r3, r0
 8015426:	461a      	mov	r2, r3
 8015428:	69fb      	ldr	r3, [r7, #28]
 801542a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	2200      	movs	r2, #0
 8015430:	719a      	strb	r2, [r3, #6]
 8015432:	2200      	movs	r2, #0
 8015434:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015436:	4b2a      	ldr	r3, [pc, #168]	; (80154e0 <ip4_output_if_src+0x154>)
 8015438:	881b      	ldrh	r3, [r3, #0]
 801543a:	4618      	mov	r0, r3
 801543c:	f7fe fae6 	bl	8013a0c <lwip_htons>
 8015440:	4603      	mov	r3, r0
 8015442:	461a      	mov	r2, r3
 8015444:	69fb      	ldr	r3, [r7, #28]
 8015446:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015448:	4b25      	ldr	r3, [pc, #148]	; (80154e0 <ip4_output_if_src+0x154>)
 801544a:	881b      	ldrh	r3, [r3, #0]
 801544c:	3301      	adds	r3, #1
 801544e:	b29a      	uxth	r2, r3
 8015450:	4b23      	ldr	r3, [pc, #140]	; (80154e0 <ip4_output_if_src+0x154>)
 8015452:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015454:	68bb      	ldr	r3, [r7, #8]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d104      	bne.n	8015464 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801545a:	4b22      	ldr	r3, [pc, #136]	; (80154e4 <ip4_output_if_src+0x158>)
 801545c:	681a      	ldr	r2, [r3, #0]
 801545e:	69fb      	ldr	r3, [r7, #28]
 8015460:	60da      	str	r2, [r3, #12]
 8015462:	e003      	b.n	801546c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	681a      	ldr	r2, [r3, #0]
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801546c:	69fb      	ldr	r3, [r7, #28]
 801546e:	2200      	movs	r2, #0
 8015470:	729a      	strb	r2, [r3, #10]
 8015472:	2200      	movs	r2, #0
 8015474:	72da      	strb	r2, [r3, #11]
 8015476:	e00f      	b.n	8015498 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	895b      	ldrh	r3, [r3, #10]
 801547c:	2b13      	cmp	r3, #19
 801547e:	d802      	bhi.n	8015486 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015480:	f06f 0301 	mvn.w	r3, #1
 8015484:	e020      	b.n	80154c8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	685b      	ldr	r3, [r3, #4]
 801548a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	691b      	ldr	r3, [r3, #16]
 8015490:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015492:	f107 0314 	add.w	r3, r7, #20
 8015496:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801549a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801549c:	2b00      	cmp	r3, #0
 801549e:	d00c      	beq.n	80154ba <ip4_output_if_src+0x12e>
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	891a      	ldrh	r2, [r3, #8]
 80154a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d906      	bls.n	80154ba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80154ac:	687a      	ldr	r2, [r7, #4]
 80154ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80154b0:	68f8      	ldr	r0, [r7, #12]
 80154b2:	f000 fd53 	bl	8015f5c <ip4_frag>
 80154b6:	4603      	mov	r3, r0
 80154b8:	e006      	b.n	80154c8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80154ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154bc:	695b      	ldr	r3, [r3, #20]
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	68f9      	ldr	r1, [r7, #12]
 80154c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154c4:	4798      	blx	r3
 80154c6:	4603      	mov	r3, r0
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	3720      	adds	r7, #32
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}
 80154d0:	08021830 	.word	0x08021830
 80154d4:	080218a8 	.word	0x080218a8
 80154d8:	080218b4 	.word	0x080218b4
 80154dc:	080218dc 	.word	0x080218dc
 80154e0:	24008e68 	.word	0x24008e68
 80154e4:	08024428 	.word	0x08024428

080154e8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80154e8:	b480      	push	{r7}
 80154ea:	b085      	sub	sp, #20
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
 80154f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80154fc:	d002      	beq.n	8015504 <ip4_addr_isbroadcast_u32+0x1c>
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d101      	bne.n	8015508 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015504:	2301      	movs	r3, #1
 8015506:	e02a      	b.n	801555e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801550e:	f003 0302 	and.w	r3, r3, #2
 8015512:	2b00      	cmp	r3, #0
 8015514:	d101      	bne.n	801551a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015516:	2300      	movs	r3, #0
 8015518:	e021      	b.n	801555e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801551a:	683b      	ldr	r3, [r7, #0]
 801551c:	3304      	adds	r3, #4
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	687a      	ldr	r2, [r7, #4]
 8015522:	429a      	cmp	r2, r3
 8015524:	d101      	bne.n	801552a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015526:	2300      	movs	r3, #0
 8015528:	e019      	b.n	801555e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801552a:	68fa      	ldr	r2, [r7, #12]
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	3304      	adds	r3, #4
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	405a      	eors	r2, r3
 8015534:	683b      	ldr	r3, [r7, #0]
 8015536:	3308      	adds	r3, #8
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	4013      	ands	r3, r2
 801553c:	2b00      	cmp	r3, #0
 801553e:	d10d      	bne.n	801555c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	3308      	adds	r3, #8
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	43da      	mvns	r2, r3
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	3308      	adds	r3, #8
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015554:	429a      	cmp	r2, r3
 8015556:	d101      	bne.n	801555c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015558:	2301      	movs	r3, #1
 801555a:	e000      	b.n	801555e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801555c:	2300      	movs	r3, #0
  }
}
 801555e:	4618      	mov	r0, r3
 8015560:	3714      	adds	r7, #20
 8015562:	46bd      	mov	sp, r7
 8015564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015568:	4770      	bx	lr
	...

0801556c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b084      	sub	sp, #16
 8015570:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015572:	2300      	movs	r3, #0
 8015574:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015576:	4b12      	ldr	r3, [pc, #72]	; (80155c0 <ip_reass_tmr+0x54>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801557c:	e018      	b.n	80155b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	7fdb      	ldrb	r3, [r3, #31]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d00b      	beq.n	801559e <ip_reass_tmr+0x32>
      r->timer--;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	7fdb      	ldrb	r3, [r3, #31]
 801558a:	3b01      	subs	r3, #1
 801558c:	b2da      	uxtb	r2, r3
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	60fb      	str	r3, [r7, #12]
 801559c:	e008      	b.n	80155b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80155a8:	68b9      	ldr	r1, [r7, #8]
 80155aa:	6878      	ldr	r0, [r7, #4]
 80155ac:	f000 f80a 	bl	80155c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d1e3      	bne.n	801557e <ip_reass_tmr+0x12>
    }
  }
}
 80155b6:	bf00      	nop
 80155b8:	bf00      	nop
 80155ba:	3710      	adds	r7, #16
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	24008e6c 	.word	0x24008e6c

080155c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b088      	sub	sp, #32
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80155ce:	2300      	movs	r3, #0
 80155d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80155d2:	683a      	ldr	r2, [r7, #0]
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	429a      	cmp	r2, r3
 80155d8:	d105      	bne.n	80155e6 <ip_reass_free_complete_datagram+0x22>
 80155da:	4b45      	ldr	r3, [pc, #276]	; (80156f0 <ip_reass_free_complete_datagram+0x12c>)
 80155dc:	22ab      	movs	r2, #171	; 0xab
 80155de:	4945      	ldr	r1, [pc, #276]	; (80156f4 <ip_reass_free_complete_datagram+0x130>)
 80155e0:	4845      	ldr	r0, [pc, #276]	; (80156f8 <ip_reass_free_complete_datagram+0x134>)
 80155e2:	f00a fa93 	bl	801fb0c <iprintf>
  if (prev != NULL) {
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d00a      	beq.n	8015602 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	687a      	ldr	r2, [r7, #4]
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d005      	beq.n	8015602 <ip_reass_free_complete_datagram+0x3e>
 80155f6:	4b3e      	ldr	r3, [pc, #248]	; (80156f0 <ip_reass_free_complete_datagram+0x12c>)
 80155f8:	22ad      	movs	r2, #173	; 0xad
 80155fa:	4940      	ldr	r1, [pc, #256]	; (80156fc <ip_reass_free_complete_datagram+0x138>)
 80155fc:	483e      	ldr	r0, [pc, #248]	; (80156f8 <ip_reass_free_complete_datagram+0x134>)
 80155fe:	f00a fa85 	bl	801fb0c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	685b      	ldr	r3, [r3, #4]
 8015606:	685b      	ldr	r3, [r3, #4]
 8015608:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	889b      	ldrh	r3, [r3, #4]
 801560e:	b29b      	uxth	r3, r3
 8015610:	2b00      	cmp	r3, #0
 8015612:	d12a      	bne.n	801566a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	681a      	ldr	r2, [r3, #0]
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	6858      	ldr	r0, [r3, #4]
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	3308      	adds	r3, #8
 801562a:	2214      	movs	r2, #20
 801562c:	4619      	mov	r1, r3
 801562e:	f009 fe6f 	bl	801f310 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015632:	2101      	movs	r1, #1
 8015634:	69b8      	ldr	r0, [r7, #24]
 8015636:	f7ff fb69 	bl	8014d0c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801563a:	69b8      	ldr	r0, [r7, #24]
 801563c:	f002 fa48 	bl	8017ad0 <pbuf_clen>
 8015640:	4603      	mov	r3, r0
 8015642:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015644:	8bfa      	ldrh	r2, [r7, #30]
 8015646:	8a7b      	ldrh	r3, [r7, #18]
 8015648:	4413      	add	r3, r2
 801564a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801564e:	db05      	blt.n	801565c <ip_reass_free_complete_datagram+0x98>
 8015650:	4b27      	ldr	r3, [pc, #156]	; (80156f0 <ip_reass_free_complete_datagram+0x12c>)
 8015652:	22bc      	movs	r2, #188	; 0xbc
 8015654:	492a      	ldr	r1, [pc, #168]	; (8015700 <ip_reass_free_complete_datagram+0x13c>)
 8015656:	4828      	ldr	r0, [pc, #160]	; (80156f8 <ip_reass_free_complete_datagram+0x134>)
 8015658:	f00a fa58 	bl	801fb0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801565c:	8bfa      	ldrh	r2, [r7, #30]
 801565e:	8a7b      	ldrh	r3, [r7, #18]
 8015660:	4413      	add	r3, r2
 8015662:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015664:	69b8      	ldr	r0, [r7, #24]
 8015666:	f002 f9a5 	bl	80179b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	685b      	ldr	r3, [r3, #4]
 801566e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015670:	e01f      	b.n	80156b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015672:	69bb      	ldr	r3, [r7, #24]
 8015674:	685b      	ldr	r3, [r3, #4]
 8015676:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015678:	69bb      	ldr	r3, [r7, #24]
 801567a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015682:	68f8      	ldr	r0, [r7, #12]
 8015684:	f002 fa24 	bl	8017ad0 <pbuf_clen>
 8015688:	4603      	mov	r3, r0
 801568a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801568c:	8bfa      	ldrh	r2, [r7, #30]
 801568e:	8a7b      	ldrh	r3, [r7, #18]
 8015690:	4413      	add	r3, r2
 8015692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015696:	db05      	blt.n	80156a4 <ip_reass_free_complete_datagram+0xe0>
 8015698:	4b15      	ldr	r3, [pc, #84]	; (80156f0 <ip_reass_free_complete_datagram+0x12c>)
 801569a:	22cc      	movs	r2, #204	; 0xcc
 801569c:	4918      	ldr	r1, [pc, #96]	; (8015700 <ip_reass_free_complete_datagram+0x13c>)
 801569e:	4816      	ldr	r0, [pc, #88]	; (80156f8 <ip_reass_free_complete_datagram+0x134>)
 80156a0:	f00a fa34 	bl	801fb0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80156a4:	8bfa      	ldrh	r2, [r7, #30]
 80156a6:	8a7b      	ldrh	r3, [r7, #18]
 80156a8:	4413      	add	r3, r2
 80156aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80156ac:	68f8      	ldr	r0, [r7, #12]
 80156ae:	f002 f981 	bl	80179b4 <pbuf_free>
  while (p != NULL) {
 80156b2:	69bb      	ldr	r3, [r7, #24]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d1dc      	bne.n	8015672 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80156b8:	6839      	ldr	r1, [r7, #0]
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f000 f8c2 	bl	8015844 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80156c0:	4b10      	ldr	r3, [pc, #64]	; (8015704 <ip_reass_free_complete_datagram+0x140>)
 80156c2:	881b      	ldrh	r3, [r3, #0]
 80156c4:	8bfa      	ldrh	r2, [r7, #30]
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d905      	bls.n	80156d6 <ip_reass_free_complete_datagram+0x112>
 80156ca:	4b09      	ldr	r3, [pc, #36]	; (80156f0 <ip_reass_free_complete_datagram+0x12c>)
 80156cc:	22d2      	movs	r2, #210	; 0xd2
 80156ce:	490e      	ldr	r1, [pc, #56]	; (8015708 <ip_reass_free_complete_datagram+0x144>)
 80156d0:	4809      	ldr	r0, [pc, #36]	; (80156f8 <ip_reass_free_complete_datagram+0x134>)
 80156d2:	f00a fa1b 	bl	801fb0c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80156d6:	4b0b      	ldr	r3, [pc, #44]	; (8015704 <ip_reass_free_complete_datagram+0x140>)
 80156d8:	881a      	ldrh	r2, [r3, #0]
 80156da:	8bfb      	ldrh	r3, [r7, #30]
 80156dc:	1ad3      	subs	r3, r2, r3
 80156de:	b29a      	uxth	r2, r3
 80156e0:	4b08      	ldr	r3, [pc, #32]	; (8015704 <ip_reass_free_complete_datagram+0x140>)
 80156e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80156e4:	8bfb      	ldrh	r3, [r7, #30]
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	3720      	adds	r7, #32
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}
 80156ee:	bf00      	nop
 80156f0:	0802190c 	.word	0x0802190c
 80156f4:	08021988 	.word	0x08021988
 80156f8:	08021994 	.word	0x08021994
 80156fc:	080219bc 	.word	0x080219bc
 8015700:	080219d0 	.word	0x080219d0
 8015704:	24008e70 	.word	0x24008e70
 8015708:	080219f0 	.word	0x080219f0

0801570c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b08a      	sub	sp, #40	; 0x28
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015716:	2300      	movs	r3, #0
 8015718:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801571a:	2300      	movs	r3, #0
 801571c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801571e:	2300      	movs	r3, #0
 8015720:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015722:	2300      	movs	r3, #0
 8015724:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015726:	2300      	movs	r3, #0
 8015728:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801572a:	4b28      	ldr	r3, [pc, #160]	; (80157cc <ip_reass_remove_oldest_datagram+0xc0>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015730:	e030      	b.n	8015794 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015734:	695a      	ldr	r2, [r3, #20]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	68db      	ldr	r3, [r3, #12]
 801573a:	429a      	cmp	r2, r3
 801573c:	d10c      	bne.n	8015758 <ip_reass_remove_oldest_datagram+0x4c>
 801573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015740:	699a      	ldr	r2, [r3, #24]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	691b      	ldr	r3, [r3, #16]
 8015746:	429a      	cmp	r2, r3
 8015748:	d106      	bne.n	8015758 <ip_reass_remove_oldest_datagram+0x4c>
 801574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801574c:	899a      	ldrh	r2, [r3, #12]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	889b      	ldrh	r3, [r3, #4]
 8015752:	b29b      	uxth	r3, r3
 8015754:	429a      	cmp	r2, r3
 8015756:	d014      	beq.n	8015782 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	3301      	adds	r3, #1
 801575c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801575e:	6a3b      	ldr	r3, [r7, #32]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d104      	bne.n	801576e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015766:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015768:	69fb      	ldr	r3, [r7, #28]
 801576a:	61bb      	str	r3, [r7, #24]
 801576c:	e009      	b.n	8015782 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015770:	7fda      	ldrb	r2, [r3, #31]
 8015772:	6a3b      	ldr	r3, [r7, #32]
 8015774:	7fdb      	ldrb	r3, [r3, #31]
 8015776:	429a      	cmp	r2, r3
 8015778:	d803      	bhi.n	8015782 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801577c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801577e:	69fb      	ldr	r3, [r7, #28]
 8015780:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d001      	beq.n	801578e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801578c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015796:	2b00      	cmp	r3, #0
 8015798:	d1cb      	bne.n	8015732 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801579a:	6a3b      	ldr	r3, [r7, #32]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d008      	beq.n	80157b2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80157a0:	69b9      	ldr	r1, [r7, #24]
 80157a2:	6a38      	ldr	r0, [r7, #32]
 80157a4:	f7ff ff0e 	bl	80155c4 <ip_reass_free_complete_datagram>
 80157a8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80157aa:	697a      	ldr	r2, [r7, #20]
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	4413      	add	r3, r2
 80157b0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80157b2:	697a      	ldr	r2, [r7, #20]
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	429a      	cmp	r2, r3
 80157b8:	da02      	bge.n	80157c0 <ip_reass_remove_oldest_datagram+0xb4>
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	2b01      	cmp	r3, #1
 80157be:	dcac      	bgt.n	801571a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80157c0:	697b      	ldr	r3, [r7, #20]
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3728      	adds	r7, #40	; 0x28
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	bf00      	nop
 80157cc:	24008e6c 	.word	0x24008e6c

080157d0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80157da:	2004      	movs	r0, #4
 80157dc:	f001 f980 	bl	8016ae0 <memp_malloc>
 80157e0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d110      	bne.n	801580a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80157e8:	6839      	ldr	r1, [r7, #0]
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f7ff ff8e 	bl	801570c <ip_reass_remove_oldest_datagram>
 80157f0:	4602      	mov	r2, r0
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	4293      	cmp	r3, r2
 80157f6:	dc03      	bgt.n	8015800 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80157f8:	2004      	movs	r0, #4
 80157fa:	f001 f971 	bl	8016ae0 <memp_malloc>
 80157fe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d101      	bne.n	801580a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015806:	2300      	movs	r3, #0
 8015808:	e016      	b.n	8015838 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801580a:	2220      	movs	r2, #32
 801580c:	2100      	movs	r1, #0
 801580e:	68f8      	ldr	r0, [r7, #12]
 8015810:	f009 fda6 	bl	801f360 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	220f      	movs	r2, #15
 8015818:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801581a:	4b09      	ldr	r3, [pc, #36]	; (8015840 <ip_reass_enqueue_new_datagram+0x70>)
 801581c:	681a      	ldr	r2, [r3, #0]
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015822:	4a07      	ldr	r2, [pc, #28]	; (8015840 <ip_reass_enqueue_new_datagram+0x70>)
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	3308      	adds	r3, #8
 801582c:	2214      	movs	r2, #20
 801582e:	6879      	ldr	r1, [r7, #4]
 8015830:	4618      	mov	r0, r3
 8015832:	f009 fd6d 	bl	801f310 <memcpy>
  return ipr;
 8015836:	68fb      	ldr	r3, [r7, #12]
}
 8015838:	4618      	mov	r0, r3
 801583a:	3710      	adds	r7, #16
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}
 8015840:	24008e6c 	.word	0x24008e6c

08015844 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801584e:	4b10      	ldr	r3, [pc, #64]	; (8015890 <ip_reass_dequeue_datagram+0x4c>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	687a      	ldr	r2, [r7, #4]
 8015854:	429a      	cmp	r2, r3
 8015856:	d104      	bne.n	8015862 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	4a0c      	ldr	r2, [pc, #48]	; (8015890 <ip_reass_dequeue_datagram+0x4c>)
 801585e:	6013      	str	r3, [r2, #0]
 8015860:	e00d      	b.n	801587e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d106      	bne.n	8015876 <ip_reass_dequeue_datagram+0x32>
 8015868:	4b0a      	ldr	r3, [pc, #40]	; (8015894 <ip_reass_dequeue_datagram+0x50>)
 801586a:	f240 1245 	movw	r2, #325	; 0x145
 801586e:	490a      	ldr	r1, [pc, #40]	; (8015898 <ip_reass_dequeue_datagram+0x54>)
 8015870:	480a      	ldr	r0, [pc, #40]	; (801589c <ip_reass_dequeue_datagram+0x58>)
 8015872:	f00a f94b 	bl	801fb0c <iprintf>
    prev->next = ipr->next;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801587e:	6879      	ldr	r1, [r7, #4]
 8015880:	2004      	movs	r0, #4
 8015882:	f001 f9a3 	bl	8016bcc <memp_free>
}
 8015886:	bf00      	nop
 8015888:	3708      	adds	r7, #8
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}
 801588e:	bf00      	nop
 8015890:	24008e6c 	.word	0x24008e6c
 8015894:	0802190c 	.word	0x0802190c
 8015898:	08021a14 	.word	0x08021a14
 801589c:	08021994 	.word	0x08021994

080158a0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b08c      	sub	sp, #48	; 0x30
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	60b9      	str	r1, [r7, #8]
 80158aa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80158ac:	2300      	movs	r3, #0
 80158ae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80158b0:	2301      	movs	r3, #1
 80158b2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80158ba:	69fb      	ldr	r3, [r7, #28]
 80158bc:	885b      	ldrh	r3, [r3, #2]
 80158be:	b29b      	uxth	r3, r3
 80158c0:	4618      	mov	r0, r3
 80158c2:	f7fe f8a3 	bl	8013a0c <lwip_htons>
 80158c6:	4603      	mov	r3, r0
 80158c8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80158ca:	69fb      	ldr	r3, [r7, #28]
 80158cc:	781b      	ldrb	r3, [r3, #0]
 80158ce:	f003 030f 	and.w	r3, r3, #15
 80158d2:	b2db      	uxtb	r3, r3
 80158d4:	009b      	lsls	r3, r3, #2
 80158d6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80158d8:	7e7b      	ldrb	r3, [r7, #25]
 80158da:	b29b      	uxth	r3, r3
 80158dc:	8b7a      	ldrh	r2, [r7, #26]
 80158de:	429a      	cmp	r2, r3
 80158e0:	d202      	bcs.n	80158e8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158e6:	e135      	b.n	8015b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80158e8:	7e7b      	ldrb	r3, [r7, #25]
 80158ea:	b29b      	uxth	r3, r3
 80158ec:	8b7a      	ldrh	r2, [r7, #26]
 80158ee:	1ad3      	subs	r3, r2, r3
 80158f0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80158f2:	69fb      	ldr	r3, [r7, #28]
 80158f4:	88db      	ldrh	r3, [r3, #6]
 80158f6:	b29b      	uxth	r3, r3
 80158f8:	4618      	mov	r0, r3
 80158fa:	f7fe f887 	bl	8013a0c <lwip_htons>
 80158fe:	4603      	mov	r3, r0
 8015900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015904:	b29b      	uxth	r3, r3
 8015906:	00db      	lsls	r3, r3, #3
 8015908:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801590a:	68bb      	ldr	r3, [r7, #8]
 801590c:	685b      	ldr	r3, [r3, #4]
 801590e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015912:	2200      	movs	r2, #0
 8015914:	701a      	strb	r2, [r3, #0]
 8015916:	2200      	movs	r2, #0
 8015918:	705a      	strb	r2, [r3, #1]
 801591a:	2200      	movs	r2, #0
 801591c:	709a      	strb	r2, [r3, #2]
 801591e:	2200      	movs	r2, #0
 8015920:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015924:	8afa      	ldrh	r2, [r7, #22]
 8015926:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015928:	8afa      	ldrh	r2, [r7, #22]
 801592a:	8b7b      	ldrh	r3, [r7, #26]
 801592c:	4413      	add	r3, r2
 801592e:	b29a      	uxth	r2, r3
 8015930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015932:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015936:	88db      	ldrh	r3, [r3, #6]
 8015938:	b29b      	uxth	r3, r3
 801593a:	8afa      	ldrh	r2, [r7, #22]
 801593c:	429a      	cmp	r2, r3
 801593e:	d902      	bls.n	8015946 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015944:	e106      	b.n	8015b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	685b      	ldr	r3, [r3, #4]
 801594a:	627b      	str	r3, [r7, #36]	; 0x24
 801594c:	e068      	b.n	8015a20 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015950:	685b      	ldr	r3, [r3, #4]
 8015952:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015956:	889b      	ldrh	r3, [r3, #4]
 8015958:	b29a      	uxth	r2, r3
 801595a:	693b      	ldr	r3, [r7, #16]
 801595c:	889b      	ldrh	r3, [r3, #4]
 801595e:	b29b      	uxth	r3, r3
 8015960:	429a      	cmp	r2, r3
 8015962:	d235      	bcs.n	80159d0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015968:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596c:	2b00      	cmp	r3, #0
 801596e:	d020      	beq.n	80159b2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015972:	889b      	ldrh	r3, [r3, #4]
 8015974:	b29a      	uxth	r2, r3
 8015976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015978:	88db      	ldrh	r3, [r3, #6]
 801597a:	b29b      	uxth	r3, r3
 801597c:	429a      	cmp	r2, r3
 801597e:	d307      	bcc.n	8015990 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015982:	88db      	ldrh	r3, [r3, #6]
 8015984:	b29a      	uxth	r2, r3
 8015986:	693b      	ldr	r3, [r7, #16]
 8015988:	889b      	ldrh	r3, [r3, #4]
 801598a:	b29b      	uxth	r3, r3
 801598c:	429a      	cmp	r2, r3
 801598e:	d902      	bls.n	8015996 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015994:	e0de      	b.n	8015b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015998:	68ba      	ldr	r2, [r7, #8]
 801599a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599e:	88db      	ldrh	r3, [r3, #6]
 80159a0:	b29a      	uxth	r2, r3
 80159a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a4:	889b      	ldrh	r3, [r3, #4]
 80159a6:	b29b      	uxth	r3, r3
 80159a8:	429a      	cmp	r2, r3
 80159aa:	d03d      	beq.n	8015a28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80159ac:	2300      	movs	r3, #0
 80159ae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80159b0:	e03a      	b.n	8015a28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80159b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b4:	88db      	ldrh	r3, [r3, #6]
 80159b6:	b29a      	uxth	r2, r3
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	889b      	ldrh	r3, [r3, #4]
 80159bc:	b29b      	uxth	r3, r3
 80159be:	429a      	cmp	r2, r3
 80159c0:	d902      	bls.n	80159c8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159c6:	e0c5      	b.n	8015b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	68ba      	ldr	r2, [r7, #8]
 80159cc:	605a      	str	r2, [r3, #4]
      break;
 80159ce:	e02b      	b.n	8015a28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80159d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d2:	889b      	ldrh	r3, [r3, #4]
 80159d4:	b29a      	uxth	r2, r3
 80159d6:	693b      	ldr	r3, [r7, #16]
 80159d8:	889b      	ldrh	r3, [r3, #4]
 80159da:	b29b      	uxth	r3, r3
 80159dc:	429a      	cmp	r2, r3
 80159de:	d102      	bne.n	80159e6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159e4:	e0b6      	b.n	8015b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80159e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e8:	889b      	ldrh	r3, [r3, #4]
 80159ea:	b29a      	uxth	r2, r3
 80159ec:	693b      	ldr	r3, [r7, #16]
 80159ee:	88db      	ldrh	r3, [r3, #6]
 80159f0:	b29b      	uxth	r3, r3
 80159f2:	429a      	cmp	r2, r3
 80159f4:	d202      	bcs.n	80159fc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159fa:	e0ab      	b.n	8015b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80159fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d009      	beq.n	8015a16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a04:	88db      	ldrh	r3, [r3, #6]
 8015a06:	b29a      	uxth	r2, r3
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	889b      	ldrh	r3, [r3, #4]
 8015a0c:	b29b      	uxth	r3, r3
 8015a0e:	429a      	cmp	r2, r3
 8015a10:	d001      	beq.n	8015a16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015a12:	2300      	movs	r3, #0
 8015a14:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d193      	bne.n	801594e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015a26:	e000      	b.n	8015a2a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015a28:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d12d      	bne.n	8015a8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d01c      	beq.n	8015a70 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a38:	88db      	ldrh	r3, [r3, #6]
 8015a3a:	b29a      	uxth	r2, r3
 8015a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3e:	889b      	ldrh	r3, [r3, #4]
 8015a40:	b29b      	uxth	r3, r3
 8015a42:	429a      	cmp	r2, r3
 8015a44:	d906      	bls.n	8015a54 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015a46:	4b45      	ldr	r3, [pc, #276]	; (8015b5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a48:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015a4c:	4944      	ldr	r1, [pc, #272]	; (8015b60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015a4e:	4845      	ldr	r0, [pc, #276]	; (8015b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a50:	f00a f85c 	bl	801fb0c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a56:	68ba      	ldr	r2, [r7, #8]
 8015a58:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a5c:	88db      	ldrh	r3, [r3, #6]
 8015a5e:	b29a      	uxth	r2, r3
 8015a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a62:	889b      	ldrh	r3, [r3, #4]
 8015a64:	b29b      	uxth	r3, r3
 8015a66:	429a      	cmp	r2, r3
 8015a68:	d010      	beq.n	8015a8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	623b      	str	r3, [r7, #32]
 8015a6e:	e00d      	b.n	8015a8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	685b      	ldr	r3, [r3, #4]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d006      	beq.n	8015a86 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015a78:	4b38      	ldr	r3, [pc, #224]	; (8015b5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a7a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015a7e:	493a      	ldr	r1, [pc, #232]	; (8015b68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015a80:	4838      	ldr	r0, [pc, #224]	; (8015b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a82:	f00a f843 	bl	801fb0c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	68ba      	ldr	r2, [r7, #8]
 8015a8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d105      	bne.n	8015a9e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	7f9b      	ldrb	r3, [r3, #30]
 8015a96:	f003 0301 	and.w	r3, r3, #1
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d059      	beq.n	8015b52 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015a9e:	6a3b      	ldr	r3, [r7, #32]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d04f      	beq.n	8015b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	685b      	ldr	r3, [r3, #4]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d006      	beq.n	8015aba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	685b      	ldr	r3, [r3, #4]
 8015ab0:	685b      	ldr	r3, [r3, #4]
 8015ab2:	889b      	ldrh	r3, [r3, #4]
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d002      	beq.n	8015ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015aba:	2300      	movs	r3, #0
 8015abc:	623b      	str	r3, [r7, #32]
 8015abe:	e041      	b.n	8015b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015aca:	e012      	b.n	8015af2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad4:	88db      	ldrh	r3, [r3, #6]
 8015ad6:	b29a      	uxth	r2, r3
 8015ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ada:	889b      	ldrh	r3, [r3, #4]
 8015adc:	b29b      	uxth	r3, r3
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	d002      	beq.n	8015ae8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	623b      	str	r3, [r7, #32]
            break;
 8015ae6:	e007      	b.n	8015af8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d1e9      	bne.n	8015acc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015af8:	6a3b      	ldr	r3, [r7, #32]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d022      	beq.n	8015b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d106      	bne.n	8015b14 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015b06:	4b15      	ldr	r3, [pc, #84]	; (8015b5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b08:	f240 12df 	movw	r2, #479	; 0x1df
 8015b0c:	4917      	ldr	r1, [pc, #92]	; (8015b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015b0e:	4815      	ldr	r0, [pc, #84]	; (8015b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b10:	f009 fffc 	bl	801fb0c <iprintf>
          LWIP_ASSERT("sanity check",
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	685b      	ldr	r3, [r3, #4]
 8015b18:	685b      	ldr	r3, [r3, #4]
 8015b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b1c:	429a      	cmp	r2, r3
 8015b1e:	d106      	bne.n	8015b2e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015b20:	4b0e      	ldr	r3, [pc, #56]	; (8015b5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015b26:	4911      	ldr	r1, [pc, #68]	; (8015b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015b28:	480e      	ldr	r0, [pc, #56]	; (8015b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b2a:	f009 ffef 	bl	801fb0c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d006      	beq.n	8015b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015b36:	4b09      	ldr	r3, [pc, #36]	; (8015b5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b38:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015b3c:	490c      	ldr	r1, [pc, #48]	; (8015b70 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015b3e:	4809      	ldr	r0, [pc, #36]	; (8015b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b40:	f009 ffe4 	bl	801fb0c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015b44:	6a3b      	ldr	r3, [r7, #32]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	bf14      	ite	ne
 8015b4a:	2301      	movne	r3, #1
 8015b4c:	2300      	moveq	r3, #0
 8015b4e:	b2db      	uxtb	r3, r3
 8015b50:	e000      	b.n	8015b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015b52:	2300      	movs	r3, #0
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	3730      	adds	r7, #48	; 0x30
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}
 8015b5c:	0802190c 	.word	0x0802190c
 8015b60:	08021a30 	.word	0x08021a30
 8015b64:	08021994 	.word	0x08021994
 8015b68:	08021a50 	.word	0x08021a50
 8015b6c:	08021a88 	.word	0x08021a88
 8015b70:	08021a98 	.word	0x08021a98

08015b74 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b08e      	sub	sp, #56	; 0x38
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	685b      	ldr	r3, [r3, #4]
 8015b80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	f003 030f 	and.w	r3, r3, #15
 8015b8a:	b2db      	uxtb	r3, r3
 8015b8c:	009b      	lsls	r3, r3, #2
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	2b14      	cmp	r3, #20
 8015b92:	f040 8171 	bne.w	8015e78 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b98:	88db      	ldrh	r3, [r3, #6]
 8015b9a:	b29b      	uxth	r3, r3
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f7fd ff35 	bl	8013a0c <lwip_htons>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ba8:	b29b      	uxth	r3, r3
 8015baa:	00db      	lsls	r3, r3, #3
 8015bac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb0:	885b      	ldrh	r3, [r3, #2]
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7fd ff29 	bl	8013a0c <lwip_htons>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc0:	781b      	ldrb	r3, [r3, #0]
 8015bc2:	f003 030f 	and.w	r3, r3, #15
 8015bc6:	b2db      	uxtb	r3, r3
 8015bc8:	009b      	lsls	r3, r3, #2
 8015bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015bd2:	b29b      	uxth	r3, r3
 8015bd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015bd6:	429a      	cmp	r2, r3
 8015bd8:	f0c0 8150 	bcc.w	8015e7c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015be0:	b29b      	uxth	r3, r3
 8015be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015be4:	1ad3      	subs	r3, r2, r3
 8015be6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	f001 ff71 	bl	8017ad0 <pbuf_clen>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015bf2:	4b8c      	ldr	r3, [pc, #560]	; (8015e24 <ip4_reass+0x2b0>)
 8015bf4:	881b      	ldrh	r3, [r3, #0]
 8015bf6:	461a      	mov	r2, r3
 8015bf8:	8c3b      	ldrh	r3, [r7, #32]
 8015bfa:	4413      	add	r3, r2
 8015bfc:	2b0a      	cmp	r3, #10
 8015bfe:	dd10      	ble.n	8015c22 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015c00:	8c3b      	ldrh	r3, [r7, #32]
 8015c02:	4619      	mov	r1, r3
 8015c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c06:	f7ff fd81 	bl	801570c <ip_reass_remove_oldest_datagram>
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	f000 8137 	beq.w	8015e80 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015c12:	4b84      	ldr	r3, [pc, #528]	; (8015e24 <ip4_reass+0x2b0>)
 8015c14:	881b      	ldrh	r3, [r3, #0]
 8015c16:	461a      	mov	r2, r3
 8015c18:	8c3b      	ldrh	r3, [r7, #32]
 8015c1a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015c1c:	2b0a      	cmp	r3, #10
 8015c1e:	f300 812f 	bgt.w	8015e80 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015c22:	4b81      	ldr	r3, [pc, #516]	; (8015e28 <ip4_reass+0x2b4>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	633b      	str	r3, [r7, #48]	; 0x30
 8015c28:	e015      	b.n	8015c56 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c2c:	695a      	ldr	r2, [r3, #20]
 8015c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c30:	68db      	ldr	r3, [r3, #12]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d10c      	bne.n	8015c50 <ip4_reass+0xdc>
 8015c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c38:	699a      	ldr	r2, [r3, #24]
 8015c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c3c:	691b      	ldr	r3, [r3, #16]
 8015c3e:	429a      	cmp	r2, r3
 8015c40:	d106      	bne.n	8015c50 <ip4_reass+0xdc>
 8015c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c44:	899a      	ldrh	r2, [r3, #12]
 8015c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c48:	889b      	ldrh	r3, [r3, #4]
 8015c4a:	b29b      	uxth	r3, r3
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	d006      	beq.n	8015c5e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	633b      	str	r3, [r7, #48]	; 0x30
 8015c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d1e6      	bne.n	8015c2a <ip4_reass+0xb6>
 8015c5c:	e000      	b.n	8015c60 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015c5e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d109      	bne.n	8015c7a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015c66:	8c3b      	ldrh	r3, [r7, #32]
 8015c68:	4619      	mov	r1, r3
 8015c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c6c:	f7ff fdb0 	bl	80157d0 <ip_reass_enqueue_new_datagram>
 8015c70:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d11c      	bne.n	8015cb2 <ip4_reass+0x13e>
      goto nullreturn;
 8015c78:	e105      	b.n	8015e86 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c7c:	88db      	ldrh	r3, [r3, #6]
 8015c7e:	b29b      	uxth	r3, r3
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7fd fec3 	bl	8013a0c <lwip_htons>
 8015c86:	4603      	mov	r3, r0
 8015c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d110      	bne.n	8015cb2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c92:	89db      	ldrh	r3, [r3, #14]
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7fd feb9 	bl	8013a0c <lwip_htons>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d006      	beq.n	8015cb2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca6:	3308      	adds	r3, #8
 8015ca8:	2214      	movs	r2, #20
 8015caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015cac:	4618      	mov	r0, r3
 8015cae:	f009 fb2f 	bl	801f310 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cb4:	88db      	ldrh	r3, [r3, #6]
 8015cb6:	b29b      	uxth	r3, r3
 8015cb8:	f003 0320 	and.w	r3, r3, #32
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	bf0c      	ite	eq
 8015cc0:	2301      	moveq	r3, #1
 8015cc2:	2300      	movne	r3, #0
 8015cc4:	b2db      	uxtb	r3, r3
 8015cc6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015cc8:	69fb      	ldr	r3, [r7, #28]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d00e      	beq.n	8015cec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015cce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015cd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015cd2:	4413      	add	r3, r2
 8015cd4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015cd6:	8b7a      	ldrh	r2, [r7, #26]
 8015cd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015cda:	429a      	cmp	r2, r3
 8015cdc:	f0c0 80a0 	bcc.w	8015e20 <ip4_reass+0x2ac>
 8015ce0:	8b7b      	ldrh	r3, [r7, #26]
 8015ce2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015ce6:	4293      	cmp	r3, r2
 8015ce8:	f200 809a 	bhi.w	8015e20 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015cec:	69fa      	ldr	r2, [r7, #28]
 8015cee:	6879      	ldr	r1, [r7, #4]
 8015cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cf2:	f7ff fdd5 	bl	80158a0 <ip_reass_chain_frag_into_datagram_and_validate>
 8015cf6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015cf8:	697b      	ldr	r3, [r7, #20]
 8015cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015cfe:	f000 809b 	beq.w	8015e38 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015d02:	4b48      	ldr	r3, [pc, #288]	; (8015e24 <ip4_reass+0x2b0>)
 8015d04:	881a      	ldrh	r2, [r3, #0]
 8015d06:	8c3b      	ldrh	r3, [r7, #32]
 8015d08:	4413      	add	r3, r2
 8015d0a:	b29a      	uxth	r2, r3
 8015d0c:	4b45      	ldr	r3, [pc, #276]	; (8015e24 <ip4_reass+0x2b0>)
 8015d0e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015d10:	69fb      	ldr	r3, [r7, #28]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d00d      	beq.n	8015d32 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015d16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d1a:	4413      	add	r3, r2
 8015d1c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d20:	8a7a      	ldrh	r2, [r7, #18]
 8015d22:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d26:	7f9b      	ldrb	r3, [r3, #30]
 8015d28:	f043 0301 	orr.w	r3, r3, #1
 8015d2c:	b2da      	uxtb	r2, r3
 8015d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d30:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015d32:	697b      	ldr	r3, [r7, #20]
 8015d34:	2b01      	cmp	r3, #1
 8015d36:	d171      	bne.n	8015e1c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d3a:	8b9b      	ldrh	r3, [r3, #28]
 8015d3c:	3314      	adds	r3, #20
 8015d3e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d42:	685b      	ldr	r3, [r3, #4]
 8015d44:	685b      	ldr	r3, [r3, #4]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d4c:	685b      	ldr	r3, [r3, #4]
 8015d4e:	685b      	ldr	r3, [r3, #4]
 8015d50:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d54:	3308      	adds	r3, #8
 8015d56:	2214      	movs	r2, #20
 8015d58:	4619      	mov	r1, r3
 8015d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d5c:	f009 fad8 	bl	801f310 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015d60:	8a3b      	ldrh	r3, [r7, #16]
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7fd fe52 	bl	8013a0c <lwip_htons>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	461a      	mov	r2, r3
 8015d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d6e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d72:	2200      	movs	r2, #0
 8015d74:	719a      	strb	r2, [r3, #6]
 8015d76:	2200      	movs	r2, #0
 8015d78:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	729a      	strb	r2, [r3, #10]
 8015d80:	2200      	movs	r2, #0
 8015d82:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d86:	685b      	ldr	r3, [r3, #4]
 8015d88:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015d8a:	e00d      	b.n	8015da8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d8e:	685b      	ldr	r3, [r3, #4]
 8015d90:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015d92:	2114      	movs	r1, #20
 8015d94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015d96:	f001 fd87 	bl	80178a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015d9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f001 fed7 	bl	8017b50 <pbuf_cat>
      r = iprh->next_pbuf;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d1ee      	bne.n	8015d8c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015dae:	4b1e      	ldr	r3, [pc, #120]	; (8015e28 <ip4_reass+0x2b4>)
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015db4:	429a      	cmp	r2, r3
 8015db6:	d102      	bne.n	8015dbe <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015db8:	2300      	movs	r3, #0
 8015dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015dbc:	e010      	b.n	8015de0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015dbe:	4b1a      	ldr	r3, [pc, #104]	; (8015e28 <ip4_reass+0x2b4>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015dc4:	e007      	b.n	8015dd6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d006      	beq.n	8015dde <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d1f4      	bne.n	8015dc6 <ip4_reass+0x252>
 8015ddc:	e000      	b.n	8015de0 <ip4_reass+0x26c>
          break;
 8015dde:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015de4:	f7ff fd2e 	bl	8015844 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f001 fe71 	bl	8017ad0 <pbuf_clen>
 8015dee:	4603      	mov	r3, r0
 8015df0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015df2:	4b0c      	ldr	r3, [pc, #48]	; (8015e24 <ip4_reass+0x2b0>)
 8015df4:	881b      	ldrh	r3, [r3, #0]
 8015df6:	8c3a      	ldrh	r2, [r7, #32]
 8015df8:	429a      	cmp	r2, r3
 8015dfa:	d906      	bls.n	8015e0a <ip4_reass+0x296>
 8015dfc:	4b0b      	ldr	r3, [pc, #44]	; (8015e2c <ip4_reass+0x2b8>)
 8015dfe:	f240 229b 	movw	r2, #667	; 0x29b
 8015e02:	490b      	ldr	r1, [pc, #44]	; (8015e30 <ip4_reass+0x2bc>)
 8015e04:	480b      	ldr	r0, [pc, #44]	; (8015e34 <ip4_reass+0x2c0>)
 8015e06:	f009 fe81 	bl	801fb0c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015e0a:	4b06      	ldr	r3, [pc, #24]	; (8015e24 <ip4_reass+0x2b0>)
 8015e0c:	881a      	ldrh	r2, [r3, #0]
 8015e0e:	8c3b      	ldrh	r3, [r7, #32]
 8015e10:	1ad3      	subs	r3, r2, r3
 8015e12:	b29a      	uxth	r2, r3
 8015e14:	4b03      	ldr	r3, [pc, #12]	; (8015e24 <ip4_reass+0x2b0>)
 8015e16:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	e038      	b.n	8015e8e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	e036      	b.n	8015e8e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015e20:	bf00      	nop
 8015e22:	e00a      	b.n	8015e3a <ip4_reass+0x2c6>
 8015e24:	24008e70 	.word	0x24008e70
 8015e28:	24008e6c 	.word	0x24008e6c
 8015e2c:	0802190c 	.word	0x0802190c
 8015e30:	08021abc 	.word	0x08021abc
 8015e34:	08021994 	.word	0x08021994
    goto nullreturn_ipr;
 8015e38:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d106      	bne.n	8015e4e <ip4_reass+0x2da>
 8015e40:	4b15      	ldr	r3, [pc, #84]	; (8015e98 <ip4_reass+0x324>)
 8015e42:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015e46:	4915      	ldr	r1, [pc, #84]	; (8015e9c <ip4_reass+0x328>)
 8015e48:	4815      	ldr	r0, [pc, #84]	; (8015ea0 <ip4_reass+0x32c>)
 8015e4a:	f009 fe5f 	bl	801fb0c <iprintf>
  if (ipr->p == NULL) {
 8015e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e50:	685b      	ldr	r3, [r3, #4]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d116      	bne.n	8015e84 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015e56:	4b13      	ldr	r3, [pc, #76]	; (8015ea4 <ip4_reass+0x330>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	d006      	beq.n	8015e6e <ip4_reass+0x2fa>
 8015e60:	4b0d      	ldr	r3, [pc, #52]	; (8015e98 <ip4_reass+0x324>)
 8015e62:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015e66:	4910      	ldr	r1, [pc, #64]	; (8015ea8 <ip4_reass+0x334>)
 8015e68:	480d      	ldr	r0, [pc, #52]	; (8015ea0 <ip4_reass+0x32c>)
 8015e6a:	f009 fe4f 	bl	801fb0c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015e6e:	2100      	movs	r1, #0
 8015e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e72:	f7ff fce7 	bl	8015844 <ip_reass_dequeue_datagram>
 8015e76:	e006      	b.n	8015e86 <ip4_reass+0x312>
    goto nullreturn;
 8015e78:	bf00      	nop
 8015e7a:	e004      	b.n	8015e86 <ip4_reass+0x312>
    goto nullreturn;
 8015e7c:	bf00      	nop
 8015e7e:	e002      	b.n	8015e86 <ip4_reass+0x312>
      goto nullreturn;
 8015e80:	bf00      	nop
 8015e82:	e000      	b.n	8015e86 <ip4_reass+0x312>
  }

nullreturn:
 8015e84:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f001 fd94 	bl	80179b4 <pbuf_free>
  return NULL;
 8015e8c:	2300      	movs	r3, #0
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	3738      	adds	r7, #56	; 0x38
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}
 8015e96:	bf00      	nop
 8015e98:	0802190c 	.word	0x0802190c
 8015e9c:	08021ad8 	.word	0x08021ad8
 8015ea0:	08021994 	.word	0x08021994
 8015ea4:	24008e6c 	.word	0x24008e6c
 8015ea8:	08021ae4 	.word	0x08021ae4

08015eac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015eb0:	2005      	movs	r0, #5
 8015eb2:	f000 fe15 	bl	8016ae0 <memp_malloc>
 8015eb6:	4603      	mov	r3, r0
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	bd80      	pop	{r7, pc}

08015ebc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b082      	sub	sp, #8
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d106      	bne.n	8015ed8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015eca:	4b07      	ldr	r3, [pc, #28]	; (8015ee8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015ecc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015ed0:	4906      	ldr	r1, [pc, #24]	; (8015eec <ip_frag_free_pbuf_custom_ref+0x30>)
 8015ed2:	4807      	ldr	r0, [pc, #28]	; (8015ef0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015ed4:	f009 fe1a 	bl	801fb0c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015ed8:	6879      	ldr	r1, [r7, #4]
 8015eda:	2005      	movs	r0, #5
 8015edc:	f000 fe76 	bl	8016bcc <memp_free>
}
 8015ee0:	bf00      	nop
 8015ee2:	3708      	adds	r7, #8
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}
 8015ee8:	0802190c 	.word	0x0802190c
 8015eec:	08021b04 	.word	0x08021b04
 8015ef0:	08021994 	.word	0x08021994

08015ef4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b084      	sub	sp, #16
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d106      	bne.n	8015f14 <ipfrag_free_pbuf_custom+0x20>
 8015f06:	4b11      	ldr	r3, [pc, #68]	; (8015f4c <ipfrag_free_pbuf_custom+0x58>)
 8015f08:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015f0c:	4910      	ldr	r1, [pc, #64]	; (8015f50 <ipfrag_free_pbuf_custom+0x5c>)
 8015f0e:	4811      	ldr	r0, [pc, #68]	; (8015f54 <ipfrag_free_pbuf_custom+0x60>)
 8015f10:	f009 fdfc 	bl	801fb0c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015f14:	68fa      	ldr	r2, [r7, #12]
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d006      	beq.n	8015f2a <ipfrag_free_pbuf_custom+0x36>
 8015f1c:	4b0b      	ldr	r3, [pc, #44]	; (8015f4c <ipfrag_free_pbuf_custom+0x58>)
 8015f1e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015f22:	490d      	ldr	r1, [pc, #52]	; (8015f58 <ipfrag_free_pbuf_custom+0x64>)
 8015f24:	480b      	ldr	r0, [pc, #44]	; (8015f54 <ipfrag_free_pbuf_custom+0x60>)
 8015f26:	f009 fdf1 	bl	801fb0c <iprintf>
  if (pcr->original != NULL) {
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	695b      	ldr	r3, [r3, #20]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d004      	beq.n	8015f3c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	695b      	ldr	r3, [r3, #20]
 8015f36:	4618      	mov	r0, r3
 8015f38:	f001 fd3c 	bl	80179b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015f3c:	68f8      	ldr	r0, [r7, #12]
 8015f3e:	f7ff ffbd 	bl	8015ebc <ip_frag_free_pbuf_custom_ref>
}
 8015f42:	bf00      	nop
 8015f44:	3710      	adds	r7, #16
 8015f46:	46bd      	mov	sp, r7
 8015f48:	bd80      	pop	{r7, pc}
 8015f4a:	bf00      	nop
 8015f4c:	0802190c 	.word	0x0802190c
 8015f50:	08021b10 	.word	0x08021b10
 8015f54:	08021994 	.word	0x08021994
 8015f58:	08021b1c 	.word	0x08021b1c

08015f5c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b094      	sub	sp, #80	; 0x50
 8015f60:	af02      	add	r7, sp, #8
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015f68:	2300      	movs	r3, #0
 8015f6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015f6e:	68bb      	ldr	r3, [r7, #8]
 8015f70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015f72:	3b14      	subs	r3, #20
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	da00      	bge.n	8015f7a <ip4_frag+0x1e>
 8015f78:	3307      	adds	r3, #7
 8015f7a:	10db      	asrs	r3, r3, #3
 8015f7c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015f7e:	2314      	movs	r3, #20
 8015f80:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	685b      	ldr	r3, [r3, #4]
 8015f86:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f8e:	781b      	ldrb	r3, [r3, #0]
 8015f90:	f003 030f 	and.w	r3, r3, #15
 8015f94:	b2db      	uxtb	r3, r3
 8015f96:	009b      	lsls	r3, r3, #2
 8015f98:	b2db      	uxtb	r3, r3
 8015f9a:	2b14      	cmp	r3, #20
 8015f9c:	d002      	beq.n	8015fa4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015f9e:	f06f 0305 	mvn.w	r3, #5
 8015fa2:	e110      	b.n	80161c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	895b      	ldrh	r3, [r3, #10]
 8015fa8:	2b13      	cmp	r3, #19
 8015faa:	d809      	bhi.n	8015fc0 <ip4_frag+0x64>
 8015fac:	4b88      	ldr	r3, [pc, #544]	; (80161d0 <ip4_frag+0x274>)
 8015fae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015fb2:	4988      	ldr	r1, [pc, #544]	; (80161d4 <ip4_frag+0x278>)
 8015fb4:	4888      	ldr	r0, [pc, #544]	; (80161d8 <ip4_frag+0x27c>)
 8015fb6:	f009 fda9 	bl	801fb0c <iprintf>
 8015fba:	f06f 0305 	mvn.w	r3, #5
 8015fbe:	e102      	b.n	80161c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fc2:	88db      	ldrh	r3, [r3, #6]
 8015fc4:	b29b      	uxth	r3, r3
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7fd fd20 	bl	8013a0c <lwip_htons>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015fd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015fd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015fda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015fe0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	891b      	ldrh	r3, [r3, #8]
 8015fe6:	3b14      	subs	r3, #20
 8015fe8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015fec:	e0e1      	b.n	80161b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015fee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ff0:	00db      	lsls	r3, r3, #3
 8015ff2:	b29b      	uxth	r3, r3
 8015ff4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015ff8:	4293      	cmp	r3, r2
 8015ffa:	bf28      	it	cs
 8015ffc:	4613      	movcs	r3, r2
 8015ffe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016000:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016004:	2114      	movs	r1, #20
 8016006:	200e      	movs	r0, #14
 8016008:	f001 f9f0 	bl	80173ec <pbuf_alloc>
 801600c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016010:	2b00      	cmp	r3, #0
 8016012:	f000 80d5 	beq.w	80161c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016018:	895b      	ldrh	r3, [r3, #10]
 801601a:	2b13      	cmp	r3, #19
 801601c:	d806      	bhi.n	801602c <ip4_frag+0xd0>
 801601e:	4b6c      	ldr	r3, [pc, #432]	; (80161d0 <ip4_frag+0x274>)
 8016020:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016024:	496d      	ldr	r1, [pc, #436]	; (80161dc <ip4_frag+0x280>)
 8016026:	486c      	ldr	r0, [pc, #432]	; (80161d8 <ip4_frag+0x27c>)
 8016028:	f009 fd70 	bl	801fb0c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801602e:	685b      	ldr	r3, [r3, #4]
 8016030:	2214      	movs	r2, #20
 8016032:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016034:	4618      	mov	r0, r3
 8016036:	f009 f96b 	bl	801f310 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801603c:	685b      	ldr	r3, [r3, #4]
 801603e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016040:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016042:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016046:	e064      	b.n	8016112 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	895a      	ldrh	r2, [r3, #10]
 801604c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801604e:	1ad3      	subs	r3, r2, r3
 8016050:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	895b      	ldrh	r3, [r3, #10]
 8016056:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016058:	429a      	cmp	r2, r3
 801605a:	d906      	bls.n	801606a <ip4_frag+0x10e>
 801605c:	4b5c      	ldr	r3, [pc, #368]	; (80161d0 <ip4_frag+0x274>)
 801605e:	f240 322d 	movw	r2, #813	; 0x32d
 8016062:	495f      	ldr	r1, [pc, #380]	; (80161e0 <ip4_frag+0x284>)
 8016064:	485c      	ldr	r0, [pc, #368]	; (80161d8 <ip4_frag+0x27c>)
 8016066:	f009 fd51 	bl	801fb0c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801606a:	8bfa      	ldrh	r2, [r7, #30]
 801606c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016070:	4293      	cmp	r3, r2
 8016072:	bf28      	it	cs
 8016074:	4613      	movcs	r3, r2
 8016076:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801607a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801607e:	2b00      	cmp	r3, #0
 8016080:	d105      	bne.n	801608e <ip4_frag+0x132>
        poff = 0;
 8016082:	2300      	movs	r3, #0
 8016084:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	60fb      	str	r3, [r7, #12]
        continue;
 801608c:	e041      	b.n	8016112 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801608e:	f7ff ff0d 	bl	8015eac <ip_frag_alloc_pbuf_custom_ref>
 8016092:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016094:	69bb      	ldr	r3, [r7, #24]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d103      	bne.n	80160a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801609a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801609c:	f001 fc8a 	bl	80179b4 <pbuf_free>
        goto memerr;
 80160a0:	e08f      	b.n	80161c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80160a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80160a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80160aa:	4413      	add	r3, r2
 80160ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80160b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80160b4:	9201      	str	r2, [sp, #4]
 80160b6:	9300      	str	r3, [sp, #0]
 80160b8:	4603      	mov	r3, r0
 80160ba:	2241      	movs	r2, #65	; 0x41
 80160bc:	2000      	movs	r0, #0
 80160be:	f001 fac1 	bl	8017644 <pbuf_alloced_custom>
 80160c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80160c4:	697b      	ldr	r3, [r7, #20]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d106      	bne.n	80160d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80160ca:	69b8      	ldr	r0, [r7, #24]
 80160cc:	f7ff fef6 	bl	8015ebc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80160d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80160d2:	f001 fc6f 	bl	80179b4 <pbuf_free>
        goto memerr;
 80160d6:	e074      	b.n	80161c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80160d8:	68f8      	ldr	r0, [r7, #12]
 80160da:	f001 fd11 	bl	8017b00 <pbuf_ref>
      pcr->original = p;
 80160de:	69bb      	ldr	r3, [r7, #24]
 80160e0:	68fa      	ldr	r2, [r7, #12]
 80160e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80160e4:	69bb      	ldr	r3, [r7, #24]
 80160e6:	4a3f      	ldr	r2, [pc, #252]	; (80161e4 <ip4_frag+0x288>)
 80160e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80160ea:	6979      	ldr	r1, [r7, #20]
 80160ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80160ee:	f001 fd2f 	bl	8017b50 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80160f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80160f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80160fa:	1ad3      	subs	r3, r2, r3
 80160fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016100:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016104:	2b00      	cmp	r3, #0
 8016106:	d004      	beq.n	8016112 <ip4_frag+0x1b6>
        poff = 0;
 8016108:	2300      	movs	r3, #0
 801610a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016112:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016116:	2b00      	cmp	r3, #0
 8016118:	d196      	bne.n	8016048 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801611a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801611c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016120:	4413      	add	r3, r2
 8016122:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016128:	f1a3 0213 	sub.w	r2, r3, #19
 801612c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016130:	429a      	cmp	r2, r3
 8016132:	bfcc      	ite	gt
 8016134:	2301      	movgt	r3, #1
 8016136:	2300      	movle	r3, #0
 8016138:	b2db      	uxtb	r3, r3
 801613a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801613c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016144:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016146:	6a3b      	ldr	r3, [r7, #32]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d002      	beq.n	8016152 <ip4_frag+0x1f6>
 801614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614e:	2b00      	cmp	r3, #0
 8016150:	d003      	beq.n	801615a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016152:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016154:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016158:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801615a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801615c:	4618      	mov	r0, r3
 801615e:	f7fd fc55 	bl	8013a0c <lwip_htons>
 8016162:	4603      	mov	r3, r0
 8016164:	461a      	mov	r2, r3
 8016166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016168:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801616a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801616c:	3314      	adds	r3, #20
 801616e:	b29b      	uxth	r3, r3
 8016170:	4618      	mov	r0, r3
 8016172:	f7fd fc4b 	bl	8013a0c <lwip_htons>
 8016176:	4603      	mov	r3, r0
 8016178:	461a      	mov	r2, r3
 801617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016180:	2200      	movs	r2, #0
 8016182:	729a      	strb	r2, [r3, #10]
 8016184:	2200      	movs	r2, #0
 8016186:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	695b      	ldr	r3, [r3, #20]
 801618c:	687a      	ldr	r2, [r7, #4]
 801618e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016190:	68b8      	ldr	r0, [r7, #8]
 8016192:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016196:	f001 fc0d 	bl	80179b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801619a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801619e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80161a0:	1ad3      	subs	r3, r2, r3
 80161a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80161a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80161aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161ac:	4413      	add	r3, r2
 80161ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80161b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	f47f af19 	bne.w	8015fee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80161bc:	2300      	movs	r3, #0
 80161be:	e002      	b.n	80161c6 <ip4_frag+0x26a>
      goto memerr;
 80161c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80161c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80161c6:	4618      	mov	r0, r3
 80161c8:	3748      	adds	r7, #72	; 0x48
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd80      	pop	{r7, pc}
 80161ce:	bf00      	nop
 80161d0:	0802190c 	.word	0x0802190c
 80161d4:	08021b28 	.word	0x08021b28
 80161d8:	08021994 	.word	0x08021994
 80161dc:	08021b44 	.word	0x08021b44
 80161e0:	08021b64 	.word	0x08021b64
 80161e4:	08015ef5 	.word	0x08015ef5

080161e8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80161e8:	b480      	push	{r7}
 80161ea:	b083      	sub	sp, #12
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 80161f0:	4b04      	ldr	r3, [pc, #16]	; (8016204 <ptr_to_mem+0x1c>)
 80161f2:	681a      	ldr	r2, [r3, #0]
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	4413      	add	r3, r2
}
 80161f8:	4618      	mov	r0, r3
 80161fa:	370c      	adds	r7, #12
 80161fc:	46bd      	mov	sp, r7
 80161fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016202:	4770      	bx	lr
 8016204:	24008e74 	.word	0x24008e74

08016208 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8016208:	b480      	push	{r7}
 801620a:	b083      	sub	sp, #12
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8016210:	4b04      	ldr	r3, [pc, #16]	; (8016224 <mem_to_ptr+0x1c>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	1ad3      	subs	r3, r2, r3
}
 8016218:	4618      	mov	r0, r3
 801621a:	370c      	adds	r7, #12
 801621c:	46bd      	mov	sp, r7
 801621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016222:	4770      	bx	lr
 8016224:	24008e74 	.word	0x24008e74

08016228 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8016228:	b590      	push	{r4, r7, lr}
 801622a:	b085      	sub	sp, #20
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8016230:	4b45      	ldr	r3, [pc, #276]	; (8016348 <plug_holes+0x120>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	687a      	ldr	r2, [r7, #4]
 8016236:	429a      	cmp	r2, r3
 8016238:	d206      	bcs.n	8016248 <plug_holes+0x20>
 801623a:	4b44      	ldr	r3, [pc, #272]	; (801634c <plug_holes+0x124>)
 801623c:	f240 12df 	movw	r2, #479	; 0x1df
 8016240:	4943      	ldr	r1, [pc, #268]	; (8016350 <plug_holes+0x128>)
 8016242:	4844      	ldr	r0, [pc, #272]	; (8016354 <plug_holes+0x12c>)
 8016244:	f009 fc62 	bl	801fb0c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8016248:	4b43      	ldr	r3, [pc, #268]	; (8016358 <plug_holes+0x130>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	687a      	ldr	r2, [r7, #4]
 801624e:	429a      	cmp	r2, r3
 8016250:	d306      	bcc.n	8016260 <plug_holes+0x38>
 8016252:	4b3e      	ldr	r3, [pc, #248]	; (801634c <plug_holes+0x124>)
 8016254:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016258:	4940      	ldr	r1, [pc, #256]	; (801635c <plug_holes+0x134>)
 801625a:	483e      	ldr	r0, [pc, #248]	; (8016354 <plug_holes+0x12c>)
 801625c:	f009 fc56 	bl	801fb0c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	7a1b      	ldrb	r3, [r3, #8]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d006      	beq.n	8016276 <plug_holes+0x4e>
 8016268:	4b38      	ldr	r3, [pc, #224]	; (801634c <plug_holes+0x124>)
 801626a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801626e:	493c      	ldr	r1, [pc, #240]	; (8016360 <plug_holes+0x138>)
 8016270:	4838      	ldr	r0, [pc, #224]	; (8016354 <plug_holes+0x12c>)
 8016272:	f009 fc4b 	bl	801fb0c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	4a3a      	ldr	r2, [pc, #232]	; (8016364 <plug_holes+0x13c>)
 801627c:	4293      	cmp	r3, r2
 801627e:	d906      	bls.n	801628e <plug_holes+0x66>
 8016280:	4b32      	ldr	r3, [pc, #200]	; (801634c <plug_holes+0x124>)
 8016282:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8016286:	4938      	ldr	r1, [pc, #224]	; (8016368 <plug_holes+0x140>)
 8016288:	4832      	ldr	r0, [pc, #200]	; (8016354 <plug_holes+0x12c>)
 801628a:	f009 fc3f 	bl	801fb0c <iprintf>

  nmem = ptr_to_mem(mem->next);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	4618      	mov	r0, r3
 8016294:	f7ff ffa8 	bl	80161e8 <ptr_to_mem>
 8016298:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	429a      	cmp	r2, r3
 80162a0:	d024      	beq.n	80162ec <plug_holes+0xc4>
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	7a1b      	ldrb	r3, [r3, #8]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d120      	bne.n	80162ec <plug_holes+0xc4>
 80162aa:	4b2b      	ldr	r3, [pc, #172]	; (8016358 <plug_holes+0x130>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	68fa      	ldr	r2, [r7, #12]
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d01b      	beq.n	80162ec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80162b4:	4b2d      	ldr	r3, [pc, #180]	; (801636c <plug_holes+0x144>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	68fa      	ldr	r2, [r7, #12]
 80162ba:	429a      	cmp	r2, r3
 80162bc:	d102      	bne.n	80162c4 <plug_holes+0x9c>
      lfree = mem;
 80162be:	4a2b      	ldr	r2, [pc, #172]	; (801636c <plug_holes+0x144>)
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	681a      	ldr	r2, [r3, #0]
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	4a24      	ldr	r2, [pc, #144]	; (8016364 <plug_holes+0x13c>)
 80162d2:	4293      	cmp	r3, r2
 80162d4:	d00a      	beq.n	80162ec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	4618      	mov	r0, r3
 80162dc:	f7ff ff84 	bl	80161e8 <ptr_to_mem>
 80162e0:	4604      	mov	r4, r0
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f7ff ff90 	bl	8016208 <mem_to_ptr>
 80162e8:	4603      	mov	r3, r0
 80162ea:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	685b      	ldr	r3, [r3, #4]
 80162f0:	4618      	mov	r0, r3
 80162f2:	f7ff ff79 	bl	80161e8 <ptr_to_mem>
 80162f6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80162f8:	68ba      	ldr	r2, [r7, #8]
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	429a      	cmp	r2, r3
 80162fe:	d01f      	beq.n	8016340 <plug_holes+0x118>
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	7a1b      	ldrb	r3, [r3, #8]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d11b      	bne.n	8016340 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8016308:	4b18      	ldr	r3, [pc, #96]	; (801636c <plug_holes+0x144>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	687a      	ldr	r2, [r7, #4]
 801630e:	429a      	cmp	r2, r3
 8016310:	d102      	bne.n	8016318 <plug_holes+0xf0>
      lfree = pmem;
 8016312:	4a16      	ldr	r2, [pc, #88]	; (801636c <plug_holes+0x144>)
 8016314:	68bb      	ldr	r3, [r7, #8]
 8016316:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	681a      	ldr	r2, [r3, #0]
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	4a0f      	ldr	r2, [pc, #60]	; (8016364 <plug_holes+0x13c>)
 8016326:	4293      	cmp	r3, r2
 8016328:	d00a      	beq.n	8016340 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	4618      	mov	r0, r3
 8016330:	f7ff ff5a 	bl	80161e8 <ptr_to_mem>
 8016334:	4604      	mov	r4, r0
 8016336:	68b8      	ldr	r0, [r7, #8]
 8016338:	f7ff ff66 	bl	8016208 <mem_to_ptr>
 801633c:	4603      	mov	r3, r0
 801633e:	6063      	str	r3, [r4, #4]
    }
  }
}
 8016340:	bf00      	nop
 8016342:	3714      	adds	r7, #20
 8016344:	46bd      	mov	sp, r7
 8016346:	bd90      	pop	{r4, r7, pc}
 8016348:	24008e74 	.word	0x24008e74
 801634c:	08021b74 	.word	0x08021b74
 8016350:	08021be8 	.word	0x08021be8
 8016354:	08021c00 	.word	0x08021c00
 8016358:	24008e78 	.word	0x24008e78
 801635c:	08021c28 	.word	0x08021c28
 8016360:	08021c44 	.word	0x08021c44
 8016364:	0001ffe8 	.word	0x0001ffe8
 8016368:	08021c60 	.word	0x08021c60
 801636c:	24008e80 	.word	0x24008e80

08016370 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b082      	sub	sp, #8
 8016374:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8016376:	4b1b      	ldr	r3, [pc, #108]	; (80163e4 <mem_init+0x74>)
 8016378:	4a1b      	ldr	r2, [pc, #108]	; (80163e8 <mem_init+0x78>)
 801637a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801637c:	4b19      	ldr	r3, [pc, #100]	; (80163e4 <mem_init+0x74>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	4a19      	ldr	r2, [pc, #100]	; (80163ec <mem_init+0x7c>)
 8016386:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2200      	movs	r2, #0
 801638c:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2200      	movs	r2, #0
 8016392:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8016394:	4815      	ldr	r0, [pc, #84]	; (80163ec <mem_init+0x7c>)
 8016396:	f7ff ff27 	bl	80161e8 <ptr_to_mem>
 801639a:	4603      	mov	r3, r0
 801639c:	4a14      	ldr	r2, [pc, #80]	; (80163f0 <mem_init+0x80>)
 801639e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80163a0:	4b13      	ldr	r3, [pc, #76]	; (80163f0 <mem_init+0x80>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	2201      	movs	r2, #1
 80163a6:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 80163a8:	4b11      	ldr	r3, [pc, #68]	; (80163f0 <mem_init+0x80>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	4a0f      	ldr	r2, [pc, #60]	; (80163ec <mem_init+0x7c>)
 80163ae:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80163b0:	4b0f      	ldr	r3, [pc, #60]	; (80163f0 <mem_init+0x80>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	4a0d      	ldr	r2, [pc, #52]	; (80163ec <mem_init+0x7c>)
 80163b6:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80163b8:	4b0a      	ldr	r3, [pc, #40]	; (80163e4 <mem_init+0x74>)
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	4a0d      	ldr	r2, [pc, #52]	; (80163f4 <mem_init+0x84>)
 80163be:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80163c0:	480d      	ldr	r0, [pc, #52]	; (80163f8 <mem_init+0x88>)
 80163c2:	f001 fef7 	bl	80181b4 <sys_mutex_new>
 80163c6:	4603      	mov	r3, r0
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d006      	beq.n	80163da <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80163cc:	4b0b      	ldr	r3, [pc, #44]	; (80163fc <mem_init+0x8c>)
 80163ce:	f240 221f 	movw	r2, #543	; 0x21f
 80163d2:	490b      	ldr	r1, [pc, #44]	; (8016400 <mem_init+0x90>)
 80163d4:	480b      	ldr	r0, [pc, #44]	; (8016404 <mem_init+0x94>)
 80163d6:	f009 fb99 	bl	801fb0c <iprintf>
  }
}
 80163da:	bf00      	nop
 80163dc:	3708      	adds	r7, #8
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
 80163e2:	bf00      	nop
 80163e4:	24008e74 	.word	0x24008e74
 80163e8:	30020000 	.word	0x30020000
 80163ec:	0001ffe8 	.word	0x0001ffe8
 80163f0:	24008e78 	.word	0x24008e78
 80163f4:	24008e80 	.word	0x24008e80
 80163f8:	24008e7c 	.word	0x24008e7c
 80163fc:	08021b74 	.word	0x08021b74
 8016400:	08021c8c 	.word	0x08021c8c
 8016404:	08021c00 	.word	0x08021c00

08016408 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b086      	sub	sp, #24
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8016410:	6878      	ldr	r0, [r7, #4]
 8016412:	f7ff fef9 	bl	8016208 <mem_to_ptr>
 8016416:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	4618      	mov	r0, r3
 801641e:	f7ff fee3 	bl	80161e8 <ptr_to_mem>
 8016422:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	685b      	ldr	r3, [r3, #4]
 8016428:	4618      	mov	r0, r3
 801642a:	f7ff fedd 	bl	80161e8 <ptr_to_mem>
 801642e:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	4a11      	ldr	r2, [pc, #68]	; (801647c <mem_link_valid+0x74>)
 8016436:	4293      	cmp	r3, r2
 8016438:	d818      	bhi.n	801646c <mem_link_valid+0x64>
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	685b      	ldr	r3, [r3, #4]
 801643e:	4a0f      	ldr	r2, [pc, #60]	; (801647c <mem_link_valid+0x74>)
 8016440:	4293      	cmp	r3, r2
 8016442:	d813      	bhi.n	801646c <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016448:	697a      	ldr	r2, [r7, #20]
 801644a:	429a      	cmp	r2, r3
 801644c:	d004      	beq.n	8016458 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	697a      	ldr	r2, [r7, #20]
 8016454:	429a      	cmp	r2, r3
 8016456:	d109      	bne.n	801646c <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016458:	4b09      	ldr	r3, [pc, #36]	; (8016480 <mem_link_valid+0x78>)
 801645a:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801645c:	693a      	ldr	r2, [r7, #16]
 801645e:	429a      	cmp	r2, r3
 8016460:	d006      	beq.n	8016470 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016462:	693b      	ldr	r3, [r7, #16]
 8016464:	685b      	ldr	r3, [r3, #4]
 8016466:	697a      	ldr	r2, [r7, #20]
 8016468:	429a      	cmp	r2, r3
 801646a:	d001      	beq.n	8016470 <mem_link_valid+0x68>
    return 0;
 801646c:	2300      	movs	r3, #0
 801646e:	e000      	b.n	8016472 <mem_link_valid+0x6a>
  }
  return 1;
 8016470:	2301      	movs	r3, #1
}
 8016472:	4618      	mov	r0, r3
 8016474:	3718      	adds	r7, #24
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}
 801647a:	bf00      	nop
 801647c:	0001ffe8 	.word	0x0001ffe8
 8016480:	24008e78 	.word	0x24008e78

08016484 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b088      	sub	sp, #32
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d070      	beq.n	8016574 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	f003 0303 	and.w	r3, r3, #3
 8016498:	2b00      	cmp	r3, #0
 801649a:	d00d      	beq.n	80164b8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801649c:	4b37      	ldr	r3, [pc, #220]	; (801657c <mem_free+0xf8>)
 801649e:	f240 2273 	movw	r2, #627	; 0x273
 80164a2:	4937      	ldr	r1, [pc, #220]	; (8016580 <mem_free+0xfc>)
 80164a4:	4837      	ldr	r0, [pc, #220]	; (8016584 <mem_free+0x100>)
 80164a6:	f009 fb31 	bl	801fb0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80164aa:	f001 fee1 	bl	8018270 <sys_arch_protect>
 80164ae:	60f8      	str	r0, [r7, #12]
 80164b0:	68f8      	ldr	r0, [r7, #12]
 80164b2:	f001 feeb 	bl	801828c <sys_arch_unprotect>
    return;
 80164b6:	e05e      	b.n	8016576 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	3b0c      	subs	r3, #12
 80164bc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80164be:	4b32      	ldr	r3, [pc, #200]	; (8016588 <mem_free+0x104>)
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	69fa      	ldr	r2, [r7, #28]
 80164c4:	429a      	cmp	r2, r3
 80164c6:	d306      	bcc.n	80164d6 <mem_free+0x52>
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f103 020c 	add.w	r2, r3, #12
 80164ce:	4b2f      	ldr	r3, [pc, #188]	; (801658c <mem_free+0x108>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	429a      	cmp	r2, r3
 80164d4:	d90d      	bls.n	80164f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80164d6:	4b29      	ldr	r3, [pc, #164]	; (801657c <mem_free+0xf8>)
 80164d8:	f240 227f 	movw	r2, #639	; 0x27f
 80164dc:	492c      	ldr	r1, [pc, #176]	; (8016590 <mem_free+0x10c>)
 80164de:	4829      	ldr	r0, [pc, #164]	; (8016584 <mem_free+0x100>)
 80164e0:	f009 fb14 	bl	801fb0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80164e4:	f001 fec4 	bl	8018270 <sys_arch_protect>
 80164e8:	6138      	str	r0, [r7, #16]
 80164ea:	6938      	ldr	r0, [r7, #16]
 80164ec:	f001 fece 	bl	801828c <sys_arch_unprotect>
    return;
 80164f0:	e041      	b.n	8016576 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80164f2:	4828      	ldr	r0, [pc, #160]	; (8016594 <mem_free+0x110>)
 80164f4:	f001 fe7a 	bl	80181ec <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80164f8:	69fb      	ldr	r3, [r7, #28]
 80164fa:	7a1b      	ldrb	r3, [r3, #8]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d110      	bne.n	8016522 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8016500:	4b1e      	ldr	r3, [pc, #120]	; (801657c <mem_free+0xf8>)
 8016502:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8016506:	4924      	ldr	r1, [pc, #144]	; (8016598 <mem_free+0x114>)
 8016508:	481e      	ldr	r0, [pc, #120]	; (8016584 <mem_free+0x100>)
 801650a:	f009 faff 	bl	801fb0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801650e:	4821      	ldr	r0, [pc, #132]	; (8016594 <mem_free+0x110>)
 8016510:	f001 fe7b 	bl	801820a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016514:	f001 feac 	bl	8018270 <sys_arch_protect>
 8016518:	6178      	str	r0, [r7, #20]
 801651a:	6978      	ldr	r0, [r7, #20]
 801651c:	f001 feb6 	bl	801828c <sys_arch_unprotect>
    return;
 8016520:	e029      	b.n	8016576 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8016522:	69f8      	ldr	r0, [r7, #28]
 8016524:	f7ff ff70 	bl	8016408 <mem_link_valid>
 8016528:	4603      	mov	r3, r0
 801652a:	2b00      	cmp	r3, #0
 801652c:	d110      	bne.n	8016550 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801652e:	4b13      	ldr	r3, [pc, #76]	; (801657c <mem_free+0xf8>)
 8016530:	f240 2295 	movw	r2, #661	; 0x295
 8016534:	4919      	ldr	r1, [pc, #100]	; (801659c <mem_free+0x118>)
 8016536:	4813      	ldr	r0, [pc, #76]	; (8016584 <mem_free+0x100>)
 8016538:	f009 fae8 	bl	801fb0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801653c:	4815      	ldr	r0, [pc, #84]	; (8016594 <mem_free+0x110>)
 801653e:	f001 fe64 	bl	801820a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016542:	f001 fe95 	bl	8018270 <sys_arch_protect>
 8016546:	61b8      	str	r0, [r7, #24]
 8016548:	69b8      	ldr	r0, [r7, #24]
 801654a:	f001 fe9f 	bl	801828c <sys_arch_unprotect>
    return;
 801654e:	e012      	b.n	8016576 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8016550:	69fb      	ldr	r3, [r7, #28]
 8016552:	2200      	movs	r2, #0
 8016554:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8016556:	4b12      	ldr	r3, [pc, #72]	; (80165a0 <mem_free+0x11c>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	69fa      	ldr	r2, [r7, #28]
 801655c:	429a      	cmp	r2, r3
 801655e:	d202      	bcs.n	8016566 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8016560:	4a0f      	ldr	r2, [pc, #60]	; (80165a0 <mem_free+0x11c>)
 8016562:	69fb      	ldr	r3, [r7, #28]
 8016564:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8016566:	69f8      	ldr	r0, [r7, #28]
 8016568:	f7ff fe5e 	bl	8016228 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801656c:	4809      	ldr	r0, [pc, #36]	; (8016594 <mem_free+0x110>)
 801656e:	f001 fe4c 	bl	801820a <sys_mutex_unlock>
 8016572:	e000      	b.n	8016576 <mem_free+0xf2>
    return;
 8016574:	bf00      	nop
}
 8016576:	3720      	adds	r7, #32
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}
 801657c:	08021b74 	.word	0x08021b74
 8016580:	08021ca8 	.word	0x08021ca8
 8016584:	08021c00 	.word	0x08021c00
 8016588:	24008e74 	.word	0x24008e74
 801658c:	24008e78 	.word	0x24008e78
 8016590:	08021ccc 	.word	0x08021ccc
 8016594:	24008e7c 	.word	0x24008e7c
 8016598:	08021ce8 	.word	0x08021ce8
 801659c:	08021d10 	.word	0x08021d10
 80165a0:	24008e80 	.word	0x24008e80

080165a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b08a      	sub	sp, #40	; 0x28
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
 80165ac:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80165ae:	683b      	ldr	r3, [r7, #0]
 80165b0:	3303      	adds	r3, #3
 80165b2:	f023 0303 	bic.w	r3, r3, #3
 80165b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 80165b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ba:	2b0b      	cmp	r3, #11
 80165bc:	d801      	bhi.n	80165c2 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80165be:	230c      	movs	r3, #12
 80165c0:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80165c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c4:	4a6e      	ldr	r2, [pc, #440]	; (8016780 <mem_trim+0x1dc>)
 80165c6:	4293      	cmp	r3, r2
 80165c8:	d803      	bhi.n	80165d2 <mem_trim+0x2e>
 80165ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	429a      	cmp	r2, r3
 80165d0:	d201      	bcs.n	80165d6 <mem_trim+0x32>
    return NULL;
 80165d2:	2300      	movs	r3, #0
 80165d4:	e0d0      	b.n	8016778 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80165d6:	4b6b      	ldr	r3, [pc, #428]	; (8016784 <mem_trim+0x1e0>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	687a      	ldr	r2, [r7, #4]
 80165dc:	429a      	cmp	r2, r3
 80165de:	d304      	bcc.n	80165ea <mem_trim+0x46>
 80165e0:	4b69      	ldr	r3, [pc, #420]	; (8016788 <mem_trim+0x1e4>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	687a      	ldr	r2, [r7, #4]
 80165e6:	429a      	cmp	r2, r3
 80165e8:	d306      	bcc.n	80165f8 <mem_trim+0x54>
 80165ea:	4b68      	ldr	r3, [pc, #416]	; (801678c <mem_trim+0x1e8>)
 80165ec:	f240 22d1 	movw	r2, #721	; 0x2d1
 80165f0:	4967      	ldr	r1, [pc, #412]	; (8016790 <mem_trim+0x1ec>)
 80165f2:	4868      	ldr	r0, [pc, #416]	; (8016794 <mem_trim+0x1f0>)
 80165f4:	f009 fa8a 	bl	801fb0c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80165f8:	4b62      	ldr	r3, [pc, #392]	; (8016784 <mem_trim+0x1e0>)
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	687a      	ldr	r2, [r7, #4]
 80165fe:	429a      	cmp	r2, r3
 8016600:	d304      	bcc.n	801660c <mem_trim+0x68>
 8016602:	4b61      	ldr	r3, [pc, #388]	; (8016788 <mem_trim+0x1e4>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	687a      	ldr	r2, [r7, #4]
 8016608:	429a      	cmp	r2, r3
 801660a:	d307      	bcc.n	801661c <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801660c:	f001 fe30 	bl	8018270 <sys_arch_protect>
 8016610:	60b8      	str	r0, [r7, #8]
 8016612:	68b8      	ldr	r0, [r7, #8]
 8016614:	f001 fe3a 	bl	801828c <sys_arch_unprotect>
    return rmem;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	e0ad      	b.n	8016778 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	3b0c      	subs	r3, #12
 8016620:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8016622:	6a38      	ldr	r0, [r7, #32]
 8016624:	f7ff fdf0 	bl	8016208 <mem_to_ptr>
 8016628:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801662a:	6a3b      	ldr	r3, [r7, #32]
 801662c:	681a      	ldr	r2, [r3, #0]
 801662e:	69fb      	ldr	r3, [r7, #28]
 8016630:	1ad3      	subs	r3, r2, r3
 8016632:	3b0c      	subs	r3, #12
 8016634:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8016636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016638:	69bb      	ldr	r3, [r7, #24]
 801663a:	429a      	cmp	r2, r3
 801663c:	d906      	bls.n	801664c <mem_trim+0xa8>
 801663e:	4b53      	ldr	r3, [pc, #332]	; (801678c <mem_trim+0x1e8>)
 8016640:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8016644:	4954      	ldr	r1, [pc, #336]	; (8016798 <mem_trim+0x1f4>)
 8016646:	4853      	ldr	r0, [pc, #332]	; (8016794 <mem_trim+0x1f0>)
 8016648:	f009 fa60 	bl	801fb0c <iprintf>
  if (newsize > size) {
 801664c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801664e:	69bb      	ldr	r3, [r7, #24]
 8016650:	429a      	cmp	r2, r3
 8016652:	d901      	bls.n	8016658 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8016654:	2300      	movs	r3, #0
 8016656:	e08f      	b.n	8016778 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 8016658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801665a:	69bb      	ldr	r3, [r7, #24]
 801665c:	429a      	cmp	r2, r3
 801665e:	d101      	bne.n	8016664 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	e089      	b.n	8016778 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8016664:	484d      	ldr	r0, [pc, #308]	; (801679c <mem_trim+0x1f8>)
 8016666:	f001 fdc1 	bl	80181ec <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801666a:	6a3b      	ldr	r3, [r7, #32]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	4618      	mov	r0, r3
 8016670:	f7ff fdba 	bl	80161e8 <ptr_to_mem>
 8016674:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	7a1b      	ldrb	r3, [r3, #8]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d13c      	bne.n	80166f8 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801667e:	6a3b      	ldr	r3, [r7, #32]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	4a3f      	ldr	r2, [pc, #252]	; (8016780 <mem_trim+0x1dc>)
 8016684:	4293      	cmp	r3, r2
 8016686:	d106      	bne.n	8016696 <mem_trim+0xf2>
 8016688:	4b40      	ldr	r3, [pc, #256]	; (801678c <mem_trim+0x1e8>)
 801668a:	f240 22f5 	movw	r2, #757	; 0x2f5
 801668e:	4944      	ldr	r1, [pc, #272]	; (80167a0 <mem_trim+0x1fc>)
 8016690:	4840      	ldr	r0, [pc, #256]	; (8016794 <mem_trim+0x1f0>)
 8016692:	f009 fa3b 	bl	801fb0c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8016696:	697b      	ldr	r3, [r7, #20]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801669c:	69fa      	ldr	r2, [r7, #28]
 801669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a0:	4413      	add	r3, r2
 80166a2:	330c      	adds	r3, #12
 80166a4:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 80166a6:	4b3f      	ldr	r3, [pc, #252]	; (80167a4 <mem_trim+0x200>)
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	697a      	ldr	r2, [r7, #20]
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d105      	bne.n	80166bc <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 80166b0:	6938      	ldr	r0, [r7, #16]
 80166b2:	f7ff fd99 	bl	80161e8 <ptr_to_mem>
 80166b6:	4603      	mov	r3, r0
 80166b8:	4a3a      	ldr	r2, [pc, #232]	; (80167a4 <mem_trim+0x200>)
 80166ba:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80166bc:	6938      	ldr	r0, [r7, #16]
 80166be:	f7ff fd93 	bl	80161e8 <ptr_to_mem>
 80166c2:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	2200      	movs	r2, #0
 80166c8:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 80166ca:	697b      	ldr	r3, [r7, #20]
 80166cc:	68fa      	ldr	r2, [r7, #12]
 80166ce:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80166d0:	697b      	ldr	r3, [r7, #20]
 80166d2:	69fa      	ldr	r2, [r7, #28]
 80166d4:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 80166d6:	6a3b      	ldr	r3, [r7, #32]
 80166d8:	693a      	ldr	r2, [r7, #16]
 80166da:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80166dc:	697b      	ldr	r3, [r7, #20]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	4a27      	ldr	r2, [pc, #156]	; (8016780 <mem_trim+0x1dc>)
 80166e2:	4293      	cmp	r3, r2
 80166e4:	d044      	beq.n	8016770 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7ff fd7c 	bl	80161e8 <ptr_to_mem>
 80166f0:	4602      	mov	r2, r0
 80166f2:	693b      	ldr	r3, [r7, #16]
 80166f4:	6053      	str	r3, [r2, #4]
 80166f6:	e03b      	b.n	8016770 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80166f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166fa:	3318      	adds	r3, #24
 80166fc:	69ba      	ldr	r2, [r7, #24]
 80166fe:	429a      	cmp	r2, r3
 8016700:	d336      	bcc.n	8016770 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016702:	69fa      	ldr	r2, [r7, #28]
 8016704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016706:	4413      	add	r3, r2
 8016708:	330c      	adds	r3, #12
 801670a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801670c:	6a3b      	ldr	r3, [r7, #32]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	4a1b      	ldr	r2, [pc, #108]	; (8016780 <mem_trim+0x1dc>)
 8016712:	4293      	cmp	r3, r2
 8016714:	d106      	bne.n	8016724 <mem_trim+0x180>
 8016716:	4b1d      	ldr	r3, [pc, #116]	; (801678c <mem_trim+0x1e8>)
 8016718:	f240 3216 	movw	r2, #790	; 0x316
 801671c:	4920      	ldr	r1, [pc, #128]	; (80167a0 <mem_trim+0x1fc>)
 801671e:	481d      	ldr	r0, [pc, #116]	; (8016794 <mem_trim+0x1f0>)
 8016720:	f009 f9f4 	bl	801fb0c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8016724:	6938      	ldr	r0, [r7, #16]
 8016726:	f7ff fd5f 	bl	80161e8 <ptr_to_mem>
 801672a:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 801672c:	4b1d      	ldr	r3, [pc, #116]	; (80167a4 <mem_trim+0x200>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	697a      	ldr	r2, [r7, #20]
 8016732:	429a      	cmp	r2, r3
 8016734:	d202      	bcs.n	801673c <mem_trim+0x198>
      lfree = mem2;
 8016736:	4a1b      	ldr	r2, [pc, #108]	; (80167a4 <mem_trim+0x200>)
 8016738:	697b      	ldr	r3, [r7, #20]
 801673a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	2200      	movs	r2, #0
 8016740:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8016742:	6a3b      	ldr	r3, [r7, #32]
 8016744:	681a      	ldr	r2, [r3, #0]
 8016746:	697b      	ldr	r3, [r7, #20]
 8016748:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 801674a:	697b      	ldr	r3, [r7, #20]
 801674c:	69fa      	ldr	r2, [r7, #28]
 801674e:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8016750:	6a3b      	ldr	r3, [r7, #32]
 8016752:	693a      	ldr	r2, [r7, #16]
 8016754:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016756:	697b      	ldr	r3, [r7, #20]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	4a09      	ldr	r2, [pc, #36]	; (8016780 <mem_trim+0x1dc>)
 801675c:	4293      	cmp	r3, r2
 801675e:	d007      	beq.n	8016770 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016760:	697b      	ldr	r3, [r7, #20]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	4618      	mov	r0, r3
 8016766:	f7ff fd3f 	bl	80161e8 <ptr_to_mem>
 801676a:	4602      	mov	r2, r0
 801676c:	693b      	ldr	r3, [r7, #16]
 801676e:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016770:	480a      	ldr	r0, [pc, #40]	; (801679c <mem_trim+0x1f8>)
 8016772:	f001 fd4a 	bl	801820a <sys_mutex_unlock>
  return rmem;
 8016776:	687b      	ldr	r3, [r7, #4]
}
 8016778:	4618      	mov	r0, r3
 801677a:	3728      	adds	r7, #40	; 0x28
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}
 8016780:	0001ffe8 	.word	0x0001ffe8
 8016784:	24008e74 	.word	0x24008e74
 8016788:	24008e78 	.word	0x24008e78
 801678c:	08021b74 	.word	0x08021b74
 8016790:	08021d44 	.word	0x08021d44
 8016794:	08021c00 	.word	0x08021c00
 8016798:	08021d5c 	.word	0x08021d5c
 801679c:	24008e7c 	.word	0x24008e7c
 80167a0:	08021d7c 	.word	0x08021d7c
 80167a4:	24008e80 	.word	0x24008e80

080167a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b088      	sub	sp, #32
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d101      	bne.n	80167ba <mem_malloc+0x12>
    return NULL;
 80167b6:	2300      	movs	r3, #0
 80167b8:	e0d9      	b.n	801696e <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	3303      	adds	r3, #3
 80167be:	f023 0303 	bic.w	r3, r3, #3
 80167c2:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 80167c4:	69bb      	ldr	r3, [r7, #24]
 80167c6:	2b0b      	cmp	r3, #11
 80167c8:	d801      	bhi.n	80167ce <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80167ca:	230c      	movs	r3, #12
 80167cc:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80167ce:	69bb      	ldr	r3, [r7, #24]
 80167d0:	4a69      	ldr	r2, [pc, #420]	; (8016978 <mem_malloc+0x1d0>)
 80167d2:	4293      	cmp	r3, r2
 80167d4:	d803      	bhi.n	80167de <mem_malloc+0x36>
 80167d6:	69ba      	ldr	r2, [r7, #24]
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	429a      	cmp	r2, r3
 80167dc:	d201      	bcs.n	80167e2 <mem_malloc+0x3a>
    return NULL;
 80167de:	2300      	movs	r3, #0
 80167e0:	e0c5      	b.n	801696e <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80167e2:	4866      	ldr	r0, [pc, #408]	; (801697c <mem_malloc+0x1d4>)
 80167e4:	f001 fd02 	bl	80181ec <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80167e8:	4b65      	ldr	r3, [pc, #404]	; (8016980 <mem_malloc+0x1d8>)
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7ff fd0b 	bl	8016208 <mem_to_ptr>
 80167f2:	61f8      	str	r0, [r7, #28]
 80167f4:	e0b0      	b.n	8016958 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80167f6:	69f8      	ldr	r0, [r7, #28]
 80167f8:	f7ff fcf6 	bl	80161e8 <ptr_to_mem>
 80167fc:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	7a1b      	ldrb	r3, [r3, #8]
 8016802:	2b00      	cmp	r3, #0
 8016804:	f040 80a2 	bne.w	801694c <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	681a      	ldr	r2, [r3, #0]
 801680c:	69fb      	ldr	r3, [r7, #28]
 801680e:	1ad3      	subs	r3, r2, r3
 8016810:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8016812:	69ba      	ldr	r2, [r7, #24]
 8016814:	429a      	cmp	r2, r3
 8016816:	f200 8099 	bhi.w	801694c <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801681a:	693b      	ldr	r3, [r7, #16]
 801681c:	681a      	ldr	r2, [r3, #0]
 801681e:	69fb      	ldr	r3, [r7, #28]
 8016820:	1ad3      	subs	r3, r2, r3
 8016822:	f1a3 020c 	sub.w	r2, r3, #12
 8016826:	69bb      	ldr	r3, [r7, #24]
 8016828:	3318      	adds	r3, #24
 801682a:	429a      	cmp	r2, r3
 801682c:	d331      	bcc.n	8016892 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801682e:	69fa      	ldr	r2, [r7, #28]
 8016830:	69bb      	ldr	r3, [r7, #24]
 8016832:	4413      	add	r3, r2
 8016834:	330c      	adds	r3, #12
 8016836:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	4a4f      	ldr	r2, [pc, #316]	; (8016978 <mem_malloc+0x1d0>)
 801683c:	4293      	cmp	r3, r2
 801683e:	d106      	bne.n	801684e <mem_malloc+0xa6>
 8016840:	4b50      	ldr	r3, [pc, #320]	; (8016984 <mem_malloc+0x1dc>)
 8016842:	f240 3287 	movw	r2, #903	; 0x387
 8016846:	4950      	ldr	r1, [pc, #320]	; (8016988 <mem_malloc+0x1e0>)
 8016848:	4850      	ldr	r0, [pc, #320]	; (801698c <mem_malloc+0x1e4>)
 801684a:	f009 f95f 	bl	801fb0c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801684e:	68f8      	ldr	r0, [r7, #12]
 8016850:	f7ff fcca 	bl	80161e8 <ptr_to_mem>
 8016854:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8016856:	68bb      	ldr	r3, [r7, #8]
 8016858:	2200      	movs	r2, #0
 801685a:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	681a      	ldr	r2, [r3, #0]
 8016860:	68bb      	ldr	r3, [r7, #8]
 8016862:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	69fa      	ldr	r2, [r7, #28]
 8016868:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801686a:	693b      	ldr	r3, [r7, #16]
 801686c:	68fa      	ldr	r2, [r7, #12]
 801686e:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8016870:	693b      	ldr	r3, [r7, #16]
 8016872:	2201      	movs	r2, #1
 8016874:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8016876:	68bb      	ldr	r3, [r7, #8]
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	4a3f      	ldr	r2, [pc, #252]	; (8016978 <mem_malloc+0x1d0>)
 801687c:	4293      	cmp	r3, r2
 801687e:	d00b      	beq.n	8016898 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	4618      	mov	r0, r3
 8016886:	f7ff fcaf 	bl	80161e8 <ptr_to_mem>
 801688a:	4602      	mov	r2, r0
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	6053      	str	r3, [r2, #4]
 8016890:	e002      	b.n	8016898 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8016892:	693b      	ldr	r3, [r7, #16]
 8016894:	2201      	movs	r2, #1
 8016896:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8016898:	4b39      	ldr	r3, [pc, #228]	; (8016980 <mem_malloc+0x1d8>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	693a      	ldr	r2, [r7, #16]
 801689e:	429a      	cmp	r2, r3
 80168a0:	d127      	bne.n	80168f2 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 80168a2:	4b37      	ldr	r3, [pc, #220]	; (8016980 <mem_malloc+0x1d8>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80168a8:	e005      	b.n	80168b6 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80168aa:	697b      	ldr	r3, [r7, #20]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	4618      	mov	r0, r3
 80168b0:	f7ff fc9a 	bl	80161e8 <ptr_to_mem>
 80168b4:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 80168b6:	697b      	ldr	r3, [r7, #20]
 80168b8:	7a1b      	ldrb	r3, [r3, #8]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d004      	beq.n	80168c8 <mem_malloc+0x120>
 80168be:	4b34      	ldr	r3, [pc, #208]	; (8016990 <mem_malloc+0x1e8>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	697a      	ldr	r2, [r7, #20]
 80168c4:	429a      	cmp	r2, r3
 80168c6:	d1f0      	bne.n	80168aa <mem_malloc+0x102>
          }
          lfree = cur;
 80168c8:	4a2d      	ldr	r2, [pc, #180]	; (8016980 <mem_malloc+0x1d8>)
 80168ca:	697b      	ldr	r3, [r7, #20]
 80168cc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80168ce:	4b2c      	ldr	r3, [pc, #176]	; (8016980 <mem_malloc+0x1d8>)
 80168d0:	681a      	ldr	r2, [r3, #0]
 80168d2:	4b2f      	ldr	r3, [pc, #188]	; (8016990 <mem_malloc+0x1e8>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	429a      	cmp	r2, r3
 80168d8:	d00b      	beq.n	80168f2 <mem_malloc+0x14a>
 80168da:	4b29      	ldr	r3, [pc, #164]	; (8016980 <mem_malloc+0x1d8>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	7a1b      	ldrb	r3, [r3, #8]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d006      	beq.n	80168f2 <mem_malloc+0x14a>
 80168e4:	4b27      	ldr	r3, [pc, #156]	; (8016984 <mem_malloc+0x1dc>)
 80168e6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80168ea:	492a      	ldr	r1, [pc, #168]	; (8016994 <mem_malloc+0x1ec>)
 80168ec:	4827      	ldr	r0, [pc, #156]	; (801698c <mem_malloc+0x1e4>)
 80168ee:	f009 f90d 	bl	801fb0c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80168f2:	4822      	ldr	r0, [pc, #136]	; (801697c <mem_malloc+0x1d4>)
 80168f4:	f001 fc89 	bl	801820a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80168f8:	693a      	ldr	r2, [r7, #16]
 80168fa:	69bb      	ldr	r3, [r7, #24]
 80168fc:	4413      	add	r3, r2
 80168fe:	330c      	adds	r3, #12
 8016900:	4a23      	ldr	r2, [pc, #140]	; (8016990 <mem_malloc+0x1e8>)
 8016902:	6812      	ldr	r2, [r2, #0]
 8016904:	4293      	cmp	r3, r2
 8016906:	d906      	bls.n	8016916 <mem_malloc+0x16e>
 8016908:	4b1e      	ldr	r3, [pc, #120]	; (8016984 <mem_malloc+0x1dc>)
 801690a:	f240 32b9 	movw	r2, #953	; 0x3b9
 801690e:	4922      	ldr	r1, [pc, #136]	; (8016998 <mem_malloc+0x1f0>)
 8016910:	481e      	ldr	r0, [pc, #120]	; (801698c <mem_malloc+0x1e4>)
 8016912:	f009 f8fb 	bl	801fb0c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8016916:	693b      	ldr	r3, [r7, #16]
 8016918:	f003 0303 	and.w	r3, r3, #3
 801691c:	2b00      	cmp	r3, #0
 801691e:	d006      	beq.n	801692e <mem_malloc+0x186>
 8016920:	4b18      	ldr	r3, [pc, #96]	; (8016984 <mem_malloc+0x1dc>)
 8016922:	f240 32bb 	movw	r2, #955	; 0x3bb
 8016926:	491d      	ldr	r1, [pc, #116]	; (801699c <mem_malloc+0x1f4>)
 8016928:	4818      	ldr	r0, [pc, #96]	; (801698c <mem_malloc+0x1e4>)
 801692a:	f009 f8ef 	bl	801fb0c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801692e:	693b      	ldr	r3, [r7, #16]
 8016930:	f003 0303 	and.w	r3, r3, #3
 8016934:	2b00      	cmp	r3, #0
 8016936:	d006      	beq.n	8016946 <mem_malloc+0x19e>
 8016938:	4b12      	ldr	r3, [pc, #72]	; (8016984 <mem_malloc+0x1dc>)
 801693a:	f240 32bd 	movw	r2, #957	; 0x3bd
 801693e:	4918      	ldr	r1, [pc, #96]	; (80169a0 <mem_malloc+0x1f8>)
 8016940:	4812      	ldr	r0, [pc, #72]	; (801698c <mem_malloc+0x1e4>)
 8016942:	f009 f8e3 	bl	801fb0c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8016946:	693b      	ldr	r3, [r7, #16]
 8016948:	330c      	adds	r3, #12
 801694a:	e010      	b.n	801696e <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 801694c:	69f8      	ldr	r0, [r7, #28]
 801694e:	f7ff fc4b 	bl	80161e8 <ptr_to_mem>
 8016952:	4603      	mov	r3, r0
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016958:	69ba      	ldr	r2, [r7, #24]
 801695a:	4b07      	ldr	r3, [pc, #28]	; (8016978 <mem_malloc+0x1d0>)
 801695c:	1a9b      	subs	r3, r3, r2
 801695e:	69fa      	ldr	r2, [r7, #28]
 8016960:	429a      	cmp	r2, r3
 8016962:	f4ff af48 	bcc.w	80167f6 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8016966:	4805      	ldr	r0, [pc, #20]	; (801697c <mem_malloc+0x1d4>)
 8016968:	f001 fc4f 	bl	801820a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801696c:	2300      	movs	r3, #0
}
 801696e:	4618      	mov	r0, r3
 8016970:	3720      	adds	r7, #32
 8016972:	46bd      	mov	sp, r7
 8016974:	bd80      	pop	{r7, pc}
 8016976:	bf00      	nop
 8016978:	0001ffe8 	.word	0x0001ffe8
 801697c:	24008e7c 	.word	0x24008e7c
 8016980:	24008e80 	.word	0x24008e80
 8016984:	08021b74 	.word	0x08021b74
 8016988:	08021d7c 	.word	0x08021d7c
 801698c:	08021c00 	.word	0x08021c00
 8016990:	24008e78 	.word	0x24008e78
 8016994:	08021d90 	.word	0x08021d90
 8016998:	08021dac 	.word	0x08021dac
 801699c:	08021ddc 	.word	0x08021ddc
 80169a0:	08021e0c 	.word	0x08021e0c

080169a4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80169a4:	b480      	push	{r7}
 80169a6:	b085      	sub	sp, #20
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	689b      	ldr	r3, [r3, #8]
 80169b0:	2200      	movs	r2, #0
 80169b2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	3303      	adds	r3, #3
 80169ba:	f023 0303 	bic.w	r3, r3, #3
 80169be:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80169c0:	2300      	movs	r3, #0
 80169c2:	60fb      	str	r3, [r7, #12]
 80169c4:	e011      	b.n	80169ea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	689b      	ldr	r3, [r3, #8]
 80169ca:	681a      	ldr	r2, [r3, #0]
 80169cc:	68bb      	ldr	r3, [r7, #8]
 80169ce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	689b      	ldr	r3, [r3, #8]
 80169d4:	68ba      	ldr	r2, [r7, #8]
 80169d6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	881b      	ldrh	r3, [r3, #0]
 80169dc:	461a      	mov	r2, r3
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	4413      	add	r3, r2
 80169e2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	3301      	adds	r3, #1
 80169e8:	60fb      	str	r3, [r7, #12]
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	885b      	ldrh	r3, [r3, #2]
 80169ee:	461a      	mov	r2, r3
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	4293      	cmp	r3, r2
 80169f4:	dbe7      	blt.n	80169c6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80169f6:	bf00      	nop
 80169f8:	bf00      	nop
 80169fa:	3714      	adds	r7, #20
 80169fc:	46bd      	mov	sp, r7
 80169fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a02:	4770      	bx	lr

08016a04 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b082      	sub	sp, #8
 8016a08:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	80fb      	strh	r3, [r7, #6]
 8016a0e:	e009      	b.n	8016a24 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8016a10:	88fb      	ldrh	r3, [r7, #6]
 8016a12:	4a08      	ldr	r2, [pc, #32]	; (8016a34 <memp_init+0x30>)
 8016a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f7ff ffc3 	bl	80169a4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016a1e:	88fb      	ldrh	r3, [r7, #6]
 8016a20:	3301      	adds	r3, #1
 8016a22:	80fb      	strh	r3, [r7, #6]
 8016a24:	88fb      	ldrh	r3, [r7, #6]
 8016a26:	2b0c      	cmp	r3, #12
 8016a28:	d9f2      	bls.n	8016a10 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8016a2a:	bf00      	nop
 8016a2c:	bf00      	nop
 8016a2e:	3708      	adds	r7, #8
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}
 8016a34:	080244c8 	.word	0x080244c8

08016a38 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b084      	sub	sp, #16
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8016a40:	f001 fc16 	bl	8018270 <sys_arch_protect>
 8016a44:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	689b      	ldr	r3, [r3, #8]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8016a4e:	68bb      	ldr	r3, [r7, #8]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d015      	beq.n	8016a80 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	689b      	ldr	r3, [r3, #8]
 8016a58:	68ba      	ldr	r2, [r7, #8]
 8016a5a:	6812      	ldr	r2, [r2, #0]
 8016a5c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	f003 0303 	and.w	r3, r3, #3
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d006      	beq.n	8016a76 <do_memp_malloc_pool+0x3e>
 8016a68:	4b09      	ldr	r3, [pc, #36]	; (8016a90 <do_memp_malloc_pool+0x58>)
 8016a6a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8016a6e:	4909      	ldr	r1, [pc, #36]	; (8016a94 <do_memp_malloc_pool+0x5c>)
 8016a70:	4809      	ldr	r0, [pc, #36]	; (8016a98 <do_memp_malloc_pool+0x60>)
 8016a72:	f009 f84b 	bl	801fb0c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016a76:	68f8      	ldr	r0, [r7, #12]
 8016a78:	f001 fc08 	bl	801828c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8016a7c:	68bb      	ldr	r3, [r7, #8]
 8016a7e:	e003      	b.n	8016a88 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016a80:	68f8      	ldr	r0, [r7, #12]
 8016a82:	f001 fc03 	bl	801828c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8016a86:	2300      	movs	r3, #0
}
 8016a88:	4618      	mov	r0, r3
 8016a8a:	3710      	adds	r7, #16
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}
 8016a90:	08021e30 	.word	0x08021e30
 8016a94:	08021ea4 	.word	0x08021ea4
 8016a98:	08021ec8 	.word	0x08021ec8

08016a9c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b082      	sub	sp, #8
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d106      	bne.n	8016ab8 <memp_malloc_pool+0x1c>
 8016aaa:	4b0a      	ldr	r3, [pc, #40]	; (8016ad4 <memp_malloc_pool+0x38>)
 8016aac:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8016ab0:	4909      	ldr	r1, [pc, #36]	; (8016ad8 <memp_malloc_pool+0x3c>)
 8016ab2:	480a      	ldr	r0, [pc, #40]	; (8016adc <memp_malloc_pool+0x40>)
 8016ab4:	f009 f82a 	bl	801fb0c <iprintf>
  if (desc == NULL) {
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d101      	bne.n	8016ac2 <memp_malloc_pool+0x26>
    return NULL;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	e003      	b.n	8016aca <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f7ff ffb8 	bl	8016a38 <do_memp_malloc_pool>
 8016ac8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	3708      	adds	r7, #8
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}
 8016ad2:	bf00      	nop
 8016ad4:	08021e30 	.word	0x08021e30
 8016ad8:	08021ef0 	.word	0x08021ef0
 8016adc:	08021ec8 	.word	0x08021ec8

08016ae0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b084      	sub	sp, #16
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016aea:	79fb      	ldrb	r3, [r7, #7]
 8016aec:	2b0c      	cmp	r3, #12
 8016aee:	d908      	bls.n	8016b02 <memp_malloc+0x22>
 8016af0:	4b0a      	ldr	r3, [pc, #40]	; (8016b1c <memp_malloc+0x3c>)
 8016af2:	f240 1257 	movw	r2, #343	; 0x157
 8016af6:	490a      	ldr	r1, [pc, #40]	; (8016b20 <memp_malloc+0x40>)
 8016af8:	480a      	ldr	r0, [pc, #40]	; (8016b24 <memp_malloc+0x44>)
 8016afa:	f009 f807 	bl	801fb0c <iprintf>
 8016afe:	2300      	movs	r3, #0
 8016b00:	e008      	b.n	8016b14 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8016b02:	79fb      	ldrb	r3, [r7, #7]
 8016b04:	4a08      	ldr	r2, [pc, #32]	; (8016b28 <memp_malloc+0x48>)
 8016b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7ff ff94 	bl	8016a38 <do_memp_malloc_pool>
 8016b10:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8016b12:	68fb      	ldr	r3, [r7, #12]
}
 8016b14:	4618      	mov	r0, r3
 8016b16:	3710      	adds	r7, #16
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}
 8016b1c:	08021e30 	.word	0x08021e30
 8016b20:	08021f04 	.word	0x08021f04
 8016b24:	08021ec8 	.word	0x08021ec8
 8016b28:	080244c8 	.word	0x080244c8

08016b2c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b084      	sub	sp, #16
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
 8016b34:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	f003 0303 	and.w	r3, r3, #3
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d006      	beq.n	8016b4e <do_memp_free_pool+0x22>
 8016b40:	4b0d      	ldr	r3, [pc, #52]	; (8016b78 <do_memp_free_pool+0x4c>)
 8016b42:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8016b46:	490d      	ldr	r1, [pc, #52]	; (8016b7c <do_memp_free_pool+0x50>)
 8016b48:	480d      	ldr	r0, [pc, #52]	; (8016b80 <do_memp_free_pool+0x54>)
 8016b4a:	f008 ffdf 	bl	801fb0c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8016b4e:	683b      	ldr	r3, [r7, #0]
 8016b50:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8016b52:	f001 fb8d 	bl	8018270 <sys_arch_protect>
 8016b56:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	689b      	ldr	r3, [r3, #8]
 8016b5c:	681a      	ldr	r2, [r3, #0]
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	689b      	ldr	r3, [r3, #8]
 8016b66:	68fa      	ldr	r2, [r7, #12]
 8016b68:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8016b6a:	68b8      	ldr	r0, [r7, #8]
 8016b6c:	f001 fb8e 	bl	801828c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8016b70:	bf00      	nop
 8016b72:	3710      	adds	r7, #16
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}
 8016b78:	08021e30 	.word	0x08021e30
 8016b7c:	08021f24 	.word	0x08021f24
 8016b80:	08021ec8 	.word	0x08021ec8

08016b84 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b082      	sub	sp, #8
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
 8016b8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d106      	bne.n	8016ba2 <memp_free_pool+0x1e>
 8016b94:	4b0a      	ldr	r3, [pc, #40]	; (8016bc0 <memp_free_pool+0x3c>)
 8016b96:	f240 1295 	movw	r2, #405	; 0x195
 8016b9a:	490a      	ldr	r1, [pc, #40]	; (8016bc4 <memp_free_pool+0x40>)
 8016b9c:	480a      	ldr	r0, [pc, #40]	; (8016bc8 <memp_free_pool+0x44>)
 8016b9e:	f008 ffb5 	bl	801fb0c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d007      	beq.n	8016bb8 <memp_free_pool+0x34>
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d004      	beq.n	8016bb8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8016bae:	6839      	ldr	r1, [r7, #0]
 8016bb0:	6878      	ldr	r0, [r7, #4]
 8016bb2:	f7ff ffbb 	bl	8016b2c <do_memp_free_pool>
 8016bb6:	e000      	b.n	8016bba <memp_free_pool+0x36>
    return;
 8016bb8:	bf00      	nop
}
 8016bba:	3708      	adds	r7, #8
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd80      	pop	{r7, pc}
 8016bc0:	08021e30 	.word	0x08021e30
 8016bc4:	08021ef0 	.word	0x08021ef0
 8016bc8:	08021ec8 	.word	0x08021ec8

08016bcc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b082      	sub	sp, #8
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	6039      	str	r1, [r7, #0]
 8016bd6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8016bd8:	79fb      	ldrb	r3, [r7, #7]
 8016bda:	2b0c      	cmp	r3, #12
 8016bdc:	d907      	bls.n	8016bee <memp_free+0x22>
 8016bde:	4b0c      	ldr	r3, [pc, #48]	; (8016c10 <memp_free+0x44>)
 8016be0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8016be4:	490b      	ldr	r1, [pc, #44]	; (8016c14 <memp_free+0x48>)
 8016be6:	480c      	ldr	r0, [pc, #48]	; (8016c18 <memp_free+0x4c>)
 8016be8:	f008 ff90 	bl	801fb0c <iprintf>
 8016bec:	e00c      	b.n	8016c08 <memp_free+0x3c>

  if (mem == NULL) {
 8016bee:	683b      	ldr	r3, [r7, #0]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d008      	beq.n	8016c06 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8016bf4:	79fb      	ldrb	r3, [r7, #7]
 8016bf6:	4a09      	ldr	r2, [pc, #36]	; (8016c1c <memp_free+0x50>)
 8016bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016bfc:	6839      	ldr	r1, [r7, #0]
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7ff ff94 	bl	8016b2c <do_memp_free_pool>
 8016c04:	e000      	b.n	8016c08 <memp_free+0x3c>
    return;
 8016c06:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8016c08:	3708      	adds	r7, #8
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	08021e30 	.word	0x08021e30
 8016c14:	08021f44 	.word	0x08021f44
 8016c18:	08021ec8 	.word	0x08021ec8
 8016c1c:	080244c8 	.word	0x080244c8

08016c20 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b082      	sub	sp, #8
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d013      	beq.n	8016c56 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d00b      	beq.n	8016c4e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f000 feba 	bl	80179b4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2200      	movs	r2, #0
 8016c44:	605a      	str	r2, [r3, #4]
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	685a      	ldr	r2, [r3, #4]
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8016c4e:	6879      	ldr	r1, [r7, #4]
 8016c50:	2006      	movs	r0, #6
 8016c52:	f7ff ffbb 	bl	8016bcc <memp_free>
  }
}
 8016c56:	bf00      	nop
 8016c58:	3708      	adds	r7, #8
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}
	...

08016c60 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d108      	bne.n	8016c80 <netbuf_next+0x20>
 8016c6e:	4b11      	ldr	r3, [pc, #68]	; (8016cb4 <netbuf_next+0x54>)
 8016c70:	22e0      	movs	r2, #224	; 0xe0
 8016c72:	4911      	ldr	r1, [pc, #68]	; (8016cb8 <netbuf_next+0x58>)
 8016c74:	4811      	ldr	r0, [pc, #68]	; (8016cbc <netbuf_next+0x5c>)
 8016c76:	f008 ff49 	bl	801fb0c <iprintf>
 8016c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c7e:	e014      	b.n	8016caa <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	685b      	ldr	r3, [r3, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d102      	bne.n	8016c90 <netbuf_next+0x30>
    return -1;
 8016c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c8e:	e00c      	b.n	8016caa <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	685b      	ldr	r3, [r3, #4]
 8016c94:	681a      	ldr	r2, [r3, #0]
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	685b      	ldr	r3, [r3, #4]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d101      	bne.n	8016ca8 <netbuf_next+0x48>
    return 1;
 8016ca4:	2301      	movs	r3, #1
 8016ca6:	e000      	b.n	8016caa <netbuf_next+0x4a>
  }
  return 0;
 8016ca8:	2300      	movs	r3, #0
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3708      	adds	r7, #8
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}
 8016cb2:	bf00      	nop
 8016cb4:	08021f60 	.word	0x08021f60
 8016cb8:	08022100 	.word	0x08022100
 8016cbc:	08021ff0 	.word	0x08021ff0

08016cc0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8016cc0:	b480      	push	{r7}
 8016cc2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8016cc4:	bf00      	nop
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ccc:	4770      	bx	lr
	...

08016cd0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b086      	sub	sp, #24
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	60f8      	str	r0, [r7, #12]
 8016cd8:	60b9      	str	r1, [r7, #8]
 8016cda:	607a      	str	r2, [r7, #4]
 8016cdc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d108      	bne.n	8016cf6 <netif_add+0x26>
 8016ce4:	4b57      	ldr	r3, [pc, #348]	; (8016e44 <netif_add+0x174>)
 8016ce6:	f240 1227 	movw	r2, #295	; 0x127
 8016cea:	4957      	ldr	r1, [pc, #348]	; (8016e48 <netif_add+0x178>)
 8016cec:	4857      	ldr	r0, [pc, #348]	; (8016e4c <netif_add+0x17c>)
 8016cee:	f008 ff0d 	bl	801fb0c <iprintf>
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	e0a2      	b.n	8016e3c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8016cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d108      	bne.n	8016d0e <netif_add+0x3e>
 8016cfc:	4b51      	ldr	r3, [pc, #324]	; (8016e44 <netif_add+0x174>)
 8016cfe:	f44f 7294 	mov.w	r2, #296	; 0x128
 8016d02:	4953      	ldr	r1, [pc, #332]	; (8016e50 <netif_add+0x180>)
 8016d04:	4851      	ldr	r0, [pc, #324]	; (8016e4c <netif_add+0x17c>)
 8016d06:	f008 ff01 	bl	801fb0c <iprintf>
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	e096      	b.n	8016e3c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8016d0e:	68bb      	ldr	r3, [r7, #8]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d101      	bne.n	8016d18 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8016d14:	4b4f      	ldr	r3, [pc, #316]	; (8016e54 <netif_add+0x184>)
 8016d16:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d101      	bne.n	8016d22 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8016d1e:	4b4d      	ldr	r3, [pc, #308]	; (8016e54 <netif_add+0x184>)
 8016d20:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8016d22:	683b      	ldr	r3, [r7, #0]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d101      	bne.n	8016d2c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8016d28:	4b4a      	ldr	r3, [pc, #296]	; (8016e54 <netif_add+0x184>)
 8016d2a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	2200      	movs	r2, #0
 8016d30:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	2200      	movs	r2, #0
 8016d36:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	4a45      	ldr	r2, [pc, #276]	; (8016e58 <netif_add+0x188>)
 8016d42:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	2200      	movs	r2, #0
 8016d48:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	2200      	movs	r2, #0
 8016d4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	2200      	movs	r2, #0
 8016d56:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	6a3a      	ldr	r2, [r7, #32]
 8016d5c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8016d5e:	4b3f      	ldr	r3, [pc, #252]	; (8016e5c <netif_add+0x18c>)
 8016d60:	781a      	ldrb	r2, [r3, #0]
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d6c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8016d6e:	683b      	ldr	r3, [r7, #0]
 8016d70:	687a      	ldr	r2, [r7, #4]
 8016d72:	68b9      	ldr	r1, [r7, #8]
 8016d74:	68f8      	ldr	r0, [r7, #12]
 8016d76:	f000 f913 	bl	8016fa0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8016d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7c:	68f8      	ldr	r0, [r7, #12]
 8016d7e:	4798      	blx	r3
 8016d80:	4603      	mov	r3, r0
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d001      	beq.n	8016d8a <netif_add+0xba>
    return NULL;
 8016d86:	2300      	movs	r3, #0
 8016d88:	e058      	b.n	8016e3c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016d90:	2bff      	cmp	r3, #255	; 0xff
 8016d92:	d103      	bne.n	8016d9c <netif_add+0xcc>
        netif->num = 0;
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	2200      	movs	r2, #0
 8016d98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016da0:	4b2f      	ldr	r3, [pc, #188]	; (8016e60 <netif_add+0x190>)
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	617b      	str	r3, [r7, #20]
 8016da6:	e02b      	b.n	8016e00 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016da8:	697a      	ldr	r2, [r7, #20]
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	429a      	cmp	r2, r3
 8016dae:	d106      	bne.n	8016dbe <netif_add+0xee>
 8016db0:	4b24      	ldr	r3, [pc, #144]	; (8016e44 <netif_add+0x174>)
 8016db2:	f240 128b 	movw	r2, #395	; 0x18b
 8016db6:	492b      	ldr	r1, [pc, #172]	; (8016e64 <netif_add+0x194>)
 8016db8:	4824      	ldr	r0, [pc, #144]	; (8016e4c <netif_add+0x17c>)
 8016dba:	f008 fea7 	bl	801fb0c <iprintf>
        num_netifs++;
 8016dbe:	693b      	ldr	r3, [r7, #16]
 8016dc0:	3301      	adds	r3, #1
 8016dc2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8016dc4:	693b      	ldr	r3, [r7, #16]
 8016dc6:	2bff      	cmp	r3, #255	; 0xff
 8016dc8:	dd06      	ble.n	8016dd8 <netif_add+0x108>
 8016dca:	4b1e      	ldr	r3, [pc, #120]	; (8016e44 <netif_add+0x174>)
 8016dcc:	f240 128d 	movw	r2, #397	; 0x18d
 8016dd0:	4925      	ldr	r1, [pc, #148]	; (8016e68 <netif_add+0x198>)
 8016dd2:	481e      	ldr	r0, [pc, #120]	; (8016e4c <netif_add+0x17c>)
 8016dd4:	f008 fe9a 	bl	801fb0c <iprintf>
        if (netif2->num == netif->num) {
 8016dd8:	697b      	ldr	r3, [r7, #20]
 8016dda:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016de4:	429a      	cmp	r2, r3
 8016de6:	d108      	bne.n	8016dfa <netif_add+0x12a>
          netif->num++;
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016dee:	3301      	adds	r3, #1
 8016df0:	b2da      	uxtb	r2, r3
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8016df8:	e005      	b.n	8016e06 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016dfa:	697b      	ldr	r3, [r7, #20]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	617b      	str	r3, [r7, #20]
 8016e00:	697b      	ldr	r3, [r7, #20]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d1d0      	bne.n	8016da8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8016e06:	697b      	ldr	r3, [r7, #20]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d1be      	bne.n	8016d8a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016e12:	2bfe      	cmp	r3, #254	; 0xfe
 8016e14:	d103      	bne.n	8016e1e <netif_add+0x14e>
    netif_num = 0;
 8016e16:	4b11      	ldr	r3, [pc, #68]	; (8016e5c <netif_add+0x18c>)
 8016e18:	2200      	movs	r2, #0
 8016e1a:	701a      	strb	r2, [r3, #0]
 8016e1c:	e006      	b.n	8016e2c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016e24:	3301      	adds	r3, #1
 8016e26:	b2da      	uxtb	r2, r3
 8016e28:	4b0c      	ldr	r3, [pc, #48]	; (8016e5c <netif_add+0x18c>)
 8016e2a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8016e2c:	4b0c      	ldr	r3, [pc, #48]	; (8016e60 <netif_add+0x190>)
 8016e2e:	681a      	ldr	r2, [r3, #0]
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8016e34:	4a0a      	ldr	r2, [pc, #40]	; (8016e60 <netif_add+0x190>)
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3718      	adds	r7, #24
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}
 8016e44:	08022138 	.word	0x08022138
 8016e48:	0802220c 	.word	0x0802220c
 8016e4c:	080221c8 	.word	0x080221c8
 8016e50:	08022228 	.word	0x08022228
 8016e54:	08024428 	.word	0x08024428
 8016e58:	0801727b 	.word	0x0801727b
 8016e5c:	2400f918 	.word	0x2400f918
 8016e60:	2400f910 	.word	0x2400f910
 8016e64:	0802224c 	.word	0x0802224c
 8016e68:	08022260 	.word	0x08022260

08016e6c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b082      	sub	sp, #8
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
 8016e74:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8016e76:	6839      	ldr	r1, [r7, #0]
 8016e78:	6878      	ldr	r0, [r7, #4]
 8016e7a:	f003 f835 	bl	8019ee8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8016e7e:	6839      	ldr	r1, [r7, #0]
 8016e80:	6878      	ldr	r0, [r7, #4]
 8016e82:	f008 f89f 	bl	801efc4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8016e86:	bf00      	nop
 8016e88:	3708      	adds	r7, #8
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bd80      	pop	{r7, pc}
	...

08016e90 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b086      	sub	sp, #24
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	60f8      	str	r0, [r7, #12]
 8016e98:	60b9      	str	r1, [r7, #8]
 8016e9a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016e9c:	68bb      	ldr	r3, [r7, #8]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d106      	bne.n	8016eb0 <netif_do_set_ipaddr+0x20>
 8016ea2:	4b1d      	ldr	r3, [pc, #116]	; (8016f18 <netif_do_set_ipaddr+0x88>)
 8016ea4:	f240 12cb 	movw	r2, #459	; 0x1cb
 8016ea8:	491c      	ldr	r1, [pc, #112]	; (8016f1c <netif_do_set_ipaddr+0x8c>)
 8016eaa:	481d      	ldr	r0, [pc, #116]	; (8016f20 <netif_do_set_ipaddr+0x90>)
 8016eac:	f008 fe2e 	bl	801fb0c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d106      	bne.n	8016ec4 <netif_do_set_ipaddr+0x34>
 8016eb6:	4b18      	ldr	r3, [pc, #96]	; (8016f18 <netif_do_set_ipaddr+0x88>)
 8016eb8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8016ebc:	4917      	ldr	r1, [pc, #92]	; (8016f1c <netif_do_set_ipaddr+0x8c>)
 8016ebe:	4818      	ldr	r0, [pc, #96]	; (8016f20 <netif_do_set_ipaddr+0x90>)
 8016ec0:	f008 fe24 	bl	801fb0c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8016ec4:	68bb      	ldr	r3, [r7, #8]
 8016ec6:	681a      	ldr	r2, [r3, #0]
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	3304      	adds	r3, #4
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	d01c      	beq.n	8016f0c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8016ed2:	68bb      	ldr	r3, [r7, #8]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	3304      	adds	r3, #4
 8016edc:	681a      	ldr	r2, [r3, #0]
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8016ee2:	f107 0314 	add.w	r3, r7, #20
 8016ee6:	4619      	mov	r1, r3
 8016ee8:	6878      	ldr	r0, [r7, #4]
 8016eea:	f7ff ffbf 	bl	8016e6c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8016eee:	68bb      	ldr	r3, [r7, #8]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d002      	beq.n	8016efa <netif_do_set_ipaddr+0x6a>
 8016ef4:	68bb      	ldr	r3, [r7, #8]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	e000      	b.n	8016efc <netif_do_set_ipaddr+0x6c>
 8016efa:	2300      	movs	r3, #0
 8016efc:	68fa      	ldr	r2, [r7, #12]
 8016efe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8016f00:	2101      	movs	r1, #1
 8016f02:	68f8      	ldr	r0, [r7, #12]
 8016f04:	f000 f8d2 	bl	80170ac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8016f08:	2301      	movs	r3, #1
 8016f0a:	e000      	b.n	8016f0e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8016f0c:	2300      	movs	r3, #0
}
 8016f0e:	4618      	mov	r0, r3
 8016f10:	3718      	adds	r7, #24
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}
 8016f16:	bf00      	nop
 8016f18:	08022138 	.word	0x08022138
 8016f1c:	08022290 	.word	0x08022290
 8016f20:	080221c8 	.word	0x080221c8

08016f24 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8016f24:	b480      	push	{r7}
 8016f26:	b085      	sub	sp, #20
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	60f8      	str	r0, [r7, #12]
 8016f2c:	60b9      	str	r1, [r7, #8]
 8016f2e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8016f30:	68bb      	ldr	r3, [r7, #8]
 8016f32:	681a      	ldr	r2, [r3, #0]
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	3308      	adds	r3, #8
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d00a      	beq.n	8016f54 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8016f3e:	68bb      	ldr	r3, [r7, #8]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d002      	beq.n	8016f4a <netif_do_set_netmask+0x26>
 8016f44:	68bb      	ldr	r3, [r7, #8]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	e000      	b.n	8016f4c <netif_do_set_netmask+0x28>
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	68fa      	ldr	r2, [r7, #12]
 8016f4e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8016f50:	2301      	movs	r3, #1
 8016f52:	e000      	b.n	8016f56 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8016f54:	2300      	movs	r3, #0
}
 8016f56:	4618      	mov	r0, r3
 8016f58:	3714      	adds	r7, #20
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f60:	4770      	bx	lr

08016f62 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8016f62:	b480      	push	{r7}
 8016f64:	b085      	sub	sp, #20
 8016f66:	af00      	add	r7, sp, #0
 8016f68:	60f8      	str	r0, [r7, #12]
 8016f6a:	60b9      	str	r1, [r7, #8]
 8016f6c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8016f6e:	68bb      	ldr	r3, [r7, #8]
 8016f70:	681a      	ldr	r2, [r3, #0]
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	330c      	adds	r3, #12
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	d00a      	beq.n	8016f92 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016f7c:	68bb      	ldr	r3, [r7, #8]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d002      	beq.n	8016f88 <netif_do_set_gw+0x26>
 8016f82:	68bb      	ldr	r3, [r7, #8]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	e000      	b.n	8016f8a <netif_do_set_gw+0x28>
 8016f88:	2300      	movs	r3, #0
 8016f8a:	68fa      	ldr	r2, [r7, #12]
 8016f8c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8016f8e:	2301      	movs	r3, #1
 8016f90:	e000      	b.n	8016f94 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8016f92:	2300      	movs	r3, #0
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	3714      	adds	r7, #20
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9e:	4770      	bx	lr

08016fa0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b088      	sub	sp, #32
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	607a      	str	r2, [r7, #4]
 8016fac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016fb6:	68bb      	ldr	r3, [r7, #8]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d101      	bne.n	8016fc0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8016fbc:	4b1c      	ldr	r3, [pc, #112]	; (8017030 <netif_set_addr+0x90>)
 8016fbe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d101      	bne.n	8016fca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8016fc6:	4b1a      	ldr	r3, [pc, #104]	; (8017030 <netif_set_addr+0x90>)
 8016fc8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8016fca:	683b      	ldr	r3, [r7, #0]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d101      	bne.n	8016fd4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8016fd0:	4b17      	ldr	r3, [pc, #92]	; (8017030 <netif_set_addr+0x90>)
 8016fd2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8016fd4:	68bb      	ldr	r3, [r7, #8]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d003      	beq.n	8016fe2 <netif_set_addr+0x42>
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d101      	bne.n	8016fe6 <netif_set_addr+0x46>
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	e000      	b.n	8016fe8 <netif_set_addr+0x48>
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8016fea:	697b      	ldr	r3, [r7, #20]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d006      	beq.n	8016ffe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016ff0:	f107 0310 	add.w	r3, r7, #16
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	68b9      	ldr	r1, [r7, #8]
 8016ff8:	68f8      	ldr	r0, [r7, #12]
 8016ffa:	f7ff ff49 	bl	8016e90 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8016ffe:	69fa      	ldr	r2, [r7, #28]
 8017000:	6879      	ldr	r1, [r7, #4]
 8017002:	68f8      	ldr	r0, [r7, #12]
 8017004:	f7ff ff8e 	bl	8016f24 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8017008:	69ba      	ldr	r2, [r7, #24]
 801700a:	6839      	ldr	r1, [r7, #0]
 801700c:	68f8      	ldr	r0, [r7, #12]
 801700e:	f7ff ffa8 	bl	8016f62 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8017012:	697b      	ldr	r3, [r7, #20]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d106      	bne.n	8017026 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017018:	f107 0310 	add.w	r3, r7, #16
 801701c:	461a      	mov	r2, r3
 801701e:	68b9      	ldr	r1, [r7, #8]
 8017020:	68f8      	ldr	r0, [r7, #12]
 8017022:	f7ff ff35 	bl	8016e90 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8017026:	bf00      	nop
 8017028:	3720      	adds	r7, #32
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}
 801702e:	bf00      	nop
 8017030:	08024428 	.word	0x08024428

08017034 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8017034:	b480      	push	{r7}
 8017036:	b083      	sub	sp, #12
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801703c:	4a04      	ldr	r2, [pc, #16]	; (8017050 <netif_set_default+0x1c>)
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8017042:	bf00      	nop
 8017044:	370c      	adds	r7, #12
 8017046:	46bd      	mov	sp, r7
 8017048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704c:	4770      	bx	lr
 801704e:	bf00      	nop
 8017050:	2400f914 	.word	0x2400f914

08017054 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b082      	sub	sp, #8
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d107      	bne.n	8017072 <netif_set_up+0x1e>
 8017062:	4b0f      	ldr	r3, [pc, #60]	; (80170a0 <netif_set_up+0x4c>)
 8017064:	f44f 7254 	mov.w	r2, #848	; 0x350
 8017068:	490e      	ldr	r1, [pc, #56]	; (80170a4 <netif_set_up+0x50>)
 801706a:	480f      	ldr	r0, [pc, #60]	; (80170a8 <netif_set_up+0x54>)
 801706c:	f008 fd4e 	bl	801fb0c <iprintf>
 8017070:	e013      	b.n	801709a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017078:	f003 0301 	and.w	r3, r3, #1
 801707c:	2b00      	cmp	r3, #0
 801707e:	d10c      	bne.n	801709a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017086:	f043 0301 	orr.w	r3, r3, #1
 801708a:	b2da      	uxtb	r2, r3
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017092:	2103      	movs	r1, #3
 8017094:	6878      	ldr	r0, [r7, #4]
 8017096:	f000 f809 	bl	80170ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801709a:	3708      	adds	r7, #8
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	08022138 	.word	0x08022138
 80170a4:	08022300 	.word	0x08022300
 80170a8:	080221c8 	.word	0x080221c8

080170ac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b082      	sub	sp, #8
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
 80170b4:	460b      	mov	r3, r1
 80170b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d106      	bne.n	80170cc <netif_issue_reports+0x20>
 80170be:	4b18      	ldr	r3, [pc, #96]	; (8017120 <netif_issue_reports+0x74>)
 80170c0:	f240 326d 	movw	r2, #877	; 0x36d
 80170c4:	4917      	ldr	r1, [pc, #92]	; (8017124 <netif_issue_reports+0x78>)
 80170c6:	4818      	ldr	r0, [pc, #96]	; (8017128 <netif_issue_reports+0x7c>)
 80170c8:	f008 fd20 	bl	801fb0c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170d2:	f003 0304 	and.w	r3, r3, #4
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d01e      	beq.n	8017118 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170e0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d017      	beq.n	8017118 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80170e8:	78fb      	ldrb	r3, [r7, #3]
 80170ea:	f003 0301 	and.w	r3, r3, #1
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d013      	beq.n	801711a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	3304      	adds	r3, #4
 80170f6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d00e      	beq.n	801711a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017102:	f003 0308 	and.w	r3, r3, #8
 8017106:	2b00      	cmp	r3, #0
 8017108:	d007      	beq.n	801711a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	3304      	adds	r3, #4
 801710e:	4619      	mov	r1, r3
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f7fd fbe3 	bl	80148dc <etharp_request>
 8017116:	e000      	b.n	801711a <netif_issue_reports+0x6e>
    return;
 8017118:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801711a:	3708      	adds	r7, #8
 801711c:	46bd      	mov	sp, r7
 801711e:	bd80      	pop	{r7, pc}
 8017120:	08022138 	.word	0x08022138
 8017124:	0802231c 	.word	0x0802231c
 8017128:	080221c8 	.word	0x080221c8

0801712c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b082      	sub	sp, #8
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d107      	bne.n	801714a <netif_set_down+0x1e>
 801713a:	4b12      	ldr	r3, [pc, #72]	; (8017184 <netif_set_down+0x58>)
 801713c:	f240 329b 	movw	r2, #923	; 0x39b
 8017140:	4911      	ldr	r1, [pc, #68]	; (8017188 <netif_set_down+0x5c>)
 8017142:	4812      	ldr	r0, [pc, #72]	; (801718c <netif_set_down+0x60>)
 8017144:	f008 fce2 	bl	801fb0c <iprintf>
 8017148:	e019      	b.n	801717e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017150:	f003 0301 	and.w	r3, r3, #1
 8017154:	2b00      	cmp	r3, #0
 8017156:	d012      	beq.n	801717e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801715e:	f023 0301 	bic.w	r3, r3, #1
 8017162:	b2da      	uxtb	r2, r3
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017170:	f003 0308 	and.w	r3, r3, #8
 8017174:	2b00      	cmp	r3, #0
 8017176:	d002      	beq.n	801717e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8017178:	6878      	ldr	r0, [r7, #4]
 801717a:	f7fc ff6d 	bl	8014058 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801717e:	3708      	adds	r7, #8
 8017180:	46bd      	mov	sp, r7
 8017182:	bd80      	pop	{r7, pc}
 8017184:	08022138 	.word	0x08022138
 8017188:	08022340 	.word	0x08022340
 801718c:	080221c8 	.word	0x080221c8

08017190 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b082      	sub	sp, #8
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d107      	bne.n	80171ae <netif_set_link_up+0x1e>
 801719e:	4b13      	ldr	r3, [pc, #76]	; (80171ec <netif_set_link_up+0x5c>)
 80171a0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80171a4:	4912      	ldr	r1, [pc, #72]	; (80171f0 <netif_set_link_up+0x60>)
 80171a6:	4813      	ldr	r0, [pc, #76]	; (80171f4 <netif_set_link_up+0x64>)
 80171a8:	f008 fcb0 	bl	801fb0c <iprintf>
 80171ac:	e01b      	b.n	80171e6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80171b4:	f003 0304 	and.w	r3, r3, #4
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d114      	bne.n	80171e6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80171c2:	f043 0304 	orr.w	r3, r3, #4
 80171c6:	b2da      	uxtb	r2, r3
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80171ce:	2103      	movs	r1, #3
 80171d0:	6878      	ldr	r0, [r7, #4]
 80171d2:	f7ff ff6b 	bl	80170ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	69db      	ldr	r3, [r3, #28]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d003      	beq.n	80171e6 <netif_set_link_up+0x56>
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	69db      	ldr	r3, [r3, #28]
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80171e6:	3708      	adds	r7, #8
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd80      	pop	{r7, pc}
 80171ec:	08022138 	.word	0x08022138
 80171f0:	08022360 	.word	0x08022360
 80171f4:	080221c8 	.word	0x080221c8

080171f8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b082      	sub	sp, #8
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d107      	bne.n	8017216 <netif_set_link_down+0x1e>
 8017206:	4b11      	ldr	r3, [pc, #68]	; (801724c <netif_set_link_down+0x54>)
 8017208:	f240 4206 	movw	r2, #1030	; 0x406
 801720c:	4910      	ldr	r1, [pc, #64]	; (8017250 <netif_set_link_down+0x58>)
 801720e:	4811      	ldr	r0, [pc, #68]	; (8017254 <netif_set_link_down+0x5c>)
 8017210:	f008 fc7c 	bl	801fb0c <iprintf>
 8017214:	e017      	b.n	8017246 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801721c:	f003 0304 	and.w	r3, r3, #4
 8017220:	2b00      	cmp	r3, #0
 8017222:	d010      	beq.n	8017246 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801722a:	f023 0304 	bic.w	r3, r3, #4
 801722e:	b2da      	uxtb	r2, r3
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	69db      	ldr	r3, [r3, #28]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d003      	beq.n	8017246 <netif_set_link_down+0x4e>
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	69db      	ldr	r3, [r3, #28]
 8017242:	6878      	ldr	r0, [r7, #4]
 8017244:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8017246:	3708      	adds	r7, #8
 8017248:	46bd      	mov	sp, r7
 801724a:	bd80      	pop	{r7, pc}
 801724c:	08022138 	.word	0x08022138
 8017250:	08022384 	.word	0x08022384
 8017254:	080221c8 	.word	0x080221c8

08017258 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8017258:	b480      	push	{r7}
 801725a:	b083      	sub	sp, #12
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
 8017260:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d002      	beq.n	801726e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	683a      	ldr	r2, [r7, #0]
 801726c:	61da      	str	r2, [r3, #28]
  }
}
 801726e:	bf00      	nop
 8017270:	370c      	adds	r7, #12
 8017272:	46bd      	mov	sp, r7
 8017274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017278:	4770      	bx	lr

0801727a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801727a:	b480      	push	{r7}
 801727c:	b085      	sub	sp, #20
 801727e:	af00      	add	r7, sp, #0
 8017280:	60f8      	str	r0, [r7, #12]
 8017282:	60b9      	str	r1, [r7, #8]
 8017284:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8017286:	f06f 030b 	mvn.w	r3, #11
}
 801728a:	4618      	mov	r0, r3
 801728c:	3714      	adds	r7, #20
 801728e:	46bd      	mov	sp, r7
 8017290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017294:	4770      	bx	lr
	...

08017298 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8017298:	b480      	push	{r7}
 801729a:	b085      	sub	sp, #20
 801729c:	af00      	add	r7, sp, #0
 801729e:	4603      	mov	r3, r0
 80172a0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80172a2:	79fb      	ldrb	r3, [r7, #7]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d013      	beq.n	80172d0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80172a8:	4b0d      	ldr	r3, [pc, #52]	; (80172e0 <netif_get_by_index+0x48>)
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	60fb      	str	r3, [r7, #12]
 80172ae:	e00c      	b.n	80172ca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80172b6:	3301      	adds	r3, #1
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	79fa      	ldrb	r2, [r7, #7]
 80172bc:	429a      	cmp	r2, r3
 80172be:	d101      	bne.n	80172c4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	e006      	b.n	80172d2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	60fb      	str	r3, [r7, #12]
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d1ef      	bne.n	80172b0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80172d0:	2300      	movs	r3, #0
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	3714      	adds	r7, #20
 80172d6:	46bd      	mov	sp, r7
 80172d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172dc:	4770      	bx	lr
 80172de:	bf00      	nop
 80172e0:	2400f910 	.word	0x2400f910

080172e4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b082      	sub	sp, #8
 80172e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80172ea:	f000 ffc1 	bl	8018270 <sys_arch_protect>
 80172ee:	6038      	str	r0, [r7, #0]
 80172f0:	4b0d      	ldr	r3, [pc, #52]	; (8017328 <pbuf_free_ooseq+0x44>)
 80172f2:	2200      	movs	r2, #0
 80172f4:	701a      	strb	r2, [r3, #0]
 80172f6:	6838      	ldr	r0, [r7, #0]
 80172f8:	f000 ffc8 	bl	801828c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80172fc:	4b0b      	ldr	r3, [pc, #44]	; (801732c <pbuf_free_ooseq+0x48>)
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	607b      	str	r3, [r7, #4]
 8017302:	e00a      	b.n	801731a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017308:	2b00      	cmp	r3, #0
 801730a:	d003      	beq.n	8017314 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801730c:	6878      	ldr	r0, [r7, #4]
 801730e:	f002 fe29 	bl	8019f64 <tcp_free_ooseq>
      return;
 8017312:	e005      	b.n	8017320 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	68db      	ldr	r3, [r3, #12]
 8017318:	607b      	str	r3, [r7, #4]
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d1f1      	bne.n	8017304 <pbuf_free_ooseq+0x20>
    }
  }
}
 8017320:	3708      	adds	r7, #8
 8017322:	46bd      	mov	sp, r7
 8017324:	bd80      	pop	{r7, pc}
 8017326:	bf00      	nop
 8017328:	2400f919 	.word	0x2400f919
 801732c:	2400f92c 	.word	0x2400f92c

08017330 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b082      	sub	sp, #8
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8017338:	f7ff ffd4 	bl	80172e4 <pbuf_free_ooseq>
}
 801733c:	bf00      	nop
 801733e:	3708      	adds	r7, #8
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}

08017344 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b082      	sub	sp, #8
 8017348:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801734a:	f000 ff91 	bl	8018270 <sys_arch_protect>
 801734e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8017350:	4b0f      	ldr	r3, [pc, #60]	; (8017390 <pbuf_pool_is_empty+0x4c>)
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8017356:	4b0e      	ldr	r3, [pc, #56]	; (8017390 <pbuf_pool_is_empty+0x4c>)
 8017358:	2201      	movs	r2, #1
 801735a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801735c:	6878      	ldr	r0, [r7, #4]
 801735e:	f000 ff95 	bl	801828c <sys_arch_unprotect>

  if (!queued) {
 8017362:	78fb      	ldrb	r3, [r7, #3]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d10f      	bne.n	8017388 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8017368:	2100      	movs	r1, #0
 801736a:	480a      	ldr	r0, [pc, #40]	; (8017394 <pbuf_pool_is_empty+0x50>)
 801736c:	f007 f91c 	bl	801e5a8 <tcpip_try_callback>
 8017370:	4603      	mov	r3, r0
 8017372:	2b00      	cmp	r3, #0
 8017374:	d008      	beq.n	8017388 <pbuf_pool_is_empty+0x44>
 8017376:	f000 ff7b 	bl	8018270 <sys_arch_protect>
 801737a:	6078      	str	r0, [r7, #4]
 801737c:	4b04      	ldr	r3, [pc, #16]	; (8017390 <pbuf_pool_is_empty+0x4c>)
 801737e:	2200      	movs	r2, #0
 8017380:	701a      	strb	r2, [r3, #0]
 8017382:	6878      	ldr	r0, [r7, #4]
 8017384:	f000 ff82 	bl	801828c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8017388:	bf00      	nop
 801738a:	3708      	adds	r7, #8
 801738c:	46bd      	mov	sp, r7
 801738e:	bd80      	pop	{r7, pc}
 8017390:	2400f919 	.word	0x2400f919
 8017394:	08017331 	.word	0x08017331

08017398 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8017398:	b480      	push	{r7}
 801739a:	b085      	sub	sp, #20
 801739c:	af00      	add	r7, sp, #0
 801739e:	60f8      	str	r0, [r7, #12]
 80173a0:	60b9      	str	r1, [r7, #8]
 80173a2:	4611      	mov	r1, r2
 80173a4:	461a      	mov	r2, r3
 80173a6:	460b      	mov	r3, r1
 80173a8:	80fb      	strh	r3, [r7, #6]
 80173aa:	4613      	mov	r3, r2
 80173ac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	2200      	movs	r2, #0
 80173b2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	68ba      	ldr	r2, [r7, #8]
 80173b8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	88fa      	ldrh	r2, [r7, #6]
 80173be:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	88ba      	ldrh	r2, [r7, #4]
 80173c4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80173c6:	8b3b      	ldrh	r3, [r7, #24]
 80173c8:	b2da      	uxtb	r2, r3
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	7f3a      	ldrb	r2, [r7, #28]
 80173d2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	2201      	movs	r2, #1
 80173d8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	2200      	movs	r2, #0
 80173de:	73da      	strb	r2, [r3, #15]
}
 80173e0:	bf00      	nop
 80173e2:	3714      	adds	r7, #20
 80173e4:	46bd      	mov	sp, r7
 80173e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ea:	4770      	bx	lr

080173ec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b08c      	sub	sp, #48	; 0x30
 80173f0:	af02      	add	r7, sp, #8
 80173f2:	4603      	mov	r3, r0
 80173f4:	71fb      	strb	r3, [r7, #7]
 80173f6:	460b      	mov	r3, r1
 80173f8:	80bb      	strh	r3, [r7, #4]
 80173fa:	4613      	mov	r3, r2
 80173fc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80173fe:	79fb      	ldrb	r3, [r7, #7]
 8017400:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8017402:	887b      	ldrh	r3, [r7, #2]
 8017404:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017408:	f000 8082 	beq.w	8017510 <pbuf_alloc+0x124>
 801740c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017410:	f300 80c9 	bgt.w	80175a6 <pbuf_alloc+0x1ba>
 8017414:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8017418:	d010      	beq.n	801743c <pbuf_alloc+0x50>
 801741a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801741e:	f300 80c2 	bgt.w	80175a6 <pbuf_alloc+0x1ba>
 8017422:	2b01      	cmp	r3, #1
 8017424:	d002      	beq.n	801742c <pbuf_alloc+0x40>
 8017426:	2b41      	cmp	r3, #65	; 0x41
 8017428:	f040 80bd 	bne.w	80175a6 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801742c:	887a      	ldrh	r2, [r7, #2]
 801742e:	88bb      	ldrh	r3, [r7, #4]
 8017430:	4619      	mov	r1, r3
 8017432:	2000      	movs	r0, #0
 8017434:	f000 f8d2 	bl	80175dc <pbuf_alloc_reference>
 8017438:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801743a:	e0be      	b.n	80175ba <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801743c:	2300      	movs	r3, #0
 801743e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8017440:	2300      	movs	r3, #0
 8017442:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8017444:	88bb      	ldrh	r3, [r7, #4]
 8017446:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8017448:	200c      	movs	r0, #12
 801744a:	f7ff fb49 	bl	8016ae0 <memp_malloc>
 801744e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8017450:	693b      	ldr	r3, [r7, #16]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d109      	bne.n	801746a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8017456:	f7ff ff75 	bl	8017344 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745c:	2b00      	cmp	r3, #0
 801745e:	d002      	beq.n	8017466 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8017460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017462:	f000 faa7 	bl	80179b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8017466:	2300      	movs	r3, #0
 8017468:	e0a8      	b.n	80175bc <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801746a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801746c:	3303      	adds	r3, #3
 801746e:	b29b      	uxth	r3, r3
 8017470:	f023 0303 	bic.w	r3, r3, #3
 8017474:	b29a      	uxth	r2, r3
 8017476:	f240 53ec 	movw	r3, #1516	; 0x5ec
 801747a:	1a9b      	subs	r3, r3, r2
 801747c:	b29b      	uxth	r3, r3
 801747e:	8b7a      	ldrh	r2, [r7, #26]
 8017480:	4293      	cmp	r3, r2
 8017482:	bf28      	it	cs
 8017484:	4613      	movcs	r3, r2
 8017486:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8017488:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801748a:	3310      	adds	r3, #16
 801748c:	693a      	ldr	r2, [r7, #16]
 801748e:	4413      	add	r3, r2
 8017490:	3303      	adds	r3, #3
 8017492:	f023 0303 	bic.w	r3, r3, #3
 8017496:	4618      	mov	r0, r3
 8017498:	89f9      	ldrh	r1, [r7, #14]
 801749a:	8b7a      	ldrh	r2, [r7, #26]
 801749c:	2300      	movs	r3, #0
 801749e:	9301      	str	r3, [sp, #4]
 80174a0:	887b      	ldrh	r3, [r7, #2]
 80174a2:	9300      	str	r3, [sp, #0]
 80174a4:	460b      	mov	r3, r1
 80174a6:	4601      	mov	r1, r0
 80174a8:	6938      	ldr	r0, [r7, #16]
 80174aa:	f7ff ff75 	bl	8017398 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80174ae:	693b      	ldr	r3, [r7, #16]
 80174b0:	685b      	ldr	r3, [r3, #4]
 80174b2:	f003 0303 	and.w	r3, r3, #3
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d006      	beq.n	80174c8 <pbuf_alloc+0xdc>
 80174ba:	4b42      	ldr	r3, [pc, #264]	; (80175c4 <pbuf_alloc+0x1d8>)
 80174bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80174c0:	4941      	ldr	r1, [pc, #260]	; (80175c8 <pbuf_alloc+0x1dc>)
 80174c2:	4842      	ldr	r0, [pc, #264]	; (80175cc <pbuf_alloc+0x1e0>)
 80174c4:	f008 fb22 	bl	801fb0c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80174c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80174ca:	3303      	adds	r3, #3
 80174cc:	f023 0303 	bic.w	r3, r3, #3
 80174d0:	f240 52ec 	movw	r2, #1516	; 0x5ec
 80174d4:	4293      	cmp	r3, r2
 80174d6:	d106      	bne.n	80174e6 <pbuf_alloc+0xfa>
 80174d8:	4b3a      	ldr	r3, [pc, #232]	; (80175c4 <pbuf_alloc+0x1d8>)
 80174da:	f44f 7281 	mov.w	r2, #258	; 0x102
 80174de:	493c      	ldr	r1, [pc, #240]	; (80175d0 <pbuf_alloc+0x1e4>)
 80174e0:	483a      	ldr	r0, [pc, #232]	; (80175cc <pbuf_alloc+0x1e0>)
 80174e2:	f008 fb13 	bl	801fb0c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80174e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d102      	bne.n	80174f2 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80174ec:	693b      	ldr	r3, [r7, #16]
 80174ee:	627b      	str	r3, [r7, #36]	; 0x24
 80174f0:	e002      	b.n	80174f8 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80174f2:	69fb      	ldr	r3, [r7, #28]
 80174f4:	693a      	ldr	r2, [r7, #16]
 80174f6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80174f8:	693b      	ldr	r3, [r7, #16]
 80174fa:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80174fc:	8b7a      	ldrh	r2, [r7, #26]
 80174fe:	89fb      	ldrh	r3, [r7, #14]
 8017500:	1ad3      	subs	r3, r2, r3
 8017502:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8017504:	2300      	movs	r3, #0
 8017506:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8017508:	8b7b      	ldrh	r3, [r7, #26]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d19c      	bne.n	8017448 <pbuf_alloc+0x5c>
      break;
 801750e:	e054      	b.n	80175ba <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8017510:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017512:	3303      	adds	r3, #3
 8017514:	b29b      	uxth	r3, r3
 8017516:	f023 0303 	bic.w	r3, r3, #3
 801751a:	b29a      	uxth	r2, r3
 801751c:	88bb      	ldrh	r3, [r7, #4]
 801751e:	3303      	adds	r3, #3
 8017520:	b29b      	uxth	r3, r3
 8017522:	f023 0303 	bic.w	r3, r3, #3
 8017526:	b29b      	uxth	r3, r3
 8017528:	4413      	add	r3, r2
 801752a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801752c:	8b3b      	ldrh	r3, [r7, #24]
 801752e:	3310      	adds	r3, #16
 8017530:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017532:	8b3a      	ldrh	r2, [r7, #24]
 8017534:	88bb      	ldrh	r3, [r7, #4]
 8017536:	3303      	adds	r3, #3
 8017538:	f023 0303 	bic.w	r3, r3, #3
 801753c:	429a      	cmp	r2, r3
 801753e:	d306      	bcc.n	801754e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8017540:	88bb      	ldrh	r3, [r7, #4]
 8017542:	3303      	adds	r3, #3
 8017544:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017548:	697a      	ldr	r2, [r7, #20]
 801754a:	429a      	cmp	r2, r3
 801754c:	d201      	bcs.n	8017552 <pbuf_alloc+0x166>
        return NULL;
 801754e:	2300      	movs	r3, #0
 8017550:	e034      	b.n	80175bc <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8017552:	6978      	ldr	r0, [r7, #20]
 8017554:	f7ff f928 	bl	80167a8 <mem_malloc>
 8017558:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801755c:	2b00      	cmp	r3, #0
 801755e:	d101      	bne.n	8017564 <pbuf_alloc+0x178>
        return NULL;
 8017560:	2300      	movs	r3, #0
 8017562:	e02b      	b.n	80175bc <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8017564:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017566:	3310      	adds	r3, #16
 8017568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801756a:	4413      	add	r3, r2
 801756c:	3303      	adds	r3, #3
 801756e:	f023 0303 	bic.w	r3, r3, #3
 8017572:	4618      	mov	r0, r3
 8017574:	88b9      	ldrh	r1, [r7, #4]
 8017576:	88ba      	ldrh	r2, [r7, #4]
 8017578:	2300      	movs	r3, #0
 801757a:	9301      	str	r3, [sp, #4]
 801757c:	887b      	ldrh	r3, [r7, #2]
 801757e:	9300      	str	r3, [sp, #0]
 8017580:	460b      	mov	r3, r1
 8017582:	4601      	mov	r1, r0
 8017584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017586:	f7ff ff07 	bl	8017398 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801758c:	685b      	ldr	r3, [r3, #4]
 801758e:	f003 0303 	and.w	r3, r3, #3
 8017592:	2b00      	cmp	r3, #0
 8017594:	d010      	beq.n	80175b8 <pbuf_alloc+0x1cc>
 8017596:	4b0b      	ldr	r3, [pc, #44]	; (80175c4 <pbuf_alloc+0x1d8>)
 8017598:	f44f 7291 	mov.w	r2, #290	; 0x122
 801759c:	490d      	ldr	r1, [pc, #52]	; (80175d4 <pbuf_alloc+0x1e8>)
 801759e:	480b      	ldr	r0, [pc, #44]	; (80175cc <pbuf_alloc+0x1e0>)
 80175a0:	f008 fab4 	bl	801fb0c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80175a4:	e008      	b.n	80175b8 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80175a6:	4b07      	ldr	r3, [pc, #28]	; (80175c4 <pbuf_alloc+0x1d8>)
 80175a8:	f240 1227 	movw	r2, #295	; 0x127
 80175ac:	490a      	ldr	r1, [pc, #40]	; (80175d8 <pbuf_alloc+0x1ec>)
 80175ae:	4807      	ldr	r0, [pc, #28]	; (80175cc <pbuf_alloc+0x1e0>)
 80175b0:	f008 faac 	bl	801fb0c <iprintf>
      return NULL;
 80175b4:	2300      	movs	r3, #0
 80175b6:	e001      	b.n	80175bc <pbuf_alloc+0x1d0>
      break;
 80175b8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80175ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80175bc:	4618      	mov	r0, r3
 80175be:	3728      	adds	r7, #40	; 0x28
 80175c0:	46bd      	mov	sp, r7
 80175c2:	bd80      	pop	{r7, pc}
 80175c4:	080223a8 	.word	0x080223a8
 80175c8:	0802241c 	.word	0x0802241c
 80175cc:	0802244c 	.word	0x0802244c
 80175d0:	08022474 	.word	0x08022474
 80175d4:	080224a8 	.word	0x080224a8
 80175d8:	080224d4 	.word	0x080224d4

080175dc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b086      	sub	sp, #24
 80175e0:	af02      	add	r7, sp, #8
 80175e2:	6078      	str	r0, [r7, #4]
 80175e4:	460b      	mov	r3, r1
 80175e6:	807b      	strh	r3, [r7, #2]
 80175e8:	4613      	mov	r3, r2
 80175ea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80175ec:	883b      	ldrh	r3, [r7, #0]
 80175ee:	2b41      	cmp	r3, #65	; 0x41
 80175f0:	d009      	beq.n	8017606 <pbuf_alloc_reference+0x2a>
 80175f2:	883b      	ldrh	r3, [r7, #0]
 80175f4:	2b01      	cmp	r3, #1
 80175f6:	d006      	beq.n	8017606 <pbuf_alloc_reference+0x2a>
 80175f8:	4b0f      	ldr	r3, [pc, #60]	; (8017638 <pbuf_alloc_reference+0x5c>)
 80175fa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80175fe:	490f      	ldr	r1, [pc, #60]	; (801763c <pbuf_alloc_reference+0x60>)
 8017600:	480f      	ldr	r0, [pc, #60]	; (8017640 <pbuf_alloc_reference+0x64>)
 8017602:	f008 fa83 	bl	801fb0c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8017606:	200b      	movs	r0, #11
 8017608:	f7ff fa6a 	bl	8016ae0 <memp_malloc>
 801760c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d101      	bne.n	8017618 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8017614:	2300      	movs	r3, #0
 8017616:	e00b      	b.n	8017630 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8017618:	8879      	ldrh	r1, [r7, #2]
 801761a:	887a      	ldrh	r2, [r7, #2]
 801761c:	2300      	movs	r3, #0
 801761e:	9301      	str	r3, [sp, #4]
 8017620:	883b      	ldrh	r3, [r7, #0]
 8017622:	9300      	str	r3, [sp, #0]
 8017624:	460b      	mov	r3, r1
 8017626:	6879      	ldr	r1, [r7, #4]
 8017628:	68f8      	ldr	r0, [r7, #12]
 801762a:	f7ff feb5 	bl	8017398 <pbuf_init_alloced_pbuf>
  return p;
 801762e:	68fb      	ldr	r3, [r7, #12]
}
 8017630:	4618      	mov	r0, r3
 8017632:	3710      	adds	r7, #16
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}
 8017638:	080223a8 	.word	0x080223a8
 801763c:	080224f0 	.word	0x080224f0
 8017640:	0802244c 	.word	0x0802244c

08017644 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b088      	sub	sp, #32
 8017648:	af02      	add	r7, sp, #8
 801764a:	607b      	str	r3, [r7, #4]
 801764c:	4603      	mov	r3, r0
 801764e:	73fb      	strb	r3, [r7, #15]
 8017650:	460b      	mov	r3, r1
 8017652:	81bb      	strh	r3, [r7, #12]
 8017654:	4613      	mov	r3, r2
 8017656:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8017658:	7bfb      	ldrb	r3, [r7, #15]
 801765a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801765c:	8a7b      	ldrh	r3, [r7, #18]
 801765e:	3303      	adds	r3, #3
 8017660:	f023 0203 	bic.w	r2, r3, #3
 8017664:	89bb      	ldrh	r3, [r7, #12]
 8017666:	441a      	add	r2, r3
 8017668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801766a:	429a      	cmp	r2, r3
 801766c:	d901      	bls.n	8017672 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801766e:	2300      	movs	r3, #0
 8017670:	e018      	b.n	80176a4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8017672:	6a3b      	ldr	r3, [r7, #32]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d007      	beq.n	8017688 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8017678:	8a7b      	ldrh	r3, [r7, #18]
 801767a:	3303      	adds	r3, #3
 801767c:	f023 0303 	bic.w	r3, r3, #3
 8017680:	6a3a      	ldr	r2, [r7, #32]
 8017682:	4413      	add	r3, r2
 8017684:	617b      	str	r3, [r7, #20]
 8017686:	e001      	b.n	801768c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8017688:	2300      	movs	r3, #0
 801768a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801768c:	6878      	ldr	r0, [r7, #4]
 801768e:	89b9      	ldrh	r1, [r7, #12]
 8017690:	89ba      	ldrh	r2, [r7, #12]
 8017692:	2302      	movs	r3, #2
 8017694:	9301      	str	r3, [sp, #4]
 8017696:	897b      	ldrh	r3, [r7, #10]
 8017698:	9300      	str	r3, [sp, #0]
 801769a:	460b      	mov	r3, r1
 801769c:	6979      	ldr	r1, [r7, #20]
 801769e:	f7ff fe7b 	bl	8017398 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80176a2:	687b      	ldr	r3, [r7, #4]
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3718      	adds	r7, #24
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
 80176b4:	460b      	mov	r3, r1
 80176b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d106      	bne.n	80176cc <pbuf_realloc+0x20>
 80176be:	4b39      	ldr	r3, [pc, #228]	; (80177a4 <pbuf_realloc+0xf8>)
 80176c0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80176c4:	4938      	ldr	r1, [pc, #224]	; (80177a8 <pbuf_realloc+0xfc>)
 80176c6:	4839      	ldr	r0, [pc, #228]	; (80177ac <pbuf_realloc+0x100>)
 80176c8:	f008 fa20 	bl	801fb0c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	891b      	ldrh	r3, [r3, #8]
 80176d0:	887a      	ldrh	r2, [r7, #2]
 80176d2:	429a      	cmp	r2, r3
 80176d4:	d261      	bcs.n	801779a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	891a      	ldrh	r2, [r3, #8]
 80176da:	887b      	ldrh	r3, [r7, #2]
 80176dc:	1ad3      	subs	r3, r2, r3
 80176de:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80176e0:	887b      	ldrh	r3, [r7, #2]
 80176e2:	817b      	strh	r3, [r7, #10]
  q = p;
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80176e8:	e018      	b.n	801771c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	895b      	ldrh	r3, [r3, #10]
 80176ee:	897a      	ldrh	r2, [r7, #10]
 80176f0:	1ad3      	subs	r3, r2, r3
 80176f2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	891a      	ldrh	r2, [r3, #8]
 80176f8:	893b      	ldrh	r3, [r7, #8]
 80176fa:	1ad3      	subs	r3, r2, r3
 80176fc:	b29a      	uxth	r2, r3
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d106      	bne.n	801771c <pbuf_realloc+0x70>
 801770e:	4b25      	ldr	r3, [pc, #148]	; (80177a4 <pbuf_realloc+0xf8>)
 8017710:	f240 12af 	movw	r2, #431	; 0x1af
 8017714:	4926      	ldr	r1, [pc, #152]	; (80177b0 <pbuf_realloc+0x104>)
 8017716:	4825      	ldr	r0, [pc, #148]	; (80177ac <pbuf_realloc+0x100>)
 8017718:	f008 f9f8 	bl	801fb0c <iprintf>
  while (rem_len > q->len) {
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	895b      	ldrh	r3, [r3, #10]
 8017720:	897a      	ldrh	r2, [r7, #10]
 8017722:	429a      	cmp	r2, r3
 8017724:	d8e1      	bhi.n	80176ea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	7b1b      	ldrb	r3, [r3, #12]
 801772a:	f003 030f 	and.w	r3, r3, #15
 801772e:	2b00      	cmp	r3, #0
 8017730:	d11f      	bne.n	8017772 <pbuf_realloc+0xc6>
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	895b      	ldrh	r3, [r3, #10]
 8017736:	897a      	ldrh	r2, [r7, #10]
 8017738:	429a      	cmp	r2, r3
 801773a:	d01a      	beq.n	8017772 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	7b5b      	ldrb	r3, [r3, #13]
 8017740:	f003 0302 	and.w	r3, r3, #2
 8017744:	2b00      	cmp	r3, #0
 8017746:	d114      	bne.n	8017772 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	685a      	ldr	r2, [r3, #4]
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	1ad2      	subs	r2, r2, r3
 8017750:	897b      	ldrh	r3, [r7, #10]
 8017752:	4413      	add	r3, r2
 8017754:	4619      	mov	r1, r3
 8017756:	68f8      	ldr	r0, [r7, #12]
 8017758:	f7fe ff24 	bl	80165a4 <mem_trim>
 801775c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d106      	bne.n	8017772 <pbuf_realloc+0xc6>
 8017764:	4b0f      	ldr	r3, [pc, #60]	; (80177a4 <pbuf_realloc+0xf8>)
 8017766:	f240 12bd 	movw	r2, #445	; 0x1bd
 801776a:	4912      	ldr	r1, [pc, #72]	; (80177b4 <pbuf_realloc+0x108>)
 801776c:	480f      	ldr	r0, [pc, #60]	; (80177ac <pbuf_realloc+0x100>)
 801776e:	f008 f9cd 	bl	801fb0c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	897a      	ldrh	r2, [r7, #10]
 8017776:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	895a      	ldrh	r2, [r3, #10]
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d004      	beq.n	8017792 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	4618      	mov	r0, r3
 801778e:	f000 f911 	bl	80179b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	2200      	movs	r2, #0
 8017796:	601a      	str	r2, [r3, #0]
 8017798:	e000      	b.n	801779c <pbuf_realloc+0xf0>
    return;
 801779a:	bf00      	nop

}
 801779c:	3710      	adds	r7, #16
 801779e:	46bd      	mov	sp, r7
 80177a0:	bd80      	pop	{r7, pc}
 80177a2:	bf00      	nop
 80177a4:	080223a8 	.word	0x080223a8
 80177a8:	08022504 	.word	0x08022504
 80177ac:	0802244c 	.word	0x0802244c
 80177b0:	0802251c 	.word	0x0802251c
 80177b4:	08022534 	.word	0x08022534

080177b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b086      	sub	sp, #24
 80177bc:	af00      	add	r7, sp, #0
 80177be:	60f8      	str	r0, [r7, #12]
 80177c0:	60b9      	str	r1, [r7, #8]
 80177c2:	4613      	mov	r3, r2
 80177c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d106      	bne.n	80177da <pbuf_add_header_impl+0x22>
 80177cc:	4b2b      	ldr	r3, [pc, #172]	; (801787c <pbuf_add_header_impl+0xc4>)
 80177ce:	f240 12df 	movw	r2, #479	; 0x1df
 80177d2:	492b      	ldr	r1, [pc, #172]	; (8017880 <pbuf_add_header_impl+0xc8>)
 80177d4:	482b      	ldr	r0, [pc, #172]	; (8017884 <pbuf_add_header_impl+0xcc>)
 80177d6:	f008 f999 	bl	801fb0c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d003      	beq.n	80177e8 <pbuf_add_header_impl+0x30>
 80177e0:	68bb      	ldr	r3, [r7, #8]
 80177e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80177e6:	d301      	bcc.n	80177ec <pbuf_add_header_impl+0x34>
    return 1;
 80177e8:	2301      	movs	r3, #1
 80177ea:	e043      	b.n	8017874 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80177ec:	68bb      	ldr	r3, [r7, #8]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d101      	bne.n	80177f6 <pbuf_add_header_impl+0x3e>
    return 0;
 80177f2:	2300      	movs	r3, #0
 80177f4:	e03e      	b.n	8017874 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80177f6:	68bb      	ldr	r3, [r7, #8]
 80177f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	891a      	ldrh	r2, [r3, #8]
 80177fe:	8a7b      	ldrh	r3, [r7, #18]
 8017800:	4413      	add	r3, r2
 8017802:	b29b      	uxth	r3, r3
 8017804:	8a7a      	ldrh	r2, [r7, #18]
 8017806:	429a      	cmp	r2, r3
 8017808:	d901      	bls.n	801780e <pbuf_add_header_impl+0x56>
    return 1;
 801780a:	2301      	movs	r3, #1
 801780c:	e032      	b.n	8017874 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	7b1b      	ldrb	r3, [r3, #12]
 8017812:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8017814:	8a3b      	ldrh	r3, [r7, #16]
 8017816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801781a:	2b00      	cmp	r3, #0
 801781c:	d00c      	beq.n	8017838 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	685a      	ldr	r2, [r3, #4]
 8017822:	68bb      	ldr	r3, [r7, #8]
 8017824:	425b      	negs	r3, r3
 8017826:	4413      	add	r3, r2
 8017828:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	3310      	adds	r3, #16
 801782e:	697a      	ldr	r2, [r7, #20]
 8017830:	429a      	cmp	r2, r3
 8017832:	d20d      	bcs.n	8017850 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8017834:	2301      	movs	r3, #1
 8017836:	e01d      	b.n	8017874 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8017838:	79fb      	ldrb	r3, [r7, #7]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d006      	beq.n	801784c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	685a      	ldr	r2, [r3, #4]
 8017842:	68bb      	ldr	r3, [r7, #8]
 8017844:	425b      	negs	r3, r3
 8017846:	4413      	add	r3, r2
 8017848:	617b      	str	r3, [r7, #20]
 801784a:	e001      	b.n	8017850 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801784c:	2301      	movs	r3, #1
 801784e:	e011      	b.n	8017874 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	697a      	ldr	r2, [r7, #20]
 8017854:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	895a      	ldrh	r2, [r3, #10]
 801785a:	8a7b      	ldrh	r3, [r7, #18]
 801785c:	4413      	add	r3, r2
 801785e:	b29a      	uxth	r2, r3
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	891a      	ldrh	r2, [r3, #8]
 8017868:	8a7b      	ldrh	r3, [r7, #18]
 801786a:	4413      	add	r3, r2
 801786c:	b29a      	uxth	r2, r3
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	811a      	strh	r2, [r3, #8]


  return 0;
 8017872:	2300      	movs	r3, #0
}
 8017874:	4618      	mov	r0, r3
 8017876:	3718      	adds	r7, #24
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}
 801787c:	080223a8 	.word	0x080223a8
 8017880:	08022550 	.word	0x08022550
 8017884:	0802244c 	.word	0x0802244c

08017888 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b082      	sub	sp, #8
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
 8017890:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8017892:	2200      	movs	r2, #0
 8017894:	6839      	ldr	r1, [r7, #0]
 8017896:	6878      	ldr	r0, [r7, #4]
 8017898:	f7ff ff8e 	bl	80177b8 <pbuf_add_header_impl>
 801789c:	4603      	mov	r3, r0
}
 801789e:	4618      	mov	r0, r3
 80178a0:	3708      	adds	r7, #8
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}
	...

080178a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b084      	sub	sp, #16
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
 80178b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d106      	bne.n	80178c6 <pbuf_remove_header+0x1e>
 80178b8:	4b20      	ldr	r3, [pc, #128]	; (801793c <pbuf_remove_header+0x94>)
 80178ba:	f240 224b 	movw	r2, #587	; 0x24b
 80178be:	4920      	ldr	r1, [pc, #128]	; (8017940 <pbuf_remove_header+0x98>)
 80178c0:	4820      	ldr	r0, [pc, #128]	; (8017944 <pbuf_remove_header+0x9c>)
 80178c2:	f008 f923 	bl	801fb0c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d003      	beq.n	80178d4 <pbuf_remove_header+0x2c>
 80178cc:	683b      	ldr	r3, [r7, #0]
 80178ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80178d2:	d301      	bcc.n	80178d8 <pbuf_remove_header+0x30>
    return 1;
 80178d4:	2301      	movs	r3, #1
 80178d6:	e02c      	b.n	8017932 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80178d8:	683b      	ldr	r3, [r7, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d101      	bne.n	80178e2 <pbuf_remove_header+0x3a>
    return 0;
 80178de:	2300      	movs	r3, #0
 80178e0:	e027      	b.n	8017932 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80178e2:	683b      	ldr	r3, [r7, #0]
 80178e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	895b      	ldrh	r3, [r3, #10]
 80178ea:	89fa      	ldrh	r2, [r7, #14]
 80178ec:	429a      	cmp	r2, r3
 80178ee:	d908      	bls.n	8017902 <pbuf_remove_header+0x5a>
 80178f0:	4b12      	ldr	r3, [pc, #72]	; (801793c <pbuf_remove_header+0x94>)
 80178f2:	f240 2255 	movw	r2, #597	; 0x255
 80178f6:	4914      	ldr	r1, [pc, #80]	; (8017948 <pbuf_remove_header+0xa0>)
 80178f8:	4812      	ldr	r0, [pc, #72]	; (8017944 <pbuf_remove_header+0x9c>)
 80178fa:	f008 f907 	bl	801fb0c <iprintf>
 80178fe:	2301      	movs	r3, #1
 8017900:	e017      	b.n	8017932 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	685b      	ldr	r3, [r3, #4]
 8017906:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	685a      	ldr	r2, [r3, #4]
 801790c:	683b      	ldr	r3, [r7, #0]
 801790e:	441a      	add	r2, r3
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	895a      	ldrh	r2, [r3, #10]
 8017918:	89fb      	ldrh	r3, [r7, #14]
 801791a:	1ad3      	subs	r3, r2, r3
 801791c:	b29a      	uxth	r2, r3
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	891a      	ldrh	r2, [r3, #8]
 8017926:	89fb      	ldrh	r3, [r7, #14]
 8017928:	1ad3      	subs	r3, r2, r3
 801792a:	b29a      	uxth	r2, r3
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8017930:	2300      	movs	r3, #0
}
 8017932:	4618      	mov	r0, r3
 8017934:	3710      	adds	r7, #16
 8017936:	46bd      	mov	sp, r7
 8017938:	bd80      	pop	{r7, pc}
 801793a:	bf00      	nop
 801793c:	080223a8 	.word	0x080223a8
 8017940:	08022550 	.word	0x08022550
 8017944:	0802244c 	.word	0x0802244c
 8017948:	0802255c 	.word	0x0802255c

0801794c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b082      	sub	sp, #8
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	460b      	mov	r3, r1
 8017956:	807b      	strh	r3, [r7, #2]
 8017958:	4613      	mov	r3, r2
 801795a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801795c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017960:	2b00      	cmp	r3, #0
 8017962:	da08      	bge.n	8017976 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8017964:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017968:	425b      	negs	r3, r3
 801796a:	4619      	mov	r1, r3
 801796c:	6878      	ldr	r0, [r7, #4]
 801796e:	f7ff ff9b 	bl	80178a8 <pbuf_remove_header>
 8017972:	4603      	mov	r3, r0
 8017974:	e007      	b.n	8017986 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8017976:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801797a:	787a      	ldrb	r2, [r7, #1]
 801797c:	4619      	mov	r1, r3
 801797e:	6878      	ldr	r0, [r7, #4]
 8017980:	f7ff ff1a 	bl	80177b8 <pbuf_add_header_impl>
 8017984:	4603      	mov	r3, r0
  }
}
 8017986:	4618      	mov	r0, r3
 8017988:	3708      	adds	r7, #8
 801798a:	46bd      	mov	sp, r7
 801798c:	bd80      	pop	{r7, pc}

0801798e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801798e:	b580      	push	{r7, lr}
 8017990:	b082      	sub	sp, #8
 8017992:	af00      	add	r7, sp, #0
 8017994:	6078      	str	r0, [r7, #4]
 8017996:	460b      	mov	r3, r1
 8017998:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801799a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801799e:	2201      	movs	r2, #1
 80179a0:	4619      	mov	r1, r3
 80179a2:	6878      	ldr	r0, [r7, #4]
 80179a4:	f7ff ffd2 	bl	801794c <pbuf_header_impl>
 80179a8:	4603      	mov	r3, r0
}
 80179aa:	4618      	mov	r0, r3
 80179ac:	3708      	adds	r7, #8
 80179ae:	46bd      	mov	sp, r7
 80179b0:	bd80      	pop	{r7, pc}
	...

080179b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b088      	sub	sp, #32
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d10b      	bne.n	80179da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d106      	bne.n	80179d6 <pbuf_free+0x22>
 80179c8:	4b3b      	ldr	r3, [pc, #236]	; (8017ab8 <pbuf_free+0x104>)
 80179ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80179ce:	493b      	ldr	r1, [pc, #236]	; (8017abc <pbuf_free+0x108>)
 80179d0:	483b      	ldr	r0, [pc, #236]	; (8017ac0 <pbuf_free+0x10c>)
 80179d2:	f008 f89b 	bl	801fb0c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80179d6:	2300      	movs	r3, #0
 80179d8:	e069      	b.n	8017aae <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80179da:	2300      	movs	r3, #0
 80179dc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80179de:	e062      	b.n	8017aa6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80179e0:	f000 fc46 	bl	8018270 <sys_arch_protect>
 80179e4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	7b9b      	ldrb	r3, [r3, #14]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d106      	bne.n	80179fc <pbuf_free+0x48>
 80179ee:	4b32      	ldr	r3, [pc, #200]	; (8017ab8 <pbuf_free+0x104>)
 80179f0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80179f4:	4933      	ldr	r1, [pc, #204]	; (8017ac4 <pbuf_free+0x110>)
 80179f6:	4832      	ldr	r0, [pc, #200]	; (8017ac0 <pbuf_free+0x10c>)
 80179f8:	f008 f888 	bl	801fb0c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	7b9b      	ldrb	r3, [r3, #14]
 8017a00:	3b01      	subs	r3, #1
 8017a02:	b2da      	uxtb	r2, r3
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	739a      	strb	r2, [r3, #14]
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	7b9b      	ldrb	r3, [r3, #14]
 8017a0c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8017a0e:	69b8      	ldr	r0, [r7, #24]
 8017a10:	f000 fc3c 	bl	801828c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8017a14:	7dfb      	ldrb	r3, [r7, #23]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d143      	bne.n	8017aa2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	7b1b      	ldrb	r3, [r3, #12]
 8017a24:	f003 030f 	and.w	r3, r3, #15
 8017a28:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	7b5b      	ldrb	r3, [r3, #13]
 8017a2e:	f003 0302 	and.w	r3, r3, #2
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d011      	beq.n	8017a5a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8017a3a:	68bb      	ldr	r3, [r7, #8]
 8017a3c:	691b      	ldr	r3, [r3, #16]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d106      	bne.n	8017a50 <pbuf_free+0x9c>
 8017a42:	4b1d      	ldr	r3, [pc, #116]	; (8017ab8 <pbuf_free+0x104>)
 8017a44:	f240 22ff 	movw	r2, #767	; 0x2ff
 8017a48:	491f      	ldr	r1, [pc, #124]	; (8017ac8 <pbuf_free+0x114>)
 8017a4a:	481d      	ldr	r0, [pc, #116]	; (8017ac0 <pbuf_free+0x10c>)
 8017a4c:	f008 f85e 	bl	801fb0c <iprintf>
        pc->custom_free_function(p);
 8017a50:	68bb      	ldr	r3, [r7, #8]
 8017a52:	691b      	ldr	r3, [r3, #16]
 8017a54:	6878      	ldr	r0, [r7, #4]
 8017a56:	4798      	blx	r3
 8017a58:	e01d      	b.n	8017a96 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8017a5a:	7bfb      	ldrb	r3, [r7, #15]
 8017a5c:	2b02      	cmp	r3, #2
 8017a5e:	d104      	bne.n	8017a6a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8017a60:	6879      	ldr	r1, [r7, #4]
 8017a62:	200c      	movs	r0, #12
 8017a64:	f7ff f8b2 	bl	8016bcc <memp_free>
 8017a68:	e015      	b.n	8017a96 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8017a6a:	7bfb      	ldrb	r3, [r7, #15]
 8017a6c:	2b01      	cmp	r3, #1
 8017a6e:	d104      	bne.n	8017a7a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8017a70:	6879      	ldr	r1, [r7, #4]
 8017a72:	200b      	movs	r0, #11
 8017a74:	f7ff f8aa 	bl	8016bcc <memp_free>
 8017a78:	e00d      	b.n	8017a96 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8017a7a:	7bfb      	ldrb	r3, [r7, #15]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d103      	bne.n	8017a88 <pbuf_free+0xd4>
          mem_free(p);
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f7fe fcff 	bl	8016484 <mem_free>
 8017a86:	e006      	b.n	8017a96 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8017a88:	4b0b      	ldr	r3, [pc, #44]	; (8017ab8 <pbuf_free+0x104>)
 8017a8a:	f240 320f 	movw	r2, #783	; 0x30f
 8017a8e:	490f      	ldr	r1, [pc, #60]	; (8017acc <pbuf_free+0x118>)
 8017a90:	480b      	ldr	r0, [pc, #44]	; (8017ac0 <pbuf_free+0x10c>)
 8017a92:	f008 f83b 	bl	801fb0c <iprintf>
        }
      }
      count++;
 8017a96:	7ffb      	ldrb	r3, [r7, #31]
 8017a98:	3301      	adds	r3, #1
 8017a9a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8017a9c:	693b      	ldr	r3, [r7, #16]
 8017a9e:	607b      	str	r3, [r7, #4]
 8017aa0:	e001      	b.n	8017aa6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d199      	bne.n	80179e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8017aac:	7ffb      	ldrb	r3, [r7, #31]
}
 8017aae:	4618      	mov	r0, r3
 8017ab0:	3720      	adds	r7, #32
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bd80      	pop	{r7, pc}
 8017ab6:	bf00      	nop
 8017ab8:	080223a8 	.word	0x080223a8
 8017abc:	08022550 	.word	0x08022550
 8017ac0:	0802244c 	.word	0x0802244c
 8017ac4:	0802257c 	.word	0x0802257c
 8017ac8:	08022594 	.word	0x08022594
 8017acc:	080225b8 	.word	0x080225b8

08017ad0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8017ad0:	b480      	push	{r7}
 8017ad2:	b085      	sub	sp, #20
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8017ad8:	2300      	movs	r3, #0
 8017ada:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8017adc:	e005      	b.n	8017aea <pbuf_clen+0x1a>
    ++len;
 8017ade:	89fb      	ldrh	r3, [r7, #14]
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d1f6      	bne.n	8017ade <pbuf_clen+0xe>
  }
  return len;
 8017af0:	89fb      	ldrh	r3, [r7, #14]
}
 8017af2:	4618      	mov	r0, r3
 8017af4:	3714      	adds	r7, #20
 8017af6:	46bd      	mov	sp, r7
 8017af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afc:	4770      	bx	lr
	...

08017b00 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b084      	sub	sp, #16
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d016      	beq.n	8017b3c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8017b0e:	f000 fbaf 	bl	8018270 <sys_arch_protect>
 8017b12:	60f8      	str	r0, [r7, #12]
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	7b9b      	ldrb	r3, [r3, #14]
 8017b18:	3301      	adds	r3, #1
 8017b1a:	b2da      	uxtb	r2, r3
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	739a      	strb	r2, [r3, #14]
 8017b20:	68f8      	ldr	r0, [r7, #12]
 8017b22:	f000 fbb3 	bl	801828c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	7b9b      	ldrb	r3, [r3, #14]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d106      	bne.n	8017b3c <pbuf_ref+0x3c>
 8017b2e:	4b05      	ldr	r3, [pc, #20]	; (8017b44 <pbuf_ref+0x44>)
 8017b30:	f240 3242 	movw	r2, #834	; 0x342
 8017b34:	4904      	ldr	r1, [pc, #16]	; (8017b48 <pbuf_ref+0x48>)
 8017b36:	4805      	ldr	r0, [pc, #20]	; (8017b4c <pbuf_ref+0x4c>)
 8017b38:	f007 ffe8 	bl	801fb0c <iprintf>
  }
}
 8017b3c:	bf00      	nop
 8017b3e:	3710      	adds	r7, #16
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd80      	pop	{r7, pc}
 8017b44:	080223a8 	.word	0x080223a8
 8017b48:	080225cc 	.word	0x080225cc
 8017b4c:	0802244c 	.word	0x0802244c

08017b50 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b084      	sub	sp, #16
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
 8017b58:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d002      	beq.n	8017b66 <pbuf_cat+0x16>
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d107      	bne.n	8017b76 <pbuf_cat+0x26>
 8017b66:	4b20      	ldr	r3, [pc, #128]	; (8017be8 <pbuf_cat+0x98>)
 8017b68:	f240 3259 	movw	r2, #857	; 0x359
 8017b6c:	491f      	ldr	r1, [pc, #124]	; (8017bec <pbuf_cat+0x9c>)
 8017b6e:	4820      	ldr	r0, [pc, #128]	; (8017bf0 <pbuf_cat+0xa0>)
 8017b70:	f007 ffcc 	bl	801fb0c <iprintf>
 8017b74:	e034      	b.n	8017be0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	60fb      	str	r3, [r7, #12]
 8017b7a:	e00a      	b.n	8017b92 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	891a      	ldrh	r2, [r3, #8]
 8017b80:	683b      	ldr	r3, [r7, #0]
 8017b82:	891b      	ldrh	r3, [r3, #8]
 8017b84:	4413      	add	r3, r2
 8017b86:	b29a      	uxth	r2, r3
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	60fb      	str	r3, [r7, #12]
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d1f0      	bne.n	8017b7c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	891a      	ldrh	r2, [r3, #8]
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	895b      	ldrh	r3, [r3, #10]
 8017ba2:	429a      	cmp	r2, r3
 8017ba4:	d006      	beq.n	8017bb4 <pbuf_cat+0x64>
 8017ba6:	4b10      	ldr	r3, [pc, #64]	; (8017be8 <pbuf_cat+0x98>)
 8017ba8:	f240 3262 	movw	r2, #866	; 0x362
 8017bac:	4911      	ldr	r1, [pc, #68]	; (8017bf4 <pbuf_cat+0xa4>)
 8017bae:	4810      	ldr	r0, [pc, #64]	; (8017bf0 <pbuf_cat+0xa0>)
 8017bb0:	f007 ffac 	bl	801fb0c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d006      	beq.n	8017bca <pbuf_cat+0x7a>
 8017bbc:	4b0a      	ldr	r3, [pc, #40]	; (8017be8 <pbuf_cat+0x98>)
 8017bbe:	f240 3263 	movw	r2, #867	; 0x363
 8017bc2:	490d      	ldr	r1, [pc, #52]	; (8017bf8 <pbuf_cat+0xa8>)
 8017bc4:	480a      	ldr	r0, [pc, #40]	; (8017bf0 <pbuf_cat+0xa0>)
 8017bc6:	f007 ffa1 	bl	801fb0c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	891a      	ldrh	r2, [r3, #8]
 8017bce:	683b      	ldr	r3, [r7, #0]
 8017bd0:	891b      	ldrh	r3, [r3, #8]
 8017bd2:	4413      	add	r3, r2
 8017bd4:	b29a      	uxth	r2, r3
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	683a      	ldr	r2, [r7, #0]
 8017bde:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8017be0:	3710      	adds	r7, #16
 8017be2:	46bd      	mov	sp, r7
 8017be4:	bd80      	pop	{r7, pc}
 8017be6:	bf00      	nop
 8017be8:	080223a8 	.word	0x080223a8
 8017bec:	080225e0 	.word	0x080225e0
 8017bf0:	0802244c 	.word	0x0802244c
 8017bf4:	08022618 	.word	0x08022618
 8017bf8:	08022648 	.word	0x08022648

08017bfc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8017bfc:	b580      	push	{r7, lr}
 8017bfe:	b086      	sub	sp, #24
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	6078      	str	r0, [r7, #4]
 8017c04:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8017c06:	2300      	movs	r3, #0
 8017c08:	617b      	str	r3, [r7, #20]
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d008      	beq.n	8017c26 <pbuf_copy+0x2a>
 8017c14:	683b      	ldr	r3, [r7, #0]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d005      	beq.n	8017c26 <pbuf_copy+0x2a>
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	891a      	ldrh	r2, [r3, #8]
 8017c1e:	683b      	ldr	r3, [r7, #0]
 8017c20:	891b      	ldrh	r3, [r3, #8]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	d209      	bcs.n	8017c3a <pbuf_copy+0x3e>
 8017c26:	4b57      	ldr	r3, [pc, #348]	; (8017d84 <pbuf_copy+0x188>)
 8017c28:	f240 32c9 	movw	r2, #969	; 0x3c9
 8017c2c:	4956      	ldr	r1, [pc, #344]	; (8017d88 <pbuf_copy+0x18c>)
 8017c2e:	4857      	ldr	r0, [pc, #348]	; (8017d8c <pbuf_copy+0x190>)
 8017c30:	f007 ff6c 	bl	801fb0c <iprintf>
 8017c34:	f06f 030f 	mvn.w	r3, #15
 8017c38:	e09f      	b.n	8017d7a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	895b      	ldrh	r3, [r3, #10]
 8017c3e:	461a      	mov	r2, r3
 8017c40:	697b      	ldr	r3, [r7, #20]
 8017c42:	1ad2      	subs	r2, r2, r3
 8017c44:	683b      	ldr	r3, [r7, #0]
 8017c46:	895b      	ldrh	r3, [r3, #10]
 8017c48:	4619      	mov	r1, r3
 8017c4a:	693b      	ldr	r3, [r7, #16]
 8017c4c:	1acb      	subs	r3, r1, r3
 8017c4e:	429a      	cmp	r2, r3
 8017c50:	d306      	bcc.n	8017c60 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	895b      	ldrh	r3, [r3, #10]
 8017c56:	461a      	mov	r2, r3
 8017c58:	693b      	ldr	r3, [r7, #16]
 8017c5a:	1ad3      	subs	r3, r2, r3
 8017c5c:	60fb      	str	r3, [r7, #12]
 8017c5e:	e005      	b.n	8017c6c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	895b      	ldrh	r3, [r3, #10]
 8017c64:	461a      	mov	r2, r3
 8017c66:	697b      	ldr	r3, [r7, #20]
 8017c68:	1ad3      	subs	r3, r2, r3
 8017c6a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	685a      	ldr	r2, [r3, #4]
 8017c70:	697b      	ldr	r3, [r7, #20]
 8017c72:	18d0      	adds	r0, r2, r3
 8017c74:	683b      	ldr	r3, [r7, #0]
 8017c76:	685a      	ldr	r2, [r3, #4]
 8017c78:	693b      	ldr	r3, [r7, #16]
 8017c7a:	4413      	add	r3, r2
 8017c7c:	68fa      	ldr	r2, [r7, #12]
 8017c7e:	4619      	mov	r1, r3
 8017c80:	f007 fb46 	bl	801f310 <memcpy>
    offset_to += len;
 8017c84:	697a      	ldr	r2, [r7, #20]
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	4413      	add	r3, r2
 8017c8a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8017c8c:	693a      	ldr	r2, [r7, #16]
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	4413      	add	r3, r2
 8017c92:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	895b      	ldrh	r3, [r3, #10]
 8017c98:	461a      	mov	r2, r3
 8017c9a:	697b      	ldr	r3, [r7, #20]
 8017c9c:	4293      	cmp	r3, r2
 8017c9e:	d906      	bls.n	8017cae <pbuf_copy+0xb2>
 8017ca0:	4b38      	ldr	r3, [pc, #224]	; (8017d84 <pbuf_copy+0x188>)
 8017ca2:	f240 32d9 	movw	r2, #985	; 0x3d9
 8017ca6:	493a      	ldr	r1, [pc, #232]	; (8017d90 <pbuf_copy+0x194>)
 8017ca8:	4838      	ldr	r0, [pc, #224]	; (8017d8c <pbuf_copy+0x190>)
 8017caa:	f007 ff2f 	bl	801fb0c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8017cae:	683b      	ldr	r3, [r7, #0]
 8017cb0:	895b      	ldrh	r3, [r3, #10]
 8017cb2:	461a      	mov	r2, r3
 8017cb4:	693b      	ldr	r3, [r7, #16]
 8017cb6:	4293      	cmp	r3, r2
 8017cb8:	d906      	bls.n	8017cc8 <pbuf_copy+0xcc>
 8017cba:	4b32      	ldr	r3, [pc, #200]	; (8017d84 <pbuf_copy+0x188>)
 8017cbc:	f240 32da 	movw	r2, #986	; 0x3da
 8017cc0:	4934      	ldr	r1, [pc, #208]	; (8017d94 <pbuf_copy+0x198>)
 8017cc2:	4832      	ldr	r0, [pc, #200]	; (8017d8c <pbuf_copy+0x190>)
 8017cc4:	f007 ff22 	bl	801fb0c <iprintf>
    if (offset_from >= p_from->len) {
 8017cc8:	683b      	ldr	r3, [r7, #0]
 8017cca:	895b      	ldrh	r3, [r3, #10]
 8017ccc:	461a      	mov	r2, r3
 8017cce:	693b      	ldr	r3, [r7, #16]
 8017cd0:	4293      	cmp	r3, r2
 8017cd2:	d304      	bcc.n	8017cde <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8017cd8:	683b      	ldr	r3, [r7, #0]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	895b      	ldrh	r3, [r3, #10]
 8017ce2:	461a      	mov	r2, r3
 8017ce4:	697b      	ldr	r3, [r7, #20]
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	d114      	bne.n	8017d14 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8017cea:	2300      	movs	r3, #0
 8017cec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d10c      	bne.n	8017d14 <pbuf_copy+0x118>
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d009      	beq.n	8017d14 <pbuf_copy+0x118>
 8017d00:	4b20      	ldr	r3, [pc, #128]	; (8017d84 <pbuf_copy+0x188>)
 8017d02:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8017d06:	4924      	ldr	r1, [pc, #144]	; (8017d98 <pbuf_copy+0x19c>)
 8017d08:	4820      	ldr	r0, [pc, #128]	; (8017d8c <pbuf_copy+0x190>)
 8017d0a:	f007 feff 	bl	801fb0c <iprintf>
 8017d0e:	f06f 030f 	mvn.w	r3, #15
 8017d12:	e032      	b.n	8017d7a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8017d14:	683b      	ldr	r3, [r7, #0]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d013      	beq.n	8017d42 <pbuf_copy+0x146>
 8017d1a:	683b      	ldr	r3, [r7, #0]
 8017d1c:	895a      	ldrh	r2, [r3, #10]
 8017d1e:	683b      	ldr	r3, [r7, #0]
 8017d20:	891b      	ldrh	r3, [r3, #8]
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d10d      	bne.n	8017d42 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017d26:	683b      	ldr	r3, [r7, #0]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d009      	beq.n	8017d42 <pbuf_copy+0x146>
 8017d2e:	4b15      	ldr	r3, [pc, #84]	; (8017d84 <pbuf_copy+0x188>)
 8017d30:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8017d34:	4919      	ldr	r1, [pc, #100]	; (8017d9c <pbuf_copy+0x1a0>)
 8017d36:	4815      	ldr	r0, [pc, #84]	; (8017d8c <pbuf_copy+0x190>)
 8017d38:	f007 fee8 	bl	801fb0c <iprintf>
 8017d3c:	f06f 0305 	mvn.w	r3, #5
 8017d40:	e01b      	b.n	8017d7a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d013      	beq.n	8017d70 <pbuf_copy+0x174>
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	895a      	ldrh	r2, [r3, #10]
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	891b      	ldrh	r3, [r3, #8]
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d10d      	bne.n	8017d70 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d009      	beq.n	8017d70 <pbuf_copy+0x174>
 8017d5c:	4b09      	ldr	r3, [pc, #36]	; (8017d84 <pbuf_copy+0x188>)
 8017d5e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8017d62:	490e      	ldr	r1, [pc, #56]	; (8017d9c <pbuf_copy+0x1a0>)
 8017d64:	4809      	ldr	r0, [pc, #36]	; (8017d8c <pbuf_copy+0x190>)
 8017d66:	f007 fed1 	bl	801fb0c <iprintf>
 8017d6a:	f06f 0305 	mvn.w	r3, #5
 8017d6e:	e004      	b.n	8017d7a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8017d70:	683b      	ldr	r3, [r7, #0]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	f47f af61 	bne.w	8017c3a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8017d78:	2300      	movs	r3, #0
}
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	3718      	adds	r7, #24
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	bd80      	pop	{r7, pc}
 8017d82:	bf00      	nop
 8017d84:	080223a8 	.word	0x080223a8
 8017d88:	08022694 	.word	0x08022694
 8017d8c:	0802244c 	.word	0x0802244c
 8017d90:	080226c4 	.word	0x080226c4
 8017d94:	080226dc 	.word	0x080226dc
 8017d98:	080226f8 	.word	0x080226f8
 8017d9c:	08022708 	.word	0x08022708

08017da0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b088      	sub	sp, #32
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	60f8      	str	r0, [r7, #12]
 8017da8:	60b9      	str	r1, [r7, #8]
 8017daa:	4611      	mov	r1, r2
 8017dac:	461a      	mov	r2, r3
 8017dae:	460b      	mov	r3, r1
 8017db0:	80fb      	strh	r3, [r7, #6]
 8017db2:	4613      	mov	r3, r2
 8017db4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8017db6:	2300      	movs	r3, #0
 8017db8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8017dba:	2300      	movs	r3, #0
 8017dbc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d108      	bne.n	8017dd6 <pbuf_copy_partial+0x36>
 8017dc4:	4b2b      	ldr	r3, [pc, #172]	; (8017e74 <pbuf_copy_partial+0xd4>)
 8017dc6:	f240 420a 	movw	r2, #1034	; 0x40a
 8017dca:	492b      	ldr	r1, [pc, #172]	; (8017e78 <pbuf_copy_partial+0xd8>)
 8017dcc:	482b      	ldr	r0, [pc, #172]	; (8017e7c <pbuf_copy_partial+0xdc>)
 8017dce:	f007 fe9d 	bl	801fb0c <iprintf>
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	e04a      	b.n	8017e6c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8017dd6:	68bb      	ldr	r3, [r7, #8]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d108      	bne.n	8017dee <pbuf_copy_partial+0x4e>
 8017ddc:	4b25      	ldr	r3, [pc, #148]	; (8017e74 <pbuf_copy_partial+0xd4>)
 8017dde:	f240 420b 	movw	r2, #1035	; 0x40b
 8017de2:	4927      	ldr	r1, [pc, #156]	; (8017e80 <pbuf_copy_partial+0xe0>)
 8017de4:	4825      	ldr	r0, [pc, #148]	; (8017e7c <pbuf_copy_partial+0xdc>)
 8017de6:	f007 fe91 	bl	801fb0c <iprintf>
 8017dea:	2300      	movs	r3, #0
 8017dec:	e03e      	b.n	8017e6c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	61fb      	str	r3, [r7, #28]
 8017df2:	e034      	b.n	8017e5e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8017df4:	88bb      	ldrh	r3, [r7, #4]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d00a      	beq.n	8017e10 <pbuf_copy_partial+0x70>
 8017dfa:	69fb      	ldr	r3, [r7, #28]
 8017dfc:	895b      	ldrh	r3, [r3, #10]
 8017dfe:	88ba      	ldrh	r2, [r7, #4]
 8017e00:	429a      	cmp	r2, r3
 8017e02:	d305      	bcc.n	8017e10 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8017e04:	69fb      	ldr	r3, [r7, #28]
 8017e06:	895b      	ldrh	r3, [r3, #10]
 8017e08:	88ba      	ldrh	r2, [r7, #4]
 8017e0a:	1ad3      	subs	r3, r2, r3
 8017e0c:	80bb      	strh	r3, [r7, #4]
 8017e0e:	e023      	b.n	8017e58 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8017e10:	69fb      	ldr	r3, [r7, #28]
 8017e12:	895a      	ldrh	r2, [r3, #10]
 8017e14:	88bb      	ldrh	r3, [r7, #4]
 8017e16:	1ad3      	subs	r3, r2, r3
 8017e18:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8017e1a:	8b3a      	ldrh	r2, [r7, #24]
 8017e1c:	88fb      	ldrh	r3, [r7, #6]
 8017e1e:	429a      	cmp	r2, r3
 8017e20:	d901      	bls.n	8017e26 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8017e22:	88fb      	ldrh	r3, [r7, #6]
 8017e24:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8017e26:	8b7b      	ldrh	r3, [r7, #26]
 8017e28:	68ba      	ldr	r2, [r7, #8]
 8017e2a:	18d0      	adds	r0, r2, r3
 8017e2c:	69fb      	ldr	r3, [r7, #28]
 8017e2e:	685a      	ldr	r2, [r3, #4]
 8017e30:	88bb      	ldrh	r3, [r7, #4]
 8017e32:	4413      	add	r3, r2
 8017e34:	8b3a      	ldrh	r2, [r7, #24]
 8017e36:	4619      	mov	r1, r3
 8017e38:	f007 fa6a 	bl	801f310 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8017e3c:	8afa      	ldrh	r2, [r7, #22]
 8017e3e:	8b3b      	ldrh	r3, [r7, #24]
 8017e40:	4413      	add	r3, r2
 8017e42:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8017e44:	8b7a      	ldrh	r2, [r7, #26]
 8017e46:	8b3b      	ldrh	r3, [r7, #24]
 8017e48:	4413      	add	r3, r2
 8017e4a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8017e4c:	88fa      	ldrh	r2, [r7, #6]
 8017e4e:	8b3b      	ldrh	r3, [r7, #24]
 8017e50:	1ad3      	subs	r3, r2, r3
 8017e52:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8017e54:	2300      	movs	r3, #0
 8017e56:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017e58:	69fb      	ldr	r3, [r7, #28]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	61fb      	str	r3, [r7, #28]
 8017e5e:	88fb      	ldrh	r3, [r7, #6]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d002      	beq.n	8017e6a <pbuf_copy_partial+0xca>
 8017e64:	69fb      	ldr	r3, [r7, #28]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d1c4      	bne.n	8017df4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8017e6a:	8afb      	ldrh	r3, [r7, #22]
}
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	3720      	adds	r7, #32
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}
 8017e74:	080223a8 	.word	0x080223a8
 8017e78:	08022734 	.word	0x08022734
 8017e7c:	0802244c 	.word	0x0802244c
 8017e80:	08022754 	.word	0x08022754

08017e84 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b084      	sub	sp, #16
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	603a      	str	r2, [r7, #0]
 8017e8e:	71fb      	strb	r3, [r7, #7]
 8017e90:	460b      	mov	r3, r1
 8017e92:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8017e94:	683b      	ldr	r3, [r7, #0]
 8017e96:	8919      	ldrh	r1, [r3, #8]
 8017e98:	88ba      	ldrh	r2, [r7, #4]
 8017e9a:	79fb      	ldrb	r3, [r7, #7]
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7ff faa5 	bl	80173ec <pbuf_alloc>
 8017ea2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d101      	bne.n	8017eae <pbuf_clone+0x2a>
    return NULL;
 8017eaa:	2300      	movs	r3, #0
 8017eac:	e011      	b.n	8017ed2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8017eae:	6839      	ldr	r1, [r7, #0]
 8017eb0:	68f8      	ldr	r0, [r7, #12]
 8017eb2:	f7ff fea3 	bl	8017bfc <pbuf_copy>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8017eba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d006      	beq.n	8017ed0 <pbuf_clone+0x4c>
 8017ec2:	4b06      	ldr	r3, [pc, #24]	; (8017edc <pbuf_clone+0x58>)
 8017ec4:	f240 5224 	movw	r2, #1316	; 0x524
 8017ec8:	4905      	ldr	r1, [pc, #20]	; (8017ee0 <pbuf_clone+0x5c>)
 8017eca:	4806      	ldr	r0, [pc, #24]	; (8017ee4 <pbuf_clone+0x60>)
 8017ecc:	f007 fe1e 	bl	801fb0c <iprintf>
  return q;
 8017ed0:	68fb      	ldr	r3, [r7, #12]
}
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	3710      	adds	r7, #16
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd80      	pop	{r7, pc}
 8017eda:	bf00      	nop
 8017edc:	080223a8 	.word	0x080223a8
 8017ee0:	08022860 	.word	0x08022860
 8017ee4:	0802244c 	.word	0x0802244c

08017ee8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b086      	sub	sp, #24
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017ef2:	683b      	ldr	r3, [r7, #0]
 8017ef4:	60bb      	str	r3, [r7, #8]
 8017ef6:	2304      	movs	r3, #4
 8017ef8:	60fb      	str	r3, [r7, #12]
 8017efa:	2300      	movs	r3, #0
 8017efc:	613b      	str	r3, [r7, #16]
 8017efe:	2300      	movs	r3, #0
 8017f00:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017f02:	f107 0308 	add.w	r3, r7, #8
 8017f06:	2100      	movs	r1, #0
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f7f6 fe2a 	bl	800eb62 <osMessageCreate>
 8017f0e:	4602      	mov	r2, r0
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d102      	bne.n	8017f22 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f20:	e000      	b.n	8017f24 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017f22:	2300      	movs	r3, #0
}
 8017f24:	4618      	mov	r0, r3
 8017f26:	3718      	adds	r7, #24
 8017f28:	46bd      	mov	sp, r7
 8017f2a:	bd80      	pop	{r7, pc}

08017f2c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b082      	sub	sp, #8
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f7f6 feef 	bl	800ed1c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	4618      	mov	r0, r3
 8017f44:	f7f6 ff00 	bl	800ed48 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017f48:	bf00      	nop
 8017f4a:	3708      	adds	r7, #8
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}

08017f50 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b084      	sub	sp, #16
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
 8017f58:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	6839      	ldr	r1, [r7, #0]
 8017f60:	2200      	movs	r2, #0
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7f6 fe26 	bl	800ebb4 <osMessagePut>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d102      	bne.n	8017f74 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017f6e:	2300      	movs	r3, #0
 8017f70:	73fb      	strb	r3, [r7, #15]
 8017f72:	e001      	b.n	8017f78 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017f74:	23ff      	movs	r3, #255	; 0xff
 8017f76:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3710      	adds	r7, #16
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}

08017f84 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b08c      	sub	sp, #48	; 0x30
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	61f8      	str	r0, [r7, #28]
 8017f8c:	61b9      	str	r1, [r7, #24]
 8017f8e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017f90:	f7f6 fc12 	bl	800e7b8 <osKernelSysTick>
 8017f94:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017f96:	697b      	ldr	r3, [r7, #20]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d017      	beq.n	8017fcc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017f9c:	69fb      	ldr	r3, [r7, #28]
 8017f9e:	6819      	ldr	r1, [r3, #0]
 8017fa0:	f107 0320 	add.w	r3, r7, #32
 8017fa4:	697a      	ldr	r2, [r7, #20]
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7f6 fe44 	bl	800ec34 <osMessageGet>

    if(event.status == osEventMessage)
 8017fac:	6a3b      	ldr	r3, [r7, #32]
 8017fae:	2b10      	cmp	r3, #16
 8017fb0:	d109      	bne.n	8017fc6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb4:	461a      	mov	r2, r3
 8017fb6:	69bb      	ldr	r3, [r7, #24]
 8017fb8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017fba:	f7f6 fbfd 	bl	800e7b8 <osKernelSysTick>
 8017fbe:	4602      	mov	r2, r0
 8017fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc2:	1ad3      	subs	r3, r2, r3
 8017fc4:	e019      	b.n	8017ffa <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017fca:	e016      	b.n	8017ffa <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017fcc:	69fb      	ldr	r3, [r7, #28]
 8017fce:	6819      	ldr	r1, [r3, #0]
 8017fd0:	463b      	mov	r3, r7
 8017fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	f7f6 fe2c 	bl	800ec34 <osMessageGet>
 8017fdc:	f107 0320 	add.w	r3, r7, #32
 8017fe0:	463a      	mov	r2, r7
 8017fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8017fe4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fea:	461a      	mov	r2, r3
 8017fec:	69bb      	ldr	r3, [r7, #24]
 8017fee:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017ff0:	f7f6 fbe2 	bl	800e7b8 <osKernelSysTick>
 8017ff4:	4602      	mov	r2, r0
 8017ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ff8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	3730      	adds	r7, #48	; 0x30
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}

08018002 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018002:	b580      	push	{r7, lr}
 8018004:	b086      	sub	sp, #24
 8018006:	af00      	add	r7, sp, #0
 8018008:	6078      	str	r0, [r7, #4]
 801800a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6819      	ldr	r1, [r3, #0]
 8018010:	f107 030c 	add.w	r3, r7, #12
 8018014:	2200      	movs	r2, #0
 8018016:	4618      	mov	r0, r3
 8018018:	f7f6 fe0c 	bl	800ec34 <osMessageGet>

  if(event.status == osEventMessage)
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	2b10      	cmp	r3, #16
 8018020:	d105      	bne.n	801802e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018022:	693b      	ldr	r3, [r7, #16]
 8018024:	461a      	mov	r2, r3
 8018026:	683b      	ldr	r3, [r7, #0]
 8018028:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801802a:	2300      	movs	r3, #0
 801802c:	e001      	b.n	8018032 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801802e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8018032:	4618      	mov	r0, r3
 8018034:	3718      	adds	r7, #24
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}

0801803a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801803a:	b480      	push	{r7}
 801803c:	b083      	sub	sp, #12
 801803e:	af00      	add	r7, sp, #0
 8018040:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d101      	bne.n	801804e <sys_mbox_valid+0x14>
    return 0;
 801804a:	2300      	movs	r3, #0
 801804c:	e000      	b.n	8018050 <sys_mbox_valid+0x16>
  else
    return 1;
 801804e:	2301      	movs	r3, #1
}
 8018050:	4618      	mov	r0, r3
 8018052:	370c      	adds	r7, #12
 8018054:	46bd      	mov	sp, r7
 8018056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805a:	4770      	bx	lr

0801805c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801805c:	b480      	push	{r7}
 801805e:	b083      	sub	sp, #12
 8018060:	af00      	add	r7, sp, #0
 8018062:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	2200      	movs	r2, #0
 8018068:	601a      	str	r2, [r3, #0]
}
 801806a:	bf00      	nop
 801806c:	370c      	adds	r7, #12
 801806e:	46bd      	mov	sp, r7
 8018070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018074:	4770      	bx	lr

08018076 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018076:	b580      	push	{r7, lr}
 8018078:	b084      	sub	sp, #16
 801807a:	af00      	add	r7, sp, #0
 801807c:	6078      	str	r0, [r7, #4]
 801807e:	460b      	mov	r3, r1
 8018080:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018082:	2300      	movs	r3, #0
 8018084:	60bb      	str	r3, [r7, #8]
 8018086:	2300      	movs	r3, #0
 8018088:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801808a:	f107 0308 	add.w	r3, r7, #8
 801808e:	2101      	movs	r1, #1
 8018090:	4618      	mov	r0, r3
 8018092:	f7f6 fc9d 	bl	800e9d0 <osSemaphoreCreate>
 8018096:	4602      	mov	r2, r0
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d102      	bne.n	80180aa <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80180a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80180a8:	e009      	b.n	80180be <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80180aa:	78fb      	ldrb	r3, [r7, #3]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d105      	bne.n	80180bc <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	2100      	movs	r1, #0
 80180b6:	4618      	mov	r0, r3
 80180b8:	f7f6 fcbc 	bl	800ea34 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80180bc:	2300      	movs	r3, #0
}
 80180be:	4618      	mov	r0, r3
 80180c0:	3710      	adds	r7, #16
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bd80      	pop	{r7, pc}

080180c6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80180c6:	b580      	push	{r7, lr}
 80180c8:	b084      	sub	sp, #16
 80180ca:	af00      	add	r7, sp, #0
 80180cc:	6078      	str	r0, [r7, #4]
 80180ce:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80180d0:	f7f6 fb72 	bl	800e7b8 <osKernelSysTick>
 80180d4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80180d6:	683b      	ldr	r3, [r7, #0]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d011      	beq.n	8018100 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	6839      	ldr	r1, [r7, #0]
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7f6 fca6 	bl	800ea34 <osSemaphoreWait>
 80180e8:	4603      	mov	r3, r0
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d105      	bne.n	80180fa <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80180ee:	f7f6 fb63 	bl	800e7b8 <osKernelSysTick>
 80180f2:	4602      	mov	r2, r0
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	1ad3      	subs	r3, r2, r3
 80180f8:	e012      	b.n	8018120 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80180fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80180fe:	e00f      	b.n	8018120 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018100:	bf00      	nop
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801810a:	4618      	mov	r0, r3
 801810c:	f7f6 fc92 	bl	800ea34 <osSemaphoreWait>
 8018110:	4603      	mov	r3, r0
 8018112:	2b00      	cmp	r3, #0
 8018114:	d1f5      	bne.n	8018102 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018116:	f7f6 fb4f 	bl	800e7b8 <osKernelSysTick>
 801811a:	4602      	mov	r2, r0
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018120:	4618      	mov	r0, r3
 8018122:	3710      	adds	r7, #16
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}

08018128 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b082      	sub	sp, #8
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	4618      	mov	r0, r3
 8018136:	f7f6 fccb 	bl	800ead0 <osSemaphoreRelease>
}
 801813a:	bf00      	nop
 801813c:	3708      	adds	r7, #8
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}

08018142 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018142:	b580      	push	{r7, lr}
 8018144:	b082      	sub	sp, #8
 8018146:	af00      	add	r7, sp, #0
 8018148:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	4618      	mov	r0, r3
 8018150:	f7f6 fcf4 	bl	800eb3c <osSemaphoreDelete>
}
 8018154:	bf00      	nop
 8018156:	3708      	adds	r7, #8
 8018158:	46bd      	mov	sp, r7
 801815a:	bd80      	pop	{r7, pc}

0801815c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801815c:	b480      	push	{r7}
 801815e:	b083      	sub	sp, #12
 8018160:	af00      	add	r7, sp, #0
 8018162:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d101      	bne.n	8018170 <sys_sem_valid+0x14>
    return 0;
 801816c:	2300      	movs	r3, #0
 801816e:	e000      	b.n	8018172 <sys_sem_valid+0x16>
  else
    return 1;
 8018170:	2301      	movs	r3, #1
}
 8018172:	4618      	mov	r0, r3
 8018174:	370c      	adds	r7, #12
 8018176:	46bd      	mov	sp, r7
 8018178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817c:	4770      	bx	lr

0801817e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801817e:	b480      	push	{r7}
 8018180:	b083      	sub	sp, #12
 8018182:	af00      	add	r7, sp, #0
 8018184:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	2200      	movs	r2, #0
 801818a:	601a      	str	r2, [r3, #0]
}
 801818c:	bf00      	nop
 801818e:	370c      	adds	r7, #12
 8018190:	46bd      	mov	sp, r7
 8018192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018196:	4770      	bx	lr

08018198 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801819c:	4803      	ldr	r0, [pc, #12]	; (80181ac <sys_init+0x14>)
 801819e:	f7f6 fb7b 	bl	800e898 <osMutexCreate>
 80181a2:	4603      	mov	r3, r0
 80181a4:	4a02      	ldr	r2, [pc, #8]	; (80181b0 <sys_init+0x18>)
 80181a6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80181a8:	bf00      	nop
 80181aa:	bd80      	pop	{r7, pc}
 80181ac:	080244fc 	.word	0x080244fc
 80181b0:	2400f91c 	.word	0x2400f91c

080181b4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b084      	sub	sp, #16
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80181bc:	2300      	movs	r3, #0
 80181be:	60bb      	str	r3, [r7, #8]
 80181c0:	2300      	movs	r3, #0
 80181c2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80181c4:	f107 0308 	add.w	r3, r7, #8
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7f6 fb65 	bl	800e898 <osMutexCreate>
 80181ce:	4602      	mov	r2, r0
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d102      	bne.n	80181e2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80181dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80181e0:	e000      	b.n	80181e4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80181e2:	2300      	movs	r3, #0
}
 80181e4:	4618      	mov	r0, r3
 80181e6:	3710      	adds	r7, #16
 80181e8:	46bd      	mov	sp, r7
 80181ea:	bd80      	pop	{r7, pc}

080181ec <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b082      	sub	sp, #8
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80181fc:	4618      	mov	r0, r3
 80181fe:	f7f6 fb63 	bl	800e8c8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018202:	bf00      	nop
 8018204:	3708      	adds	r7, #8
 8018206:	46bd      	mov	sp, r7
 8018208:	bd80      	pop	{r7, pc}

0801820a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801820a:	b580      	push	{r7, lr}
 801820c:	b082      	sub	sp, #8
 801820e:	af00      	add	r7, sp, #0
 8018210:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	4618      	mov	r0, r3
 8018218:	f7f6 fba4 	bl	800e964 <osMutexRelease>
}
 801821c:	bf00      	nop
 801821e:	3708      	adds	r7, #8
 8018220:	46bd      	mov	sp, r7
 8018222:	bd80      	pop	{r7, pc}

08018224 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b08c      	sub	sp, #48	; 0x30
 8018228:	af00      	add	r7, sp, #0
 801822a:	60f8      	str	r0, [r7, #12]
 801822c:	60b9      	str	r1, [r7, #8]
 801822e:	607a      	str	r2, [r7, #4]
 8018230:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018232:	f107 0314 	add.w	r3, r7, #20
 8018236:	2200      	movs	r2, #0
 8018238:	601a      	str	r2, [r3, #0]
 801823a:	605a      	str	r2, [r3, #4]
 801823c:	609a      	str	r2, [r3, #8]
 801823e:	60da      	str	r2, [r3, #12]
 8018240:	611a      	str	r2, [r3, #16]
 8018242:	615a      	str	r2, [r3, #20]
 8018244:	619a      	str	r2, [r3, #24]
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	617b      	str	r3, [r7, #20]
 801824a:	68bb      	ldr	r3, [r7, #8]
 801824c:	61bb      	str	r3, [r7, #24]
 801824e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018250:	b21b      	sxth	r3, r3
 8018252:	83bb      	strh	r3, [r7, #28]
 8018254:	683b      	ldr	r3, [r7, #0]
 8018256:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018258:	f107 0314 	add.w	r3, r7, #20
 801825c:	6879      	ldr	r1, [r7, #4]
 801825e:	4618      	mov	r0, r3
 8018260:	f7f6 faba 	bl	800e7d8 <osThreadCreate>
 8018264:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018266:	4618      	mov	r0, r3
 8018268:	3730      	adds	r7, #48	; 0x30
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}
	...

08018270 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018270:	b580      	push	{r7, lr}
 8018272:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018274:	4b04      	ldr	r3, [pc, #16]	; (8018288 <sys_arch_protect+0x18>)
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801827c:	4618      	mov	r0, r3
 801827e:	f7f6 fb23 	bl	800e8c8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018282:	2301      	movs	r3, #1
}
 8018284:	4618      	mov	r0, r3
 8018286:	bd80      	pop	{r7, pc}
 8018288:	2400f91c 	.word	0x2400f91c

0801828c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b082      	sub	sp, #8
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018294:	4b04      	ldr	r3, [pc, #16]	; (80182a8 <sys_arch_unprotect+0x1c>)
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	4618      	mov	r0, r3
 801829a:	f7f6 fb63 	bl	800e964 <osMutexRelease>
}
 801829e:	bf00      	nop
 80182a0:	3708      	adds	r7, #8
 80182a2:	46bd      	mov	sp, r7
 80182a4:	bd80      	pop	{r7, pc}
 80182a6:	bf00      	nop
 80182a8:	2400f91c 	.word	0x2400f91c

080182ac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80182b0:	f007 fcba 	bl	801fc28 <rand>
 80182b4:	4603      	mov	r3, r0
 80182b6:	b29b      	uxth	r3, r3
 80182b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80182bc:	b29b      	uxth	r3, r3
 80182be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80182c2:	b29a      	uxth	r2, r3
 80182c4:	4b01      	ldr	r3, [pc, #4]	; (80182cc <tcp_init+0x20>)
 80182c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80182c8:	bf00      	nop
 80182ca:	bd80      	pop	{r7, pc}
 80182cc:	24000028 	.word	0x24000028

080182d0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b082      	sub	sp, #8
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	7d1b      	ldrb	r3, [r3, #20]
 80182dc:	2b01      	cmp	r3, #1
 80182de:	d105      	bne.n	80182ec <tcp_free+0x1c>
 80182e0:	4b06      	ldr	r3, [pc, #24]	; (80182fc <tcp_free+0x2c>)
 80182e2:	22d4      	movs	r2, #212	; 0xd4
 80182e4:	4906      	ldr	r1, [pc, #24]	; (8018300 <tcp_free+0x30>)
 80182e6:	4807      	ldr	r0, [pc, #28]	; (8018304 <tcp_free+0x34>)
 80182e8:	f007 fc10 	bl	801fb0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80182ec:	6879      	ldr	r1, [r7, #4]
 80182ee:	2001      	movs	r0, #1
 80182f0:	f7fe fc6c 	bl	8016bcc <memp_free>
}
 80182f4:	bf00      	nop
 80182f6:	3708      	adds	r7, #8
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}
 80182fc:	080228ec 	.word	0x080228ec
 8018300:	08022960 	.word	0x08022960
 8018304:	08022974 	.word	0x08022974

08018308 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b082      	sub	sp, #8
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	7d1b      	ldrb	r3, [r3, #20]
 8018314:	2b01      	cmp	r3, #1
 8018316:	d105      	bne.n	8018324 <tcp_free_listen+0x1c>
 8018318:	4b06      	ldr	r3, [pc, #24]	; (8018334 <tcp_free_listen+0x2c>)
 801831a:	22df      	movs	r2, #223	; 0xdf
 801831c:	4906      	ldr	r1, [pc, #24]	; (8018338 <tcp_free_listen+0x30>)
 801831e:	4807      	ldr	r0, [pc, #28]	; (801833c <tcp_free_listen+0x34>)
 8018320:	f007 fbf4 	bl	801fb0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8018324:	6879      	ldr	r1, [r7, #4]
 8018326:	2002      	movs	r0, #2
 8018328:	f7fe fc50 	bl	8016bcc <memp_free>
}
 801832c:	bf00      	nop
 801832e:	3708      	adds	r7, #8
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}
 8018334:	080228ec 	.word	0x080228ec
 8018338:	0802299c 	.word	0x0802299c
 801833c:	08022974 	.word	0x08022974

08018340 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8018344:	f001 f8a8 	bl	8019498 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8018348:	4b07      	ldr	r3, [pc, #28]	; (8018368 <tcp_tmr+0x28>)
 801834a:	781b      	ldrb	r3, [r3, #0]
 801834c:	3301      	adds	r3, #1
 801834e:	b2da      	uxtb	r2, r3
 8018350:	4b05      	ldr	r3, [pc, #20]	; (8018368 <tcp_tmr+0x28>)
 8018352:	701a      	strb	r2, [r3, #0]
 8018354:	4b04      	ldr	r3, [pc, #16]	; (8018368 <tcp_tmr+0x28>)
 8018356:	781b      	ldrb	r3, [r3, #0]
 8018358:	f003 0301 	and.w	r3, r3, #1
 801835c:	2b00      	cmp	r3, #0
 801835e:	d001      	beq.n	8018364 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8018360:	f000 fd5a 	bl	8018e18 <tcp_slowtmr>
  }
}
 8018364:	bf00      	nop
 8018366:	bd80      	pop	{r7, pc}
 8018368:	2400f935 	.word	0x2400f935

0801836c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b084      	sub	sp, #16
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8018376:	683b      	ldr	r3, [r7, #0]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d105      	bne.n	8018388 <tcp_remove_listener+0x1c>
 801837c:	4b0d      	ldr	r3, [pc, #52]	; (80183b4 <tcp_remove_listener+0x48>)
 801837e:	22ff      	movs	r2, #255	; 0xff
 8018380:	490d      	ldr	r1, [pc, #52]	; (80183b8 <tcp_remove_listener+0x4c>)
 8018382:	480e      	ldr	r0, [pc, #56]	; (80183bc <tcp_remove_listener+0x50>)
 8018384:	f007 fbc2 	bl	801fb0c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	60fb      	str	r3, [r7, #12]
 801838c:	e00a      	b.n	80183a4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018392:	683a      	ldr	r2, [r7, #0]
 8018394:	429a      	cmp	r2, r3
 8018396:	d102      	bne.n	801839e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	2200      	movs	r2, #0
 801839c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	68db      	ldr	r3, [r3, #12]
 80183a2:	60fb      	str	r3, [r7, #12]
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d1f1      	bne.n	801838e <tcp_remove_listener+0x22>
    }
  }
}
 80183aa:	bf00      	nop
 80183ac:	bf00      	nop
 80183ae:	3710      	adds	r7, #16
 80183b0:	46bd      	mov	sp, r7
 80183b2:	bd80      	pop	{r7, pc}
 80183b4:	080228ec 	.word	0x080228ec
 80183b8:	080229b8 	.word	0x080229b8
 80183bc:	08022974 	.word	0x08022974

080183c0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b084      	sub	sp, #16
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d106      	bne.n	80183dc <tcp_listen_closed+0x1c>
 80183ce:	4b14      	ldr	r3, [pc, #80]	; (8018420 <tcp_listen_closed+0x60>)
 80183d0:	f240 1211 	movw	r2, #273	; 0x111
 80183d4:	4913      	ldr	r1, [pc, #76]	; (8018424 <tcp_listen_closed+0x64>)
 80183d6:	4814      	ldr	r0, [pc, #80]	; (8018428 <tcp_listen_closed+0x68>)
 80183d8:	f007 fb98 	bl	801fb0c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	7d1b      	ldrb	r3, [r3, #20]
 80183e0:	2b01      	cmp	r3, #1
 80183e2:	d006      	beq.n	80183f2 <tcp_listen_closed+0x32>
 80183e4:	4b0e      	ldr	r3, [pc, #56]	; (8018420 <tcp_listen_closed+0x60>)
 80183e6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80183ea:	4910      	ldr	r1, [pc, #64]	; (801842c <tcp_listen_closed+0x6c>)
 80183ec:	480e      	ldr	r0, [pc, #56]	; (8018428 <tcp_listen_closed+0x68>)
 80183ee:	f007 fb8d 	bl	801fb0c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80183f2:	2301      	movs	r3, #1
 80183f4:	60fb      	str	r3, [r7, #12]
 80183f6:	e00b      	b.n	8018410 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80183f8:	4a0d      	ldr	r2, [pc, #52]	; (8018430 <tcp_listen_closed+0x70>)
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	6879      	ldr	r1, [r7, #4]
 8018404:	4618      	mov	r0, r3
 8018406:	f7ff ffb1 	bl	801836c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	3301      	adds	r3, #1
 801840e:	60fb      	str	r3, [r7, #12]
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	2b03      	cmp	r3, #3
 8018414:	d9f0      	bls.n	80183f8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8018416:	bf00      	nop
 8018418:	bf00      	nop
 801841a:	3710      	adds	r7, #16
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}
 8018420:	080228ec 	.word	0x080228ec
 8018424:	080229e0 	.word	0x080229e0
 8018428:	08022974 	.word	0x08022974
 801842c:	080229ec 	.word	0x080229ec
 8018430:	0802451c 	.word	0x0802451c

08018434 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8018434:	b5b0      	push	{r4, r5, r7, lr}
 8018436:	b088      	sub	sp, #32
 8018438:	af04      	add	r7, sp, #16
 801843a:	6078      	str	r0, [r7, #4]
 801843c:	460b      	mov	r3, r1
 801843e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d106      	bne.n	8018454 <tcp_close_shutdown+0x20>
 8018446:	4b63      	ldr	r3, [pc, #396]	; (80185d4 <tcp_close_shutdown+0x1a0>)
 8018448:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801844c:	4962      	ldr	r1, [pc, #392]	; (80185d8 <tcp_close_shutdown+0x1a4>)
 801844e:	4863      	ldr	r0, [pc, #396]	; (80185dc <tcp_close_shutdown+0x1a8>)
 8018450:	f007 fb5c 	bl	801fb0c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8018454:	78fb      	ldrb	r3, [r7, #3]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d067      	beq.n	801852a <tcp_close_shutdown+0xf6>
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	7d1b      	ldrb	r3, [r3, #20]
 801845e:	2b04      	cmp	r3, #4
 8018460:	d003      	beq.n	801846a <tcp_close_shutdown+0x36>
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	7d1b      	ldrb	r3, [r3, #20]
 8018466:	2b07      	cmp	r3, #7
 8018468:	d15f      	bne.n	801852a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801846e:	2b00      	cmp	r3, #0
 8018470:	d105      	bne.n	801847e <tcp_close_shutdown+0x4a>
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018476:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801847a:	4293      	cmp	r3, r2
 801847c:	d055      	beq.n	801852a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	8b5b      	ldrh	r3, [r3, #26]
 8018482:	f003 0310 	and.w	r3, r3, #16
 8018486:	2b00      	cmp	r3, #0
 8018488:	d106      	bne.n	8018498 <tcp_close_shutdown+0x64>
 801848a:	4b52      	ldr	r3, [pc, #328]	; (80185d4 <tcp_close_shutdown+0x1a0>)
 801848c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8018490:	4953      	ldr	r1, [pc, #332]	; (80185e0 <tcp_close_shutdown+0x1ac>)
 8018492:	4852      	ldr	r0, [pc, #328]	; (80185dc <tcp_close_shutdown+0x1a8>)
 8018494:	f007 fb3a 	bl	801fb0c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80184a0:	687d      	ldr	r5, [r7, #4]
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	3304      	adds	r3, #4
 80184a6:	687a      	ldr	r2, [r7, #4]
 80184a8:	8ad2      	ldrh	r2, [r2, #22]
 80184aa:	6879      	ldr	r1, [r7, #4]
 80184ac:	8b09      	ldrh	r1, [r1, #24]
 80184ae:	9102      	str	r1, [sp, #8]
 80184b0:	9201      	str	r2, [sp, #4]
 80184b2:	9300      	str	r3, [sp, #0]
 80184b4:	462b      	mov	r3, r5
 80184b6:	4622      	mov	r2, r4
 80184b8:	4601      	mov	r1, r0
 80184ba:	6878      	ldr	r0, [r7, #4]
 80184bc:	f005 fdbe 	bl	801e03c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80184c0:	6878      	ldr	r0, [r7, #4]
 80184c2:	f001 fb9b 	bl	8019bfc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80184c6:	4b47      	ldr	r3, [pc, #284]	; (80185e4 <tcp_close_shutdown+0x1b0>)
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	687a      	ldr	r2, [r7, #4]
 80184cc:	429a      	cmp	r2, r3
 80184ce:	d105      	bne.n	80184dc <tcp_close_shutdown+0xa8>
 80184d0:	4b44      	ldr	r3, [pc, #272]	; (80185e4 <tcp_close_shutdown+0x1b0>)
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	68db      	ldr	r3, [r3, #12]
 80184d6:	4a43      	ldr	r2, [pc, #268]	; (80185e4 <tcp_close_shutdown+0x1b0>)
 80184d8:	6013      	str	r3, [r2, #0]
 80184da:	e013      	b.n	8018504 <tcp_close_shutdown+0xd0>
 80184dc:	4b41      	ldr	r3, [pc, #260]	; (80185e4 <tcp_close_shutdown+0x1b0>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	60fb      	str	r3, [r7, #12]
 80184e2:	e00c      	b.n	80184fe <tcp_close_shutdown+0xca>
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	68db      	ldr	r3, [r3, #12]
 80184e8:	687a      	ldr	r2, [r7, #4]
 80184ea:	429a      	cmp	r2, r3
 80184ec:	d104      	bne.n	80184f8 <tcp_close_shutdown+0xc4>
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	68da      	ldr	r2, [r3, #12]
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	60da      	str	r2, [r3, #12]
 80184f6:	e005      	b.n	8018504 <tcp_close_shutdown+0xd0>
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	68db      	ldr	r3, [r3, #12]
 80184fc:	60fb      	str	r3, [r7, #12]
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d1ef      	bne.n	80184e4 <tcp_close_shutdown+0xb0>
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2200      	movs	r2, #0
 8018508:	60da      	str	r2, [r3, #12]
 801850a:	4b37      	ldr	r3, [pc, #220]	; (80185e8 <tcp_close_shutdown+0x1b4>)
 801850c:	2201      	movs	r2, #1
 801850e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8018510:	4b36      	ldr	r3, [pc, #216]	; (80185ec <tcp_close_shutdown+0x1b8>)
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	687a      	ldr	r2, [r7, #4]
 8018516:	429a      	cmp	r2, r3
 8018518:	d102      	bne.n	8018520 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801851a:	f004 f833 	bl	801c584 <tcp_trigger_input_pcb_close>
 801851e:	e002      	b.n	8018526 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8018520:	6878      	ldr	r0, [r7, #4]
 8018522:	f7ff fed5 	bl	80182d0 <tcp_free>
      }
      return ERR_OK;
 8018526:	2300      	movs	r3, #0
 8018528:	e050      	b.n	80185cc <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	7d1b      	ldrb	r3, [r3, #20]
 801852e:	2b02      	cmp	r3, #2
 8018530:	d03b      	beq.n	80185aa <tcp_close_shutdown+0x176>
 8018532:	2b02      	cmp	r3, #2
 8018534:	dc44      	bgt.n	80185c0 <tcp_close_shutdown+0x18c>
 8018536:	2b00      	cmp	r3, #0
 8018538:	d002      	beq.n	8018540 <tcp_close_shutdown+0x10c>
 801853a:	2b01      	cmp	r3, #1
 801853c:	d02a      	beq.n	8018594 <tcp_close_shutdown+0x160>
 801853e:	e03f      	b.n	80185c0 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	8adb      	ldrh	r3, [r3, #22]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d021      	beq.n	801858c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018548:	4b29      	ldr	r3, [pc, #164]	; (80185f0 <tcp_close_shutdown+0x1bc>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	687a      	ldr	r2, [r7, #4]
 801854e:	429a      	cmp	r2, r3
 8018550:	d105      	bne.n	801855e <tcp_close_shutdown+0x12a>
 8018552:	4b27      	ldr	r3, [pc, #156]	; (80185f0 <tcp_close_shutdown+0x1bc>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	68db      	ldr	r3, [r3, #12]
 8018558:	4a25      	ldr	r2, [pc, #148]	; (80185f0 <tcp_close_shutdown+0x1bc>)
 801855a:	6013      	str	r3, [r2, #0]
 801855c:	e013      	b.n	8018586 <tcp_close_shutdown+0x152>
 801855e:	4b24      	ldr	r3, [pc, #144]	; (80185f0 <tcp_close_shutdown+0x1bc>)
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	60bb      	str	r3, [r7, #8]
 8018564:	e00c      	b.n	8018580 <tcp_close_shutdown+0x14c>
 8018566:	68bb      	ldr	r3, [r7, #8]
 8018568:	68db      	ldr	r3, [r3, #12]
 801856a:	687a      	ldr	r2, [r7, #4]
 801856c:	429a      	cmp	r2, r3
 801856e:	d104      	bne.n	801857a <tcp_close_shutdown+0x146>
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	68da      	ldr	r2, [r3, #12]
 8018574:	68bb      	ldr	r3, [r7, #8]
 8018576:	60da      	str	r2, [r3, #12]
 8018578:	e005      	b.n	8018586 <tcp_close_shutdown+0x152>
 801857a:	68bb      	ldr	r3, [r7, #8]
 801857c:	68db      	ldr	r3, [r3, #12]
 801857e:	60bb      	str	r3, [r7, #8]
 8018580:	68bb      	ldr	r3, [r7, #8]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d1ef      	bne.n	8018566 <tcp_close_shutdown+0x132>
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	2200      	movs	r2, #0
 801858a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801858c:	6878      	ldr	r0, [r7, #4]
 801858e:	f7ff fe9f 	bl	80182d0 <tcp_free>
      break;
 8018592:	e01a      	b.n	80185ca <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8018594:	6878      	ldr	r0, [r7, #4]
 8018596:	f7ff ff13 	bl	80183c0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801859a:	6879      	ldr	r1, [r7, #4]
 801859c:	4815      	ldr	r0, [pc, #84]	; (80185f4 <tcp_close_shutdown+0x1c0>)
 801859e:	f001 fb7d 	bl	8019c9c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80185a2:	6878      	ldr	r0, [r7, #4]
 80185a4:	f7ff feb0 	bl	8018308 <tcp_free_listen>
      break;
 80185a8:	e00f      	b.n	80185ca <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80185aa:	6879      	ldr	r1, [r7, #4]
 80185ac:	480d      	ldr	r0, [pc, #52]	; (80185e4 <tcp_close_shutdown+0x1b0>)
 80185ae:	f001 fb75 	bl	8019c9c <tcp_pcb_remove>
 80185b2:	4b0d      	ldr	r3, [pc, #52]	; (80185e8 <tcp_close_shutdown+0x1b4>)
 80185b4:	2201      	movs	r2, #1
 80185b6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80185b8:	6878      	ldr	r0, [r7, #4]
 80185ba:	f7ff fe89 	bl	80182d0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80185be:	e004      	b.n	80185ca <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 80185c0:	6878      	ldr	r0, [r7, #4]
 80185c2:	f000 f819 	bl	80185f8 <tcp_close_shutdown_fin>
 80185c6:	4603      	mov	r3, r0
 80185c8:	e000      	b.n	80185cc <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80185ca:	2300      	movs	r3, #0
}
 80185cc:	4618      	mov	r0, r3
 80185ce:	3710      	adds	r7, #16
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bdb0      	pop	{r4, r5, r7, pc}
 80185d4:	080228ec 	.word	0x080228ec
 80185d8:	08022a04 	.word	0x08022a04
 80185dc:	08022974 	.word	0x08022974
 80185e0:	08022a24 	.word	0x08022a24
 80185e4:	2400f92c 	.word	0x2400f92c
 80185e8:	2400f934 	.word	0x2400f934
 80185ec:	2400f96c 	.word	0x2400f96c
 80185f0:	2400f924 	.word	0x2400f924
 80185f4:	2400f928 	.word	0x2400f928

080185f8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b084      	sub	sp, #16
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d106      	bne.n	8018614 <tcp_close_shutdown_fin+0x1c>
 8018606:	4b2e      	ldr	r3, [pc, #184]	; (80186c0 <tcp_close_shutdown_fin+0xc8>)
 8018608:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801860c:	492d      	ldr	r1, [pc, #180]	; (80186c4 <tcp_close_shutdown_fin+0xcc>)
 801860e:	482e      	ldr	r0, [pc, #184]	; (80186c8 <tcp_close_shutdown_fin+0xd0>)
 8018610:	f007 fa7c 	bl	801fb0c <iprintf>

  switch (pcb->state) {
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	7d1b      	ldrb	r3, [r3, #20]
 8018618:	2b07      	cmp	r3, #7
 801861a:	d020      	beq.n	801865e <tcp_close_shutdown_fin+0x66>
 801861c:	2b07      	cmp	r3, #7
 801861e:	dc2b      	bgt.n	8018678 <tcp_close_shutdown_fin+0x80>
 8018620:	2b03      	cmp	r3, #3
 8018622:	d002      	beq.n	801862a <tcp_close_shutdown_fin+0x32>
 8018624:	2b04      	cmp	r3, #4
 8018626:	d00d      	beq.n	8018644 <tcp_close_shutdown_fin+0x4c>
 8018628:	e026      	b.n	8018678 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801862a:	6878      	ldr	r0, [r7, #4]
 801862c:	f004 fe14 	bl	801d258 <tcp_send_fin>
 8018630:	4603      	mov	r3, r0
 8018632:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d11f      	bne.n	801867c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	2205      	movs	r2, #5
 8018640:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018642:	e01b      	b.n	801867c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8018644:	6878      	ldr	r0, [r7, #4]
 8018646:	f004 fe07 	bl	801d258 <tcp_send_fin>
 801864a:	4603      	mov	r3, r0
 801864c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801864e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d114      	bne.n	8018680 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	2205      	movs	r2, #5
 801865a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801865c:	e010      	b.n	8018680 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801865e:	6878      	ldr	r0, [r7, #4]
 8018660:	f004 fdfa 	bl	801d258 <tcp_send_fin>
 8018664:	4603      	mov	r3, r0
 8018666:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d109      	bne.n	8018684 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	2209      	movs	r2, #9
 8018674:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018676:	e005      	b.n	8018684 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8018678:	2300      	movs	r3, #0
 801867a:	e01c      	b.n	80186b6 <tcp_close_shutdown_fin+0xbe>
      break;
 801867c:	bf00      	nop
 801867e:	e002      	b.n	8018686 <tcp_close_shutdown_fin+0x8e>
      break;
 8018680:	bf00      	nop
 8018682:	e000      	b.n	8018686 <tcp_close_shutdown_fin+0x8e>
      break;
 8018684:	bf00      	nop
  }

  if (err == ERR_OK) {
 8018686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d103      	bne.n	8018696 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801868e:	6878      	ldr	r0, [r7, #4]
 8018690:	f004 ff20 	bl	801d4d4 <tcp_output>
 8018694:	e00d      	b.n	80186b2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8018696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801869a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801869e:	d108      	bne.n	80186b2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	8b5b      	ldrh	r3, [r3, #26]
 80186a4:	f043 0308 	orr.w	r3, r3, #8
 80186a8:	b29a      	uxth	r2, r3
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80186ae:	2300      	movs	r3, #0
 80186b0:	e001      	b.n	80186b6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80186b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80186b6:	4618      	mov	r0, r3
 80186b8:	3710      	adds	r7, #16
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
 80186be:	bf00      	nop
 80186c0:	080228ec 	.word	0x080228ec
 80186c4:	080229e0 	.word	0x080229e0
 80186c8:	08022974 	.word	0x08022974

080186cc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b082      	sub	sp, #8
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d109      	bne.n	80186ee <tcp_close+0x22>
 80186da:	4b0f      	ldr	r3, [pc, #60]	; (8018718 <tcp_close+0x4c>)
 80186dc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80186e0:	490e      	ldr	r1, [pc, #56]	; (801871c <tcp_close+0x50>)
 80186e2:	480f      	ldr	r0, [pc, #60]	; (8018720 <tcp_close+0x54>)
 80186e4:	f007 fa12 	bl	801fb0c <iprintf>
 80186e8:	f06f 030f 	mvn.w	r3, #15
 80186ec:	e00f      	b.n	801870e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	7d1b      	ldrb	r3, [r3, #20]
 80186f2:	2b01      	cmp	r3, #1
 80186f4:	d006      	beq.n	8018704 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	8b5b      	ldrh	r3, [r3, #26]
 80186fa:	f043 0310 	orr.w	r3, r3, #16
 80186fe:	b29a      	uxth	r2, r3
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8018704:	2101      	movs	r1, #1
 8018706:	6878      	ldr	r0, [r7, #4]
 8018708:	f7ff fe94 	bl	8018434 <tcp_close_shutdown>
 801870c:	4603      	mov	r3, r0
}
 801870e:	4618      	mov	r0, r3
 8018710:	3708      	adds	r7, #8
 8018712:	46bd      	mov	sp, r7
 8018714:	bd80      	pop	{r7, pc}
 8018716:	bf00      	nop
 8018718:	080228ec 	.word	0x080228ec
 801871c:	08022a40 	.word	0x08022a40
 8018720:	08022974 	.word	0x08022974

08018724 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b084      	sub	sp, #16
 8018728:	af00      	add	r7, sp, #0
 801872a:	60f8      	str	r0, [r7, #12]
 801872c:	60b9      	str	r1, [r7, #8]
 801872e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d109      	bne.n	801874a <tcp_shutdown+0x26>
 8018736:	4b26      	ldr	r3, [pc, #152]	; (80187d0 <tcp_shutdown+0xac>)
 8018738:	f240 2207 	movw	r2, #519	; 0x207
 801873c:	4925      	ldr	r1, [pc, #148]	; (80187d4 <tcp_shutdown+0xb0>)
 801873e:	4826      	ldr	r0, [pc, #152]	; (80187d8 <tcp_shutdown+0xb4>)
 8018740:	f007 f9e4 	bl	801fb0c <iprintf>
 8018744:	f06f 030f 	mvn.w	r3, #15
 8018748:	e03d      	b.n	80187c6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	7d1b      	ldrb	r3, [r3, #20]
 801874e:	2b01      	cmp	r3, #1
 8018750:	d102      	bne.n	8018758 <tcp_shutdown+0x34>
    return ERR_CONN;
 8018752:	f06f 030a 	mvn.w	r3, #10
 8018756:	e036      	b.n	80187c6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8018758:	68bb      	ldr	r3, [r7, #8]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d01b      	beq.n	8018796 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	8b5b      	ldrh	r3, [r3, #26]
 8018762:	f043 0310 	orr.w	r3, r3, #16
 8018766:	b29a      	uxth	r2, r3
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d005      	beq.n	801877e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8018772:	2101      	movs	r1, #1
 8018774:	68f8      	ldr	r0, [r7, #12]
 8018776:	f7ff fe5d 	bl	8018434 <tcp_close_shutdown>
 801877a:	4603      	mov	r3, r0
 801877c:	e023      	b.n	80187c6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018782:	2b00      	cmp	r3, #0
 8018784:	d007      	beq.n	8018796 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801878a:	4618      	mov	r0, r3
 801878c:	f7ff f912 	bl	80179b4 <pbuf_free>
      pcb->refused_data = NULL;
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	2200      	movs	r2, #0
 8018794:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d013      	beq.n	80187c4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	7d1b      	ldrb	r3, [r3, #20]
 80187a0:	2b04      	cmp	r3, #4
 80187a2:	dc02      	bgt.n	80187aa <tcp_shutdown+0x86>
 80187a4:	2b03      	cmp	r3, #3
 80187a6:	da02      	bge.n	80187ae <tcp_shutdown+0x8a>
 80187a8:	e009      	b.n	80187be <tcp_shutdown+0x9a>
 80187aa:	2b07      	cmp	r3, #7
 80187ac:	d107      	bne.n	80187be <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80187ae:	68bb      	ldr	r3, [r7, #8]
 80187b0:	b2db      	uxtb	r3, r3
 80187b2:	4619      	mov	r1, r3
 80187b4:	68f8      	ldr	r0, [r7, #12]
 80187b6:	f7ff fe3d 	bl	8018434 <tcp_close_shutdown>
 80187ba:	4603      	mov	r3, r0
 80187bc:	e003      	b.n	80187c6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80187be:	f06f 030a 	mvn.w	r3, #10
 80187c2:	e000      	b.n	80187c6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80187c4:	2300      	movs	r3, #0
}
 80187c6:	4618      	mov	r0, r3
 80187c8:	3710      	adds	r7, #16
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}
 80187ce:	bf00      	nop
 80187d0:	080228ec 	.word	0x080228ec
 80187d4:	08022a58 	.word	0x08022a58
 80187d8:	08022974 	.word	0x08022974

080187dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b08e      	sub	sp, #56	; 0x38
 80187e0:	af04      	add	r7, sp, #16
 80187e2:	6078      	str	r0, [r7, #4]
 80187e4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d107      	bne.n	80187fc <tcp_abandon+0x20>
 80187ec:	4b52      	ldr	r3, [pc, #328]	; (8018938 <tcp_abandon+0x15c>)
 80187ee:	f240 223d 	movw	r2, #573	; 0x23d
 80187f2:	4952      	ldr	r1, [pc, #328]	; (801893c <tcp_abandon+0x160>)
 80187f4:	4852      	ldr	r0, [pc, #328]	; (8018940 <tcp_abandon+0x164>)
 80187f6:	f007 f989 	bl	801fb0c <iprintf>
 80187fa:	e099      	b.n	8018930 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	7d1b      	ldrb	r3, [r3, #20]
 8018800:	2b01      	cmp	r3, #1
 8018802:	d106      	bne.n	8018812 <tcp_abandon+0x36>
 8018804:	4b4c      	ldr	r3, [pc, #304]	; (8018938 <tcp_abandon+0x15c>)
 8018806:	f44f 7210 	mov.w	r2, #576	; 0x240
 801880a:	494e      	ldr	r1, [pc, #312]	; (8018944 <tcp_abandon+0x168>)
 801880c:	484c      	ldr	r0, [pc, #304]	; (8018940 <tcp_abandon+0x164>)
 801880e:	f007 f97d 	bl	801fb0c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	7d1b      	ldrb	r3, [r3, #20]
 8018816:	2b0a      	cmp	r3, #10
 8018818:	d107      	bne.n	801882a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801881a:	6879      	ldr	r1, [r7, #4]
 801881c:	484a      	ldr	r0, [pc, #296]	; (8018948 <tcp_abandon+0x16c>)
 801881e:	f001 fa3d 	bl	8019c9c <tcp_pcb_remove>
    tcp_free(pcb);
 8018822:	6878      	ldr	r0, [r7, #4]
 8018824:	f7ff fd54 	bl	80182d0 <tcp_free>
 8018828:	e082      	b.n	8018930 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801882a:	2300      	movs	r3, #0
 801882c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801882e:	2300      	movs	r3, #0
 8018830:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018836:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801883c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018844:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	691b      	ldr	r3, [r3, #16]
 801884a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	7d1b      	ldrb	r3, [r3, #20]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d126      	bne.n	80188a2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	8adb      	ldrh	r3, [r3, #22]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d02e      	beq.n	80188ba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801885c:	4b3b      	ldr	r3, [pc, #236]	; (801894c <tcp_abandon+0x170>)
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	687a      	ldr	r2, [r7, #4]
 8018862:	429a      	cmp	r2, r3
 8018864:	d105      	bne.n	8018872 <tcp_abandon+0x96>
 8018866:	4b39      	ldr	r3, [pc, #228]	; (801894c <tcp_abandon+0x170>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	68db      	ldr	r3, [r3, #12]
 801886c:	4a37      	ldr	r2, [pc, #220]	; (801894c <tcp_abandon+0x170>)
 801886e:	6013      	str	r3, [r2, #0]
 8018870:	e013      	b.n	801889a <tcp_abandon+0xbe>
 8018872:	4b36      	ldr	r3, [pc, #216]	; (801894c <tcp_abandon+0x170>)
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	61fb      	str	r3, [r7, #28]
 8018878:	e00c      	b.n	8018894 <tcp_abandon+0xb8>
 801887a:	69fb      	ldr	r3, [r7, #28]
 801887c:	68db      	ldr	r3, [r3, #12]
 801887e:	687a      	ldr	r2, [r7, #4]
 8018880:	429a      	cmp	r2, r3
 8018882:	d104      	bne.n	801888e <tcp_abandon+0xb2>
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	68da      	ldr	r2, [r3, #12]
 8018888:	69fb      	ldr	r3, [r7, #28]
 801888a:	60da      	str	r2, [r3, #12]
 801888c:	e005      	b.n	801889a <tcp_abandon+0xbe>
 801888e:	69fb      	ldr	r3, [r7, #28]
 8018890:	68db      	ldr	r3, [r3, #12]
 8018892:	61fb      	str	r3, [r7, #28]
 8018894:	69fb      	ldr	r3, [r7, #28]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d1ef      	bne.n	801887a <tcp_abandon+0x9e>
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	2200      	movs	r2, #0
 801889e:	60da      	str	r2, [r3, #12]
 80188a0:	e00b      	b.n	80188ba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	8adb      	ldrh	r3, [r3, #22]
 80188aa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80188ac:	6879      	ldr	r1, [r7, #4]
 80188ae:	4828      	ldr	r0, [pc, #160]	; (8018950 <tcp_abandon+0x174>)
 80188b0:	f001 f9f4 	bl	8019c9c <tcp_pcb_remove>
 80188b4:	4b27      	ldr	r3, [pc, #156]	; (8018954 <tcp_abandon+0x178>)
 80188b6:	2201      	movs	r2, #1
 80188b8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d004      	beq.n	80188cc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80188c6:	4618      	mov	r0, r3
 80188c8:	f000 fec8 	bl	801965c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d004      	beq.n	80188de <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188d8:	4618      	mov	r0, r3
 80188da:	f000 febf 	bl	801965c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d004      	beq.n	80188f0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188ea:	4618      	mov	r0, r3
 80188ec:	f000 feb6 	bl	801965c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80188f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d00e      	beq.n	8018914 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80188f6:	6879      	ldr	r1, [r7, #4]
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	3304      	adds	r3, #4
 80188fc:	687a      	ldr	r2, [r7, #4]
 80188fe:	8b12      	ldrh	r2, [r2, #24]
 8018900:	9202      	str	r2, [sp, #8]
 8018902:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018904:	9201      	str	r2, [sp, #4]
 8018906:	9300      	str	r3, [sp, #0]
 8018908:	460b      	mov	r3, r1
 801890a:	697a      	ldr	r2, [r7, #20]
 801890c:	69b9      	ldr	r1, [r7, #24]
 801890e:	6878      	ldr	r0, [r7, #4]
 8018910:	f005 fb94 	bl	801e03c <tcp_rst>
    }
    last_state = pcb->state;
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	7d1b      	ldrb	r3, [r3, #20]
 8018918:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801891a:	6878      	ldr	r0, [r7, #4]
 801891c:	f7ff fcd8 	bl	80182d0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8018920:	693b      	ldr	r3, [r7, #16]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d004      	beq.n	8018930 <tcp_abandon+0x154>
 8018926:	693b      	ldr	r3, [r7, #16]
 8018928:	f06f 010c 	mvn.w	r1, #12
 801892c:	68f8      	ldr	r0, [r7, #12]
 801892e:	4798      	blx	r3
  }
}
 8018930:	3728      	adds	r7, #40	; 0x28
 8018932:	46bd      	mov	sp, r7
 8018934:	bd80      	pop	{r7, pc}
 8018936:	bf00      	nop
 8018938:	080228ec 	.word	0x080228ec
 801893c:	08022a74 	.word	0x08022a74
 8018940:	08022974 	.word	0x08022974
 8018944:	08022a90 	.word	0x08022a90
 8018948:	2400f930 	.word	0x2400f930
 801894c:	2400f924 	.word	0x2400f924
 8018950:	2400f92c 	.word	0x2400f92c
 8018954:	2400f934 	.word	0x2400f934

08018958 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b082      	sub	sp, #8
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8018960:	2101      	movs	r1, #1
 8018962:	6878      	ldr	r0, [r7, #4]
 8018964:	f7ff ff3a 	bl	80187dc <tcp_abandon>
}
 8018968:	bf00      	nop
 801896a:	3708      	adds	r7, #8
 801896c:	46bd      	mov	sp, r7
 801896e:	bd80      	pop	{r7, pc}

08018970 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018970:	b580      	push	{r7, lr}
 8018972:	b088      	sub	sp, #32
 8018974:	af00      	add	r7, sp, #0
 8018976:	60f8      	str	r0, [r7, #12]
 8018978:	60b9      	str	r1, [r7, #8]
 801897a:	4613      	mov	r3, r2
 801897c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801897e:	2304      	movs	r3, #4
 8018980:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018982:	68bb      	ldr	r3, [r7, #8]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d101      	bne.n	801898c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8018988:	4b3e      	ldr	r3, [pc, #248]	; (8018a84 <tcp_bind+0x114>)
 801898a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d109      	bne.n	80189a6 <tcp_bind+0x36>
 8018992:	4b3d      	ldr	r3, [pc, #244]	; (8018a88 <tcp_bind+0x118>)
 8018994:	f240 22a9 	movw	r2, #681	; 0x2a9
 8018998:	493c      	ldr	r1, [pc, #240]	; (8018a8c <tcp_bind+0x11c>)
 801899a:	483d      	ldr	r0, [pc, #244]	; (8018a90 <tcp_bind+0x120>)
 801899c:	f007 f8b6 	bl	801fb0c <iprintf>
 80189a0:	f06f 030f 	mvn.w	r3, #15
 80189a4:	e06a      	b.n	8018a7c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	7d1b      	ldrb	r3, [r3, #20]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d009      	beq.n	80189c2 <tcp_bind+0x52>
 80189ae:	4b36      	ldr	r3, [pc, #216]	; (8018a88 <tcp_bind+0x118>)
 80189b0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80189b4:	4937      	ldr	r1, [pc, #220]	; (8018a94 <tcp_bind+0x124>)
 80189b6:	4836      	ldr	r0, [pc, #216]	; (8018a90 <tcp_bind+0x120>)
 80189b8:	f007 f8a8 	bl	801fb0c <iprintf>
 80189bc:	f06f 0305 	mvn.w	r3, #5
 80189c0:	e05c      	b.n	8018a7c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80189c2:	88fb      	ldrh	r3, [r7, #6]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d109      	bne.n	80189dc <tcp_bind+0x6c>
    port = tcp_new_port();
 80189c8:	f000 f9e0 	bl	8018d8c <tcp_new_port>
 80189cc:	4603      	mov	r3, r0
 80189ce:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80189d0:	88fb      	ldrh	r3, [r7, #6]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d135      	bne.n	8018a42 <tcp_bind+0xd2>
      return ERR_BUF;
 80189d6:	f06f 0301 	mvn.w	r3, #1
 80189da:	e04f      	b.n	8018a7c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80189dc:	2300      	movs	r3, #0
 80189de:	61fb      	str	r3, [r7, #28]
 80189e0:	e02b      	b.n	8018a3a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80189e2:	4a2d      	ldr	r2, [pc, #180]	; (8018a98 <tcp_bind+0x128>)
 80189e4:	69fb      	ldr	r3, [r7, #28]
 80189e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	61bb      	str	r3, [r7, #24]
 80189ee:	e01e      	b.n	8018a2e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80189f0:	69bb      	ldr	r3, [r7, #24]
 80189f2:	8adb      	ldrh	r3, [r3, #22]
 80189f4:	88fa      	ldrh	r2, [r7, #6]
 80189f6:	429a      	cmp	r2, r3
 80189f8:	d116      	bne.n	8018a28 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80189fa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d010      	beq.n	8018a22 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8018a00:	69bb      	ldr	r3, [r7, #24]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d00c      	beq.n	8018a22 <tcp_bind+0xb2>
 8018a08:	68bb      	ldr	r3, [r7, #8]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d009      	beq.n	8018a22 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8018a0e:	68bb      	ldr	r3, [r7, #8]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d005      	beq.n	8018a22 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8018a16:	69bb      	ldr	r3, [r7, #24]
 8018a18:	681a      	ldr	r2, [r3, #0]
 8018a1a:	68bb      	ldr	r3, [r7, #8]
 8018a1c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018a1e:	429a      	cmp	r2, r3
 8018a20:	d102      	bne.n	8018a28 <tcp_bind+0xb8>
              return ERR_USE;
 8018a22:	f06f 0307 	mvn.w	r3, #7
 8018a26:	e029      	b.n	8018a7c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018a28:	69bb      	ldr	r3, [r7, #24]
 8018a2a:	68db      	ldr	r3, [r3, #12]
 8018a2c:	61bb      	str	r3, [r7, #24]
 8018a2e:	69bb      	ldr	r3, [r7, #24]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d1dd      	bne.n	80189f0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8018a34:	69fb      	ldr	r3, [r7, #28]
 8018a36:	3301      	adds	r3, #1
 8018a38:	61fb      	str	r3, [r7, #28]
 8018a3a:	69fa      	ldr	r2, [r7, #28]
 8018a3c:	697b      	ldr	r3, [r7, #20]
 8018a3e:	429a      	cmp	r2, r3
 8018a40:	dbcf      	blt.n	80189e2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d00c      	beq.n	8018a62 <tcp_bind+0xf2>
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d008      	beq.n	8018a62 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8018a50:	68bb      	ldr	r3, [r7, #8]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d002      	beq.n	8018a5c <tcp_bind+0xec>
 8018a56:	68bb      	ldr	r3, [r7, #8]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	e000      	b.n	8018a5e <tcp_bind+0xee>
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	68fa      	ldr	r2, [r7, #12]
 8018a60:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	88fa      	ldrh	r2, [r7, #6]
 8018a66:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8018a68:	4b0c      	ldr	r3, [pc, #48]	; (8018a9c <tcp_bind+0x12c>)
 8018a6a:	681a      	ldr	r2, [r3, #0]
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	60da      	str	r2, [r3, #12]
 8018a70:	4a0a      	ldr	r2, [pc, #40]	; (8018a9c <tcp_bind+0x12c>)
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	6013      	str	r3, [r2, #0]
 8018a76:	f005 fe5b 	bl	801e730 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8018a7a:	2300      	movs	r3, #0
}
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	3720      	adds	r7, #32
 8018a80:	46bd      	mov	sp, r7
 8018a82:	bd80      	pop	{r7, pc}
 8018a84:	08024428 	.word	0x08024428
 8018a88:	080228ec 	.word	0x080228ec
 8018a8c:	08022ac4 	.word	0x08022ac4
 8018a90:	08022974 	.word	0x08022974
 8018a94:	08022adc 	.word	0x08022adc
 8018a98:	0802451c 	.word	0x0802451c
 8018a9c:	2400f924 	.word	0x2400f924

08018aa0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b084      	sub	sp, #16
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	60f8      	str	r0, [r7, #12]
 8018aa8:	60b9      	str	r1, [r7, #8]
 8018aaa:	4613      	mov	r3, r2
 8018aac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8018aae:	68bb      	ldr	r3, [r7, #8]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d106      	bne.n	8018ac2 <tcp_accept_null+0x22>
 8018ab4:	4b07      	ldr	r3, [pc, #28]	; (8018ad4 <tcp_accept_null+0x34>)
 8018ab6:	f240 320f 	movw	r2, #783	; 0x30f
 8018aba:	4907      	ldr	r1, [pc, #28]	; (8018ad8 <tcp_accept_null+0x38>)
 8018abc:	4807      	ldr	r0, [pc, #28]	; (8018adc <tcp_accept_null+0x3c>)
 8018abe:	f007 f825 	bl	801fb0c <iprintf>

  tcp_abort(pcb);
 8018ac2:	68b8      	ldr	r0, [r7, #8]
 8018ac4:	f7ff ff48 	bl	8018958 <tcp_abort>

  return ERR_ABRT;
 8018ac8:	f06f 030c 	mvn.w	r3, #12
}
 8018acc:	4618      	mov	r0, r3
 8018ace:	3710      	adds	r7, #16
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	bd80      	pop	{r7, pc}
 8018ad4:	080228ec 	.word	0x080228ec
 8018ad8:	08022b04 	.word	0x08022b04
 8018adc:	08022974 	.word	0x08022974

08018ae0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8018ae0:	b580      	push	{r7, lr}
 8018ae2:	b088      	sub	sp, #32
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	60f8      	str	r0, [r7, #12]
 8018ae8:	460b      	mov	r3, r1
 8018aea:	607a      	str	r2, [r7, #4]
 8018aec:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8018aee:	2300      	movs	r3, #0
 8018af0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d109      	bne.n	8018b0c <tcp_listen_with_backlog_and_err+0x2c>
 8018af8:	4b47      	ldr	r3, [pc, #284]	; (8018c18 <tcp_listen_with_backlog_and_err+0x138>)
 8018afa:	f240 3259 	movw	r2, #857	; 0x359
 8018afe:	4947      	ldr	r1, [pc, #284]	; (8018c1c <tcp_listen_with_backlog_and_err+0x13c>)
 8018b00:	4847      	ldr	r0, [pc, #284]	; (8018c20 <tcp_listen_with_backlog_and_err+0x140>)
 8018b02:	f007 f803 	bl	801fb0c <iprintf>
 8018b06:	23f0      	movs	r3, #240	; 0xf0
 8018b08:	76fb      	strb	r3, [r7, #27]
 8018b0a:	e079      	b.n	8018c00 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	7d1b      	ldrb	r3, [r3, #20]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d009      	beq.n	8018b28 <tcp_listen_with_backlog_and_err+0x48>
 8018b14:	4b40      	ldr	r3, [pc, #256]	; (8018c18 <tcp_listen_with_backlog_and_err+0x138>)
 8018b16:	f240 325a 	movw	r2, #858	; 0x35a
 8018b1a:	4942      	ldr	r1, [pc, #264]	; (8018c24 <tcp_listen_with_backlog_and_err+0x144>)
 8018b1c:	4840      	ldr	r0, [pc, #256]	; (8018c20 <tcp_listen_with_backlog_and_err+0x140>)
 8018b1e:	f006 fff5 	bl	801fb0c <iprintf>
 8018b22:	23f1      	movs	r3, #241	; 0xf1
 8018b24:	76fb      	strb	r3, [r7, #27]
 8018b26:	e06b      	b.n	8018c00 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	7d1b      	ldrb	r3, [r3, #20]
 8018b2c:	2b01      	cmp	r3, #1
 8018b2e:	d104      	bne.n	8018b3a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8018b34:	23f7      	movs	r3, #247	; 0xf7
 8018b36:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018b38:	e062      	b.n	8018c00 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018b3a:	2002      	movs	r0, #2
 8018b3c:	f7fd ffd0 	bl	8016ae0 <memp_malloc>
 8018b40:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8018b42:	69fb      	ldr	r3, [r7, #28]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d102      	bne.n	8018b4e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8018b48:	23ff      	movs	r3, #255	; 0xff
 8018b4a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018b4c:	e058      	b.n	8018c00 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	691a      	ldr	r2, [r3, #16]
 8018b52:	69fb      	ldr	r3, [r7, #28]
 8018b54:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	8ada      	ldrh	r2, [r3, #22]
 8018b5a:	69fb      	ldr	r3, [r7, #28]
 8018b5c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8018b5e:	69fb      	ldr	r3, [r7, #28]
 8018b60:	2201      	movs	r2, #1
 8018b62:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	7d5a      	ldrb	r2, [r3, #21]
 8018b68:	69fb      	ldr	r3, [r7, #28]
 8018b6a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	7a5a      	ldrb	r2, [r3, #9]
 8018b70:	69fb      	ldr	r3, [r7, #28]
 8018b72:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8018b74:	69fb      	ldr	r3, [r7, #28]
 8018b76:	2200      	movs	r2, #0
 8018b78:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	7ada      	ldrb	r2, [r3, #11]
 8018b7e:	69fb      	ldr	r3, [r7, #28]
 8018b80:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	7a9a      	ldrb	r2, [r3, #10]
 8018b86:	69fb      	ldr	r3, [r7, #28]
 8018b88:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	681a      	ldr	r2, [r3, #0]
 8018b8e:	69fb      	ldr	r3, [r7, #28]
 8018b90:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	8adb      	ldrh	r3, [r3, #22]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d021      	beq.n	8018bde <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018b9a:	4b23      	ldr	r3, [pc, #140]	; (8018c28 <tcp_listen_with_backlog_and_err+0x148>)
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	68fa      	ldr	r2, [r7, #12]
 8018ba0:	429a      	cmp	r2, r3
 8018ba2:	d105      	bne.n	8018bb0 <tcp_listen_with_backlog_and_err+0xd0>
 8018ba4:	4b20      	ldr	r3, [pc, #128]	; (8018c28 <tcp_listen_with_backlog_and_err+0x148>)
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	68db      	ldr	r3, [r3, #12]
 8018baa:	4a1f      	ldr	r2, [pc, #124]	; (8018c28 <tcp_listen_with_backlog_and_err+0x148>)
 8018bac:	6013      	str	r3, [r2, #0]
 8018bae:	e013      	b.n	8018bd8 <tcp_listen_with_backlog_and_err+0xf8>
 8018bb0:	4b1d      	ldr	r3, [pc, #116]	; (8018c28 <tcp_listen_with_backlog_and_err+0x148>)
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	617b      	str	r3, [r7, #20]
 8018bb6:	e00c      	b.n	8018bd2 <tcp_listen_with_backlog_and_err+0xf2>
 8018bb8:	697b      	ldr	r3, [r7, #20]
 8018bba:	68db      	ldr	r3, [r3, #12]
 8018bbc:	68fa      	ldr	r2, [r7, #12]
 8018bbe:	429a      	cmp	r2, r3
 8018bc0:	d104      	bne.n	8018bcc <tcp_listen_with_backlog_and_err+0xec>
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	68da      	ldr	r2, [r3, #12]
 8018bc6:	697b      	ldr	r3, [r7, #20]
 8018bc8:	60da      	str	r2, [r3, #12]
 8018bca:	e005      	b.n	8018bd8 <tcp_listen_with_backlog_and_err+0xf8>
 8018bcc:	697b      	ldr	r3, [r7, #20]
 8018bce:	68db      	ldr	r3, [r3, #12]
 8018bd0:	617b      	str	r3, [r7, #20]
 8018bd2:	697b      	ldr	r3, [r7, #20]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d1ef      	bne.n	8018bb8 <tcp_listen_with_backlog_and_err+0xd8>
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	2200      	movs	r2, #0
 8018bdc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8018bde:	68f8      	ldr	r0, [r7, #12]
 8018be0:	f7ff fb76 	bl	80182d0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8018be4:	69fb      	ldr	r3, [r7, #28]
 8018be6:	4a11      	ldr	r2, [pc, #68]	; (8018c2c <tcp_listen_with_backlog_and_err+0x14c>)
 8018be8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018bea:	4b11      	ldr	r3, [pc, #68]	; (8018c30 <tcp_listen_with_backlog_and_err+0x150>)
 8018bec:	681a      	ldr	r2, [r3, #0]
 8018bee:	69fb      	ldr	r3, [r7, #28]
 8018bf0:	60da      	str	r2, [r3, #12]
 8018bf2:	4a0f      	ldr	r2, [pc, #60]	; (8018c30 <tcp_listen_with_backlog_and_err+0x150>)
 8018bf4:	69fb      	ldr	r3, [r7, #28]
 8018bf6:	6013      	str	r3, [r2, #0]
 8018bf8:	f005 fd9a 	bl	801e730 <tcp_timer_needed>
  res = ERR_OK;
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d002      	beq.n	8018c0c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	7efa      	ldrb	r2, [r7, #27]
 8018c0a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8018c0c:	69fb      	ldr	r3, [r7, #28]
}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	3720      	adds	r7, #32
 8018c12:	46bd      	mov	sp, r7
 8018c14:	bd80      	pop	{r7, pc}
 8018c16:	bf00      	nop
 8018c18:	080228ec 	.word	0x080228ec
 8018c1c:	08022b24 	.word	0x08022b24
 8018c20:	08022974 	.word	0x08022974
 8018c24:	08022b54 	.word	0x08022b54
 8018c28:	2400f924 	.word	0x2400f924
 8018c2c:	08018aa1 	.word	0x08018aa1
 8018c30:	2400f928 	.word	0x2400f928

08018c34 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b084      	sub	sp, #16
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d106      	bne.n	8018c50 <tcp_update_rcv_ann_wnd+0x1c>
 8018c42:	4b25      	ldr	r3, [pc, #148]	; (8018cd8 <tcp_update_rcv_ann_wnd+0xa4>)
 8018c44:	f240 32a6 	movw	r2, #934	; 0x3a6
 8018c48:	4924      	ldr	r1, [pc, #144]	; (8018cdc <tcp_update_rcv_ann_wnd+0xa8>)
 8018c4a:	4825      	ldr	r0, [pc, #148]	; (8018ce0 <tcp_update_rcv_ann_wnd+0xac>)
 8018c4c:	f006 ff5e 	bl	801fb0c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c54:	687a      	ldr	r2, [r7, #4]
 8018c56:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8018c58:	4413      	add	r3, r2
 8018c5a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c60:	687a      	ldr	r2, [r7, #4]
 8018c62:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8018c64:	f640 3168 	movw	r1, #2920	; 0xb68
 8018c68:	428a      	cmp	r2, r1
 8018c6a:	bf28      	it	cs
 8018c6c:	460a      	movcs	r2, r1
 8018c6e:	b292      	uxth	r2, r2
 8018c70:	4413      	add	r3, r2
 8018c72:	68fa      	ldr	r2, [r7, #12]
 8018c74:	1ad3      	subs	r3, r2, r3
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	db08      	blt.n	8018c8c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c86:	68fa      	ldr	r2, [r7, #12]
 8018c88:	1ad3      	subs	r3, r2, r3
 8018c8a:	e020      	b.n	8018cce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c94:	1ad3      	subs	r3, r2, r3
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	dd03      	ble.n	8018ca2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	2200      	movs	r2, #0
 8018c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8018ca0:	e014      	b.n	8018ccc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018caa:	1ad3      	subs	r3, r2, r3
 8018cac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018cae:	68bb      	ldr	r3, [r7, #8]
 8018cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018cb4:	d306      	bcc.n	8018cc4 <tcp_update_rcv_ann_wnd+0x90>
 8018cb6:	4b08      	ldr	r3, [pc, #32]	; (8018cd8 <tcp_update_rcv_ann_wnd+0xa4>)
 8018cb8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8018cbc:	4909      	ldr	r1, [pc, #36]	; (8018ce4 <tcp_update_rcv_ann_wnd+0xb0>)
 8018cbe:	4808      	ldr	r0, [pc, #32]	; (8018ce0 <tcp_update_rcv_ann_wnd+0xac>)
 8018cc0:	f006 ff24 	bl	801fb0c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8018cc4:	68bb      	ldr	r3, [r7, #8]
 8018cc6:	b29a      	uxth	r2, r3
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8018ccc:	2300      	movs	r3, #0
  }
}
 8018cce:	4618      	mov	r0, r3
 8018cd0:	3710      	adds	r7, #16
 8018cd2:	46bd      	mov	sp, r7
 8018cd4:	bd80      	pop	{r7, pc}
 8018cd6:	bf00      	nop
 8018cd8:	080228ec 	.word	0x080228ec
 8018cdc:	08022b8c 	.word	0x08022b8c
 8018ce0:	08022974 	.word	0x08022974
 8018ce4:	08022bb0 	.word	0x08022bb0

08018ce8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b084      	sub	sp, #16
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
 8018cf0:	460b      	mov	r3, r1
 8018cf2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d107      	bne.n	8018d0a <tcp_recved+0x22>
 8018cfa:	4b20      	ldr	r3, [pc, #128]	; (8018d7c <tcp_recved+0x94>)
 8018cfc:	f240 32cf 	movw	r2, #975	; 0x3cf
 8018d00:	491f      	ldr	r1, [pc, #124]	; (8018d80 <tcp_recved+0x98>)
 8018d02:	4820      	ldr	r0, [pc, #128]	; (8018d84 <tcp_recved+0x9c>)
 8018d04:	f006 ff02 	bl	801fb0c <iprintf>
 8018d08:	e034      	b.n	8018d74 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	7d1b      	ldrb	r3, [r3, #20]
 8018d0e:	2b01      	cmp	r3, #1
 8018d10:	d106      	bne.n	8018d20 <tcp_recved+0x38>
 8018d12:	4b1a      	ldr	r3, [pc, #104]	; (8018d7c <tcp_recved+0x94>)
 8018d14:	f240 32d2 	movw	r2, #978	; 0x3d2
 8018d18:	491b      	ldr	r1, [pc, #108]	; (8018d88 <tcp_recved+0xa0>)
 8018d1a:	481a      	ldr	r0, [pc, #104]	; (8018d84 <tcp_recved+0x9c>)
 8018d1c:	f006 fef6 	bl	801fb0c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018d24:	887b      	ldrh	r3, [r7, #2]
 8018d26:	4413      	add	r3, r2
 8018d28:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8018d2a:	89fb      	ldrh	r3, [r7, #14]
 8018d2c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8018d30:	4293      	cmp	r3, r2
 8018d32:	d804      	bhi.n	8018d3e <tcp_recved+0x56>
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d38:	89fa      	ldrh	r2, [r7, #14]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d204      	bcs.n	8018d48 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8018d44:	851a      	strh	r2, [r3, #40]	; 0x28
 8018d46:	e002      	b.n	8018d4e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	89fa      	ldrh	r2, [r7, #14]
 8018d4c:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8018d4e:	6878      	ldr	r0, [r7, #4]
 8018d50:	f7ff ff70 	bl	8018c34 <tcp_update_rcv_ann_wnd>
 8018d54:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8018d56:	68bb      	ldr	r3, [r7, #8]
 8018d58:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8018d5c:	4293      	cmp	r3, r2
 8018d5e:	d909      	bls.n	8018d74 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	8b5b      	ldrh	r3, [r3, #26]
 8018d64:	f043 0302 	orr.w	r3, r3, #2
 8018d68:	b29a      	uxth	r2, r3
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	f004 fbb0 	bl	801d4d4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8018d74:	3710      	adds	r7, #16
 8018d76:	46bd      	mov	sp, r7
 8018d78:	bd80      	pop	{r7, pc}
 8018d7a:	bf00      	nop
 8018d7c:	080228ec 	.word	0x080228ec
 8018d80:	08022bcc 	.word	0x08022bcc
 8018d84:	08022974 	.word	0x08022974
 8018d88:	08022be4 	.word	0x08022be4

08018d8c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8018d8c:	b480      	push	{r7}
 8018d8e:	b083      	sub	sp, #12
 8018d90:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8018d92:	2300      	movs	r3, #0
 8018d94:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8018d96:	4b1e      	ldr	r3, [pc, #120]	; (8018e10 <tcp_new_port+0x84>)
 8018d98:	881b      	ldrh	r3, [r3, #0]
 8018d9a:	3301      	adds	r3, #1
 8018d9c:	b29a      	uxth	r2, r3
 8018d9e:	4b1c      	ldr	r3, [pc, #112]	; (8018e10 <tcp_new_port+0x84>)
 8018da0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8018da2:	4b1b      	ldr	r3, [pc, #108]	; (8018e10 <tcp_new_port+0x84>)
 8018da4:	881b      	ldrh	r3, [r3, #0]
 8018da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018daa:	4293      	cmp	r3, r2
 8018dac:	d103      	bne.n	8018db6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018dae:	4b18      	ldr	r3, [pc, #96]	; (8018e10 <tcp_new_port+0x84>)
 8018db0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018db4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8018db6:	2300      	movs	r3, #0
 8018db8:	71fb      	strb	r3, [r7, #7]
 8018dba:	e01e      	b.n	8018dfa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018dbc:	79fb      	ldrb	r3, [r7, #7]
 8018dbe:	4a15      	ldr	r2, [pc, #84]	; (8018e14 <tcp_new_port+0x88>)
 8018dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	603b      	str	r3, [r7, #0]
 8018dc8:	e011      	b.n	8018dee <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8018dca:	683b      	ldr	r3, [r7, #0]
 8018dcc:	8ada      	ldrh	r2, [r3, #22]
 8018dce:	4b10      	ldr	r3, [pc, #64]	; (8018e10 <tcp_new_port+0x84>)
 8018dd0:	881b      	ldrh	r3, [r3, #0]
 8018dd2:	429a      	cmp	r2, r3
 8018dd4:	d108      	bne.n	8018de8 <tcp_new_port+0x5c>
        n++;
 8018dd6:	88bb      	ldrh	r3, [r7, #4]
 8018dd8:	3301      	adds	r3, #1
 8018dda:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8018ddc:	88bb      	ldrh	r3, [r7, #4]
 8018dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018de2:	d3d8      	bcc.n	8018d96 <tcp_new_port+0xa>
          return 0;
 8018de4:	2300      	movs	r3, #0
 8018de6:	e00d      	b.n	8018e04 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018de8:	683b      	ldr	r3, [r7, #0]
 8018dea:	68db      	ldr	r3, [r3, #12]
 8018dec:	603b      	str	r3, [r7, #0]
 8018dee:	683b      	ldr	r3, [r7, #0]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d1ea      	bne.n	8018dca <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8018df4:	79fb      	ldrb	r3, [r7, #7]
 8018df6:	3301      	adds	r3, #1
 8018df8:	71fb      	strb	r3, [r7, #7]
 8018dfa:	79fb      	ldrb	r3, [r7, #7]
 8018dfc:	2b03      	cmp	r3, #3
 8018dfe:	d9dd      	bls.n	8018dbc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8018e00:	4b03      	ldr	r3, [pc, #12]	; (8018e10 <tcp_new_port+0x84>)
 8018e02:	881b      	ldrh	r3, [r3, #0]
}
 8018e04:	4618      	mov	r0, r3
 8018e06:	370c      	adds	r7, #12
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0e:	4770      	bx	lr
 8018e10:	24000028 	.word	0x24000028
 8018e14:	0802451c 	.word	0x0802451c

08018e18 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8018e18:	b5b0      	push	{r4, r5, r7, lr}
 8018e1a:	b090      	sub	sp, #64	; 0x40
 8018e1c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8018e1e:	2300      	movs	r3, #0
 8018e20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8018e24:	4b94      	ldr	r3, [pc, #592]	; (8019078 <tcp_slowtmr+0x260>)
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	3301      	adds	r3, #1
 8018e2a:	4a93      	ldr	r2, [pc, #588]	; (8019078 <tcp_slowtmr+0x260>)
 8018e2c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8018e2e:	4b93      	ldr	r3, [pc, #588]	; (801907c <tcp_slowtmr+0x264>)
 8018e30:	781b      	ldrb	r3, [r3, #0]
 8018e32:	3301      	adds	r3, #1
 8018e34:	b2da      	uxtb	r2, r3
 8018e36:	4b91      	ldr	r3, [pc, #580]	; (801907c <tcp_slowtmr+0x264>)
 8018e38:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8018e3e:	4b90      	ldr	r3, [pc, #576]	; (8019080 <tcp_slowtmr+0x268>)
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8018e44:	e29d      	b.n	8019382 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8018e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e48:	7d1b      	ldrb	r3, [r3, #20]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d106      	bne.n	8018e5c <tcp_slowtmr+0x44>
 8018e4e:	4b8d      	ldr	r3, [pc, #564]	; (8019084 <tcp_slowtmr+0x26c>)
 8018e50:	f240 42be 	movw	r2, #1214	; 0x4be
 8018e54:	498c      	ldr	r1, [pc, #560]	; (8019088 <tcp_slowtmr+0x270>)
 8018e56:	488d      	ldr	r0, [pc, #564]	; (801908c <tcp_slowtmr+0x274>)
 8018e58:	f006 fe58 	bl	801fb0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e5e:	7d1b      	ldrb	r3, [r3, #20]
 8018e60:	2b01      	cmp	r3, #1
 8018e62:	d106      	bne.n	8018e72 <tcp_slowtmr+0x5a>
 8018e64:	4b87      	ldr	r3, [pc, #540]	; (8019084 <tcp_slowtmr+0x26c>)
 8018e66:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8018e6a:	4989      	ldr	r1, [pc, #548]	; (8019090 <tcp_slowtmr+0x278>)
 8018e6c:	4887      	ldr	r0, [pc, #540]	; (801908c <tcp_slowtmr+0x274>)
 8018e6e:	f006 fe4d 	bl	801fb0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8018e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e74:	7d1b      	ldrb	r3, [r3, #20]
 8018e76:	2b0a      	cmp	r3, #10
 8018e78:	d106      	bne.n	8018e88 <tcp_slowtmr+0x70>
 8018e7a:	4b82      	ldr	r3, [pc, #520]	; (8019084 <tcp_slowtmr+0x26c>)
 8018e7c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8018e80:	4984      	ldr	r1, [pc, #528]	; (8019094 <tcp_slowtmr+0x27c>)
 8018e82:	4882      	ldr	r0, [pc, #520]	; (801908c <tcp_slowtmr+0x274>)
 8018e84:	f006 fe42 	bl	801fb0c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8018e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e8a:	7f9a      	ldrb	r2, [r3, #30]
 8018e8c:	4b7b      	ldr	r3, [pc, #492]	; (801907c <tcp_slowtmr+0x264>)
 8018e8e:	781b      	ldrb	r3, [r3, #0]
 8018e90:	429a      	cmp	r2, r3
 8018e92:	d105      	bne.n	8018ea0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8018e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e9a:	68db      	ldr	r3, [r3, #12]
 8018e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8018e9e:	e270      	b.n	8019382 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8018ea0:	4b76      	ldr	r3, [pc, #472]	; (801907c <tcp_slowtmr+0x264>)
 8018ea2:	781a      	ldrb	r2, [r3, #0]
 8018ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ea6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8018eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eb6:	7d1b      	ldrb	r3, [r3, #20]
 8018eb8:	2b02      	cmp	r3, #2
 8018eba:	d10a      	bne.n	8018ed2 <tcp_slowtmr+0xba>
 8018ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018ec2:	2b05      	cmp	r3, #5
 8018ec4:	d905      	bls.n	8018ed2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8018ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018eca:	3301      	adds	r3, #1
 8018ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ed0:	e11e      	b.n	8019110 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8018ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ed4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018ed8:	2b0b      	cmp	r3, #11
 8018eda:	d905      	bls.n	8018ee8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8018edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ee0:	3301      	adds	r3, #1
 8018ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ee6:	e113      	b.n	8019110 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8018ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d075      	beq.n	8018fde <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8018ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d006      	beq.n	8018f08 <tcp_slowtmr+0xf0>
 8018efa:	4b62      	ldr	r3, [pc, #392]	; (8019084 <tcp_slowtmr+0x26c>)
 8018efc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8018f00:	4965      	ldr	r1, [pc, #404]	; (8019098 <tcp_slowtmr+0x280>)
 8018f02:	4862      	ldr	r0, [pc, #392]	; (801908c <tcp_slowtmr+0x274>)
 8018f04:	f006 fe02 	bl	801fb0c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8018f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d106      	bne.n	8018f1e <tcp_slowtmr+0x106>
 8018f10:	4b5c      	ldr	r3, [pc, #368]	; (8019084 <tcp_slowtmr+0x26c>)
 8018f12:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8018f16:	4961      	ldr	r1, [pc, #388]	; (801909c <tcp_slowtmr+0x284>)
 8018f18:	485c      	ldr	r0, [pc, #368]	; (801908c <tcp_slowtmr+0x274>)
 8018f1a:	f006 fdf7 	bl	801fb0c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8018f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f20:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018f24:	2b0b      	cmp	r3, #11
 8018f26:	d905      	bls.n	8018f34 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8018f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f2c:	3301      	adds	r3, #1
 8018f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018f32:	e0ed      	b.n	8019110 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8018f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018f3a:	3b01      	subs	r3, #1
 8018f3c:	4a58      	ldr	r2, [pc, #352]	; (80190a0 <tcp_slowtmr+0x288>)
 8018f3e:	5cd3      	ldrb	r3, [r2, r3]
 8018f40:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8018f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8018f48:	7c7a      	ldrb	r2, [r7, #17]
 8018f4a:	429a      	cmp	r2, r3
 8018f4c:	d907      	bls.n	8018f5e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8018f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8018f54:	3301      	adds	r3, #1
 8018f56:	b2da      	uxtb	r2, r3
 8018f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f5a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8018f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8018f64:	7c7a      	ldrb	r2, [r7, #17]
 8018f66:	429a      	cmp	r2, r3
 8018f68:	f200 80d2 	bhi.w	8019110 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8018f6c:	2301      	movs	r3, #1
 8018f6e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8018f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d108      	bne.n	8018f8c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8018f7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018f7c:	f005 f952 	bl	801e224 <tcp_zero_window_probe>
 8018f80:	4603      	mov	r3, r0
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d014      	beq.n	8018fb0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8018f86:	2300      	movs	r3, #0
 8018f88:	623b      	str	r3, [r7, #32]
 8018f8a:	e011      	b.n	8018fb0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8018f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018f92:	4619      	mov	r1, r3
 8018f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018f96:	f004 f817 	bl	801cfc8 <tcp_split_unsent_seg>
 8018f9a:	4603      	mov	r3, r0
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d107      	bne.n	8018fb0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8018fa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018fa2:	f004 fa97 	bl	801d4d4 <tcp_output>
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d101      	bne.n	8018fb0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8018fac:	2300      	movs	r3, #0
 8018fae:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8018fb0:	6a3b      	ldr	r3, [r7, #32]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	f000 80ac 	beq.w	8019110 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8018fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fba:	2200      	movs	r2, #0
 8018fbc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8018fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018fc6:	2b06      	cmp	r3, #6
 8018fc8:	f200 80a2 	bhi.w	8019110 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8018fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018fd2:	3301      	adds	r3, #1
 8018fd4:	b2da      	uxtb	r2, r3
 8018fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fd8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8018fdc:	e098      	b.n	8019110 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8018fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fe0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	db0f      	blt.n	8019008 <tcp_slowtmr+0x1f0>
 8018fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018fee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018ff2:	4293      	cmp	r3, r2
 8018ff4:	d008      	beq.n	8019008 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8018ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ff8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018ffc:	b29b      	uxth	r3, r3
 8018ffe:	3301      	adds	r3, #1
 8019000:	b29b      	uxth	r3, r3
 8019002:	b21a      	sxth	r2, r3
 8019004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019006:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8019008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801900a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019010:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019014:	429a      	cmp	r2, r3
 8019016:	db7b      	blt.n	8019110 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8019018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801901a:	f004 fd4d 	bl	801dab8 <tcp_rexmit_rto_prepare>
 801901e:	4603      	mov	r3, r0
 8019020:	2b00      	cmp	r3, #0
 8019022:	d007      	beq.n	8019034 <tcp_slowtmr+0x21c>
 8019024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019028:	2b00      	cmp	r3, #0
 801902a:	d171      	bne.n	8019110 <tcp_slowtmr+0x2f8>
 801902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801902e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019030:	2b00      	cmp	r3, #0
 8019032:	d06d      	beq.n	8019110 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8019034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019036:	7d1b      	ldrb	r3, [r3, #20]
 8019038:	2b02      	cmp	r3, #2
 801903a:	d03a      	beq.n	80190b2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801903e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019042:	2b0c      	cmp	r3, #12
 8019044:	bf28      	it	cs
 8019046:	230c      	movcs	r3, #12
 8019048:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801904c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019050:	10db      	asrs	r3, r3, #3
 8019052:	b21b      	sxth	r3, r3
 8019054:	461a      	mov	r2, r3
 8019056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019058:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801905c:	4413      	add	r3, r2
 801905e:	7efa      	ldrb	r2, [r7, #27]
 8019060:	4910      	ldr	r1, [pc, #64]	; (80190a4 <tcp_slowtmr+0x28c>)
 8019062:	5c8a      	ldrb	r2, [r1, r2]
 8019064:	4093      	lsls	r3, r2
 8019066:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8019068:	697b      	ldr	r3, [r7, #20]
 801906a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801906e:	4293      	cmp	r3, r2
 8019070:	dc1a      	bgt.n	80190a8 <tcp_slowtmr+0x290>
 8019072:	697b      	ldr	r3, [r7, #20]
 8019074:	b21a      	sxth	r2, r3
 8019076:	e019      	b.n	80190ac <tcp_slowtmr+0x294>
 8019078:	2400f920 	.word	0x2400f920
 801907c:	2400f936 	.word	0x2400f936
 8019080:	2400f92c 	.word	0x2400f92c
 8019084:	080228ec 	.word	0x080228ec
 8019088:	08022c74 	.word	0x08022c74
 801908c:	08022974 	.word	0x08022974
 8019090:	08022ca0 	.word	0x08022ca0
 8019094:	08022ccc 	.word	0x08022ccc
 8019098:	08022cfc 	.word	0x08022cfc
 801909c:	08022d30 	.word	0x08022d30
 80190a0:	08024514 	.word	0x08024514
 80190a4:	08024504 	.word	0x08024504
 80190a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80190ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80190b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190b4:	2200      	movs	r2, #0
 80190b6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80190b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80190be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80190c4:	4293      	cmp	r3, r2
 80190c6:	bf28      	it	cs
 80190c8:	4613      	movcs	r3, r2
 80190ca:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80190cc:	8a7b      	ldrh	r3, [r7, #18]
 80190ce:	085b      	lsrs	r3, r3, #1
 80190d0:	b29a      	uxth	r2, r3
 80190d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80190d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80190de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80190e2:	005b      	lsls	r3, r3, #1
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	429a      	cmp	r2, r3
 80190e8:	d206      	bcs.n	80190f8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80190ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80190ee:	005b      	lsls	r3, r3, #1
 80190f0:	b29a      	uxth	r2, r3
 80190f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80190f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190fa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80190fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8019102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019104:	2200      	movs	r2, #0
 8019106:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801910a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801910c:	f004 fd44 	bl	801db98 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8019110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019112:	7d1b      	ldrb	r3, [r3, #20]
 8019114:	2b06      	cmp	r3, #6
 8019116:	d111      	bne.n	801913c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8019118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801911a:	8b5b      	ldrh	r3, [r3, #26]
 801911c:	f003 0310 	and.w	r3, r3, #16
 8019120:	2b00      	cmp	r3, #0
 8019122:	d00b      	beq.n	801913c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019124:	4b9c      	ldr	r3, [pc, #624]	; (8019398 <tcp_slowtmr+0x580>)
 8019126:	681a      	ldr	r2, [r3, #0]
 8019128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801912a:	6a1b      	ldr	r3, [r3, #32]
 801912c:	1ad3      	subs	r3, r2, r3
 801912e:	2b28      	cmp	r3, #40	; 0x28
 8019130:	d904      	bls.n	801913c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8019132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019136:	3301      	adds	r3, #1
 8019138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801913e:	7a5b      	ldrb	r3, [r3, #9]
 8019140:	f003 0308 	and.w	r3, r3, #8
 8019144:	2b00      	cmp	r3, #0
 8019146:	d04a      	beq.n	80191de <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8019148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801914a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801914c:	2b04      	cmp	r3, #4
 801914e:	d003      	beq.n	8019158 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8019150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019152:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8019154:	2b07      	cmp	r3, #7
 8019156:	d142      	bne.n	80191de <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019158:	4b8f      	ldr	r3, [pc, #572]	; (8019398 <tcp_slowtmr+0x580>)
 801915a:	681a      	ldr	r2, [r3, #0]
 801915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801915e:	6a1b      	ldr	r3, [r3, #32]
 8019160:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019164:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8019168:	4b8c      	ldr	r3, [pc, #560]	; (801939c <tcp_slowtmr+0x584>)
 801916a:	440b      	add	r3, r1
 801916c:	498c      	ldr	r1, [pc, #560]	; (80193a0 <tcp_slowtmr+0x588>)
 801916e:	fba1 1303 	umull	r1, r3, r1, r3
 8019172:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019174:	429a      	cmp	r2, r3
 8019176:	d90a      	bls.n	801918e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8019178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801917c:	3301      	adds	r3, #1
 801917e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8019182:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019186:	3301      	adds	r3, #1
 8019188:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801918c:	e027      	b.n	80191de <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801918e:	4b82      	ldr	r3, [pc, #520]	; (8019398 <tcp_slowtmr+0x580>)
 8019190:	681a      	ldr	r2, [r3, #0]
 8019192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019194:	6a1b      	ldr	r3, [r3, #32]
 8019196:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8019198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801919a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191a0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80191a4:	4618      	mov	r0, r3
 80191a6:	4b7f      	ldr	r3, [pc, #508]	; (80193a4 <tcp_slowtmr+0x58c>)
 80191a8:	fb00 f303 	mul.w	r3, r0, r3
 80191ac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80191ae:	497c      	ldr	r1, [pc, #496]	; (80193a0 <tcp_slowtmr+0x588>)
 80191b0:	fba1 1303 	umull	r1, r3, r1, r3
 80191b4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80191b6:	429a      	cmp	r2, r3
 80191b8:	d911      	bls.n	80191de <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80191ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80191bc:	f004 fff2 	bl	801e1a4 <tcp_keepalive>
 80191c0:	4603      	mov	r3, r0
 80191c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80191c6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d107      	bne.n	80191de <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80191ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80191d4:	3301      	adds	r3, #1
 80191d6:	b2da      	uxtb	r2, r3
 80191d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191da:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80191de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d011      	beq.n	801920a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80191e6:	4b6c      	ldr	r3, [pc, #432]	; (8019398 <tcp_slowtmr+0x580>)
 80191e8:	681a      	ldr	r2, [r3, #0]
 80191ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ec:	6a1b      	ldr	r3, [r3, #32]
 80191ee:	1ad2      	subs	r2, r2, r3
 80191f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80191f6:	4619      	mov	r1, r3
 80191f8:	460b      	mov	r3, r1
 80191fa:	005b      	lsls	r3, r3, #1
 80191fc:	440b      	add	r3, r1
 80191fe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8019200:	429a      	cmp	r2, r3
 8019202:	d302      	bcc.n	801920a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8019204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019206:	f000 fead 	bl	8019f64 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801920c:	7d1b      	ldrb	r3, [r3, #20]
 801920e:	2b03      	cmp	r3, #3
 8019210:	d10b      	bne.n	801922a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019212:	4b61      	ldr	r3, [pc, #388]	; (8019398 <tcp_slowtmr+0x580>)
 8019214:	681a      	ldr	r2, [r3, #0]
 8019216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019218:	6a1b      	ldr	r3, [r3, #32]
 801921a:	1ad3      	subs	r3, r2, r3
 801921c:	2b28      	cmp	r3, #40	; 0x28
 801921e:	d904      	bls.n	801922a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8019220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019224:	3301      	adds	r3, #1
 8019226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801922a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801922c:	7d1b      	ldrb	r3, [r3, #20]
 801922e:	2b09      	cmp	r3, #9
 8019230:	d10b      	bne.n	801924a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019232:	4b59      	ldr	r3, [pc, #356]	; (8019398 <tcp_slowtmr+0x580>)
 8019234:	681a      	ldr	r2, [r3, #0]
 8019236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019238:	6a1b      	ldr	r3, [r3, #32]
 801923a:	1ad3      	subs	r3, r2, r3
 801923c:	2bf0      	cmp	r3, #240	; 0xf0
 801923e:	d904      	bls.n	801924a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8019240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019244:	3301      	adds	r3, #1
 8019246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801924a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801924e:	2b00      	cmp	r3, #0
 8019250:	d060      	beq.n	8019314 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8019252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019258:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801925a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801925c:	f000 fcce 	bl	8019bfc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8019260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019262:	2b00      	cmp	r3, #0
 8019264:	d010      	beq.n	8019288 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019266:	4b50      	ldr	r3, [pc, #320]	; (80193a8 <tcp_slowtmr+0x590>)
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801926c:	429a      	cmp	r2, r3
 801926e:	d106      	bne.n	801927e <tcp_slowtmr+0x466>
 8019270:	4b4e      	ldr	r3, [pc, #312]	; (80193ac <tcp_slowtmr+0x594>)
 8019272:	f240 526d 	movw	r2, #1389	; 0x56d
 8019276:	494e      	ldr	r1, [pc, #312]	; (80193b0 <tcp_slowtmr+0x598>)
 8019278:	484e      	ldr	r0, [pc, #312]	; (80193b4 <tcp_slowtmr+0x59c>)
 801927a:	f006 fc47 	bl	801fb0c <iprintf>
        prev->next = pcb->next;
 801927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019280:	68da      	ldr	r2, [r3, #12]
 8019282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019284:	60da      	str	r2, [r3, #12]
 8019286:	e00f      	b.n	80192a8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8019288:	4b47      	ldr	r3, [pc, #284]	; (80193a8 <tcp_slowtmr+0x590>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801928e:	429a      	cmp	r2, r3
 8019290:	d006      	beq.n	80192a0 <tcp_slowtmr+0x488>
 8019292:	4b46      	ldr	r3, [pc, #280]	; (80193ac <tcp_slowtmr+0x594>)
 8019294:	f240 5271 	movw	r2, #1393	; 0x571
 8019298:	4947      	ldr	r1, [pc, #284]	; (80193b8 <tcp_slowtmr+0x5a0>)
 801929a:	4846      	ldr	r0, [pc, #280]	; (80193b4 <tcp_slowtmr+0x59c>)
 801929c:	f006 fc36 	bl	801fb0c <iprintf>
        tcp_active_pcbs = pcb->next;
 80192a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192a2:	68db      	ldr	r3, [r3, #12]
 80192a4:	4a40      	ldr	r2, [pc, #256]	; (80193a8 <tcp_slowtmr+0x590>)
 80192a6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80192a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d013      	beq.n	80192d8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80192b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192b2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80192b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80192b8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80192ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192bc:	3304      	adds	r3, #4
 80192be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192c0:	8ad2      	ldrh	r2, [r2, #22]
 80192c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80192c4:	8b09      	ldrh	r1, [r1, #24]
 80192c6:	9102      	str	r1, [sp, #8]
 80192c8:	9201      	str	r2, [sp, #4]
 80192ca:	9300      	str	r3, [sp, #0]
 80192cc:	462b      	mov	r3, r5
 80192ce:	4622      	mov	r2, r4
 80192d0:	4601      	mov	r1, r0
 80192d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80192d4:	f004 feb2 	bl	801e03c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80192d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192da:	691b      	ldr	r3, [r3, #16]
 80192dc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80192de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192e0:	7d1b      	ldrb	r3, [r3, #20]
 80192e2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80192e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192e6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80192e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ea:	68db      	ldr	r3, [r3, #12]
 80192ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80192ee:	6838      	ldr	r0, [r7, #0]
 80192f0:	f7fe ffee 	bl	80182d0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80192f4:	4b31      	ldr	r3, [pc, #196]	; (80193bc <tcp_slowtmr+0x5a4>)
 80192f6:	2200      	movs	r2, #0
 80192f8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d004      	beq.n	801930a <tcp_slowtmr+0x4f2>
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	f06f 010c 	mvn.w	r1, #12
 8019306:	68b8      	ldr	r0, [r7, #8]
 8019308:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801930a:	4b2c      	ldr	r3, [pc, #176]	; (80193bc <tcp_slowtmr+0x5a4>)
 801930c:	781b      	ldrb	r3, [r3, #0]
 801930e:	2b00      	cmp	r3, #0
 8019310:	d037      	beq.n	8019382 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8019312:	e592      	b.n	8018e3a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8019314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019316:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801931a:	68db      	ldr	r3, [r3, #12]
 801931c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801931e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019320:	7f1b      	ldrb	r3, [r3, #28]
 8019322:	3301      	adds	r3, #1
 8019324:	b2da      	uxtb	r2, r3
 8019326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019328:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801932c:	7f1a      	ldrb	r2, [r3, #28]
 801932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019330:	7f5b      	ldrb	r3, [r3, #29]
 8019332:	429a      	cmp	r2, r3
 8019334:	d325      	bcc.n	8019382 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8019336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019338:	2200      	movs	r2, #0
 801933a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801933c:	4b1f      	ldr	r3, [pc, #124]	; (80193bc <tcp_slowtmr+0x5a4>)
 801933e:	2200      	movs	r2, #0
 8019340:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8019342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019348:	2b00      	cmp	r3, #0
 801934a:	d00b      	beq.n	8019364 <tcp_slowtmr+0x54c>
 801934c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801934e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019354:	6912      	ldr	r2, [r2, #16]
 8019356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019358:	4610      	mov	r0, r2
 801935a:	4798      	blx	r3
 801935c:	4603      	mov	r3, r0
 801935e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8019362:	e002      	b.n	801936a <tcp_slowtmr+0x552>
 8019364:	2300      	movs	r3, #0
 8019366:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801936a:	4b14      	ldr	r3, [pc, #80]	; (80193bc <tcp_slowtmr+0x5a4>)
 801936c:	781b      	ldrb	r3, [r3, #0]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d000      	beq.n	8019374 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8019372:	e562      	b.n	8018e3a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8019374:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019378:	2b00      	cmp	r3, #0
 801937a:	d102      	bne.n	8019382 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801937c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801937e:	f004 f8a9 	bl	801d4d4 <tcp_output>
  while (pcb != NULL) {
 8019382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019384:	2b00      	cmp	r3, #0
 8019386:	f47f ad5e 	bne.w	8018e46 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801938a:	2300      	movs	r3, #0
 801938c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801938e:	4b0c      	ldr	r3, [pc, #48]	; (80193c0 <tcp_slowtmr+0x5a8>)
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8019394:	e069      	b.n	801946a <tcp_slowtmr+0x652>
 8019396:	bf00      	nop
 8019398:	2400f920 	.word	0x2400f920
 801939c:	000a4cb8 	.word	0x000a4cb8
 80193a0:	10624dd3 	.word	0x10624dd3
 80193a4:	000124f8 	.word	0x000124f8
 80193a8:	2400f92c 	.word	0x2400f92c
 80193ac:	080228ec 	.word	0x080228ec
 80193b0:	08022d68 	.word	0x08022d68
 80193b4:	08022974 	.word	0x08022974
 80193b8:	08022d94 	.word	0x08022d94
 80193bc:	2400f934 	.word	0x2400f934
 80193c0:	2400f930 	.word	0x2400f930
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80193c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193c6:	7d1b      	ldrb	r3, [r3, #20]
 80193c8:	2b0a      	cmp	r3, #10
 80193ca:	d006      	beq.n	80193da <tcp_slowtmr+0x5c2>
 80193cc:	4b2b      	ldr	r3, [pc, #172]	; (801947c <tcp_slowtmr+0x664>)
 80193ce:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80193d2:	492b      	ldr	r1, [pc, #172]	; (8019480 <tcp_slowtmr+0x668>)
 80193d4:	482b      	ldr	r0, [pc, #172]	; (8019484 <tcp_slowtmr+0x66c>)
 80193d6:	f006 fb99 	bl	801fb0c <iprintf>
    pcb_remove = 0;
 80193da:	2300      	movs	r3, #0
 80193dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80193e0:	4b29      	ldr	r3, [pc, #164]	; (8019488 <tcp_slowtmr+0x670>)
 80193e2:	681a      	ldr	r2, [r3, #0]
 80193e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193e6:	6a1b      	ldr	r3, [r3, #32]
 80193e8:	1ad3      	subs	r3, r2, r3
 80193ea:	2bf0      	cmp	r3, #240	; 0xf0
 80193ec:	d904      	bls.n	80193f8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80193ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193f2:	3301      	adds	r3, #1
 80193f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80193f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d02f      	beq.n	8019460 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8019400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019402:	f000 fbfb 	bl	8019bfc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8019406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019408:	2b00      	cmp	r3, #0
 801940a:	d010      	beq.n	801942e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801940c:	4b1f      	ldr	r3, [pc, #124]	; (801948c <tcp_slowtmr+0x674>)
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019412:	429a      	cmp	r2, r3
 8019414:	d106      	bne.n	8019424 <tcp_slowtmr+0x60c>
 8019416:	4b19      	ldr	r3, [pc, #100]	; (801947c <tcp_slowtmr+0x664>)
 8019418:	f240 52af 	movw	r2, #1455	; 0x5af
 801941c:	491c      	ldr	r1, [pc, #112]	; (8019490 <tcp_slowtmr+0x678>)
 801941e:	4819      	ldr	r0, [pc, #100]	; (8019484 <tcp_slowtmr+0x66c>)
 8019420:	f006 fb74 	bl	801fb0c <iprintf>
        prev->next = pcb->next;
 8019424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019426:	68da      	ldr	r2, [r3, #12]
 8019428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801942a:	60da      	str	r2, [r3, #12]
 801942c:	e00f      	b.n	801944e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801942e:	4b17      	ldr	r3, [pc, #92]	; (801948c <tcp_slowtmr+0x674>)
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019434:	429a      	cmp	r2, r3
 8019436:	d006      	beq.n	8019446 <tcp_slowtmr+0x62e>
 8019438:	4b10      	ldr	r3, [pc, #64]	; (801947c <tcp_slowtmr+0x664>)
 801943a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801943e:	4915      	ldr	r1, [pc, #84]	; (8019494 <tcp_slowtmr+0x67c>)
 8019440:	4810      	ldr	r0, [pc, #64]	; (8019484 <tcp_slowtmr+0x66c>)
 8019442:	f006 fb63 	bl	801fb0c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8019446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019448:	68db      	ldr	r3, [r3, #12]
 801944a:	4a10      	ldr	r2, [pc, #64]	; (801948c <tcp_slowtmr+0x674>)
 801944c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801944e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019450:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8019452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019454:	68db      	ldr	r3, [r3, #12]
 8019456:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8019458:	69f8      	ldr	r0, [r7, #28]
 801945a:	f7fe ff39 	bl	80182d0 <tcp_free>
 801945e:	e004      	b.n	801946a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8019460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019462:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019466:	68db      	ldr	r3, [r3, #12]
 8019468:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801946a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801946c:	2b00      	cmp	r3, #0
 801946e:	d1a9      	bne.n	80193c4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8019470:	bf00      	nop
 8019472:	bf00      	nop
 8019474:	3730      	adds	r7, #48	; 0x30
 8019476:	46bd      	mov	sp, r7
 8019478:	bdb0      	pop	{r4, r5, r7, pc}
 801947a:	bf00      	nop
 801947c:	080228ec 	.word	0x080228ec
 8019480:	08022dc0 	.word	0x08022dc0
 8019484:	08022974 	.word	0x08022974
 8019488:	2400f920 	.word	0x2400f920
 801948c:	2400f930 	.word	0x2400f930
 8019490:	08022df0 	.word	0x08022df0
 8019494:	08022e18 	.word	0x08022e18

08019498 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8019498:	b580      	push	{r7, lr}
 801949a:	b082      	sub	sp, #8
 801949c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801949e:	4b2d      	ldr	r3, [pc, #180]	; (8019554 <tcp_fasttmr+0xbc>)
 80194a0:	781b      	ldrb	r3, [r3, #0]
 80194a2:	3301      	adds	r3, #1
 80194a4:	b2da      	uxtb	r2, r3
 80194a6:	4b2b      	ldr	r3, [pc, #172]	; (8019554 <tcp_fasttmr+0xbc>)
 80194a8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80194aa:	4b2b      	ldr	r3, [pc, #172]	; (8019558 <tcp_fasttmr+0xc0>)
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80194b0:	e048      	b.n	8019544 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	7f9a      	ldrb	r2, [r3, #30]
 80194b6:	4b27      	ldr	r3, [pc, #156]	; (8019554 <tcp_fasttmr+0xbc>)
 80194b8:	781b      	ldrb	r3, [r3, #0]
 80194ba:	429a      	cmp	r2, r3
 80194bc:	d03f      	beq.n	801953e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80194be:	4b25      	ldr	r3, [pc, #148]	; (8019554 <tcp_fasttmr+0xbc>)
 80194c0:	781a      	ldrb	r2, [r3, #0]
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	8b5b      	ldrh	r3, [r3, #26]
 80194ca:	f003 0301 	and.w	r3, r3, #1
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d010      	beq.n	80194f4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	8b5b      	ldrh	r3, [r3, #26]
 80194d6:	f043 0302 	orr.w	r3, r3, #2
 80194da:	b29a      	uxth	r2, r3
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80194e0:	6878      	ldr	r0, [r7, #4]
 80194e2:	f003 fff7 	bl	801d4d4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	8b5b      	ldrh	r3, [r3, #26]
 80194ea:	f023 0303 	bic.w	r3, r3, #3
 80194ee:	b29a      	uxth	r2, r3
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	8b5b      	ldrh	r3, [r3, #26]
 80194f8:	f003 0308 	and.w	r3, r3, #8
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d009      	beq.n	8019514 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	8b5b      	ldrh	r3, [r3, #26]
 8019504:	f023 0308 	bic.w	r3, r3, #8
 8019508:	b29a      	uxth	r2, r3
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801950e:	6878      	ldr	r0, [r7, #4]
 8019510:	f7ff f872 	bl	80185f8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	68db      	ldr	r3, [r3, #12]
 8019518:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801951e:	2b00      	cmp	r3, #0
 8019520:	d00a      	beq.n	8019538 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8019522:	4b0e      	ldr	r3, [pc, #56]	; (801955c <tcp_fasttmr+0xc4>)
 8019524:	2200      	movs	r2, #0
 8019526:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8019528:	6878      	ldr	r0, [r7, #4]
 801952a:	f000 f819 	bl	8019560 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801952e:	4b0b      	ldr	r3, [pc, #44]	; (801955c <tcp_fasttmr+0xc4>)
 8019530:	781b      	ldrb	r3, [r3, #0]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d000      	beq.n	8019538 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8019536:	e7b8      	b.n	80194aa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8019538:	683b      	ldr	r3, [r7, #0]
 801953a:	607b      	str	r3, [r7, #4]
 801953c:	e002      	b.n	8019544 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	68db      	ldr	r3, [r3, #12]
 8019542:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	2b00      	cmp	r3, #0
 8019548:	d1b3      	bne.n	80194b2 <tcp_fasttmr+0x1a>
    }
  }
}
 801954a:	bf00      	nop
 801954c:	bf00      	nop
 801954e:	3708      	adds	r7, #8
 8019550:	46bd      	mov	sp, r7
 8019552:	bd80      	pop	{r7, pc}
 8019554:	2400f936 	.word	0x2400f936
 8019558:	2400f92c 	.word	0x2400f92c
 801955c:	2400f934 	.word	0x2400f934

08019560 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8019560:	b590      	push	{r4, r7, lr}
 8019562:	b085      	sub	sp, #20
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	2b00      	cmp	r3, #0
 801956c:	d109      	bne.n	8019582 <tcp_process_refused_data+0x22>
 801956e:	4b38      	ldr	r3, [pc, #224]	; (8019650 <tcp_process_refused_data+0xf0>)
 8019570:	f240 6209 	movw	r2, #1545	; 0x609
 8019574:	4937      	ldr	r1, [pc, #220]	; (8019654 <tcp_process_refused_data+0xf4>)
 8019576:	4838      	ldr	r0, [pc, #224]	; (8019658 <tcp_process_refused_data+0xf8>)
 8019578:	f006 fac8 	bl	801fb0c <iprintf>
 801957c:	f06f 030f 	mvn.w	r3, #15
 8019580:	e061      	b.n	8019646 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019586:	7b5b      	ldrb	r3, [r3, #13]
 8019588:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801958e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	2200      	movs	r2, #0
 8019594:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801959c:	2b00      	cmp	r3, #0
 801959e:	d00b      	beq.n	80195b8 <tcp_process_refused_data+0x58>
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	6918      	ldr	r0, [r3, #16]
 80195aa:	2300      	movs	r3, #0
 80195ac:	68ba      	ldr	r2, [r7, #8]
 80195ae:	6879      	ldr	r1, [r7, #4]
 80195b0:	47a0      	blx	r4
 80195b2:	4603      	mov	r3, r0
 80195b4:	73fb      	strb	r3, [r7, #15]
 80195b6:	e007      	b.n	80195c8 <tcp_process_refused_data+0x68>
 80195b8:	2300      	movs	r3, #0
 80195ba:	68ba      	ldr	r2, [r7, #8]
 80195bc:	6879      	ldr	r1, [r7, #4]
 80195be:	2000      	movs	r0, #0
 80195c0:	f000 f8a6 	bl	8019710 <tcp_recv_null>
 80195c4:	4603      	mov	r3, r0
 80195c6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80195c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d12b      	bne.n	8019628 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80195d0:	7bbb      	ldrb	r3, [r7, #14]
 80195d2:	f003 0320 	and.w	r3, r3, #32
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d034      	beq.n	8019644 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80195de:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80195e2:	4293      	cmp	r3, r2
 80195e4:	d005      	beq.n	80195f2 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80195ea:	3301      	adds	r3, #1
 80195ec:	b29a      	uxth	r2, r3
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d00b      	beq.n	8019614 <tcp_process_refused_data+0xb4>
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	6918      	ldr	r0, [r3, #16]
 8019606:	2300      	movs	r3, #0
 8019608:	2200      	movs	r2, #0
 801960a:	6879      	ldr	r1, [r7, #4]
 801960c:	47a0      	blx	r4
 801960e:	4603      	mov	r3, r0
 8019610:	73fb      	strb	r3, [r7, #15]
 8019612:	e001      	b.n	8019618 <tcp_process_refused_data+0xb8>
 8019614:	2300      	movs	r3, #0
 8019616:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8019618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801961c:	f113 0f0d 	cmn.w	r3, #13
 8019620:	d110      	bne.n	8019644 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8019622:	f06f 030c 	mvn.w	r3, #12
 8019626:	e00e      	b.n	8019646 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8019628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801962c:	f113 0f0d 	cmn.w	r3, #13
 8019630:	d102      	bne.n	8019638 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8019632:	f06f 030c 	mvn.w	r3, #12
 8019636:	e006      	b.n	8019646 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	68ba      	ldr	r2, [r7, #8]
 801963c:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801963e:	f06f 0304 	mvn.w	r3, #4
 8019642:	e000      	b.n	8019646 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8019644:	2300      	movs	r3, #0
}
 8019646:	4618      	mov	r0, r3
 8019648:	3714      	adds	r7, #20
 801964a:	46bd      	mov	sp, r7
 801964c:	bd90      	pop	{r4, r7, pc}
 801964e:	bf00      	nop
 8019650:	080228ec 	.word	0x080228ec
 8019654:	08022e40 	.word	0x08022e40
 8019658:	08022974 	.word	0x08022974

0801965c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b084      	sub	sp, #16
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8019664:	e007      	b.n	8019676 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801966c:	6878      	ldr	r0, [r7, #4]
 801966e:	f000 f80a 	bl	8019686 <tcp_seg_free>
    seg = next;
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	2b00      	cmp	r3, #0
 801967a:	d1f4      	bne.n	8019666 <tcp_segs_free+0xa>
  }
}
 801967c:	bf00      	nop
 801967e:	bf00      	nop
 8019680:	3710      	adds	r7, #16
 8019682:	46bd      	mov	sp, r7
 8019684:	bd80      	pop	{r7, pc}

08019686 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8019686:	b580      	push	{r7, lr}
 8019688:	b082      	sub	sp, #8
 801968a:	af00      	add	r7, sp, #0
 801968c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d00c      	beq.n	80196ae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	685b      	ldr	r3, [r3, #4]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d004      	beq.n	80196a6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	685b      	ldr	r3, [r3, #4]
 80196a0:	4618      	mov	r0, r3
 80196a2:	f7fe f987 	bl	80179b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80196a6:	6879      	ldr	r1, [r7, #4]
 80196a8:	2003      	movs	r0, #3
 80196aa:	f7fd fa8f 	bl	8016bcc <memp_free>
  }
}
 80196ae:	bf00      	nop
 80196b0:	3708      	adds	r7, #8
 80196b2:	46bd      	mov	sp, r7
 80196b4:	bd80      	pop	{r7, pc}
	...

080196b8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b084      	sub	sp, #16
 80196bc:	af00      	add	r7, sp, #0
 80196be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d106      	bne.n	80196d4 <tcp_seg_copy+0x1c>
 80196c6:	4b0f      	ldr	r3, [pc, #60]	; (8019704 <tcp_seg_copy+0x4c>)
 80196c8:	f240 6282 	movw	r2, #1666	; 0x682
 80196cc:	490e      	ldr	r1, [pc, #56]	; (8019708 <tcp_seg_copy+0x50>)
 80196ce:	480f      	ldr	r0, [pc, #60]	; (801970c <tcp_seg_copy+0x54>)
 80196d0:	f006 fa1c 	bl	801fb0c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80196d4:	2003      	movs	r0, #3
 80196d6:	f7fd fa03 	bl	8016ae0 <memp_malloc>
 80196da:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d101      	bne.n	80196e6 <tcp_seg_copy+0x2e>
    return NULL;
 80196e2:	2300      	movs	r3, #0
 80196e4:	e00a      	b.n	80196fc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80196e6:	2210      	movs	r2, #16
 80196e8:	6879      	ldr	r1, [r7, #4]
 80196ea:	68f8      	ldr	r0, [r7, #12]
 80196ec:	f005 fe10 	bl	801f310 <memcpy>
  pbuf_ref(cseg->p);
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	685b      	ldr	r3, [r3, #4]
 80196f4:	4618      	mov	r0, r3
 80196f6:	f7fe fa03 	bl	8017b00 <pbuf_ref>
  return cseg;
 80196fa:	68fb      	ldr	r3, [r7, #12]
}
 80196fc:	4618      	mov	r0, r3
 80196fe:	3710      	adds	r7, #16
 8019700:	46bd      	mov	sp, r7
 8019702:	bd80      	pop	{r7, pc}
 8019704:	080228ec 	.word	0x080228ec
 8019708:	08022e84 	.word	0x08022e84
 801970c:	08022974 	.word	0x08022974

08019710 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b084      	sub	sp, #16
 8019714:	af00      	add	r7, sp, #0
 8019716:	60f8      	str	r0, [r7, #12]
 8019718:	60b9      	str	r1, [r7, #8]
 801971a:	607a      	str	r2, [r7, #4]
 801971c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801971e:	68bb      	ldr	r3, [r7, #8]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d109      	bne.n	8019738 <tcp_recv_null+0x28>
 8019724:	4b12      	ldr	r3, [pc, #72]	; (8019770 <tcp_recv_null+0x60>)
 8019726:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801972a:	4912      	ldr	r1, [pc, #72]	; (8019774 <tcp_recv_null+0x64>)
 801972c:	4812      	ldr	r0, [pc, #72]	; (8019778 <tcp_recv_null+0x68>)
 801972e:	f006 f9ed 	bl	801fb0c <iprintf>
 8019732:	f06f 030f 	mvn.w	r3, #15
 8019736:	e016      	b.n	8019766 <tcp_recv_null+0x56>

  if (p != NULL) {
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d009      	beq.n	8019752 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	891b      	ldrh	r3, [r3, #8]
 8019742:	4619      	mov	r1, r3
 8019744:	68b8      	ldr	r0, [r7, #8]
 8019746:	f7ff facf 	bl	8018ce8 <tcp_recved>
    pbuf_free(p);
 801974a:	6878      	ldr	r0, [r7, #4]
 801974c:	f7fe f932 	bl	80179b4 <pbuf_free>
 8019750:	e008      	b.n	8019764 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8019752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019756:	2b00      	cmp	r3, #0
 8019758:	d104      	bne.n	8019764 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801975a:	68b8      	ldr	r0, [r7, #8]
 801975c:	f7fe ffb6 	bl	80186cc <tcp_close>
 8019760:	4603      	mov	r3, r0
 8019762:	e000      	b.n	8019766 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8019764:	2300      	movs	r3, #0
}
 8019766:	4618      	mov	r0, r3
 8019768:	3710      	adds	r7, #16
 801976a:	46bd      	mov	sp, r7
 801976c:	bd80      	pop	{r7, pc}
 801976e:	bf00      	nop
 8019770:	080228ec 	.word	0x080228ec
 8019774:	08022ea0 	.word	0x08022ea0
 8019778:	08022974 	.word	0x08022974

0801977c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b086      	sub	sp, #24
 8019780:	af00      	add	r7, sp, #0
 8019782:	4603      	mov	r3, r0
 8019784:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8019786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801978a:	2b00      	cmp	r3, #0
 801978c:	db01      	blt.n	8019792 <tcp_kill_prio+0x16>
 801978e:	79fb      	ldrb	r3, [r7, #7]
 8019790:	e000      	b.n	8019794 <tcp_kill_prio+0x18>
 8019792:	237f      	movs	r3, #127	; 0x7f
 8019794:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8019796:	7afb      	ldrb	r3, [r7, #11]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d034      	beq.n	8019806 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801979c:	7afb      	ldrb	r3, [r7, #11]
 801979e:	3b01      	subs	r3, #1
 80197a0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80197a2:	2300      	movs	r3, #0
 80197a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80197a6:	2300      	movs	r3, #0
 80197a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80197aa:	4b19      	ldr	r3, [pc, #100]	; (8019810 <tcp_kill_prio+0x94>)
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	617b      	str	r3, [r7, #20]
 80197b0:	e01f      	b.n	80197f2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80197b2:	697b      	ldr	r3, [r7, #20]
 80197b4:	7d5b      	ldrb	r3, [r3, #21]
 80197b6:	7afa      	ldrb	r2, [r7, #11]
 80197b8:	429a      	cmp	r2, r3
 80197ba:	d80c      	bhi.n	80197d6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80197bc:	697b      	ldr	r3, [r7, #20]
 80197be:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80197c0:	7afa      	ldrb	r2, [r7, #11]
 80197c2:	429a      	cmp	r2, r3
 80197c4:	d112      	bne.n	80197ec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80197c6:	4b13      	ldr	r3, [pc, #76]	; (8019814 <tcp_kill_prio+0x98>)
 80197c8:	681a      	ldr	r2, [r3, #0]
 80197ca:	697b      	ldr	r3, [r7, #20]
 80197cc:	6a1b      	ldr	r3, [r3, #32]
 80197ce:	1ad3      	subs	r3, r2, r3
 80197d0:	68fa      	ldr	r2, [r7, #12]
 80197d2:	429a      	cmp	r2, r3
 80197d4:	d80a      	bhi.n	80197ec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80197d6:	4b0f      	ldr	r3, [pc, #60]	; (8019814 <tcp_kill_prio+0x98>)
 80197d8:	681a      	ldr	r2, [r3, #0]
 80197da:	697b      	ldr	r3, [r7, #20]
 80197dc:	6a1b      	ldr	r3, [r3, #32]
 80197de:	1ad3      	subs	r3, r2, r3
 80197e0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80197e2:	697b      	ldr	r3, [r7, #20]
 80197e4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80197e6:	697b      	ldr	r3, [r7, #20]
 80197e8:	7d5b      	ldrb	r3, [r3, #21]
 80197ea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80197ec:	697b      	ldr	r3, [r7, #20]
 80197ee:	68db      	ldr	r3, [r3, #12]
 80197f0:	617b      	str	r3, [r7, #20]
 80197f2:	697b      	ldr	r3, [r7, #20]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d1dc      	bne.n	80197b2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80197f8:	693b      	ldr	r3, [r7, #16]
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d004      	beq.n	8019808 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80197fe:	6938      	ldr	r0, [r7, #16]
 8019800:	f7ff f8aa 	bl	8018958 <tcp_abort>
 8019804:	e000      	b.n	8019808 <tcp_kill_prio+0x8c>
    return;
 8019806:	bf00      	nop
  }
}
 8019808:	3718      	adds	r7, #24
 801980a:	46bd      	mov	sp, r7
 801980c:	bd80      	pop	{r7, pc}
 801980e:	bf00      	nop
 8019810:	2400f92c 	.word	0x2400f92c
 8019814:	2400f920 	.word	0x2400f920

08019818 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b086      	sub	sp, #24
 801981c:	af00      	add	r7, sp, #0
 801981e:	4603      	mov	r3, r0
 8019820:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8019822:	79fb      	ldrb	r3, [r7, #7]
 8019824:	2b08      	cmp	r3, #8
 8019826:	d009      	beq.n	801983c <tcp_kill_state+0x24>
 8019828:	79fb      	ldrb	r3, [r7, #7]
 801982a:	2b09      	cmp	r3, #9
 801982c:	d006      	beq.n	801983c <tcp_kill_state+0x24>
 801982e:	4b1a      	ldr	r3, [pc, #104]	; (8019898 <tcp_kill_state+0x80>)
 8019830:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8019834:	4919      	ldr	r1, [pc, #100]	; (801989c <tcp_kill_state+0x84>)
 8019836:	481a      	ldr	r0, [pc, #104]	; (80198a0 <tcp_kill_state+0x88>)
 8019838:	f006 f968 	bl	801fb0c <iprintf>

  inactivity = 0;
 801983c:	2300      	movs	r3, #0
 801983e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8019840:	2300      	movs	r3, #0
 8019842:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019844:	4b17      	ldr	r3, [pc, #92]	; (80198a4 <tcp_kill_state+0x8c>)
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	617b      	str	r3, [r7, #20]
 801984a:	e017      	b.n	801987c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801984c:	697b      	ldr	r3, [r7, #20]
 801984e:	7d1b      	ldrb	r3, [r3, #20]
 8019850:	79fa      	ldrb	r2, [r7, #7]
 8019852:	429a      	cmp	r2, r3
 8019854:	d10f      	bne.n	8019876 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019856:	4b14      	ldr	r3, [pc, #80]	; (80198a8 <tcp_kill_state+0x90>)
 8019858:	681a      	ldr	r2, [r3, #0]
 801985a:	697b      	ldr	r3, [r7, #20]
 801985c:	6a1b      	ldr	r3, [r3, #32]
 801985e:	1ad3      	subs	r3, r2, r3
 8019860:	68fa      	ldr	r2, [r7, #12]
 8019862:	429a      	cmp	r2, r3
 8019864:	d807      	bhi.n	8019876 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8019866:	4b10      	ldr	r3, [pc, #64]	; (80198a8 <tcp_kill_state+0x90>)
 8019868:	681a      	ldr	r2, [r3, #0]
 801986a:	697b      	ldr	r3, [r7, #20]
 801986c:	6a1b      	ldr	r3, [r3, #32]
 801986e:	1ad3      	subs	r3, r2, r3
 8019870:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8019872:	697b      	ldr	r3, [r7, #20]
 8019874:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019876:	697b      	ldr	r3, [r7, #20]
 8019878:	68db      	ldr	r3, [r3, #12]
 801987a:	617b      	str	r3, [r7, #20]
 801987c:	697b      	ldr	r3, [r7, #20]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d1e4      	bne.n	801984c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8019882:	693b      	ldr	r3, [r7, #16]
 8019884:	2b00      	cmp	r3, #0
 8019886:	d003      	beq.n	8019890 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8019888:	2100      	movs	r1, #0
 801988a:	6938      	ldr	r0, [r7, #16]
 801988c:	f7fe ffa6 	bl	80187dc <tcp_abandon>
  }
}
 8019890:	bf00      	nop
 8019892:	3718      	adds	r7, #24
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}
 8019898:	080228ec 	.word	0x080228ec
 801989c:	08022ebc 	.word	0x08022ebc
 80198a0:	08022974 	.word	0x08022974
 80198a4:	2400f92c 	.word	0x2400f92c
 80198a8:	2400f920 	.word	0x2400f920

080198ac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80198ac:	b580      	push	{r7, lr}
 80198ae:	b084      	sub	sp, #16
 80198b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80198b2:	2300      	movs	r3, #0
 80198b4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80198b6:	2300      	movs	r3, #0
 80198b8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80198ba:	4b12      	ldr	r3, [pc, #72]	; (8019904 <tcp_kill_timewait+0x58>)
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	60fb      	str	r3, [r7, #12]
 80198c0:	e012      	b.n	80198e8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80198c2:	4b11      	ldr	r3, [pc, #68]	; (8019908 <tcp_kill_timewait+0x5c>)
 80198c4:	681a      	ldr	r2, [r3, #0]
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	6a1b      	ldr	r3, [r3, #32]
 80198ca:	1ad3      	subs	r3, r2, r3
 80198cc:	687a      	ldr	r2, [r7, #4]
 80198ce:	429a      	cmp	r2, r3
 80198d0:	d807      	bhi.n	80198e2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80198d2:	4b0d      	ldr	r3, [pc, #52]	; (8019908 <tcp_kill_timewait+0x5c>)
 80198d4:	681a      	ldr	r2, [r3, #0]
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	6a1b      	ldr	r3, [r3, #32]
 80198da:	1ad3      	subs	r3, r2, r3
 80198dc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	68db      	ldr	r3, [r3, #12]
 80198e6:	60fb      	str	r3, [r7, #12]
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d1e9      	bne.n	80198c2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80198ee:	68bb      	ldr	r3, [r7, #8]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d002      	beq.n	80198fa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80198f4:	68b8      	ldr	r0, [r7, #8]
 80198f6:	f7ff f82f 	bl	8018958 <tcp_abort>
  }
}
 80198fa:	bf00      	nop
 80198fc:	3710      	adds	r7, #16
 80198fe:	46bd      	mov	sp, r7
 8019900:	bd80      	pop	{r7, pc}
 8019902:	bf00      	nop
 8019904:	2400f930 	.word	0x2400f930
 8019908:	2400f920 	.word	0x2400f920

0801990c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b082      	sub	sp, #8
 8019910:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8019912:	4b10      	ldr	r3, [pc, #64]	; (8019954 <tcp_handle_closepend+0x48>)
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8019918:	e014      	b.n	8019944 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	68db      	ldr	r3, [r3, #12]
 801991e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	8b5b      	ldrh	r3, [r3, #26]
 8019924:	f003 0308 	and.w	r3, r3, #8
 8019928:	2b00      	cmp	r3, #0
 801992a:	d009      	beq.n	8019940 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	8b5b      	ldrh	r3, [r3, #26]
 8019930:	f023 0308 	bic.w	r3, r3, #8
 8019934:	b29a      	uxth	r2, r3
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801993a:	6878      	ldr	r0, [r7, #4]
 801993c:	f7fe fe5c 	bl	80185f8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8019940:	683b      	ldr	r3, [r7, #0]
 8019942:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d1e7      	bne.n	801991a <tcp_handle_closepend+0xe>
  }
}
 801994a:	bf00      	nop
 801994c:	bf00      	nop
 801994e:	3708      	adds	r7, #8
 8019950:	46bd      	mov	sp, r7
 8019952:	bd80      	pop	{r7, pc}
 8019954:	2400f92c 	.word	0x2400f92c

08019958 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b084      	sub	sp, #16
 801995c:	af00      	add	r7, sp, #0
 801995e:	4603      	mov	r3, r0
 8019960:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019962:	2001      	movs	r0, #1
 8019964:	f7fd f8bc 	bl	8016ae0 <memp_malloc>
 8019968:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d126      	bne.n	80199be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8019970:	f7ff ffcc 	bl	801990c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8019974:	f7ff ff9a 	bl	80198ac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019978:	2001      	movs	r0, #1
 801997a:	f7fd f8b1 	bl	8016ae0 <memp_malloc>
 801997e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d11b      	bne.n	80199be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8019986:	2009      	movs	r0, #9
 8019988:	f7ff ff46 	bl	8019818 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801998c:	2001      	movs	r0, #1
 801998e:	f7fd f8a7 	bl	8016ae0 <memp_malloc>
 8019992:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	2b00      	cmp	r3, #0
 8019998:	d111      	bne.n	80199be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801999a:	2008      	movs	r0, #8
 801999c:	f7ff ff3c 	bl	8019818 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80199a0:	2001      	movs	r0, #1
 80199a2:	f7fd f89d 	bl	8016ae0 <memp_malloc>
 80199a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d107      	bne.n	80199be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80199ae:	79fb      	ldrb	r3, [r7, #7]
 80199b0:	4618      	mov	r0, r3
 80199b2:	f7ff fee3 	bl	801977c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80199b6:	2001      	movs	r0, #1
 80199b8:	f7fd f892 	bl	8016ae0 <memp_malloc>
 80199bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d03f      	beq.n	8019a44 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80199c4:	229c      	movs	r2, #156	; 0x9c
 80199c6:	2100      	movs	r1, #0
 80199c8:	68f8      	ldr	r0, [r7, #12]
 80199ca:	f005 fcc9 	bl	801f360 <memset>
    pcb->prio = prio;
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	79fa      	ldrb	r2, [r7, #7]
 80199d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80199da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80199e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	22ff      	movs	r2, #255	; 0xff
 80199f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80199fa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	2206      	movs	r2, #6
 8019a00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	2206      	movs	r2, #6
 8019a08:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a10:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	2201      	movs	r2, #1
 8019a16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8019a1a:	4b0d      	ldr	r3, [pc, #52]	; (8019a50 <tcp_alloc+0xf8>)
 8019a1c:	681a      	ldr	r2, [r3, #0]
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8019a22:	4b0c      	ldr	r3, [pc, #48]	; (8019a54 <tcp_alloc+0xfc>)
 8019a24:	781a      	ldrb	r2, [r3, #0]
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8019a30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	4a08      	ldr	r2, [pc, #32]	; (8019a58 <tcp_alloc+0x100>)
 8019a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	4a07      	ldr	r2, [pc, #28]	; (8019a5c <tcp_alloc+0x104>)
 8019a40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8019a44:	68fb      	ldr	r3, [r7, #12]
}
 8019a46:	4618      	mov	r0, r3
 8019a48:	3710      	adds	r7, #16
 8019a4a:	46bd      	mov	sp, r7
 8019a4c:	bd80      	pop	{r7, pc}
 8019a4e:	bf00      	nop
 8019a50:	2400f920 	.word	0x2400f920
 8019a54:	2400f936 	.word	0x2400f936
 8019a58:	08019711 	.word	0x08019711
 8019a5c:	006ddd00 	.word	0x006ddd00

08019a60 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b084      	sub	sp, #16
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	4603      	mov	r3, r0
 8019a68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8019a6a:	2040      	movs	r0, #64	; 0x40
 8019a6c:	f7ff ff74 	bl	8019958 <tcp_alloc>
 8019a70:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019a72:	68fb      	ldr	r3, [r7, #12]
}
 8019a74:	4618      	mov	r0, r3
 8019a76:	3710      	adds	r7, #16
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	bd80      	pop	{r7, pc}

08019a7c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8019a7c:	b480      	push	{r7}
 8019a7e:	b083      	sub	sp, #12
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	6078      	str	r0, [r7, #4]
 8019a84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d002      	beq.n	8019a92 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	683a      	ldr	r2, [r7, #0]
 8019a90:	611a      	str	r2, [r3, #16]
  }
}
 8019a92:	bf00      	nop
 8019a94:	370c      	adds	r7, #12
 8019a96:	46bd      	mov	sp, r7
 8019a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9c:	4770      	bx	lr
	...

08019aa0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b082      	sub	sp, #8
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
 8019aa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d00e      	beq.n	8019ace <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	7d1b      	ldrb	r3, [r3, #20]
 8019ab4:	2b01      	cmp	r3, #1
 8019ab6:	d106      	bne.n	8019ac6 <tcp_recv+0x26>
 8019ab8:	4b07      	ldr	r3, [pc, #28]	; (8019ad8 <tcp_recv+0x38>)
 8019aba:	f240 72df 	movw	r2, #2015	; 0x7df
 8019abe:	4907      	ldr	r1, [pc, #28]	; (8019adc <tcp_recv+0x3c>)
 8019ac0:	4807      	ldr	r0, [pc, #28]	; (8019ae0 <tcp_recv+0x40>)
 8019ac2:	f006 f823 	bl	801fb0c <iprintf>
    pcb->recv = recv;
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	683a      	ldr	r2, [r7, #0]
 8019aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8019ace:	bf00      	nop
 8019ad0:	3708      	adds	r7, #8
 8019ad2:	46bd      	mov	sp, r7
 8019ad4:	bd80      	pop	{r7, pc}
 8019ad6:	bf00      	nop
 8019ad8:	080228ec 	.word	0x080228ec
 8019adc:	08022ecc 	.word	0x08022ecc
 8019ae0:	08022974 	.word	0x08022974

08019ae4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b082      	sub	sp, #8
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	6078      	str	r0, [r7, #4]
 8019aec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d00e      	beq.n	8019b12 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	7d1b      	ldrb	r3, [r3, #20]
 8019af8:	2b01      	cmp	r3, #1
 8019afa:	d106      	bne.n	8019b0a <tcp_sent+0x26>
 8019afc:	4b07      	ldr	r3, [pc, #28]	; (8019b1c <tcp_sent+0x38>)
 8019afe:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8019b02:	4907      	ldr	r1, [pc, #28]	; (8019b20 <tcp_sent+0x3c>)
 8019b04:	4807      	ldr	r0, [pc, #28]	; (8019b24 <tcp_sent+0x40>)
 8019b06:	f006 f801 	bl	801fb0c <iprintf>
    pcb->sent = sent;
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	683a      	ldr	r2, [r7, #0]
 8019b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8019b12:	bf00      	nop
 8019b14:	3708      	adds	r7, #8
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bd80      	pop	{r7, pc}
 8019b1a:	bf00      	nop
 8019b1c:	080228ec 	.word	0x080228ec
 8019b20:	08022ef4 	.word	0x08022ef4
 8019b24:	08022974 	.word	0x08022974

08019b28 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	b082      	sub	sp, #8
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	6078      	str	r0, [r7, #4]
 8019b30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d00e      	beq.n	8019b56 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	7d1b      	ldrb	r3, [r3, #20]
 8019b3c:	2b01      	cmp	r3, #1
 8019b3e:	d106      	bne.n	8019b4e <tcp_err+0x26>
 8019b40:	4b07      	ldr	r3, [pc, #28]	; (8019b60 <tcp_err+0x38>)
 8019b42:	f640 020d 	movw	r2, #2061	; 0x80d
 8019b46:	4907      	ldr	r1, [pc, #28]	; (8019b64 <tcp_err+0x3c>)
 8019b48:	4807      	ldr	r0, [pc, #28]	; (8019b68 <tcp_err+0x40>)
 8019b4a:	f005 ffdf 	bl	801fb0c <iprintf>
    pcb->errf = err;
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	683a      	ldr	r2, [r7, #0]
 8019b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8019b56:	bf00      	nop
 8019b58:	3708      	adds	r7, #8
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}
 8019b5e:	bf00      	nop
 8019b60:	080228ec 	.word	0x080228ec
 8019b64:	08022f1c 	.word	0x08022f1c
 8019b68:	08022974 	.word	0x08022974

08019b6c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8019b6c:	b480      	push	{r7}
 8019b6e:	b085      	sub	sp, #20
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	6078      	str	r0, [r7, #4]
 8019b74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d008      	beq.n	8019b8e <tcp_accept+0x22>
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	7d1b      	ldrb	r3, [r3, #20]
 8019b80:	2b01      	cmp	r3, #1
 8019b82:	d104      	bne.n	8019b8e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	683a      	ldr	r2, [r7, #0]
 8019b8c:	619a      	str	r2, [r3, #24]
  }
}
 8019b8e:	bf00      	nop
 8019b90:	3714      	adds	r7, #20
 8019b92:	46bd      	mov	sp, r7
 8019b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b98:	4770      	bx	lr
	...

08019b9c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b084      	sub	sp, #16
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	60f8      	str	r0, [r7, #12]
 8019ba4:	60b9      	str	r1, [r7, #8]
 8019ba6:	4613      	mov	r3, r2
 8019ba8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d107      	bne.n	8019bc0 <tcp_poll+0x24>
 8019bb0:	4b0e      	ldr	r3, [pc, #56]	; (8019bec <tcp_poll+0x50>)
 8019bb2:	f640 023d 	movw	r2, #2109	; 0x83d
 8019bb6:	490e      	ldr	r1, [pc, #56]	; (8019bf0 <tcp_poll+0x54>)
 8019bb8:	480e      	ldr	r0, [pc, #56]	; (8019bf4 <tcp_poll+0x58>)
 8019bba:	f005 ffa7 	bl	801fb0c <iprintf>
 8019bbe:	e011      	b.n	8019be4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	7d1b      	ldrb	r3, [r3, #20]
 8019bc4:	2b01      	cmp	r3, #1
 8019bc6:	d106      	bne.n	8019bd6 <tcp_poll+0x3a>
 8019bc8:	4b08      	ldr	r3, [pc, #32]	; (8019bec <tcp_poll+0x50>)
 8019bca:	f640 023e 	movw	r2, #2110	; 0x83e
 8019bce:	490a      	ldr	r1, [pc, #40]	; (8019bf8 <tcp_poll+0x5c>)
 8019bd0:	4808      	ldr	r0, [pc, #32]	; (8019bf4 <tcp_poll+0x58>)
 8019bd2:	f005 ff9b 	bl	801fb0c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	68ba      	ldr	r2, [r7, #8]
 8019bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	79fa      	ldrb	r2, [r7, #7]
 8019be2:	775a      	strb	r2, [r3, #29]
}
 8019be4:	3710      	adds	r7, #16
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bd80      	pop	{r7, pc}
 8019bea:	bf00      	nop
 8019bec:	080228ec 	.word	0x080228ec
 8019bf0:	08022f44 	.word	0x08022f44
 8019bf4:	08022974 	.word	0x08022974
 8019bf8:	08022f5c 	.word	0x08022f5c

08019bfc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b082      	sub	sp, #8
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d107      	bne.n	8019c1a <tcp_pcb_purge+0x1e>
 8019c0a:	4b21      	ldr	r3, [pc, #132]	; (8019c90 <tcp_pcb_purge+0x94>)
 8019c0c:	f640 0251 	movw	r2, #2129	; 0x851
 8019c10:	4920      	ldr	r1, [pc, #128]	; (8019c94 <tcp_pcb_purge+0x98>)
 8019c12:	4821      	ldr	r0, [pc, #132]	; (8019c98 <tcp_pcb_purge+0x9c>)
 8019c14:	f005 ff7a 	bl	801fb0c <iprintf>
 8019c18:	e037      	b.n	8019c8a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	7d1b      	ldrb	r3, [r3, #20]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d033      	beq.n	8019c8a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8019c26:	2b0a      	cmp	r3, #10
 8019c28:	d02f      	beq.n	8019c8a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8019c2e:	2b01      	cmp	r3, #1
 8019c30:	d02b      	beq.n	8019c8a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d007      	beq.n	8019c4a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7fd feb8 	bl	80179b4 <pbuf_free>
      pcb->refused_data = NULL;
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	2200      	movs	r2, #0
 8019c48:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d002      	beq.n	8019c58 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8019c52:	6878      	ldr	r0, [r7, #4]
 8019c54:	f000 f986 	bl	8019f64 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019c5e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c64:	4618      	mov	r0, r3
 8019c66:	f7ff fcf9 	bl	801965c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c6e:	4618      	mov	r0, r3
 8019c70:	f7ff fcf4 	bl	801965c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	2200      	movs	r2, #0
 8019c78:	66da      	str	r2, [r3, #108]	; 0x6c
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	2200      	movs	r2, #0
 8019c86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8019c8a:	3708      	adds	r7, #8
 8019c8c:	46bd      	mov	sp, r7
 8019c8e:	bd80      	pop	{r7, pc}
 8019c90:	080228ec 	.word	0x080228ec
 8019c94:	08022f7c 	.word	0x08022f7c
 8019c98:	08022974 	.word	0x08022974

08019c9c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	b084      	sub	sp, #16
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	6078      	str	r0, [r7, #4]
 8019ca4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8019ca6:	683b      	ldr	r3, [r7, #0]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d106      	bne.n	8019cba <tcp_pcb_remove+0x1e>
 8019cac:	4b3e      	ldr	r3, [pc, #248]	; (8019da8 <tcp_pcb_remove+0x10c>)
 8019cae:	f640 0283 	movw	r2, #2179	; 0x883
 8019cb2:	493e      	ldr	r1, [pc, #248]	; (8019dac <tcp_pcb_remove+0x110>)
 8019cb4:	483e      	ldr	r0, [pc, #248]	; (8019db0 <tcp_pcb_remove+0x114>)
 8019cb6:	f005 ff29 	bl	801fb0c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d106      	bne.n	8019cce <tcp_pcb_remove+0x32>
 8019cc0:	4b39      	ldr	r3, [pc, #228]	; (8019da8 <tcp_pcb_remove+0x10c>)
 8019cc2:	f640 0284 	movw	r2, #2180	; 0x884
 8019cc6:	493b      	ldr	r1, [pc, #236]	; (8019db4 <tcp_pcb_remove+0x118>)
 8019cc8:	4839      	ldr	r0, [pc, #228]	; (8019db0 <tcp_pcb_remove+0x114>)
 8019cca:	f005 ff1f 	bl	801fb0c <iprintf>

  TCP_RMV(pcblist, pcb);
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	683a      	ldr	r2, [r7, #0]
 8019cd4:	429a      	cmp	r2, r3
 8019cd6:	d105      	bne.n	8019ce4 <tcp_pcb_remove+0x48>
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	68da      	ldr	r2, [r3, #12]
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	601a      	str	r2, [r3, #0]
 8019ce2:	e013      	b.n	8019d0c <tcp_pcb_remove+0x70>
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	60fb      	str	r3, [r7, #12]
 8019cea:	e00c      	b.n	8019d06 <tcp_pcb_remove+0x6a>
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	68db      	ldr	r3, [r3, #12]
 8019cf0:	683a      	ldr	r2, [r7, #0]
 8019cf2:	429a      	cmp	r2, r3
 8019cf4:	d104      	bne.n	8019d00 <tcp_pcb_remove+0x64>
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	68da      	ldr	r2, [r3, #12]
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	60da      	str	r2, [r3, #12]
 8019cfe:	e005      	b.n	8019d0c <tcp_pcb_remove+0x70>
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	68db      	ldr	r3, [r3, #12]
 8019d04:	60fb      	str	r3, [r7, #12]
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d1ef      	bne.n	8019cec <tcp_pcb_remove+0x50>
 8019d0c:	683b      	ldr	r3, [r7, #0]
 8019d0e:	2200      	movs	r2, #0
 8019d10:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8019d12:	6838      	ldr	r0, [r7, #0]
 8019d14:	f7ff ff72 	bl	8019bfc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	7d1b      	ldrb	r3, [r3, #20]
 8019d1c:	2b0a      	cmp	r3, #10
 8019d1e:	d013      	beq.n	8019d48 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8019d20:	683b      	ldr	r3, [r7, #0]
 8019d22:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8019d24:	2b01      	cmp	r3, #1
 8019d26:	d00f      	beq.n	8019d48 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8019d28:	683b      	ldr	r3, [r7, #0]
 8019d2a:	8b5b      	ldrh	r3, [r3, #26]
 8019d2c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d009      	beq.n	8019d48 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8019d34:	683b      	ldr	r3, [r7, #0]
 8019d36:	8b5b      	ldrh	r3, [r3, #26]
 8019d38:	f043 0302 	orr.w	r3, r3, #2
 8019d3c:	b29a      	uxth	r2, r3
 8019d3e:	683b      	ldr	r3, [r7, #0]
 8019d40:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019d42:	6838      	ldr	r0, [r7, #0]
 8019d44:	f003 fbc6 	bl	801d4d4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8019d48:	683b      	ldr	r3, [r7, #0]
 8019d4a:	7d1b      	ldrb	r3, [r3, #20]
 8019d4c:	2b01      	cmp	r3, #1
 8019d4e:	d020      	beq.n	8019d92 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8019d50:	683b      	ldr	r3, [r7, #0]
 8019d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d006      	beq.n	8019d66 <tcp_pcb_remove+0xca>
 8019d58:	4b13      	ldr	r3, [pc, #76]	; (8019da8 <tcp_pcb_remove+0x10c>)
 8019d5a:	f640 0293 	movw	r2, #2195	; 0x893
 8019d5e:	4916      	ldr	r1, [pc, #88]	; (8019db8 <tcp_pcb_remove+0x11c>)
 8019d60:	4813      	ldr	r0, [pc, #76]	; (8019db0 <tcp_pcb_remove+0x114>)
 8019d62:	f005 fed3 	bl	801fb0c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8019d66:	683b      	ldr	r3, [r7, #0]
 8019d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d006      	beq.n	8019d7c <tcp_pcb_remove+0xe0>
 8019d6e:	4b0e      	ldr	r3, [pc, #56]	; (8019da8 <tcp_pcb_remove+0x10c>)
 8019d70:	f640 0294 	movw	r2, #2196	; 0x894
 8019d74:	4911      	ldr	r1, [pc, #68]	; (8019dbc <tcp_pcb_remove+0x120>)
 8019d76:	480e      	ldr	r0, [pc, #56]	; (8019db0 <tcp_pcb_remove+0x114>)
 8019d78:	f005 fec8 	bl	801fb0c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8019d7c:	683b      	ldr	r3, [r7, #0]
 8019d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d006      	beq.n	8019d92 <tcp_pcb_remove+0xf6>
 8019d84:	4b08      	ldr	r3, [pc, #32]	; (8019da8 <tcp_pcb_remove+0x10c>)
 8019d86:	f640 0296 	movw	r2, #2198	; 0x896
 8019d8a:	490d      	ldr	r1, [pc, #52]	; (8019dc0 <tcp_pcb_remove+0x124>)
 8019d8c:	4808      	ldr	r0, [pc, #32]	; (8019db0 <tcp_pcb_remove+0x114>)
 8019d8e:	f005 febd 	bl	801fb0c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8019d92:	683b      	ldr	r3, [r7, #0]
 8019d94:	2200      	movs	r2, #0
 8019d96:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8019d98:	683b      	ldr	r3, [r7, #0]
 8019d9a:	2200      	movs	r2, #0
 8019d9c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8019d9e:	bf00      	nop
 8019da0:	3710      	adds	r7, #16
 8019da2:	46bd      	mov	sp, r7
 8019da4:	bd80      	pop	{r7, pc}
 8019da6:	bf00      	nop
 8019da8:	080228ec 	.word	0x080228ec
 8019dac:	08022f98 	.word	0x08022f98
 8019db0:	08022974 	.word	0x08022974
 8019db4:	08022fb4 	.word	0x08022fb4
 8019db8:	08022fd4 	.word	0x08022fd4
 8019dbc:	08022fec 	.word	0x08022fec
 8019dc0:	08023008 	.word	0x08023008

08019dc4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b082      	sub	sp, #8
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d106      	bne.n	8019de0 <tcp_next_iss+0x1c>
 8019dd2:	4b0a      	ldr	r3, [pc, #40]	; (8019dfc <tcp_next_iss+0x38>)
 8019dd4:	f640 02af 	movw	r2, #2223	; 0x8af
 8019dd8:	4909      	ldr	r1, [pc, #36]	; (8019e00 <tcp_next_iss+0x3c>)
 8019dda:	480a      	ldr	r0, [pc, #40]	; (8019e04 <tcp_next_iss+0x40>)
 8019ddc:	f005 fe96 	bl	801fb0c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8019de0:	4b09      	ldr	r3, [pc, #36]	; (8019e08 <tcp_next_iss+0x44>)
 8019de2:	681a      	ldr	r2, [r3, #0]
 8019de4:	4b09      	ldr	r3, [pc, #36]	; (8019e0c <tcp_next_iss+0x48>)
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	4413      	add	r3, r2
 8019dea:	4a07      	ldr	r2, [pc, #28]	; (8019e08 <tcp_next_iss+0x44>)
 8019dec:	6013      	str	r3, [r2, #0]
  return iss;
 8019dee:	4b06      	ldr	r3, [pc, #24]	; (8019e08 <tcp_next_iss+0x44>)
 8019df0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8019df2:	4618      	mov	r0, r3
 8019df4:	3708      	adds	r7, #8
 8019df6:	46bd      	mov	sp, r7
 8019df8:	bd80      	pop	{r7, pc}
 8019dfa:	bf00      	nop
 8019dfc:	080228ec 	.word	0x080228ec
 8019e00:	08023020 	.word	0x08023020
 8019e04:	08022974 	.word	0x08022974
 8019e08:	2400002c 	.word	0x2400002c
 8019e0c:	2400f920 	.word	0x2400f920

08019e10 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b086      	sub	sp, #24
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	4603      	mov	r3, r0
 8019e18:	60b9      	str	r1, [r7, #8]
 8019e1a:	607a      	str	r2, [r7, #4]
 8019e1c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d106      	bne.n	8019e32 <tcp_eff_send_mss_netif+0x22>
 8019e24:	4b14      	ldr	r3, [pc, #80]	; (8019e78 <tcp_eff_send_mss_netif+0x68>)
 8019e26:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8019e2a:	4914      	ldr	r1, [pc, #80]	; (8019e7c <tcp_eff_send_mss_netif+0x6c>)
 8019e2c:	4814      	ldr	r0, [pc, #80]	; (8019e80 <tcp_eff_send_mss_netif+0x70>)
 8019e2e:	f005 fe6d 	bl	801fb0c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8019e32:	68bb      	ldr	r3, [r7, #8]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d101      	bne.n	8019e3c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8019e38:	89fb      	ldrh	r3, [r7, #14]
 8019e3a:	e019      	b.n	8019e70 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8019e3c:	68bb      	ldr	r3, [r7, #8]
 8019e3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019e40:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8019e42:	8afb      	ldrh	r3, [r7, #22]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d012      	beq.n	8019e6e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8019e48:	2328      	movs	r3, #40	; 0x28
 8019e4a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8019e4c:	8afa      	ldrh	r2, [r7, #22]
 8019e4e:	8abb      	ldrh	r3, [r7, #20]
 8019e50:	429a      	cmp	r2, r3
 8019e52:	d904      	bls.n	8019e5e <tcp_eff_send_mss_netif+0x4e>
 8019e54:	8afa      	ldrh	r2, [r7, #22]
 8019e56:	8abb      	ldrh	r3, [r7, #20]
 8019e58:	1ad3      	subs	r3, r2, r3
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	e000      	b.n	8019e60 <tcp_eff_send_mss_netif+0x50>
 8019e5e:	2300      	movs	r3, #0
 8019e60:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8019e62:	8a7a      	ldrh	r2, [r7, #18]
 8019e64:	89fb      	ldrh	r3, [r7, #14]
 8019e66:	4293      	cmp	r3, r2
 8019e68:	bf28      	it	cs
 8019e6a:	4613      	movcs	r3, r2
 8019e6c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8019e6e:	89fb      	ldrh	r3, [r7, #14]
}
 8019e70:	4618      	mov	r0, r3
 8019e72:	3718      	adds	r7, #24
 8019e74:	46bd      	mov	sp, r7
 8019e76:	bd80      	pop	{r7, pc}
 8019e78:	080228ec 	.word	0x080228ec
 8019e7c:	0802303c 	.word	0x0802303c
 8019e80:	08022974 	.word	0x08022974

08019e84 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8019e84:	b580      	push	{r7, lr}
 8019e86:	b084      	sub	sp, #16
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	6078      	str	r0, [r7, #4]
 8019e8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d119      	bne.n	8019ecc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8019e98:	4b10      	ldr	r3, [pc, #64]	; (8019edc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8019e9a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8019e9e:	4910      	ldr	r1, [pc, #64]	; (8019ee0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8019ea0:	4810      	ldr	r0, [pc, #64]	; (8019ee4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8019ea2:	f005 fe33 	bl	801fb0c <iprintf>

  while (pcb != NULL) {
 8019ea6:	e011      	b.n	8019ecc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	681a      	ldr	r2, [r3, #0]
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	429a      	cmp	r2, r3
 8019eb2:	d108      	bne.n	8019ec6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	68db      	ldr	r3, [r3, #12]
 8019eb8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8019eba:	68f8      	ldr	r0, [r7, #12]
 8019ebc:	f7fe fd4c 	bl	8018958 <tcp_abort>
      pcb = next;
 8019ec0:	68bb      	ldr	r3, [r7, #8]
 8019ec2:	60fb      	str	r3, [r7, #12]
 8019ec4:	e002      	b.n	8019ecc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	68db      	ldr	r3, [r3, #12]
 8019eca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d1ea      	bne.n	8019ea8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8019ed2:	bf00      	nop
 8019ed4:	bf00      	nop
 8019ed6:	3710      	adds	r7, #16
 8019ed8:	46bd      	mov	sp, r7
 8019eda:	bd80      	pop	{r7, pc}
 8019edc:	080228ec 	.word	0x080228ec
 8019ee0:	08023064 	.word	0x08023064
 8019ee4:	08022974 	.word	0x08022974

08019ee8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019ee8:	b580      	push	{r7, lr}
 8019eea:	b084      	sub	sp, #16
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	6078      	str	r0, [r7, #4]
 8019ef0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d02a      	beq.n	8019f4e <tcp_netif_ip_addr_changed+0x66>
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d026      	beq.n	8019f4e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8019f00:	4b15      	ldr	r3, [pc, #84]	; (8019f58 <tcp_netif_ip_addr_changed+0x70>)
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	4619      	mov	r1, r3
 8019f06:	6878      	ldr	r0, [r7, #4]
 8019f08:	f7ff ffbc 	bl	8019e84 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8019f0c:	4b13      	ldr	r3, [pc, #76]	; (8019f5c <tcp_netif_ip_addr_changed+0x74>)
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	4619      	mov	r1, r3
 8019f12:	6878      	ldr	r0, [r7, #4]
 8019f14:	f7ff ffb6 	bl	8019e84 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d017      	beq.n	8019f4e <tcp_netif_ip_addr_changed+0x66>
 8019f1e:	683b      	ldr	r3, [r7, #0]
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d013      	beq.n	8019f4e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019f26:	4b0e      	ldr	r3, [pc, #56]	; (8019f60 <tcp_netif_ip_addr_changed+0x78>)
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	60fb      	str	r3, [r7, #12]
 8019f2c:	e00c      	b.n	8019f48 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	681a      	ldr	r2, [r3, #0]
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	429a      	cmp	r2, r3
 8019f38:	d103      	bne.n	8019f42 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8019f3a:	683b      	ldr	r3, [r7, #0]
 8019f3c:	681a      	ldr	r2, [r3, #0]
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	68db      	ldr	r3, [r3, #12]
 8019f46:	60fb      	str	r3, [r7, #12]
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d1ef      	bne.n	8019f2e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8019f4e:	bf00      	nop
 8019f50:	3710      	adds	r7, #16
 8019f52:	46bd      	mov	sp, r7
 8019f54:	bd80      	pop	{r7, pc}
 8019f56:	bf00      	nop
 8019f58:	2400f92c 	.word	0x2400f92c
 8019f5c:	2400f924 	.word	0x2400f924
 8019f60:	2400f928 	.word	0x2400f928

08019f64 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b082      	sub	sp, #8
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d007      	beq.n	8019f84 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f7ff fb6f 	bl	801965c <tcp_segs_free>
    pcb->ooseq = NULL;
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	2200      	movs	r2, #0
 8019f82:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8019f84:	bf00      	nop
 8019f86:	3708      	adds	r7, #8
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	bd80      	pop	{r7, pc}

08019f8c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8019f8c:	b590      	push	{r4, r7, lr}
 8019f8e:	b08d      	sub	sp, #52	; 0x34
 8019f90:	af04      	add	r7, sp, #16
 8019f92:	6078      	str	r0, [r7, #4]
 8019f94:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d105      	bne.n	8019fa8 <tcp_input+0x1c>
 8019f9c:	4b9b      	ldr	r3, [pc, #620]	; (801a20c <tcp_input+0x280>)
 8019f9e:	2283      	movs	r2, #131	; 0x83
 8019fa0:	499b      	ldr	r1, [pc, #620]	; (801a210 <tcp_input+0x284>)
 8019fa2:	489c      	ldr	r0, [pc, #624]	; (801a214 <tcp_input+0x288>)
 8019fa4:	f005 fdb2 	bl	801fb0c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	685b      	ldr	r3, [r3, #4]
 8019fac:	4a9a      	ldr	r2, [pc, #616]	; (801a218 <tcp_input+0x28c>)
 8019fae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	895b      	ldrh	r3, [r3, #10]
 8019fb4:	2b13      	cmp	r3, #19
 8019fb6:	f240 83d1 	bls.w	801a75c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8019fba:	4b98      	ldr	r3, [pc, #608]	; (801a21c <tcp_input+0x290>)
 8019fbc:	695b      	ldr	r3, [r3, #20]
 8019fbe:	4a97      	ldr	r2, [pc, #604]	; (801a21c <tcp_input+0x290>)
 8019fc0:	6812      	ldr	r2, [r2, #0]
 8019fc2:	4611      	mov	r1, r2
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f7fb fa8f 	bl	80154e8 <ip4_addr_isbroadcast_u32>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	f040 83c7 	bne.w	801a760 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8019fd2:	4b92      	ldr	r3, [pc, #584]	; (801a21c <tcp_input+0x290>)
 8019fd4:	695b      	ldr	r3, [r3, #20]
 8019fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8019fda:	2be0      	cmp	r3, #224	; 0xe0
 8019fdc:	f000 83c0 	beq.w	801a760 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8019fe0:	4b8d      	ldr	r3, [pc, #564]	; (801a218 <tcp_input+0x28c>)
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	899b      	ldrh	r3, [r3, #12]
 8019fe6:	b29b      	uxth	r3, r3
 8019fe8:	4618      	mov	r0, r3
 8019fea:	f7f9 fd0f 	bl	8013a0c <lwip_htons>
 8019fee:	4603      	mov	r3, r0
 8019ff0:	0b1b      	lsrs	r3, r3, #12
 8019ff2:	b29b      	uxth	r3, r3
 8019ff4:	b2db      	uxtb	r3, r3
 8019ff6:	009b      	lsls	r3, r3, #2
 8019ff8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8019ffa:	7cbb      	ldrb	r3, [r7, #18]
 8019ffc:	2b13      	cmp	r3, #19
 8019ffe:	f240 83b1 	bls.w	801a764 <tcp_input+0x7d8>
 801a002:	7cbb      	ldrb	r3, [r7, #18]
 801a004:	b29a      	uxth	r2, r3
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	891b      	ldrh	r3, [r3, #8]
 801a00a:	429a      	cmp	r2, r3
 801a00c:	f200 83aa 	bhi.w	801a764 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801a010:	7cbb      	ldrb	r3, [r7, #18]
 801a012:	b29b      	uxth	r3, r3
 801a014:	3b14      	subs	r3, #20
 801a016:	b29a      	uxth	r2, r3
 801a018:	4b81      	ldr	r3, [pc, #516]	; (801a220 <tcp_input+0x294>)
 801a01a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801a01c:	4b81      	ldr	r3, [pc, #516]	; (801a224 <tcp_input+0x298>)
 801a01e:	2200      	movs	r2, #0
 801a020:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	895a      	ldrh	r2, [r3, #10]
 801a026:	7cbb      	ldrb	r3, [r7, #18]
 801a028:	b29b      	uxth	r3, r3
 801a02a:	429a      	cmp	r2, r3
 801a02c:	d309      	bcc.n	801a042 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801a02e:	4b7c      	ldr	r3, [pc, #496]	; (801a220 <tcp_input+0x294>)
 801a030:	881a      	ldrh	r2, [r3, #0]
 801a032:	4b7d      	ldr	r3, [pc, #500]	; (801a228 <tcp_input+0x29c>)
 801a034:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801a036:	7cbb      	ldrb	r3, [r7, #18]
 801a038:	4619      	mov	r1, r3
 801a03a:	6878      	ldr	r0, [r7, #4]
 801a03c:	f7fd fc34 	bl	80178a8 <pbuf_remove_header>
 801a040:	e04e      	b.n	801a0e0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	2b00      	cmp	r3, #0
 801a048:	d105      	bne.n	801a056 <tcp_input+0xca>
 801a04a:	4b70      	ldr	r3, [pc, #448]	; (801a20c <tcp_input+0x280>)
 801a04c:	22c2      	movs	r2, #194	; 0xc2
 801a04e:	4977      	ldr	r1, [pc, #476]	; (801a22c <tcp_input+0x2a0>)
 801a050:	4870      	ldr	r0, [pc, #448]	; (801a214 <tcp_input+0x288>)
 801a052:	f005 fd5b 	bl	801fb0c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801a056:	2114      	movs	r1, #20
 801a058:	6878      	ldr	r0, [r7, #4]
 801a05a:	f7fd fc25 	bl	80178a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	895a      	ldrh	r2, [r3, #10]
 801a062:	4b71      	ldr	r3, [pc, #452]	; (801a228 <tcp_input+0x29c>)
 801a064:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801a066:	4b6e      	ldr	r3, [pc, #440]	; (801a220 <tcp_input+0x294>)
 801a068:	881a      	ldrh	r2, [r3, #0]
 801a06a:	4b6f      	ldr	r3, [pc, #444]	; (801a228 <tcp_input+0x29c>)
 801a06c:	881b      	ldrh	r3, [r3, #0]
 801a06e:	1ad3      	subs	r3, r2, r3
 801a070:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801a072:	4b6d      	ldr	r3, [pc, #436]	; (801a228 <tcp_input+0x29c>)
 801a074:	881b      	ldrh	r3, [r3, #0]
 801a076:	4619      	mov	r1, r3
 801a078:	6878      	ldr	r0, [r7, #4]
 801a07a:	f7fd fc15 	bl	80178a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	895b      	ldrh	r3, [r3, #10]
 801a084:	8a3a      	ldrh	r2, [r7, #16]
 801a086:	429a      	cmp	r2, r3
 801a088:	f200 836e 	bhi.w	801a768 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	685b      	ldr	r3, [r3, #4]
 801a092:	4a64      	ldr	r2, [pc, #400]	; (801a224 <tcp_input+0x298>)
 801a094:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	8a3a      	ldrh	r2, [r7, #16]
 801a09c:	4611      	mov	r1, r2
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f7fd fc02 	bl	80178a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	891a      	ldrh	r2, [r3, #8]
 801a0a8:	8a3b      	ldrh	r3, [r7, #16]
 801a0aa:	1ad3      	subs	r3, r2, r3
 801a0ac:	b29a      	uxth	r2, r3
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	895b      	ldrh	r3, [r3, #10]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d005      	beq.n	801a0c6 <tcp_input+0x13a>
 801a0ba:	4b54      	ldr	r3, [pc, #336]	; (801a20c <tcp_input+0x280>)
 801a0bc:	22df      	movs	r2, #223	; 0xdf
 801a0be:	495c      	ldr	r1, [pc, #368]	; (801a230 <tcp_input+0x2a4>)
 801a0c0:	4854      	ldr	r0, [pc, #336]	; (801a214 <tcp_input+0x288>)
 801a0c2:	f005 fd23 	bl	801fb0c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	891a      	ldrh	r2, [r3, #8]
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	891b      	ldrh	r3, [r3, #8]
 801a0d0:	429a      	cmp	r2, r3
 801a0d2:	d005      	beq.n	801a0e0 <tcp_input+0x154>
 801a0d4:	4b4d      	ldr	r3, [pc, #308]	; (801a20c <tcp_input+0x280>)
 801a0d6:	22e0      	movs	r2, #224	; 0xe0
 801a0d8:	4956      	ldr	r1, [pc, #344]	; (801a234 <tcp_input+0x2a8>)
 801a0da:	484e      	ldr	r0, [pc, #312]	; (801a214 <tcp_input+0x288>)
 801a0dc:	f005 fd16 	bl	801fb0c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801a0e0:	4b4d      	ldr	r3, [pc, #308]	; (801a218 <tcp_input+0x28c>)
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	881b      	ldrh	r3, [r3, #0]
 801a0e6:	b29b      	uxth	r3, r3
 801a0e8:	4a4b      	ldr	r2, [pc, #300]	; (801a218 <tcp_input+0x28c>)
 801a0ea:	6814      	ldr	r4, [r2, #0]
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f7f9 fc8d 	bl	8013a0c <lwip_htons>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801a0f6:	4b48      	ldr	r3, [pc, #288]	; (801a218 <tcp_input+0x28c>)
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	885b      	ldrh	r3, [r3, #2]
 801a0fc:	b29b      	uxth	r3, r3
 801a0fe:	4a46      	ldr	r2, [pc, #280]	; (801a218 <tcp_input+0x28c>)
 801a100:	6814      	ldr	r4, [r2, #0]
 801a102:	4618      	mov	r0, r3
 801a104:	f7f9 fc82 	bl	8013a0c <lwip_htons>
 801a108:	4603      	mov	r3, r0
 801a10a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801a10c:	4b42      	ldr	r3, [pc, #264]	; (801a218 <tcp_input+0x28c>)
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	685b      	ldr	r3, [r3, #4]
 801a112:	4a41      	ldr	r2, [pc, #260]	; (801a218 <tcp_input+0x28c>)
 801a114:	6814      	ldr	r4, [r2, #0]
 801a116:	4618      	mov	r0, r3
 801a118:	f7f9 fc8d 	bl	8013a36 <lwip_htonl>
 801a11c:	4603      	mov	r3, r0
 801a11e:	6063      	str	r3, [r4, #4]
 801a120:	6863      	ldr	r3, [r4, #4]
 801a122:	4a45      	ldr	r2, [pc, #276]	; (801a238 <tcp_input+0x2ac>)
 801a124:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801a126:	4b3c      	ldr	r3, [pc, #240]	; (801a218 <tcp_input+0x28c>)
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	689b      	ldr	r3, [r3, #8]
 801a12c:	4a3a      	ldr	r2, [pc, #232]	; (801a218 <tcp_input+0x28c>)
 801a12e:	6814      	ldr	r4, [r2, #0]
 801a130:	4618      	mov	r0, r3
 801a132:	f7f9 fc80 	bl	8013a36 <lwip_htonl>
 801a136:	4603      	mov	r3, r0
 801a138:	60a3      	str	r3, [r4, #8]
 801a13a:	68a3      	ldr	r3, [r4, #8]
 801a13c:	4a3f      	ldr	r2, [pc, #252]	; (801a23c <tcp_input+0x2b0>)
 801a13e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801a140:	4b35      	ldr	r3, [pc, #212]	; (801a218 <tcp_input+0x28c>)
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	89db      	ldrh	r3, [r3, #14]
 801a146:	b29b      	uxth	r3, r3
 801a148:	4a33      	ldr	r2, [pc, #204]	; (801a218 <tcp_input+0x28c>)
 801a14a:	6814      	ldr	r4, [r2, #0]
 801a14c:	4618      	mov	r0, r3
 801a14e:	f7f9 fc5d 	bl	8013a0c <lwip_htons>
 801a152:	4603      	mov	r3, r0
 801a154:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801a156:	4b30      	ldr	r3, [pc, #192]	; (801a218 <tcp_input+0x28c>)
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	899b      	ldrh	r3, [r3, #12]
 801a15c:	b29b      	uxth	r3, r3
 801a15e:	4618      	mov	r0, r3
 801a160:	f7f9 fc54 	bl	8013a0c <lwip_htons>
 801a164:	4603      	mov	r3, r0
 801a166:	b2db      	uxtb	r3, r3
 801a168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a16c:	b2da      	uxtb	r2, r3
 801a16e:	4b34      	ldr	r3, [pc, #208]	; (801a240 <tcp_input+0x2b4>)
 801a170:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	891a      	ldrh	r2, [r3, #8]
 801a176:	4b33      	ldr	r3, [pc, #204]	; (801a244 <tcp_input+0x2b8>)
 801a178:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801a17a:	4b31      	ldr	r3, [pc, #196]	; (801a240 <tcp_input+0x2b4>)
 801a17c:	781b      	ldrb	r3, [r3, #0]
 801a17e:	f003 0303 	and.w	r3, r3, #3
 801a182:	2b00      	cmp	r3, #0
 801a184:	d00c      	beq.n	801a1a0 <tcp_input+0x214>
    tcplen++;
 801a186:	4b2f      	ldr	r3, [pc, #188]	; (801a244 <tcp_input+0x2b8>)
 801a188:	881b      	ldrh	r3, [r3, #0]
 801a18a:	3301      	adds	r3, #1
 801a18c:	b29a      	uxth	r2, r3
 801a18e:	4b2d      	ldr	r3, [pc, #180]	; (801a244 <tcp_input+0x2b8>)
 801a190:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	891a      	ldrh	r2, [r3, #8]
 801a196:	4b2b      	ldr	r3, [pc, #172]	; (801a244 <tcp_input+0x2b8>)
 801a198:	881b      	ldrh	r3, [r3, #0]
 801a19a:	429a      	cmp	r2, r3
 801a19c:	f200 82e6 	bhi.w	801a76c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a1a4:	4b28      	ldr	r3, [pc, #160]	; (801a248 <tcp_input+0x2bc>)
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	61fb      	str	r3, [r7, #28]
 801a1aa:	e09d      	b.n	801a2e8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801a1ac:	69fb      	ldr	r3, [r7, #28]
 801a1ae:	7d1b      	ldrb	r3, [r3, #20]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d105      	bne.n	801a1c0 <tcp_input+0x234>
 801a1b4:	4b15      	ldr	r3, [pc, #84]	; (801a20c <tcp_input+0x280>)
 801a1b6:	22fb      	movs	r2, #251	; 0xfb
 801a1b8:	4924      	ldr	r1, [pc, #144]	; (801a24c <tcp_input+0x2c0>)
 801a1ba:	4816      	ldr	r0, [pc, #88]	; (801a214 <tcp_input+0x288>)
 801a1bc:	f005 fca6 	bl	801fb0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801a1c0:	69fb      	ldr	r3, [r7, #28]
 801a1c2:	7d1b      	ldrb	r3, [r3, #20]
 801a1c4:	2b0a      	cmp	r3, #10
 801a1c6:	d105      	bne.n	801a1d4 <tcp_input+0x248>
 801a1c8:	4b10      	ldr	r3, [pc, #64]	; (801a20c <tcp_input+0x280>)
 801a1ca:	22fc      	movs	r2, #252	; 0xfc
 801a1cc:	4920      	ldr	r1, [pc, #128]	; (801a250 <tcp_input+0x2c4>)
 801a1ce:	4811      	ldr	r0, [pc, #68]	; (801a214 <tcp_input+0x288>)
 801a1d0:	f005 fc9c 	bl	801fb0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801a1d4:	69fb      	ldr	r3, [r7, #28]
 801a1d6:	7d1b      	ldrb	r3, [r3, #20]
 801a1d8:	2b01      	cmp	r3, #1
 801a1da:	d105      	bne.n	801a1e8 <tcp_input+0x25c>
 801a1dc:	4b0b      	ldr	r3, [pc, #44]	; (801a20c <tcp_input+0x280>)
 801a1de:	22fd      	movs	r2, #253	; 0xfd
 801a1e0:	491c      	ldr	r1, [pc, #112]	; (801a254 <tcp_input+0x2c8>)
 801a1e2:	480c      	ldr	r0, [pc, #48]	; (801a214 <tcp_input+0x288>)
 801a1e4:	f005 fc92 	bl	801fb0c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a1e8:	69fb      	ldr	r3, [r7, #28]
 801a1ea:	7a1b      	ldrb	r3, [r3, #8]
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d033      	beq.n	801a258 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a1f0:	69fb      	ldr	r3, [r7, #28]
 801a1f2:	7a1a      	ldrb	r2, [r3, #8]
 801a1f4:	4b09      	ldr	r3, [pc, #36]	; (801a21c <tcp_input+0x290>)
 801a1f6:	685b      	ldr	r3, [r3, #4]
 801a1f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a1fc:	3301      	adds	r3, #1
 801a1fe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a200:	429a      	cmp	r2, r3
 801a202:	d029      	beq.n	801a258 <tcp_input+0x2cc>
      prev = pcb;
 801a204:	69fb      	ldr	r3, [r7, #28]
 801a206:	61bb      	str	r3, [r7, #24]
      continue;
 801a208:	e06b      	b.n	801a2e2 <tcp_input+0x356>
 801a20a:	bf00      	nop
 801a20c:	08023098 	.word	0x08023098
 801a210:	08023110 	.word	0x08023110
 801a214:	08023128 	.word	0x08023128
 801a218:	2400f948 	.word	0x2400f948
 801a21c:	24008e50 	.word	0x24008e50
 801a220:	2400f94c 	.word	0x2400f94c
 801a224:	2400f950 	.word	0x2400f950
 801a228:	2400f94e 	.word	0x2400f94e
 801a22c:	08023150 	.word	0x08023150
 801a230:	08023160 	.word	0x08023160
 801a234:	0802316c 	.word	0x0802316c
 801a238:	2400f958 	.word	0x2400f958
 801a23c:	2400f95c 	.word	0x2400f95c
 801a240:	2400f964 	.word	0x2400f964
 801a244:	2400f962 	.word	0x2400f962
 801a248:	2400f92c 	.word	0x2400f92c
 801a24c:	0802318c 	.word	0x0802318c
 801a250:	080231b4 	.word	0x080231b4
 801a254:	080231e0 	.word	0x080231e0
    }

    if (pcb->remote_port == tcphdr->src &&
 801a258:	69fb      	ldr	r3, [r7, #28]
 801a25a:	8b1a      	ldrh	r2, [r3, #24]
 801a25c:	4b72      	ldr	r3, [pc, #456]	; (801a428 <tcp_input+0x49c>)
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	881b      	ldrh	r3, [r3, #0]
 801a262:	b29b      	uxth	r3, r3
 801a264:	429a      	cmp	r2, r3
 801a266:	d13a      	bne.n	801a2de <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801a268:	69fb      	ldr	r3, [r7, #28]
 801a26a:	8ada      	ldrh	r2, [r3, #22]
 801a26c:	4b6e      	ldr	r3, [pc, #440]	; (801a428 <tcp_input+0x49c>)
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	885b      	ldrh	r3, [r3, #2]
 801a272:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801a274:	429a      	cmp	r2, r3
 801a276:	d132      	bne.n	801a2de <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a278:	69fb      	ldr	r3, [r7, #28]
 801a27a:	685a      	ldr	r2, [r3, #4]
 801a27c:	4b6b      	ldr	r3, [pc, #428]	; (801a42c <tcp_input+0x4a0>)
 801a27e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801a280:	429a      	cmp	r2, r3
 801a282:	d12c      	bne.n	801a2de <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a284:	69fb      	ldr	r3, [r7, #28]
 801a286:	681a      	ldr	r2, [r3, #0]
 801a288:	4b68      	ldr	r3, [pc, #416]	; (801a42c <tcp_input+0x4a0>)
 801a28a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a28c:	429a      	cmp	r2, r3
 801a28e:	d126      	bne.n	801a2de <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801a290:	69fb      	ldr	r3, [r7, #28]
 801a292:	68db      	ldr	r3, [r3, #12]
 801a294:	69fa      	ldr	r2, [r7, #28]
 801a296:	429a      	cmp	r2, r3
 801a298:	d106      	bne.n	801a2a8 <tcp_input+0x31c>
 801a29a:	4b65      	ldr	r3, [pc, #404]	; (801a430 <tcp_input+0x4a4>)
 801a29c:	f240 120d 	movw	r2, #269	; 0x10d
 801a2a0:	4964      	ldr	r1, [pc, #400]	; (801a434 <tcp_input+0x4a8>)
 801a2a2:	4865      	ldr	r0, [pc, #404]	; (801a438 <tcp_input+0x4ac>)
 801a2a4:	f005 fc32 	bl	801fb0c <iprintf>
      if (prev != NULL) {
 801a2a8:	69bb      	ldr	r3, [r7, #24]
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d00a      	beq.n	801a2c4 <tcp_input+0x338>
        prev->next = pcb->next;
 801a2ae:	69fb      	ldr	r3, [r7, #28]
 801a2b0:	68da      	ldr	r2, [r3, #12]
 801a2b2:	69bb      	ldr	r3, [r7, #24]
 801a2b4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801a2b6:	4b61      	ldr	r3, [pc, #388]	; (801a43c <tcp_input+0x4b0>)
 801a2b8:	681a      	ldr	r2, [r3, #0]
 801a2ba:	69fb      	ldr	r3, [r7, #28]
 801a2bc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801a2be:	4a5f      	ldr	r2, [pc, #380]	; (801a43c <tcp_input+0x4b0>)
 801a2c0:	69fb      	ldr	r3, [r7, #28]
 801a2c2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801a2c4:	69fb      	ldr	r3, [r7, #28]
 801a2c6:	68db      	ldr	r3, [r3, #12]
 801a2c8:	69fa      	ldr	r2, [r7, #28]
 801a2ca:	429a      	cmp	r2, r3
 801a2cc:	d111      	bne.n	801a2f2 <tcp_input+0x366>
 801a2ce:	4b58      	ldr	r3, [pc, #352]	; (801a430 <tcp_input+0x4a4>)
 801a2d0:	f240 1215 	movw	r2, #277	; 0x115
 801a2d4:	495a      	ldr	r1, [pc, #360]	; (801a440 <tcp_input+0x4b4>)
 801a2d6:	4858      	ldr	r0, [pc, #352]	; (801a438 <tcp_input+0x4ac>)
 801a2d8:	f005 fc18 	bl	801fb0c <iprintf>
      break;
 801a2dc:	e009      	b.n	801a2f2 <tcp_input+0x366>
    }
    prev = pcb;
 801a2de:	69fb      	ldr	r3, [r7, #28]
 801a2e0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a2e2:	69fb      	ldr	r3, [r7, #28]
 801a2e4:	68db      	ldr	r3, [r3, #12]
 801a2e6:	61fb      	str	r3, [r7, #28]
 801a2e8:	69fb      	ldr	r3, [r7, #28]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	f47f af5e 	bne.w	801a1ac <tcp_input+0x220>
 801a2f0:	e000      	b.n	801a2f4 <tcp_input+0x368>
      break;
 801a2f2:	bf00      	nop
  }

  if (pcb == NULL) {
 801a2f4:	69fb      	ldr	r3, [r7, #28]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	f040 80aa 	bne.w	801a450 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a2fc:	4b51      	ldr	r3, [pc, #324]	; (801a444 <tcp_input+0x4b8>)
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	61fb      	str	r3, [r7, #28]
 801a302:	e03f      	b.n	801a384 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a304:	69fb      	ldr	r3, [r7, #28]
 801a306:	7d1b      	ldrb	r3, [r3, #20]
 801a308:	2b0a      	cmp	r3, #10
 801a30a:	d006      	beq.n	801a31a <tcp_input+0x38e>
 801a30c:	4b48      	ldr	r3, [pc, #288]	; (801a430 <tcp_input+0x4a4>)
 801a30e:	f240 121f 	movw	r2, #287	; 0x11f
 801a312:	494d      	ldr	r1, [pc, #308]	; (801a448 <tcp_input+0x4bc>)
 801a314:	4848      	ldr	r0, [pc, #288]	; (801a438 <tcp_input+0x4ac>)
 801a316:	f005 fbf9 	bl	801fb0c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a31a:	69fb      	ldr	r3, [r7, #28]
 801a31c:	7a1b      	ldrb	r3, [r3, #8]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d009      	beq.n	801a336 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a322:	69fb      	ldr	r3, [r7, #28]
 801a324:	7a1a      	ldrb	r2, [r3, #8]
 801a326:	4b41      	ldr	r3, [pc, #260]	; (801a42c <tcp_input+0x4a0>)
 801a328:	685b      	ldr	r3, [r3, #4]
 801a32a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a32e:	3301      	adds	r3, #1
 801a330:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a332:	429a      	cmp	r2, r3
 801a334:	d122      	bne.n	801a37c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801a336:	69fb      	ldr	r3, [r7, #28]
 801a338:	8b1a      	ldrh	r2, [r3, #24]
 801a33a:	4b3b      	ldr	r3, [pc, #236]	; (801a428 <tcp_input+0x49c>)
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	881b      	ldrh	r3, [r3, #0]
 801a340:	b29b      	uxth	r3, r3
 801a342:	429a      	cmp	r2, r3
 801a344:	d11b      	bne.n	801a37e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801a346:	69fb      	ldr	r3, [r7, #28]
 801a348:	8ada      	ldrh	r2, [r3, #22]
 801a34a:	4b37      	ldr	r3, [pc, #220]	; (801a428 <tcp_input+0x49c>)
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	885b      	ldrh	r3, [r3, #2]
 801a350:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801a352:	429a      	cmp	r2, r3
 801a354:	d113      	bne.n	801a37e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a356:	69fb      	ldr	r3, [r7, #28]
 801a358:	685a      	ldr	r2, [r3, #4]
 801a35a:	4b34      	ldr	r3, [pc, #208]	; (801a42c <tcp_input+0x4a0>)
 801a35c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801a35e:	429a      	cmp	r2, r3
 801a360:	d10d      	bne.n	801a37e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a362:	69fb      	ldr	r3, [r7, #28]
 801a364:	681a      	ldr	r2, [r3, #0]
 801a366:	4b31      	ldr	r3, [pc, #196]	; (801a42c <tcp_input+0x4a0>)
 801a368:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a36a:	429a      	cmp	r2, r3
 801a36c:	d107      	bne.n	801a37e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801a36e:	69f8      	ldr	r0, [r7, #28]
 801a370:	f000 fb56 	bl	801aa20 <tcp_timewait_input>
        }
        pbuf_free(p);
 801a374:	6878      	ldr	r0, [r7, #4]
 801a376:	f7fd fb1d 	bl	80179b4 <pbuf_free>
        return;
 801a37a:	e1fd      	b.n	801a778 <tcp_input+0x7ec>
        continue;
 801a37c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a37e:	69fb      	ldr	r3, [r7, #28]
 801a380:	68db      	ldr	r3, [r3, #12]
 801a382:	61fb      	str	r3, [r7, #28]
 801a384:	69fb      	ldr	r3, [r7, #28]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d1bc      	bne.n	801a304 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801a38a:	2300      	movs	r3, #0
 801a38c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a38e:	4b2f      	ldr	r3, [pc, #188]	; (801a44c <tcp_input+0x4c0>)
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	617b      	str	r3, [r7, #20]
 801a394:	e02a      	b.n	801a3ec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a396:	697b      	ldr	r3, [r7, #20]
 801a398:	7a1b      	ldrb	r3, [r3, #8]
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d00c      	beq.n	801a3b8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a39e:	697b      	ldr	r3, [r7, #20]
 801a3a0:	7a1a      	ldrb	r2, [r3, #8]
 801a3a2:	4b22      	ldr	r3, [pc, #136]	; (801a42c <tcp_input+0x4a0>)
 801a3a4:	685b      	ldr	r3, [r3, #4]
 801a3a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a3aa:	3301      	adds	r3, #1
 801a3ac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a3ae:	429a      	cmp	r2, r3
 801a3b0:	d002      	beq.n	801a3b8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801a3b2:	697b      	ldr	r3, [r7, #20]
 801a3b4:	61bb      	str	r3, [r7, #24]
        continue;
 801a3b6:	e016      	b.n	801a3e6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801a3b8:	697b      	ldr	r3, [r7, #20]
 801a3ba:	8ada      	ldrh	r2, [r3, #22]
 801a3bc:	4b1a      	ldr	r3, [pc, #104]	; (801a428 <tcp_input+0x49c>)
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	885b      	ldrh	r3, [r3, #2]
 801a3c2:	b29b      	uxth	r3, r3
 801a3c4:	429a      	cmp	r2, r3
 801a3c6:	d10c      	bne.n	801a3e2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801a3c8:	697b      	ldr	r3, [r7, #20]
 801a3ca:	681a      	ldr	r2, [r3, #0]
 801a3cc:	4b17      	ldr	r3, [pc, #92]	; (801a42c <tcp_input+0x4a0>)
 801a3ce:	695b      	ldr	r3, [r3, #20]
 801a3d0:	429a      	cmp	r2, r3
 801a3d2:	d00f      	beq.n	801a3f4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801a3d4:	697b      	ldr	r3, [r7, #20]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d00d      	beq.n	801a3f6 <tcp_input+0x46a>
 801a3da:	697b      	ldr	r3, [r7, #20]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d009      	beq.n	801a3f6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801a3e2:	697b      	ldr	r3, [r7, #20]
 801a3e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a3e6:	697b      	ldr	r3, [r7, #20]
 801a3e8:	68db      	ldr	r3, [r3, #12]
 801a3ea:	617b      	str	r3, [r7, #20]
 801a3ec:	697b      	ldr	r3, [r7, #20]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d1d1      	bne.n	801a396 <tcp_input+0x40a>
 801a3f2:	e000      	b.n	801a3f6 <tcp_input+0x46a>
            break;
 801a3f4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801a3f6:	697b      	ldr	r3, [r7, #20]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d029      	beq.n	801a450 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801a3fc:	69bb      	ldr	r3, [r7, #24]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d00a      	beq.n	801a418 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801a402:	697b      	ldr	r3, [r7, #20]
 801a404:	68da      	ldr	r2, [r3, #12]
 801a406:	69bb      	ldr	r3, [r7, #24]
 801a408:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801a40a:	4b10      	ldr	r3, [pc, #64]	; (801a44c <tcp_input+0x4c0>)
 801a40c:	681a      	ldr	r2, [r3, #0]
 801a40e:	697b      	ldr	r3, [r7, #20]
 801a410:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801a412:	4a0e      	ldr	r2, [pc, #56]	; (801a44c <tcp_input+0x4c0>)
 801a414:	697b      	ldr	r3, [r7, #20]
 801a416:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801a418:	6978      	ldr	r0, [r7, #20]
 801a41a:	f000 fa03 	bl	801a824 <tcp_listen_input>
      }
      pbuf_free(p);
 801a41e:	6878      	ldr	r0, [r7, #4]
 801a420:	f7fd fac8 	bl	80179b4 <pbuf_free>
      return;
 801a424:	e1a8      	b.n	801a778 <tcp_input+0x7ec>
 801a426:	bf00      	nop
 801a428:	2400f948 	.word	0x2400f948
 801a42c:	24008e50 	.word	0x24008e50
 801a430:	08023098 	.word	0x08023098
 801a434:	08023208 	.word	0x08023208
 801a438:	08023128 	.word	0x08023128
 801a43c:	2400f92c 	.word	0x2400f92c
 801a440:	08023234 	.word	0x08023234
 801a444:	2400f930 	.word	0x2400f930
 801a448:	08023260 	.word	0x08023260
 801a44c:	2400f928 	.word	0x2400f928
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801a450:	69fb      	ldr	r3, [r7, #28]
 801a452:	2b00      	cmp	r3, #0
 801a454:	f000 8158 	beq.w	801a708 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801a458:	4b95      	ldr	r3, [pc, #596]	; (801a6b0 <tcp_input+0x724>)
 801a45a:	2200      	movs	r2, #0
 801a45c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	891a      	ldrh	r2, [r3, #8]
 801a462:	4b93      	ldr	r3, [pc, #588]	; (801a6b0 <tcp_input+0x724>)
 801a464:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801a466:	4a92      	ldr	r2, [pc, #584]	; (801a6b0 <tcp_input+0x724>)
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801a46c:	4b91      	ldr	r3, [pc, #580]	; (801a6b4 <tcp_input+0x728>)
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	4a8f      	ldr	r2, [pc, #572]	; (801a6b0 <tcp_input+0x724>)
 801a472:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801a474:	4b90      	ldr	r3, [pc, #576]	; (801a6b8 <tcp_input+0x72c>)
 801a476:	2200      	movs	r2, #0
 801a478:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801a47a:	4b90      	ldr	r3, [pc, #576]	; (801a6bc <tcp_input+0x730>)
 801a47c:	2200      	movs	r2, #0
 801a47e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801a480:	4b8f      	ldr	r3, [pc, #572]	; (801a6c0 <tcp_input+0x734>)
 801a482:	2200      	movs	r2, #0
 801a484:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801a486:	4b8f      	ldr	r3, [pc, #572]	; (801a6c4 <tcp_input+0x738>)
 801a488:	781b      	ldrb	r3, [r3, #0]
 801a48a:	f003 0308 	and.w	r3, r3, #8
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d006      	beq.n	801a4a0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	7b5b      	ldrb	r3, [r3, #13]
 801a496:	f043 0301 	orr.w	r3, r3, #1
 801a49a:	b2da      	uxtb	r2, r3
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801a4a0:	69fb      	ldr	r3, [r7, #28]
 801a4a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d017      	beq.n	801a4d8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801a4a8:	69f8      	ldr	r0, [r7, #28]
 801a4aa:	f7ff f859 	bl	8019560 <tcp_process_refused_data>
 801a4ae:	4603      	mov	r3, r0
 801a4b0:	f113 0f0d 	cmn.w	r3, #13
 801a4b4:	d007      	beq.n	801a4c6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801a4b6:	69fb      	ldr	r3, [r7, #28]
 801a4b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d00c      	beq.n	801a4d8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801a4be:	4b82      	ldr	r3, [pc, #520]	; (801a6c8 <tcp_input+0x73c>)
 801a4c0:	881b      	ldrh	r3, [r3, #0]
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d008      	beq.n	801a4d8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801a4c6:	69fb      	ldr	r3, [r7, #28]
 801a4c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	f040 80e4 	bne.w	801a698 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801a4d0:	69f8      	ldr	r0, [r7, #28]
 801a4d2:	f003 fe05 	bl	801e0e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801a4d6:	e0df      	b.n	801a698 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 801a4d8:	4a7c      	ldr	r2, [pc, #496]	; (801a6cc <tcp_input+0x740>)
 801a4da:	69fb      	ldr	r3, [r7, #28]
 801a4dc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801a4de:	69f8      	ldr	r0, [r7, #28]
 801a4e0:	f000 fb18 	bl	801ab14 <tcp_process>
 801a4e4:	4603      	mov	r3, r0
 801a4e6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801a4e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a4ec:	f113 0f0d 	cmn.w	r3, #13
 801a4f0:	f000 80d4 	beq.w	801a69c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 801a4f4:	4b71      	ldr	r3, [pc, #452]	; (801a6bc <tcp_input+0x730>)
 801a4f6:	781b      	ldrb	r3, [r3, #0]
 801a4f8:	f003 0308 	and.w	r3, r3, #8
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d015      	beq.n	801a52c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801a500:	69fb      	ldr	r3, [r7, #28]
 801a502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a506:	2b00      	cmp	r3, #0
 801a508:	d008      	beq.n	801a51c <tcp_input+0x590>
 801a50a:	69fb      	ldr	r3, [r7, #28]
 801a50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a510:	69fa      	ldr	r2, [r7, #28]
 801a512:	6912      	ldr	r2, [r2, #16]
 801a514:	f06f 010d 	mvn.w	r1, #13
 801a518:	4610      	mov	r0, r2
 801a51a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a51c:	69f9      	ldr	r1, [r7, #28]
 801a51e:	486c      	ldr	r0, [pc, #432]	; (801a6d0 <tcp_input+0x744>)
 801a520:	f7ff fbbc 	bl	8019c9c <tcp_pcb_remove>
        tcp_free(pcb);
 801a524:	69f8      	ldr	r0, [r7, #28]
 801a526:	f7fd fed3 	bl	80182d0 <tcp_free>
 801a52a:	e0da      	b.n	801a6e2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801a52c:	2300      	movs	r3, #0
 801a52e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801a530:	4b63      	ldr	r3, [pc, #396]	; (801a6c0 <tcp_input+0x734>)
 801a532:	881b      	ldrh	r3, [r3, #0]
 801a534:	2b00      	cmp	r3, #0
 801a536:	d01d      	beq.n	801a574 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801a538:	4b61      	ldr	r3, [pc, #388]	; (801a6c0 <tcp_input+0x734>)
 801a53a:	881b      	ldrh	r3, [r3, #0]
 801a53c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801a53e:	69fb      	ldr	r3, [r7, #28]
 801a540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a544:	2b00      	cmp	r3, #0
 801a546:	d00a      	beq.n	801a55e <tcp_input+0x5d2>
 801a548:	69fb      	ldr	r3, [r7, #28]
 801a54a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a54e:	69fa      	ldr	r2, [r7, #28]
 801a550:	6910      	ldr	r0, [r2, #16]
 801a552:	89fa      	ldrh	r2, [r7, #14]
 801a554:	69f9      	ldr	r1, [r7, #28]
 801a556:	4798      	blx	r3
 801a558:	4603      	mov	r3, r0
 801a55a:	74fb      	strb	r3, [r7, #19]
 801a55c:	e001      	b.n	801a562 <tcp_input+0x5d6>
 801a55e:	2300      	movs	r3, #0
 801a560:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801a562:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a566:	f113 0f0d 	cmn.w	r3, #13
 801a56a:	f000 8099 	beq.w	801a6a0 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 801a56e:	4b54      	ldr	r3, [pc, #336]	; (801a6c0 <tcp_input+0x734>)
 801a570:	2200      	movs	r2, #0
 801a572:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801a574:	69f8      	ldr	r0, [r7, #28]
 801a576:	f000 f915 	bl	801a7a4 <tcp_input_delayed_close>
 801a57a:	4603      	mov	r3, r0
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	f040 8091 	bne.w	801a6a4 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801a582:	4b4d      	ldr	r3, [pc, #308]	; (801a6b8 <tcp_input+0x72c>)
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d041      	beq.n	801a60e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801a58a:	69fb      	ldr	r3, [r7, #28]
 801a58c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d006      	beq.n	801a5a0 <tcp_input+0x614>
 801a592:	4b50      	ldr	r3, [pc, #320]	; (801a6d4 <tcp_input+0x748>)
 801a594:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a598:	494f      	ldr	r1, [pc, #316]	; (801a6d8 <tcp_input+0x74c>)
 801a59a:	4850      	ldr	r0, [pc, #320]	; (801a6dc <tcp_input+0x750>)
 801a59c:	f005 fab6 	bl	801fb0c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801a5a0:	69fb      	ldr	r3, [r7, #28]
 801a5a2:	8b5b      	ldrh	r3, [r3, #26]
 801a5a4:	f003 0310 	and.w	r3, r3, #16
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d008      	beq.n	801a5be <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801a5ac:	4b42      	ldr	r3, [pc, #264]	; (801a6b8 <tcp_input+0x72c>)
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	f7fd f9ff 	bl	80179b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801a5b6:	69f8      	ldr	r0, [r7, #28]
 801a5b8:	f7fe f9ce 	bl	8018958 <tcp_abort>
            goto aborted;
 801a5bc:	e091      	b.n	801a6e2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801a5be:	69fb      	ldr	r3, [r7, #28]
 801a5c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d00c      	beq.n	801a5e2 <tcp_input+0x656>
 801a5c8:	69fb      	ldr	r3, [r7, #28]
 801a5ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a5ce:	69fb      	ldr	r3, [r7, #28]
 801a5d0:	6918      	ldr	r0, [r3, #16]
 801a5d2:	4b39      	ldr	r3, [pc, #228]	; (801a6b8 <tcp_input+0x72c>)
 801a5d4:	681a      	ldr	r2, [r3, #0]
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	69f9      	ldr	r1, [r7, #28]
 801a5da:	47a0      	blx	r4
 801a5dc:	4603      	mov	r3, r0
 801a5de:	74fb      	strb	r3, [r7, #19]
 801a5e0:	e008      	b.n	801a5f4 <tcp_input+0x668>
 801a5e2:	4b35      	ldr	r3, [pc, #212]	; (801a6b8 <tcp_input+0x72c>)
 801a5e4:	681a      	ldr	r2, [r3, #0]
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	69f9      	ldr	r1, [r7, #28]
 801a5ea:	2000      	movs	r0, #0
 801a5ec:	f7ff f890 	bl	8019710 <tcp_recv_null>
 801a5f0:	4603      	mov	r3, r0
 801a5f2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801a5f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a5f8:	f113 0f0d 	cmn.w	r3, #13
 801a5fc:	d054      	beq.n	801a6a8 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801a5fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d003      	beq.n	801a60e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801a606:	4b2c      	ldr	r3, [pc, #176]	; (801a6b8 <tcp_input+0x72c>)
 801a608:	681a      	ldr	r2, [r3, #0]
 801a60a:	69fb      	ldr	r3, [r7, #28]
 801a60c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801a60e:	4b2b      	ldr	r3, [pc, #172]	; (801a6bc <tcp_input+0x730>)
 801a610:	781b      	ldrb	r3, [r3, #0]
 801a612:	f003 0320 	and.w	r3, r3, #32
 801a616:	2b00      	cmp	r3, #0
 801a618:	d031      	beq.n	801a67e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 801a61a:	69fb      	ldr	r3, [r7, #28]
 801a61c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d009      	beq.n	801a636 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801a622:	69fb      	ldr	r3, [r7, #28]
 801a624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a626:	7b5a      	ldrb	r2, [r3, #13]
 801a628:	69fb      	ldr	r3, [r7, #28]
 801a62a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a62c:	f042 0220 	orr.w	r2, r2, #32
 801a630:	b2d2      	uxtb	r2, r2
 801a632:	735a      	strb	r2, [r3, #13]
 801a634:	e023      	b.n	801a67e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a636:	69fb      	ldr	r3, [r7, #28]
 801a638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a63a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801a63e:	4293      	cmp	r3, r2
 801a640:	d005      	beq.n	801a64e <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 801a642:	69fb      	ldr	r3, [r7, #28]
 801a644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a646:	3301      	adds	r3, #1
 801a648:	b29a      	uxth	r2, r3
 801a64a:	69fb      	ldr	r3, [r7, #28]
 801a64c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801a64e:	69fb      	ldr	r3, [r7, #28]
 801a650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a654:	2b00      	cmp	r3, #0
 801a656:	d00b      	beq.n	801a670 <tcp_input+0x6e4>
 801a658:	69fb      	ldr	r3, [r7, #28]
 801a65a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a65e:	69fb      	ldr	r3, [r7, #28]
 801a660:	6918      	ldr	r0, [r3, #16]
 801a662:	2300      	movs	r3, #0
 801a664:	2200      	movs	r2, #0
 801a666:	69f9      	ldr	r1, [r7, #28]
 801a668:	47a0      	blx	r4
 801a66a:	4603      	mov	r3, r0
 801a66c:	74fb      	strb	r3, [r7, #19]
 801a66e:	e001      	b.n	801a674 <tcp_input+0x6e8>
 801a670:	2300      	movs	r3, #0
 801a672:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801a674:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a678:	f113 0f0d 	cmn.w	r3, #13
 801a67c:	d016      	beq.n	801a6ac <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801a67e:	4b13      	ldr	r3, [pc, #76]	; (801a6cc <tcp_input+0x740>)
 801a680:	2200      	movs	r2, #0
 801a682:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801a684:	69f8      	ldr	r0, [r7, #28]
 801a686:	f000 f88d 	bl	801a7a4 <tcp_input_delayed_close>
 801a68a:	4603      	mov	r3, r0
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d127      	bne.n	801a6e0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801a690:	69f8      	ldr	r0, [r7, #28]
 801a692:	f002 ff1f 	bl	801d4d4 <tcp_output>
 801a696:	e024      	b.n	801a6e2 <tcp_input+0x756>
        goto aborted;
 801a698:	bf00      	nop
 801a69a:	e022      	b.n	801a6e2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801a69c:	bf00      	nop
 801a69e:	e020      	b.n	801a6e2 <tcp_input+0x756>
              goto aborted;
 801a6a0:	bf00      	nop
 801a6a2:	e01e      	b.n	801a6e2 <tcp_input+0x756>
          goto aborted;
 801a6a4:	bf00      	nop
 801a6a6:	e01c      	b.n	801a6e2 <tcp_input+0x756>
            goto aborted;
 801a6a8:	bf00      	nop
 801a6aa:	e01a      	b.n	801a6e2 <tcp_input+0x756>
              goto aborted;
 801a6ac:	bf00      	nop
 801a6ae:	e018      	b.n	801a6e2 <tcp_input+0x756>
 801a6b0:	2400f938 	.word	0x2400f938
 801a6b4:	2400f948 	.word	0x2400f948
 801a6b8:	2400f968 	.word	0x2400f968
 801a6bc:	2400f965 	.word	0x2400f965
 801a6c0:	2400f960 	.word	0x2400f960
 801a6c4:	2400f964 	.word	0x2400f964
 801a6c8:	2400f962 	.word	0x2400f962
 801a6cc:	2400f96c 	.word	0x2400f96c
 801a6d0:	2400f92c 	.word	0x2400f92c
 801a6d4:	08023098 	.word	0x08023098
 801a6d8:	08023290 	.word	0x08023290
 801a6dc:	08023128 	.word	0x08023128
          goto aborted;
 801a6e0:	bf00      	nop
    tcp_input_pcb = NULL;
 801a6e2:	4b27      	ldr	r3, [pc, #156]	; (801a780 <tcp_input+0x7f4>)
 801a6e4:	2200      	movs	r2, #0
 801a6e6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801a6e8:	4b26      	ldr	r3, [pc, #152]	; (801a784 <tcp_input+0x7f8>)
 801a6ea:	2200      	movs	r2, #0
 801a6ec:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801a6ee:	4b26      	ldr	r3, [pc, #152]	; (801a788 <tcp_input+0x7fc>)
 801a6f0:	685b      	ldr	r3, [r3, #4]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d03f      	beq.n	801a776 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801a6f6:	4b24      	ldr	r3, [pc, #144]	; (801a788 <tcp_input+0x7fc>)
 801a6f8:	685b      	ldr	r3, [r3, #4]
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	f7fd f95a 	bl	80179b4 <pbuf_free>
      inseg.p = NULL;
 801a700:	4b21      	ldr	r3, [pc, #132]	; (801a788 <tcp_input+0x7fc>)
 801a702:	2200      	movs	r2, #0
 801a704:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801a706:	e036      	b.n	801a776 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801a708:	4b20      	ldr	r3, [pc, #128]	; (801a78c <tcp_input+0x800>)
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	899b      	ldrh	r3, [r3, #12]
 801a70e:	b29b      	uxth	r3, r3
 801a710:	4618      	mov	r0, r3
 801a712:	f7f9 f97b 	bl	8013a0c <lwip_htons>
 801a716:	4603      	mov	r3, r0
 801a718:	b2db      	uxtb	r3, r3
 801a71a:	f003 0304 	and.w	r3, r3, #4
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d118      	bne.n	801a754 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a722:	4b1b      	ldr	r3, [pc, #108]	; (801a790 <tcp_input+0x804>)
 801a724:	6819      	ldr	r1, [r3, #0]
 801a726:	4b1b      	ldr	r3, [pc, #108]	; (801a794 <tcp_input+0x808>)
 801a728:	881b      	ldrh	r3, [r3, #0]
 801a72a:	461a      	mov	r2, r3
 801a72c:	4b1a      	ldr	r3, [pc, #104]	; (801a798 <tcp_input+0x80c>)
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a732:	4b16      	ldr	r3, [pc, #88]	; (801a78c <tcp_input+0x800>)
 801a734:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a736:	885b      	ldrh	r3, [r3, #2]
 801a738:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a73a:	4a14      	ldr	r2, [pc, #80]	; (801a78c <tcp_input+0x800>)
 801a73c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a73e:	8812      	ldrh	r2, [r2, #0]
 801a740:	b292      	uxth	r2, r2
 801a742:	9202      	str	r2, [sp, #8]
 801a744:	9301      	str	r3, [sp, #4]
 801a746:	4b15      	ldr	r3, [pc, #84]	; (801a79c <tcp_input+0x810>)
 801a748:	9300      	str	r3, [sp, #0]
 801a74a:	4b15      	ldr	r3, [pc, #84]	; (801a7a0 <tcp_input+0x814>)
 801a74c:	4602      	mov	r2, r0
 801a74e:	2000      	movs	r0, #0
 801a750:	f003 fc74 	bl	801e03c <tcp_rst>
    pbuf_free(p);
 801a754:	6878      	ldr	r0, [r7, #4]
 801a756:	f7fd f92d 	bl	80179b4 <pbuf_free>
  return;
 801a75a:	e00c      	b.n	801a776 <tcp_input+0x7ea>
    goto dropped;
 801a75c:	bf00      	nop
 801a75e:	e006      	b.n	801a76e <tcp_input+0x7e2>
    goto dropped;
 801a760:	bf00      	nop
 801a762:	e004      	b.n	801a76e <tcp_input+0x7e2>
    goto dropped;
 801a764:	bf00      	nop
 801a766:	e002      	b.n	801a76e <tcp_input+0x7e2>
      goto dropped;
 801a768:	bf00      	nop
 801a76a:	e000      	b.n	801a76e <tcp_input+0x7e2>
      goto dropped;
 801a76c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801a76e:	6878      	ldr	r0, [r7, #4]
 801a770:	f7fd f920 	bl	80179b4 <pbuf_free>
 801a774:	e000      	b.n	801a778 <tcp_input+0x7ec>
  return;
 801a776:	bf00      	nop
}
 801a778:	3724      	adds	r7, #36	; 0x24
 801a77a:	46bd      	mov	sp, r7
 801a77c:	bd90      	pop	{r4, r7, pc}
 801a77e:	bf00      	nop
 801a780:	2400f96c 	.word	0x2400f96c
 801a784:	2400f968 	.word	0x2400f968
 801a788:	2400f938 	.word	0x2400f938
 801a78c:	2400f948 	.word	0x2400f948
 801a790:	2400f95c 	.word	0x2400f95c
 801a794:	2400f962 	.word	0x2400f962
 801a798:	2400f958 	.word	0x2400f958
 801a79c:	24008e60 	.word	0x24008e60
 801a7a0:	24008e64 	.word	0x24008e64

0801a7a4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801a7a4:	b580      	push	{r7, lr}
 801a7a6:	b082      	sub	sp, #8
 801a7a8:	af00      	add	r7, sp, #0
 801a7aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d106      	bne.n	801a7c0 <tcp_input_delayed_close+0x1c>
 801a7b2:	4b17      	ldr	r3, [pc, #92]	; (801a810 <tcp_input_delayed_close+0x6c>)
 801a7b4:	f240 225a 	movw	r2, #602	; 0x25a
 801a7b8:	4916      	ldr	r1, [pc, #88]	; (801a814 <tcp_input_delayed_close+0x70>)
 801a7ba:	4817      	ldr	r0, [pc, #92]	; (801a818 <tcp_input_delayed_close+0x74>)
 801a7bc:	f005 f9a6 	bl	801fb0c <iprintf>

  if (recv_flags & TF_CLOSED) {
 801a7c0:	4b16      	ldr	r3, [pc, #88]	; (801a81c <tcp_input_delayed_close+0x78>)
 801a7c2:	781b      	ldrb	r3, [r3, #0]
 801a7c4:	f003 0310 	and.w	r3, r3, #16
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d01c      	beq.n	801a806 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	8b5b      	ldrh	r3, [r3, #26]
 801a7d0:	f003 0310 	and.w	r3, r3, #16
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d10d      	bne.n	801a7f4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d008      	beq.n	801a7f4 <tcp_input_delayed_close+0x50>
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a7e8:	687a      	ldr	r2, [r7, #4]
 801a7ea:	6912      	ldr	r2, [r2, #16]
 801a7ec:	f06f 010e 	mvn.w	r1, #14
 801a7f0:	4610      	mov	r0, r2
 801a7f2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a7f4:	6879      	ldr	r1, [r7, #4]
 801a7f6:	480a      	ldr	r0, [pc, #40]	; (801a820 <tcp_input_delayed_close+0x7c>)
 801a7f8:	f7ff fa50 	bl	8019c9c <tcp_pcb_remove>
    tcp_free(pcb);
 801a7fc:	6878      	ldr	r0, [r7, #4]
 801a7fe:	f7fd fd67 	bl	80182d0 <tcp_free>
    return 1;
 801a802:	2301      	movs	r3, #1
 801a804:	e000      	b.n	801a808 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801a806:	2300      	movs	r3, #0
}
 801a808:	4618      	mov	r0, r3
 801a80a:	3708      	adds	r7, #8
 801a80c:	46bd      	mov	sp, r7
 801a80e:	bd80      	pop	{r7, pc}
 801a810:	08023098 	.word	0x08023098
 801a814:	080232ac 	.word	0x080232ac
 801a818:	08023128 	.word	0x08023128
 801a81c:	2400f965 	.word	0x2400f965
 801a820:	2400f92c 	.word	0x2400f92c

0801a824 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801a824:	b590      	push	{r4, r7, lr}
 801a826:	b08b      	sub	sp, #44	; 0x2c
 801a828:	af04      	add	r7, sp, #16
 801a82a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801a82c:	4b6f      	ldr	r3, [pc, #444]	; (801a9ec <tcp_listen_input+0x1c8>)
 801a82e:	781b      	ldrb	r3, [r3, #0]
 801a830:	f003 0304 	and.w	r3, r3, #4
 801a834:	2b00      	cmp	r3, #0
 801a836:	f040 80d2 	bne.w	801a9de <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d106      	bne.n	801a84e <tcp_listen_input+0x2a>
 801a840:	4b6b      	ldr	r3, [pc, #428]	; (801a9f0 <tcp_listen_input+0x1cc>)
 801a842:	f240 2281 	movw	r2, #641	; 0x281
 801a846:	496b      	ldr	r1, [pc, #428]	; (801a9f4 <tcp_listen_input+0x1d0>)
 801a848:	486b      	ldr	r0, [pc, #428]	; (801a9f8 <tcp_listen_input+0x1d4>)
 801a84a:	f005 f95f 	bl	801fb0c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801a84e:	4b67      	ldr	r3, [pc, #412]	; (801a9ec <tcp_listen_input+0x1c8>)
 801a850:	781b      	ldrb	r3, [r3, #0]
 801a852:	f003 0310 	and.w	r3, r3, #16
 801a856:	2b00      	cmp	r3, #0
 801a858:	d019      	beq.n	801a88e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a85a:	4b68      	ldr	r3, [pc, #416]	; (801a9fc <tcp_listen_input+0x1d8>)
 801a85c:	6819      	ldr	r1, [r3, #0]
 801a85e:	4b68      	ldr	r3, [pc, #416]	; (801aa00 <tcp_listen_input+0x1dc>)
 801a860:	881b      	ldrh	r3, [r3, #0]
 801a862:	461a      	mov	r2, r3
 801a864:	4b67      	ldr	r3, [pc, #412]	; (801aa04 <tcp_listen_input+0x1e0>)
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a86a:	4b67      	ldr	r3, [pc, #412]	; (801aa08 <tcp_listen_input+0x1e4>)
 801a86c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a86e:	885b      	ldrh	r3, [r3, #2]
 801a870:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a872:	4a65      	ldr	r2, [pc, #404]	; (801aa08 <tcp_listen_input+0x1e4>)
 801a874:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a876:	8812      	ldrh	r2, [r2, #0]
 801a878:	b292      	uxth	r2, r2
 801a87a:	9202      	str	r2, [sp, #8]
 801a87c:	9301      	str	r3, [sp, #4]
 801a87e:	4b63      	ldr	r3, [pc, #396]	; (801aa0c <tcp_listen_input+0x1e8>)
 801a880:	9300      	str	r3, [sp, #0]
 801a882:	4b63      	ldr	r3, [pc, #396]	; (801aa10 <tcp_listen_input+0x1ec>)
 801a884:	4602      	mov	r2, r0
 801a886:	6878      	ldr	r0, [r7, #4]
 801a888:	f003 fbd8 	bl	801e03c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801a88c:	e0a9      	b.n	801a9e2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801a88e:	4b57      	ldr	r3, [pc, #348]	; (801a9ec <tcp_listen_input+0x1c8>)
 801a890:	781b      	ldrb	r3, [r3, #0]
 801a892:	f003 0302 	and.w	r3, r3, #2
 801a896:	2b00      	cmp	r3, #0
 801a898:	f000 80a3 	beq.w	801a9e2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	7d5b      	ldrb	r3, [r3, #21]
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	f7ff f859 	bl	8019958 <tcp_alloc>
 801a8a6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801a8a8:	697b      	ldr	r3, [r7, #20]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d111      	bne.n	801a8d2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	699b      	ldr	r3, [r3, #24]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d00a      	beq.n	801a8cc <tcp_listen_input+0xa8>
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	699b      	ldr	r3, [r3, #24]
 801a8ba:	687a      	ldr	r2, [r7, #4]
 801a8bc:	6910      	ldr	r0, [r2, #16]
 801a8be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a8c2:	2100      	movs	r1, #0
 801a8c4:	4798      	blx	r3
 801a8c6:	4603      	mov	r3, r0
 801a8c8:	73bb      	strb	r3, [r7, #14]
      return;
 801a8ca:	e08b      	b.n	801a9e4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801a8cc:	23f0      	movs	r3, #240	; 0xf0
 801a8ce:	73bb      	strb	r3, [r7, #14]
      return;
 801a8d0:	e088      	b.n	801a9e4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801a8d2:	4b50      	ldr	r3, [pc, #320]	; (801aa14 <tcp_listen_input+0x1f0>)
 801a8d4:	695a      	ldr	r2, [r3, #20]
 801a8d6:	697b      	ldr	r3, [r7, #20]
 801a8d8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801a8da:	4b4e      	ldr	r3, [pc, #312]	; (801aa14 <tcp_listen_input+0x1f0>)
 801a8dc:	691a      	ldr	r2, [r3, #16]
 801a8de:	697b      	ldr	r3, [r7, #20]
 801a8e0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	8ada      	ldrh	r2, [r3, #22]
 801a8e6:	697b      	ldr	r3, [r7, #20]
 801a8e8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801a8ea:	4b47      	ldr	r3, [pc, #284]	; (801aa08 <tcp_listen_input+0x1e4>)
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	881b      	ldrh	r3, [r3, #0]
 801a8f0:	b29a      	uxth	r2, r3
 801a8f2:	697b      	ldr	r3, [r7, #20]
 801a8f4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801a8f6:	697b      	ldr	r3, [r7, #20]
 801a8f8:	2203      	movs	r2, #3
 801a8fa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801a8fc:	4b41      	ldr	r3, [pc, #260]	; (801aa04 <tcp_listen_input+0x1e0>)
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	1c5a      	adds	r2, r3, #1
 801a902:	697b      	ldr	r3, [r7, #20]
 801a904:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801a906:	697b      	ldr	r3, [r7, #20]
 801a908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a90a:	697b      	ldr	r3, [r7, #20]
 801a90c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801a90e:	6978      	ldr	r0, [r7, #20]
 801a910:	f7ff fa58 	bl	8019dc4 <tcp_next_iss>
 801a914:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801a916:	697b      	ldr	r3, [r7, #20]
 801a918:	693a      	ldr	r2, [r7, #16]
 801a91a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801a91c:	697b      	ldr	r3, [r7, #20]
 801a91e:	693a      	ldr	r2, [r7, #16]
 801a920:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801a922:	697b      	ldr	r3, [r7, #20]
 801a924:	693a      	ldr	r2, [r7, #16]
 801a926:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801a928:	697b      	ldr	r3, [r7, #20]
 801a92a:	693a      	ldr	r2, [r7, #16]
 801a92c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801a92e:	4b35      	ldr	r3, [pc, #212]	; (801aa04 <tcp_listen_input+0x1e0>)
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	1e5a      	subs	r2, r3, #1
 801a934:	697b      	ldr	r3, [r7, #20]
 801a936:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	691a      	ldr	r2, [r3, #16]
 801a93c:	697b      	ldr	r3, [r7, #20]
 801a93e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801a940:	697b      	ldr	r3, [r7, #20]
 801a942:	687a      	ldr	r2, [r7, #4]
 801a944:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	7a5b      	ldrb	r3, [r3, #9]
 801a94a:	f003 030c 	and.w	r3, r3, #12
 801a94e:	b2da      	uxtb	r2, r3
 801a950:	697b      	ldr	r3, [r7, #20]
 801a952:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	7a1a      	ldrb	r2, [r3, #8]
 801a958:	697b      	ldr	r3, [r7, #20]
 801a95a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801a95c:	4b2e      	ldr	r3, [pc, #184]	; (801aa18 <tcp_listen_input+0x1f4>)
 801a95e:	681a      	ldr	r2, [r3, #0]
 801a960:	697b      	ldr	r3, [r7, #20]
 801a962:	60da      	str	r2, [r3, #12]
 801a964:	4a2c      	ldr	r2, [pc, #176]	; (801aa18 <tcp_listen_input+0x1f4>)
 801a966:	697b      	ldr	r3, [r7, #20]
 801a968:	6013      	str	r3, [r2, #0]
 801a96a:	f003 fee1 	bl	801e730 <tcp_timer_needed>
 801a96e:	4b2b      	ldr	r3, [pc, #172]	; (801aa1c <tcp_listen_input+0x1f8>)
 801a970:	2201      	movs	r2, #1
 801a972:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801a974:	6978      	ldr	r0, [r7, #20]
 801a976:	f001 fd8f 	bl	801c498 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801a97a:	4b23      	ldr	r3, [pc, #140]	; (801aa08 <tcp_listen_input+0x1e4>)
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	89db      	ldrh	r3, [r3, #14]
 801a980:	b29a      	uxth	r2, r3
 801a982:	697b      	ldr	r3, [r7, #20]
 801a984:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801a988:	697b      	ldr	r3, [r7, #20]
 801a98a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a98e:	697b      	ldr	r3, [r7, #20]
 801a990:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801a994:	697b      	ldr	r3, [r7, #20]
 801a996:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801a998:	697b      	ldr	r3, [r7, #20]
 801a99a:	3304      	adds	r3, #4
 801a99c:	4618      	mov	r0, r3
 801a99e:	f7fa fb0d 	bl	8014fbc <ip4_route>
 801a9a2:	4601      	mov	r1, r0
 801a9a4:	697b      	ldr	r3, [r7, #20]
 801a9a6:	3304      	adds	r3, #4
 801a9a8:	461a      	mov	r2, r3
 801a9aa:	4620      	mov	r0, r4
 801a9ac:	f7ff fa30 	bl	8019e10 <tcp_eff_send_mss_netif>
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	461a      	mov	r2, r3
 801a9b4:	697b      	ldr	r3, [r7, #20]
 801a9b6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801a9b8:	2112      	movs	r1, #18
 801a9ba:	6978      	ldr	r0, [r7, #20]
 801a9bc:	f002 fc9c 	bl	801d2f8 <tcp_enqueue_flags>
 801a9c0:	4603      	mov	r3, r0
 801a9c2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801a9c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d004      	beq.n	801a9d6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801a9cc:	2100      	movs	r1, #0
 801a9ce:	6978      	ldr	r0, [r7, #20]
 801a9d0:	f7fd ff04 	bl	80187dc <tcp_abandon>
      return;
 801a9d4:	e006      	b.n	801a9e4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801a9d6:	6978      	ldr	r0, [r7, #20]
 801a9d8:	f002 fd7c 	bl	801d4d4 <tcp_output>
  return;
 801a9dc:	e001      	b.n	801a9e2 <tcp_listen_input+0x1be>
    return;
 801a9de:	bf00      	nop
 801a9e0:	e000      	b.n	801a9e4 <tcp_listen_input+0x1c0>
  return;
 801a9e2:	bf00      	nop
}
 801a9e4:	371c      	adds	r7, #28
 801a9e6:	46bd      	mov	sp, r7
 801a9e8:	bd90      	pop	{r4, r7, pc}
 801a9ea:	bf00      	nop
 801a9ec:	2400f964 	.word	0x2400f964
 801a9f0:	08023098 	.word	0x08023098
 801a9f4:	080232d4 	.word	0x080232d4
 801a9f8:	08023128 	.word	0x08023128
 801a9fc:	2400f95c 	.word	0x2400f95c
 801aa00:	2400f962 	.word	0x2400f962
 801aa04:	2400f958 	.word	0x2400f958
 801aa08:	2400f948 	.word	0x2400f948
 801aa0c:	24008e60 	.word	0x24008e60
 801aa10:	24008e64 	.word	0x24008e64
 801aa14:	24008e50 	.word	0x24008e50
 801aa18:	2400f92c 	.word	0x2400f92c
 801aa1c:	2400f934 	.word	0x2400f934

0801aa20 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801aa20:	b580      	push	{r7, lr}
 801aa22:	b086      	sub	sp, #24
 801aa24:	af04      	add	r7, sp, #16
 801aa26:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801aa28:	4b2f      	ldr	r3, [pc, #188]	; (801aae8 <tcp_timewait_input+0xc8>)
 801aa2a:	781b      	ldrb	r3, [r3, #0]
 801aa2c:	f003 0304 	and.w	r3, r3, #4
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d153      	bne.n	801aadc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d106      	bne.n	801aa48 <tcp_timewait_input+0x28>
 801aa3a:	4b2c      	ldr	r3, [pc, #176]	; (801aaec <tcp_timewait_input+0xcc>)
 801aa3c:	f240 22ee 	movw	r2, #750	; 0x2ee
 801aa40:	492b      	ldr	r1, [pc, #172]	; (801aaf0 <tcp_timewait_input+0xd0>)
 801aa42:	482c      	ldr	r0, [pc, #176]	; (801aaf4 <tcp_timewait_input+0xd4>)
 801aa44:	f005 f862 	bl	801fb0c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801aa48:	4b27      	ldr	r3, [pc, #156]	; (801aae8 <tcp_timewait_input+0xc8>)
 801aa4a:	781b      	ldrb	r3, [r3, #0]
 801aa4c:	f003 0302 	and.w	r3, r3, #2
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d02a      	beq.n	801aaaa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801aa54:	4b28      	ldr	r3, [pc, #160]	; (801aaf8 <tcp_timewait_input+0xd8>)
 801aa56:	681a      	ldr	r2, [r3, #0]
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa5c:	1ad3      	subs	r3, r2, r3
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	db2d      	blt.n	801aabe <tcp_timewait_input+0x9e>
 801aa62:	4b25      	ldr	r3, [pc, #148]	; (801aaf8 <tcp_timewait_input+0xd8>)
 801aa64:	681a      	ldr	r2, [r3, #0]
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa6a:	6879      	ldr	r1, [r7, #4]
 801aa6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801aa6e:	440b      	add	r3, r1
 801aa70:	1ad3      	subs	r3, r2, r3
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	dc23      	bgt.n	801aabe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aa76:	4b21      	ldr	r3, [pc, #132]	; (801aafc <tcp_timewait_input+0xdc>)
 801aa78:	6819      	ldr	r1, [r3, #0]
 801aa7a:	4b21      	ldr	r3, [pc, #132]	; (801ab00 <tcp_timewait_input+0xe0>)
 801aa7c:	881b      	ldrh	r3, [r3, #0]
 801aa7e:	461a      	mov	r2, r3
 801aa80:	4b1d      	ldr	r3, [pc, #116]	; (801aaf8 <tcp_timewait_input+0xd8>)
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aa86:	4b1f      	ldr	r3, [pc, #124]	; (801ab04 <tcp_timewait_input+0xe4>)
 801aa88:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aa8a:	885b      	ldrh	r3, [r3, #2]
 801aa8c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aa8e:	4a1d      	ldr	r2, [pc, #116]	; (801ab04 <tcp_timewait_input+0xe4>)
 801aa90:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aa92:	8812      	ldrh	r2, [r2, #0]
 801aa94:	b292      	uxth	r2, r2
 801aa96:	9202      	str	r2, [sp, #8]
 801aa98:	9301      	str	r3, [sp, #4]
 801aa9a:	4b1b      	ldr	r3, [pc, #108]	; (801ab08 <tcp_timewait_input+0xe8>)
 801aa9c:	9300      	str	r3, [sp, #0]
 801aa9e:	4b1b      	ldr	r3, [pc, #108]	; (801ab0c <tcp_timewait_input+0xec>)
 801aaa0:	4602      	mov	r2, r0
 801aaa2:	6878      	ldr	r0, [r7, #4]
 801aaa4:	f003 faca 	bl	801e03c <tcp_rst>
      return;
 801aaa8:	e01b      	b.n	801aae2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801aaaa:	4b0f      	ldr	r3, [pc, #60]	; (801aae8 <tcp_timewait_input+0xc8>)
 801aaac:	781b      	ldrb	r3, [r3, #0]
 801aaae:	f003 0301 	and.w	r3, r3, #1
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d003      	beq.n	801aabe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801aab6:	4b16      	ldr	r3, [pc, #88]	; (801ab10 <tcp_timewait_input+0xf0>)
 801aab8:	681a      	ldr	r2, [r3, #0]
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801aabe:	4b10      	ldr	r3, [pc, #64]	; (801ab00 <tcp_timewait_input+0xe0>)
 801aac0:	881b      	ldrh	r3, [r3, #0]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d00c      	beq.n	801aae0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	8b5b      	ldrh	r3, [r3, #26]
 801aaca:	f043 0302 	orr.w	r3, r3, #2
 801aace:	b29a      	uxth	r2, r3
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801aad4:	6878      	ldr	r0, [r7, #4]
 801aad6:	f002 fcfd 	bl	801d4d4 <tcp_output>
  }
  return;
 801aada:	e001      	b.n	801aae0 <tcp_timewait_input+0xc0>
    return;
 801aadc:	bf00      	nop
 801aade:	e000      	b.n	801aae2 <tcp_timewait_input+0xc2>
  return;
 801aae0:	bf00      	nop
}
 801aae2:	3708      	adds	r7, #8
 801aae4:	46bd      	mov	sp, r7
 801aae6:	bd80      	pop	{r7, pc}
 801aae8:	2400f964 	.word	0x2400f964
 801aaec:	08023098 	.word	0x08023098
 801aaf0:	080232f4 	.word	0x080232f4
 801aaf4:	08023128 	.word	0x08023128
 801aaf8:	2400f958 	.word	0x2400f958
 801aafc:	2400f95c 	.word	0x2400f95c
 801ab00:	2400f962 	.word	0x2400f962
 801ab04:	2400f948 	.word	0x2400f948
 801ab08:	24008e60 	.word	0x24008e60
 801ab0c:	24008e64 	.word	0x24008e64
 801ab10:	2400f920 	.word	0x2400f920

0801ab14 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801ab14:	b590      	push	{r4, r7, lr}
 801ab16:	b08d      	sub	sp, #52	; 0x34
 801ab18:	af04      	add	r7, sp, #16
 801ab1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801ab1c:	2300      	movs	r3, #0
 801ab1e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801ab20:	2300      	movs	r3, #0
 801ab22:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d106      	bne.n	801ab38 <tcp_process+0x24>
 801ab2a:	4b9d      	ldr	r3, [pc, #628]	; (801ada0 <tcp_process+0x28c>)
 801ab2c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801ab30:	499c      	ldr	r1, [pc, #624]	; (801ada4 <tcp_process+0x290>)
 801ab32:	489d      	ldr	r0, [pc, #628]	; (801ada8 <tcp_process+0x294>)
 801ab34:	f004 ffea 	bl	801fb0c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801ab38:	4b9c      	ldr	r3, [pc, #624]	; (801adac <tcp_process+0x298>)
 801ab3a:	781b      	ldrb	r3, [r3, #0]
 801ab3c:	f003 0304 	and.w	r3, r3, #4
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d04e      	beq.n	801abe2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	7d1b      	ldrb	r3, [r3, #20]
 801ab48:	2b02      	cmp	r3, #2
 801ab4a:	d108      	bne.n	801ab5e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ab50:	4b97      	ldr	r3, [pc, #604]	; (801adb0 <tcp_process+0x29c>)
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	429a      	cmp	r2, r3
 801ab56:	d123      	bne.n	801aba0 <tcp_process+0x8c>
        acceptable = 1;
 801ab58:	2301      	movs	r3, #1
 801ab5a:	76fb      	strb	r3, [r7, #27]
 801ab5c:	e020      	b.n	801aba0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ab62:	4b94      	ldr	r3, [pc, #592]	; (801adb4 <tcp_process+0x2a0>)
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	429a      	cmp	r2, r3
 801ab68:	d102      	bne.n	801ab70 <tcp_process+0x5c>
        acceptable = 1;
 801ab6a:	2301      	movs	r3, #1
 801ab6c:	76fb      	strb	r3, [r7, #27]
 801ab6e:	e017      	b.n	801aba0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ab70:	4b90      	ldr	r3, [pc, #576]	; (801adb4 <tcp_process+0x2a0>)
 801ab72:	681a      	ldr	r2, [r3, #0]
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab78:	1ad3      	subs	r3, r2, r3
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	db10      	blt.n	801aba0 <tcp_process+0x8c>
 801ab7e:	4b8d      	ldr	r3, [pc, #564]	; (801adb4 <tcp_process+0x2a0>)
 801ab80:	681a      	ldr	r2, [r3, #0]
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab86:	6879      	ldr	r1, [r7, #4]
 801ab88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ab8a:	440b      	add	r3, r1
 801ab8c:	1ad3      	subs	r3, r2, r3
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	dc06      	bgt.n	801aba0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	8b5b      	ldrh	r3, [r3, #26]
 801ab96:	f043 0302 	orr.w	r3, r3, #2
 801ab9a:	b29a      	uxth	r2, r3
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801aba0:	7efb      	ldrb	r3, [r7, #27]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d01b      	beq.n	801abde <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	7d1b      	ldrb	r3, [r3, #20]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d106      	bne.n	801abbc <tcp_process+0xa8>
 801abae:	4b7c      	ldr	r3, [pc, #496]	; (801ada0 <tcp_process+0x28c>)
 801abb0:	f44f 724e 	mov.w	r2, #824	; 0x338
 801abb4:	4980      	ldr	r1, [pc, #512]	; (801adb8 <tcp_process+0x2a4>)
 801abb6:	487c      	ldr	r0, [pc, #496]	; (801ada8 <tcp_process+0x294>)
 801abb8:	f004 ffa8 	bl	801fb0c <iprintf>
      recv_flags |= TF_RESET;
 801abbc:	4b7f      	ldr	r3, [pc, #508]	; (801adbc <tcp_process+0x2a8>)
 801abbe:	781b      	ldrb	r3, [r3, #0]
 801abc0:	f043 0308 	orr.w	r3, r3, #8
 801abc4:	b2da      	uxtb	r2, r3
 801abc6:	4b7d      	ldr	r3, [pc, #500]	; (801adbc <tcp_process+0x2a8>)
 801abc8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	8b5b      	ldrh	r3, [r3, #26]
 801abce:	f023 0301 	bic.w	r3, r3, #1
 801abd2:	b29a      	uxth	r2, r3
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801abd8:	f06f 030d 	mvn.w	r3, #13
 801abdc:	e37a      	b.n	801b2d4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801abde:	2300      	movs	r3, #0
 801abe0:	e378      	b.n	801b2d4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801abe2:	4b72      	ldr	r3, [pc, #456]	; (801adac <tcp_process+0x298>)
 801abe4:	781b      	ldrb	r3, [r3, #0]
 801abe6:	f003 0302 	and.w	r3, r3, #2
 801abea:	2b00      	cmp	r3, #0
 801abec:	d010      	beq.n	801ac10 <tcp_process+0xfc>
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	7d1b      	ldrb	r3, [r3, #20]
 801abf2:	2b02      	cmp	r3, #2
 801abf4:	d00c      	beq.n	801ac10 <tcp_process+0xfc>
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	7d1b      	ldrb	r3, [r3, #20]
 801abfa:	2b03      	cmp	r3, #3
 801abfc:	d008      	beq.n	801ac10 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	8b5b      	ldrh	r3, [r3, #26]
 801ac02:	f043 0302 	orr.w	r3, r3, #2
 801ac06:	b29a      	uxth	r2, r3
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801ac0c:	2300      	movs	r3, #0
 801ac0e:	e361      	b.n	801b2d4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	8b5b      	ldrh	r3, [r3, #26]
 801ac14:	f003 0310 	and.w	r3, r3, #16
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d103      	bne.n	801ac24 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801ac1c:	4b68      	ldr	r3, [pc, #416]	; (801adc0 <tcp_process+0x2ac>)
 801ac1e:	681a      	ldr	r2, [r3, #0]
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	2200      	movs	r2, #0
 801ac28:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	2200      	movs	r2, #0
 801ac30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801ac34:	6878      	ldr	r0, [r7, #4]
 801ac36:	f001 fc2f 	bl	801c498 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	7d1b      	ldrb	r3, [r3, #20]
 801ac3e:	3b02      	subs	r3, #2
 801ac40:	2b07      	cmp	r3, #7
 801ac42:	f200 8337 	bhi.w	801b2b4 <tcp_process+0x7a0>
 801ac46:	a201      	add	r2, pc, #4	; (adr r2, 801ac4c <tcp_process+0x138>)
 801ac48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac4c:	0801ac6d 	.word	0x0801ac6d
 801ac50:	0801ae9d 	.word	0x0801ae9d
 801ac54:	0801b015 	.word	0x0801b015
 801ac58:	0801b03f 	.word	0x0801b03f
 801ac5c:	0801b163 	.word	0x0801b163
 801ac60:	0801b015 	.word	0x0801b015
 801ac64:	0801b1ef 	.word	0x0801b1ef
 801ac68:	0801b27f 	.word	0x0801b27f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801ac6c:	4b4f      	ldr	r3, [pc, #316]	; (801adac <tcp_process+0x298>)
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	f003 0310 	and.w	r3, r3, #16
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	f000 80e4 	beq.w	801ae42 <tcp_process+0x32e>
 801ac7a:	4b4c      	ldr	r3, [pc, #304]	; (801adac <tcp_process+0x298>)
 801ac7c:	781b      	ldrb	r3, [r3, #0]
 801ac7e:	f003 0302 	and.w	r3, r3, #2
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	f000 80dd 	beq.w	801ae42 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac8c:	1c5a      	adds	r2, r3, #1
 801ac8e:	4b48      	ldr	r3, [pc, #288]	; (801adb0 <tcp_process+0x29c>)
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	429a      	cmp	r2, r3
 801ac94:	f040 80d5 	bne.w	801ae42 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801ac98:	4b46      	ldr	r3, [pc, #280]	; (801adb4 <tcp_process+0x2a0>)
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	1c5a      	adds	r2, r3, #1
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801acaa:	4b41      	ldr	r3, [pc, #260]	; (801adb0 <tcp_process+0x29c>)
 801acac:	681a      	ldr	r2, [r3, #0]
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801acb2:	4b44      	ldr	r3, [pc, #272]	; (801adc4 <tcp_process+0x2b0>)
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	89db      	ldrh	r3, [r3, #14]
 801acb8:	b29a      	uxth	r2, r3
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801accc:	4b39      	ldr	r3, [pc, #228]	; (801adb4 <tcp_process+0x2a0>)
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	1e5a      	subs	r2, r3, #1
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	2204      	movs	r2, #4
 801acda:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	3304      	adds	r3, #4
 801ace4:	4618      	mov	r0, r3
 801ace6:	f7fa f969 	bl	8014fbc <ip4_route>
 801acea:	4601      	mov	r1, r0
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	3304      	adds	r3, #4
 801acf0:	461a      	mov	r2, r3
 801acf2:	4620      	mov	r0, r4
 801acf4:	f7ff f88c 	bl	8019e10 <tcp_eff_send_mss_netif>
 801acf8:	4603      	mov	r3, r0
 801acfa:	461a      	mov	r2, r3
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ad04:	009a      	lsls	r2, r3, #2
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ad0a:	005b      	lsls	r3, r3, #1
 801ad0c:	f241 111c 	movw	r1, #4380	; 0x111c
 801ad10:	428b      	cmp	r3, r1
 801ad12:	bf38      	it	cc
 801ad14:	460b      	movcc	r3, r1
 801ad16:	429a      	cmp	r2, r3
 801ad18:	d204      	bcs.n	801ad24 <tcp_process+0x210>
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ad1e:	009b      	lsls	r3, r3, #2
 801ad20:	b29b      	uxth	r3, r3
 801ad22:	e00d      	b.n	801ad40 <tcp_process+0x22c>
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ad28:	005b      	lsls	r3, r3, #1
 801ad2a:	f241 121c 	movw	r2, #4380	; 0x111c
 801ad2e:	4293      	cmp	r3, r2
 801ad30:	d904      	bls.n	801ad3c <tcp_process+0x228>
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ad36:	005b      	lsls	r3, r3, #1
 801ad38:	b29b      	uxth	r3, r3
 801ad3a:	e001      	b.n	801ad40 <tcp_process+0x22c>
 801ad3c:	f241 131c 	movw	r3, #4380	; 0x111c
 801ad40:	687a      	ldr	r2, [r7, #4]
 801ad42:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d106      	bne.n	801ad5e <tcp_process+0x24a>
 801ad50:	4b13      	ldr	r3, [pc, #76]	; (801ada0 <tcp_process+0x28c>)
 801ad52:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801ad56:	491c      	ldr	r1, [pc, #112]	; (801adc8 <tcp_process+0x2b4>)
 801ad58:	4813      	ldr	r0, [pc, #76]	; (801ada8 <tcp_process+0x294>)
 801ad5a:	f004 fed7 	bl	801fb0c <iprintf>
        --pcb->snd_queuelen;
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ad64:	3b01      	subs	r3, #1
 801ad66:	b29a      	uxth	r2, r3
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad72:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801ad74:	69fb      	ldr	r3, [r7, #28]
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d12a      	bne.n	801add0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ad7e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801ad80:	69fb      	ldr	r3, [r7, #28]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d106      	bne.n	801ad94 <tcp_process+0x280>
 801ad86:	4b06      	ldr	r3, [pc, #24]	; (801ada0 <tcp_process+0x28c>)
 801ad88:	f44f 725d 	mov.w	r2, #884	; 0x374
 801ad8c:	490f      	ldr	r1, [pc, #60]	; (801adcc <tcp_process+0x2b8>)
 801ad8e:	4806      	ldr	r0, [pc, #24]	; (801ada8 <tcp_process+0x294>)
 801ad90:	f004 febc 	bl	801fb0c <iprintf>
          pcb->unsent = rseg->next;
 801ad94:	69fb      	ldr	r3, [r7, #28]
 801ad96:	681a      	ldr	r2, [r3, #0]
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	66da      	str	r2, [r3, #108]	; 0x6c
 801ad9c:	e01c      	b.n	801add8 <tcp_process+0x2c4>
 801ad9e:	bf00      	nop
 801ada0:	08023098 	.word	0x08023098
 801ada4:	08023314 	.word	0x08023314
 801ada8:	08023128 	.word	0x08023128
 801adac:	2400f964 	.word	0x2400f964
 801adb0:	2400f95c 	.word	0x2400f95c
 801adb4:	2400f958 	.word	0x2400f958
 801adb8:	08023330 	.word	0x08023330
 801adbc:	2400f965 	.word	0x2400f965
 801adc0:	2400f920 	.word	0x2400f920
 801adc4:	2400f948 	.word	0x2400f948
 801adc8:	08023350 	.word	0x08023350
 801adcc:	08023368 	.word	0x08023368
        } else {
          pcb->unacked = rseg->next;
 801add0:	69fb      	ldr	r3, [r7, #28]
 801add2:	681a      	ldr	r2, [r3, #0]
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801add8:	69f8      	ldr	r0, [r7, #28]
 801adda:	f7fe fc54 	bl	8019686 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d104      	bne.n	801adf0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801adec:	861a      	strh	r2, [r3, #48]	; 0x30
 801adee:	e006      	b.n	801adfe <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	2200      	movs	r2, #0
 801adf4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	2200      	movs	r2, #0
 801adfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d00a      	beq.n	801ae1e <tcp_process+0x30a>
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ae0e:	687a      	ldr	r2, [r7, #4]
 801ae10:	6910      	ldr	r0, [r2, #16]
 801ae12:	2200      	movs	r2, #0
 801ae14:	6879      	ldr	r1, [r7, #4]
 801ae16:	4798      	blx	r3
 801ae18:	4603      	mov	r3, r0
 801ae1a:	76bb      	strb	r3, [r7, #26]
 801ae1c:	e001      	b.n	801ae22 <tcp_process+0x30e>
 801ae1e:	2300      	movs	r3, #0
 801ae20:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801ae22:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801ae26:	f113 0f0d 	cmn.w	r3, #13
 801ae2a:	d102      	bne.n	801ae32 <tcp_process+0x31e>
          return ERR_ABRT;
 801ae2c:	f06f 030c 	mvn.w	r3, #12
 801ae30:	e250      	b.n	801b2d4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	8b5b      	ldrh	r3, [r3, #26]
 801ae36:	f043 0302 	orr.w	r3, r3, #2
 801ae3a:	b29a      	uxth	r2, r3
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801ae40:	e23a      	b.n	801b2b8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801ae42:	4b98      	ldr	r3, [pc, #608]	; (801b0a4 <tcp_process+0x590>)
 801ae44:	781b      	ldrb	r3, [r3, #0]
 801ae46:	f003 0310 	and.w	r3, r3, #16
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	f000 8234 	beq.w	801b2b8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ae50:	4b95      	ldr	r3, [pc, #596]	; (801b0a8 <tcp_process+0x594>)
 801ae52:	6819      	ldr	r1, [r3, #0]
 801ae54:	4b95      	ldr	r3, [pc, #596]	; (801b0ac <tcp_process+0x598>)
 801ae56:	881b      	ldrh	r3, [r3, #0]
 801ae58:	461a      	mov	r2, r3
 801ae5a:	4b95      	ldr	r3, [pc, #596]	; (801b0b0 <tcp_process+0x59c>)
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ae60:	4b94      	ldr	r3, [pc, #592]	; (801b0b4 <tcp_process+0x5a0>)
 801ae62:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ae64:	885b      	ldrh	r3, [r3, #2]
 801ae66:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ae68:	4a92      	ldr	r2, [pc, #584]	; (801b0b4 <tcp_process+0x5a0>)
 801ae6a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ae6c:	8812      	ldrh	r2, [r2, #0]
 801ae6e:	b292      	uxth	r2, r2
 801ae70:	9202      	str	r2, [sp, #8]
 801ae72:	9301      	str	r3, [sp, #4]
 801ae74:	4b90      	ldr	r3, [pc, #576]	; (801b0b8 <tcp_process+0x5a4>)
 801ae76:	9300      	str	r3, [sp, #0]
 801ae78:	4b90      	ldr	r3, [pc, #576]	; (801b0bc <tcp_process+0x5a8>)
 801ae7a:	4602      	mov	r2, r0
 801ae7c:	6878      	ldr	r0, [r7, #4]
 801ae7e:	f003 f8dd 	bl	801e03c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ae88:	2b05      	cmp	r3, #5
 801ae8a:	f200 8215 	bhi.w	801b2b8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	2200      	movs	r2, #0
 801ae92:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f002 fea7 	bl	801dbe8 <tcp_rexmit_rto>
      break;
 801ae9a:	e20d      	b.n	801b2b8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801ae9c:	4b81      	ldr	r3, [pc, #516]	; (801b0a4 <tcp_process+0x590>)
 801ae9e:	781b      	ldrb	r3, [r3, #0]
 801aea0:	f003 0310 	and.w	r3, r3, #16
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	f000 80a1 	beq.w	801afec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801aeaa:	4b7f      	ldr	r3, [pc, #508]	; (801b0a8 <tcp_process+0x594>)
 801aeac:	681a      	ldr	r2, [r3, #0]
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aeb2:	1ad3      	subs	r3, r2, r3
 801aeb4:	3b01      	subs	r3, #1
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	db7e      	blt.n	801afb8 <tcp_process+0x4a4>
 801aeba:	4b7b      	ldr	r3, [pc, #492]	; (801b0a8 <tcp_process+0x594>)
 801aebc:	681a      	ldr	r2, [r3, #0]
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aec2:	1ad3      	subs	r3, r2, r3
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	dc77      	bgt.n	801afb8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	2204      	movs	r2, #4
 801aecc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d102      	bne.n	801aedc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801aed6:	23fa      	movs	r3, #250	; 0xfa
 801aed8:	76bb      	strb	r3, [r7, #26]
 801aeda:	e01d      	b.n	801af18 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801aee0:	699b      	ldr	r3, [r3, #24]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d106      	bne.n	801aef4 <tcp_process+0x3e0>
 801aee6:	4b76      	ldr	r3, [pc, #472]	; (801b0c0 <tcp_process+0x5ac>)
 801aee8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801aeec:	4975      	ldr	r1, [pc, #468]	; (801b0c4 <tcp_process+0x5b0>)
 801aeee:	4876      	ldr	r0, [pc, #472]	; (801b0c8 <tcp_process+0x5b4>)
 801aef0:	f004 fe0c 	bl	801fb0c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801aef8:	699b      	ldr	r3, [r3, #24]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d00a      	beq.n	801af14 <tcp_process+0x400>
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801af02:	699b      	ldr	r3, [r3, #24]
 801af04:	687a      	ldr	r2, [r7, #4]
 801af06:	6910      	ldr	r0, [r2, #16]
 801af08:	2200      	movs	r2, #0
 801af0a:	6879      	ldr	r1, [r7, #4]
 801af0c:	4798      	blx	r3
 801af0e:	4603      	mov	r3, r0
 801af10:	76bb      	strb	r3, [r7, #26]
 801af12:	e001      	b.n	801af18 <tcp_process+0x404>
 801af14:	23f0      	movs	r3, #240	; 0xf0
 801af16:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801af18:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d00a      	beq.n	801af36 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801af20:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801af24:	f113 0f0d 	cmn.w	r3, #13
 801af28:	d002      	beq.n	801af30 <tcp_process+0x41c>
              tcp_abort(pcb);
 801af2a:	6878      	ldr	r0, [r7, #4]
 801af2c:	f7fd fd14 	bl	8018958 <tcp_abort>
            }
            return ERR_ABRT;
 801af30:	f06f 030c 	mvn.w	r3, #12
 801af34:	e1ce      	b.n	801b2d4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801af36:	6878      	ldr	r0, [r7, #4]
 801af38:	f000 fae0 	bl	801b4fc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801af3c:	4b63      	ldr	r3, [pc, #396]	; (801b0cc <tcp_process+0x5b8>)
 801af3e:	881b      	ldrh	r3, [r3, #0]
 801af40:	2b00      	cmp	r3, #0
 801af42:	d005      	beq.n	801af50 <tcp_process+0x43c>
            recv_acked--;
 801af44:	4b61      	ldr	r3, [pc, #388]	; (801b0cc <tcp_process+0x5b8>)
 801af46:	881b      	ldrh	r3, [r3, #0]
 801af48:	3b01      	subs	r3, #1
 801af4a:	b29a      	uxth	r2, r3
 801af4c:	4b5f      	ldr	r3, [pc, #380]	; (801b0cc <tcp_process+0x5b8>)
 801af4e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801af54:	009a      	lsls	r2, r3, #2
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801af5a:	005b      	lsls	r3, r3, #1
 801af5c:	f241 111c 	movw	r1, #4380	; 0x111c
 801af60:	428b      	cmp	r3, r1
 801af62:	bf38      	it	cc
 801af64:	460b      	movcc	r3, r1
 801af66:	429a      	cmp	r2, r3
 801af68:	d204      	bcs.n	801af74 <tcp_process+0x460>
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801af6e:	009b      	lsls	r3, r3, #2
 801af70:	b29b      	uxth	r3, r3
 801af72:	e00d      	b.n	801af90 <tcp_process+0x47c>
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801af78:	005b      	lsls	r3, r3, #1
 801af7a:	f241 121c 	movw	r2, #4380	; 0x111c
 801af7e:	4293      	cmp	r3, r2
 801af80:	d904      	bls.n	801af8c <tcp_process+0x478>
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801af86:	005b      	lsls	r3, r3, #1
 801af88:	b29b      	uxth	r3, r3
 801af8a:	e001      	b.n	801af90 <tcp_process+0x47c>
 801af8c:	f241 131c 	movw	r3, #4380	; 0x111c
 801af90:	687a      	ldr	r2, [r7, #4]
 801af92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801af96:	4b4e      	ldr	r3, [pc, #312]	; (801b0d0 <tcp_process+0x5bc>)
 801af98:	781b      	ldrb	r3, [r3, #0]
 801af9a:	f003 0320 	and.w	r3, r3, #32
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d037      	beq.n	801b012 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	8b5b      	ldrh	r3, [r3, #26]
 801afa6:	f043 0302 	orr.w	r3, r3, #2
 801afaa:	b29a      	uxth	r2, r3
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	2207      	movs	r2, #7
 801afb4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801afb6:	e02c      	b.n	801b012 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801afb8:	4b3b      	ldr	r3, [pc, #236]	; (801b0a8 <tcp_process+0x594>)
 801afba:	6819      	ldr	r1, [r3, #0]
 801afbc:	4b3b      	ldr	r3, [pc, #236]	; (801b0ac <tcp_process+0x598>)
 801afbe:	881b      	ldrh	r3, [r3, #0]
 801afc0:	461a      	mov	r2, r3
 801afc2:	4b3b      	ldr	r3, [pc, #236]	; (801b0b0 <tcp_process+0x59c>)
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801afc8:	4b3a      	ldr	r3, [pc, #232]	; (801b0b4 <tcp_process+0x5a0>)
 801afca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801afcc:	885b      	ldrh	r3, [r3, #2]
 801afce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801afd0:	4a38      	ldr	r2, [pc, #224]	; (801b0b4 <tcp_process+0x5a0>)
 801afd2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801afd4:	8812      	ldrh	r2, [r2, #0]
 801afd6:	b292      	uxth	r2, r2
 801afd8:	9202      	str	r2, [sp, #8]
 801afda:	9301      	str	r3, [sp, #4]
 801afdc:	4b36      	ldr	r3, [pc, #216]	; (801b0b8 <tcp_process+0x5a4>)
 801afde:	9300      	str	r3, [sp, #0]
 801afe0:	4b36      	ldr	r3, [pc, #216]	; (801b0bc <tcp_process+0x5a8>)
 801afe2:	4602      	mov	r2, r0
 801afe4:	6878      	ldr	r0, [r7, #4]
 801afe6:	f003 f829 	bl	801e03c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801afea:	e167      	b.n	801b2bc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801afec:	4b2d      	ldr	r3, [pc, #180]	; (801b0a4 <tcp_process+0x590>)
 801afee:	781b      	ldrb	r3, [r3, #0]
 801aff0:	f003 0302 	and.w	r3, r3, #2
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	f000 8161 	beq.w	801b2bc <tcp_process+0x7a8>
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801affe:	1e5a      	subs	r2, r3, #1
 801b000:	4b2b      	ldr	r3, [pc, #172]	; (801b0b0 <tcp_process+0x59c>)
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	429a      	cmp	r2, r3
 801b006:	f040 8159 	bne.w	801b2bc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801b00a:	6878      	ldr	r0, [r7, #4]
 801b00c:	f002 fe0e 	bl	801dc2c <tcp_rexmit>
      break;
 801b010:	e154      	b.n	801b2bc <tcp_process+0x7a8>
 801b012:	e153      	b.n	801b2bc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801b014:	6878      	ldr	r0, [r7, #4]
 801b016:	f000 fa71 	bl	801b4fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801b01a:	4b2d      	ldr	r3, [pc, #180]	; (801b0d0 <tcp_process+0x5bc>)
 801b01c:	781b      	ldrb	r3, [r3, #0]
 801b01e:	f003 0320 	and.w	r3, r3, #32
 801b022:	2b00      	cmp	r3, #0
 801b024:	f000 814c 	beq.w	801b2c0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	8b5b      	ldrh	r3, [r3, #26]
 801b02c:	f043 0302 	orr.w	r3, r3, #2
 801b030:	b29a      	uxth	r2, r3
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	2207      	movs	r2, #7
 801b03a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801b03c:	e140      	b.n	801b2c0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801b03e:	6878      	ldr	r0, [r7, #4]
 801b040:	f000 fa5c 	bl	801b4fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801b044:	4b22      	ldr	r3, [pc, #136]	; (801b0d0 <tcp_process+0x5bc>)
 801b046:	781b      	ldrb	r3, [r3, #0]
 801b048:	f003 0320 	and.w	r3, r3, #32
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d071      	beq.n	801b134 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b050:	4b14      	ldr	r3, [pc, #80]	; (801b0a4 <tcp_process+0x590>)
 801b052:	781b      	ldrb	r3, [r3, #0]
 801b054:	f003 0310 	and.w	r3, r3, #16
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d060      	beq.n	801b11e <tcp_process+0x60a>
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b060:	4b11      	ldr	r3, [pc, #68]	; (801b0a8 <tcp_process+0x594>)
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	429a      	cmp	r2, r3
 801b066:	d15a      	bne.n	801b11e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d156      	bne.n	801b11e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	8b5b      	ldrh	r3, [r3, #26]
 801b074:	f043 0302 	orr.w	r3, r3, #2
 801b078:	b29a      	uxth	r2, r3
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801b07e:	6878      	ldr	r0, [r7, #4]
 801b080:	f7fe fdbc 	bl	8019bfc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801b084:	4b13      	ldr	r3, [pc, #76]	; (801b0d4 <tcp_process+0x5c0>)
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	687a      	ldr	r2, [r7, #4]
 801b08a:	429a      	cmp	r2, r3
 801b08c:	d105      	bne.n	801b09a <tcp_process+0x586>
 801b08e:	4b11      	ldr	r3, [pc, #68]	; (801b0d4 <tcp_process+0x5c0>)
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	68db      	ldr	r3, [r3, #12]
 801b094:	4a0f      	ldr	r2, [pc, #60]	; (801b0d4 <tcp_process+0x5c0>)
 801b096:	6013      	str	r3, [r2, #0]
 801b098:	e02e      	b.n	801b0f8 <tcp_process+0x5e4>
 801b09a:	4b0e      	ldr	r3, [pc, #56]	; (801b0d4 <tcp_process+0x5c0>)
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	617b      	str	r3, [r7, #20]
 801b0a0:	e027      	b.n	801b0f2 <tcp_process+0x5de>
 801b0a2:	bf00      	nop
 801b0a4:	2400f964 	.word	0x2400f964
 801b0a8:	2400f95c 	.word	0x2400f95c
 801b0ac:	2400f962 	.word	0x2400f962
 801b0b0:	2400f958 	.word	0x2400f958
 801b0b4:	2400f948 	.word	0x2400f948
 801b0b8:	24008e60 	.word	0x24008e60
 801b0bc:	24008e64 	.word	0x24008e64
 801b0c0:	08023098 	.word	0x08023098
 801b0c4:	0802337c 	.word	0x0802337c
 801b0c8:	08023128 	.word	0x08023128
 801b0cc:	2400f960 	.word	0x2400f960
 801b0d0:	2400f965 	.word	0x2400f965
 801b0d4:	2400f92c 	.word	0x2400f92c
 801b0d8:	697b      	ldr	r3, [r7, #20]
 801b0da:	68db      	ldr	r3, [r3, #12]
 801b0dc:	687a      	ldr	r2, [r7, #4]
 801b0de:	429a      	cmp	r2, r3
 801b0e0:	d104      	bne.n	801b0ec <tcp_process+0x5d8>
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	68da      	ldr	r2, [r3, #12]
 801b0e6:	697b      	ldr	r3, [r7, #20]
 801b0e8:	60da      	str	r2, [r3, #12]
 801b0ea:	e005      	b.n	801b0f8 <tcp_process+0x5e4>
 801b0ec:	697b      	ldr	r3, [r7, #20]
 801b0ee:	68db      	ldr	r3, [r3, #12]
 801b0f0:	617b      	str	r3, [r7, #20]
 801b0f2:	697b      	ldr	r3, [r7, #20]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d1ef      	bne.n	801b0d8 <tcp_process+0x5c4>
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	2200      	movs	r2, #0
 801b0fc:	60da      	str	r2, [r3, #12]
 801b0fe:	4b77      	ldr	r3, [pc, #476]	; (801b2dc <tcp_process+0x7c8>)
 801b100:	2201      	movs	r2, #1
 801b102:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	220a      	movs	r2, #10
 801b108:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801b10a:	4b75      	ldr	r3, [pc, #468]	; (801b2e0 <tcp_process+0x7cc>)
 801b10c:	681a      	ldr	r2, [r3, #0]
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	60da      	str	r2, [r3, #12]
 801b112:	4a73      	ldr	r2, [pc, #460]	; (801b2e0 <tcp_process+0x7cc>)
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	6013      	str	r3, [r2, #0]
 801b118:	f003 fb0a 	bl	801e730 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801b11c:	e0d2      	b.n	801b2c4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	8b5b      	ldrh	r3, [r3, #26]
 801b122:	f043 0302 	orr.w	r3, r3, #2
 801b126:	b29a      	uxth	r2, r3
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	2208      	movs	r2, #8
 801b130:	751a      	strb	r2, [r3, #20]
      break;
 801b132:	e0c7      	b.n	801b2c4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b134:	4b6b      	ldr	r3, [pc, #428]	; (801b2e4 <tcp_process+0x7d0>)
 801b136:	781b      	ldrb	r3, [r3, #0]
 801b138:	f003 0310 	and.w	r3, r3, #16
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	f000 80c1 	beq.w	801b2c4 <tcp_process+0x7b0>
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b146:	4b68      	ldr	r3, [pc, #416]	; (801b2e8 <tcp_process+0x7d4>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	429a      	cmp	r2, r3
 801b14c:	f040 80ba 	bne.w	801b2c4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b154:	2b00      	cmp	r3, #0
 801b156:	f040 80b5 	bne.w	801b2c4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	2206      	movs	r2, #6
 801b15e:	751a      	strb	r2, [r3, #20]
      break;
 801b160:	e0b0      	b.n	801b2c4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801b162:	6878      	ldr	r0, [r7, #4]
 801b164:	f000 f9ca 	bl	801b4fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801b168:	4b60      	ldr	r3, [pc, #384]	; (801b2ec <tcp_process+0x7d8>)
 801b16a:	781b      	ldrb	r3, [r3, #0]
 801b16c:	f003 0320 	and.w	r3, r3, #32
 801b170:	2b00      	cmp	r3, #0
 801b172:	f000 80a9 	beq.w	801b2c8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	8b5b      	ldrh	r3, [r3, #26]
 801b17a:	f043 0302 	orr.w	r3, r3, #2
 801b17e:	b29a      	uxth	r2, r3
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801b184:	6878      	ldr	r0, [r7, #4]
 801b186:	f7fe fd39 	bl	8019bfc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b18a:	4b59      	ldr	r3, [pc, #356]	; (801b2f0 <tcp_process+0x7dc>)
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	687a      	ldr	r2, [r7, #4]
 801b190:	429a      	cmp	r2, r3
 801b192:	d105      	bne.n	801b1a0 <tcp_process+0x68c>
 801b194:	4b56      	ldr	r3, [pc, #344]	; (801b2f0 <tcp_process+0x7dc>)
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	68db      	ldr	r3, [r3, #12]
 801b19a:	4a55      	ldr	r2, [pc, #340]	; (801b2f0 <tcp_process+0x7dc>)
 801b19c:	6013      	str	r3, [r2, #0]
 801b19e:	e013      	b.n	801b1c8 <tcp_process+0x6b4>
 801b1a0:	4b53      	ldr	r3, [pc, #332]	; (801b2f0 <tcp_process+0x7dc>)
 801b1a2:	681b      	ldr	r3, [r3, #0]
 801b1a4:	613b      	str	r3, [r7, #16]
 801b1a6:	e00c      	b.n	801b1c2 <tcp_process+0x6ae>
 801b1a8:	693b      	ldr	r3, [r7, #16]
 801b1aa:	68db      	ldr	r3, [r3, #12]
 801b1ac:	687a      	ldr	r2, [r7, #4]
 801b1ae:	429a      	cmp	r2, r3
 801b1b0:	d104      	bne.n	801b1bc <tcp_process+0x6a8>
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	68da      	ldr	r2, [r3, #12]
 801b1b6:	693b      	ldr	r3, [r7, #16]
 801b1b8:	60da      	str	r2, [r3, #12]
 801b1ba:	e005      	b.n	801b1c8 <tcp_process+0x6b4>
 801b1bc:	693b      	ldr	r3, [r7, #16]
 801b1be:	68db      	ldr	r3, [r3, #12]
 801b1c0:	613b      	str	r3, [r7, #16]
 801b1c2:	693b      	ldr	r3, [r7, #16]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d1ef      	bne.n	801b1a8 <tcp_process+0x694>
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	60da      	str	r2, [r3, #12]
 801b1ce:	4b43      	ldr	r3, [pc, #268]	; (801b2dc <tcp_process+0x7c8>)
 801b1d0:	2201      	movs	r2, #1
 801b1d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	220a      	movs	r2, #10
 801b1d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b1da:	4b41      	ldr	r3, [pc, #260]	; (801b2e0 <tcp_process+0x7cc>)
 801b1dc:	681a      	ldr	r2, [r3, #0]
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	60da      	str	r2, [r3, #12]
 801b1e2:	4a3f      	ldr	r2, [pc, #252]	; (801b2e0 <tcp_process+0x7cc>)
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	6013      	str	r3, [r2, #0]
 801b1e8:	f003 faa2 	bl	801e730 <tcp_timer_needed>
      }
      break;
 801b1ec:	e06c      	b.n	801b2c8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801b1ee:	6878      	ldr	r0, [r7, #4]
 801b1f0:	f000 f984 	bl	801b4fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b1f4:	4b3b      	ldr	r3, [pc, #236]	; (801b2e4 <tcp_process+0x7d0>)
 801b1f6:	781b      	ldrb	r3, [r3, #0]
 801b1f8:	f003 0310 	and.w	r3, r3, #16
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d065      	beq.n	801b2cc <tcp_process+0x7b8>
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b204:	4b38      	ldr	r3, [pc, #224]	; (801b2e8 <tcp_process+0x7d4>)
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	429a      	cmp	r2, r3
 801b20a:	d15f      	bne.n	801b2cc <tcp_process+0x7b8>
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b210:	2b00      	cmp	r3, #0
 801b212:	d15b      	bne.n	801b2cc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	f7fe fcf1 	bl	8019bfc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b21a:	4b35      	ldr	r3, [pc, #212]	; (801b2f0 <tcp_process+0x7dc>)
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	687a      	ldr	r2, [r7, #4]
 801b220:	429a      	cmp	r2, r3
 801b222:	d105      	bne.n	801b230 <tcp_process+0x71c>
 801b224:	4b32      	ldr	r3, [pc, #200]	; (801b2f0 <tcp_process+0x7dc>)
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	68db      	ldr	r3, [r3, #12]
 801b22a:	4a31      	ldr	r2, [pc, #196]	; (801b2f0 <tcp_process+0x7dc>)
 801b22c:	6013      	str	r3, [r2, #0]
 801b22e:	e013      	b.n	801b258 <tcp_process+0x744>
 801b230:	4b2f      	ldr	r3, [pc, #188]	; (801b2f0 <tcp_process+0x7dc>)
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	60fb      	str	r3, [r7, #12]
 801b236:	e00c      	b.n	801b252 <tcp_process+0x73e>
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	68db      	ldr	r3, [r3, #12]
 801b23c:	687a      	ldr	r2, [r7, #4]
 801b23e:	429a      	cmp	r2, r3
 801b240:	d104      	bne.n	801b24c <tcp_process+0x738>
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	68da      	ldr	r2, [r3, #12]
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	60da      	str	r2, [r3, #12]
 801b24a:	e005      	b.n	801b258 <tcp_process+0x744>
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	68db      	ldr	r3, [r3, #12]
 801b250:	60fb      	str	r3, [r7, #12]
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	2b00      	cmp	r3, #0
 801b256:	d1ef      	bne.n	801b238 <tcp_process+0x724>
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	2200      	movs	r2, #0
 801b25c:	60da      	str	r2, [r3, #12]
 801b25e:	4b1f      	ldr	r3, [pc, #124]	; (801b2dc <tcp_process+0x7c8>)
 801b260:	2201      	movs	r2, #1
 801b262:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	220a      	movs	r2, #10
 801b268:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b26a:	4b1d      	ldr	r3, [pc, #116]	; (801b2e0 <tcp_process+0x7cc>)
 801b26c:	681a      	ldr	r2, [r3, #0]
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	60da      	str	r2, [r3, #12]
 801b272:	4a1b      	ldr	r2, [pc, #108]	; (801b2e0 <tcp_process+0x7cc>)
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	6013      	str	r3, [r2, #0]
 801b278:	f003 fa5a 	bl	801e730 <tcp_timer_needed>
      }
      break;
 801b27c:	e026      	b.n	801b2cc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801b27e:	6878      	ldr	r0, [r7, #4]
 801b280:	f000 f93c 	bl	801b4fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b284:	4b17      	ldr	r3, [pc, #92]	; (801b2e4 <tcp_process+0x7d0>)
 801b286:	781b      	ldrb	r3, [r3, #0]
 801b288:	f003 0310 	and.w	r3, r3, #16
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d01f      	beq.n	801b2d0 <tcp_process+0x7bc>
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b294:	4b14      	ldr	r3, [pc, #80]	; (801b2e8 <tcp_process+0x7d4>)
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	429a      	cmp	r2, r3
 801b29a:	d119      	bne.n	801b2d0 <tcp_process+0x7bc>
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d115      	bne.n	801b2d0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801b2a4:	4b11      	ldr	r3, [pc, #68]	; (801b2ec <tcp_process+0x7d8>)
 801b2a6:	781b      	ldrb	r3, [r3, #0]
 801b2a8:	f043 0310 	orr.w	r3, r3, #16
 801b2ac:	b2da      	uxtb	r2, r3
 801b2ae:	4b0f      	ldr	r3, [pc, #60]	; (801b2ec <tcp_process+0x7d8>)
 801b2b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 801b2b2:	e00d      	b.n	801b2d0 <tcp_process+0x7bc>
    default:
      break;
 801b2b4:	bf00      	nop
 801b2b6:	e00c      	b.n	801b2d2 <tcp_process+0x7be>
      break;
 801b2b8:	bf00      	nop
 801b2ba:	e00a      	b.n	801b2d2 <tcp_process+0x7be>
      break;
 801b2bc:	bf00      	nop
 801b2be:	e008      	b.n	801b2d2 <tcp_process+0x7be>
      break;
 801b2c0:	bf00      	nop
 801b2c2:	e006      	b.n	801b2d2 <tcp_process+0x7be>
      break;
 801b2c4:	bf00      	nop
 801b2c6:	e004      	b.n	801b2d2 <tcp_process+0x7be>
      break;
 801b2c8:	bf00      	nop
 801b2ca:	e002      	b.n	801b2d2 <tcp_process+0x7be>
      break;
 801b2cc:	bf00      	nop
 801b2ce:	e000      	b.n	801b2d2 <tcp_process+0x7be>
      break;
 801b2d0:	bf00      	nop
  }
  return ERR_OK;
 801b2d2:	2300      	movs	r3, #0
}
 801b2d4:	4618      	mov	r0, r3
 801b2d6:	3724      	adds	r7, #36	; 0x24
 801b2d8:	46bd      	mov	sp, r7
 801b2da:	bd90      	pop	{r4, r7, pc}
 801b2dc:	2400f934 	.word	0x2400f934
 801b2e0:	2400f930 	.word	0x2400f930
 801b2e4:	2400f964 	.word	0x2400f964
 801b2e8:	2400f95c 	.word	0x2400f95c
 801b2ec:	2400f965 	.word	0x2400f965
 801b2f0:	2400f92c 	.word	0x2400f92c

0801b2f4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801b2f4:	b590      	push	{r4, r7, lr}
 801b2f6:	b085      	sub	sp, #20
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
 801b2fc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	2b00      	cmp	r3, #0
 801b302:	d106      	bne.n	801b312 <tcp_oos_insert_segment+0x1e>
 801b304:	4b3b      	ldr	r3, [pc, #236]	; (801b3f4 <tcp_oos_insert_segment+0x100>)
 801b306:	f240 421f 	movw	r2, #1055	; 0x41f
 801b30a:	493b      	ldr	r1, [pc, #236]	; (801b3f8 <tcp_oos_insert_segment+0x104>)
 801b30c:	483b      	ldr	r0, [pc, #236]	; (801b3fc <tcp_oos_insert_segment+0x108>)
 801b30e:	f004 fbfd 	bl	801fb0c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	68db      	ldr	r3, [r3, #12]
 801b316:	899b      	ldrh	r3, [r3, #12]
 801b318:	b29b      	uxth	r3, r3
 801b31a:	4618      	mov	r0, r3
 801b31c:	f7f8 fb76 	bl	8013a0c <lwip_htons>
 801b320:	4603      	mov	r3, r0
 801b322:	b2db      	uxtb	r3, r3
 801b324:	f003 0301 	and.w	r3, r3, #1
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d028      	beq.n	801b37e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801b32c:	6838      	ldr	r0, [r7, #0]
 801b32e:	f7fe f995 	bl	801965c <tcp_segs_free>
    next = NULL;
 801b332:	2300      	movs	r3, #0
 801b334:	603b      	str	r3, [r7, #0]
 801b336:	e056      	b.n	801b3e6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801b338:	683b      	ldr	r3, [r7, #0]
 801b33a:	68db      	ldr	r3, [r3, #12]
 801b33c:	899b      	ldrh	r3, [r3, #12]
 801b33e:	b29b      	uxth	r3, r3
 801b340:	4618      	mov	r0, r3
 801b342:	f7f8 fb63 	bl	8013a0c <lwip_htons>
 801b346:	4603      	mov	r3, r0
 801b348:	b2db      	uxtb	r3, r3
 801b34a:	f003 0301 	and.w	r3, r3, #1
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d00d      	beq.n	801b36e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	68db      	ldr	r3, [r3, #12]
 801b356:	899b      	ldrh	r3, [r3, #12]
 801b358:	b29c      	uxth	r4, r3
 801b35a:	2001      	movs	r0, #1
 801b35c:	f7f8 fb56 	bl	8013a0c <lwip_htons>
 801b360:	4603      	mov	r3, r0
 801b362:	461a      	mov	r2, r3
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	68db      	ldr	r3, [r3, #12]
 801b368:	4322      	orrs	r2, r4
 801b36a:	b292      	uxth	r2, r2
 801b36c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801b36e:	683b      	ldr	r3, [r7, #0]
 801b370:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801b372:	683b      	ldr	r3, [r7, #0]
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801b378:	68f8      	ldr	r0, [r7, #12]
 801b37a:	f7fe f984 	bl	8019686 <tcp_seg_free>
    while (next &&
 801b37e:	683b      	ldr	r3, [r7, #0]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d00e      	beq.n	801b3a2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	891b      	ldrh	r3, [r3, #8]
 801b388:	461a      	mov	r2, r3
 801b38a:	4b1d      	ldr	r3, [pc, #116]	; (801b400 <tcp_oos_insert_segment+0x10c>)
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	441a      	add	r2, r3
 801b390:	683b      	ldr	r3, [r7, #0]
 801b392:	68db      	ldr	r3, [r3, #12]
 801b394:	685b      	ldr	r3, [r3, #4]
 801b396:	6839      	ldr	r1, [r7, #0]
 801b398:	8909      	ldrh	r1, [r1, #8]
 801b39a:	440b      	add	r3, r1
 801b39c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	daca      	bge.n	801b338 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801b3a2:	683b      	ldr	r3, [r7, #0]
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d01e      	beq.n	801b3e6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	891b      	ldrh	r3, [r3, #8]
 801b3ac:	461a      	mov	r2, r3
 801b3ae:	4b14      	ldr	r3, [pc, #80]	; (801b400 <tcp_oos_insert_segment+0x10c>)
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	441a      	add	r2, r3
 801b3b4:	683b      	ldr	r3, [r7, #0]
 801b3b6:	68db      	ldr	r3, [r3, #12]
 801b3b8:	685b      	ldr	r3, [r3, #4]
 801b3ba:	1ad3      	subs	r3, r2, r3
    if (next &&
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	dd12      	ble.n	801b3e6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801b3c0:	683b      	ldr	r3, [r7, #0]
 801b3c2:	68db      	ldr	r3, [r3, #12]
 801b3c4:	685b      	ldr	r3, [r3, #4]
 801b3c6:	b29a      	uxth	r2, r3
 801b3c8:	4b0d      	ldr	r3, [pc, #52]	; (801b400 <tcp_oos_insert_segment+0x10c>)
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	b29b      	uxth	r3, r3
 801b3ce:	1ad3      	subs	r3, r2, r3
 801b3d0:	b29a      	uxth	r2, r3
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	685a      	ldr	r2, [r3, #4]
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	891b      	ldrh	r3, [r3, #8]
 801b3de:	4619      	mov	r1, r3
 801b3e0:	4610      	mov	r0, r2
 801b3e2:	f7fc f963 	bl	80176ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	683a      	ldr	r2, [r7, #0]
 801b3ea:	601a      	str	r2, [r3, #0]
}
 801b3ec:	bf00      	nop
 801b3ee:	3714      	adds	r7, #20
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bd90      	pop	{r4, r7, pc}
 801b3f4:	08023098 	.word	0x08023098
 801b3f8:	0802339c 	.word	0x0802339c
 801b3fc:	08023128 	.word	0x08023128
 801b400:	2400f958 	.word	0x2400f958

0801b404 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801b404:	b5b0      	push	{r4, r5, r7, lr}
 801b406:	b086      	sub	sp, #24
 801b408:	af00      	add	r7, sp, #0
 801b40a:	60f8      	str	r0, [r7, #12]
 801b40c:	60b9      	str	r1, [r7, #8]
 801b40e:	607a      	str	r2, [r7, #4]
 801b410:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801b412:	e03e      	b.n	801b492 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801b414:	68bb      	ldr	r3, [r7, #8]
 801b416:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801b418:	68bb      	ldr	r3, [r7, #8]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801b41e:	697b      	ldr	r3, [r7, #20]
 801b420:	685b      	ldr	r3, [r3, #4]
 801b422:	4618      	mov	r0, r3
 801b424:	f7fc fb54 	bl	8017ad0 <pbuf_clen>
 801b428:	4603      	mov	r3, r0
 801b42a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b432:	8a7a      	ldrh	r2, [r7, #18]
 801b434:	429a      	cmp	r2, r3
 801b436:	d906      	bls.n	801b446 <tcp_free_acked_segments+0x42>
 801b438:	4b2a      	ldr	r3, [pc, #168]	; (801b4e4 <tcp_free_acked_segments+0xe0>)
 801b43a:	f240 4257 	movw	r2, #1111	; 0x457
 801b43e:	492a      	ldr	r1, [pc, #168]	; (801b4e8 <tcp_free_acked_segments+0xe4>)
 801b440:	482a      	ldr	r0, [pc, #168]	; (801b4ec <tcp_free_acked_segments+0xe8>)
 801b442:	f004 fb63 	bl	801fb0c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801b44c:	8a7b      	ldrh	r3, [r7, #18]
 801b44e:	1ad3      	subs	r3, r2, r3
 801b450:	b29a      	uxth	r2, r3
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801b458:	697b      	ldr	r3, [r7, #20]
 801b45a:	891a      	ldrh	r2, [r3, #8]
 801b45c:	4b24      	ldr	r3, [pc, #144]	; (801b4f0 <tcp_free_acked_segments+0xec>)
 801b45e:	881b      	ldrh	r3, [r3, #0]
 801b460:	4413      	add	r3, r2
 801b462:	b29a      	uxth	r2, r3
 801b464:	4b22      	ldr	r3, [pc, #136]	; (801b4f0 <tcp_free_acked_segments+0xec>)
 801b466:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801b468:	6978      	ldr	r0, [r7, #20]
 801b46a:	f7fe f90c 	bl	8019686 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b474:	2b00      	cmp	r3, #0
 801b476:	d00c      	beq.n	801b492 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801b478:	68bb      	ldr	r3, [r7, #8]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d109      	bne.n	801b492 <tcp_free_acked_segments+0x8e>
 801b47e:	683b      	ldr	r3, [r7, #0]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d106      	bne.n	801b492 <tcp_free_acked_segments+0x8e>
 801b484:	4b17      	ldr	r3, [pc, #92]	; (801b4e4 <tcp_free_acked_segments+0xe0>)
 801b486:	f240 4261 	movw	r2, #1121	; 0x461
 801b48a:	491a      	ldr	r1, [pc, #104]	; (801b4f4 <tcp_free_acked_segments+0xf0>)
 801b48c:	4817      	ldr	r0, [pc, #92]	; (801b4ec <tcp_free_acked_segments+0xe8>)
 801b48e:	f004 fb3d 	bl	801fb0c <iprintf>
  while (seg_list != NULL &&
 801b492:	68bb      	ldr	r3, [r7, #8]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d020      	beq.n	801b4da <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801b498:	68bb      	ldr	r3, [r7, #8]
 801b49a:	68db      	ldr	r3, [r3, #12]
 801b49c:	685b      	ldr	r3, [r3, #4]
 801b49e:	4618      	mov	r0, r3
 801b4a0:	f7f8 fac9 	bl	8013a36 <lwip_htonl>
 801b4a4:	4604      	mov	r4, r0
 801b4a6:	68bb      	ldr	r3, [r7, #8]
 801b4a8:	891b      	ldrh	r3, [r3, #8]
 801b4aa:	461d      	mov	r5, r3
 801b4ac:	68bb      	ldr	r3, [r7, #8]
 801b4ae:	68db      	ldr	r3, [r3, #12]
 801b4b0:	899b      	ldrh	r3, [r3, #12]
 801b4b2:	b29b      	uxth	r3, r3
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	f7f8 faa9 	bl	8013a0c <lwip_htons>
 801b4ba:	4603      	mov	r3, r0
 801b4bc:	b2db      	uxtb	r3, r3
 801b4be:	f003 0303 	and.w	r3, r3, #3
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d001      	beq.n	801b4ca <tcp_free_acked_segments+0xc6>
 801b4c6:	2301      	movs	r3, #1
 801b4c8:	e000      	b.n	801b4cc <tcp_free_acked_segments+0xc8>
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	442b      	add	r3, r5
 801b4ce:	18e2      	adds	r2, r4, r3
 801b4d0:	4b09      	ldr	r3, [pc, #36]	; (801b4f8 <tcp_free_acked_segments+0xf4>)
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	dd9c      	ble.n	801b414 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801b4da:	68bb      	ldr	r3, [r7, #8]
}
 801b4dc:	4618      	mov	r0, r3
 801b4de:	3718      	adds	r7, #24
 801b4e0:	46bd      	mov	sp, r7
 801b4e2:	bdb0      	pop	{r4, r5, r7, pc}
 801b4e4:	08023098 	.word	0x08023098
 801b4e8:	080233c4 	.word	0x080233c4
 801b4ec:	08023128 	.word	0x08023128
 801b4f0:	2400f960 	.word	0x2400f960
 801b4f4:	080233ec 	.word	0x080233ec
 801b4f8:	2400f95c 	.word	0x2400f95c

0801b4fc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801b4fc:	b5b0      	push	{r4, r5, r7, lr}
 801b4fe:	b094      	sub	sp, #80	; 0x50
 801b500:	af00      	add	r7, sp, #0
 801b502:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801b504:	2300      	movs	r3, #0
 801b506:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d106      	bne.n	801b51c <tcp_receive+0x20>
 801b50e:	4b91      	ldr	r3, [pc, #580]	; (801b754 <tcp_receive+0x258>)
 801b510:	f240 427b 	movw	r2, #1147	; 0x47b
 801b514:	4990      	ldr	r1, [pc, #576]	; (801b758 <tcp_receive+0x25c>)
 801b516:	4891      	ldr	r0, [pc, #580]	; (801b75c <tcp_receive+0x260>)
 801b518:	f004 faf8 	bl	801fb0c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	7d1b      	ldrb	r3, [r3, #20]
 801b520:	2b03      	cmp	r3, #3
 801b522:	d806      	bhi.n	801b532 <tcp_receive+0x36>
 801b524:	4b8b      	ldr	r3, [pc, #556]	; (801b754 <tcp_receive+0x258>)
 801b526:	f240 427c 	movw	r2, #1148	; 0x47c
 801b52a:	498d      	ldr	r1, [pc, #564]	; (801b760 <tcp_receive+0x264>)
 801b52c:	488b      	ldr	r0, [pc, #556]	; (801b75c <tcp_receive+0x260>)
 801b52e:	f004 faed 	bl	801fb0c <iprintf>

  if (flags & TCP_ACK) {
 801b532:	4b8c      	ldr	r3, [pc, #560]	; (801b764 <tcp_receive+0x268>)
 801b534:	781b      	ldrb	r3, [r3, #0]
 801b536:	f003 0310 	and.w	r3, r3, #16
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	f000 8264 	beq.w	801ba08 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b546:	461a      	mov	r2, r3
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b54c:	4413      	add	r3, r2
 801b54e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b554:	4b84      	ldr	r3, [pc, #528]	; (801b768 <tcp_receive+0x26c>)
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	1ad3      	subs	r3, r2, r3
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	db1b      	blt.n	801b596 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b562:	4b81      	ldr	r3, [pc, #516]	; (801b768 <tcp_receive+0x26c>)
 801b564:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b566:	429a      	cmp	r2, r3
 801b568:	d106      	bne.n	801b578 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b56e:	4b7f      	ldr	r3, [pc, #508]	; (801b76c <tcp_receive+0x270>)
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	1ad3      	subs	r3, r2, r3
 801b574:	2b00      	cmp	r3, #0
 801b576:	db0e      	blt.n	801b596 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b57c:	4b7b      	ldr	r3, [pc, #492]	; (801b76c <tcp_receive+0x270>)
 801b57e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b580:	429a      	cmp	r2, r3
 801b582:	d125      	bne.n	801b5d0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801b584:	4b7a      	ldr	r3, [pc, #488]	; (801b770 <tcp_receive+0x274>)
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	89db      	ldrh	r3, [r3, #14]
 801b58a:	b29a      	uxth	r2, r3
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b592:	429a      	cmp	r2, r3
 801b594:	d91c      	bls.n	801b5d0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801b596:	4b76      	ldr	r3, [pc, #472]	; (801b770 <tcp_receive+0x274>)
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	89db      	ldrh	r3, [r3, #14]
 801b59c:	b29a      	uxth	r2, r3
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b5b0:	429a      	cmp	r2, r3
 801b5b2:	d205      	bcs.n	801b5c0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801b5c0:	4b69      	ldr	r3, [pc, #420]	; (801b768 <tcp_receive+0x26c>)
 801b5c2:	681a      	ldr	r2, [r3, #0]
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801b5c8:	4b68      	ldr	r3, [pc, #416]	; (801b76c <tcp_receive+0x270>)
 801b5ca:	681a      	ldr	r2, [r3, #0]
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801b5d0:	4b66      	ldr	r3, [pc, #408]	; (801b76c <tcp_receive+0x270>)
 801b5d2:	681a      	ldr	r2, [r3, #0]
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b5d8:	1ad3      	subs	r3, r2, r3
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	dc58      	bgt.n	801b690 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801b5de:	4b65      	ldr	r3, [pc, #404]	; (801b774 <tcp_receive+0x278>)
 801b5e0:	881b      	ldrh	r3, [r3, #0]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d14b      	bne.n	801b67e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b5ea:	687a      	ldr	r2, [r7, #4]
 801b5ec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801b5f0:	4413      	add	r3, r2
 801b5f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b5f4:	429a      	cmp	r2, r3
 801b5f6:	d142      	bne.n	801b67e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	db3d      	blt.n	801b67e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b606:	4b59      	ldr	r3, [pc, #356]	; (801b76c <tcp_receive+0x270>)
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	429a      	cmp	r2, r3
 801b60c:	d137      	bne.n	801b67e <tcp_receive+0x182>
              found_dupack = 1;
 801b60e:	2301      	movs	r3, #1
 801b610:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b618:	2bff      	cmp	r3, #255	; 0xff
 801b61a:	d007      	beq.n	801b62c <tcp_receive+0x130>
                ++pcb->dupacks;
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b622:	3301      	adds	r3, #1
 801b624:	b2da      	uxtb	r2, r3
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b632:	2b03      	cmp	r3, #3
 801b634:	d91b      	bls.n	801b66e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b640:	4413      	add	r3, r2
 801b642:	b29a      	uxth	r2, r3
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b64a:	429a      	cmp	r2, r3
 801b64c:	d30a      	bcc.n	801b664 <tcp_receive+0x168>
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b658:	4413      	add	r3, r2
 801b65a:	b29a      	uxth	r2, r3
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b662:	e004      	b.n	801b66e <tcp_receive+0x172>
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b66a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b674:	2b02      	cmp	r3, #2
 801b676:	d902      	bls.n	801b67e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801b678:	6878      	ldr	r0, [r7, #4]
 801b67a:	f002 fb43 	bl	801dd04 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801b67e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b680:	2b00      	cmp	r3, #0
 801b682:	f040 8161 	bne.w	801b948 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	2200      	movs	r2, #0
 801b68a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801b68e:	e15b      	b.n	801b948 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b690:	4b36      	ldr	r3, [pc, #216]	; (801b76c <tcp_receive+0x270>)
 801b692:	681a      	ldr	r2, [r3, #0]
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b698:	1ad3      	subs	r3, r2, r3
 801b69a:	3b01      	subs	r3, #1
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	f2c0 814e 	blt.w	801b93e <tcp_receive+0x442>
 801b6a2:	4b32      	ldr	r3, [pc, #200]	; (801b76c <tcp_receive+0x270>)
 801b6a4:	681a      	ldr	r2, [r3, #0]
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b6aa:	1ad3      	subs	r3, r2, r3
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	f300 8146 	bgt.w	801b93e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	8b5b      	ldrh	r3, [r3, #26]
 801b6b6:	f003 0304 	and.w	r3, r3, #4
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d010      	beq.n	801b6e0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	8b5b      	ldrh	r3, [r3, #26]
 801b6c2:	f023 0304 	bic.w	r3, r3, #4
 801b6c6:	b29a      	uxth	r2, r3
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	2200      	movs	r2, #0
 801b6dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b6ee:	10db      	asrs	r3, r3, #3
 801b6f0:	b21b      	sxth	r3, r3
 801b6f2:	b29a      	uxth	r2, r3
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b6fa:	b29b      	uxth	r3, r3
 801b6fc:	4413      	add	r3, r2
 801b6fe:	b29b      	uxth	r3, r3
 801b700:	b21a      	sxth	r2, r3
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801b708:	4b18      	ldr	r3, [pc, #96]	; (801b76c <tcp_receive+0x270>)
 801b70a:	681b      	ldr	r3, [r3, #0]
 801b70c:	b29a      	uxth	r2, r3
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b712:	b29b      	uxth	r3, r3
 801b714:	1ad3      	subs	r3, r2, r3
 801b716:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	2200      	movs	r2, #0
 801b71c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801b720:	4b12      	ldr	r3, [pc, #72]	; (801b76c <tcp_receive+0x270>)
 801b722:	681a      	ldr	r2, [r3, #0]
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	7d1b      	ldrb	r3, [r3, #20]
 801b72c:	2b03      	cmp	r3, #3
 801b72e:	f240 8097 	bls.w	801b860 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b73e:	429a      	cmp	r2, r3
 801b740:	d245      	bcs.n	801b7ce <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	8b5b      	ldrh	r3, [r3, #26]
 801b746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d014      	beq.n	801b778 <tcp_receive+0x27c>
 801b74e:	2301      	movs	r3, #1
 801b750:	e013      	b.n	801b77a <tcp_receive+0x27e>
 801b752:	bf00      	nop
 801b754:	08023098 	.word	0x08023098
 801b758:	0802340c 	.word	0x0802340c
 801b75c:	08023128 	.word	0x08023128
 801b760:	08023428 	.word	0x08023428
 801b764:	2400f964 	.word	0x2400f964
 801b768:	2400f958 	.word	0x2400f958
 801b76c:	2400f95c 	.word	0x2400f95c
 801b770:	2400f948 	.word	0x2400f948
 801b774:	2400f962 	.word	0x2400f962
 801b778:	2302      	movs	r3, #2
 801b77a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801b77e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b782:	b29a      	uxth	r2, r3
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b788:	fb12 f303 	smulbb	r3, r2, r3
 801b78c:	b29b      	uxth	r3, r3
 801b78e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801b790:	4293      	cmp	r3, r2
 801b792:	bf28      	it	cs
 801b794:	4613      	movcs	r3, r2
 801b796:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b79e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b7a0:	4413      	add	r3, r2
 801b7a2:	b29a      	uxth	r2, r3
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b7aa:	429a      	cmp	r2, r3
 801b7ac:	d309      	bcc.n	801b7c2 <tcp_receive+0x2c6>
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b7b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b7b6:	4413      	add	r3, r2
 801b7b8:	b29a      	uxth	r2, r3
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b7c0:	e04e      	b.n	801b860 <tcp_receive+0x364>
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b7c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b7cc:	e048      	b.n	801b860 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b7d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b7d6:	4413      	add	r3, r2
 801b7d8:	b29a      	uxth	r2, r3
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801b7e0:	429a      	cmp	r2, r3
 801b7e2:	d309      	bcc.n	801b7f8 <tcp_receive+0x2fc>
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b7ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b7ec:	4413      	add	r3, r2
 801b7ee:	b29a      	uxth	r2, r3
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801b7f6:	e004      	b.n	801b802 <tcp_receive+0x306>
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b7fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b80e:	429a      	cmp	r2, r3
 801b810:	d326      	bcc.n	801b860 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b81e:	1ad3      	subs	r3, r2, r3
 801b820:	b29a      	uxth	r2, r3
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b832:	4413      	add	r3, r2
 801b834:	b29a      	uxth	r2, r3
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b83c:	429a      	cmp	r2, r3
 801b83e:	d30a      	bcc.n	801b856 <tcp_receive+0x35a>
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b84a:	4413      	add	r3, r2
 801b84c:	b29a      	uxth	r2, r3
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b854:	e004      	b.n	801b860 <tcp_receive+0x364>
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b85c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b868:	4a98      	ldr	r2, [pc, #608]	; (801bacc <tcp_receive+0x5d0>)
 801b86a:	6878      	ldr	r0, [r7, #4]
 801b86c:	f7ff fdca 	bl	801b404 <tcp_free_acked_segments>
 801b870:	4602      	mov	r2, r0
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b87e:	4a94      	ldr	r2, [pc, #592]	; (801bad0 <tcp_receive+0x5d4>)
 801b880:	6878      	ldr	r0, [r7, #4]
 801b882:	f7ff fdbf 	bl	801b404 <tcp_free_acked_segments>
 801b886:	4602      	mov	r2, r0
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b890:	2b00      	cmp	r3, #0
 801b892:	d104      	bne.n	801b89e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b89a:	861a      	strh	r2, [r3, #48]	; 0x30
 801b89c:	e002      	b.n	801b8a4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	2200      	movs	r2, #0
 801b8a2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	2200      	movs	r2, #0
 801b8a8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d103      	bne.n	801b8ba <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	2200      	movs	r2, #0
 801b8b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801b8c0:	4b84      	ldr	r3, [pc, #528]	; (801bad4 <tcp_receive+0x5d8>)
 801b8c2:	881b      	ldrh	r3, [r3, #0]
 801b8c4:	4413      	add	r3, r2
 801b8c6:	b29a      	uxth	r2, r3
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	8b5b      	ldrh	r3, [r3, #26]
 801b8d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d035      	beq.n	801b946 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d118      	bne.n	801b914 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d00c      	beq.n	801b904 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8f2:	68db      	ldr	r3, [r3, #12]
 801b8f4:	685b      	ldr	r3, [r3, #4]
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	f7f8 f89d 	bl	8013a36 <lwip_htonl>
 801b8fc:	4603      	mov	r3, r0
 801b8fe:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801b900:	2b00      	cmp	r3, #0
 801b902:	dc20      	bgt.n	801b946 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	8b5b      	ldrh	r3, [r3, #26]
 801b908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b90c:	b29a      	uxth	r2, r3
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b912:	e018      	b.n	801b946 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b91c:	68db      	ldr	r3, [r3, #12]
 801b91e:	685b      	ldr	r3, [r3, #4]
 801b920:	4618      	mov	r0, r3
 801b922:	f7f8 f888 	bl	8013a36 <lwip_htonl>
 801b926:	4603      	mov	r3, r0
 801b928:	1ae3      	subs	r3, r4, r3
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	dc0b      	bgt.n	801b946 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	8b5b      	ldrh	r3, [r3, #26]
 801b932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b936:	b29a      	uxth	r2, r3
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b93c:	e003      	b.n	801b946 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801b93e:	6878      	ldr	r0, [r7, #4]
 801b940:	f002 fbce 	bl	801e0e0 <tcp_send_empty_ack>
 801b944:	e000      	b.n	801b948 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b946:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d05b      	beq.n	801ba08 <tcp_receive+0x50c>
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b954:	4b60      	ldr	r3, [pc, #384]	; (801bad8 <tcp_receive+0x5dc>)
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	1ad3      	subs	r3, r2, r3
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	da54      	bge.n	801ba08 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801b95e:	4b5f      	ldr	r3, [pc, #380]	; (801badc <tcp_receive+0x5e0>)
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	b29a      	uxth	r2, r3
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b968:	b29b      	uxth	r3, r3
 801b96a:	1ad3      	subs	r3, r2, r3
 801b96c:	b29b      	uxth	r3, r3
 801b96e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801b972:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b97c:	10db      	asrs	r3, r3, #3
 801b97e:	b21b      	sxth	r3, r3
 801b980:	b29b      	uxth	r3, r3
 801b982:	1ad3      	subs	r3, r2, r3
 801b984:	b29b      	uxth	r3, r3
 801b986:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b990:	b29a      	uxth	r2, r3
 801b992:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b996:	4413      	add	r3, r2
 801b998:	b29b      	uxth	r3, r3
 801b99a:	b21a      	sxth	r2, r3
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801b9a0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	da05      	bge.n	801b9b4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801b9a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b9ac:	425b      	negs	r3, r3
 801b9ae:	b29b      	uxth	r3, r3
 801b9b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801b9b4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b9be:	109b      	asrs	r3, r3, #2
 801b9c0:	b21b      	sxth	r3, r3
 801b9c2:	b29b      	uxth	r3, r3
 801b9c4:	1ad3      	subs	r3, r2, r3
 801b9c6:	b29b      	uxth	r3, r3
 801b9c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b9d2:	b29a      	uxth	r2, r3
 801b9d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b9d8:	4413      	add	r3, r2
 801b9da:	b29b      	uxth	r3, r3
 801b9dc:	b21a      	sxth	r2, r3
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b9e8:	10db      	asrs	r3, r3, #3
 801b9ea:	b21b      	sxth	r3, r3
 801b9ec:	b29a      	uxth	r2, r3
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b9f4:	b29b      	uxth	r3, r3
 801b9f6:	4413      	add	r3, r2
 801b9f8:	b29b      	uxth	r3, r3
 801b9fa:	b21a      	sxth	r2, r3
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	2200      	movs	r2, #0
 801ba06:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ba08:	4b35      	ldr	r3, [pc, #212]	; (801bae0 <tcp_receive+0x5e4>)
 801ba0a:	881b      	ldrh	r3, [r3, #0]
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	f000 84e2 	beq.w	801c3d6 <tcp_receive+0xeda>
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	7d1b      	ldrb	r3, [r3, #20]
 801ba16:	2b06      	cmp	r3, #6
 801ba18:	f200 84dd 	bhi.w	801c3d6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba20:	4b30      	ldr	r3, [pc, #192]	; (801bae4 <tcp_receive+0x5e8>)
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	1ad3      	subs	r3, r2, r3
 801ba26:	3b01      	subs	r3, #1
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	f2c0 808f 	blt.w	801bb4c <tcp_receive+0x650>
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba32:	4b2b      	ldr	r3, [pc, #172]	; (801bae0 <tcp_receive+0x5e4>)
 801ba34:	881b      	ldrh	r3, [r3, #0]
 801ba36:	4619      	mov	r1, r3
 801ba38:	4b2a      	ldr	r3, [pc, #168]	; (801bae4 <tcp_receive+0x5e8>)
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	440b      	add	r3, r1
 801ba3e:	1ad3      	subs	r3, r2, r3
 801ba40:	3301      	adds	r3, #1
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	f300 8082 	bgt.w	801bb4c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801ba48:	4b27      	ldr	r3, [pc, #156]	; (801bae8 <tcp_receive+0x5ec>)
 801ba4a:	685b      	ldr	r3, [r3, #4]
 801ba4c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba52:	4b24      	ldr	r3, [pc, #144]	; (801bae4 <tcp_receive+0x5e8>)
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	1ad3      	subs	r3, r2, r3
 801ba58:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801ba5a:	4b23      	ldr	r3, [pc, #140]	; (801bae8 <tcp_receive+0x5ec>)
 801ba5c:	685b      	ldr	r3, [r3, #4]
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d106      	bne.n	801ba70 <tcp_receive+0x574>
 801ba62:	4b22      	ldr	r3, [pc, #136]	; (801baec <tcp_receive+0x5f0>)
 801ba64:	f240 5294 	movw	r2, #1428	; 0x594
 801ba68:	4921      	ldr	r1, [pc, #132]	; (801baf0 <tcp_receive+0x5f4>)
 801ba6a:	4822      	ldr	r0, [pc, #136]	; (801baf4 <tcp_receive+0x5f8>)
 801ba6c:	f004 f84e 	bl	801fb0c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ba76:	4293      	cmp	r3, r2
 801ba78:	d906      	bls.n	801ba88 <tcp_receive+0x58c>
 801ba7a:	4b1c      	ldr	r3, [pc, #112]	; (801baec <tcp_receive+0x5f0>)
 801ba7c:	f240 5295 	movw	r2, #1429	; 0x595
 801ba80:	491d      	ldr	r1, [pc, #116]	; (801baf8 <tcp_receive+0x5fc>)
 801ba82:	481c      	ldr	r0, [pc, #112]	; (801baf4 <tcp_receive+0x5f8>)
 801ba84:	f004 f842 	bl	801fb0c <iprintf>
      off = (u16_t)off32;
 801ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801ba8e:	4b16      	ldr	r3, [pc, #88]	; (801bae8 <tcp_receive+0x5ec>)
 801ba90:	685b      	ldr	r3, [r3, #4]
 801ba92:	891b      	ldrh	r3, [r3, #8]
 801ba94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ba98:	429a      	cmp	r2, r3
 801ba9a:	d906      	bls.n	801baaa <tcp_receive+0x5ae>
 801ba9c:	4b13      	ldr	r3, [pc, #76]	; (801baec <tcp_receive+0x5f0>)
 801ba9e:	f240 5297 	movw	r2, #1431	; 0x597
 801baa2:	4916      	ldr	r1, [pc, #88]	; (801bafc <tcp_receive+0x600>)
 801baa4:	4813      	ldr	r0, [pc, #76]	; (801baf4 <tcp_receive+0x5f8>)
 801baa6:	f004 f831 	bl	801fb0c <iprintf>
      inseg.len -= off;
 801baaa:	4b0f      	ldr	r3, [pc, #60]	; (801bae8 <tcp_receive+0x5ec>)
 801baac:	891a      	ldrh	r2, [r3, #8]
 801baae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bab2:	1ad3      	subs	r3, r2, r3
 801bab4:	b29a      	uxth	r2, r3
 801bab6:	4b0c      	ldr	r3, [pc, #48]	; (801bae8 <tcp_receive+0x5ec>)
 801bab8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801baba:	4b0b      	ldr	r3, [pc, #44]	; (801bae8 <tcp_receive+0x5ec>)
 801babc:	685b      	ldr	r3, [r3, #4]
 801babe:	891a      	ldrh	r2, [r3, #8]
 801bac0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bac4:	1ad3      	subs	r3, r2, r3
 801bac6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801bac8:	e02a      	b.n	801bb20 <tcp_receive+0x624>
 801baca:	bf00      	nop
 801bacc:	08023444 	.word	0x08023444
 801bad0:	0802344c 	.word	0x0802344c
 801bad4:	2400f960 	.word	0x2400f960
 801bad8:	2400f95c 	.word	0x2400f95c
 801badc:	2400f920 	.word	0x2400f920
 801bae0:	2400f962 	.word	0x2400f962
 801bae4:	2400f958 	.word	0x2400f958
 801bae8:	2400f938 	.word	0x2400f938
 801baec:	08023098 	.word	0x08023098
 801baf0:	08023454 	.word	0x08023454
 801baf4:	08023128 	.word	0x08023128
 801baf8:	08023464 	.word	0x08023464
 801bafc:	08023474 	.word	0x08023474
        off -= p->len;
 801bb00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bb02:	895b      	ldrh	r3, [r3, #10]
 801bb04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bb08:	1ad3      	subs	r3, r2, r3
 801bb0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801bb0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bb10:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801bb12:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801bb14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bb16:	2200      	movs	r2, #0
 801bb18:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801bb1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801bb20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bb22:	895b      	ldrh	r3, [r3, #10]
 801bb24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bb28:	429a      	cmp	r2, r3
 801bb2a:	d8e9      	bhi.n	801bb00 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801bb2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bb30:	4619      	mov	r1, r3
 801bb32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801bb34:	f7fb feb8 	bl	80178a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb3c:	4a91      	ldr	r2, [pc, #580]	; (801bd84 <tcp_receive+0x888>)
 801bb3e:	6013      	str	r3, [r2, #0]
 801bb40:	4b91      	ldr	r3, [pc, #580]	; (801bd88 <tcp_receive+0x88c>)
 801bb42:	68db      	ldr	r3, [r3, #12]
 801bb44:	4a8f      	ldr	r2, [pc, #572]	; (801bd84 <tcp_receive+0x888>)
 801bb46:	6812      	ldr	r2, [r2, #0]
 801bb48:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801bb4a:	e00d      	b.n	801bb68 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801bb4c:	4b8d      	ldr	r3, [pc, #564]	; (801bd84 <tcp_receive+0x888>)
 801bb4e:	681a      	ldr	r2, [r3, #0]
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb54:	1ad3      	subs	r3, r2, r3
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	da06      	bge.n	801bb68 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	8b5b      	ldrh	r3, [r3, #26]
 801bb5e:	f043 0302 	orr.w	r3, r3, #2
 801bb62:	b29a      	uxth	r2, r3
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801bb68:	4b86      	ldr	r3, [pc, #536]	; (801bd84 <tcp_receive+0x888>)
 801bb6a:	681a      	ldr	r2, [r3, #0]
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb70:	1ad3      	subs	r3, r2, r3
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	f2c0 842a 	blt.w	801c3cc <tcp_receive+0xed0>
 801bb78:	4b82      	ldr	r3, [pc, #520]	; (801bd84 <tcp_receive+0x888>)
 801bb7a:	681a      	ldr	r2, [r3, #0]
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb80:	6879      	ldr	r1, [r7, #4]
 801bb82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bb84:	440b      	add	r3, r1
 801bb86:	1ad3      	subs	r3, r2, r3
 801bb88:	3301      	adds	r3, #1
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	f300 841e 	bgt.w	801c3cc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bb94:	4b7b      	ldr	r3, [pc, #492]	; (801bd84 <tcp_receive+0x888>)
 801bb96:	681b      	ldr	r3, [r3, #0]
 801bb98:	429a      	cmp	r2, r3
 801bb9a:	f040 829a 	bne.w	801c0d2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801bb9e:	4b7a      	ldr	r3, [pc, #488]	; (801bd88 <tcp_receive+0x88c>)
 801bba0:	891c      	ldrh	r4, [r3, #8]
 801bba2:	4b79      	ldr	r3, [pc, #484]	; (801bd88 <tcp_receive+0x88c>)
 801bba4:	68db      	ldr	r3, [r3, #12]
 801bba6:	899b      	ldrh	r3, [r3, #12]
 801bba8:	b29b      	uxth	r3, r3
 801bbaa:	4618      	mov	r0, r3
 801bbac:	f7f7 ff2e 	bl	8013a0c <lwip_htons>
 801bbb0:	4603      	mov	r3, r0
 801bbb2:	b2db      	uxtb	r3, r3
 801bbb4:	f003 0303 	and.w	r3, r3, #3
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d001      	beq.n	801bbc0 <tcp_receive+0x6c4>
 801bbbc:	2301      	movs	r3, #1
 801bbbe:	e000      	b.n	801bbc2 <tcp_receive+0x6c6>
 801bbc0:	2300      	movs	r3, #0
 801bbc2:	4423      	add	r3, r4
 801bbc4:	b29a      	uxth	r2, r3
 801bbc6:	4b71      	ldr	r3, [pc, #452]	; (801bd8c <tcp_receive+0x890>)
 801bbc8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bbce:	4b6f      	ldr	r3, [pc, #444]	; (801bd8c <tcp_receive+0x890>)
 801bbd0:	881b      	ldrh	r3, [r3, #0]
 801bbd2:	429a      	cmp	r2, r3
 801bbd4:	d275      	bcs.n	801bcc2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801bbd6:	4b6c      	ldr	r3, [pc, #432]	; (801bd88 <tcp_receive+0x88c>)
 801bbd8:	68db      	ldr	r3, [r3, #12]
 801bbda:	899b      	ldrh	r3, [r3, #12]
 801bbdc:	b29b      	uxth	r3, r3
 801bbde:	4618      	mov	r0, r3
 801bbe0:	f7f7 ff14 	bl	8013a0c <lwip_htons>
 801bbe4:	4603      	mov	r3, r0
 801bbe6:	b2db      	uxtb	r3, r3
 801bbe8:	f003 0301 	and.w	r3, r3, #1
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d01f      	beq.n	801bc30 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801bbf0:	4b65      	ldr	r3, [pc, #404]	; (801bd88 <tcp_receive+0x88c>)
 801bbf2:	68db      	ldr	r3, [r3, #12]
 801bbf4:	899b      	ldrh	r3, [r3, #12]
 801bbf6:	b29b      	uxth	r3, r3
 801bbf8:	b21b      	sxth	r3, r3
 801bbfa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801bbfe:	b21c      	sxth	r4, r3
 801bc00:	4b61      	ldr	r3, [pc, #388]	; (801bd88 <tcp_receive+0x88c>)
 801bc02:	68db      	ldr	r3, [r3, #12]
 801bc04:	899b      	ldrh	r3, [r3, #12]
 801bc06:	b29b      	uxth	r3, r3
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7f7 feff 	bl	8013a0c <lwip_htons>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	b2db      	uxtb	r3, r3
 801bc12:	b29b      	uxth	r3, r3
 801bc14:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801bc18:	b29b      	uxth	r3, r3
 801bc1a:	4618      	mov	r0, r3
 801bc1c:	f7f7 fef6 	bl	8013a0c <lwip_htons>
 801bc20:	4603      	mov	r3, r0
 801bc22:	b21b      	sxth	r3, r3
 801bc24:	4323      	orrs	r3, r4
 801bc26:	b21a      	sxth	r2, r3
 801bc28:	4b57      	ldr	r3, [pc, #348]	; (801bd88 <tcp_receive+0x88c>)
 801bc2a:	68db      	ldr	r3, [r3, #12]
 801bc2c:	b292      	uxth	r2, r2
 801bc2e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bc34:	4b54      	ldr	r3, [pc, #336]	; (801bd88 <tcp_receive+0x88c>)
 801bc36:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801bc38:	4b53      	ldr	r3, [pc, #332]	; (801bd88 <tcp_receive+0x88c>)
 801bc3a:	68db      	ldr	r3, [r3, #12]
 801bc3c:	899b      	ldrh	r3, [r3, #12]
 801bc3e:	b29b      	uxth	r3, r3
 801bc40:	4618      	mov	r0, r3
 801bc42:	f7f7 fee3 	bl	8013a0c <lwip_htons>
 801bc46:	4603      	mov	r3, r0
 801bc48:	b2db      	uxtb	r3, r3
 801bc4a:	f003 0302 	and.w	r3, r3, #2
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d005      	beq.n	801bc5e <tcp_receive+0x762>
            inseg.len -= 1;
 801bc52:	4b4d      	ldr	r3, [pc, #308]	; (801bd88 <tcp_receive+0x88c>)
 801bc54:	891b      	ldrh	r3, [r3, #8]
 801bc56:	3b01      	subs	r3, #1
 801bc58:	b29a      	uxth	r2, r3
 801bc5a:	4b4b      	ldr	r3, [pc, #300]	; (801bd88 <tcp_receive+0x88c>)
 801bc5c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801bc5e:	4b4a      	ldr	r3, [pc, #296]	; (801bd88 <tcp_receive+0x88c>)
 801bc60:	685b      	ldr	r3, [r3, #4]
 801bc62:	4a49      	ldr	r2, [pc, #292]	; (801bd88 <tcp_receive+0x88c>)
 801bc64:	8912      	ldrh	r2, [r2, #8]
 801bc66:	4611      	mov	r1, r2
 801bc68:	4618      	mov	r0, r3
 801bc6a:	f7fb fd1f 	bl	80176ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801bc6e:	4b46      	ldr	r3, [pc, #280]	; (801bd88 <tcp_receive+0x88c>)
 801bc70:	891c      	ldrh	r4, [r3, #8]
 801bc72:	4b45      	ldr	r3, [pc, #276]	; (801bd88 <tcp_receive+0x88c>)
 801bc74:	68db      	ldr	r3, [r3, #12]
 801bc76:	899b      	ldrh	r3, [r3, #12]
 801bc78:	b29b      	uxth	r3, r3
 801bc7a:	4618      	mov	r0, r3
 801bc7c:	f7f7 fec6 	bl	8013a0c <lwip_htons>
 801bc80:	4603      	mov	r3, r0
 801bc82:	b2db      	uxtb	r3, r3
 801bc84:	f003 0303 	and.w	r3, r3, #3
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d001      	beq.n	801bc90 <tcp_receive+0x794>
 801bc8c:	2301      	movs	r3, #1
 801bc8e:	e000      	b.n	801bc92 <tcp_receive+0x796>
 801bc90:	2300      	movs	r3, #0
 801bc92:	4423      	add	r3, r4
 801bc94:	b29a      	uxth	r2, r3
 801bc96:	4b3d      	ldr	r3, [pc, #244]	; (801bd8c <tcp_receive+0x890>)
 801bc98:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801bc9a:	4b3c      	ldr	r3, [pc, #240]	; (801bd8c <tcp_receive+0x890>)
 801bc9c:	881b      	ldrh	r3, [r3, #0]
 801bc9e:	461a      	mov	r2, r3
 801bca0:	4b38      	ldr	r3, [pc, #224]	; (801bd84 <tcp_receive+0x888>)
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	441a      	add	r2, r3
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bcaa:	6879      	ldr	r1, [r7, #4]
 801bcac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bcae:	440b      	add	r3, r1
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	d006      	beq.n	801bcc2 <tcp_receive+0x7c6>
 801bcb4:	4b36      	ldr	r3, [pc, #216]	; (801bd90 <tcp_receive+0x894>)
 801bcb6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801bcba:	4936      	ldr	r1, [pc, #216]	; (801bd94 <tcp_receive+0x898>)
 801bcbc:	4836      	ldr	r0, [pc, #216]	; (801bd98 <tcp_receive+0x89c>)
 801bcbe:	f003 ff25 	bl	801fb0c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	f000 80e7 	beq.w	801be9a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801bccc:	4b2e      	ldr	r3, [pc, #184]	; (801bd88 <tcp_receive+0x88c>)
 801bcce:	68db      	ldr	r3, [r3, #12]
 801bcd0:	899b      	ldrh	r3, [r3, #12]
 801bcd2:	b29b      	uxth	r3, r3
 801bcd4:	4618      	mov	r0, r3
 801bcd6:	f7f7 fe99 	bl	8013a0c <lwip_htons>
 801bcda:	4603      	mov	r3, r0
 801bcdc:	b2db      	uxtb	r3, r3
 801bcde:	f003 0301 	and.w	r3, r3, #1
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d010      	beq.n	801bd08 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801bce6:	e00a      	b.n	801bcfe <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bcec:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bcf2:	681a      	ldr	r2, [r3, #0]
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801bcf8:	68f8      	ldr	r0, [r7, #12]
 801bcfa:	f7fd fcc4 	bl	8019686 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d1f0      	bne.n	801bce8 <tcp_receive+0x7ec>
 801bd06:	e0c8      	b.n	801be9a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801bd0e:	e052      	b.n	801bdb6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801bd10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bd12:	68db      	ldr	r3, [r3, #12]
 801bd14:	899b      	ldrh	r3, [r3, #12]
 801bd16:	b29b      	uxth	r3, r3
 801bd18:	4618      	mov	r0, r3
 801bd1a:	f7f7 fe77 	bl	8013a0c <lwip_htons>
 801bd1e:	4603      	mov	r3, r0
 801bd20:	b2db      	uxtb	r3, r3
 801bd22:	f003 0301 	and.w	r3, r3, #1
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d03d      	beq.n	801bda6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801bd2a:	4b17      	ldr	r3, [pc, #92]	; (801bd88 <tcp_receive+0x88c>)
 801bd2c:	68db      	ldr	r3, [r3, #12]
 801bd2e:	899b      	ldrh	r3, [r3, #12]
 801bd30:	b29b      	uxth	r3, r3
 801bd32:	4618      	mov	r0, r3
 801bd34:	f7f7 fe6a 	bl	8013a0c <lwip_htons>
 801bd38:	4603      	mov	r3, r0
 801bd3a:	b2db      	uxtb	r3, r3
 801bd3c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d130      	bne.n	801bda6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801bd44:	4b10      	ldr	r3, [pc, #64]	; (801bd88 <tcp_receive+0x88c>)
 801bd46:	68db      	ldr	r3, [r3, #12]
 801bd48:	899b      	ldrh	r3, [r3, #12]
 801bd4a:	b29c      	uxth	r4, r3
 801bd4c:	2001      	movs	r0, #1
 801bd4e:	f7f7 fe5d 	bl	8013a0c <lwip_htons>
 801bd52:	4603      	mov	r3, r0
 801bd54:	461a      	mov	r2, r3
 801bd56:	4b0c      	ldr	r3, [pc, #48]	; (801bd88 <tcp_receive+0x88c>)
 801bd58:	68db      	ldr	r3, [r3, #12]
 801bd5a:	4322      	orrs	r2, r4
 801bd5c:	b292      	uxth	r2, r2
 801bd5e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801bd60:	4b09      	ldr	r3, [pc, #36]	; (801bd88 <tcp_receive+0x88c>)
 801bd62:	891c      	ldrh	r4, [r3, #8]
 801bd64:	4b08      	ldr	r3, [pc, #32]	; (801bd88 <tcp_receive+0x88c>)
 801bd66:	68db      	ldr	r3, [r3, #12]
 801bd68:	899b      	ldrh	r3, [r3, #12]
 801bd6a:	b29b      	uxth	r3, r3
 801bd6c:	4618      	mov	r0, r3
 801bd6e:	f7f7 fe4d 	bl	8013a0c <lwip_htons>
 801bd72:	4603      	mov	r3, r0
 801bd74:	b2db      	uxtb	r3, r3
 801bd76:	f003 0303 	and.w	r3, r3, #3
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d00e      	beq.n	801bd9c <tcp_receive+0x8a0>
 801bd7e:	2301      	movs	r3, #1
 801bd80:	e00d      	b.n	801bd9e <tcp_receive+0x8a2>
 801bd82:	bf00      	nop
 801bd84:	2400f958 	.word	0x2400f958
 801bd88:	2400f938 	.word	0x2400f938
 801bd8c:	2400f962 	.word	0x2400f962
 801bd90:	08023098 	.word	0x08023098
 801bd94:	08023484 	.word	0x08023484
 801bd98:	08023128 	.word	0x08023128
 801bd9c:	2300      	movs	r3, #0
 801bd9e:	4423      	add	r3, r4
 801bda0:	b29a      	uxth	r2, r3
 801bda2:	4b98      	ldr	r3, [pc, #608]	; (801c004 <tcp_receive+0xb08>)
 801bda4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801bda6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bda8:	613b      	str	r3, [r7, #16]
              next = next->next;
 801bdaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801bdb0:	6938      	ldr	r0, [r7, #16]
 801bdb2:	f7fd fc68 	bl	8019686 <tcp_seg_free>
            while (next &&
 801bdb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d00e      	beq.n	801bdda <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801bdbc:	4b91      	ldr	r3, [pc, #580]	; (801c004 <tcp_receive+0xb08>)
 801bdbe:	881b      	ldrh	r3, [r3, #0]
 801bdc0:	461a      	mov	r2, r3
 801bdc2:	4b91      	ldr	r3, [pc, #580]	; (801c008 <tcp_receive+0xb0c>)
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	441a      	add	r2, r3
 801bdc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdca:	68db      	ldr	r3, [r3, #12]
 801bdcc:	685b      	ldr	r3, [r3, #4]
 801bdce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801bdd0:	8909      	ldrh	r1, [r1, #8]
 801bdd2:	440b      	add	r3, r1
 801bdd4:	1ad3      	subs	r3, r2, r3
            while (next &&
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	da9a      	bge.n	801bd10 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801bdda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d059      	beq.n	801be94 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801bde0:	4b88      	ldr	r3, [pc, #544]	; (801c004 <tcp_receive+0xb08>)
 801bde2:	881b      	ldrh	r3, [r3, #0]
 801bde4:	461a      	mov	r2, r3
 801bde6:	4b88      	ldr	r3, [pc, #544]	; (801c008 <tcp_receive+0xb0c>)
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	441a      	add	r2, r3
 801bdec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdee:	68db      	ldr	r3, [r3, #12]
 801bdf0:	685b      	ldr	r3, [r3, #4]
 801bdf2:	1ad3      	subs	r3, r2, r3
            if (next &&
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	dd4d      	ble.n	801be94 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801bdf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdfa:	68db      	ldr	r3, [r3, #12]
 801bdfc:	685b      	ldr	r3, [r3, #4]
 801bdfe:	b29a      	uxth	r2, r3
 801be00:	4b81      	ldr	r3, [pc, #516]	; (801c008 <tcp_receive+0xb0c>)
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	b29b      	uxth	r3, r3
 801be06:	1ad3      	subs	r3, r2, r3
 801be08:	b29a      	uxth	r2, r3
 801be0a:	4b80      	ldr	r3, [pc, #512]	; (801c00c <tcp_receive+0xb10>)
 801be0c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801be0e:	4b7f      	ldr	r3, [pc, #508]	; (801c00c <tcp_receive+0xb10>)
 801be10:	68db      	ldr	r3, [r3, #12]
 801be12:	899b      	ldrh	r3, [r3, #12]
 801be14:	b29b      	uxth	r3, r3
 801be16:	4618      	mov	r0, r3
 801be18:	f7f7 fdf8 	bl	8013a0c <lwip_htons>
 801be1c:	4603      	mov	r3, r0
 801be1e:	b2db      	uxtb	r3, r3
 801be20:	f003 0302 	and.w	r3, r3, #2
 801be24:	2b00      	cmp	r3, #0
 801be26:	d005      	beq.n	801be34 <tcp_receive+0x938>
                inseg.len -= 1;
 801be28:	4b78      	ldr	r3, [pc, #480]	; (801c00c <tcp_receive+0xb10>)
 801be2a:	891b      	ldrh	r3, [r3, #8]
 801be2c:	3b01      	subs	r3, #1
 801be2e:	b29a      	uxth	r2, r3
 801be30:	4b76      	ldr	r3, [pc, #472]	; (801c00c <tcp_receive+0xb10>)
 801be32:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801be34:	4b75      	ldr	r3, [pc, #468]	; (801c00c <tcp_receive+0xb10>)
 801be36:	685b      	ldr	r3, [r3, #4]
 801be38:	4a74      	ldr	r2, [pc, #464]	; (801c00c <tcp_receive+0xb10>)
 801be3a:	8912      	ldrh	r2, [r2, #8]
 801be3c:	4611      	mov	r1, r2
 801be3e:	4618      	mov	r0, r3
 801be40:	f7fb fc34 	bl	80176ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801be44:	4b71      	ldr	r3, [pc, #452]	; (801c00c <tcp_receive+0xb10>)
 801be46:	891c      	ldrh	r4, [r3, #8]
 801be48:	4b70      	ldr	r3, [pc, #448]	; (801c00c <tcp_receive+0xb10>)
 801be4a:	68db      	ldr	r3, [r3, #12]
 801be4c:	899b      	ldrh	r3, [r3, #12]
 801be4e:	b29b      	uxth	r3, r3
 801be50:	4618      	mov	r0, r3
 801be52:	f7f7 fddb 	bl	8013a0c <lwip_htons>
 801be56:	4603      	mov	r3, r0
 801be58:	b2db      	uxtb	r3, r3
 801be5a:	f003 0303 	and.w	r3, r3, #3
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d001      	beq.n	801be66 <tcp_receive+0x96a>
 801be62:	2301      	movs	r3, #1
 801be64:	e000      	b.n	801be68 <tcp_receive+0x96c>
 801be66:	2300      	movs	r3, #0
 801be68:	4423      	add	r3, r4
 801be6a:	b29a      	uxth	r2, r3
 801be6c:	4b65      	ldr	r3, [pc, #404]	; (801c004 <tcp_receive+0xb08>)
 801be6e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801be70:	4b64      	ldr	r3, [pc, #400]	; (801c004 <tcp_receive+0xb08>)
 801be72:	881b      	ldrh	r3, [r3, #0]
 801be74:	461a      	mov	r2, r3
 801be76:	4b64      	ldr	r3, [pc, #400]	; (801c008 <tcp_receive+0xb0c>)
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	441a      	add	r2, r3
 801be7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be7e:	68db      	ldr	r3, [r3, #12]
 801be80:	685b      	ldr	r3, [r3, #4]
 801be82:	429a      	cmp	r2, r3
 801be84:	d006      	beq.n	801be94 <tcp_receive+0x998>
 801be86:	4b62      	ldr	r3, [pc, #392]	; (801c010 <tcp_receive+0xb14>)
 801be88:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801be8c:	4961      	ldr	r1, [pc, #388]	; (801c014 <tcp_receive+0xb18>)
 801be8e:	4862      	ldr	r0, [pc, #392]	; (801c018 <tcp_receive+0xb1c>)
 801be90:	f003 fe3c 	bl	801fb0c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801be98:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801be9a:	4b5a      	ldr	r3, [pc, #360]	; (801c004 <tcp_receive+0xb08>)
 801be9c:	881b      	ldrh	r3, [r3, #0]
 801be9e:	461a      	mov	r2, r3
 801bea0:	4b59      	ldr	r3, [pc, #356]	; (801c008 <tcp_receive+0xb0c>)
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	441a      	add	r2, r3
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801beae:	4b55      	ldr	r3, [pc, #340]	; (801c004 <tcp_receive+0xb08>)
 801beb0:	881b      	ldrh	r3, [r3, #0]
 801beb2:	429a      	cmp	r2, r3
 801beb4:	d206      	bcs.n	801bec4 <tcp_receive+0x9c8>
 801beb6:	4b56      	ldr	r3, [pc, #344]	; (801c010 <tcp_receive+0xb14>)
 801beb8:	f240 6207 	movw	r2, #1543	; 0x607
 801bebc:	4957      	ldr	r1, [pc, #348]	; (801c01c <tcp_receive+0xb20>)
 801bebe:	4856      	ldr	r0, [pc, #344]	; (801c018 <tcp_receive+0xb1c>)
 801bec0:	f003 fe24 	bl	801fb0c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bec8:	4b4e      	ldr	r3, [pc, #312]	; (801c004 <tcp_receive+0xb08>)
 801beca:	881b      	ldrh	r3, [r3, #0]
 801becc:	1ad3      	subs	r3, r2, r3
 801bece:	b29a      	uxth	r2, r3
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801bed4:	6878      	ldr	r0, [r7, #4]
 801bed6:	f7fc fead 	bl	8018c34 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801beda:	4b4c      	ldr	r3, [pc, #304]	; (801c00c <tcp_receive+0xb10>)
 801bedc:	685b      	ldr	r3, [r3, #4]
 801bede:	891b      	ldrh	r3, [r3, #8]
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d006      	beq.n	801bef2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801bee4:	4b49      	ldr	r3, [pc, #292]	; (801c00c <tcp_receive+0xb10>)
 801bee6:	685b      	ldr	r3, [r3, #4]
 801bee8:	4a4d      	ldr	r2, [pc, #308]	; (801c020 <tcp_receive+0xb24>)
 801beea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801beec:	4b47      	ldr	r3, [pc, #284]	; (801c00c <tcp_receive+0xb10>)
 801beee:	2200      	movs	r2, #0
 801bef0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801bef2:	4b46      	ldr	r3, [pc, #280]	; (801c00c <tcp_receive+0xb10>)
 801bef4:	68db      	ldr	r3, [r3, #12]
 801bef6:	899b      	ldrh	r3, [r3, #12]
 801bef8:	b29b      	uxth	r3, r3
 801befa:	4618      	mov	r0, r3
 801befc:	f7f7 fd86 	bl	8013a0c <lwip_htons>
 801bf00:	4603      	mov	r3, r0
 801bf02:	b2db      	uxtb	r3, r3
 801bf04:	f003 0301 	and.w	r3, r3, #1
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	f000 80b8 	beq.w	801c07e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801bf0e:	4b45      	ldr	r3, [pc, #276]	; (801c024 <tcp_receive+0xb28>)
 801bf10:	781b      	ldrb	r3, [r3, #0]
 801bf12:	f043 0320 	orr.w	r3, r3, #32
 801bf16:	b2da      	uxtb	r2, r3
 801bf18:	4b42      	ldr	r3, [pc, #264]	; (801c024 <tcp_receive+0xb28>)
 801bf1a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801bf1c:	e0af      	b.n	801c07e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bf22:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bf28:	68db      	ldr	r3, [r3, #12]
 801bf2a:	685b      	ldr	r3, [r3, #4]
 801bf2c:	4a36      	ldr	r2, [pc, #216]	; (801c008 <tcp_receive+0xb0c>)
 801bf2e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801bf30:	68bb      	ldr	r3, [r7, #8]
 801bf32:	891b      	ldrh	r3, [r3, #8]
 801bf34:	461c      	mov	r4, r3
 801bf36:	68bb      	ldr	r3, [r7, #8]
 801bf38:	68db      	ldr	r3, [r3, #12]
 801bf3a:	899b      	ldrh	r3, [r3, #12]
 801bf3c:	b29b      	uxth	r3, r3
 801bf3e:	4618      	mov	r0, r3
 801bf40:	f7f7 fd64 	bl	8013a0c <lwip_htons>
 801bf44:	4603      	mov	r3, r0
 801bf46:	b2db      	uxtb	r3, r3
 801bf48:	f003 0303 	and.w	r3, r3, #3
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d001      	beq.n	801bf54 <tcp_receive+0xa58>
 801bf50:	2301      	movs	r3, #1
 801bf52:	e000      	b.n	801bf56 <tcp_receive+0xa5a>
 801bf54:	2300      	movs	r3, #0
 801bf56:	191a      	adds	r2, r3, r4
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf5c:	441a      	add	r2, r3
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bf66:	461c      	mov	r4, r3
 801bf68:	68bb      	ldr	r3, [r7, #8]
 801bf6a:	891b      	ldrh	r3, [r3, #8]
 801bf6c:	461d      	mov	r5, r3
 801bf6e:	68bb      	ldr	r3, [r7, #8]
 801bf70:	68db      	ldr	r3, [r3, #12]
 801bf72:	899b      	ldrh	r3, [r3, #12]
 801bf74:	b29b      	uxth	r3, r3
 801bf76:	4618      	mov	r0, r3
 801bf78:	f7f7 fd48 	bl	8013a0c <lwip_htons>
 801bf7c:	4603      	mov	r3, r0
 801bf7e:	b2db      	uxtb	r3, r3
 801bf80:	f003 0303 	and.w	r3, r3, #3
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d001      	beq.n	801bf8c <tcp_receive+0xa90>
 801bf88:	2301      	movs	r3, #1
 801bf8a:	e000      	b.n	801bf8e <tcp_receive+0xa92>
 801bf8c:	2300      	movs	r3, #0
 801bf8e:	442b      	add	r3, r5
 801bf90:	429c      	cmp	r4, r3
 801bf92:	d206      	bcs.n	801bfa2 <tcp_receive+0xaa6>
 801bf94:	4b1e      	ldr	r3, [pc, #120]	; (801c010 <tcp_receive+0xb14>)
 801bf96:	f240 622b 	movw	r2, #1579	; 0x62b
 801bf9a:	4923      	ldr	r1, [pc, #140]	; (801c028 <tcp_receive+0xb2c>)
 801bf9c:	481e      	ldr	r0, [pc, #120]	; (801c018 <tcp_receive+0xb1c>)
 801bf9e:	f003 fdb5 	bl	801fb0c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801bfa2:	68bb      	ldr	r3, [r7, #8]
 801bfa4:	891b      	ldrh	r3, [r3, #8]
 801bfa6:	461c      	mov	r4, r3
 801bfa8:	68bb      	ldr	r3, [r7, #8]
 801bfaa:	68db      	ldr	r3, [r3, #12]
 801bfac:	899b      	ldrh	r3, [r3, #12]
 801bfae:	b29b      	uxth	r3, r3
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f7f7 fd2b 	bl	8013a0c <lwip_htons>
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	b2db      	uxtb	r3, r3
 801bfba:	f003 0303 	and.w	r3, r3, #3
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d001      	beq.n	801bfc6 <tcp_receive+0xaca>
 801bfc2:	2301      	movs	r3, #1
 801bfc4:	e000      	b.n	801bfc8 <tcp_receive+0xacc>
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	1919      	adds	r1, r3, r4
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bfce:	b28b      	uxth	r3, r1
 801bfd0:	1ad3      	subs	r3, r2, r3
 801bfd2:	b29a      	uxth	r2, r3
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801bfd8:	6878      	ldr	r0, [r7, #4]
 801bfda:	f7fc fe2b 	bl	8018c34 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801bfde:	68bb      	ldr	r3, [r7, #8]
 801bfe0:	685b      	ldr	r3, [r3, #4]
 801bfe2:	891b      	ldrh	r3, [r3, #8]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d028      	beq.n	801c03a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801bfe8:	4b0d      	ldr	r3, [pc, #52]	; (801c020 <tcp_receive+0xb24>)
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d01d      	beq.n	801c02c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801bff0:	4b0b      	ldr	r3, [pc, #44]	; (801c020 <tcp_receive+0xb24>)
 801bff2:	681a      	ldr	r2, [r3, #0]
 801bff4:	68bb      	ldr	r3, [r7, #8]
 801bff6:	685b      	ldr	r3, [r3, #4]
 801bff8:	4619      	mov	r1, r3
 801bffa:	4610      	mov	r0, r2
 801bffc:	f7fb fda8 	bl	8017b50 <pbuf_cat>
 801c000:	e018      	b.n	801c034 <tcp_receive+0xb38>
 801c002:	bf00      	nop
 801c004:	2400f962 	.word	0x2400f962
 801c008:	2400f958 	.word	0x2400f958
 801c00c:	2400f938 	.word	0x2400f938
 801c010:	08023098 	.word	0x08023098
 801c014:	080234bc 	.word	0x080234bc
 801c018:	08023128 	.word	0x08023128
 801c01c:	080234f8 	.word	0x080234f8
 801c020:	2400f968 	.word	0x2400f968
 801c024:	2400f965 	.word	0x2400f965
 801c028:	08023518 	.word	0x08023518
            } else {
              recv_data = cseg->p;
 801c02c:	68bb      	ldr	r3, [r7, #8]
 801c02e:	685b      	ldr	r3, [r3, #4]
 801c030:	4a70      	ldr	r2, [pc, #448]	; (801c1f4 <tcp_receive+0xcf8>)
 801c032:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801c034:	68bb      	ldr	r3, [r7, #8]
 801c036:	2200      	movs	r2, #0
 801c038:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c03a:	68bb      	ldr	r3, [r7, #8]
 801c03c:	68db      	ldr	r3, [r3, #12]
 801c03e:	899b      	ldrh	r3, [r3, #12]
 801c040:	b29b      	uxth	r3, r3
 801c042:	4618      	mov	r0, r3
 801c044:	f7f7 fce2 	bl	8013a0c <lwip_htons>
 801c048:	4603      	mov	r3, r0
 801c04a:	b2db      	uxtb	r3, r3
 801c04c:	f003 0301 	and.w	r3, r3, #1
 801c050:	2b00      	cmp	r3, #0
 801c052:	d00d      	beq.n	801c070 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801c054:	4b68      	ldr	r3, [pc, #416]	; (801c1f8 <tcp_receive+0xcfc>)
 801c056:	781b      	ldrb	r3, [r3, #0]
 801c058:	f043 0320 	orr.w	r3, r3, #32
 801c05c:	b2da      	uxtb	r2, r3
 801c05e:	4b66      	ldr	r3, [pc, #408]	; (801c1f8 <tcp_receive+0xcfc>)
 801c060:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	7d1b      	ldrb	r3, [r3, #20]
 801c066:	2b04      	cmp	r3, #4
 801c068:	d102      	bne.n	801c070 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	2207      	movs	r2, #7
 801c06e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801c070:	68bb      	ldr	r3, [r7, #8]
 801c072:	681a      	ldr	r2, [r3, #0]
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801c078:	68b8      	ldr	r0, [r7, #8]
 801c07a:	f7fd fb04 	bl	8019686 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c082:	2b00      	cmp	r3, #0
 801c084:	d008      	beq.n	801c098 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c08a:	68db      	ldr	r3, [r3, #12]
 801c08c:	685a      	ldr	r2, [r3, #4]
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801c092:	429a      	cmp	r2, r3
 801c094:	f43f af43 	beq.w	801bf1e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	8b5b      	ldrh	r3, [r3, #26]
 801c09c:	f003 0301 	and.w	r3, r3, #1
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d00e      	beq.n	801c0c2 <tcp_receive+0xbc6>
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	8b5b      	ldrh	r3, [r3, #26]
 801c0a8:	f023 0301 	bic.w	r3, r3, #1
 801c0ac:	b29a      	uxth	r2, r3
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	835a      	strh	r2, [r3, #26]
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	8b5b      	ldrh	r3, [r3, #26]
 801c0b6:	f043 0302 	orr.w	r3, r3, #2
 801c0ba:	b29a      	uxth	r2, r3
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801c0c0:	e188      	b.n	801c3d4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	8b5b      	ldrh	r3, [r3, #26]
 801c0c6:	f043 0301 	orr.w	r3, r3, #1
 801c0ca:	b29a      	uxth	r2, r3
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801c0d0:	e180      	b.n	801c3d4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d106      	bne.n	801c0e8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801c0da:	4848      	ldr	r0, [pc, #288]	; (801c1fc <tcp_receive+0xd00>)
 801c0dc:	f7fd faec 	bl	80196b8 <tcp_seg_copy>
 801c0e0:	4602      	mov	r2, r0
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	675a      	str	r2, [r3, #116]	; 0x74
 801c0e6:	e16d      	b.n	801c3c4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801c0e8:	2300      	movs	r3, #0
 801c0ea:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c0f0:	63bb      	str	r3, [r7, #56]	; 0x38
 801c0f2:	e157      	b.n	801c3a4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801c0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0f6:	68db      	ldr	r3, [r3, #12]
 801c0f8:	685a      	ldr	r2, [r3, #4]
 801c0fa:	4b41      	ldr	r3, [pc, #260]	; (801c200 <tcp_receive+0xd04>)
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	429a      	cmp	r2, r3
 801c100:	d11d      	bne.n	801c13e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801c102:	4b3e      	ldr	r3, [pc, #248]	; (801c1fc <tcp_receive+0xd00>)
 801c104:	891a      	ldrh	r2, [r3, #8]
 801c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c108:	891b      	ldrh	r3, [r3, #8]
 801c10a:	429a      	cmp	r2, r3
 801c10c:	f240 814f 	bls.w	801c3ae <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c110:	483a      	ldr	r0, [pc, #232]	; (801c1fc <tcp_receive+0xd00>)
 801c112:	f7fd fad1 	bl	80196b8 <tcp_seg_copy>
 801c116:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801c118:	697b      	ldr	r3, [r7, #20]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	f000 8149 	beq.w	801c3b2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801c120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c122:	2b00      	cmp	r3, #0
 801c124:	d003      	beq.n	801c12e <tcp_receive+0xc32>
                    prev->next = cseg;
 801c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c128:	697a      	ldr	r2, [r7, #20]
 801c12a:	601a      	str	r2, [r3, #0]
 801c12c:	e002      	b.n	801c134 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	697a      	ldr	r2, [r7, #20]
 801c132:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801c134:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c136:	6978      	ldr	r0, [r7, #20]
 801c138:	f7ff f8dc 	bl	801b2f4 <tcp_oos_insert_segment>
                }
                break;
 801c13c:	e139      	b.n	801c3b2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801c13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c140:	2b00      	cmp	r3, #0
 801c142:	d117      	bne.n	801c174 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801c144:	4b2e      	ldr	r3, [pc, #184]	; (801c200 <tcp_receive+0xd04>)
 801c146:	681a      	ldr	r2, [r3, #0]
 801c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c14a:	68db      	ldr	r3, [r3, #12]
 801c14c:	685b      	ldr	r3, [r3, #4]
 801c14e:	1ad3      	subs	r3, r2, r3
 801c150:	2b00      	cmp	r3, #0
 801c152:	da57      	bge.n	801c204 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c154:	4829      	ldr	r0, [pc, #164]	; (801c1fc <tcp_receive+0xd00>)
 801c156:	f7fd faaf 	bl	80196b8 <tcp_seg_copy>
 801c15a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801c15c:	69bb      	ldr	r3, [r7, #24]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	f000 8129 	beq.w	801c3b6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	69ba      	ldr	r2, [r7, #24]
 801c168:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801c16a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c16c:	69b8      	ldr	r0, [r7, #24]
 801c16e:	f7ff f8c1 	bl	801b2f4 <tcp_oos_insert_segment>
                  }
                  break;
 801c172:	e120      	b.n	801c3b6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801c174:	4b22      	ldr	r3, [pc, #136]	; (801c200 <tcp_receive+0xd04>)
 801c176:	681a      	ldr	r2, [r3, #0]
 801c178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c17a:	68db      	ldr	r3, [r3, #12]
 801c17c:	685b      	ldr	r3, [r3, #4]
 801c17e:	1ad3      	subs	r3, r2, r3
 801c180:	3b01      	subs	r3, #1
 801c182:	2b00      	cmp	r3, #0
 801c184:	db3e      	blt.n	801c204 <tcp_receive+0xd08>
 801c186:	4b1e      	ldr	r3, [pc, #120]	; (801c200 <tcp_receive+0xd04>)
 801c188:	681a      	ldr	r2, [r3, #0]
 801c18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c18c:	68db      	ldr	r3, [r3, #12]
 801c18e:	685b      	ldr	r3, [r3, #4]
 801c190:	1ad3      	subs	r3, r2, r3
 801c192:	3301      	adds	r3, #1
 801c194:	2b00      	cmp	r3, #0
 801c196:	dc35      	bgt.n	801c204 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c198:	4818      	ldr	r0, [pc, #96]	; (801c1fc <tcp_receive+0xd00>)
 801c19a:	f7fd fa8d 	bl	80196b8 <tcp_seg_copy>
 801c19e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801c1a0:	69fb      	ldr	r3, [r7, #28]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	f000 8109 	beq.w	801c3ba <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801c1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1aa:	68db      	ldr	r3, [r3, #12]
 801c1ac:	685b      	ldr	r3, [r3, #4]
 801c1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c1b0:	8912      	ldrh	r2, [r2, #8]
 801c1b2:	441a      	add	r2, r3
 801c1b4:	4b12      	ldr	r3, [pc, #72]	; (801c200 <tcp_receive+0xd04>)
 801c1b6:	681b      	ldr	r3, [r3, #0]
 801c1b8:	1ad3      	subs	r3, r2, r3
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	dd12      	ble.n	801c1e4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801c1be:	4b10      	ldr	r3, [pc, #64]	; (801c200 <tcp_receive+0xd04>)
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	b29a      	uxth	r2, r3
 801c1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1c6:	68db      	ldr	r3, [r3, #12]
 801c1c8:	685b      	ldr	r3, [r3, #4]
 801c1ca:	b29b      	uxth	r3, r3
 801c1cc:	1ad3      	subs	r3, r2, r3
 801c1ce:	b29a      	uxth	r2, r3
 801c1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1d2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801c1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1d6:	685a      	ldr	r2, [r3, #4]
 801c1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1da:	891b      	ldrh	r3, [r3, #8]
 801c1dc:	4619      	mov	r1, r3
 801c1de:	4610      	mov	r0, r2
 801c1e0:	f7fb fa64 	bl	80176ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 801c1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1e6:	69fa      	ldr	r2, [r7, #28]
 801c1e8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801c1ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c1ec:	69f8      	ldr	r0, [r7, #28]
 801c1ee:	f7ff f881 	bl	801b2f4 <tcp_oos_insert_segment>
                  }
                  break;
 801c1f2:	e0e2      	b.n	801c3ba <tcp_receive+0xebe>
 801c1f4:	2400f968 	.word	0x2400f968
 801c1f8:	2400f965 	.word	0x2400f965
 801c1fc:	2400f938 	.word	0x2400f938
 801c200:	2400f958 	.word	0x2400f958
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801c204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c206:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801c208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	f040 80c6 	bne.w	801c39e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801c212:	4b80      	ldr	r3, [pc, #512]	; (801c414 <tcp_receive+0xf18>)
 801c214:	681a      	ldr	r2, [r3, #0]
 801c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c218:	68db      	ldr	r3, [r3, #12]
 801c21a:	685b      	ldr	r3, [r3, #4]
 801c21c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801c21e:	2b00      	cmp	r3, #0
 801c220:	f340 80bd 	ble.w	801c39e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c226:	68db      	ldr	r3, [r3, #12]
 801c228:	899b      	ldrh	r3, [r3, #12]
 801c22a:	b29b      	uxth	r3, r3
 801c22c:	4618      	mov	r0, r3
 801c22e:	f7f7 fbed 	bl	8013a0c <lwip_htons>
 801c232:	4603      	mov	r3, r0
 801c234:	b2db      	uxtb	r3, r3
 801c236:	f003 0301 	and.w	r3, r3, #1
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	f040 80bf 	bne.w	801c3be <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801c240:	4875      	ldr	r0, [pc, #468]	; (801c418 <tcp_receive+0xf1c>)
 801c242:	f7fd fa39 	bl	80196b8 <tcp_seg_copy>
 801c246:	4602      	mov	r2, r0
 801c248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c24a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801c24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	2b00      	cmp	r3, #0
 801c252:	f000 80b6 	beq.w	801c3c2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801c256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c258:	68db      	ldr	r3, [r3, #12]
 801c25a:	685b      	ldr	r3, [r3, #4]
 801c25c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c25e:	8912      	ldrh	r2, [r2, #8]
 801c260:	441a      	add	r2, r3
 801c262:	4b6c      	ldr	r3, [pc, #432]	; (801c414 <tcp_receive+0xf18>)
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	1ad3      	subs	r3, r2, r3
 801c268:	2b00      	cmp	r3, #0
 801c26a:	dd12      	ble.n	801c292 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801c26c:	4b69      	ldr	r3, [pc, #420]	; (801c414 <tcp_receive+0xf18>)
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	b29a      	uxth	r2, r3
 801c272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c274:	68db      	ldr	r3, [r3, #12]
 801c276:	685b      	ldr	r3, [r3, #4]
 801c278:	b29b      	uxth	r3, r3
 801c27a:	1ad3      	subs	r3, r2, r3
 801c27c:	b29a      	uxth	r2, r3
 801c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c280:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801c282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c284:	685a      	ldr	r2, [r3, #4]
 801c286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c288:	891b      	ldrh	r3, [r3, #8]
 801c28a:	4619      	mov	r1, r3
 801c28c:	4610      	mov	r0, r2
 801c28e:	f7fb fa0d 	bl	80176ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801c292:	4b62      	ldr	r3, [pc, #392]	; (801c41c <tcp_receive+0xf20>)
 801c294:	881b      	ldrh	r3, [r3, #0]
 801c296:	461a      	mov	r2, r3
 801c298:	4b5e      	ldr	r3, [pc, #376]	; (801c414 <tcp_receive+0xf18>)
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	441a      	add	r2, r3
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2a2:	6879      	ldr	r1, [r7, #4]
 801c2a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c2a6:	440b      	add	r3, r1
 801c2a8:	1ad3      	subs	r3, r2, r3
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	f340 8089 	ble.w	801c3c2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	68db      	ldr	r3, [r3, #12]
 801c2b6:	899b      	ldrh	r3, [r3, #12]
 801c2b8:	b29b      	uxth	r3, r3
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	f7f7 fba6 	bl	8013a0c <lwip_htons>
 801c2c0:	4603      	mov	r3, r0
 801c2c2:	b2db      	uxtb	r3, r3
 801c2c4:	f003 0301 	and.w	r3, r3, #1
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d022      	beq.n	801c312 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801c2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	68db      	ldr	r3, [r3, #12]
 801c2d2:	899b      	ldrh	r3, [r3, #12]
 801c2d4:	b29b      	uxth	r3, r3
 801c2d6:	b21b      	sxth	r3, r3
 801c2d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c2dc:	b21c      	sxth	r4, r3
 801c2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2e0:	681b      	ldr	r3, [r3, #0]
 801c2e2:	68db      	ldr	r3, [r3, #12]
 801c2e4:	899b      	ldrh	r3, [r3, #12]
 801c2e6:	b29b      	uxth	r3, r3
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	f7f7 fb8f 	bl	8013a0c <lwip_htons>
 801c2ee:	4603      	mov	r3, r0
 801c2f0:	b2db      	uxtb	r3, r3
 801c2f2:	b29b      	uxth	r3, r3
 801c2f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c2f8:	b29b      	uxth	r3, r3
 801c2fa:	4618      	mov	r0, r3
 801c2fc:	f7f7 fb86 	bl	8013a0c <lwip_htons>
 801c300:	4603      	mov	r3, r0
 801c302:	b21b      	sxth	r3, r3
 801c304:	4323      	orrs	r3, r4
 801c306:	b21a      	sxth	r2, r3
 801c308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	68db      	ldr	r3, [r3, #12]
 801c30e:	b292      	uxth	r2, r2
 801c310:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c316:	b29a      	uxth	r2, r3
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c31c:	4413      	add	r3, r2
 801c31e:	b299      	uxth	r1, r3
 801c320:	4b3c      	ldr	r3, [pc, #240]	; (801c414 <tcp_receive+0xf18>)
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	b29a      	uxth	r2, r3
 801c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	1a8a      	subs	r2, r1, r2
 801c32c:	b292      	uxth	r2, r2
 801c32e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801c330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	685a      	ldr	r2, [r3, #4]
 801c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	891b      	ldrh	r3, [r3, #8]
 801c33c:	4619      	mov	r1, r3
 801c33e:	4610      	mov	r0, r2
 801c340:	f7fb f9b4 	bl	80176ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	891c      	ldrh	r4, [r3, #8]
 801c34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	68db      	ldr	r3, [r3, #12]
 801c350:	899b      	ldrh	r3, [r3, #12]
 801c352:	b29b      	uxth	r3, r3
 801c354:	4618      	mov	r0, r3
 801c356:	f7f7 fb59 	bl	8013a0c <lwip_htons>
 801c35a:	4603      	mov	r3, r0
 801c35c:	b2db      	uxtb	r3, r3
 801c35e:	f003 0303 	and.w	r3, r3, #3
 801c362:	2b00      	cmp	r3, #0
 801c364:	d001      	beq.n	801c36a <tcp_receive+0xe6e>
 801c366:	2301      	movs	r3, #1
 801c368:	e000      	b.n	801c36c <tcp_receive+0xe70>
 801c36a:	2300      	movs	r3, #0
 801c36c:	4423      	add	r3, r4
 801c36e:	b29a      	uxth	r2, r3
 801c370:	4b2a      	ldr	r3, [pc, #168]	; (801c41c <tcp_receive+0xf20>)
 801c372:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c374:	4b29      	ldr	r3, [pc, #164]	; (801c41c <tcp_receive+0xf20>)
 801c376:	881b      	ldrh	r3, [r3, #0]
 801c378:	461a      	mov	r2, r3
 801c37a:	4b26      	ldr	r3, [pc, #152]	; (801c414 <tcp_receive+0xf18>)
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	441a      	add	r2, r3
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c384:	6879      	ldr	r1, [r7, #4]
 801c386:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c388:	440b      	add	r3, r1
 801c38a:	429a      	cmp	r2, r3
 801c38c:	d019      	beq.n	801c3c2 <tcp_receive+0xec6>
 801c38e:	4b24      	ldr	r3, [pc, #144]	; (801c420 <tcp_receive+0xf24>)
 801c390:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801c394:	4923      	ldr	r1, [pc, #140]	; (801c424 <tcp_receive+0xf28>)
 801c396:	4824      	ldr	r0, [pc, #144]	; (801c428 <tcp_receive+0xf2c>)
 801c398:	f003 fbb8 	bl	801fb0c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801c39c:	e011      	b.n	801c3c2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801c39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	63bb      	str	r3, [r7, #56]	; 0x38
 801c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	f47f aea4 	bne.w	801c0f4 <tcp_receive+0xbf8>
 801c3ac:	e00a      	b.n	801c3c4 <tcp_receive+0xec8>
                break;
 801c3ae:	bf00      	nop
 801c3b0:	e008      	b.n	801c3c4 <tcp_receive+0xec8>
                break;
 801c3b2:	bf00      	nop
 801c3b4:	e006      	b.n	801c3c4 <tcp_receive+0xec8>
                  break;
 801c3b6:	bf00      	nop
 801c3b8:	e004      	b.n	801c3c4 <tcp_receive+0xec8>
                  break;
 801c3ba:	bf00      	nop
 801c3bc:	e002      	b.n	801c3c4 <tcp_receive+0xec8>
                  break;
 801c3be:	bf00      	nop
 801c3c0:	e000      	b.n	801c3c4 <tcp_receive+0xec8>
                break;
 801c3c2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801c3c4:	6878      	ldr	r0, [r7, #4]
 801c3c6:	f001 fe8b 	bl	801e0e0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801c3ca:	e003      	b.n	801c3d4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801c3cc:	6878      	ldr	r0, [r7, #4]
 801c3ce:	f001 fe87 	bl	801e0e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c3d2:	e01a      	b.n	801c40a <tcp_receive+0xf0e>
 801c3d4:	e019      	b.n	801c40a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801c3d6:	4b0f      	ldr	r3, [pc, #60]	; (801c414 <tcp_receive+0xf18>)
 801c3d8:	681a      	ldr	r2, [r3, #0]
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3de:	1ad3      	subs	r3, r2, r3
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	db0a      	blt.n	801c3fa <tcp_receive+0xefe>
 801c3e4:	4b0b      	ldr	r3, [pc, #44]	; (801c414 <tcp_receive+0xf18>)
 801c3e6:	681a      	ldr	r2, [r3, #0]
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3ec:	6879      	ldr	r1, [r7, #4]
 801c3ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c3f0:	440b      	add	r3, r1
 801c3f2:	1ad3      	subs	r3, r2, r3
 801c3f4:	3301      	adds	r3, #1
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	dd07      	ble.n	801c40a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	8b5b      	ldrh	r3, [r3, #26]
 801c3fe:	f043 0302 	orr.w	r3, r3, #2
 801c402:	b29a      	uxth	r2, r3
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801c408:	e7ff      	b.n	801c40a <tcp_receive+0xf0e>
 801c40a:	bf00      	nop
 801c40c:	3750      	adds	r7, #80	; 0x50
 801c40e:	46bd      	mov	sp, r7
 801c410:	bdb0      	pop	{r4, r5, r7, pc}
 801c412:	bf00      	nop
 801c414:	2400f958 	.word	0x2400f958
 801c418:	2400f938 	.word	0x2400f938
 801c41c:	2400f962 	.word	0x2400f962
 801c420:	08023098 	.word	0x08023098
 801c424:	08023484 	.word	0x08023484
 801c428:	08023128 	.word	0x08023128

0801c42c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801c42c:	b480      	push	{r7}
 801c42e:	b083      	sub	sp, #12
 801c430:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801c432:	4b15      	ldr	r3, [pc, #84]	; (801c488 <tcp_get_next_optbyte+0x5c>)
 801c434:	881b      	ldrh	r3, [r3, #0]
 801c436:	1c5a      	adds	r2, r3, #1
 801c438:	b291      	uxth	r1, r2
 801c43a:	4a13      	ldr	r2, [pc, #76]	; (801c488 <tcp_get_next_optbyte+0x5c>)
 801c43c:	8011      	strh	r1, [r2, #0]
 801c43e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c440:	4b12      	ldr	r3, [pc, #72]	; (801c48c <tcp_get_next_optbyte+0x60>)
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	2b00      	cmp	r3, #0
 801c446:	d004      	beq.n	801c452 <tcp_get_next_optbyte+0x26>
 801c448:	4b11      	ldr	r3, [pc, #68]	; (801c490 <tcp_get_next_optbyte+0x64>)
 801c44a:	881b      	ldrh	r3, [r3, #0]
 801c44c:	88fa      	ldrh	r2, [r7, #6]
 801c44e:	429a      	cmp	r2, r3
 801c450:	d208      	bcs.n	801c464 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801c452:	4b10      	ldr	r3, [pc, #64]	; (801c494 <tcp_get_next_optbyte+0x68>)
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	3314      	adds	r3, #20
 801c458:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801c45a:	88fb      	ldrh	r3, [r7, #6]
 801c45c:	683a      	ldr	r2, [r7, #0]
 801c45e:	4413      	add	r3, r2
 801c460:	781b      	ldrb	r3, [r3, #0]
 801c462:	e00b      	b.n	801c47c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c464:	88fb      	ldrh	r3, [r7, #6]
 801c466:	b2da      	uxtb	r2, r3
 801c468:	4b09      	ldr	r3, [pc, #36]	; (801c490 <tcp_get_next_optbyte+0x64>)
 801c46a:	881b      	ldrh	r3, [r3, #0]
 801c46c:	b2db      	uxtb	r3, r3
 801c46e:	1ad3      	subs	r3, r2, r3
 801c470:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801c472:	4b06      	ldr	r3, [pc, #24]	; (801c48c <tcp_get_next_optbyte+0x60>)
 801c474:	681a      	ldr	r2, [r3, #0]
 801c476:	797b      	ldrb	r3, [r7, #5]
 801c478:	4413      	add	r3, r2
 801c47a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c47c:	4618      	mov	r0, r3
 801c47e:	370c      	adds	r7, #12
 801c480:	46bd      	mov	sp, r7
 801c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c486:	4770      	bx	lr
 801c488:	2400f954 	.word	0x2400f954
 801c48c:	2400f950 	.word	0x2400f950
 801c490:	2400f94e 	.word	0x2400f94e
 801c494:	2400f948 	.word	0x2400f948

0801c498 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801c498:	b580      	push	{r7, lr}
 801c49a:	b084      	sub	sp, #16
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d106      	bne.n	801c4b4 <tcp_parseopt+0x1c>
 801c4a6:	4b32      	ldr	r3, [pc, #200]	; (801c570 <tcp_parseopt+0xd8>)
 801c4a8:	f240 727d 	movw	r2, #1917	; 0x77d
 801c4ac:	4931      	ldr	r1, [pc, #196]	; (801c574 <tcp_parseopt+0xdc>)
 801c4ae:	4832      	ldr	r0, [pc, #200]	; (801c578 <tcp_parseopt+0xe0>)
 801c4b0:	f003 fb2c 	bl	801fb0c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801c4b4:	4b31      	ldr	r3, [pc, #196]	; (801c57c <tcp_parseopt+0xe4>)
 801c4b6:	881b      	ldrh	r3, [r3, #0]
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d056      	beq.n	801c56a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c4bc:	4b30      	ldr	r3, [pc, #192]	; (801c580 <tcp_parseopt+0xe8>)
 801c4be:	2200      	movs	r2, #0
 801c4c0:	801a      	strh	r2, [r3, #0]
 801c4c2:	e046      	b.n	801c552 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801c4c4:	f7ff ffb2 	bl	801c42c <tcp_get_next_optbyte>
 801c4c8:	4603      	mov	r3, r0
 801c4ca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801c4cc:	7bfb      	ldrb	r3, [r7, #15]
 801c4ce:	2b02      	cmp	r3, #2
 801c4d0:	d006      	beq.n	801c4e0 <tcp_parseopt+0x48>
 801c4d2:	2b02      	cmp	r3, #2
 801c4d4:	dc2c      	bgt.n	801c530 <tcp_parseopt+0x98>
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d042      	beq.n	801c560 <tcp_parseopt+0xc8>
 801c4da:	2b01      	cmp	r3, #1
 801c4dc:	d128      	bne.n	801c530 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801c4de:	e038      	b.n	801c552 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801c4e0:	f7ff ffa4 	bl	801c42c <tcp_get_next_optbyte>
 801c4e4:	4603      	mov	r3, r0
 801c4e6:	2b04      	cmp	r3, #4
 801c4e8:	d13c      	bne.n	801c564 <tcp_parseopt+0xcc>
 801c4ea:	4b25      	ldr	r3, [pc, #148]	; (801c580 <tcp_parseopt+0xe8>)
 801c4ec:	881b      	ldrh	r3, [r3, #0]
 801c4ee:	3301      	adds	r3, #1
 801c4f0:	4a22      	ldr	r2, [pc, #136]	; (801c57c <tcp_parseopt+0xe4>)
 801c4f2:	8812      	ldrh	r2, [r2, #0]
 801c4f4:	4293      	cmp	r3, r2
 801c4f6:	da35      	bge.n	801c564 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c4f8:	f7ff ff98 	bl	801c42c <tcp_get_next_optbyte>
 801c4fc:	4603      	mov	r3, r0
 801c4fe:	b29b      	uxth	r3, r3
 801c500:	021b      	lsls	r3, r3, #8
 801c502:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801c504:	f7ff ff92 	bl	801c42c <tcp_get_next_optbyte>
 801c508:	4603      	mov	r3, r0
 801c50a:	b29a      	uxth	r2, r3
 801c50c:	89bb      	ldrh	r3, [r7, #12]
 801c50e:	4313      	orrs	r3, r2
 801c510:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801c512:	89bb      	ldrh	r3, [r7, #12]
 801c514:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801c518:	4293      	cmp	r3, r2
 801c51a:	d804      	bhi.n	801c526 <tcp_parseopt+0x8e>
 801c51c:	89bb      	ldrh	r3, [r7, #12]
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d001      	beq.n	801c526 <tcp_parseopt+0x8e>
 801c522:	89ba      	ldrh	r2, [r7, #12]
 801c524:	e001      	b.n	801c52a <tcp_parseopt+0x92>
 801c526:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801c52e:	e010      	b.n	801c552 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801c530:	f7ff ff7c 	bl	801c42c <tcp_get_next_optbyte>
 801c534:	4603      	mov	r3, r0
 801c536:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801c538:	7afb      	ldrb	r3, [r7, #11]
 801c53a:	2b01      	cmp	r3, #1
 801c53c:	d914      	bls.n	801c568 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801c53e:	7afb      	ldrb	r3, [r7, #11]
 801c540:	b29a      	uxth	r2, r3
 801c542:	4b0f      	ldr	r3, [pc, #60]	; (801c580 <tcp_parseopt+0xe8>)
 801c544:	881b      	ldrh	r3, [r3, #0]
 801c546:	4413      	add	r3, r2
 801c548:	b29b      	uxth	r3, r3
 801c54a:	3b02      	subs	r3, #2
 801c54c:	b29a      	uxth	r2, r3
 801c54e:	4b0c      	ldr	r3, [pc, #48]	; (801c580 <tcp_parseopt+0xe8>)
 801c550:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c552:	4b0b      	ldr	r3, [pc, #44]	; (801c580 <tcp_parseopt+0xe8>)
 801c554:	881a      	ldrh	r2, [r3, #0]
 801c556:	4b09      	ldr	r3, [pc, #36]	; (801c57c <tcp_parseopt+0xe4>)
 801c558:	881b      	ldrh	r3, [r3, #0]
 801c55a:	429a      	cmp	r2, r3
 801c55c:	d3b2      	bcc.n	801c4c4 <tcp_parseopt+0x2c>
 801c55e:	e004      	b.n	801c56a <tcp_parseopt+0xd2>
          return;
 801c560:	bf00      	nop
 801c562:	e002      	b.n	801c56a <tcp_parseopt+0xd2>
            return;
 801c564:	bf00      	nop
 801c566:	e000      	b.n	801c56a <tcp_parseopt+0xd2>
            return;
 801c568:	bf00      	nop
      }
    }
  }
}
 801c56a:	3710      	adds	r7, #16
 801c56c:	46bd      	mov	sp, r7
 801c56e:	bd80      	pop	{r7, pc}
 801c570:	08023098 	.word	0x08023098
 801c574:	08023540 	.word	0x08023540
 801c578:	08023128 	.word	0x08023128
 801c57c:	2400f94c 	.word	0x2400f94c
 801c580:	2400f954 	.word	0x2400f954

0801c584 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801c584:	b480      	push	{r7}
 801c586:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801c588:	4b05      	ldr	r3, [pc, #20]	; (801c5a0 <tcp_trigger_input_pcb_close+0x1c>)
 801c58a:	781b      	ldrb	r3, [r3, #0]
 801c58c:	f043 0310 	orr.w	r3, r3, #16
 801c590:	b2da      	uxtb	r2, r3
 801c592:	4b03      	ldr	r3, [pc, #12]	; (801c5a0 <tcp_trigger_input_pcb_close+0x1c>)
 801c594:	701a      	strb	r2, [r3, #0]
}
 801c596:	bf00      	nop
 801c598:	46bd      	mov	sp, r7
 801c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c59e:	4770      	bx	lr
 801c5a0:	2400f965 	.word	0x2400f965

0801c5a4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801c5a4:	b580      	push	{r7, lr}
 801c5a6:	b084      	sub	sp, #16
 801c5a8:	af00      	add	r7, sp, #0
 801c5aa:	60f8      	str	r0, [r7, #12]
 801c5ac:	60b9      	str	r1, [r7, #8]
 801c5ae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d00a      	beq.n	801c5cc <tcp_route+0x28>
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	7a1b      	ldrb	r3, [r3, #8]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d006      	beq.n	801c5cc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	7a1b      	ldrb	r3, [r3, #8]
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f7fa fe68 	bl	8017298 <netif_get_by_index>
 801c5c8:	4603      	mov	r3, r0
 801c5ca:	e003      	b.n	801c5d4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801c5cc:	6878      	ldr	r0, [r7, #4]
 801c5ce:	f7f8 fcf5 	bl	8014fbc <ip4_route>
 801c5d2:	4603      	mov	r3, r0
  }
}
 801c5d4:	4618      	mov	r0, r3
 801c5d6:	3710      	adds	r7, #16
 801c5d8:	46bd      	mov	sp, r7
 801c5da:	bd80      	pop	{r7, pc}

0801c5dc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801c5dc:	b590      	push	{r4, r7, lr}
 801c5de:	b087      	sub	sp, #28
 801c5e0:	af00      	add	r7, sp, #0
 801c5e2:	60f8      	str	r0, [r7, #12]
 801c5e4:	60b9      	str	r1, [r7, #8]
 801c5e6:	603b      	str	r3, [r7, #0]
 801c5e8:	4613      	mov	r3, r2
 801c5ea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d105      	bne.n	801c5fe <tcp_create_segment+0x22>
 801c5f2:	4b44      	ldr	r3, [pc, #272]	; (801c704 <tcp_create_segment+0x128>)
 801c5f4:	22a3      	movs	r2, #163	; 0xa3
 801c5f6:	4944      	ldr	r1, [pc, #272]	; (801c708 <tcp_create_segment+0x12c>)
 801c5f8:	4844      	ldr	r0, [pc, #272]	; (801c70c <tcp_create_segment+0x130>)
 801c5fa:	f003 fa87 	bl	801fb0c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801c5fe:	68bb      	ldr	r3, [r7, #8]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d105      	bne.n	801c610 <tcp_create_segment+0x34>
 801c604:	4b3f      	ldr	r3, [pc, #252]	; (801c704 <tcp_create_segment+0x128>)
 801c606:	22a4      	movs	r2, #164	; 0xa4
 801c608:	4941      	ldr	r1, [pc, #260]	; (801c710 <tcp_create_segment+0x134>)
 801c60a:	4840      	ldr	r0, [pc, #256]	; (801c70c <tcp_create_segment+0x130>)
 801c60c:	f003 fa7e 	bl	801fb0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c610:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c614:	009b      	lsls	r3, r3, #2
 801c616:	b2db      	uxtb	r3, r3
 801c618:	f003 0304 	and.w	r3, r3, #4
 801c61c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801c61e:	2003      	movs	r0, #3
 801c620:	f7fa fa5e 	bl	8016ae0 <memp_malloc>
 801c624:	6138      	str	r0, [r7, #16]
 801c626:	693b      	ldr	r3, [r7, #16]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d104      	bne.n	801c636 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801c62c:	68b8      	ldr	r0, [r7, #8]
 801c62e:	f7fb f9c1 	bl	80179b4 <pbuf_free>
    return NULL;
 801c632:	2300      	movs	r3, #0
 801c634:	e061      	b.n	801c6fa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801c636:	693b      	ldr	r3, [r7, #16]
 801c638:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801c63c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801c63e:	693b      	ldr	r3, [r7, #16]
 801c640:	2200      	movs	r2, #0
 801c642:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801c644:	693b      	ldr	r3, [r7, #16]
 801c646:	68ba      	ldr	r2, [r7, #8]
 801c648:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801c64a:	68bb      	ldr	r3, [r7, #8]
 801c64c:	891a      	ldrh	r2, [r3, #8]
 801c64e:	7dfb      	ldrb	r3, [r7, #23]
 801c650:	b29b      	uxth	r3, r3
 801c652:	429a      	cmp	r2, r3
 801c654:	d205      	bcs.n	801c662 <tcp_create_segment+0x86>
 801c656:	4b2b      	ldr	r3, [pc, #172]	; (801c704 <tcp_create_segment+0x128>)
 801c658:	22b0      	movs	r2, #176	; 0xb0
 801c65a:	492e      	ldr	r1, [pc, #184]	; (801c714 <tcp_create_segment+0x138>)
 801c65c:	482b      	ldr	r0, [pc, #172]	; (801c70c <tcp_create_segment+0x130>)
 801c65e:	f003 fa55 	bl	801fb0c <iprintf>
  seg->len = p->tot_len - optlen;
 801c662:	68bb      	ldr	r3, [r7, #8]
 801c664:	891a      	ldrh	r2, [r3, #8]
 801c666:	7dfb      	ldrb	r3, [r7, #23]
 801c668:	b29b      	uxth	r3, r3
 801c66a:	1ad3      	subs	r3, r2, r3
 801c66c:	b29a      	uxth	r2, r3
 801c66e:	693b      	ldr	r3, [r7, #16]
 801c670:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801c672:	2114      	movs	r1, #20
 801c674:	68b8      	ldr	r0, [r7, #8]
 801c676:	f7fb f907 	bl	8017888 <pbuf_add_header>
 801c67a:	4603      	mov	r3, r0
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d004      	beq.n	801c68a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801c680:	6938      	ldr	r0, [r7, #16]
 801c682:	f7fd f800 	bl	8019686 <tcp_seg_free>
    return NULL;
 801c686:	2300      	movs	r3, #0
 801c688:	e037      	b.n	801c6fa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801c68a:	693b      	ldr	r3, [r7, #16]
 801c68c:	685b      	ldr	r3, [r3, #4]
 801c68e:	685a      	ldr	r2, [r3, #4]
 801c690:	693b      	ldr	r3, [r7, #16]
 801c692:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	8ada      	ldrh	r2, [r3, #22]
 801c698:	693b      	ldr	r3, [r7, #16]
 801c69a:	68dc      	ldr	r4, [r3, #12]
 801c69c:	4610      	mov	r0, r2
 801c69e:	f7f7 f9b5 	bl	8013a0c <lwip_htons>
 801c6a2:	4603      	mov	r3, r0
 801c6a4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801c6a6:	68fb      	ldr	r3, [r7, #12]
 801c6a8:	8b1a      	ldrh	r2, [r3, #24]
 801c6aa:	693b      	ldr	r3, [r7, #16]
 801c6ac:	68dc      	ldr	r4, [r3, #12]
 801c6ae:	4610      	mov	r0, r2
 801c6b0:	f7f7 f9ac 	bl	8013a0c <lwip_htons>
 801c6b4:	4603      	mov	r3, r0
 801c6b6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801c6b8:	693b      	ldr	r3, [r7, #16]
 801c6ba:	68dc      	ldr	r4, [r3, #12]
 801c6bc:	6838      	ldr	r0, [r7, #0]
 801c6be:	f7f7 f9ba 	bl	8013a36 <lwip_htonl>
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801c6c6:	7dfb      	ldrb	r3, [r7, #23]
 801c6c8:	089b      	lsrs	r3, r3, #2
 801c6ca:	b2db      	uxtb	r3, r3
 801c6cc:	b29b      	uxth	r3, r3
 801c6ce:	3305      	adds	r3, #5
 801c6d0:	b29b      	uxth	r3, r3
 801c6d2:	031b      	lsls	r3, r3, #12
 801c6d4:	b29a      	uxth	r2, r3
 801c6d6:	79fb      	ldrb	r3, [r7, #7]
 801c6d8:	b29b      	uxth	r3, r3
 801c6da:	4313      	orrs	r3, r2
 801c6dc:	b29a      	uxth	r2, r3
 801c6de:	693b      	ldr	r3, [r7, #16]
 801c6e0:	68dc      	ldr	r4, [r3, #12]
 801c6e2:	4610      	mov	r0, r2
 801c6e4:	f7f7 f992 	bl	8013a0c <lwip_htons>
 801c6e8:	4603      	mov	r3, r0
 801c6ea:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801c6ec:	693b      	ldr	r3, [r7, #16]
 801c6ee:	68db      	ldr	r3, [r3, #12]
 801c6f0:	2200      	movs	r2, #0
 801c6f2:	749a      	strb	r2, [r3, #18]
 801c6f4:	2200      	movs	r2, #0
 801c6f6:	74da      	strb	r2, [r3, #19]
  return seg;
 801c6f8:	693b      	ldr	r3, [r7, #16]
}
 801c6fa:	4618      	mov	r0, r3
 801c6fc:	371c      	adds	r7, #28
 801c6fe:	46bd      	mov	sp, r7
 801c700:	bd90      	pop	{r4, r7, pc}
 801c702:	bf00      	nop
 801c704:	0802355c 	.word	0x0802355c
 801c708:	080235d4 	.word	0x080235d4
 801c70c:	080235f4 	.word	0x080235f4
 801c710:	0802361c 	.word	0x0802361c
 801c714:	08023640 	.word	0x08023640

0801c718 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801c718:	b580      	push	{r7, lr}
 801c71a:	b086      	sub	sp, #24
 801c71c:	af00      	add	r7, sp, #0
 801c71e:	607b      	str	r3, [r7, #4]
 801c720:	4603      	mov	r3, r0
 801c722:	73fb      	strb	r3, [r7, #15]
 801c724:	460b      	mov	r3, r1
 801c726:	81bb      	strh	r3, [r7, #12]
 801c728:	4613      	mov	r3, r2
 801c72a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801c72c:	89bb      	ldrh	r3, [r7, #12]
 801c72e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	2b00      	cmp	r3, #0
 801c734:	d105      	bne.n	801c742 <tcp_pbuf_prealloc+0x2a>
 801c736:	4b30      	ldr	r3, [pc, #192]	; (801c7f8 <tcp_pbuf_prealloc+0xe0>)
 801c738:	22e8      	movs	r2, #232	; 0xe8
 801c73a:	4930      	ldr	r1, [pc, #192]	; (801c7fc <tcp_pbuf_prealloc+0xe4>)
 801c73c:	4830      	ldr	r0, [pc, #192]	; (801c800 <tcp_pbuf_prealloc+0xe8>)
 801c73e:	f003 f9e5 	bl	801fb0c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801c742:	6a3b      	ldr	r3, [r7, #32]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d105      	bne.n	801c754 <tcp_pbuf_prealloc+0x3c>
 801c748:	4b2b      	ldr	r3, [pc, #172]	; (801c7f8 <tcp_pbuf_prealloc+0xe0>)
 801c74a:	22e9      	movs	r2, #233	; 0xe9
 801c74c:	492d      	ldr	r1, [pc, #180]	; (801c804 <tcp_pbuf_prealloc+0xec>)
 801c74e:	482c      	ldr	r0, [pc, #176]	; (801c800 <tcp_pbuf_prealloc+0xe8>)
 801c750:	f003 f9dc 	bl	801fb0c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801c754:	89ba      	ldrh	r2, [r7, #12]
 801c756:	897b      	ldrh	r3, [r7, #10]
 801c758:	429a      	cmp	r2, r3
 801c75a:	d221      	bcs.n	801c7a0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801c75c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c760:	f003 0302 	and.w	r3, r3, #2
 801c764:	2b00      	cmp	r3, #0
 801c766:	d111      	bne.n	801c78c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801c768:	6a3b      	ldr	r3, [r7, #32]
 801c76a:	8b5b      	ldrh	r3, [r3, #26]
 801c76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801c770:	2b00      	cmp	r3, #0
 801c772:	d115      	bne.n	801c7a0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801c774:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d007      	beq.n	801c78c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801c77c:	6a3b      	ldr	r3, [r7, #32]
 801c77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801c780:	2b00      	cmp	r3, #0
 801c782:	d103      	bne.n	801c78c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801c784:	6a3b      	ldr	r3, [r7, #32]
 801c786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d009      	beq.n	801c7a0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801c78c:	89bb      	ldrh	r3, [r7, #12]
 801c78e:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 801c792:	f023 0203 	bic.w	r2, r3, #3
 801c796:	897b      	ldrh	r3, [r7, #10]
 801c798:	4293      	cmp	r3, r2
 801c79a:	bf28      	it	cs
 801c79c:	4613      	movcs	r3, r2
 801c79e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801c7a0:	8af9      	ldrh	r1, [r7, #22]
 801c7a2:	7bfb      	ldrb	r3, [r7, #15]
 801c7a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c7a8:	4618      	mov	r0, r3
 801c7aa:	f7fa fe1f 	bl	80173ec <pbuf_alloc>
 801c7ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c7b0:	693b      	ldr	r3, [r7, #16]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d101      	bne.n	801c7ba <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801c7b6:	2300      	movs	r3, #0
 801c7b8:	e019      	b.n	801c7ee <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801c7ba:	693b      	ldr	r3, [r7, #16]
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d006      	beq.n	801c7d0 <tcp_pbuf_prealloc+0xb8>
 801c7c2:	4b0d      	ldr	r3, [pc, #52]	; (801c7f8 <tcp_pbuf_prealloc+0xe0>)
 801c7c4:	f240 120b 	movw	r2, #267	; 0x10b
 801c7c8:	490f      	ldr	r1, [pc, #60]	; (801c808 <tcp_pbuf_prealloc+0xf0>)
 801c7ca:	480d      	ldr	r0, [pc, #52]	; (801c800 <tcp_pbuf_prealloc+0xe8>)
 801c7cc:	f003 f99e 	bl	801fb0c <iprintf>
  *oversize = p->len - length;
 801c7d0:	693b      	ldr	r3, [r7, #16]
 801c7d2:	895a      	ldrh	r2, [r3, #10]
 801c7d4:	89bb      	ldrh	r3, [r7, #12]
 801c7d6:	1ad3      	subs	r3, r2, r3
 801c7d8:	b29a      	uxth	r2, r3
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801c7de:	693b      	ldr	r3, [r7, #16]
 801c7e0:	89ba      	ldrh	r2, [r7, #12]
 801c7e2:	811a      	strh	r2, [r3, #8]
 801c7e4:	693b      	ldr	r3, [r7, #16]
 801c7e6:	891a      	ldrh	r2, [r3, #8]
 801c7e8:	693b      	ldr	r3, [r7, #16]
 801c7ea:	815a      	strh	r2, [r3, #10]
  return p;
 801c7ec:	693b      	ldr	r3, [r7, #16]
}
 801c7ee:	4618      	mov	r0, r3
 801c7f0:	3718      	adds	r7, #24
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	bd80      	pop	{r7, pc}
 801c7f6:	bf00      	nop
 801c7f8:	0802355c 	.word	0x0802355c
 801c7fc:	08023658 	.word	0x08023658
 801c800:	080235f4 	.word	0x080235f4
 801c804:	0802367c 	.word	0x0802367c
 801c808:	0802369c 	.word	0x0802369c

0801c80c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801c80c:	b580      	push	{r7, lr}
 801c80e:	b082      	sub	sp, #8
 801c810:	af00      	add	r7, sp, #0
 801c812:	6078      	str	r0, [r7, #4]
 801c814:	460b      	mov	r3, r1
 801c816:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d106      	bne.n	801c82c <tcp_write_checks+0x20>
 801c81e:	4b33      	ldr	r3, [pc, #204]	; (801c8ec <tcp_write_checks+0xe0>)
 801c820:	f240 1233 	movw	r2, #307	; 0x133
 801c824:	4932      	ldr	r1, [pc, #200]	; (801c8f0 <tcp_write_checks+0xe4>)
 801c826:	4833      	ldr	r0, [pc, #204]	; (801c8f4 <tcp_write_checks+0xe8>)
 801c828:	f003 f970 	bl	801fb0c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	7d1b      	ldrb	r3, [r3, #20]
 801c830:	2b04      	cmp	r3, #4
 801c832:	d00e      	beq.n	801c852 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801c838:	2b07      	cmp	r3, #7
 801c83a:	d00a      	beq.n	801c852 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801c840:	2b02      	cmp	r3, #2
 801c842:	d006      	beq.n	801c852 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801c848:	2b03      	cmp	r3, #3
 801c84a:	d002      	beq.n	801c852 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801c84c:	f06f 030a 	mvn.w	r3, #10
 801c850:	e048      	b.n	801c8e4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801c852:	887b      	ldrh	r3, [r7, #2]
 801c854:	2b00      	cmp	r3, #0
 801c856:	d101      	bne.n	801c85c <tcp_write_checks+0x50>
    return ERR_OK;
 801c858:	2300      	movs	r3, #0
 801c85a:	e043      	b.n	801c8e4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801c862:	887a      	ldrh	r2, [r7, #2]
 801c864:	429a      	cmp	r2, r3
 801c866:	d909      	bls.n	801c87c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	8b5b      	ldrh	r3, [r3, #26]
 801c86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c870:	b29a      	uxth	r2, r3
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801c876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c87a:	e033      	b.n	801c8e4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c882:	2b0f      	cmp	r3, #15
 801c884:	d909      	bls.n	801c89a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	8b5b      	ldrh	r3, [r3, #26]
 801c88a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c88e:	b29a      	uxth	r2, r3
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801c894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c898:	e024      	b.n	801c8e4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d00f      	beq.n	801c8c4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d11a      	bne.n	801c8e2 <tcp_write_checks+0xd6>
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d116      	bne.n	801c8e2 <tcp_write_checks+0xd6>
 801c8b4:	4b0d      	ldr	r3, [pc, #52]	; (801c8ec <tcp_write_checks+0xe0>)
 801c8b6:	f240 1255 	movw	r2, #341	; 0x155
 801c8ba:	490f      	ldr	r1, [pc, #60]	; (801c8f8 <tcp_write_checks+0xec>)
 801c8bc:	480d      	ldr	r0, [pc, #52]	; (801c8f4 <tcp_write_checks+0xe8>)
 801c8be:	f003 f925 	bl	801fb0c <iprintf>
 801c8c2:	e00e      	b.n	801c8e2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d103      	bne.n	801c8d4 <tcp_write_checks+0xc8>
 801c8cc:	687b      	ldr	r3, [r7, #4]
 801c8ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d006      	beq.n	801c8e2 <tcp_write_checks+0xd6>
 801c8d4:	4b05      	ldr	r3, [pc, #20]	; (801c8ec <tcp_write_checks+0xe0>)
 801c8d6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801c8da:	4908      	ldr	r1, [pc, #32]	; (801c8fc <tcp_write_checks+0xf0>)
 801c8dc:	4805      	ldr	r0, [pc, #20]	; (801c8f4 <tcp_write_checks+0xe8>)
 801c8de:	f003 f915 	bl	801fb0c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801c8e2:	2300      	movs	r3, #0
}
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	3708      	adds	r7, #8
 801c8e8:	46bd      	mov	sp, r7
 801c8ea:	bd80      	pop	{r7, pc}
 801c8ec:	0802355c 	.word	0x0802355c
 801c8f0:	080236b0 	.word	0x080236b0
 801c8f4:	080235f4 	.word	0x080235f4
 801c8f8:	080236d0 	.word	0x080236d0
 801c8fc:	0802370c 	.word	0x0802370c

0801c900 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801c900:	b590      	push	{r4, r7, lr}
 801c902:	b09b      	sub	sp, #108	; 0x6c
 801c904:	af04      	add	r7, sp, #16
 801c906:	60f8      	str	r0, [r7, #12]
 801c908:	60b9      	str	r1, [r7, #8]
 801c90a:	4611      	mov	r1, r2
 801c90c:	461a      	mov	r2, r3
 801c90e:	460b      	mov	r3, r1
 801c910:	80fb      	strh	r3, [r7, #6]
 801c912:	4613      	mov	r3, r2
 801c914:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801c916:	2300      	movs	r3, #0
 801c918:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801c91a:	2300      	movs	r3, #0
 801c91c:	653b      	str	r3, [r7, #80]	; 0x50
 801c91e:	2300      	movs	r3, #0
 801c920:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c922:	2300      	movs	r3, #0
 801c924:	64bb      	str	r3, [r7, #72]	; 0x48
 801c926:	2300      	movs	r3, #0
 801c928:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801c92a:	2300      	movs	r3, #0
 801c92c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801c930:	2300      	movs	r3, #0
 801c932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801c936:	2300      	movs	r3, #0
 801c938:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801c93a:	2300      	movs	r3, #0
 801c93c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801c93e:	2300      	movs	r3, #0
 801c940:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	2b00      	cmp	r3, #0
 801c946:	d109      	bne.n	801c95c <tcp_write+0x5c>
 801c948:	4ba4      	ldr	r3, [pc, #656]	; (801cbdc <tcp_write+0x2dc>)
 801c94a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801c94e:	49a4      	ldr	r1, [pc, #656]	; (801cbe0 <tcp_write+0x2e0>)
 801c950:	48a4      	ldr	r0, [pc, #656]	; (801cbe4 <tcp_write+0x2e4>)
 801c952:	f003 f8db 	bl	801fb0c <iprintf>
 801c956:	f06f 030f 	mvn.w	r3, #15
 801c95a:	e32a      	b.n	801cfb2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801c962:	085b      	lsrs	r3, r3, #1
 801c964:	b29a      	uxth	r2, r3
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c96a:	4293      	cmp	r3, r2
 801c96c:	bf28      	it	cs
 801c96e:	4613      	movcs	r3, r2
 801c970:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801c972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c974:	2b00      	cmp	r3, #0
 801c976:	d102      	bne.n	801c97e <tcp_write+0x7e>
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c97c:	e000      	b.n	801c980 <tcp_write+0x80>
 801c97e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c980:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801c982:	68bb      	ldr	r3, [r7, #8]
 801c984:	2b00      	cmp	r3, #0
 801c986:	d109      	bne.n	801c99c <tcp_write+0x9c>
 801c988:	4b94      	ldr	r3, [pc, #592]	; (801cbdc <tcp_write+0x2dc>)
 801c98a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801c98e:	4996      	ldr	r1, [pc, #600]	; (801cbe8 <tcp_write+0x2e8>)
 801c990:	4894      	ldr	r0, [pc, #592]	; (801cbe4 <tcp_write+0x2e4>)
 801c992:	f003 f8bb 	bl	801fb0c <iprintf>
 801c996:	f06f 030f 	mvn.w	r3, #15
 801c99a:	e30a      	b.n	801cfb2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801c99c:	88fb      	ldrh	r3, [r7, #6]
 801c99e:	4619      	mov	r1, r3
 801c9a0:	68f8      	ldr	r0, [r7, #12]
 801c9a2:	f7ff ff33 	bl	801c80c <tcp_write_checks>
 801c9a6:	4603      	mov	r3, r0
 801c9a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801c9ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d002      	beq.n	801c9ba <tcp_write+0xba>
    return err;
 801c9b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c9b8:	e2fb      	b.n	801cfb2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c9c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	f000 80f6 	beq.w	801cbc0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c9d8:	653b      	str	r3, [r7, #80]	; 0x50
 801c9da:	e002      	b.n	801c9e2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801c9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c9de:	681b      	ldr	r3, [r3, #0]
 801c9e0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c9e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d1f8      	bne.n	801c9dc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801c9ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c9ec:	7a9b      	ldrb	r3, [r3, #10]
 801c9ee:	009b      	lsls	r3, r3, #2
 801c9f0:	b29b      	uxth	r3, r3
 801c9f2:	f003 0304 	and.w	r3, r3, #4
 801c9f6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801c9f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c9fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c9fc:	891b      	ldrh	r3, [r3, #8]
 801c9fe:	4619      	mov	r1, r3
 801ca00:	8c3b      	ldrh	r3, [r7, #32]
 801ca02:	440b      	add	r3, r1
 801ca04:	429a      	cmp	r2, r3
 801ca06:	da06      	bge.n	801ca16 <tcp_write+0x116>
 801ca08:	4b74      	ldr	r3, [pc, #464]	; (801cbdc <tcp_write+0x2dc>)
 801ca0a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ca0e:	4977      	ldr	r1, [pc, #476]	; (801cbec <tcp_write+0x2ec>)
 801ca10:	4874      	ldr	r0, [pc, #464]	; (801cbe4 <tcp_write+0x2e4>)
 801ca12:	f003 f87b 	bl	801fb0c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801ca16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ca18:	891a      	ldrh	r2, [r3, #8]
 801ca1a:	8c3b      	ldrh	r3, [r7, #32]
 801ca1c:	4413      	add	r3, r2
 801ca1e:	b29b      	uxth	r3, r3
 801ca20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ca22:	1ad3      	subs	r3, r2, r3
 801ca24:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ca2c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801ca2e:	8a7b      	ldrh	r3, [r7, #18]
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d026      	beq.n	801ca82 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ca34:	8a7b      	ldrh	r3, [r7, #18]
 801ca36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ca38:	429a      	cmp	r2, r3
 801ca3a:	d206      	bcs.n	801ca4a <tcp_write+0x14a>
 801ca3c:	4b67      	ldr	r3, [pc, #412]	; (801cbdc <tcp_write+0x2dc>)
 801ca3e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801ca42:	496b      	ldr	r1, [pc, #428]	; (801cbf0 <tcp_write+0x2f0>)
 801ca44:	4867      	ldr	r0, [pc, #412]	; (801cbe4 <tcp_write+0x2e4>)
 801ca46:	f003 f861 	bl	801fb0c <iprintf>
      seg = last_unsent;
 801ca4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ca4c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ca4e:	8a7b      	ldrh	r3, [r7, #18]
 801ca50:	88fa      	ldrh	r2, [r7, #6]
 801ca52:	4293      	cmp	r3, r2
 801ca54:	bf28      	it	cs
 801ca56:	4613      	movcs	r3, r2
 801ca58:	b29b      	uxth	r3, r3
 801ca5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ca5c:	4293      	cmp	r3, r2
 801ca5e:	bf28      	it	cs
 801ca60:	4613      	movcs	r3, r2
 801ca62:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801ca64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ca68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ca6a:	4413      	add	r3, r2
 801ca6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801ca70:	8a7a      	ldrh	r2, [r7, #18]
 801ca72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ca74:	1ad3      	subs	r3, r2, r3
 801ca76:	b29b      	uxth	r3, r3
 801ca78:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801ca7a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ca7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ca7e:	1ad3      	subs	r3, r2, r3
 801ca80:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ca82:	8a7b      	ldrh	r3, [r7, #18]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d00b      	beq.n	801caa0 <tcp_write+0x1a0>
 801ca88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ca8c:	88fb      	ldrh	r3, [r7, #6]
 801ca8e:	429a      	cmp	r2, r3
 801ca90:	d006      	beq.n	801caa0 <tcp_write+0x1a0>
 801ca92:	4b52      	ldr	r3, [pc, #328]	; (801cbdc <tcp_write+0x2dc>)
 801ca94:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ca98:	4956      	ldr	r1, [pc, #344]	; (801cbf4 <tcp_write+0x2f4>)
 801ca9a:	4852      	ldr	r0, [pc, #328]	; (801cbe4 <tcp_write+0x2e4>)
 801ca9c:	f003 f836 	bl	801fb0c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801caa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801caa4:	88fb      	ldrh	r3, [r7, #6]
 801caa6:	429a      	cmp	r2, r3
 801caa8:	f080 8167 	bcs.w	801cd7a <tcp_write+0x47a>
 801caac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801caae:	2b00      	cmp	r3, #0
 801cab0:	f000 8163 	beq.w	801cd7a <tcp_write+0x47a>
 801cab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cab6:	891b      	ldrh	r3, [r3, #8]
 801cab8:	2b00      	cmp	r3, #0
 801caba:	f000 815e 	beq.w	801cd7a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801cabe:	88fa      	ldrh	r2, [r7, #6]
 801cac0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cac4:	1ad2      	subs	r2, r2, r3
 801cac6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cac8:	4293      	cmp	r3, r2
 801caca:	bfa8      	it	ge
 801cacc:	4613      	movge	r3, r2
 801cace:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801cad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cad2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801cad4:	797b      	ldrb	r3, [r7, #5]
 801cad6:	f003 0301 	and.w	r3, r3, #1
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d027      	beq.n	801cb2e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801cade:	f107 0012 	add.w	r0, r7, #18
 801cae2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cae4:	8bf9      	ldrh	r1, [r7, #30]
 801cae6:	2301      	movs	r3, #1
 801cae8:	9302      	str	r3, [sp, #8]
 801caea:	797b      	ldrb	r3, [r7, #5]
 801caec:	9301      	str	r3, [sp, #4]
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	9300      	str	r3, [sp, #0]
 801caf2:	4603      	mov	r3, r0
 801caf4:	2000      	movs	r0, #0
 801caf6:	f7ff fe0f 	bl	801c718 <tcp_pbuf_prealloc>
 801cafa:	6578      	str	r0, [r7, #84]	; 0x54
 801cafc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	f000 8225 	beq.w	801cf4e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801cb04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb06:	6858      	ldr	r0, [r3, #4]
 801cb08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cb0c:	68ba      	ldr	r2, [r7, #8]
 801cb0e:	4413      	add	r3, r2
 801cb10:	8bfa      	ldrh	r2, [r7, #30]
 801cb12:	4619      	mov	r1, r3
 801cb14:	f002 fbfc 	bl	801f310 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801cb18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801cb1a:	f7fa ffd9 	bl	8017ad0 <pbuf_clen>
 801cb1e:	4603      	mov	r3, r0
 801cb20:	461a      	mov	r2, r3
 801cb22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801cb26:	4413      	add	r3, r2
 801cb28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801cb2c:	e041      	b.n	801cbb2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801cb2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cb30:	685b      	ldr	r3, [r3, #4]
 801cb32:	637b      	str	r3, [r7, #52]	; 0x34
 801cb34:	e002      	b.n	801cb3c <tcp_write+0x23c>
 801cb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	637b      	str	r3, [r7, #52]	; 0x34
 801cb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d1f8      	bne.n	801cb36 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801cb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb46:	7b1b      	ldrb	r3, [r3, #12]
 801cb48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d115      	bne.n	801cb7c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801cb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb52:	685b      	ldr	r3, [r3, #4]
 801cb54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cb56:	8952      	ldrh	r2, [r2, #10]
 801cb58:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801cb5a:	68ba      	ldr	r2, [r7, #8]
 801cb5c:	429a      	cmp	r2, r3
 801cb5e:	d10d      	bne.n	801cb7c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801cb60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d006      	beq.n	801cb76 <tcp_write+0x276>
 801cb68:	4b1c      	ldr	r3, [pc, #112]	; (801cbdc <tcp_write+0x2dc>)
 801cb6a:	f240 2231 	movw	r2, #561	; 0x231
 801cb6e:	4922      	ldr	r1, [pc, #136]	; (801cbf8 <tcp_write+0x2f8>)
 801cb70:	481c      	ldr	r0, [pc, #112]	; (801cbe4 <tcp_write+0x2e4>)
 801cb72:	f002 ffcb 	bl	801fb0c <iprintf>
          extendlen = seglen;
 801cb76:	8bfb      	ldrh	r3, [r7, #30]
 801cb78:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801cb7a:	e01a      	b.n	801cbb2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801cb7c:	8bfb      	ldrh	r3, [r7, #30]
 801cb7e:	2201      	movs	r2, #1
 801cb80:	4619      	mov	r1, r3
 801cb82:	2000      	movs	r0, #0
 801cb84:	f7fa fc32 	bl	80173ec <pbuf_alloc>
 801cb88:	6578      	str	r0, [r7, #84]	; 0x54
 801cb8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	f000 81e0 	beq.w	801cf52 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801cb92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cb96:	68ba      	ldr	r2, [r7, #8]
 801cb98:	441a      	add	r2, r3
 801cb9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb9c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801cb9e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801cba0:	f7fa ff96 	bl	8017ad0 <pbuf_clen>
 801cba4:	4603      	mov	r3, r0
 801cba6:	461a      	mov	r2, r3
 801cba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801cbac:	4413      	add	r3, r2
 801cbae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801cbb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cbb6:	8bfb      	ldrh	r3, [r7, #30]
 801cbb8:	4413      	add	r3, r2
 801cbba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801cbbe:	e0dc      	b.n	801cd7a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801cbc0:	68fb      	ldr	r3, [r7, #12]
 801cbc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	f000 80d7 	beq.w	801cd7a <tcp_write+0x47a>
 801cbcc:	4b03      	ldr	r3, [pc, #12]	; (801cbdc <tcp_write+0x2dc>)
 801cbce:	f240 224a 	movw	r2, #586	; 0x24a
 801cbd2:	490a      	ldr	r1, [pc, #40]	; (801cbfc <tcp_write+0x2fc>)
 801cbd4:	4803      	ldr	r0, [pc, #12]	; (801cbe4 <tcp_write+0x2e4>)
 801cbd6:	f002 ff99 	bl	801fb0c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801cbda:	e0ce      	b.n	801cd7a <tcp_write+0x47a>
 801cbdc:	0802355c 	.word	0x0802355c
 801cbe0:	08023740 	.word	0x08023740
 801cbe4:	080235f4 	.word	0x080235f4
 801cbe8:	08023758 	.word	0x08023758
 801cbec:	0802378c 	.word	0x0802378c
 801cbf0:	080237a4 	.word	0x080237a4
 801cbf4:	080237c4 	.word	0x080237c4
 801cbf8:	080237e4 	.word	0x080237e4
 801cbfc:	08023810 	.word	0x08023810
    struct pbuf *p;
    u16_t left = len - pos;
 801cc00:	88fa      	ldrh	r2, [r7, #6]
 801cc02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cc06:	1ad3      	subs	r3, r2, r3
 801cc08:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801cc0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cc0e:	b29b      	uxth	r3, r3
 801cc10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801cc12:	1ad3      	subs	r3, r2, r3
 801cc14:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801cc16:	8b7a      	ldrh	r2, [r7, #26]
 801cc18:	8bbb      	ldrh	r3, [r7, #28]
 801cc1a:	4293      	cmp	r3, r2
 801cc1c:	bf28      	it	cs
 801cc1e:	4613      	movcs	r3, r2
 801cc20:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801cc22:	797b      	ldrb	r3, [r7, #5]
 801cc24:	f003 0301 	and.w	r3, r3, #1
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d036      	beq.n	801cc9a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801cc2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cc30:	b29a      	uxth	r2, r3
 801cc32:	8b3b      	ldrh	r3, [r7, #24]
 801cc34:	4413      	add	r3, r2
 801cc36:	b299      	uxth	r1, r3
 801cc38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	bf0c      	ite	eq
 801cc3e:	2301      	moveq	r3, #1
 801cc40:	2300      	movne	r3, #0
 801cc42:	b2db      	uxtb	r3, r3
 801cc44:	f107 0012 	add.w	r0, r7, #18
 801cc48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801cc4a:	9302      	str	r3, [sp, #8]
 801cc4c:	797b      	ldrb	r3, [r7, #5]
 801cc4e:	9301      	str	r3, [sp, #4]
 801cc50:	68fb      	ldr	r3, [r7, #12]
 801cc52:	9300      	str	r3, [sp, #0]
 801cc54:	4603      	mov	r3, r0
 801cc56:	2036      	movs	r0, #54	; 0x36
 801cc58:	f7ff fd5e 	bl	801c718 <tcp_pbuf_prealloc>
 801cc5c:	6338      	str	r0, [r7, #48]	; 0x30
 801cc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	f000 8178 	beq.w	801cf56 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801cc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc68:	895b      	ldrh	r3, [r3, #10]
 801cc6a:	8b3a      	ldrh	r2, [r7, #24]
 801cc6c:	429a      	cmp	r2, r3
 801cc6e:	d906      	bls.n	801cc7e <tcp_write+0x37e>
 801cc70:	4b8c      	ldr	r3, [pc, #560]	; (801cea4 <tcp_write+0x5a4>)
 801cc72:	f240 2266 	movw	r2, #614	; 0x266
 801cc76:	498c      	ldr	r1, [pc, #560]	; (801cea8 <tcp_write+0x5a8>)
 801cc78:	488c      	ldr	r0, [pc, #560]	; (801ceac <tcp_write+0x5ac>)
 801cc7a:	f002 ff47 	bl	801fb0c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc80:	685a      	ldr	r2, [r3, #4]
 801cc82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cc86:	18d0      	adds	r0, r2, r3
 801cc88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cc8c:	68ba      	ldr	r2, [r7, #8]
 801cc8e:	4413      	add	r3, r2
 801cc90:	8b3a      	ldrh	r2, [r7, #24]
 801cc92:	4619      	mov	r1, r3
 801cc94:	f002 fb3c 	bl	801f310 <memcpy>
 801cc98:	e02f      	b.n	801ccfa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801cc9a:	8a7b      	ldrh	r3, [r7, #18]
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d006      	beq.n	801ccae <tcp_write+0x3ae>
 801cca0:	4b80      	ldr	r3, [pc, #512]	; (801cea4 <tcp_write+0x5a4>)
 801cca2:	f240 2271 	movw	r2, #625	; 0x271
 801cca6:	4982      	ldr	r1, [pc, #520]	; (801ceb0 <tcp_write+0x5b0>)
 801cca8:	4880      	ldr	r0, [pc, #512]	; (801ceac <tcp_write+0x5ac>)
 801ccaa:	f002 ff2f 	bl	801fb0c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801ccae:	8b3b      	ldrh	r3, [r7, #24]
 801ccb0:	2201      	movs	r2, #1
 801ccb2:	4619      	mov	r1, r3
 801ccb4:	2036      	movs	r0, #54	; 0x36
 801ccb6:	f7fa fb99 	bl	80173ec <pbuf_alloc>
 801ccba:	6178      	str	r0, [r7, #20]
 801ccbc:	697b      	ldr	r3, [r7, #20]
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	f000 814b 	beq.w	801cf5a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ccc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ccc8:	68ba      	ldr	r2, [r7, #8]
 801ccca:	441a      	add	r2, r3
 801cccc:	697b      	ldr	r3, [r7, #20]
 801ccce:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ccd0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ccd4:	b29b      	uxth	r3, r3
 801ccd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ccda:	4619      	mov	r1, r3
 801ccdc:	2036      	movs	r0, #54	; 0x36
 801ccde:	f7fa fb85 	bl	80173ec <pbuf_alloc>
 801cce2:	6338      	str	r0, [r7, #48]	; 0x30
 801cce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	d103      	bne.n	801ccf2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801ccea:	6978      	ldr	r0, [r7, #20]
 801ccec:	f7fa fe62 	bl	80179b4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801ccf0:	e136      	b.n	801cf60 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801ccf2:	6979      	ldr	r1, [r7, #20]
 801ccf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ccf6:	f7fa ff2b 	bl	8017b50 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801ccfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ccfc:	f7fa fee8 	bl	8017ad0 <pbuf_clen>
 801cd00:	4603      	mov	r3, r0
 801cd02:	461a      	mov	r2, r3
 801cd04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801cd08:	4413      	add	r3, r2
 801cd0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801cd0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801cd12:	2b10      	cmp	r3, #16
 801cd14:	d903      	bls.n	801cd1e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801cd16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cd18:	f7fa fe4c 	bl	80179b4 <pbuf_free>
      goto memerr;
 801cd1c:	e120      	b.n	801cf60 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801cd1e:	68fb      	ldr	r3, [r7, #12]
 801cd20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801cd22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cd26:	441a      	add	r2, r3
 801cd28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cd2c:	9300      	str	r3, [sp, #0]
 801cd2e:	4613      	mov	r3, r2
 801cd30:	2200      	movs	r2, #0
 801cd32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cd34:	68f8      	ldr	r0, [r7, #12]
 801cd36:	f7ff fc51 	bl	801c5dc <tcp_create_segment>
 801cd3a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801cd3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	f000 810d 	beq.w	801cf5e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801cd44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d102      	bne.n	801cd50 <tcp_write+0x450>
      queue = seg;
 801cd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cd4c:	647b      	str	r3, [r7, #68]	; 0x44
 801cd4e:	e00c      	b.n	801cd6a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801cd50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d106      	bne.n	801cd64 <tcp_write+0x464>
 801cd56:	4b53      	ldr	r3, [pc, #332]	; (801cea4 <tcp_write+0x5a4>)
 801cd58:	f240 22ab 	movw	r2, #683	; 0x2ab
 801cd5c:	4955      	ldr	r1, [pc, #340]	; (801ceb4 <tcp_write+0x5b4>)
 801cd5e:	4853      	ldr	r0, [pc, #332]	; (801ceac <tcp_write+0x5ac>)
 801cd60:	f002 fed4 	bl	801fb0c <iprintf>
      prev_seg->next = seg;
 801cd64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cd66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801cd68:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801cd6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cd6c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801cd6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cd72:	8b3b      	ldrh	r3, [r7, #24]
 801cd74:	4413      	add	r3, r2
 801cd76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801cd7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cd7e:	88fb      	ldrh	r3, [r7, #6]
 801cd80:	429a      	cmp	r2, r3
 801cd82:	f4ff af3d 	bcc.w	801cc00 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801cd86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d02c      	beq.n	801cde6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801cd8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd8e:	685b      	ldr	r3, [r3, #4]
 801cd90:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cd92:	e01e      	b.n	801cdd2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd96:	891a      	ldrh	r2, [r3, #8]
 801cd98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801cd9a:	4413      	add	r3, r2
 801cd9c:	b29a      	uxth	r2, r3
 801cd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cda0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801cda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	d110      	bne.n	801cdcc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801cdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdac:	685b      	ldr	r3, [r3, #4]
 801cdae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cdb0:	8952      	ldrh	r2, [r2, #10]
 801cdb2:	4413      	add	r3, r2
 801cdb4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801cdb6:	68b9      	ldr	r1, [r7, #8]
 801cdb8:	4618      	mov	r0, r3
 801cdba:	f002 faa9 	bl	801f310 <memcpy>
        p->len += oversize_used;
 801cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdc0:	895a      	ldrh	r2, [r3, #10]
 801cdc2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801cdc4:	4413      	add	r3, r2
 801cdc6:	b29a      	uxth	r2, r3
 801cdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdca:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801cdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d1dd      	bne.n	801cd94 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801cdd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cdda:	891a      	ldrh	r2, [r3, #8]
 801cddc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801cdde:	4413      	add	r3, r2
 801cde0:	b29a      	uxth	r2, r3
 801cde2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cde4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801cde6:	8a7a      	ldrh	r2, [r7, #18]
 801cde8:	68fb      	ldr	r3, [r7, #12]
 801cdea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801cdee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d018      	beq.n	801ce26 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801cdf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d106      	bne.n	801ce08 <tcp_write+0x508>
 801cdfa:	4b2a      	ldr	r3, [pc, #168]	; (801cea4 <tcp_write+0x5a4>)
 801cdfc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801ce00:	492d      	ldr	r1, [pc, #180]	; (801ceb8 <tcp_write+0x5b8>)
 801ce02:	482a      	ldr	r0, [pc, #168]	; (801ceac <tcp_write+0x5ac>)
 801ce04:	f002 fe82 	bl	801fb0c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801ce08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce0a:	685b      	ldr	r3, [r3, #4]
 801ce0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ce0e:	4618      	mov	r0, r3
 801ce10:	f7fa fe9e 	bl	8017b50 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801ce14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce16:	891a      	ldrh	r2, [r3, #8]
 801ce18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ce1a:	891b      	ldrh	r3, [r3, #8]
 801ce1c:	4413      	add	r3, r2
 801ce1e:	b29a      	uxth	r2, r3
 801ce20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce22:	811a      	strh	r2, [r3, #8]
 801ce24:	e037      	b.n	801ce96 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801ce26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d034      	beq.n	801ce96 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ce2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d003      	beq.n	801ce3a <tcp_write+0x53a>
 801ce32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce34:	685b      	ldr	r3, [r3, #4]
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d106      	bne.n	801ce48 <tcp_write+0x548>
 801ce3a:	4b1a      	ldr	r3, [pc, #104]	; (801cea4 <tcp_write+0x5a4>)
 801ce3c:	f240 22e6 	movw	r2, #742	; 0x2e6
 801ce40:	491e      	ldr	r1, [pc, #120]	; (801cebc <tcp_write+0x5bc>)
 801ce42:	481a      	ldr	r0, [pc, #104]	; (801ceac <tcp_write+0x5ac>)
 801ce44:	f002 fe62 	bl	801fb0c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ce48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce4a:	685b      	ldr	r3, [r3, #4]
 801ce4c:	62bb      	str	r3, [r7, #40]	; 0x28
 801ce4e:	e009      	b.n	801ce64 <tcp_write+0x564>
      p->tot_len += extendlen;
 801ce50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce52:	891a      	ldrh	r2, [r3, #8]
 801ce54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ce56:	4413      	add	r3, r2
 801ce58:	b29a      	uxth	r2, r3
 801ce5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce5c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ce5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	62bb      	str	r3, [r7, #40]	; 0x28
 801ce64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d1f1      	bne.n	801ce50 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce6e:	891a      	ldrh	r2, [r3, #8]
 801ce70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ce72:	4413      	add	r3, r2
 801ce74:	b29a      	uxth	r2, r3
 801ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce78:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801ce7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce7c:	895a      	ldrh	r2, [r3, #10]
 801ce7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ce80:	4413      	add	r3, r2
 801ce82:	b29a      	uxth	r2, r3
 801ce84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce86:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801ce88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce8a:	891a      	ldrh	r2, [r3, #8]
 801ce8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ce8e:	4413      	add	r3, r2
 801ce90:	b29a      	uxth	r2, r3
 801ce92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce94:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801ce96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	d111      	bne.n	801cec0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cea0:	66da      	str	r2, [r3, #108]	; 0x6c
 801cea2:	e010      	b.n	801cec6 <tcp_write+0x5c6>
 801cea4:	0802355c 	.word	0x0802355c
 801cea8:	08023840 	.word	0x08023840
 801ceac:	080235f4 	.word	0x080235f4
 801ceb0:	08023880 	.word	0x08023880
 801ceb4:	08023890 	.word	0x08023890
 801ceb8:	080238a4 	.word	0x080238a4
 801cebc:	080238dc 	.word	0x080238dc
  } else {
    last_unsent->next = queue;
 801cec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cec4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ceca:	88fb      	ldrh	r3, [r7, #6]
 801cecc:	441a      	add	r2, r3
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801ced8:	88fb      	ldrh	r3, [r7, #6]
 801ceda:	1ad3      	subs	r3, r2, r3
 801cedc:	b29a      	uxth	r2, r3
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801cee4:	68fb      	ldr	r3, [r7, #12]
 801cee6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ceea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ceee:	68fb      	ldr	r3, [r7, #12]
 801cef0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d00e      	beq.n	801cf16 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801cef8:	68fb      	ldr	r3, [r7, #12]
 801cefa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	d10a      	bne.n	801cf16 <tcp_write+0x616>
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	d106      	bne.n	801cf16 <tcp_write+0x616>
 801cf08:	4b2c      	ldr	r3, [pc, #176]	; (801cfbc <tcp_write+0x6bc>)
 801cf0a:	f240 3212 	movw	r2, #786	; 0x312
 801cf0e:	492c      	ldr	r1, [pc, #176]	; (801cfc0 <tcp_write+0x6c0>)
 801cf10:	482c      	ldr	r0, [pc, #176]	; (801cfc4 <tcp_write+0x6c4>)
 801cf12:	f002 fdfb 	bl	801fb0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801cf16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d016      	beq.n	801cf4a <tcp_write+0x64a>
 801cf1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cf1e:	68db      	ldr	r3, [r3, #12]
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d012      	beq.n	801cf4a <tcp_write+0x64a>
 801cf24:	797b      	ldrb	r3, [r7, #5]
 801cf26:	f003 0302 	and.w	r3, r3, #2
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d10d      	bne.n	801cf4a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801cf2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cf30:	68db      	ldr	r3, [r3, #12]
 801cf32:	899b      	ldrh	r3, [r3, #12]
 801cf34:	b29c      	uxth	r4, r3
 801cf36:	2008      	movs	r0, #8
 801cf38:	f7f6 fd68 	bl	8013a0c <lwip_htons>
 801cf3c:	4603      	mov	r3, r0
 801cf3e:	461a      	mov	r2, r3
 801cf40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cf42:	68db      	ldr	r3, [r3, #12]
 801cf44:	4322      	orrs	r2, r4
 801cf46:	b292      	uxth	r2, r2
 801cf48:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801cf4a:	2300      	movs	r3, #0
 801cf4c:	e031      	b.n	801cfb2 <tcp_write+0x6b2>
          goto memerr;
 801cf4e:	bf00      	nop
 801cf50:	e006      	b.n	801cf60 <tcp_write+0x660>
            goto memerr;
 801cf52:	bf00      	nop
 801cf54:	e004      	b.n	801cf60 <tcp_write+0x660>
        goto memerr;
 801cf56:	bf00      	nop
 801cf58:	e002      	b.n	801cf60 <tcp_write+0x660>
        goto memerr;
 801cf5a:	bf00      	nop
 801cf5c:	e000      	b.n	801cf60 <tcp_write+0x660>
      goto memerr;
 801cf5e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	8b5b      	ldrh	r3, [r3, #26]
 801cf64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cf68:	b29a      	uxth	r2, r3
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801cf6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d002      	beq.n	801cf7a <tcp_write+0x67a>
    pbuf_free(concat_p);
 801cf74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801cf76:	f7fa fd1d 	bl	80179b4 <pbuf_free>
  }
  if (queue != NULL) {
 801cf7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d002      	beq.n	801cf86 <tcp_write+0x686>
    tcp_segs_free(queue);
 801cf80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801cf82:	f7fc fb6b 	bl	801965c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801cf86:	68fb      	ldr	r3, [r7, #12]
 801cf88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d00e      	beq.n	801cfae <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801cf90:	68fb      	ldr	r3, [r7, #12]
 801cf92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d10a      	bne.n	801cfae <tcp_write+0x6ae>
 801cf98:	68fb      	ldr	r3, [r7, #12]
 801cf9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d106      	bne.n	801cfae <tcp_write+0x6ae>
 801cfa0:	4b06      	ldr	r3, [pc, #24]	; (801cfbc <tcp_write+0x6bc>)
 801cfa2:	f240 3227 	movw	r2, #807	; 0x327
 801cfa6:	4906      	ldr	r1, [pc, #24]	; (801cfc0 <tcp_write+0x6c0>)
 801cfa8:	4806      	ldr	r0, [pc, #24]	; (801cfc4 <tcp_write+0x6c4>)
 801cfaa:	f002 fdaf 	bl	801fb0c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801cfae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	375c      	adds	r7, #92	; 0x5c
 801cfb6:	46bd      	mov	sp, r7
 801cfb8:	bd90      	pop	{r4, r7, pc}
 801cfba:	bf00      	nop
 801cfbc:	0802355c 	.word	0x0802355c
 801cfc0:	08023914 	.word	0x08023914
 801cfc4:	080235f4 	.word	0x080235f4

0801cfc8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801cfc8:	b590      	push	{r4, r7, lr}
 801cfca:	b08b      	sub	sp, #44	; 0x2c
 801cfcc:	af02      	add	r7, sp, #8
 801cfce:	6078      	str	r0, [r7, #4]
 801cfd0:	460b      	mov	r3, r1
 801cfd2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	61fb      	str	r3, [r7, #28]
 801cfd8:	2300      	movs	r3, #0
 801cfda:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801cfdc:	2300      	movs	r3, #0
 801cfde:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d106      	bne.n	801cff4 <tcp_split_unsent_seg+0x2c>
 801cfe6:	4b95      	ldr	r3, [pc, #596]	; (801d23c <tcp_split_unsent_seg+0x274>)
 801cfe8:	f240 324b 	movw	r2, #843	; 0x34b
 801cfec:	4994      	ldr	r1, [pc, #592]	; (801d240 <tcp_split_unsent_seg+0x278>)
 801cfee:	4895      	ldr	r0, [pc, #596]	; (801d244 <tcp_split_unsent_seg+0x27c>)
 801cff0:	f002 fd8c 	bl	801fb0c <iprintf>

  useg = pcb->unsent;
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cff8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801cffa:	697b      	ldr	r3, [r7, #20]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d102      	bne.n	801d006 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801d000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d004:	e116      	b.n	801d234 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801d006:	887b      	ldrh	r3, [r7, #2]
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d109      	bne.n	801d020 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801d00c:	4b8b      	ldr	r3, [pc, #556]	; (801d23c <tcp_split_unsent_seg+0x274>)
 801d00e:	f240 3253 	movw	r2, #851	; 0x353
 801d012:	498d      	ldr	r1, [pc, #564]	; (801d248 <tcp_split_unsent_seg+0x280>)
 801d014:	488b      	ldr	r0, [pc, #556]	; (801d244 <tcp_split_unsent_seg+0x27c>)
 801d016:	f002 fd79 	bl	801fb0c <iprintf>
    return ERR_VAL;
 801d01a:	f06f 0305 	mvn.w	r3, #5
 801d01e:	e109      	b.n	801d234 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801d020:	697b      	ldr	r3, [r7, #20]
 801d022:	891b      	ldrh	r3, [r3, #8]
 801d024:	887a      	ldrh	r2, [r7, #2]
 801d026:	429a      	cmp	r2, r3
 801d028:	d301      	bcc.n	801d02e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801d02a:	2300      	movs	r3, #0
 801d02c:	e102      	b.n	801d234 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d032:	887a      	ldrh	r2, [r7, #2]
 801d034:	429a      	cmp	r2, r3
 801d036:	d906      	bls.n	801d046 <tcp_split_unsent_seg+0x7e>
 801d038:	4b80      	ldr	r3, [pc, #512]	; (801d23c <tcp_split_unsent_seg+0x274>)
 801d03a:	f240 325b 	movw	r2, #859	; 0x35b
 801d03e:	4983      	ldr	r1, [pc, #524]	; (801d24c <tcp_split_unsent_seg+0x284>)
 801d040:	4880      	ldr	r0, [pc, #512]	; (801d244 <tcp_split_unsent_seg+0x27c>)
 801d042:	f002 fd63 	bl	801fb0c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801d046:	697b      	ldr	r3, [r7, #20]
 801d048:	891b      	ldrh	r3, [r3, #8]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d106      	bne.n	801d05c <tcp_split_unsent_seg+0x94>
 801d04e:	4b7b      	ldr	r3, [pc, #492]	; (801d23c <tcp_split_unsent_seg+0x274>)
 801d050:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801d054:	497e      	ldr	r1, [pc, #504]	; (801d250 <tcp_split_unsent_seg+0x288>)
 801d056:	487b      	ldr	r0, [pc, #492]	; (801d244 <tcp_split_unsent_seg+0x27c>)
 801d058:	f002 fd58 	bl	801fb0c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801d05c:	697b      	ldr	r3, [r7, #20]
 801d05e:	7a9b      	ldrb	r3, [r3, #10]
 801d060:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801d062:	7bfb      	ldrb	r3, [r7, #15]
 801d064:	009b      	lsls	r3, r3, #2
 801d066:	b2db      	uxtb	r3, r3
 801d068:	f003 0304 	and.w	r3, r3, #4
 801d06c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801d06e:	697b      	ldr	r3, [r7, #20]
 801d070:	891a      	ldrh	r2, [r3, #8]
 801d072:	887b      	ldrh	r3, [r7, #2]
 801d074:	1ad3      	subs	r3, r2, r3
 801d076:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801d078:	7bbb      	ldrb	r3, [r7, #14]
 801d07a:	b29a      	uxth	r2, r3
 801d07c:	89bb      	ldrh	r3, [r7, #12]
 801d07e:	4413      	add	r3, r2
 801d080:	b29b      	uxth	r3, r3
 801d082:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d086:	4619      	mov	r1, r3
 801d088:	2036      	movs	r0, #54	; 0x36
 801d08a:	f7fa f9af 	bl	80173ec <pbuf_alloc>
 801d08e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d090:	693b      	ldr	r3, [r7, #16]
 801d092:	2b00      	cmp	r3, #0
 801d094:	f000 80b7 	beq.w	801d206 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801d098:	697b      	ldr	r3, [r7, #20]
 801d09a:	685b      	ldr	r3, [r3, #4]
 801d09c:	891a      	ldrh	r2, [r3, #8]
 801d09e:	697b      	ldr	r3, [r7, #20]
 801d0a0:	891b      	ldrh	r3, [r3, #8]
 801d0a2:	1ad3      	subs	r3, r2, r3
 801d0a4:	b29a      	uxth	r2, r3
 801d0a6:	887b      	ldrh	r3, [r7, #2]
 801d0a8:	4413      	add	r3, r2
 801d0aa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801d0ac:	697b      	ldr	r3, [r7, #20]
 801d0ae:	6858      	ldr	r0, [r3, #4]
 801d0b0:	693b      	ldr	r3, [r7, #16]
 801d0b2:	685a      	ldr	r2, [r3, #4]
 801d0b4:	7bbb      	ldrb	r3, [r7, #14]
 801d0b6:	18d1      	adds	r1, r2, r3
 801d0b8:	897b      	ldrh	r3, [r7, #10]
 801d0ba:	89ba      	ldrh	r2, [r7, #12]
 801d0bc:	f7fa fe70 	bl	8017da0 <pbuf_copy_partial>
 801d0c0:	4603      	mov	r3, r0
 801d0c2:	461a      	mov	r2, r3
 801d0c4:	89bb      	ldrh	r3, [r7, #12]
 801d0c6:	4293      	cmp	r3, r2
 801d0c8:	f040 809f 	bne.w	801d20a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801d0cc:	697b      	ldr	r3, [r7, #20]
 801d0ce:	68db      	ldr	r3, [r3, #12]
 801d0d0:	899b      	ldrh	r3, [r3, #12]
 801d0d2:	b29b      	uxth	r3, r3
 801d0d4:	4618      	mov	r0, r3
 801d0d6:	f7f6 fc99 	bl	8013a0c <lwip_htons>
 801d0da:	4603      	mov	r3, r0
 801d0dc:	b2db      	uxtb	r3, r3
 801d0de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d0e2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801d0e8:	7efb      	ldrb	r3, [r7, #27]
 801d0ea:	f003 0308 	and.w	r3, r3, #8
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d007      	beq.n	801d102 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801d0f2:	7efb      	ldrb	r3, [r7, #27]
 801d0f4:	f023 0308 	bic.w	r3, r3, #8
 801d0f8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801d0fa:	7ebb      	ldrb	r3, [r7, #26]
 801d0fc:	f043 0308 	orr.w	r3, r3, #8
 801d100:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801d102:	7efb      	ldrb	r3, [r7, #27]
 801d104:	f003 0301 	and.w	r3, r3, #1
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d007      	beq.n	801d11c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801d10c:	7efb      	ldrb	r3, [r7, #27]
 801d10e:	f023 0301 	bic.w	r3, r3, #1
 801d112:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801d114:	7ebb      	ldrb	r3, [r7, #26]
 801d116:	f043 0301 	orr.w	r3, r3, #1
 801d11a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801d11c:	697b      	ldr	r3, [r7, #20]
 801d11e:	68db      	ldr	r3, [r3, #12]
 801d120:	685b      	ldr	r3, [r3, #4]
 801d122:	4618      	mov	r0, r3
 801d124:	f7f6 fc87 	bl	8013a36 <lwip_htonl>
 801d128:	4602      	mov	r2, r0
 801d12a:	887b      	ldrh	r3, [r7, #2]
 801d12c:	18d1      	adds	r1, r2, r3
 801d12e:	7eba      	ldrb	r2, [r7, #26]
 801d130:	7bfb      	ldrb	r3, [r7, #15]
 801d132:	9300      	str	r3, [sp, #0]
 801d134:	460b      	mov	r3, r1
 801d136:	6939      	ldr	r1, [r7, #16]
 801d138:	6878      	ldr	r0, [r7, #4]
 801d13a:	f7ff fa4f 	bl	801c5dc <tcp_create_segment>
 801d13e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801d140:	69fb      	ldr	r3, [r7, #28]
 801d142:	2b00      	cmp	r3, #0
 801d144:	d063      	beq.n	801d20e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801d146:	697b      	ldr	r3, [r7, #20]
 801d148:	685b      	ldr	r3, [r3, #4]
 801d14a:	4618      	mov	r0, r3
 801d14c:	f7fa fcc0 	bl	8017ad0 <pbuf_clen>
 801d150:	4603      	mov	r3, r0
 801d152:	461a      	mov	r2, r3
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d15a:	1a9b      	subs	r3, r3, r2
 801d15c:	b29a      	uxth	r2, r3
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801d164:	697b      	ldr	r3, [r7, #20]
 801d166:	6858      	ldr	r0, [r3, #4]
 801d168:	697b      	ldr	r3, [r7, #20]
 801d16a:	685b      	ldr	r3, [r3, #4]
 801d16c:	891a      	ldrh	r2, [r3, #8]
 801d16e:	89bb      	ldrh	r3, [r7, #12]
 801d170:	1ad3      	subs	r3, r2, r3
 801d172:	b29b      	uxth	r3, r3
 801d174:	4619      	mov	r1, r3
 801d176:	f7fa fa99 	bl	80176ac <pbuf_realloc>
  useg->len -= remainder;
 801d17a:	697b      	ldr	r3, [r7, #20]
 801d17c:	891a      	ldrh	r2, [r3, #8]
 801d17e:	89bb      	ldrh	r3, [r7, #12]
 801d180:	1ad3      	subs	r3, r2, r3
 801d182:	b29a      	uxth	r2, r3
 801d184:	697b      	ldr	r3, [r7, #20]
 801d186:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801d188:	697b      	ldr	r3, [r7, #20]
 801d18a:	68db      	ldr	r3, [r3, #12]
 801d18c:	899b      	ldrh	r3, [r3, #12]
 801d18e:	b29c      	uxth	r4, r3
 801d190:	7efb      	ldrb	r3, [r7, #27]
 801d192:	b29b      	uxth	r3, r3
 801d194:	4618      	mov	r0, r3
 801d196:	f7f6 fc39 	bl	8013a0c <lwip_htons>
 801d19a:	4603      	mov	r3, r0
 801d19c:	461a      	mov	r2, r3
 801d19e:	697b      	ldr	r3, [r7, #20]
 801d1a0:	68db      	ldr	r3, [r3, #12]
 801d1a2:	4322      	orrs	r2, r4
 801d1a4:	b292      	uxth	r2, r2
 801d1a6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801d1a8:	697b      	ldr	r3, [r7, #20]
 801d1aa:	685b      	ldr	r3, [r3, #4]
 801d1ac:	4618      	mov	r0, r3
 801d1ae:	f7fa fc8f 	bl	8017ad0 <pbuf_clen>
 801d1b2:	4603      	mov	r3, r0
 801d1b4:	461a      	mov	r2, r3
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d1bc:	4413      	add	r3, r2
 801d1be:	b29a      	uxth	r2, r3
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d1c6:	69fb      	ldr	r3, [r7, #28]
 801d1c8:	685b      	ldr	r3, [r3, #4]
 801d1ca:	4618      	mov	r0, r3
 801d1cc:	f7fa fc80 	bl	8017ad0 <pbuf_clen>
 801d1d0:	4603      	mov	r3, r0
 801d1d2:	461a      	mov	r2, r3
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d1da:	4413      	add	r3, r2
 801d1dc:	b29a      	uxth	r2, r3
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801d1e4:	697b      	ldr	r3, [r7, #20]
 801d1e6:	681a      	ldr	r2, [r3, #0]
 801d1e8:	69fb      	ldr	r3, [r7, #28]
 801d1ea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801d1ec:	697b      	ldr	r3, [r7, #20]
 801d1ee:	69fa      	ldr	r2, [r7, #28]
 801d1f0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801d1f2:	69fb      	ldr	r3, [r7, #28]
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	d103      	bne.n	801d202 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	2200      	movs	r2, #0
 801d1fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801d202:	2300      	movs	r3, #0
 801d204:	e016      	b.n	801d234 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801d206:	bf00      	nop
 801d208:	e002      	b.n	801d210 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801d20a:	bf00      	nop
 801d20c:	e000      	b.n	801d210 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801d20e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801d210:	69fb      	ldr	r3, [r7, #28]
 801d212:	2b00      	cmp	r3, #0
 801d214:	d006      	beq.n	801d224 <tcp_split_unsent_seg+0x25c>
 801d216:	4b09      	ldr	r3, [pc, #36]	; (801d23c <tcp_split_unsent_seg+0x274>)
 801d218:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801d21c:	490d      	ldr	r1, [pc, #52]	; (801d254 <tcp_split_unsent_seg+0x28c>)
 801d21e:	4809      	ldr	r0, [pc, #36]	; (801d244 <tcp_split_unsent_seg+0x27c>)
 801d220:	f002 fc74 	bl	801fb0c <iprintf>
  if (p != NULL) {
 801d224:	693b      	ldr	r3, [r7, #16]
 801d226:	2b00      	cmp	r3, #0
 801d228:	d002      	beq.n	801d230 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801d22a:	6938      	ldr	r0, [r7, #16]
 801d22c:	f7fa fbc2 	bl	80179b4 <pbuf_free>
  }

  return ERR_MEM;
 801d230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801d234:	4618      	mov	r0, r3
 801d236:	3724      	adds	r7, #36	; 0x24
 801d238:	46bd      	mov	sp, r7
 801d23a:	bd90      	pop	{r4, r7, pc}
 801d23c:	0802355c 	.word	0x0802355c
 801d240:	08023934 	.word	0x08023934
 801d244:	080235f4 	.word	0x080235f4
 801d248:	08023958 	.word	0x08023958
 801d24c:	0802397c 	.word	0x0802397c
 801d250:	0802398c 	.word	0x0802398c
 801d254:	0802399c 	.word	0x0802399c

0801d258 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801d258:	b590      	push	{r4, r7, lr}
 801d25a:	b085      	sub	sp, #20
 801d25c:	af00      	add	r7, sp, #0
 801d25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	2b00      	cmp	r3, #0
 801d264:	d106      	bne.n	801d274 <tcp_send_fin+0x1c>
 801d266:	4b21      	ldr	r3, [pc, #132]	; (801d2ec <tcp_send_fin+0x94>)
 801d268:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801d26c:	4920      	ldr	r1, [pc, #128]	; (801d2f0 <tcp_send_fin+0x98>)
 801d26e:	4821      	ldr	r0, [pc, #132]	; (801d2f4 <tcp_send_fin+0x9c>)
 801d270:	f002 fc4c 	bl	801fb0c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d02e      	beq.n	801d2da <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d280:	60fb      	str	r3, [r7, #12]
 801d282:	e002      	b.n	801d28a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801d284:	68fb      	ldr	r3, [r7, #12]
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d28a:	68fb      	ldr	r3, [r7, #12]
 801d28c:	681b      	ldr	r3, [r3, #0]
 801d28e:	2b00      	cmp	r3, #0
 801d290:	d1f8      	bne.n	801d284 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	68db      	ldr	r3, [r3, #12]
 801d296:	899b      	ldrh	r3, [r3, #12]
 801d298:	b29b      	uxth	r3, r3
 801d29a:	4618      	mov	r0, r3
 801d29c:	f7f6 fbb6 	bl	8013a0c <lwip_htons>
 801d2a0:	4603      	mov	r3, r0
 801d2a2:	b2db      	uxtb	r3, r3
 801d2a4:	f003 0307 	and.w	r3, r3, #7
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d116      	bne.n	801d2da <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	68db      	ldr	r3, [r3, #12]
 801d2b0:	899b      	ldrh	r3, [r3, #12]
 801d2b2:	b29c      	uxth	r4, r3
 801d2b4:	2001      	movs	r0, #1
 801d2b6:	f7f6 fba9 	bl	8013a0c <lwip_htons>
 801d2ba:	4603      	mov	r3, r0
 801d2bc:	461a      	mov	r2, r3
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	68db      	ldr	r3, [r3, #12]
 801d2c2:	4322      	orrs	r2, r4
 801d2c4:	b292      	uxth	r2, r2
 801d2c6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	8b5b      	ldrh	r3, [r3, #26]
 801d2cc:	f043 0320 	orr.w	r3, r3, #32
 801d2d0:	b29a      	uxth	r2, r3
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801d2d6:	2300      	movs	r3, #0
 801d2d8:	e004      	b.n	801d2e4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801d2da:	2101      	movs	r1, #1
 801d2dc:	6878      	ldr	r0, [r7, #4]
 801d2de:	f000 f80b 	bl	801d2f8 <tcp_enqueue_flags>
 801d2e2:	4603      	mov	r3, r0
}
 801d2e4:	4618      	mov	r0, r3
 801d2e6:	3714      	adds	r7, #20
 801d2e8:	46bd      	mov	sp, r7
 801d2ea:	bd90      	pop	{r4, r7, pc}
 801d2ec:	0802355c 	.word	0x0802355c
 801d2f0:	080239a8 	.word	0x080239a8
 801d2f4:	080235f4 	.word	0x080235f4

0801d2f8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801d2f8:	b580      	push	{r7, lr}
 801d2fa:	b08a      	sub	sp, #40	; 0x28
 801d2fc:	af02      	add	r7, sp, #8
 801d2fe:	6078      	str	r0, [r7, #4]
 801d300:	460b      	mov	r3, r1
 801d302:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801d304:	2300      	movs	r3, #0
 801d306:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801d308:	2300      	movs	r3, #0
 801d30a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801d30c:	78fb      	ldrb	r3, [r7, #3]
 801d30e:	f003 0303 	and.w	r3, r3, #3
 801d312:	2b00      	cmp	r3, #0
 801d314:	d106      	bne.n	801d324 <tcp_enqueue_flags+0x2c>
 801d316:	4b67      	ldr	r3, [pc, #412]	; (801d4b4 <tcp_enqueue_flags+0x1bc>)
 801d318:	f240 4211 	movw	r2, #1041	; 0x411
 801d31c:	4966      	ldr	r1, [pc, #408]	; (801d4b8 <tcp_enqueue_flags+0x1c0>)
 801d31e:	4867      	ldr	r0, [pc, #412]	; (801d4bc <tcp_enqueue_flags+0x1c4>)
 801d320:	f002 fbf4 	bl	801fb0c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801d324:	687b      	ldr	r3, [r7, #4]
 801d326:	2b00      	cmp	r3, #0
 801d328:	d106      	bne.n	801d338 <tcp_enqueue_flags+0x40>
 801d32a:	4b62      	ldr	r3, [pc, #392]	; (801d4b4 <tcp_enqueue_flags+0x1bc>)
 801d32c:	f240 4213 	movw	r2, #1043	; 0x413
 801d330:	4963      	ldr	r1, [pc, #396]	; (801d4c0 <tcp_enqueue_flags+0x1c8>)
 801d332:	4862      	ldr	r0, [pc, #392]	; (801d4bc <tcp_enqueue_flags+0x1c4>)
 801d334:	f002 fbea 	bl	801fb0c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801d338:	78fb      	ldrb	r3, [r7, #3]
 801d33a:	f003 0302 	and.w	r3, r3, #2
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d001      	beq.n	801d346 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801d342:	2301      	movs	r3, #1
 801d344:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d346:	7ffb      	ldrb	r3, [r7, #31]
 801d348:	009b      	lsls	r3, r3, #2
 801d34a:	b2db      	uxtb	r3, r3
 801d34c:	f003 0304 	and.w	r3, r3, #4
 801d350:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d352:	7dfb      	ldrb	r3, [r7, #23]
 801d354:	b29b      	uxth	r3, r3
 801d356:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d35a:	4619      	mov	r1, r3
 801d35c:	2036      	movs	r0, #54	; 0x36
 801d35e:	f7fa f845 	bl	80173ec <pbuf_alloc>
 801d362:	6138      	str	r0, [r7, #16]
 801d364:	693b      	ldr	r3, [r7, #16]
 801d366:	2b00      	cmp	r3, #0
 801d368:	d109      	bne.n	801d37e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	8b5b      	ldrh	r3, [r3, #26]
 801d36e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d372:	b29a      	uxth	r2, r3
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801d378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d37c:	e095      	b.n	801d4aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801d37e:	693b      	ldr	r3, [r7, #16]
 801d380:	895a      	ldrh	r2, [r3, #10]
 801d382:	7dfb      	ldrb	r3, [r7, #23]
 801d384:	b29b      	uxth	r3, r3
 801d386:	429a      	cmp	r2, r3
 801d388:	d206      	bcs.n	801d398 <tcp_enqueue_flags+0xa0>
 801d38a:	4b4a      	ldr	r3, [pc, #296]	; (801d4b4 <tcp_enqueue_flags+0x1bc>)
 801d38c:	f240 4239 	movw	r2, #1081	; 0x439
 801d390:	494c      	ldr	r1, [pc, #304]	; (801d4c4 <tcp_enqueue_flags+0x1cc>)
 801d392:	484a      	ldr	r0, [pc, #296]	; (801d4bc <tcp_enqueue_flags+0x1c4>)
 801d394:	f002 fbba 	bl	801fb0c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801d39c:	78fa      	ldrb	r2, [r7, #3]
 801d39e:	7ffb      	ldrb	r3, [r7, #31]
 801d3a0:	9300      	str	r3, [sp, #0]
 801d3a2:	460b      	mov	r3, r1
 801d3a4:	6939      	ldr	r1, [r7, #16]
 801d3a6:	6878      	ldr	r0, [r7, #4]
 801d3a8:	f7ff f918 	bl	801c5dc <tcp_create_segment>
 801d3ac:	60f8      	str	r0, [r7, #12]
 801d3ae:	68fb      	ldr	r3, [r7, #12]
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d109      	bne.n	801d3c8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	8b5b      	ldrh	r3, [r3, #26]
 801d3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d3bc:	b29a      	uxth	r2, r3
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801d3c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d3c6:	e070      	b.n	801d4aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	68db      	ldr	r3, [r3, #12]
 801d3cc:	f003 0303 	and.w	r3, r3, #3
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d006      	beq.n	801d3e2 <tcp_enqueue_flags+0xea>
 801d3d4:	4b37      	ldr	r3, [pc, #220]	; (801d4b4 <tcp_enqueue_flags+0x1bc>)
 801d3d6:	f240 4242 	movw	r2, #1090	; 0x442
 801d3da:	493b      	ldr	r1, [pc, #236]	; (801d4c8 <tcp_enqueue_flags+0x1d0>)
 801d3dc:	4837      	ldr	r0, [pc, #220]	; (801d4bc <tcp_enqueue_flags+0x1c4>)
 801d3de:	f002 fb95 	bl	801fb0c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	891b      	ldrh	r3, [r3, #8]
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d006      	beq.n	801d3f8 <tcp_enqueue_flags+0x100>
 801d3ea:	4b32      	ldr	r3, [pc, #200]	; (801d4b4 <tcp_enqueue_flags+0x1bc>)
 801d3ec:	f240 4243 	movw	r2, #1091	; 0x443
 801d3f0:	4936      	ldr	r1, [pc, #216]	; (801d4cc <tcp_enqueue_flags+0x1d4>)
 801d3f2:	4832      	ldr	r0, [pc, #200]	; (801d4bc <tcp_enqueue_flags+0x1c4>)
 801d3f4:	f002 fb8a 	bl	801fb0c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	d103      	bne.n	801d408 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	68fa      	ldr	r2, [r7, #12]
 801d404:	66da      	str	r2, [r3, #108]	; 0x6c
 801d406:	e00d      	b.n	801d424 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d40c:	61bb      	str	r3, [r7, #24]
 801d40e:	e002      	b.n	801d416 <tcp_enqueue_flags+0x11e>
 801d410:	69bb      	ldr	r3, [r7, #24]
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	61bb      	str	r3, [r7, #24]
 801d416:	69bb      	ldr	r3, [r7, #24]
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d1f8      	bne.n	801d410 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801d41e:	69bb      	ldr	r3, [r7, #24]
 801d420:	68fa      	ldr	r2, [r7, #12]
 801d422:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	2200      	movs	r2, #0
 801d428:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801d42c:	78fb      	ldrb	r3, [r7, #3]
 801d42e:	f003 0302 	and.w	r3, r3, #2
 801d432:	2b00      	cmp	r3, #0
 801d434:	d104      	bne.n	801d440 <tcp_enqueue_flags+0x148>
 801d436:	78fb      	ldrb	r3, [r7, #3]
 801d438:	f003 0301 	and.w	r3, r3, #1
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d004      	beq.n	801d44a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d444:	1c5a      	adds	r2, r3, #1
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801d44a:	78fb      	ldrb	r3, [r7, #3]
 801d44c:	f003 0301 	and.w	r3, r3, #1
 801d450:	2b00      	cmp	r3, #0
 801d452:	d006      	beq.n	801d462 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	8b5b      	ldrh	r3, [r3, #26]
 801d458:	f043 0320 	orr.w	r3, r3, #32
 801d45c:	b29a      	uxth	r2, r3
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	685b      	ldr	r3, [r3, #4]
 801d466:	4618      	mov	r0, r3
 801d468:	f7fa fb32 	bl	8017ad0 <pbuf_clen>
 801d46c:	4603      	mov	r3, r0
 801d46e:	461a      	mov	r2, r3
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d476:	4413      	add	r3, r2
 801d478:	b29a      	uxth	r2, r3
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d486:	2b00      	cmp	r3, #0
 801d488:	d00e      	beq.n	801d4a8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d10a      	bne.n	801d4a8 <tcp_enqueue_flags+0x1b0>
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d496:	2b00      	cmp	r3, #0
 801d498:	d106      	bne.n	801d4a8 <tcp_enqueue_flags+0x1b0>
 801d49a:	4b06      	ldr	r3, [pc, #24]	; (801d4b4 <tcp_enqueue_flags+0x1bc>)
 801d49c:	f240 4265 	movw	r2, #1125	; 0x465
 801d4a0:	490b      	ldr	r1, [pc, #44]	; (801d4d0 <tcp_enqueue_flags+0x1d8>)
 801d4a2:	4806      	ldr	r0, [pc, #24]	; (801d4bc <tcp_enqueue_flags+0x1c4>)
 801d4a4:	f002 fb32 	bl	801fb0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801d4a8:	2300      	movs	r3, #0
}
 801d4aa:	4618      	mov	r0, r3
 801d4ac:	3720      	adds	r7, #32
 801d4ae:	46bd      	mov	sp, r7
 801d4b0:	bd80      	pop	{r7, pc}
 801d4b2:	bf00      	nop
 801d4b4:	0802355c 	.word	0x0802355c
 801d4b8:	080239c4 	.word	0x080239c4
 801d4bc:	080235f4 	.word	0x080235f4
 801d4c0:	08023a1c 	.word	0x08023a1c
 801d4c4:	08023a3c 	.word	0x08023a3c
 801d4c8:	08023a78 	.word	0x08023a78
 801d4cc:	08023a90 	.word	0x08023a90
 801d4d0:	08023abc 	.word	0x08023abc

0801d4d4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801d4d4:	b5b0      	push	{r4, r5, r7, lr}
 801d4d6:	b08a      	sub	sp, #40	; 0x28
 801d4d8:	af00      	add	r7, sp, #0
 801d4da:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d106      	bne.n	801d4f0 <tcp_output+0x1c>
 801d4e2:	4b8a      	ldr	r3, [pc, #552]	; (801d70c <tcp_output+0x238>)
 801d4e4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801d4e8:	4989      	ldr	r1, [pc, #548]	; (801d710 <tcp_output+0x23c>)
 801d4ea:	488a      	ldr	r0, [pc, #552]	; (801d714 <tcp_output+0x240>)
 801d4ec:	f002 fb0e 	bl	801fb0c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	7d1b      	ldrb	r3, [r3, #20]
 801d4f4:	2b01      	cmp	r3, #1
 801d4f6:	d106      	bne.n	801d506 <tcp_output+0x32>
 801d4f8:	4b84      	ldr	r3, [pc, #528]	; (801d70c <tcp_output+0x238>)
 801d4fa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801d4fe:	4986      	ldr	r1, [pc, #536]	; (801d718 <tcp_output+0x244>)
 801d500:	4884      	ldr	r0, [pc, #528]	; (801d714 <tcp_output+0x240>)
 801d502:	f002 fb03 	bl	801fb0c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801d506:	4b85      	ldr	r3, [pc, #532]	; (801d71c <tcp_output+0x248>)
 801d508:	681b      	ldr	r3, [r3, #0]
 801d50a:	687a      	ldr	r2, [r7, #4]
 801d50c:	429a      	cmp	r2, r3
 801d50e:	d101      	bne.n	801d514 <tcp_output+0x40>
    return ERR_OK;
 801d510:	2300      	movs	r3, #0
 801d512:	e1ce      	b.n	801d8b2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d520:	4293      	cmp	r3, r2
 801d522:	bf28      	it	cs
 801d524:	4613      	movcs	r3, r2
 801d526:	b29b      	uxth	r3, r3
 801d528:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d52e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d532:	2b00      	cmp	r3, #0
 801d534:	d10b      	bne.n	801d54e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	8b5b      	ldrh	r3, [r3, #26]
 801d53a:	f003 0302 	and.w	r3, r3, #2
 801d53e:	2b00      	cmp	r3, #0
 801d540:	f000 81aa 	beq.w	801d898 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801d544:	6878      	ldr	r0, [r7, #4]
 801d546:	f000 fdcb 	bl	801e0e0 <tcp_send_empty_ack>
 801d54a:	4603      	mov	r3, r0
 801d54c:	e1b1      	b.n	801d8b2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801d54e:	6879      	ldr	r1, [r7, #4]
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	3304      	adds	r3, #4
 801d554:	461a      	mov	r2, r3
 801d556:	6878      	ldr	r0, [r7, #4]
 801d558:	f7ff f824 	bl	801c5a4 <tcp_route>
 801d55c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801d55e:	697b      	ldr	r3, [r7, #20]
 801d560:	2b00      	cmp	r3, #0
 801d562:	d102      	bne.n	801d56a <tcp_output+0x96>
    return ERR_RTE;
 801d564:	f06f 0303 	mvn.w	r3, #3
 801d568:	e1a3      	b.n	801d8b2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d003      	beq.n	801d578 <tcp_output+0xa4>
 801d570:	687b      	ldr	r3, [r7, #4]
 801d572:	681b      	ldr	r3, [r3, #0]
 801d574:	2b00      	cmp	r3, #0
 801d576:	d111      	bne.n	801d59c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801d578:	697b      	ldr	r3, [r7, #20]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d002      	beq.n	801d584 <tcp_output+0xb0>
 801d57e:	697b      	ldr	r3, [r7, #20]
 801d580:	3304      	adds	r3, #4
 801d582:	e000      	b.n	801d586 <tcp_output+0xb2>
 801d584:	2300      	movs	r3, #0
 801d586:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801d588:	693b      	ldr	r3, [r7, #16]
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d102      	bne.n	801d594 <tcp_output+0xc0>
      return ERR_RTE;
 801d58e:	f06f 0303 	mvn.w	r3, #3
 801d592:	e18e      	b.n	801d8b2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801d594:	693b      	ldr	r3, [r7, #16]
 801d596:	681a      	ldr	r2, [r3, #0]
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d59e:	68db      	ldr	r3, [r3, #12]
 801d5a0:	685b      	ldr	r3, [r3, #4]
 801d5a2:	4618      	mov	r0, r3
 801d5a4:	f7f6 fa47 	bl	8013a36 <lwip_htonl>
 801d5a8:	4602      	mov	r2, r0
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d5ae:	1ad3      	subs	r3, r2, r3
 801d5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d5b2:	8912      	ldrh	r2, [r2, #8]
 801d5b4:	4413      	add	r3, r2
 801d5b6:	69ba      	ldr	r2, [r7, #24]
 801d5b8:	429a      	cmp	r2, r3
 801d5ba:	d227      	bcs.n	801d60c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d5c2:	461a      	mov	r2, r3
 801d5c4:	69bb      	ldr	r3, [r7, #24]
 801d5c6:	4293      	cmp	r3, r2
 801d5c8:	d114      	bne.n	801d5f4 <tcp_output+0x120>
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	d110      	bne.n	801d5f4 <tcp_output+0x120>
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d10b      	bne.n	801d5f4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	2200      	movs	r2, #0
 801d5e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	2201      	movs	r2, #1
 801d5e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	2200      	movs	r2, #0
 801d5f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	8b5b      	ldrh	r3, [r3, #26]
 801d5f8:	f003 0302 	and.w	r3, r3, #2
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	f000 814d 	beq.w	801d89c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801d602:	6878      	ldr	r0, [r7, #4]
 801d604:	f000 fd6c 	bl	801e0e0 <tcp_send_empty_ack>
 801d608:	4603      	mov	r3, r0
 801d60a:	e152      	b.n	801d8b2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	2200      	movs	r2, #0
 801d610:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d618:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801d61a:	6a3b      	ldr	r3, [r7, #32]
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	f000 811c 	beq.w	801d85a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801d622:	e002      	b.n	801d62a <tcp_output+0x156>
 801d624:	6a3b      	ldr	r3, [r7, #32]
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	623b      	str	r3, [r7, #32]
 801d62a:	6a3b      	ldr	r3, [r7, #32]
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d1f8      	bne.n	801d624 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801d632:	e112      	b.n	801d85a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d636:	68db      	ldr	r3, [r3, #12]
 801d638:	899b      	ldrh	r3, [r3, #12]
 801d63a:	b29b      	uxth	r3, r3
 801d63c:	4618      	mov	r0, r3
 801d63e:	f7f6 f9e5 	bl	8013a0c <lwip_htons>
 801d642:	4603      	mov	r3, r0
 801d644:	b2db      	uxtb	r3, r3
 801d646:	f003 0304 	and.w	r3, r3, #4
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	d006      	beq.n	801d65c <tcp_output+0x188>
 801d64e:	4b2f      	ldr	r3, [pc, #188]	; (801d70c <tcp_output+0x238>)
 801d650:	f240 5236 	movw	r2, #1334	; 0x536
 801d654:	4932      	ldr	r1, [pc, #200]	; (801d720 <tcp_output+0x24c>)
 801d656:	482f      	ldr	r0, [pc, #188]	; (801d714 <tcp_output+0x240>)
 801d658:	f002 fa58 	bl	801fb0c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d660:	2b00      	cmp	r3, #0
 801d662:	d01f      	beq.n	801d6a4 <tcp_output+0x1d0>
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	8b5b      	ldrh	r3, [r3, #26]
 801d668:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	d119      	bne.n	801d6a4 <tcp_output+0x1d0>
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d674:	2b00      	cmp	r3, #0
 801d676:	d00b      	beq.n	801d690 <tcp_output+0x1bc>
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d110      	bne.n	801d6a4 <tcp_output+0x1d0>
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d686:	891a      	ldrh	r2, [r3, #8]
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d68c:	429a      	cmp	r2, r3
 801d68e:	d209      	bcs.n	801d6a4 <tcp_output+0x1d0>
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801d696:	2b00      	cmp	r3, #0
 801d698:	d004      	beq.n	801d6a4 <tcp_output+0x1d0>
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d6a0:	2b0f      	cmp	r3, #15
 801d6a2:	d901      	bls.n	801d6a8 <tcp_output+0x1d4>
 801d6a4:	2301      	movs	r3, #1
 801d6a6:	e000      	b.n	801d6aa <tcp_output+0x1d6>
 801d6a8:	2300      	movs	r3, #0
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d106      	bne.n	801d6bc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	8b5b      	ldrh	r3, [r3, #26]
 801d6b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	f000 80e4 	beq.w	801d884 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	7d1b      	ldrb	r3, [r3, #20]
 801d6c0:	2b02      	cmp	r3, #2
 801d6c2:	d00d      	beq.n	801d6e0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6c6:	68db      	ldr	r3, [r3, #12]
 801d6c8:	899b      	ldrh	r3, [r3, #12]
 801d6ca:	b29c      	uxth	r4, r3
 801d6cc:	2010      	movs	r0, #16
 801d6ce:	f7f6 f99d 	bl	8013a0c <lwip_htons>
 801d6d2:	4603      	mov	r3, r0
 801d6d4:	461a      	mov	r2, r3
 801d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6d8:	68db      	ldr	r3, [r3, #12]
 801d6da:	4322      	orrs	r2, r4
 801d6dc:	b292      	uxth	r2, r2
 801d6de:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801d6e0:	697a      	ldr	r2, [r7, #20]
 801d6e2:	6879      	ldr	r1, [r7, #4]
 801d6e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d6e6:	f000 f909 	bl	801d8fc <tcp_output_segment>
 801d6ea:	4603      	mov	r3, r0
 801d6ec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801d6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d016      	beq.n	801d724 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	8b5b      	ldrh	r3, [r3, #26]
 801d6fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d6fe:	b29a      	uxth	r2, r3
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	835a      	strh	r2, [r3, #26]
      return err;
 801d704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d708:	e0d3      	b.n	801d8b2 <tcp_output+0x3de>
 801d70a:	bf00      	nop
 801d70c:	0802355c 	.word	0x0802355c
 801d710:	08023ae4 	.word	0x08023ae4
 801d714:	080235f4 	.word	0x080235f4
 801d718:	08023afc 	.word	0x08023afc
 801d71c:	2400f96c 	.word	0x2400f96c
 801d720:	08023b24 	.word	0x08023b24
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d726:	681a      	ldr	r2, [r3, #0]
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	7d1b      	ldrb	r3, [r3, #20]
 801d730:	2b02      	cmp	r3, #2
 801d732:	d006      	beq.n	801d742 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	8b5b      	ldrh	r3, [r3, #26]
 801d738:	f023 0303 	bic.w	r3, r3, #3
 801d73c:	b29a      	uxth	r2, r3
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d744:	68db      	ldr	r3, [r3, #12]
 801d746:	685b      	ldr	r3, [r3, #4]
 801d748:	4618      	mov	r0, r3
 801d74a:	f7f6 f974 	bl	8013a36 <lwip_htonl>
 801d74e:	4604      	mov	r4, r0
 801d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d752:	891b      	ldrh	r3, [r3, #8]
 801d754:	461d      	mov	r5, r3
 801d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d758:	68db      	ldr	r3, [r3, #12]
 801d75a:	899b      	ldrh	r3, [r3, #12]
 801d75c:	b29b      	uxth	r3, r3
 801d75e:	4618      	mov	r0, r3
 801d760:	f7f6 f954 	bl	8013a0c <lwip_htons>
 801d764:	4603      	mov	r3, r0
 801d766:	b2db      	uxtb	r3, r3
 801d768:	f003 0303 	and.w	r3, r3, #3
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	d001      	beq.n	801d774 <tcp_output+0x2a0>
 801d770:	2301      	movs	r3, #1
 801d772:	e000      	b.n	801d776 <tcp_output+0x2a2>
 801d774:	2300      	movs	r3, #0
 801d776:	442b      	add	r3, r5
 801d778:	4423      	add	r3, r4
 801d77a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d780:	68bb      	ldr	r3, [r7, #8]
 801d782:	1ad3      	subs	r3, r2, r3
 801d784:	2b00      	cmp	r3, #0
 801d786:	da02      	bge.n	801d78e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	68ba      	ldr	r2, [r7, #8]
 801d78c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801d78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d790:	891b      	ldrh	r3, [r3, #8]
 801d792:	461c      	mov	r4, r3
 801d794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d796:	68db      	ldr	r3, [r3, #12]
 801d798:	899b      	ldrh	r3, [r3, #12]
 801d79a:	b29b      	uxth	r3, r3
 801d79c:	4618      	mov	r0, r3
 801d79e:	f7f6 f935 	bl	8013a0c <lwip_htons>
 801d7a2:	4603      	mov	r3, r0
 801d7a4:	b2db      	uxtb	r3, r3
 801d7a6:	f003 0303 	and.w	r3, r3, #3
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d001      	beq.n	801d7b2 <tcp_output+0x2de>
 801d7ae:	2301      	movs	r3, #1
 801d7b0:	e000      	b.n	801d7b4 <tcp_output+0x2e0>
 801d7b2:	2300      	movs	r3, #0
 801d7b4:	4423      	add	r3, r4
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	d049      	beq.n	801d84e <tcp_output+0x37a>
      seg->next = NULL;
 801d7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7bc:	2200      	movs	r2, #0
 801d7be:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d105      	bne.n	801d7d4 <tcp_output+0x300>
        pcb->unacked = seg;
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d7cc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801d7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7d0:	623b      	str	r3, [r7, #32]
 801d7d2:	e03f      	b.n	801d854 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801d7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7d6:	68db      	ldr	r3, [r3, #12]
 801d7d8:	685b      	ldr	r3, [r3, #4]
 801d7da:	4618      	mov	r0, r3
 801d7dc:	f7f6 f92b 	bl	8013a36 <lwip_htonl>
 801d7e0:	4604      	mov	r4, r0
 801d7e2:	6a3b      	ldr	r3, [r7, #32]
 801d7e4:	68db      	ldr	r3, [r3, #12]
 801d7e6:	685b      	ldr	r3, [r3, #4]
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	f7f6 f924 	bl	8013a36 <lwip_htonl>
 801d7ee:	4603      	mov	r3, r0
 801d7f0:	1ae3      	subs	r3, r4, r3
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	da24      	bge.n	801d840 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	3370      	adds	r3, #112	; 0x70
 801d7fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801d7fc:	e002      	b.n	801d804 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801d7fe:	69fb      	ldr	r3, [r7, #28]
 801d800:	681b      	ldr	r3, [r3, #0]
 801d802:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801d804:	69fb      	ldr	r3, [r7, #28]
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	2b00      	cmp	r3, #0
 801d80a:	d011      	beq.n	801d830 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801d80c:	69fb      	ldr	r3, [r7, #28]
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	68db      	ldr	r3, [r3, #12]
 801d812:	685b      	ldr	r3, [r3, #4]
 801d814:	4618      	mov	r0, r3
 801d816:	f7f6 f90e 	bl	8013a36 <lwip_htonl>
 801d81a:	4604      	mov	r4, r0
 801d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d81e:	68db      	ldr	r3, [r3, #12]
 801d820:	685b      	ldr	r3, [r3, #4]
 801d822:	4618      	mov	r0, r3
 801d824:	f7f6 f907 	bl	8013a36 <lwip_htonl>
 801d828:	4603      	mov	r3, r0
 801d82a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	dbe6      	blt.n	801d7fe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801d830:	69fb      	ldr	r3, [r7, #28]
 801d832:	681a      	ldr	r2, [r3, #0]
 801d834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d836:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801d838:	69fb      	ldr	r3, [r7, #28]
 801d83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d83c:	601a      	str	r2, [r3, #0]
 801d83e:	e009      	b.n	801d854 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801d840:	6a3b      	ldr	r3, [r7, #32]
 801d842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d844:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801d846:	6a3b      	ldr	r3, [r7, #32]
 801d848:	681b      	ldr	r3, [r3, #0]
 801d84a:	623b      	str	r3, [r7, #32]
 801d84c:	e002      	b.n	801d854 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801d84e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d850:	f7fb ff19 	bl	8019686 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d858:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801d85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d012      	beq.n	801d886 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801d860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d862:	68db      	ldr	r3, [r3, #12]
 801d864:	685b      	ldr	r3, [r3, #4]
 801d866:	4618      	mov	r0, r3
 801d868:	f7f6 f8e5 	bl	8013a36 <lwip_htonl>
 801d86c:	4602      	mov	r2, r0
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d872:	1ad3      	subs	r3, r2, r3
 801d874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d876:	8912      	ldrh	r2, [r2, #8]
 801d878:	4413      	add	r3, r2
  while (seg != NULL &&
 801d87a:	69ba      	ldr	r2, [r7, #24]
 801d87c:	429a      	cmp	r2, r3
 801d87e:	f4bf aed9 	bcs.w	801d634 <tcp_output+0x160>
 801d882:	e000      	b.n	801d886 <tcp_output+0x3b2>
      break;
 801d884:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d108      	bne.n	801d8a0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	2200      	movs	r2, #0
 801d892:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801d896:	e004      	b.n	801d8a2 <tcp_output+0x3ce>
    goto output_done;
 801d898:	bf00      	nop
 801d89a:	e002      	b.n	801d8a2 <tcp_output+0x3ce>
    goto output_done;
 801d89c:	bf00      	nop
 801d89e:	e000      	b.n	801d8a2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801d8a0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	8b5b      	ldrh	r3, [r3, #26]
 801d8a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d8aa:	b29a      	uxth	r2, r3
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801d8b0:	2300      	movs	r3, #0
}
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	3728      	adds	r7, #40	; 0x28
 801d8b6:	46bd      	mov	sp, r7
 801d8b8:	bdb0      	pop	{r4, r5, r7, pc}
 801d8ba:	bf00      	nop

0801d8bc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801d8bc:	b580      	push	{r7, lr}
 801d8be:	b082      	sub	sp, #8
 801d8c0:	af00      	add	r7, sp, #0
 801d8c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	d106      	bne.n	801d8d8 <tcp_output_segment_busy+0x1c>
 801d8ca:	4b09      	ldr	r3, [pc, #36]	; (801d8f0 <tcp_output_segment_busy+0x34>)
 801d8cc:	f240 529a 	movw	r2, #1434	; 0x59a
 801d8d0:	4908      	ldr	r1, [pc, #32]	; (801d8f4 <tcp_output_segment_busy+0x38>)
 801d8d2:	4809      	ldr	r0, [pc, #36]	; (801d8f8 <tcp_output_segment_busy+0x3c>)
 801d8d4:	f002 f91a 	bl	801fb0c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	685b      	ldr	r3, [r3, #4]
 801d8dc:	7b9b      	ldrb	r3, [r3, #14]
 801d8de:	2b01      	cmp	r3, #1
 801d8e0:	d001      	beq.n	801d8e6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801d8e2:	2301      	movs	r3, #1
 801d8e4:	e000      	b.n	801d8e8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801d8e6:	2300      	movs	r3, #0
}
 801d8e8:	4618      	mov	r0, r3
 801d8ea:	3708      	adds	r7, #8
 801d8ec:	46bd      	mov	sp, r7
 801d8ee:	bd80      	pop	{r7, pc}
 801d8f0:	0802355c 	.word	0x0802355c
 801d8f4:	08023b3c 	.word	0x08023b3c
 801d8f8:	080235f4 	.word	0x080235f4

0801d8fc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801d8fc:	b5b0      	push	{r4, r5, r7, lr}
 801d8fe:	b08c      	sub	sp, #48	; 0x30
 801d900:	af04      	add	r7, sp, #16
 801d902:	60f8      	str	r0, [r7, #12]
 801d904:	60b9      	str	r1, [r7, #8]
 801d906:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	2b00      	cmp	r3, #0
 801d90c:	d106      	bne.n	801d91c <tcp_output_segment+0x20>
 801d90e:	4b63      	ldr	r3, [pc, #396]	; (801da9c <tcp_output_segment+0x1a0>)
 801d910:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801d914:	4962      	ldr	r1, [pc, #392]	; (801daa0 <tcp_output_segment+0x1a4>)
 801d916:	4863      	ldr	r0, [pc, #396]	; (801daa4 <tcp_output_segment+0x1a8>)
 801d918:	f002 f8f8 	bl	801fb0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801d91c:	68bb      	ldr	r3, [r7, #8]
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d106      	bne.n	801d930 <tcp_output_segment+0x34>
 801d922:	4b5e      	ldr	r3, [pc, #376]	; (801da9c <tcp_output_segment+0x1a0>)
 801d924:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801d928:	495f      	ldr	r1, [pc, #380]	; (801daa8 <tcp_output_segment+0x1ac>)
 801d92a:	485e      	ldr	r0, [pc, #376]	; (801daa4 <tcp_output_segment+0x1a8>)
 801d92c:	f002 f8ee 	bl	801fb0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	2b00      	cmp	r3, #0
 801d934:	d106      	bne.n	801d944 <tcp_output_segment+0x48>
 801d936:	4b59      	ldr	r3, [pc, #356]	; (801da9c <tcp_output_segment+0x1a0>)
 801d938:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801d93c:	495b      	ldr	r1, [pc, #364]	; (801daac <tcp_output_segment+0x1b0>)
 801d93e:	4859      	ldr	r0, [pc, #356]	; (801daa4 <tcp_output_segment+0x1a8>)
 801d940:	f002 f8e4 	bl	801fb0c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801d944:	68f8      	ldr	r0, [r7, #12]
 801d946:	f7ff ffb9 	bl	801d8bc <tcp_output_segment_busy>
 801d94a:	4603      	mov	r3, r0
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d001      	beq.n	801d954 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801d950:	2300      	movs	r3, #0
 801d952:	e09f      	b.n	801da94 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801d954:	68bb      	ldr	r3, [r7, #8]
 801d956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	68dc      	ldr	r4, [r3, #12]
 801d95c:	4610      	mov	r0, r2
 801d95e:	f7f6 f86a 	bl	8013a36 <lwip_htonl>
 801d962:	4603      	mov	r3, r0
 801d964:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801d966:	68bb      	ldr	r3, [r7, #8]
 801d968:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	68dc      	ldr	r4, [r3, #12]
 801d96e:	4610      	mov	r0, r2
 801d970:	f7f6 f84c 	bl	8013a0c <lwip_htons>
 801d974:	4603      	mov	r3, r0
 801d976:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d978:	68bb      	ldr	r3, [r7, #8]
 801d97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d97c:	68ba      	ldr	r2, [r7, #8]
 801d97e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801d980:	441a      	add	r2, r3
 801d982:	68bb      	ldr	r3, [r7, #8]
 801d984:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	68db      	ldr	r3, [r3, #12]
 801d98a:	3314      	adds	r3, #20
 801d98c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	7a9b      	ldrb	r3, [r3, #10]
 801d992:	f003 0301 	and.w	r3, r3, #1
 801d996:	2b00      	cmp	r3, #0
 801d998:	d015      	beq.n	801d9c6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801d99a:	68bb      	ldr	r3, [r7, #8]
 801d99c:	3304      	adds	r3, #4
 801d99e:	461a      	mov	r2, r3
 801d9a0:	6879      	ldr	r1, [r7, #4]
 801d9a2:	f240 50b4 	movw	r0, #1460	; 0x5b4
 801d9a6:	f7fc fa33 	bl	8019e10 <tcp_eff_send_mss_netif>
 801d9aa:	4603      	mov	r3, r0
 801d9ac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801d9ae:	8b7b      	ldrh	r3, [r7, #26]
 801d9b0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801d9b4:	4618      	mov	r0, r3
 801d9b6:	f7f6 f83e 	bl	8013a36 <lwip_htonl>
 801d9ba:	4602      	mov	r2, r0
 801d9bc:	69fb      	ldr	r3, [r7, #28]
 801d9be:	601a      	str	r2, [r3, #0]
    opts += 1;
 801d9c0:	69fb      	ldr	r3, [r7, #28]
 801d9c2:	3304      	adds	r3, #4
 801d9c4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801d9c6:	68bb      	ldr	r3, [r7, #8]
 801d9c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	da02      	bge.n	801d9d6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801d9d0:	68bb      	ldr	r3, [r7, #8]
 801d9d2:	2200      	movs	r2, #0
 801d9d4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801d9d6:	68bb      	ldr	r3, [r7, #8]
 801d9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d9da:	2b00      	cmp	r3, #0
 801d9dc:	d10c      	bne.n	801d9f8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801d9de:	4b34      	ldr	r3, [pc, #208]	; (801dab0 <tcp_output_segment+0x1b4>)
 801d9e0:	681a      	ldr	r2, [r3, #0]
 801d9e2:	68bb      	ldr	r3, [r7, #8]
 801d9e4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	68db      	ldr	r3, [r3, #12]
 801d9ea:	685b      	ldr	r3, [r3, #4]
 801d9ec:	4618      	mov	r0, r3
 801d9ee:	f7f6 f822 	bl	8013a36 <lwip_htonl>
 801d9f2:	4602      	mov	r2, r0
 801d9f4:	68bb      	ldr	r3, [r7, #8]
 801d9f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801d9f8:	68fb      	ldr	r3, [r7, #12]
 801d9fa:	68da      	ldr	r2, [r3, #12]
 801d9fc:	68fb      	ldr	r3, [r7, #12]
 801d9fe:	685b      	ldr	r3, [r3, #4]
 801da00:	685b      	ldr	r3, [r3, #4]
 801da02:	1ad3      	subs	r3, r2, r3
 801da04:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801da06:	68fb      	ldr	r3, [r7, #12]
 801da08:	685b      	ldr	r3, [r3, #4]
 801da0a:	8959      	ldrh	r1, [r3, #10]
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	685b      	ldr	r3, [r3, #4]
 801da10:	8b3a      	ldrh	r2, [r7, #24]
 801da12:	1a8a      	subs	r2, r1, r2
 801da14:	b292      	uxth	r2, r2
 801da16:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	685b      	ldr	r3, [r3, #4]
 801da1c:	8919      	ldrh	r1, [r3, #8]
 801da1e:	68fb      	ldr	r3, [r7, #12]
 801da20:	685b      	ldr	r3, [r3, #4]
 801da22:	8b3a      	ldrh	r2, [r7, #24]
 801da24:	1a8a      	subs	r2, r1, r2
 801da26:	b292      	uxth	r2, r2
 801da28:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	685b      	ldr	r3, [r3, #4]
 801da2e:	68fa      	ldr	r2, [r7, #12]
 801da30:	68d2      	ldr	r2, [r2, #12]
 801da32:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	68db      	ldr	r3, [r3, #12]
 801da38:	2200      	movs	r2, #0
 801da3a:	741a      	strb	r2, [r3, #16]
 801da3c:	2200      	movs	r2, #0
 801da3e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801da40:	68fb      	ldr	r3, [r7, #12]
 801da42:	68db      	ldr	r3, [r3, #12]
 801da44:	f103 0214 	add.w	r2, r3, #20
 801da48:	68fb      	ldr	r3, [r7, #12]
 801da4a:	7a9b      	ldrb	r3, [r3, #10]
 801da4c:	009b      	lsls	r3, r3, #2
 801da4e:	f003 0304 	and.w	r3, r3, #4
 801da52:	4413      	add	r3, r2
 801da54:	69fa      	ldr	r2, [r7, #28]
 801da56:	429a      	cmp	r2, r3
 801da58:	d006      	beq.n	801da68 <tcp_output_segment+0x16c>
 801da5a:	4b10      	ldr	r3, [pc, #64]	; (801da9c <tcp_output_segment+0x1a0>)
 801da5c:	f240 621c 	movw	r2, #1564	; 0x61c
 801da60:	4914      	ldr	r1, [pc, #80]	; (801dab4 <tcp_output_segment+0x1b8>)
 801da62:	4810      	ldr	r0, [pc, #64]	; (801daa4 <tcp_output_segment+0x1a8>)
 801da64:	f002 f852 	bl	801fb0c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	6858      	ldr	r0, [r3, #4]
 801da6c:	68b9      	ldr	r1, [r7, #8]
 801da6e:	68bb      	ldr	r3, [r7, #8]
 801da70:	1d1c      	adds	r4, r3, #4
 801da72:	68bb      	ldr	r3, [r7, #8]
 801da74:	7add      	ldrb	r5, [r3, #11]
 801da76:	68bb      	ldr	r3, [r7, #8]
 801da78:	7a9b      	ldrb	r3, [r3, #10]
 801da7a:	687a      	ldr	r2, [r7, #4]
 801da7c:	9202      	str	r2, [sp, #8]
 801da7e:	2206      	movs	r2, #6
 801da80:	9201      	str	r2, [sp, #4]
 801da82:	9300      	str	r3, [sp, #0]
 801da84:	462b      	mov	r3, r5
 801da86:	4622      	mov	r2, r4
 801da88:	f7f7 fc56 	bl	8015338 <ip4_output_if>
 801da8c:	4603      	mov	r3, r0
 801da8e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801da90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801da94:	4618      	mov	r0, r3
 801da96:	3720      	adds	r7, #32
 801da98:	46bd      	mov	sp, r7
 801da9a:	bdb0      	pop	{r4, r5, r7, pc}
 801da9c:	0802355c 	.word	0x0802355c
 801daa0:	08023b64 	.word	0x08023b64
 801daa4:	080235f4 	.word	0x080235f4
 801daa8:	08023b84 	.word	0x08023b84
 801daac:	08023ba4 	.word	0x08023ba4
 801dab0:	2400f920 	.word	0x2400f920
 801dab4:	08023bc8 	.word	0x08023bc8

0801dab8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801dab8:	b5b0      	push	{r4, r5, r7, lr}
 801daba:	b084      	sub	sp, #16
 801dabc:	af00      	add	r7, sp, #0
 801dabe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	d106      	bne.n	801dad4 <tcp_rexmit_rto_prepare+0x1c>
 801dac6:	4b31      	ldr	r3, [pc, #196]	; (801db8c <tcp_rexmit_rto_prepare+0xd4>)
 801dac8:	f240 6263 	movw	r2, #1635	; 0x663
 801dacc:	4930      	ldr	r1, [pc, #192]	; (801db90 <tcp_rexmit_rto_prepare+0xd8>)
 801dace:	4831      	ldr	r0, [pc, #196]	; (801db94 <tcp_rexmit_rto_prepare+0xdc>)
 801dad0:	f002 f81c 	bl	801fb0c <iprintf>

  if (pcb->unacked == NULL) {
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dad8:	2b00      	cmp	r3, #0
 801dada:	d102      	bne.n	801dae2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801dadc:	f06f 0305 	mvn.w	r3, #5
 801dae0:	e050      	b.n	801db84 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dae6:	60fb      	str	r3, [r7, #12]
 801dae8:	e00b      	b.n	801db02 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801daea:	68f8      	ldr	r0, [r7, #12]
 801daec:	f7ff fee6 	bl	801d8bc <tcp_output_segment_busy>
 801daf0:	4603      	mov	r3, r0
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d002      	beq.n	801dafc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801daf6:	f06f 0305 	mvn.w	r3, #5
 801dafa:	e043      	b.n	801db84 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	60fb      	str	r3, [r7, #12]
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	2b00      	cmp	r3, #0
 801db08:	d1ef      	bne.n	801daea <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801db0a:	68f8      	ldr	r0, [r7, #12]
 801db0c:	f7ff fed6 	bl	801d8bc <tcp_output_segment_busy>
 801db10:	4603      	mov	r3, r0
 801db12:	2b00      	cmp	r3, #0
 801db14:	d002      	beq.n	801db1c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801db16:	f06f 0305 	mvn.w	r3, #5
 801db1a:	e033      	b.n	801db84 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	2200      	movs	r2, #0
 801db30:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	8b5b      	ldrh	r3, [r3, #26]
 801db36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801db3a:	b29a      	uxth	r2, r3
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	68db      	ldr	r3, [r3, #12]
 801db44:	685b      	ldr	r3, [r3, #4]
 801db46:	4618      	mov	r0, r3
 801db48:	f7f5 ff75 	bl	8013a36 <lwip_htonl>
 801db4c:	4604      	mov	r4, r0
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	891b      	ldrh	r3, [r3, #8]
 801db52:	461d      	mov	r5, r3
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	68db      	ldr	r3, [r3, #12]
 801db58:	899b      	ldrh	r3, [r3, #12]
 801db5a:	b29b      	uxth	r3, r3
 801db5c:	4618      	mov	r0, r3
 801db5e:	f7f5 ff55 	bl	8013a0c <lwip_htons>
 801db62:	4603      	mov	r3, r0
 801db64:	b2db      	uxtb	r3, r3
 801db66:	f003 0303 	and.w	r3, r3, #3
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	d001      	beq.n	801db72 <tcp_rexmit_rto_prepare+0xba>
 801db6e:	2301      	movs	r3, #1
 801db70:	e000      	b.n	801db74 <tcp_rexmit_rto_prepare+0xbc>
 801db72:	2300      	movs	r3, #0
 801db74:	442b      	add	r3, r5
 801db76:	18e2      	adds	r2, r4, r3
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801db7c:	687b      	ldr	r3, [r7, #4]
 801db7e:	2200      	movs	r2, #0
 801db80:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801db82:	2300      	movs	r3, #0
}
 801db84:	4618      	mov	r0, r3
 801db86:	3710      	adds	r7, #16
 801db88:	46bd      	mov	sp, r7
 801db8a:	bdb0      	pop	{r4, r5, r7, pc}
 801db8c:	0802355c 	.word	0x0802355c
 801db90:	08023bdc 	.word	0x08023bdc
 801db94:	080235f4 	.word	0x080235f4

0801db98 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801db98:	b580      	push	{r7, lr}
 801db9a:	b082      	sub	sp, #8
 801db9c:	af00      	add	r7, sp, #0
 801db9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	d106      	bne.n	801dbb4 <tcp_rexmit_rto_commit+0x1c>
 801dba6:	4b0d      	ldr	r3, [pc, #52]	; (801dbdc <tcp_rexmit_rto_commit+0x44>)
 801dba8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801dbac:	490c      	ldr	r1, [pc, #48]	; (801dbe0 <tcp_rexmit_rto_commit+0x48>)
 801dbae:	480d      	ldr	r0, [pc, #52]	; (801dbe4 <tcp_rexmit_rto_commit+0x4c>)
 801dbb0:	f001 ffac 	bl	801fb0c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dbba:	2bff      	cmp	r3, #255	; 0xff
 801dbbc:	d007      	beq.n	801dbce <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801dbbe:	687b      	ldr	r3, [r7, #4]
 801dbc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dbc4:	3301      	adds	r3, #1
 801dbc6:	b2da      	uxtb	r2, r3
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801dbce:	6878      	ldr	r0, [r7, #4]
 801dbd0:	f7ff fc80 	bl	801d4d4 <tcp_output>
}
 801dbd4:	bf00      	nop
 801dbd6:	3708      	adds	r7, #8
 801dbd8:	46bd      	mov	sp, r7
 801dbda:	bd80      	pop	{r7, pc}
 801dbdc:	0802355c 	.word	0x0802355c
 801dbe0:	08023c00 	.word	0x08023c00
 801dbe4:	080235f4 	.word	0x080235f4

0801dbe8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801dbe8:	b580      	push	{r7, lr}
 801dbea:	b082      	sub	sp, #8
 801dbec:	af00      	add	r7, sp, #0
 801dbee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	d106      	bne.n	801dc04 <tcp_rexmit_rto+0x1c>
 801dbf6:	4b0a      	ldr	r3, [pc, #40]	; (801dc20 <tcp_rexmit_rto+0x38>)
 801dbf8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801dbfc:	4909      	ldr	r1, [pc, #36]	; (801dc24 <tcp_rexmit_rto+0x3c>)
 801dbfe:	480a      	ldr	r0, [pc, #40]	; (801dc28 <tcp_rexmit_rto+0x40>)
 801dc00:	f001 ff84 	bl	801fb0c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801dc04:	6878      	ldr	r0, [r7, #4]
 801dc06:	f7ff ff57 	bl	801dab8 <tcp_rexmit_rto_prepare>
 801dc0a:	4603      	mov	r3, r0
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d102      	bne.n	801dc16 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801dc10:	6878      	ldr	r0, [r7, #4]
 801dc12:	f7ff ffc1 	bl	801db98 <tcp_rexmit_rto_commit>
  }
}
 801dc16:	bf00      	nop
 801dc18:	3708      	adds	r7, #8
 801dc1a:	46bd      	mov	sp, r7
 801dc1c:	bd80      	pop	{r7, pc}
 801dc1e:	bf00      	nop
 801dc20:	0802355c 	.word	0x0802355c
 801dc24:	08023c24 	.word	0x08023c24
 801dc28:	080235f4 	.word	0x080235f4

0801dc2c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801dc2c:	b590      	push	{r4, r7, lr}
 801dc2e:	b085      	sub	sp, #20
 801dc30:	af00      	add	r7, sp, #0
 801dc32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	d106      	bne.n	801dc48 <tcp_rexmit+0x1c>
 801dc3a:	4b2f      	ldr	r3, [pc, #188]	; (801dcf8 <tcp_rexmit+0xcc>)
 801dc3c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801dc40:	492e      	ldr	r1, [pc, #184]	; (801dcfc <tcp_rexmit+0xd0>)
 801dc42:	482f      	ldr	r0, [pc, #188]	; (801dd00 <tcp_rexmit+0xd4>)
 801dc44:	f001 ff62 	bl	801fb0c <iprintf>

  if (pcb->unacked == NULL) {
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d102      	bne.n	801dc56 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801dc50:	f06f 0305 	mvn.w	r3, #5
 801dc54:	e04c      	b.n	801dcf0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801dc56:	687b      	ldr	r3, [r7, #4]
 801dc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dc5a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801dc5c:	68b8      	ldr	r0, [r7, #8]
 801dc5e:	f7ff fe2d 	bl	801d8bc <tcp_output_segment_busy>
 801dc62:	4603      	mov	r3, r0
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	d002      	beq.n	801dc6e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801dc68:	f06f 0305 	mvn.w	r3, #5
 801dc6c:	e040      	b.n	801dcf0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801dc6e:	68bb      	ldr	r3, [r7, #8]
 801dc70:	681a      	ldr	r2, [r3, #0]
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	336c      	adds	r3, #108	; 0x6c
 801dc7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801dc7c:	e002      	b.n	801dc84 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801dc7e:	68fb      	ldr	r3, [r7, #12]
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801dc84:	68fb      	ldr	r3, [r7, #12]
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d011      	beq.n	801dcb0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	68db      	ldr	r3, [r3, #12]
 801dc92:	685b      	ldr	r3, [r3, #4]
 801dc94:	4618      	mov	r0, r3
 801dc96:	f7f5 fece 	bl	8013a36 <lwip_htonl>
 801dc9a:	4604      	mov	r4, r0
 801dc9c:	68bb      	ldr	r3, [r7, #8]
 801dc9e:	68db      	ldr	r3, [r3, #12]
 801dca0:	685b      	ldr	r3, [r3, #4]
 801dca2:	4618      	mov	r0, r3
 801dca4:	f7f5 fec7 	bl	8013a36 <lwip_htonl>
 801dca8:	4603      	mov	r3, r0
 801dcaa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801dcac:	2b00      	cmp	r3, #0
 801dcae:	dbe6      	blt.n	801dc7e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801dcb0:	68fb      	ldr	r3, [r7, #12]
 801dcb2:	681a      	ldr	r2, [r3, #0]
 801dcb4:	68bb      	ldr	r3, [r7, #8]
 801dcb6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801dcb8:	68fb      	ldr	r3, [r7, #12]
 801dcba:	68ba      	ldr	r2, [r7, #8]
 801dcbc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801dcbe:	68bb      	ldr	r3, [r7, #8]
 801dcc0:	681b      	ldr	r3, [r3, #0]
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d103      	bne.n	801dcce <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	2200      	movs	r2, #0
 801dcca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dcd4:	2bff      	cmp	r3, #255	; 0xff
 801dcd6:	d007      	beq.n	801dce8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dcde:	3301      	adds	r3, #1
 801dce0:	b2da      	uxtb	r2, r3
 801dce2:	687b      	ldr	r3, [r7, #4]
 801dce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	2200      	movs	r2, #0
 801dcec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801dcee:	2300      	movs	r3, #0
}
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	3714      	adds	r7, #20
 801dcf4:	46bd      	mov	sp, r7
 801dcf6:	bd90      	pop	{r4, r7, pc}
 801dcf8:	0802355c 	.word	0x0802355c
 801dcfc:	08023c40 	.word	0x08023c40
 801dd00:	080235f4 	.word	0x080235f4

0801dd04 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801dd04:	b580      	push	{r7, lr}
 801dd06:	b082      	sub	sp, #8
 801dd08:	af00      	add	r7, sp, #0
 801dd0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d106      	bne.n	801dd20 <tcp_rexmit_fast+0x1c>
 801dd12:	4b2a      	ldr	r3, [pc, #168]	; (801ddbc <tcp_rexmit_fast+0xb8>)
 801dd14:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801dd18:	4929      	ldr	r1, [pc, #164]	; (801ddc0 <tcp_rexmit_fast+0xbc>)
 801dd1a:	482a      	ldr	r0, [pc, #168]	; (801ddc4 <tcp_rexmit_fast+0xc0>)
 801dd1c:	f001 fef6 	bl	801fb0c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	d045      	beq.n	801ddb4 <tcp_rexmit_fast+0xb0>
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	8b5b      	ldrh	r3, [r3, #26]
 801dd2c:	f003 0304 	and.w	r3, r3, #4
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	d13f      	bne.n	801ddb4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801dd34:	6878      	ldr	r0, [r7, #4]
 801dd36:	f7ff ff79 	bl	801dc2c <tcp_rexmit>
 801dd3a:	4603      	mov	r3, r0
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	d139      	bne.n	801ddb4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dd4c:	4293      	cmp	r3, r2
 801dd4e:	bf28      	it	cs
 801dd50:	4613      	movcs	r3, r2
 801dd52:	b29b      	uxth	r3, r3
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	da00      	bge.n	801dd5a <tcp_rexmit_fast+0x56>
 801dd58:	3301      	adds	r3, #1
 801dd5a:	105b      	asrs	r3, r3, #1
 801dd5c:	b29a      	uxth	r2, r3
 801dd5e:	687b      	ldr	r3, [r7, #4]
 801dd60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801dd6a:	461a      	mov	r2, r3
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd70:	005b      	lsls	r3, r3, #1
 801dd72:	429a      	cmp	r2, r3
 801dd74:	d206      	bcs.n	801dd84 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd7a:	005b      	lsls	r3, r3, #1
 801dd7c:	b29a      	uxth	r2, r3
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd8e:	4619      	mov	r1, r3
 801dd90:	0049      	lsls	r1, r1, #1
 801dd92:	440b      	add	r3, r1
 801dd94:	b29b      	uxth	r3, r3
 801dd96:	4413      	add	r3, r2
 801dd98:	b29a      	uxth	r2, r3
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	8b5b      	ldrh	r3, [r3, #26]
 801dda4:	f043 0304 	orr.w	r3, r3, #4
 801dda8:	b29a      	uxth	r2, r3
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	2200      	movs	r2, #0
 801ddb2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801ddb4:	bf00      	nop
 801ddb6:	3708      	adds	r7, #8
 801ddb8:	46bd      	mov	sp, r7
 801ddba:	bd80      	pop	{r7, pc}
 801ddbc:	0802355c 	.word	0x0802355c
 801ddc0:	08023c58 	.word	0x08023c58
 801ddc4:	080235f4 	.word	0x080235f4

0801ddc8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ddc8:	b580      	push	{r7, lr}
 801ddca:	b086      	sub	sp, #24
 801ddcc:	af00      	add	r7, sp, #0
 801ddce:	60f8      	str	r0, [r7, #12]
 801ddd0:	607b      	str	r3, [r7, #4]
 801ddd2:	460b      	mov	r3, r1
 801ddd4:	817b      	strh	r3, [r7, #10]
 801ddd6:	4613      	mov	r3, r2
 801ddd8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ddda:	897a      	ldrh	r2, [r7, #10]
 801dddc:	893b      	ldrh	r3, [r7, #8]
 801ddde:	4413      	add	r3, r2
 801dde0:	b29b      	uxth	r3, r3
 801dde2:	3314      	adds	r3, #20
 801dde4:	b29b      	uxth	r3, r3
 801dde6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ddea:	4619      	mov	r1, r3
 801ddec:	2022      	movs	r0, #34	; 0x22
 801ddee:	f7f9 fafd 	bl	80173ec <pbuf_alloc>
 801ddf2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ddf4:	697b      	ldr	r3, [r7, #20]
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d04d      	beq.n	801de96 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ddfa:	897b      	ldrh	r3, [r7, #10]
 801ddfc:	3313      	adds	r3, #19
 801ddfe:	697a      	ldr	r2, [r7, #20]
 801de00:	8952      	ldrh	r2, [r2, #10]
 801de02:	4293      	cmp	r3, r2
 801de04:	db06      	blt.n	801de14 <tcp_output_alloc_header_common+0x4c>
 801de06:	4b26      	ldr	r3, [pc, #152]	; (801dea0 <tcp_output_alloc_header_common+0xd8>)
 801de08:	f240 7223 	movw	r2, #1827	; 0x723
 801de0c:	4925      	ldr	r1, [pc, #148]	; (801dea4 <tcp_output_alloc_header_common+0xdc>)
 801de0e:	4826      	ldr	r0, [pc, #152]	; (801dea8 <tcp_output_alloc_header_common+0xe0>)
 801de10:	f001 fe7c 	bl	801fb0c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801de14:	697b      	ldr	r3, [r7, #20]
 801de16:	685b      	ldr	r3, [r3, #4]
 801de18:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801de1a:	8c3b      	ldrh	r3, [r7, #32]
 801de1c:	4618      	mov	r0, r3
 801de1e:	f7f5 fdf5 	bl	8013a0c <lwip_htons>
 801de22:	4603      	mov	r3, r0
 801de24:	461a      	mov	r2, r3
 801de26:	693b      	ldr	r3, [r7, #16]
 801de28:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801de2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801de2c:	4618      	mov	r0, r3
 801de2e:	f7f5 fded 	bl	8013a0c <lwip_htons>
 801de32:	4603      	mov	r3, r0
 801de34:	461a      	mov	r2, r3
 801de36:	693b      	ldr	r3, [r7, #16]
 801de38:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801de3a:	693b      	ldr	r3, [r7, #16]
 801de3c:	687a      	ldr	r2, [r7, #4]
 801de3e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801de40:	68f8      	ldr	r0, [r7, #12]
 801de42:	f7f5 fdf8 	bl	8013a36 <lwip_htonl>
 801de46:	4602      	mov	r2, r0
 801de48:	693b      	ldr	r3, [r7, #16]
 801de4a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801de4c:	897b      	ldrh	r3, [r7, #10]
 801de4e:	089b      	lsrs	r3, r3, #2
 801de50:	b29b      	uxth	r3, r3
 801de52:	3305      	adds	r3, #5
 801de54:	b29b      	uxth	r3, r3
 801de56:	031b      	lsls	r3, r3, #12
 801de58:	b29a      	uxth	r2, r3
 801de5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801de5e:	b29b      	uxth	r3, r3
 801de60:	4313      	orrs	r3, r2
 801de62:	b29b      	uxth	r3, r3
 801de64:	4618      	mov	r0, r3
 801de66:	f7f5 fdd1 	bl	8013a0c <lwip_htons>
 801de6a:	4603      	mov	r3, r0
 801de6c:	461a      	mov	r2, r3
 801de6e:	693b      	ldr	r3, [r7, #16]
 801de70:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801de72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801de74:	4618      	mov	r0, r3
 801de76:	f7f5 fdc9 	bl	8013a0c <lwip_htons>
 801de7a:	4603      	mov	r3, r0
 801de7c:	461a      	mov	r2, r3
 801de7e:	693b      	ldr	r3, [r7, #16]
 801de80:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801de82:	693b      	ldr	r3, [r7, #16]
 801de84:	2200      	movs	r2, #0
 801de86:	741a      	strb	r2, [r3, #16]
 801de88:	2200      	movs	r2, #0
 801de8a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801de8c:	693b      	ldr	r3, [r7, #16]
 801de8e:	2200      	movs	r2, #0
 801de90:	749a      	strb	r2, [r3, #18]
 801de92:	2200      	movs	r2, #0
 801de94:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801de96:	697b      	ldr	r3, [r7, #20]
}
 801de98:	4618      	mov	r0, r3
 801de9a:	3718      	adds	r7, #24
 801de9c:	46bd      	mov	sp, r7
 801de9e:	bd80      	pop	{r7, pc}
 801dea0:	0802355c 	.word	0x0802355c
 801dea4:	08023c78 	.word	0x08023c78
 801dea8:	080235f4 	.word	0x080235f4

0801deac <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801deac:	b5b0      	push	{r4, r5, r7, lr}
 801deae:	b08a      	sub	sp, #40	; 0x28
 801deb0:	af04      	add	r7, sp, #16
 801deb2:	60f8      	str	r0, [r7, #12]
 801deb4:	607b      	str	r3, [r7, #4]
 801deb6:	460b      	mov	r3, r1
 801deb8:	817b      	strh	r3, [r7, #10]
 801deba:	4613      	mov	r3, r2
 801debc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801debe:	68fb      	ldr	r3, [r7, #12]
 801dec0:	2b00      	cmp	r3, #0
 801dec2:	d106      	bne.n	801ded2 <tcp_output_alloc_header+0x26>
 801dec4:	4b15      	ldr	r3, [pc, #84]	; (801df1c <tcp_output_alloc_header+0x70>)
 801dec6:	f240 7242 	movw	r2, #1858	; 0x742
 801deca:	4915      	ldr	r1, [pc, #84]	; (801df20 <tcp_output_alloc_header+0x74>)
 801decc:	4815      	ldr	r0, [pc, #84]	; (801df24 <tcp_output_alloc_header+0x78>)
 801dece:	f001 fe1d 	bl	801fb0c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	8adb      	ldrh	r3, [r3, #22]
 801deda:	68fa      	ldr	r2, [r7, #12]
 801dedc:	8b12      	ldrh	r2, [r2, #24]
 801dede:	68f9      	ldr	r1, [r7, #12]
 801dee0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801dee2:	893d      	ldrh	r5, [r7, #8]
 801dee4:	897c      	ldrh	r4, [r7, #10]
 801dee6:	9103      	str	r1, [sp, #12]
 801dee8:	2110      	movs	r1, #16
 801deea:	9102      	str	r1, [sp, #8]
 801deec:	9201      	str	r2, [sp, #4]
 801deee:	9300      	str	r3, [sp, #0]
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	462a      	mov	r2, r5
 801def4:	4621      	mov	r1, r4
 801def6:	f7ff ff67 	bl	801ddc8 <tcp_output_alloc_header_common>
 801defa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801defc:	697b      	ldr	r3, [r7, #20]
 801defe:	2b00      	cmp	r3, #0
 801df00:	d006      	beq.n	801df10 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df06:	68fa      	ldr	r2, [r7, #12]
 801df08:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801df0a:	441a      	add	r2, r3
 801df0c:	68fb      	ldr	r3, [r7, #12]
 801df0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801df10:	697b      	ldr	r3, [r7, #20]
}
 801df12:	4618      	mov	r0, r3
 801df14:	3718      	adds	r7, #24
 801df16:	46bd      	mov	sp, r7
 801df18:	bdb0      	pop	{r4, r5, r7, pc}
 801df1a:	bf00      	nop
 801df1c:	0802355c 	.word	0x0802355c
 801df20:	08023ca8 	.word	0x08023ca8
 801df24:	080235f4 	.word	0x080235f4

0801df28 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801df28:	b580      	push	{r7, lr}
 801df2a:	b088      	sub	sp, #32
 801df2c:	af00      	add	r7, sp, #0
 801df2e:	60f8      	str	r0, [r7, #12]
 801df30:	60b9      	str	r1, [r7, #8]
 801df32:	4611      	mov	r1, r2
 801df34:	461a      	mov	r2, r3
 801df36:	460b      	mov	r3, r1
 801df38:	71fb      	strb	r3, [r7, #7]
 801df3a:	4613      	mov	r3, r2
 801df3c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801df3e:	2300      	movs	r3, #0
 801df40:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801df42:	68bb      	ldr	r3, [r7, #8]
 801df44:	2b00      	cmp	r3, #0
 801df46:	d106      	bne.n	801df56 <tcp_output_fill_options+0x2e>
 801df48:	4b13      	ldr	r3, [pc, #76]	; (801df98 <tcp_output_fill_options+0x70>)
 801df4a:	f240 7256 	movw	r2, #1878	; 0x756
 801df4e:	4913      	ldr	r1, [pc, #76]	; (801df9c <tcp_output_fill_options+0x74>)
 801df50:	4813      	ldr	r0, [pc, #76]	; (801dfa0 <tcp_output_fill_options+0x78>)
 801df52:	f001 fddb 	bl	801fb0c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801df56:	68bb      	ldr	r3, [r7, #8]
 801df58:	685b      	ldr	r3, [r3, #4]
 801df5a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801df5c:	69bb      	ldr	r3, [r7, #24]
 801df5e:	3314      	adds	r3, #20
 801df60:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801df62:	69bb      	ldr	r3, [r7, #24]
 801df64:	f103 0214 	add.w	r2, r3, #20
 801df68:	8bfb      	ldrh	r3, [r7, #30]
 801df6a:	009b      	lsls	r3, r3, #2
 801df6c:	4619      	mov	r1, r3
 801df6e:	79fb      	ldrb	r3, [r7, #7]
 801df70:	009b      	lsls	r3, r3, #2
 801df72:	f003 0304 	and.w	r3, r3, #4
 801df76:	440b      	add	r3, r1
 801df78:	4413      	add	r3, r2
 801df7a:	697a      	ldr	r2, [r7, #20]
 801df7c:	429a      	cmp	r2, r3
 801df7e:	d006      	beq.n	801df8e <tcp_output_fill_options+0x66>
 801df80:	4b05      	ldr	r3, [pc, #20]	; (801df98 <tcp_output_fill_options+0x70>)
 801df82:	f240 7275 	movw	r2, #1909	; 0x775
 801df86:	4907      	ldr	r1, [pc, #28]	; (801dfa4 <tcp_output_fill_options+0x7c>)
 801df88:	4805      	ldr	r0, [pc, #20]	; (801dfa0 <tcp_output_fill_options+0x78>)
 801df8a:	f001 fdbf 	bl	801fb0c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801df8e:	bf00      	nop
 801df90:	3720      	adds	r7, #32
 801df92:	46bd      	mov	sp, r7
 801df94:	bd80      	pop	{r7, pc}
 801df96:	bf00      	nop
 801df98:	0802355c 	.word	0x0802355c
 801df9c:	08023cd0 	.word	0x08023cd0
 801dfa0:	080235f4 	.word	0x080235f4
 801dfa4:	08023bc8 	.word	0x08023bc8

0801dfa8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801dfa8:	b580      	push	{r7, lr}
 801dfaa:	b08a      	sub	sp, #40	; 0x28
 801dfac:	af04      	add	r7, sp, #16
 801dfae:	60f8      	str	r0, [r7, #12]
 801dfb0:	60b9      	str	r1, [r7, #8]
 801dfb2:	607a      	str	r2, [r7, #4]
 801dfb4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801dfb6:	68bb      	ldr	r3, [r7, #8]
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	d106      	bne.n	801dfca <tcp_output_control_segment+0x22>
 801dfbc:	4b1c      	ldr	r3, [pc, #112]	; (801e030 <tcp_output_control_segment+0x88>)
 801dfbe:	f240 7287 	movw	r2, #1927	; 0x787
 801dfc2:	491c      	ldr	r1, [pc, #112]	; (801e034 <tcp_output_control_segment+0x8c>)
 801dfc4:	481c      	ldr	r0, [pc, #112]	; (801e038 <tcp_output_control_segment+0x90>)
 801dfc6:	f001 fda1 	bl	801fb0c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801dfca:	683a      	ldr	r2, [r7, #0]
 801dfcc:	6879      	ldr	r1, [r7, #4]
 801dfce:	68f8      	ldr	r0, [r7, #12]
 801dfd0:	f7fe fae8 	bl	801c5a4 <tcp_route>
 801dfd4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801dfd6:	693b      	ldr	r3, [r7, #16]
 801dfd8:	2b00      	cmp	r3, #0
 801dfda:	d102      	bne.n	801dfe2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801dfdc:	23fc      	movs	r3, #252	; 0xfc
 801dfde:	75fb      	strb	r3, [r7, #23]
 801dfe0:	e01c      	b.n	801e01c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801dfe2:	68fb      	ldr	r3, [r7, #12]
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	d006      	beq.n	801dff6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801dfe8:	68fb      	ldr	r3, [r7, #12]
 801dfea:	7adb      	ldrb	r3, [r3, #11]
 801dfec:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801dfee:	68fb      	ldr	r3, [r7, #12]
 801dff0:	7a9b      	ldrb	r3, [r3, #10]
 801dff2:	757b      	strb	r3, [r7, #21]
 801dff4:	e003      	b.n	801dffe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801dff6:	23ff      	movs	r3, #255	; 0xff
 801dff8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801dffa:	2300      	movs	r3, #0
 801dffc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801dffe:	7dba      	ldrb	r2, [r7, #22]
 801e000:	693b      	ldr	r3, [r7, #16]
 801e002:	9302      	str	r3, [sp, #8]
 801e004:	2306      	movs	r3, #6
 801e006:	9301      	str	r3, [sp, #4]
 801e008:	7d7b      	ldrb	r3, [r7, #21]
 801e00a:	9300      	str	r3, [sp, #0]
 801e00c:	4613      	mov	r3, r2
 801e00e:	683a      	ldr	r2, [r7, #0]
 801e010:	6879      	ldr	r1, [r7, #4]
 801e012:	68b8      	ldr	r0, [r7, #8]
 801e014:	f7f7 f990 	bl	8015338 <ip4_output_if>
 801e018:	4603      	mov	r3, r0
 801e01a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801e01c:	68b8      	ldr	r0, [r7, #8]
 801e01e:	f7f9 fcc9 	bl	80179b4 <pbuf_free>
  return err;
 801e022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e026:	4618      	mov	r0, r3
 801e028:	3718      	adds	r7, #24
 801e02a:	46bd      	mov	sp, r7
 801e02c:	bd80      	pop	{r7, pc}
 801e02e:	bf00      	nop
 801e030:	0802355c 	.word	0x0802355c
 801e034:	08023cf8 	.word	0x08023cf8
 801e038:	080235f4 	.word	0x080235f4

0801e03c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801e03c:	b590      	push	{r4, r7, lr}
 801e03e:	b08b      	sub	sp, #44	; 0x2c
 801e040:	af04      	add	r7, sp, #16
 801e042:	60f8      	str	r0, [r7, #12]
 801e044:	60b9      	str	r1, [r7, #8]
 801e046:	607a      	str	r2, [r7, #4]
 801e048:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801e04a:	683b      	ldr	r3, [r7, #0]
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	d106      	bne.n	801e05e <tcp_rst+0x22>
 801e050:	4b1f      	ldr	r3, [pc, #124]	; (801e0d0 <tcp_rst+0x94>)
 801e052:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801e056:	491f      	ldr	r1, [pc, #124]	; (801e0d4 <tcp_rst+0x98>)
 801e058:	481f      	ldr	r0, [pc, #124]	; (801e0d8 <tcp_rst+0x9c>)
 801e05a:	f001 fd57 	bl	801fb0c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801e05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e060:	2b00      	cmp	r3, #0
 801e062:	d106      	bne.n	801e072 <tcp_rst+0x36>
 801e064:	4b1a      	ldr	r3, [pc, #104]	; (801e0d0 <tcp_rst+0x94>)
 801e066:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801e06a:	491c      	ldr	r1, [pc, #112]	; (801e0dc <tcp_rst+0xa0>)
 801e06c:	481a      	ldr	r0, [pc, #104]	; (801e0d8 <tcp_rst+0x9c>)
 801e06e:	f001 fd4d 	bl	801fb0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e072:	2300      	movs	r3, #0
 801e074:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801e076:	f24d 0316 	movw	r3, #53270	; 0xd016
 801e07a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801e07c:	7dfb      	ldrb	r3, [r7, #23]
 801e07e:	b29c      	uxth	r4, r3
 801e080:	68b8      	ldr	r0, [r7, #8]
 801e082:	f7f5 fcd8 	bl	8013a36 <lwip_htonl>
 801e086:	4602      	mov	r2, r0
 801e088:	8abb      	ldrh	r3, [r7, #20]
 801e08a:	9303      	str	r3, [sp, #12]
 801e08c:	2314      	movs	r3, #20
 801e08e:	9302      	str	r3, [sp, #8]
 801e090:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801e092:	9301      	str	r3, [sp, #4]
 801e094:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e096:	9300      	str	r3, [sp, #0]
 801e098:	4613      	mov	r3, r2
 801e09a:	2200      	movs	r2, #0
 801e09c:	4621      	mov	r1, r4
 801e09e:	6878      	ldr	r0, [r7, #4]
 801e0a0:	f7ff fe92 	bl	801ddc8 <tcp_output_alloc_header_common>
 801e0a4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801e0a6:	693b      	ldr	r3, [r7, #16]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d00c      	beq.n	801e0c6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e0ac:	7dfb      	ldrb	r3, [r7, #23]
 801e0ae:	2200      	movs	r2, #0
 801e0b0:	6939      	ldr	r1, [r7, #16]
 801e0b2:	68f8      	ldr	r0, [r7, #12]
 801e0b4:	f7ff ff38 	bl	801df28 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801e0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e0ba:	683a      	ldr	r2, [r7, #0]
 801e0bc:	6939      	ldr	r1, [r7, #16]
 801e0be:	68f8      	ldr	r0, [r7, #12]
 801e0c0:	f7ff ff72 	bl	801dfa8 <tcp_output_control_segment>
 801e0c4:	e000      	b.n	801e0c8 <tcp_rst+0x8c>
    return;
 801e0c6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801e0c8:	371c      	adds	r7, #28
 801e0ca:	46bd      	mov	sp, r7
 801e0cc:	bd90      	pop	{r4, r7, pc}
 801e0ce:	bf00      	nop
 801e0d0:	0802355c 	.word	0x0802355c
 801e0d4:	08023d24 	.word	0x08023d24
 801e0d8:	080235f4 	.word	0x080235f4
 801e0dc:	08023d40 	.word	0x08023d40

0801e0e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801e0e0:	b590      	push	{r4, r7, lr}
 801e0e2:	b087      	sub	sp, #28
 801e0e4:	af00      	add	r7, sp, #0
 801e0e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801e0ec:	2300      	movs	r3, #0
 801e0ee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	2b00      	cmp	r3, #0
 801e0f4:	d106      	bne.n	801e104 <tcp_send_empty_ack+0x24>
 801e0f6:	4b28      	ldr	r3, [pc, #160]	; (801e198 <tcp_send_empty_ack+0xb8>)
 801e0f8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801e0fc:	4927      	ldr	r1, [pc, #156]	; (801e19c <tcp_send_empty_ack+0xbc>)
 801e0fe:	4828      	ldr	r0, [pc, #160]	; (801e1a0 <tcp_send_empty_ack+0xc0>)
 801e100:	f001 fd04 	bl	801fb0c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e104:	7dfb      	ldrb	r3, [r7, #23]
 801e106:	009b      	lsls	r3, r3, #2
 801e108:	b2db      	uxtb	r3, r3
 801e10a:	f003 0304 	and.w	r3, r3, #4
 801e10e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801e110:	7d7b      	ldrb	r3, [r7, #21]
 801e112:	b29c      	uxth	r4, r3
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e118:	4618      	mov	r0, r3
 801e11a:	f7f5 fc8c 	bl	8013a36 <lwip_htonl>
 801e11e:	4603      	mov	r3, r0
 801e120:	2200      	movs	r2, #0
 801e122:	4621      	mov	r1, r4
 801e124:	6878      	ldr	r0, [r7, #4]
 801e126:	f7ff fec1 	bl	801deac <tcp_output_alloc_header>
 801e12a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e12c:	693b      	ldr	r3, [r7, #16]
 801e12e:	2b00      	cmp	r3, #0
 801e130:	d109      	bne.n	801e146 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	8b5b      	ldrh	r3, [r3, #26]
 801e136:	f043 0303 	orr.w	r3, r3, #3
 801e13a:	b29a      	uxth	r2, r3
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801e140:	f06f 0301 	mvn.w	r3, #1
 801e144:	e023      	b.n	801e18e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801e146:	7dbb      	ldrb	r3, [r7, #22]
 801e148:	7dfa      	ldrb	r2, [r7, #23]
 801e14a:	6939      	ldr	r1, [r7, #16]
 801e14c:	6878      	ldr	r0, [r7, #4]
 801e14e:	f7ff feeb 	bl	801df28 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e152:	687a      	ldr	r2, [r7, #4]
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	3304      	adds	r3, #4
 801e158:	6939      	ldr	r1, [r7, #16]
 801e15a:	6878      	ldr	r0, [r7, #4]
 801e15c:	f7ff ff24 	bl	801dfa8 <tcp_output_control_segment>
 801e160:	4603      	mov	r3, r0
 801e162:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801e164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d007      	beq.n	801e17c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	8b5b      	ldrh	r3, [r3, #26]
 801e170:	f043 0303 	orr.w	r3, r3, #3
 801e174:	b29a      	uxth	r2, r3
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	835a      	strh	r2, [r3, #26]
 801e17a:	e006      	b.n	801e18a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	8b5b      	ldrh	r3, [r3, #26]
 801e180:	f023 0303 	bic.w	r3, r3, #3
 801e184:	b29a      	uxth	r2, r3
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801e18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e18e:	4618      	mov	r0, r3
 801e190:	371c      	adds	r7, #28
 801e192:	46bd      	mov	sp, r7
 801e194:	bd90      	pop	{r4, r7, pc}
 801e196:	bf00      	nop
 801e198:	0802355c 	.word	0x0802355c
 801e19c:	08023d5c 	.word	0x08023d5c
 801e1a0:	080235f4 	.word	0x080235f4

0801e1a4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801e1a4:	b590      	push	{r4, r7, lr}
 801e1a6:	b087      	sub	sp, #28
 801e1a8:	af00      	add	r7, sp, #0
 801e1aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e1ac:	2300      	movs	r3, #0
 801e1ae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	d106      	bne.n	801e1c4 <tcp_keepalive+0x20>
 801e1b6:	4b18      	ldr	r3, [pc, #96]	; (801e218 <tcp_keepalive+0x74>)
 801e1b8:	f640 0224 	movw	r2, #2084	; 0x824
 801e1bc:	4917      	ldr	r1, [pc, #92]	; (801e21c <tcp_keepalive+0x78>)
 801e1be:	4818      	ldr	r0, [pc, #96]	; (801e220 <tcp_keepalive+0x7c>)
 801e1c0:	f001 fca4 	bl	801fb0c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801e1c4:	7dfb      	ldrb	r3, [r7, #23]
 801e1c6:	b29c      	uxth	r4, r3
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e1cc:	3b01      	subs	r3, #1
 801e1ce:	4618      	mov	r0, r3
 801e1d0:	f7f5 fc31 	bl	8013a36 <lwip_htonl>
 801e1d4:	4603      	mov	r3, r0
 801e1d6:	2200      	movs	r2, #0
 801e1d8:	4621      	mov	r1, r4
 801e1da:	6878      	ldr	r0, [r7, #4]
 801e1dc:	f7ff fe66 	bl	801deac <tcp_output_alloc_header>
 801e1e0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e1e2:	693b      	ldr	r3, [r7, #16]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d102      	bne.n	801e1ee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801e1e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e1ec:	e010      	b.n	801e210 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e1ee:	7dfb      	ldrb	r3, [r7, #23]
 801e1f0:	2200      	movs	r2, #0
 801e1f2:	6939      	ldr	r1, [r7, #16]
 801e1f4:	6878      	ldr	r0, [r7, #4]
 801e1f6:	f7ff fe97 	bl	801df28 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e1fa:	687a      	ldr	r2, [r7, #4]
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	3304      	adds	r3, #4
 801e200:	6939      	ldr	r1, [r7, #16]
 801e202:	6878      	ldr	r0, [r7, #4]
 801e204:	f7ff fed0 	bl	801dfa8 <tcp_output_control_segment>
 801e208:	4603      	mov	r3, r0
 801e20a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801e20c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e210:	4618      	mov	r0, r3
 801e212:	371c      	adds	r7, #28
 801e214:	46bd      	mov	sp, r7
 801e216:	bd90      	pop	{r4, r7, pc}
 801e218:	0802355c 	.word	0x0802355c
 801e21c:	08023d7c 	.word	0x08023d7c
 801e220:	080235f4 	.word	0x080235f4

0801e224 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801e224:	b590      	push	{r4, r7, lr}
 801e226:	b08b      	sub	sp, #44	; 0x2c
 801e228:	af00      	add	r7, sp, #0
 801e22a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e22c:	2300      	movs	r3, #0
 801e22e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	2b00      	cmp	r3, #0
 801e236:	d106      	bne.n	801e246 <tcp_zero_window_probe+0x22>
 801e238:	4b4c      	ldr	r3, [pc, #304]	; (801e36c <tcp_zero_window_probe+0x148>)
 801e23a:	f640 024f 	movw	r2, #2127	; 0x84f
 801e23e:	494c      	ldr	r1, [pc, #304]	; (801e370 <tcp_zero_window_probe+0x14c>)
 801e240:	484c      	ldr	r0, [pc, #304]	; (801e374 <tcp_zero_window_probe+0x150>)
 801e242:	f001 fc63 	bl	801fb0c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e24a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801e24c:	6a3b      	ldr	r3, [r7, #32]
 801e24e:	2b00      	cmp	r3, #0
 801e250:	d101      	bne.n	801e256 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801e252:	2300      	movs	r3, #0
 801e254:	e086      	b.n	801e364 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801e25c:	2bff      	cmp	r3, #255	; 0xff
 801e25e:	d007      	beq.n	801e270 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801e266:	3301      	adds	r3, #1
 801e268:	b2da      	uxtb	r2, r3
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801e270:	6a3b      	ldr	r3, [r7, #32]
 801e272:	68db      	ldr	r3, [r3, #12]
 801e274:	899b      	ldrh	r3, [r3, #12]
 801e276:	b29b      	uxth	r3, r3
 801e278:	4618      	mov	r0, r3
 801e27a:	f7f5 fbc7 	bl	8013a0c <lwip_htons>
 801e27e:	4603      	mov	r3, r0
 801e280:	b2db      	uxtb	r3, r3
 801e282:	f003 0301 	and.w	r3, r3, #1
 801e286:	2b00      	cmp	r3, #0
 801e288:	d005      	beq.n	801e296 <tcp_zero_window_probe+0x72>
 801e28a:	6a3b      	ldr	r3, [r7, #32]
 801e28c:	891b      	ldrh	r3, [r3, #8]
 801e28e:	2b00      	cmp	r3, #0
 801e290:	d101      	bne.n	801e296 <tcp_zero_window_probe+0x72>
 801e292:	2301      	movs	r3, #1
 801e294:	e000      	b.n	801e298 <tcp_zero_window_probe+0x74>
 801e296:	2300      	movs	r3, #0
 801e298:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801e29a:	7ffb      	ldrb	r3, [r7, #31]
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	bf0c      	ite	eq
 801e2a0:	2301      	moveq	r3, #1
 801e2a2:	2300      	movne	r3, #0
 801e2a4:	b2db      	uxtb	r3, r3
 801e2a6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801e2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e2ac:	b299      	uxth	r1, r3
 801e2ae:	6a3b      	ldr	r3, [r7, #32]
 801e2b0:	68db      	ldr	r3, [r3, #12]
 801e2b2:	685b      	ldr	r3, [r3, #4]
 801e2b4:	8bba      	ldrh	r2, [r7, #28]
 801e2b6:	6878      	ldr	r0, [r7, #4]
 801e2b8:	f7ff fdf8 	bl	801deac <tcp_output_alloc_header>
 801e2bc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801e2be:	69bb      	ldr	r3, [r7, #24]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d102      	bne.n	801e2ca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801e2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e2c8:	e04c      	b.n	801e364 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801e2ca:	69bb      	ldr	r3, [r7, #24]
 801e2cc:	685b      	ldr	r3, [r3, #4]
 801e2ce:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801e2d0:	7ffb      	ldrb	r3, [r7, #31]
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d011      	beq.n	801e2fa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801e2d6:	697b      	ldr	r3, [r7, #20]
 801e2d8:	899b      	ldrh	r3, [r3, #12]
 801e2da:	b29b      	uxth	r3, r3
 801e2dc:	b21b      	sxth	r3, r3
 801e2de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801e2e2:	b21c      	sxth	r4, r3
 801e2e4:	2011      	movs	r0, #17
 801e2e6:	f7f5 fb91 	bl	8013a0c <lwip_htons>
 801e2ea:	4603      	mov	r3, r0
 801e2ec:	b21b      	sxth	r3, r3
 801e2ee:	4323      	orrs	r3, r4
 801e2f0:	b21b      	sxth	r3, r3
 801e2f2:	b29a      	uxth	r2, r3
 801e2f4:	697b      	ldr	r3, [r7, #20]
 801e2f6:	819a      	strh	r2, [r3, #12]
 801e2f8:	e010      	b.n	801e31c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801e2fa:	69bb      	ldr	r3, [r7, #24]
 801e2fc:	685b      	ldr	r3, [r3, #4]
 801e2fe:	3314      	adds	r3, #20
 801e300:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801e302:	6a3b      	ldr	r3, [r7, #32]
 801e304:	6858      	ldr	r0, [r3, #4]
 801e306:	6a3b      	ldr	r3, [r7, #32]
 801e308:	685b      	ldr	r3, [r3, #4]
 801e30a:	891a      	ldrh	r2, [r3, #8]
 801e30c:	6a3b      	ldr	r3, [r7, #32]
 801e30e:	891b      	ldrh	r3, [r3, #8]
 801e310:	1ad3      	subs	r3, r2, r3
 801e312:	b29b      	uxth	r3, r3
 801e314:	2201      	movs	r2, #1
 801e316:	6939      	ldr	r1, [r7, #16]
 801e318:	f7f9 fd42 	bl	8017da0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801e31c:	6a3b      	ldr	r3, [r7, #32]
 801e31e:	68db      	ldr	r3, [r3, #12]
 801e320:	685b      	ldr	r3, [r3, #4]
 801e322:	4618      	mov	r0, r3
 801e324:	f7f5 fb87 	bl	8013a36 <lwip_htonl>
 801e328:	4603      	mov	r3, r0
 801e32a:	3301      	adds	r3, #1
 801e32c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	1ad3      	subs	r3, r2, r3
 801e336:	2b00      	cmp	r3, #0
 801e338:	da02      	bge.n	801e340 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	68fa      	ldr	r2, [r7, #12]
 801e33e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e344:	2200      	movs	r2, #0
 801e346:	69b9      	ldr	r1, [r7, #24]
 801e348:	6878      	ldr	r0, [r7, #4]
 801e34a:	f7ff fded 	bl	801df28 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e34e:	687a      	ldr	r2, [r7, #4]
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	3304      	adds	r3, #4
 801e354:	69b9      	ldr	r1, [r7, #24]
 801e356:	6878      	ldr	r0, [r7, #4]
 801e358:	f7ff fe26 	bl	801dfa8 <tcp_output_control_segment>
 801e35c:	4603      	mov	r3, r0
 801e35e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801e360:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801e364:	4618      	mov	r0, r3
 801e366:	372c      	adds	r7, #44	; 0x2c
 801e368:	46bd      	mov	sp, r7
 801e36a:	bd90      	pop	{r4, r7, pc}
 801e36c:	0802355c 	.word	0x0802355c
 801e370:	08023d98 	.word	0x08023d98
 801e374:	080235f4 	.word	0x080235f4

0801e378 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801e378:	b580      	push	{r7, lr}
 801e37a:	b084      	sub	sp, #16
 801e37c:	af00      	add	r7, sp, #0
 801e37e:	6078      	str	r0, [r7, #4]
 801e380:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801e382:	f000 fb17 	bl	801e9b4 <sys_timeouts_sleeptime>
 801e386:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801e388:	68fb      	ldr	r3, [r7, #12]
 801e38a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e38e:	d10b      	bne.n	801e3a8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801e390:	4813      	ldr	r0, [pc, #76]	; (801e3e0 <tcpip_timeouts_mbox_fetch+0x68>)
 801e392:	f7f9 ff3a 	bl	801820a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801e396:	2200      	movs	r2, #0
 801e398:	6839      	ldr	r1, [r7, #0]
 801e39a:	6878      	ldr	r0, [r7, #4]
 801e39c:	f7f9 fdf2 	bl	8017f84 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801e3a0:	480f      	ldr	r0, [pc, #60]	; (801e3e0 <tcpip_timeouts_mbox_fetch+0x68>)
 801e3a2:	f7f9 ff23 	bl	80181ec <sys_mutex_lock>
    return;
 801e3a6:	e018      	b.n	801e3da <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	d102      	bne.n	801e3b4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801e3ae:	f000 fac7 	bl	801e940 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801e3b2:	e7e6      	b.n	801e382 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801e3b4:	480a      	ldr	r0, [pc, #40]	; (801e3e0 <tcpip_timeouts_mbox_fetch+0x68>)
 801e3b6:	f7f9 ff28 	bl	801820a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801e3ba:	68fa      	ldr	r2, [r7, #12]
 801e3bc:	6839      	ldr	r1, [r7, #0]
 801e3be:	6878      	ldr	r0, [r7, #4]
 801e3c0:	f7f9 fde0 	bl	8017f84 <sys_arch_mbox_fetch>
 801e3c4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801e3c6:	4806      	ldr	r0, [pc, #24]	; (801e3e0 <tcpip_timeouts_mbox_fetch+0x68>)
 801e3c8:	f7f9 ff10 	bl	80181ec <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801e3cc:	68bb      	ldr	r3, [r7, #8]
 801e3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e3d2:	d102      	bne.n	801e3da <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801e3d4:	f000 fab4 	bl	801e940 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801e3d8:	e7d3      	b.n	801e382 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801e3da:	3710      	adds	r7, #16
 801e3dc:	46bd      	mov	sp, r7
 801e3de:	bd80      	pop	{r7, pc}
 801e3e0:	2400f97c 	.word	0x2400f97c

0801e3e4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801e3e4:	b580      	push	{r7, lr}
 801e3e6:	b084      	sub	sp, #16
 801e3e8:	af00      	add	r7, sp, #0
 801e3ea:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801e3ec:	4810      	ldr	r0, [pc, #64]	; (801e430 <tcpip_thread+0x4c>)
 801e3ee:	f7f9 fefd 	bl	80181ec <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801e3f2:	4b10      	ldr	r3, [pc, #64]	; (801e434 <tcpip_thread+0x50>)
 801e3f4:	681b      	ldr	r3, [r3, #0]
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d005      	beq.n	801e406 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801e3fa:	4b0e      	ldr	r3, [pc, #56]	; (801e434 <tcpip_thread+0x50>)
 801e3fc:	681b      	ldr	r3, [r3, #0]
 801e3fe:	4a0e      	ldr	r2, [pc, #56]	; (801e438 <tcpip_thread+0x54>)
 801e400:	6812      	ldr	r2, [r2, #0]
 801e402:	4610      	mov	r0, r2
 801e404:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801e406:	f107 030c 	add.w	r3, r7, #12
 801e40a:	4619      	mov	r1, r3
 801e40c:	480b      	ldr	r0, [pc, #44]	; (801e43c <tcpip_thread+0x58>)
 801e40e:	f7ff ffb3 	bl	801e378 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801e412:	68fb      	ldr	r3, [r7, #12]
 801e414:	2b00      	cmp	r3, #0
 801e416:	d106      	bne.n	801e426 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801e418:	4b09      	ldr	r3, [pc, #36]	; (801e440 <tcpip_thread+0x5c>)
 801e41a:	2291      	movs	r2, #145	; 0x91
 801e41c:	4909      	ldr	r1, [pc, #36]	; (801e444 <tcpip_thread+0x60>)
 801e41e:	480a      	ldr	r0, [pc, #40]	; (801e448 <tcpip_thread+0x64>)
 801e420:	f001 fb74 	bl	801fb0c <iprintf>
      continue;
 801e424:	e003      	b.n	801e42e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	4618      	mov	r0, r3
 801e42a:	f000 f80f 	bl	801e44c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801e42e:	e7ea      	b.n	801e406 <tcpip_thread+0x22>
 801e430:	2400f97c 	.word	0x2400f97c
 801e434:	2400f970 	.word	0x2400f970
 801e438:	2400f974 	.word	0x2400f974
 801e43c:	2400f978 	.word	0x2400f978
 801e440:	08023dbc 	.word	0x08023dbc
 801e444:	08023e30 	.word	0x08023e30
 801e448:	08023e50 	.word	0x08023e50

0801e44c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801e44c:	b580      	push	{r7, lr}
 801e44e:	b082      	sub	sp, #8
 801e450:	af00      	add	r7, sp, #0
 801e452:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801e454:	687b      	ldr	r3, [r7, #4]
 801e456:	781b      	ldrb	r3, [r3, #0]
 801e458:	2b02      	cmp	r3, #2
 801e45a:	d026      	beq.n	801e4aa <tcpip_thread_handle_msg+0x5e>
 801e45c:	2b02      	cmp	r3, #2
 801e45e:	dc2b      	bgt.n	801e4b8 <tcpip_thread_handle_msg+0x6c>
 801e460:	2b00      	cmp	r3, #0
 801e462:	d002      	beq.n	801e46a <tcpip_thread_handle_msg+0x1e>
 801e464:	2b01      	cmp	r3, #1
 801e466:	d015      	beq.n	801e494 <tcpip_thread_handle_msg+0x48>
 801e468:	e026      	b.n	801e4b8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	68db      	ldr	r3, [r3, #12]
 801e46e:	687a      	ldr	r2, [r7, #4]
 801e470:	6850      	ldr	r0, [r2, #4]
 801e472:	687a      	ldr	r2, [r7, #4]
 801e474:	6892      	ldr	r2, [r2, #8]
 801e476:	4611      	mov	r1, r2
 801e478:	4798      	blx	r3
 801e47a:	4603      	mov	r3, r0
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d004      	beq.n	801e48a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	685b      	ldr	r3, [r3, #4]
 801e484:	4618      	mov	r0, r3
 801e486:	f7f9 fa95 	bl	80179b4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801e48a:	6879      	ldr	r1, [r7, #4]
 801e48c:	2009      	movs	r0, #9
 801e48e:	f7f8 fb9d 	bl	8016bcc <memp_free>
      break;
 801e492:	e018      	b.n	801e4c6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	685b      	ldr	r3, [r3, #4]
 801e498:	687a      	ldr	r2, [r7, #4]
 801e49a:	6892      	ldr	r2, [r2, #8]
 801e49c:	4610      	mov	r0, r2
 801e49e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801e4a0:	6879      	ldr	r1, [r7, #4]
 801e4a2:	2008      	movs	r0, #8
 801e4a4:	f7f8 fb92 	bl	8016bcc <memp_free>
      break;
 801e4a8:	e00d      	b.n	801e4c6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	685b      	ldr	r3, [r3, #4]
 801e4ae:	687a      	ldr	r2, [r7, #4]
 801e4b0:	6892      	ldr	r2, [r2, #8]
 801e4b2:	4610      	mov	r0, r2
 801e4b4:	4798      	blx	r3
      break;
 801e4b6:	e006      	b.n	801e4c6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801e4b8:	4b05      	ldr	r3, [pc, #20]	; (801e4d0 <tcpip_thread_handle_msg+0x84>)
 801e4ba:	22cf      	movs	r2, #207	; 0xcf
 801e4bc:	4905      	ldr	r1, [pc, #20]	; (801e4d4 <tcpip_thread_handle_msg+0x88>)
 801e4be:	4806      	ldr	r0, [pc, #24]	; (801e4d8 <tcpip_thread_handle_msg+0x8c>)
 801e4c0:	f001 fb24 	bl	801fb0c <iprintf>
      break;
 801e4c4:	bf00      	nop
  }
}
 801e4c6:	bf00      	nop
 801e4c8:	3708      	adds	r7, #8
 801e4ca:	46bd      	mov	sp, r7
 801e4cc:	bd80      	pop	{r7, pc}
 801e4ce:	bf00      	nop
 801e4d0:	08023dbc 	.word	0x08023dbc
 801e4d4:	08023e30 	.word	0x08023e30
 801e4d8:	08023e50 	.word	0x08023e50

0801e4dc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801e4dc:	b580      	push	{r7, lr}
 801e4de:	b086      	sub	sp, #24
 801e4e0:	af00      	add	r7, sp, #0
 801e4e2:	60f8      	str	r0, [r7, #12]
 801e4e4:	60b9      	str	r1, [r7, #8]
 801e4e6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801e4e8:	481a      	ldr	r0, [pc, #104]	; (801e554 <tcpip_inpkt+0x78>)
 801e4ea:	f7f9 fda6 	bl	801803a <sys_mbox_valid>
 801e4ee:	4603      	mov	r3, r0
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	d105      	bne.n	801e500 <tcpip_inpkt+0x24>
 801e4f4:	4b18      	ldr	r3, [pc, #96]	; (801e558 <tcpip_inpkt+0x7c>)
 801e4f6:	22fc      	movs	r2, #252	; 0xfc
 801e4f8:	4918      	ldr	r1, [pc, #96]	; (801e55c <tcpip_inpkt+0x80>)
 801e4fa:	4819      	ldr	r0, [pc, #100]	; (801e560 <tcpip_inpkt+0x84>)
 801e4fc:	f001 fb06 	bl	801fb0c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801e500:	2009      	movs	r0, #9
 801e502:	f7f8 faed 	bl	8016ae0 <memp_malloc>
 801e506:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801e508:	697b      	ldr	r3, [r7, #20]
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d102      	bne.n	801e514 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801e50e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e512:	e01a      	b.n	801e54a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801e514:	697b      	ldr	r3, [r7, #20]
 801e516:	2200      	movs	r2, #0
 801e518:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801e51a:	697b      	ldr	r3, [r7, #20]
 801e51c:	68fa      	ldr	r2, [r7, #12]
 801e51e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801e520:	697b      	ldr	r3, [r7, #20]
 801e522:	68ba      	ldr	r2, [r7, #8]
 801e524:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801e526:	697b      	ldr	r3, [r7, #20]
 801e528:	687a      	ldr	r2, [r7, #4]
 801e52a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801e52c:	6979      	ldr	r1, [r7, #20]
 801e52e:	4809      	ldr	r0, [pc, #36]	; (801e554 <tcpip_inpkt+0x78>)
 801e530:	f7f9 fd0e 	bl	8017f50 <sys_mbox_trypost>
 801e534:	4603      	mov	r3, r0
 801e536:	2b00      	cmp	r3, #0
 801e538:	d006      	beq.n	801e548 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801e53a:	6979      	ldr	r1, [r7, #20]
 801e53c:	2009      	movs	r0, #9
 801e53e:	f7f8 fb45 	bl	8016bcc <memp_free>
    return ERR_MEM;
 801e542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e546:	e000      	b.n	801e54a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801e548:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801e54a:	4618      	mov	r0, r3
 801e54c:	3718      	adds	r7, #24
 801e54e:	46bd      	mov	sp, r7
 801e550:	bd80      	pop	{r7, pc}
 801e552:	bf00      	nop
 801e554:	2400f978 	.word	0x2400f978
 801e558:	08023dbc 	.word	0x08023dbc
 801e55c:	08023e78 	.word	0x08023e78
 801e560:	08023e50 	.word	0x08023e50

0801e564 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801e564:	b580      	push	{r7, lr}
 801e566:	b082      	sub	sp, #8
 801e568:	af00      	add	r7, sp, #0
 801e56a:	6078      	str	r0, [r7, #4]
 801e56c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801e56e:	683b      	ldr	r3, [r7, #0]
 801e570:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801e574:	f003 0318 	and.w	r3, r3, #24
 801e578:	2b00      	cmp	r3, #0
 801e57a:	d006      	beq.n	801e58a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801e57c:	4a08      	ldr	r2, [pc, #32]	; (801e5a0 <tcpip_input+0x3c>)
 801e57e:	6839      	ldr	r1, [r7, #0]
 801e580:	6878      	ldr	r0, [r7, #4]
 801e582:	f7ff ffab 	bl	801e4dc <tcpip_inpkt>
 801e586:	4603      	mov	r3, r0
 801e588:	e005      	b.n	801e596 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801e58a:	4a06      	ldr	r2, [pc, #24]	; (801e5a4 <tcpip_input+0x40>)
 801e58c:	6839      	ldr	r1, [r7, #0]
 801e58e:	6878      	ldr	r0, [r7, #4]
 801e590:	f7ff ffa4 	bl	801e4dc <tcpip_inpkt>
 801e594:	4603      	mov	r3, r0
}
 801e596:	4618      	mov	r0, r3
 801e598:	3708      	adds	r7, #8
 801e59a:	46bd      	mov	sp, r7
 801e59c:	bd80      	pop	{r7, pc}
 801e59e:	bf00      	nop
 801e5a0:	08014901 	.word	0x08014901
 801e5a4:	080150f1 	.word	0x080150f1

0801e5a8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801e5a8:	b580      	push	{r7, lr}
 801e5aa:	b084      	sub	sp, #16
 801e5ac:	af00      	add	r7, sp, #0
 801e5ae:	6078      	str	r0, [r7, #4]
 801e5b0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801e5b2:	4819      	ldr	r0, [pc, #100]	; (801e618 <tcpip_try_callback+0x70>)
 801e5b4:	f7f9 fd41 	bl	801803a <sys_mbox_valid>
 801e5b8:	4603      	mov	r3, r0
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	d106      	bne.n	801e5cc <tcpip_try_callback+0x24>
 801e5be:	4b17      	ldr	r3, [pc, #92]	; (801e61c <tcpip_try_callback+0x74>)
 801e5c0:	f240 125d 	movw	r2, #349	; 0x15d
 801e5c4:	4916      	ldr	r1, [pc, #88]	; (801e620 <tcpip_try_callback+0x78>)
 801e5c6:	4817      	ldr	r0, [pc, #92]	; (801e624 <tcpip_try_callback+0x7c>)
 801e5c8:	f001 faa0 	bl	801fb0c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801e5cc:	2008      	movs	r0, #8
 801e5ce:	f7f8 fa87 	bl	8016ae0 <memp_malloc>
 801e5d2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801e5d4:	68fb      	ldr	r3, [r7, #12]
 801e5d6:	2b00      	cmp	r3, #0
 801e5d8:	d102      	bne.n	801e5e0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801e5da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e5de:	e017      	b.n	801e610 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801e5e0:	68fb      	ldr	r3, [r7, #12]
 801e5e2:	2201      	movs	r2, #1
 801e5e4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801e5e6:	68fb      	ldr	r3, [r7, #12]
 801e5e8:	687a      	ldr	r2, [r7, #4]
 801e5ea:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801e5ec:	68fb      	ldr	r3, [r7, #12]
 801e5ee:	683a      	ldr	r2, [r7, #0]
 801e5f0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801e5f2:	68f9      	ldr	r1, [r7, #12]
 801e5f4:	4808      	ldr	r0, [pc, #32]	; (801e618 <tcpip_try_callback+0x70>)
 801e5f6:	f7f9 fcab 	bl	8017f50 <sys_mbox_trypost>
 801e5fa:	4603      	mov	r3, r0
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d006      	beq.n	801e60e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801e600:	68f9      	ldr	r1, [r7, #12]
 801e602:	2008      	movs	r0, #8
 801e604:	f7f8 fae2 	bl	8016bcc <memp_free>
    return ERR_MEM;
 801e608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e60c:	e000      	b.n	801e610 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801e60e:	2300      	movs	r3, #0
}
 801e610:	4618      	mov	r0, r3
 801e612:	3710      	adds	r7, #16
 801e614:	46bd      	mov	sp, r7
 801e616:	bd80      	pop	{r7, pc}
 801e618:	2400f978 	.word	0x2400f978
 801e61c:	08023dbc 	.word	0x08023dbc
 801e620:	08023e78 	.word	0x08023e78
 801e624:	08023e50 	.word	0x08023e50

0801e628 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801e628:	b580      	push	{r7, lr}
 801e62a:	b084      	sub	sp, #16
 801e62c:	af00      	add	r7, sp, #0
 801e62e:	60f8      	str	r0, [r7, #12]
 801e630:	60b9      	str	r1, [r7, #8]
 801e632:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801e634:	4806      	ldr	r0, [pc, #24]	; (801e650 <tcpip_send_msg_wait_sem+0x28>)
 801e636:	f7f9 fdd9 	bl	80181ec <sys_mutex_lock>
  fn(apimsg);
 801e63a:	68fb      	ldr	r3, [r7, #12]
 801e63c:	68b8      	ldr	r0, [r7, #8]
 801e63e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801e640:	4803      	ldr	r0, [pc, #12]	; (801e650 <tcpip_send_msg_wait_sem+0x28>)
 801e642:	f7f9 fde2 	bl	801820a <sys_mutex_unlock>
  return ERR_OK;
 801e646:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801e648:	4618      	mov	r0, r3
 801e64a:	3710      	adds	r7, #16
 801e64c:	46bd      	mov	sp, r7
 801e64e:	bd80      	pop	{r7, pc}
 801e650:	2400f97c 	.word	0x2400f97c

0801e654 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801e654:	b580      	push	{r7, lr}
 801e656:	b084      	sub	sp, #16
 801e658:	af02      	add	r7, sp, #8
 801e65a:	6078      	str	r0, [r7, #4]
 801e65c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801e65e:	f7f6 fc95 	bl	8014f8c <lwip_init>

  tcpip_init_done = initfunc;
 801e662:	4a17      	ldr	r2, [pc, #92]	; (801e6c0 <tcpip_init+0x6c>)
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801e668:	4a16      	ldr	r2, [pc, #88]	; (801e6c4 <tcpip_init+0x70>)
 801e66a:	683b      	ldr	r3, [r7, #0]
 801e66c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801e66e:	2106      	movs	r1, #6
 801e670:	4815      	ldr	r0, [pc, #84]	; (801e6c8 <tcpip_init+0x74>)
 801e672:	f7f9 fc39 	bl	8017ee8 <sys_mbox_new>
 801e676:	4603      	mov	r3, r0
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d006      	beq.n	801e68a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801e67c:	4b13      	ldr	r3, [pc, #76]	; (801e6cc <tcpip_init+0x78>)
 801e67e:	f240 2261 	movw	r2, #609	; 0x261
 801e682:	4913      	ldr	r1, [pc, #76]	; (801e6d0 <tcpip_init+0x7c>)
 801e684:	4813      	ldr	r0, [pc, #76]	; (801e6d4 <tcpip_init+0x80>)
 801e686:	f001 fa41 	bl	801fb0c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801e68a:	4813      	ldr	r0, [pc, #76]	; (801e6d8 <tcpip_init+0x84>)
 801e68c:	f7f9 fd92 	bl	80181b4 <sys_mutex_new>
 801e690:	4603      	mov	r3, r0
 801e692:	2b00      	cmp	r3, #0
 801e694:	d006      	beq.n	801e6a4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801e696:	4b0d      	ldr	r3, [pc, #52]	; (801e6cc <tcpip_init+0x78>)
 801e698:	f240 2265 	movw	r2, #613	; 0x265
 801e69c:	490f      	ldr	r1, [pc, #60]	; (801e6dc <tcpip_init+0x88>)
 801e69e:	480d      	ldr	r0, [pc, #52]	; (801e6d4 <tcpip_init+0x80>)
 801e6a0:	f001 fa34 	bl	801fb0c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801e6a4:	2300      	movs	r3, #0
 801e6a6:	9300      	str	r3, [sp, #0]
 801e6a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e6ac:	2200      	movs	r2, #0
 801e6ae:	490c      	ldr	r1, [pc, #48]	; (801e6e0 <tcpip_init+0x8c>)
 801e6b0:	480c      	ldr	r0, [pc, #48]	; (801e6e4 <tcpip_init+0x90>)
 801e6b2:	f7f9 fdb7 	bl	8018224 <sys_thread_new>
}
 801e6b6:	bf00      	nop
 801e6b8:	3708      	adds	r7, #8
 801e6ba:	46bd      	mov	sp, r7
 801e6bc:	bd80      	pop	{r7, pc}
 801e6be:	bf00      	nop
 801e6c0:	2400f970 	.word	0x2400f970
 801e6c4:	2400f974 	.word	0x2400f974
 801e6c8:	2400f978 	.word	0x2400f978
 801e6cc:	08023dbc 	.word	0x08023dbc
 801e6d0:	08023e88 	.word	0x08023e88
 801e6d4:	08023e50 	.word	0x08023e50
 801e6d8:	2400f97c 	.word	0x2400f97c
 801e6dc:	08023eac 	.word	0x08023eac
 801e6e0:	0801e3e5 	.word	0x0801e3e5
 801e6e4:	08023ed0 	.word	0x08023ed0

0801e6e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801e6e8:	b580      	push	{r7, lr}
 801e6ea:	b082      	sub	sp, #8
 801e6ec:	af00      	add	r7, sp, #0
 801e6ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801e6f0:	f7f9 fe26 	bl	8018340 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801e6f4:	4b0a      	ldr	r3, [pc, #40]	; (801e720 <tcpip_tcp_timer+0x38>)
 801e6f6:	681b      	ldr	r3, [r3, #0]
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d103      	bne.n	801e704 <tcpip_tcp_timer+0x1c>
 801e6fc:	4b09      	ldr	r3, [pc, #36]	; (801e724 <tcpip_tcp_timer+0x3c>)
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	2b00      	cmp	r3, #0
 801e702:	d005      	beq.n	801e710 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801e704:	2200      	movs	r2, #0
 801e706:	4908      	ldr	r1, [pc, #32]	; (801e728 <tcpip_tcp_timer+0x40>)
 801e708:	20fa      	movs	r0, #250	; 0xfa
 801e70a:	f000 f8f3 	bl	801e8f4 <sys_timeout>
 801e70e:	e003      	b.n	801e718 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801e710:	4b06      	ldr	r3, [pc, #24]	; (801e72c <tcpip_tcp_timer+0x44>)
 801e712:	2200      	movs	r2, #0
 801e714:	601a      	str	r2, [r3, #0]
  }
}
 801e716:	bf00      	nop
 801e718:	bf00      	nop
 801e71a:	3708      	adds	r7, #8
 801e71c:	46bd      	mov	sp, r7
 801e71e:	bd80      	pop	{r7, pc}
 801e720:	2400f92c 	.word	0x2400f92c
 801e724:	2400f930 	.word	0x2400f930
 801e728:	0801e6e9 	.word	0x0801e6e9
 801e72c:	2400f988 	.word	0x2400f988

0801e730 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801e730:	b580      	push	{r7, lr}
 801e732:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801e734:	4b0a      	ldr	r3, [pc, #40]	; (801e760 <tcp_timer_needed+0x30>)
 801e736:	681b      	ldr	r3, [r3, #0]
 801e738:	2b00      	cmp	r3, #0
 801e73a:	d10f      	bne.n	801e75c <tcp_timer_needed+0x2c>
 801e73c:	4b09      	ldr	r3, [pc, #36]	; (801e764 <tcp_timer_needed+0x34>)
 801e73e:	681b      	ldr	r3, [r3, #0]
 801e740:	2b00      	cmp	r3, #0
 801e742:	d103      	bne.n	801e74c <tcp_timer_needed+0x1c>
 801e744:	4b08      	ldr	r3, [pc, #32]	; (801e768 <tcp_timer_needed+0x38>)
 801e746:	681b      	ldr	r3, [r3, #0]
 801e748:	2b00      	cmp	r3, #0
 801e74a:	d007      	beq.n	801e75c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801e74c:	4b04      	ldr	r3, [pc, #16]	; (801e760 <tcp_timer_needed+0x30>)
 801e74e:	2201      	movs	r2, #1
 801e750:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801e752:	2200      	movs	r2, #0
 801e754:	4905      	ldr	r1, [pc, #20]	; (801e76c <tcp_timer_needed+0x3c>)
 801e756:	20fa      	movs	r0, #250	; 0xfa
 801e758:	f000 f8cc 	bl	801e8f4 <sys_timeout>
  }
}
 801e75c:	bf00      	nop
 801e75e:	bd80      	pop	{r7, pc}
 801e760:	2400f988 	.word	0x2400f988
 801e764:	2400f92c 	.word	0x2400f92c
 801e768:	2400f930 	.word	0x2400f930
 801e76c:	0801e6e9 	.word	0x0801e6e9

0801e770 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801e770:	b580      	push	{r7, lr}
 801e772:	b086      	sub	sp, #24
 801e774:	af00      	add	r7, sp, #0
 801e776:	60f8      	str	r0, [r7, #12]
 801e778:	60b9      	str	r1, [r7, #8]
 801e77a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801e77c:	200a      	movs	r0, #10
 801e77e:	f7f8 f9af 	bl	8016ae0 <memp_malloc>
 801e782:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801e784:	693b      	ldr	r3, [r7, #16]
 801e786:	2b00      	cmp	r3, #0
 801e788:	d109      	bne.n	801e79e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801e78a:	693b      	ldr	r3, [r7, #16]
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d151      	bne.n	801e834 <sys_timeout_abs+0xc4>
 801e790:	4b2a      	ldr	r3, [pc, #168]	; (801e83c <sys_timeout_abs+0xcc>)
 801e792:	22be      	movs	r2, #190	; 0xbe
 801e794:	492a      	ldr	r1, [pc, #168]	; (801e840 <sys_timeout_abs+0xd0>)
 801e796:	482b      	ldr	r0, [pc, #172]	; (801e844 <sys_timeout_abs+0xd4>)
 801e798:	f001 f9b8 	bl	801fb0c <iprintf>
    return;
 801e79c:	e04a      	b.n	801e834 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801e79e:	693b      	ldr	r3, [r7, #16]
 801e7a0:	2200      	movs	r2, #0
 801e7a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801e7a4:	693b      	ldr	r3, [r7, #16]
 801e7a6:	68ba      	ldr	r2, [r7, #8]
 801e7a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801e7aa:	693b      	ldr	r3, [r7, #16]
 801e7ac:	687a      	ldr	r2, [r7, #4]
 801e7ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801e7b0:	693b      	ldr	r3, [r7, #16]
 801e7b2:	68fa      	ldr	r2, [r7, #12]
 801e7b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801e7b6:	4b24      	ldr	r3, [pc, #144]	; (801e848 <sys_timeout_abs+0xd8>)
 801e7b8:	681b      	ldr	r3, [r3, #0]
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d103      	bne.n	801e7c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801e7be:	4a22      	ldr	r2, [pc, #136]	; (801e848 <sys_timeout_abs+0xd8>)
 801e7c0:	693b      	ldr	r3, [r7, #16]
 801e7c2:	6013      	str	r3, [r2, #0]
    return;
 801e7c4:	e037      	b.n	801e836 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801e7c6:	693b      	ldr	r3, [r7, #16]
 801e7c8:	685a      	ldr	r2, [r3, #4]
 801e7ca:	4b1f      	ldr	r3, [pc, #124]	; (801e848 <sys_timeout_abs+0xd8>)
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	685b      	ldr	r3, [r3, #4]
 801e7d0:	1ad3      	subs	r3, r2, r3
 801e7d2:	0fdb      	lsrs	r3, r3, #31
 801e7d4:	f003 0301 	and.w	r3, r3, #1
 801e7d8:	b2db      	uxtb	r3, r3
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d007      	beq.n	801e7ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801e7de:	4b1a      	ldr	r3, [pc, #104]	; (801e848 <sys_timeout_abs+0xd8>)
 801e7e0:	681a      	ldr	r2, [r3, #0]
 801e7e2:	693b      	ldr	r3, [r7, #16]
 801e7e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801e7e6:	4a18      	ldr	r2, [pc, #96]	; (801e848 <sys_timeout_abs+0xd8>)
 801e7e8:	693b      	ldr	r3, [r7, #16]
 801e7ea:	6013      	str	r3, [r2, #0]
 801e7ec:	e023      	b.n	801e836 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801e7ee:	4b16      	ldr	r3, [pc, #88]	; (801e848 <sys_timeout_abs+0xd8>)
 801e7f0:	681b      	ldr	r3, [r3, #0]
 801e7f2:	617b      	str	r3, [r7, #20]
 801e7f4:	e01a      	b.n	801e82c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801e7f6:	697b      	ldr	r3, [r7, #20]
 801e7f8:	681b      	ldr	r3, [r3, #0]
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d00b      	beq.n	801e816 <sys_timeout_abs+0xa6>
 801e7fe:	693b      	ldr	r3, [r7, #16]
 801e800:	685a      	ldr	r2, [r3, #4]
 801e802:	697b      	ldr	r3, [r7, #20]
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	685b      	ldr	r3, [r3, #4]
 801e808:	1ad3      	subs	r3, r2, r3
 801e80a:	0fdb      	lsrs	r3, r3, #31
 801e80c:	f003 0301 	and.w	r3, r3, #1
 801e810:	b2db      	uxtb	r3, r3
 801e812:	2b00      	cmp	r3, #0
 801e814:	d007      	beq.n	801e826 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801e816:	697b      	ldr	r3, [r7, #20]
 801e818:	681a      	ldr	r2, [r3, #0]
 801e81a:	693b      	ldr	r3, [r7, #16]
 801e81c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801e81e:	697b      	ldr	r3, [r7, #20]
 801e820:	693a      	ldr	r2, [r7, #16]
 801e822:	601a      	str	r2, [r3, #0]
        break;
 801e824:	e007      	b.n	801e836 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801e826:	697b      	ldr	r3, [r7, #20]
 801e828:	681b      	ldr	r3, [r3, #0]
 801e82a:	617b      	str	r3, [r7, #20]
 801e82c:	697b      	ldr	r3, [r7, #20]
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d1e1      	bne.n	801e7f6 <sys_timeout_abs+0x86>
 801e832:	e000      	b.n	801e836 <sys_timeout_abs+0xc6>
    return;
 801e834:	bf00      	nop
      }
    }
  }
}
 801e836:	3718      	adds	r7, #24
 801e838:	46bd      	mov	sp, r7
 801e83a:	bd80      	pop	{r7, pc}
 801e83c:	08023ee0 	.word	0x08023ee0
 801e840:	08023f58 	.word	0x08023f58
 801e844:	08023f98 	.word	0x08023f98
 801e848:	2400f980 	.word	0x2400f980

0801e84c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801e84c:	b580      	push	{r7, lr}
 801e84e:	b086      	sub	sp, #24
 801e850:	af00      	add	r7, sp, #0
 801e852:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801e858:	697b      	ldr	r3, [r7, #20]
 801e85a:	685b      	ldr	r3, [r3, #4]
 801e85c:	4798      	blx	r3

  now = sys_now();
 801e85e:	f7ec feb7 	bl	800b5d0 <sys_now>
 801e862:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801e864:	697b      	ldr	r3, [r7, #20]
 801e866:	681a      	ldr	r2, [r3, #0]
 801e868:	4b0f      	ldr	r3, [pc, #60]	; (801e8a8 <lwip_cyclic_timer+0x5c>)
 801e86a:	681b      	ldr	r3, [r3, #0]
 801e86c:	4413      	add	r3, r2
 801e86e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801e870:	68fa      	ldr	r2, [r7, #12]
 801e872:	693b      	ldr	r3, [r7, #16]
 801e874:	1ad3      	subs	r3, r2, r3
 801e876:	0fdb      	lsrs	r3, r3, #31
 801e878:	f003 0301 	and.w	r3, r3, #1
 801e87c:	b2db      	uxtb	r3, r3
 801e87e:	2b00      	cmp	r3, #0
 801e880:	d009      	beq.n	801e896 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801e882:	697b      	ldr	r3, [r7, #20]
 801e884:	681a      	ldr	r2, [r3, #0]
 801e886:	693b      	ldr	r3, [r7, #16]
 801e888:	4413      	add	r3, r2
 801e88a:	687a      	ldr	r2, [r7, #4]
 801e88c:	4907      	ldr	r1, [pc, #28]	; (801e8ac <lwip_cyclic_timer+0x60>)
 801e88e:	4618      	mov	r0, r3
 801e890:	f7ff ff6e 	bl	801e770 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801e894:	e004      	b.n	801e8a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801e896:	687a      	ldr	r2, [r7, #4]
 801e898:	4904      	ldr	r1, [pc, #16]	; (801e8ac <lwip_cyclic_timer+0x60>)
 801e89a:	68f8      	ldr	r0, [r7, #12]
 801e89c:	f7ff ff68 	bl	801e770 <sys_timeout_abs>
}
 801e8a0:	bf00      	nop
 801e8a2:	3718      	adds	r7, #24
 801e8a4:	46bd      	mov	sp, r7
 801e8a6:	bd80      	pop	{r7, pc}
 801e8a8:	2400f984 	.word	0x2400f984
 801e8ac:	0801e84d 	.word	0x0801e84d

0801e8b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801e8b0:	b580      	push	{r7, lr}
 801e8b2:	b082      	sub	sp, #8
 801e8b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801e8b6:	2301      	movs	r3, #1
 801e8b8:	607b      	str	r3, [r7, #4]
 801e8ba:	e00e      	b.n	801e8da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801e8bc:	4a0b      	ldr	r2, [pc, #44]	; (801e8ec <sys_timeouts_init+0x3c>)
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	00db      	lsls	r3, r3, #3
 801e8c8:	4a08      	ldr	r2, [pc, #32]	; (801e8ec <sys_timeouts_init+0x3c>)
 801e8ca:	4413      	add	r3, r2
 801e8cc:	461a      	mov	r2, r3
 801e8ce:	4908      	ldr	r1, [pc, #32]	; (801e8f0 <sys_timeouts_init+0x40>)
 801e8d0:	f000 f810 	bl	801e8f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801e8d4:	687b      	ldr	r3, [r7, #4]
 801e8d6:	3301      	adds	r3, #1
 801e8d8:	607b      	str	r3, [r7, #4]
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	2b02      	cmp	r3, #2
 801e8de:	d9ed      	bls.n	801e8bc <sys_timeouts_init+0xc>
  }
}
 801e8e0:	bf00      	nop
 801e8e2:	bf00      	nop
 801e8e4:	3708      	adds	r7, #8
 801e8e6:	46bd      	mov	sp, r7
 801e8e8:	bd80      	pop	{r7, pc}
 801e8ea:	bf00      	nop
 801e8ec:	0802452c 	.word	0x0802452c
 801e8f0:	0801e84d 	.word	0x0801e84d

0801e8f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801e8f4:	b580      	push	{r7, lr}
 801e8f6:	b086      	sub	sp, #24
 801e8f8:	af00      	add	r7, sp, #0
 801e8fa:	60f8      	str	r0, [r7, #12]
 801e8fc:	60b9      	str	r1, [r7, #8]
 801e8fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e906:	d306      	bcc.n	801e916 <sys_timeout+0x22>
 801e908:	4b0a      	ldr	r3, [pc, #40]	; (801e934 <sys_timeout+0x40>)
 801e90a:	f240 1229 	movw	r2, #297	; 0x129
 801e90e:	490a      	ldr	r1, [pc, #40]	; (801e938 <sys_timeout+0x44>)
 801e910:	480a      	ldr	r0, [pc, #40]	; (801e93c <sys_timeout+0x48>)
 801e912:	f001 f8fb 	bl	801fb0c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801e916:	f7ec fe5b 	bl	800b5d0 <sys_now>
 801e91a:	4602      	mov	r2, r0
 801e91c:	68fb      	ldr	r3, [r7, #12]
 801e91e:	4413      	add	r3, r2
 801e920:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801e922:	687a      	ldr	r2, [r7, #4]
 801e924:	68b9      	ldr	r1, [r7, #8]
 801e926:	6978      	ldr	r0, [r7, #20]
 801e928:	f7ff ff22 	bl	801e770 <sys_timeout_abs>
#endif
}
 801e92c:	bf00      	nop
 801e92e:	3718      	adds	r7, #24
 801e930:	46bd      	mov	sp, r7
 801e932:	bd80      	pop	{r7, pc}
 801e934:	08023ee0 	.word	0x08023ee0
 801e938:	08023fc0 	.word	0x08023fc0
 801e93c:	08023f98 	.word	0x08023f98

0801e940 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801e940:	b580      	push	{r7, lr}
 801e942:	b084      	sub	sp, #16
 801e944:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801e946:	f7ec fe43 	bl	800b5d0 <sys_now>
 801e94a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801e94c:	4b17      	ldr	r3, [pc, #92]	; (801e9ac <sys_check_timeouts+0x6c>)
 801e94e:	681b      	ldr	r3, [r3, #0]
 801e950:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801e952:	68bb      	ldr	r3, [r7, #8]
 801e954:	2b00      	cmp	r3, #0
 801e956:	d022      	beq.n	801e99e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801e958:	68bb      	ldr	r3, [r7, #8]
 801e95a:	685b      	ldr	r3, [r3, #4]
 801e95c:	68fa      	ldr	r2, [r7, #12]
 801e95e:	1ad3      	subs	r3, r2, r3
 801e960:	0fdb      	lsrs	r3, r3, #31
 801e962:	f003 0301 	and.w	r3, r3, #1
 801e966:	b2db      	uxtb	r3, r3
 801e968:	2b00      	cmp	r3, #0
 801e96a:	d11a      	bne.n	801e9a2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801e96c:	68bb      	ldr	r3, [r7, #8]
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	4a0e      	ldr	r2, [pc, #56]	; (801e9ac <sys_check_timeouts+0x6c>)
 801e972:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801e974:	68bb      	ldr	r3, [r7, #8]
 801e976:	689b      	ldr	r3, [r3, #8]
 801e978:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801e97a:	68bb      	ldr	r3, [r7, #8]
 801e97c:	68db      	ldr	r3, [r3, #12]
 801e97e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801e980:	68bb      	ldr	r3, [r7, #8]
 801e982:	685b      	ldr	r3, [r3, #4]
 801e984:	4a0a      	ldr	r2, [pc, #40]	; (801e9b0 <sys_check_timeouts+0x70>)
 801e986:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801e988:	68b9      	ldr	r1, [r7, #8]
 801e98a:	200a      	movs	r0, #10
 801e98c:	f7f8 f91e 	bl	8016bcc <memp_free>
    if (handler != NULL) {
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	2b00      	cmp	r3, #0
 801e994:	d0da      	beq.n	801e94c <sys_check_timeouts+0xc>
      handler(arg);
 801e996:	687b      	ldr	r3, [r7, #4]
 801e998:	6838      	ldr	r0, [r7, #0]
 801e99a:	4798      	blx	r3
  do {
 801e99c:	e7d6      	b.n	801e94c <sys_check_timeouts+0xc>
      return;
 801e99e:	bf00      	nop
 801e9a0:	e000      	b.n	801e9a4 <sys_check_timeouts+0x64>
      return;
 801e9a2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801e9a4:	3710      	adds	r7, #16
 801e9a6:	46bd      	mov	sp, r7
 801e9a8:	bd80      	pop	{r7, pc}
 801e9aa:	bf00      	nop
 801e9ac:	2400f980 	.word	0x2400f980
 801e9b0:	2400f984 	.word	0x2400f984

0801e9b4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801e9b4:	b580      	push	{r7, lr}
 801e9b6:	b082      	sub	sp, #8
 801e9b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801e9ba:	4b16      	ldr	r3, [pc, #88]	; (801ea14 <sys_timeouts_sleeptime+0x60>)
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	2b00      	cmp	r3, #0
 801e9c0:	d102      	bne.n	801e9c8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801e9c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e9c6:	e020      	b.n	801ea0a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801e9c8:	f7ec fe02 	bl	800b5d0 <sys_now>
 801e9cc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801e9ce:	4b11      	ldr	r3, [pc, #68]	; (801ea14 <sys_timeouts_sleeptime+0x60>)
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	685a      	ldr	r2, [r3, #4]
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	1ad3      	subs	r3, r2, r3
 801e9d8:	0fdb      	lsrs	r3, r3, #31
 801e9da:	f003 0301 	and.w	r3, r3, #1
 801e9de:	b2db      	uxtb	r3, r3
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	d001      	beq.n	801e9e8 <sys_timeouts_sleeptime+0x34>
    return 0;
 801e9e4:	2300      	movs	r3, #0
 801e9e6:	e010      	b.n	801ea0a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801e9e8:	4b0a      	ldr	r3, [pc, #40]	; (801ea14 <sys_timeouts_sleeptime+0x60>)
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	685a      	ldr	r2, [r3, #4]
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	1ad3      	subs	r3, r2, r3
 801e9f2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801e9f4:	683b      	ldr	r3, [r7, #0]
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	da06      	bge.n	801ea08 <sys_timeouts_sleeptime+0x54>
 801e9fa:	4b07      	ldr	r3, [pc, #28]	; (801ea18 <sys_timeouts_sleeptime+0x64>)
 801e9fc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ea00:	4906      	ldr	r1, [pc, #24]	; (801ea1c <sys_timeouts_sleeptime+0x68>)
 801ea02:	4807      	ldr	r0, [pc, #28]	; (801ea20 <sys_timeouts_sleeptime+0x6c>)
 801ea04:	f001 f882 	bl	801fb0c <iprintf>
    return ret;
 801ea08:	683b      	ldr	r3, [r7, #0]
  }
}
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	3708      	adds	r7, #8
 801ea0e:	46bd      	mov	sp, r7
 801ea10:	bd80      	pop	{r7, pc}
 801ea12:	bf00      	nop
 801ea14:	2400f980 	.word	0x2400f980
 801ea18:	08023ee0 	.word	0x08023ee0
 801ea1c:	08023ff8 	.word	0x08023ff8
 801ea20:	08023f98 	.word	0x08023f98

0801ea24 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ea24:	b580      	push	{r7, lr}
 801ea26:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ea28:	f001 f8fe 	bl	801fc28 <rand>
 801ea2c:	4603      	mov	r3, r0
 801ea2e:	b29b      	uxth	r3, r3
 801ea30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ea34:	b29b      	uxth	r3, r3
 801ea36:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ea3a:	b29a      	uxth	r2, r3
 801ea3c:	4b01      	ldr	r3, [pc, #4]	; (801ea44 <udp_init+0x20>)
 801ea3e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ea40:	bf00      	nop
 801ea42:	bd80      	pop	{r7, pc}
 801ea44:	24000030 	.word	0x24000030

0801ea48 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ea48:	b480      	push	{r7}
 801ea4a:	b083      	sub	sp, #12
 801ea4c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ea4e:	2300      	movs	r3, #0
 801ea50:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ea52:	4b17      	ldr	r3, [pc, #92]	; (801eab0 <udp_new_port+0x68>)
 801ea54:	881b      	ldrh	r3, [r3, #0]
 801ea56:	1c5a      	adds	r2, r3, #1
 801ea58:	b291      	uxth	r1, r2
 801ea5a:	4a15      	ldr	r2, [pc, #84]	; (801eab0 <udp_new_port+0x68>)
 801ea5c:	8011      	strh	r1, [r2, #0]
 801ea5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ea62:	4293      	cmp	r3, r2
 801ea64:	d103      	bne.n	801ea6e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ea66:	4b12      	ldr	r3, [pc, #72]	; (801eab0 <udp_new_port+0x68>)
 801ea68:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ea6c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ea6e:	4b11      	ldr	r3, [pc, #68]	; (801eab4 <udp_new_port+0x6c>)
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	603b      	str	r3, [r7, #0]
 801ea74:	e011      	b.n	801ea9a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ea76:	683b      	ldr	r3, [r7, #0]
 801ea78:	8a5a      	ldrh	r2, [r3, #18]
 801ea7a:	4b0d      	ldr	r3, [pc, #52]	; (801eab0 <udp_new_port+0x68>)
 801ea7c:	881b      	ldrh	r3, [r3, #0]
 801ea7e:	429a      	cmp	r2, r3
 801ea80:	d108      	bne.n	801ea94 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ea82:	88fb      	ldrh	r3, [r7, #6]
 801ea84:	3301      	adds	r3, #1
 801ea86:	80fb      	strh	r3, [r7, #6]
 801ea88:	88fb      	ldrh	r3, [r7, #6]
 801ea8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ea8e:	d3e0      	bcc.n	801ea52 <udp_new_port+0xa>
        return 0;
 801ea90:	2300      	movs	r3, #0
 801ea92:	e007      	b.n	801eaa4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ea94:	683b      	ldr	r3, [r7, #0]
 801ea96:	68db      	ldr	r3, [r3, #12]
 801ea98:	603b      	str	r3, [r7, #0]
 801ea9a:	683b      	ldr	r3, [r7, #0]
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	d1ea      	bne.n	801ea76 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801eaa0:	4b03      	ldr	r3, [pc, #12]	; (801eab0 <udp_new_port+0x68>)
 801eaa2:	881b      	ldrh	r3, [r3, #0]
}
 801eaa4:	4618      	mov	r0, r3
 801eaa6:	370c      	adds	r7, #12
 801eaa8:	46bd      	mov	sp, r7
 801eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaae:	4770      	bx	lr
 801eab0:	24000030 	.word	0x24000030
 801eab4:	2400f98c 	.word	0x2400f98c

0801eab8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801eab8:	b580      	push	{r7, lr}
 801eaba:	b084      	sub	sp, #16
 801eabc:	af00      	add	r7, sp, #0
 801eabe:	60f8      	str	r0, [r7, #12]
 801eac0:	60b9      	str	r1, [r7, #8]
 801eac2:	4613      	mov	r3, r2
 801eac4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801eac6:	68fb      	ldr	r3, [r7, #12]
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	d105      	bne.n	801ead8 <udp_input_local_match+0x20>
 801eacc:	4b27      	ldr	r3, [pc, #156]	; (801eb6c <udp_input_local_match+0xb4>)
 801eace:	2287      	movs	r2, #135	; 0x87
 801ead0:	4927      	ldr	r1, [pc, #156]	; (801eb70 <udp_input_local_match+0xb8>)
 801ead2:	4828      	ldr	r0, [pc, #160]	; (801eb74 <udp_input_local_match+0xbc>)
 801ead4:	f001 f81a 	bl	801fb0c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ead8:	68bb      	ldr	r3, [r7, #8]
 801eada:	2b00      	cmp	r3, #0
 801eadc:	d105      	bne.n	801eaea <udp_input_local_match+0x32>
 801eade:	4b23      	ldr	r3, [pc, #140]	; (801eb6c <udp_input_local_match+0xb4>)
 801eae0:	2288      	movs	r2, #136	; 0x88
 801eae2:	4925      	ldr	r1, [pc, #148]	; (801eb78 <udp_input_local_match+0xc0>)
 801eae4:	4823      	ldr	r0, [pc, #140]	; (801eb74 <udp_input_local_match+0xbc>)
 801eae6:	f001 f811 	bl	801fb0c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801eaea:	68fb      	ldr	r3, [r7, #12]
 801eaec:	7a1b      	ldrb	r3, [r3, #8]
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d00b      	beq.n	801eb0a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801eaf2:	68fb      	ldr	r3, [r7, #12]
 801eaf4:	7a1a      	ldrb	r2, [r3, #8]
 801eaf6:	4b21      	ldr	r3, [pc, #132]	; (801eb7c <udp_input_local_match+0xc4>)
 801eaf8:	685b      	ldr	r3, [r3, #4]
 801eafa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801eafe:	3301      	adds	r3, #1
 801eb00:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801eb02:	429a      	cmp	r2, r3
 801eb04:	d001      	beq.n	801eb0a <udp_input_local_match+0x52>
    return 0;
 801eb06:	2300      	movs	r3, #0
 801eb08:	e02b      	b.n	801eb62 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801eb0a:	79fb      	ldrb	r3, [r7, #7]
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d018      	beq.n	801eb42 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801eb10:	68fb      	ldr	r3, [r7, #12]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d013      	beq.n	801eb3e <udp_input_local_match+0x86>
 801eb16:	68fb      	ldr	r3, [r7, #12]
 801eb18:	681b      	ldr	r3, [r3, #0]
 801eb1a:	2b00      	cmp	r3, #0
 801eb1c:	d00f      	beq.n	801eb3e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801eb1e:	4b17      	ldr	r3, [pc, #92]	; (801eb7c <udp_input_local_match+0xc4>)
 801eb20:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801eb22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801eb26:	d00a      	beq.n	801eb3e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801eb28:	68fb      	ldr	r3, [r7, #12]
 801eb2a:	681a      	ldr	r2, [r3, #0]
 801eb2c:	4b13      	ldr	r3, [pc, #76]	; (801eb7c <udp_input_local_match+0xc4>)
 801eb2e:	695b      	ldr	r3, [r3, #20]
 801eb30:	405a      	eors	r2, r3
 801eb32:	68bb      	ldr	r3, [r7, #8]
 801eb34:	3308      	adds	r3, #8
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	d110      	bne.n	801eb60 <udp_input_local_match+0xa8>
          return 1;
 801eb3e:	2301      	movs	r3, #1
 801eb40:	e00f      	b.n	801eb62 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801eb42:	68fb      	ldr	r3, [r7, #12]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	d009      	beq.n	801eb5c <udp_input_local_match+0xa4>
 801eb48:	68fb      	ldr	r3, [r7, #12]
 801eb4a:	681b      	ldr	r3, [r3, #0]
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	d005      	beq.n	801eb5c <udp_input_local_match+0xa4>
 801eb50:	68fb      	ldr	r3, [r7, #12]
 801eb52:	681a      	ldr	r2, [r3, #0]
 801eb54:	4b09      	ldr	r3, [pc, #36]	; (801eb7c <udp_input_local_match+0xc4>)
 801eb56:	695b      	ldr	r3, [r3, #20]
 801eb58:	429a      	cmp	r2, r3
 801eb5a:	d101      	bne.n	801eb60 <udp_input_local_match+0xa8>
        return 1;
 801eb5c:	2301      	movs	r3, #1
 801eb5e:	e000      	b.n	801eb62 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801eb60:	2300      	movs	r3, #0
}
 801eb62:	4618      	mov	r0, r3
 801eb64:	3710      	adds	r7, #16
 801eb66:	46bd      	mov	sp, r7
 801eb68:	bd80      	pop	{r7, pc}
 801eb6a:	bf00      	nop
 801eb6c:	0802400c 	.word	0x0802400c
 801eb70:	08024080 	.word	0x08024080
 801eb74:	080240a4 	.word	0x080240a4
 801eb78:	080240cc 	.word	0x080240cc
 801eb7c:	24008e50 	.word	0x24008e50

0801eb80 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801eb80:	b590      	push	{r4, r7, lr}
 801eb82:	b08d      	sub	sp, #52	; 0x34
 801eb84:	af02      	add	r7, sp, #8
 801eb86:	6078      	str	r0, [r7, #4]
 801eb88:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801eb8a:	2300      	movs	r3, #0
 801eb8c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801eb8e:	687b      	ldr	r3, [r7, #4]
 801eb90:	2b00      	cmp	r3, #0
 801eb92:	d105      	bne.n	801eba0 <udp_input+0x20>
 801eb94:	4b7c      	ldr	r3, [pc, #496]	; (801ed88 <udp_input+0x208>)
 801eb96:	22cf      	movs	r2, #207	; 0xcf
 801eb98:	497c      	ldr	r1, [pc, #496]	; (801ed8c <udp_input+0x20c>)
 801eb9a:	487d      	ldr	r0, [pc, #500]	; (801ed90 <udp_input+0x210>)
 801eb9c:	f000 ffb6 	bl	801fb0c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801eba0:	683b      	ldr	r3, [r7, #0]
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	d105      	bne.n	801ebb2 <udp_input+0x32>
 801eba6:	4b78      	ldr	r3, [pc, #480]	; (801ed88 <udp_input+0x208>)
 801eba8:	22d0      	movs	r2, #208	; 0xd0
 801ebaa:	497a      	ldr	r1, [pc, #488]	; (801ed94 <udp_input+0x214>)
 801ebac:	4878      	ldr	r0, [pc, #480]	; (801ed90 <udp_input+0x210>)
 801ebae:	f000 ffad 	bl	801fb0c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801ebb2:	687b      	ldr	r3, [r7, #4]
 801ebb4:	895b      	ldrh	r3, [r3, #10]
 801ebb6:	2b07      	cmp	r3, #7
 801ebb8:	d803      	bhi.n	801ebc2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801ebba:	6878      	ldr	r0, [r7, #4]
 801ebbc:	f7f8 fefa 	bl	80179b4 <pbuf_free>
    goto end;
 801ebc0:	e0de      	b.n	801ed80 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	685b      	ldr	r3, [r3, #4]
 801ebc6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ebc8:	4b73      	ldr	r3, [pc, #460]	; (801ed98 <udp_input+0x218>)
 801ebca:	695b      	ldr	r3, [r3, #20]
 801ebcc:	4a72      	ldr	r2, [pc, #456]	; (801ed98 <udp_input+0x218>)
 801ebce:	6812      	ldr	r2, [r2, #0]
 801ebd0:	4611      	mov	r1, r2
 801ebd2:	4618      	mov	r0, r3
 801ebd4:	f7f6 fc88 	bl	80154e8 <ip4_addr_isbroadcast_u32>
 801ebd8:	4603      	mov	r3, r0
 801ebda:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801ebdc:	697b      	ldr	r3, [r7, #20]
 801ebde:	881b      	ldrh	r3, [r3, #0]
 801ebe0:	b29b      	uxth	r3, r3
 801ebe2:	4618      	mov	r0, r3
 801ebe4:	f7f4 ff12 	bl	8013a0c <lwip_htons>
 801ebe8:	4603      	mov	r3, r0
 801ebea:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801ebec:	697b      	ldr	r3, [r7, #20]
 801ebee:	885b      	ldrh	r3, [r3, #2]
 801ebf0:	b29b      	uxth	r3, r3
 801ebf2:	4618      	mov	r0, r3
 801ebf4:	f7f4 ff0a 	bl	8013a0c <lwip_htons>
 801ebf8:	4603      	mov	r3, r0
 801ebfa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801ebfc:	2300      	movs	r3, #0
 801ebfe:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801ec00:	2300      	movs	r3, #0
 801ec02:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801ec04:	2300      	movs	r3, #0
 801ec06:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ec08:	4b64      	ldr	r3, [pc, #400]	; (801ed9c <udp_input+0x21c>)
 801ec0a:	681b      	ldr	r3, [r3, #0]
 801ec0c:	627b      	str	r3, [r7, #36]	; 0x24
 801ec0e:	e054      	b.n	801ecba <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801ec10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec12:	8a5b      	ldrh	r3, [r3, #18]
 801ec14:	89fa      	ldrh	r2, [r7, #14]
 801ec16:	429a      	cmp	r2, r3
 801ec18:	d14a      	bne.n	801ecb0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801ec1a:	7cfb      	ldrb	r3, [r7, #19]
 801ec1c:	461a      	mov	r2, r3
 801ec1e:	6839      	ldr	r1, [r7, #0]
 801ec20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec22:	f7ff ff49 	bl	801eab8 <udp_input_local_match>
 801ec26:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	d041      	beq.n	801ecb0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801ec2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec2e:	7c1b      	ldrb	r3, [r3, #16]
 801ec30:	f003 0304 	and.w	r3, r3, #4
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	d11d      	bne.n	801ec74 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801ec38:	69fb      	ldr	r3, [r7, #28]
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	d102      	bne.n	801ec44 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801ec3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec40:	61fb      	str	r3, [r7, #28]
 801ec42:	e017      	b.n	801ec74 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801ec44:	7cfb      	ldrb	r3, [r7, #19]
 801ec46:	2b00      	cmp	r3, #0
 801ec48:	d014      	beq.n	801ec74 <udp_input+0xf4>
 801ec4a:	4b53      	ldr	r3, [pc, #332]	; (801ed98 <udp_input+0x218>)
 801ec4c:	695b      	ldr	r3, [r3, #20]
 801ec4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ec52:	d10f      	bne.n	801ec74 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ec54:	69fb      	ldr	r3, [r7, #28]
 801ec56:	681a      	ldr	r2, [r3, #0]
 801ec58:	683b      	ldr	r3, [r7, #0]
 801ec5a:	3304      	adds	r3, #4
 801ec5c:	681b      	ldr	r3, [r3, #0]
 801ec5e:	429a      	cmp	r2, r3
 801ec60:	d008      	beq.n	801ec74 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801ec62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec64:	681a      	ldr	r2, [r3, #0]
 801ec66:	683b      	ldr	r3, [r7, #0]
 801ec68:	3304      	adds	r3, #4
 801ec6a:	681b      	ldr	r3, [r3, #0]
 801ec6c:	429a      	cmp	r2, r3
 801ec6e:	d101      	bne.n	801ec74 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801ec70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec72:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801ec74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec76:	8a9b      	ldrh	r3, [r3, #20]
 801ec78:	8a3a      	ldrh	r2, [r7, #16]
 801ec7a:	429a      	cmp	r2, r3
 801ec7c:	d118      	bne.n	801ecb0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ec7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec80:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801ec82:	2b00      	cmp	r3, #0
 801ec84:	d005      	beq.n	801ec92 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801ec86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec88:	685a      	ldr	r2, [r3, #4]
 801ec8a:	4b43      	ldr	r3, [pc, #268]	; (801ed98 <udp_input+0x218>)
 801ec8c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ec8e:	429a      	cmp	r2, r3
 801ec90:	d10e      	bne.n	801ecb0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801ec92:	6a3b      	ldr	r3, [r7, #32]
 801ec94:	2b00      	cmp	r3, #0
 801ec96:	d014      	beq.n	801ecc2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec9a:	68da      	ldr	r2, [r3, #12]
 801ec9c:	6a3b      	ldr	r3, [r7, #32]
 801ec9e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801eca0:	4b3e      	ldr	r3, [pc, #248]	; (801ed9c <udp_input+0x21c>)
 801eca2:	681a      	ldr	r2, [r3, #0]
 801eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eca6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801eca8:	4a3c      	ldr	r2, [pc, #240]	; (801ed9c <udp_input+0x21c>)
 801ecaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecac:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801ecae:	e008      	b.n	801ecc2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801ecb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecb2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ecb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecb6:	68db      	ldr	r3, [r3, #12]
 801ecb8:	627b      	str	r3, [r7, #36]	; 0x24
 801ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecbc:	2b00      	cmp	r3, #0
 801ecbe:	d1a7      	bne.n	801ec10 <udp_input+0x90>
 801ecc0:	e000      	b.n	801ecc4 <udp_input+0x144>
        break;
 801ecc2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecc6:	2b00      	cmp	r3, #0
 801ecc8:	d101      	bne.n	801ecce <udp_input+0x14e>
    pcb = uncon_pcb;
 801ecca:	69fb      	ldr	r3, [r7, #28]
 801eccc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801ecce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	d002      	beq.n	801ecda <udp_input+0x15a>
    for_us = 1;
 801ecd4:	2301      	movs	r3, #1
 801ecd6:	76fb      	strb	r3, [r7, #27]
 801ecd8:	e00a      	b.n	801ecf0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801ecda:	683b      	ldr	r3, [r7, #0]
 801ecdc:	3304      	adds	r3, #4
 801ecde:	681a      	ldr	r2, [r3, #0]
 801ece0:	4b2d      	ldr	r3, [pc, #180]	; (801ed98 <udp_input+0x218>)
 801ece2:	695b      	ldr	r3, [r3, #20]
 801ece4:	429a      	cmp	r2, r3
 801ece6:	bf0c      	ite	eq
 801ece8:	2301      	moveq	r3, #1
 801ecea:	2300      	movne	r3, #0
 801ecec:	b2db      	uxtb	r3, r3
 801ecee:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801ecf0:	7efb      	ldrb	r3, [r7, #27]
 801ecf2:	2b00      	cmp	r3, #0
 801ecf4:	d041      	beq.n	801ed7a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801ecf6:	2108      	movs	r1, #8
 801ecf8:	6878      	ldr	r0, [r7, #4]
 801ecfa:	f7f8 fdd5 	bl	80178a8 <pbuf_remove_header>
 801ecfe:	4603      	mov	r3, r0
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	d00a      	beq.n	801ed1a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ed04:	4b20      	ldr	r3, [pc, #128]	; (801ed88 <udp_input+0x208>)
 801ed06:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ed0a:	4925      	ldr	r1, [pc, #148]	; (801eda0 <udp_input+0x220>)
 801ed0c:	4820      	ldr	r0, [pc, #128]	; (801ed90 <udp_input+0x210>)
 801ed0e:	f000 fefd 	bl	801fb0c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801ed12:	6878      	ldr	r0, [r7, #4]
 801ed14:	f7f8 fe4e 	bl	80179b4 <pbuf_free>
      goto end;
 801ed18:	e032      	b.n	801ed80 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d012      	beq.n	801ed46 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed22:	699b      	ldr	r3, [r3, #24]
 801ed24:	2b00      	cmp	r3, #0
 801ed26:	d00a      	beq.n	801ed3e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed2a:	699c      	ldr	r4, [r3, #24]
 801ed2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed2e:	69d8      	ldr	r0, [r3, #28]
 801ed30:	8a3b      	ldrh	r3, [r7, #16]
 801ed32:	9300      	str	r3, [sp, #0]
 801ed34:	4b1b      	ldr	r3, [pc, #108]	; (801eda4 <udp_input+0x224>)
 801ed36:	687a      	ldr	r2, [r7, #4]
 801ed38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ed3a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ed3c:	e021      	b.n	801ed82 <udp_input+0x202>
        pbuf_free(p);
 801ed3e:	6878      	ldr	r0, [r7, #4]
 801ed40:	f7f8 fe38 	bl	80179b4 <pbuf_free>
        goto end;
 801ed44:	e01c      	b.n	801ed80 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ed46:	7cfb      	ldrb	r3, [r7, #19]
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d112      	bne.n	801ed72 <udp_input+0x1f2>
 801ed4c:	4b12      	ldr	r3, [pc, #72]	; (801ed98 <udp_input+0x218>)
 801ed4e:	695b      	ldr	r3, [r3, #20]
 801ed50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ed54:	2be0      	cmp	r3, #224	; 0xe0
 801ed56:	d00c      	beq.n	801ed72 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ed58:	4b0f      	ldr	r3, [pc, #60]	; (801ed98 <udp_input+0x218>)
 801ed5a:	899b      	ldrh	r3, [r3, #12]
 801ed5c:	3308      	adds	r3, #8
 801ed5e:	b29b      	uxth	r3, r3
 801ed60:	b21b      	sxth	r3, r3
 801ed62:	4619      	mov	r1, r3
 801ed64:	6878      	ldr	r0, [r7, #4]
 801ed66:	f7f8 fe12 	bl	801798e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ed6a:	2103      	movs	r1, #3
 801ed6c:	6878      	ldr	r0, [r7, #4]
 801ed6e:	f7f5 ffbd 	bl	8014cec <icmp_dest_unreach>
      pbuf_free(p);
 801ed72:	6878      	ldr	r0, [r7, #4]
 801ed74:	f7f8 fe1e 	bl	80179b4 <pbuf_free>
  return;
 801ed78:	e003      	b.n	801ed82 <udp_input+0x202>
    pbuf_free(p);
 801ed7a:	6878      	ldr	r0, [r7, #4]
 801ed7c:	f7f8 fe1a 	bl	80179b4 <pbuf_free>
  return;
 801ed80:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ed82:	372c      	adds	r7, #44	; 0x2c
 801ed84:	46bd      	mov	sp, r7
 801ed86:	bd90      	pop	{r4, r7, pc}
 801ed88:	0802400c 	.word	0x0802400c
 801ed8c:	080240f4 	.word	0x080240f4
 801ed90:	080240a4 	.word	0x080240a4
 801ed94:	0802410c 	.word	0x0802410c
 801ed98:	24008e50 	.word	0x24008e50
 801ed9c:	2400f98c 	.word	0x2400f98c
 801eda0:	08024128 	.word	0x08024128
 801eda4:	24008e60 	.word	0x24008e60

0801eda8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801eda8:	b580      	push	{r7, lr}
 801edaa:	b086      	sub	sp, #24
 801edac:	af00      	add	r7, sp, #0
 801edae:	60f8      	str	r0, [r7, #12]
 801edb0:	60b9      	str	r1, [r7, #8]
 801edb2:	4613      	mov	r3, r2
 801edb4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801edb6:	68bb      	ldr	r3, [r7, #8]
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d101      	bne.n	801edc0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801edbc:	4b39      	ldr	r3, [pc, #228]	; (801eea4 <udp_bind+0xfc>)
 801edbe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801edc0:	68fb      	ldr	r3, [r7, #12]
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	d109      	bne.n	801edda <udp_bind+0x32>
 801edc6:	4b38      	ldr	r3, [pc, #224]	; (801eea8 <udp_bind+0x100>)
 801edc8:	f240 32b7 	movw	r2, #951	; 0x3b7
 801edcc:	4937      	ldr	r1, [pc, #220]	; (801eeac <udp_bind+0x104>)
 801edce:	4838      	ldr	r0, [pc, #224]	; (801eeb0 <udp_bind+0x108>)
 801edd0:	f000 fe9c 	bl	801fb0c <iprintf>
 801edd4:	f06f 030f 	mvn.w	r3, #15
 801edd8:	e060      	b.n	801ee9c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801edda:	2300      	movs	r3, #0
 801eddc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801edde:	4b35      	ldr	r3, [pc, #212]	; (801eeb4 <udp_bind+0x10c>)
 801ede0:	681b      	ldr	r3, [r3, #0]
 801ede2:	617b      	str	r3, [r7, #20]
 801ede4:	e009      	b.n	801edfa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ede6:	68fa      	ldr	r2, [r7, #12]
 801ede8:	697b      	ldr	r3, [r7, #20]
 801edea:	429a      	cmp	r2, r3
 801edec:	d102      	bne.n	801edf4 <udp_bind+0x4c>
      rebind = 1;
 801edee:	2301      	movs	r3, #1
 801edf0:	74fb      	strb	r3, [r7, #19]
      break;
 801edf2:	e005      	b.n	801ee00 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801edf4:	697b      	ldr	r3, [r7, #20]
 801edf6:	68db      	ldr	r3, [r3, #12]
 801edf8:	617b      	str	r3, [r7, #20]
 801edfa:	697b      	ldr	r3, [r7, #20]
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	d1f2      	bne.n	801ede6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801ee00:	88fb      	ldrh	r3, [r7, #6]
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d109      	bne.n	801ee1a <udp_bind+0x72>
    port = udp_new_port();
 801ee06:	f7ff fe1f 	bl	801ea48 <udp_new_port>
 801ee0a:	4603      	mov	r3, r0
 801ee0c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801ee0e:	88fb      	ldrh	r3, [r7, #6]
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d12c      	bne.n	801ee6e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801ee14:	f06f 0307 	mvn.w	r3, #7
 801ee18:	e040      	b.n	801ee9c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ee1a:	4b26      	ldr	r3, [pc, #152]	; (801eeb4 <udp_bind+0x10c>)
 801ee1c:	681b      	ldr	r3, [r3, #0]
 801ee1e:	617b      	str	r3, [r7, #20]
 801ee20:	e022      	b.n	801ee68 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801ee22:	68fa      	ldr	r2, [r7, #12]
 801ee24:	697b      	ldr	r3, [r7, #20]
 801ee26:	429a      	cmp	r2, r3
 801ee28:	d01b      	beq.n	801ee62 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801ee2a:	697b      	ldr	r3, [r7, #20]
 801ee2c:	8a5b      	ldrh	r3, [r3, #18]
 801ee2e:	88fa      	ldrh	r2, [r7, #6]
 801ee30:	429a      	cmp	r2, r3
 801ee32:	d116      	bne.n	801ee62 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ee34:	697b      	ldr	r3, [r7, #20]
 801ee36:	681a      	ldr	r2, [r3, #0]
 801ee38:	68bb      	ldr	r3, [r7, #8]
 801ee3a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801ee3c:	429a      	cmp	r2, r3
 801ee3e:	d00d      	beq.n	801ee5c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ee40:	68bb      	ldr	r3, [r7, #8]
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	d00a      	beq.n	801ee5c <udp_bind+0xb4>
 801ee46:	68bb      	ldr	r3, [r7, #8]
 801ee48:	681b      	ldr	r3, [r3, #0]
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	d006      	beq.n	801ee5c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ee4e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ee50:	2b00      	cmp	r3, #0
 801ee52:	d003      	beq.n	801ee5c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ee54:	697b      	ldr	r3, [r7, #20]
 801ee56:	681b      	ldr	r3, [r3, #0]
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	d102      	bne.n	801ee62 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801ee5c:	f06f 0307 	mvn.w	r3, #7
 801ee60:	e01c      	b.n	801ee9c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ee62:	697b      	ldr	r3, [r7, #20]
 801ee64:	68db      	ldr	r3, [r3, #12]
 801ee66:	617b      	str	r3, [r7, #20]
 801ee68:	697b      	ldr	r3, [r7, #20]
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d1d9      	bne.n	801ee22 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ee6e:	68bb      	ldr	r3, [r7, #8]
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	d002      	beq.n	801ee7a <udp_bind+0xd2>
 801ee74:	68bb      	ldr	r3, [r7, #8]
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	e000      	b.n	801ee7c <udp_bind+0xd4>
 801ee7a:	2300      	movs	r3, #0
 801ee7c:	68fa      	ldr	r2, [r7, #12]
 801ee7e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801ee80:	68fb      	ldr	r3, [r7, #12]
 801ee82:	88fa      	ldrh	r2, [r7, #6]
 801ee84:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801ee86:	7cfb      	ldrb	r3, [r7, #19]
 801ee88:	2b00      	cmp	r3, #0
 801ee8a:	d106      	bne.n	801ee9a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801ee8c:	4b09      	ldr	r3, [pc, #36]	; (801eeb4 <udp_bind+0x10c>)
 801ee8e:	681a      	ldr	r2, [r3, #0]
 801ee90:	68fb      	ldr	r3, [r7, #12]
 801ee92:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801ee94:	4a07      	ldr	r2, [pc, #28]	; (801eeb4 <udp_bind+0x10c>)
 801ee96:	68fb      	ldr	r3, [r7, #12]
 801ee98:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801ee9a:	2300      	movs	r3, #0
}
 801ee9c:	4618      	mov	r0, r3
 801ee9e:	3718      	adds	r7, #24
 801eea0:	46bd      	mov	sp, r7
 801eea2:	bd80      	pop	{r7, pc}
 801eea4:	08024428 	.word	0x08024428
 801eea8:	0802400c 	.word	0x0802400c
 801eeac:	08024318 	.word	0x08024318
 801eeb0:	080240a4 	.word	0x080240a4
 801eeb4:	2400f98c 	.word	0x2400f98c

0801eeb8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801eeb8:	b580      	push	{r7, lr}
 801eeba:	b084      	sub	sp, #16
 801eebc:	af00      	add	r7, sp, #0
 801eebe:	60f8      	str	r0, [r7, #12]
 801eec0:	60b9      	str	r1, [r7, #8]
 801eec2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801eec4:	68fb      	ldr	r3, [r7, #12]
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d107      	bne.n	801eeda <udp_recv+0x22>
 801eeca:	4b08      	ldr	r3, [pc, #32]	; (801eeec <udp_recv+0x34>)
 801eecc:	f240 428a 	movw	r2, #1162	; 0x48a
 801eed0:	4907      	ldr	r1, [pc, #28]	; (801eef0 <udp_recv+0x38>)
 801eed2:	4808      	ldr	r0, [pc, #32]	; (801eef4 <udp_recv+0x3c>)
 801eed4:	f000 fe1a 	bl	801fb0c <iprintf>
 801eed8:	e005      	b.n	801eee6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801eeda:	68fb      	ldr	r3, [r7, #12]
 801eedc:	68ba      	ldr	r2, [r7, #8]
 801eede:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801eee0:	68fb      	ldr	r3, [r7, #12]
 801eee2:	687a      	ldr	r2, [r7, #4]
 801eee4:	61da      	str	r2, [r3, #28]
}
 801eee6:	3710      	adds	r7, #16
 801eee8:	46bd      	mov	sp, r7
 801eeea:	bd80      	pop	{r7, pc}
 801eeec:	0802400c 	.word	0x0802400c
 801eef0:	08024384 	.word	0x08024384
 801eef4:	080240a4 	.word	0x080240a4

0801eef8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801eef8:	b580      	push	{r7, lr}
 801eefa:	b084      	sub	sp, #16
 801eefc:	af00      	add	r7, sp, #0
 801eefe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d107      	bne.n	801ef16 <udp_remove+0x1e>
 801ef06:	4b19      	ldr	r3, [pc, #100]	; (801ef6c <udp_remove+0x74>)
 801ef08:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801ef0c:	4918      	ldr	r1, [pc, #96]	; (801ef70 <udp_remove+0x78>)
 801ef0e:	4819      	ldr	r0, [pc, #100]	; (801ef74 <udp_remove+0x7c>)
 801ef10:	f000 fdfc 	bl	801fb0c <iprintf>
 801ef14:	e026      	b.n	801ef64 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ef16:	4b18      	ldr	r3, [pc, #96]	; (801ef78 <udp_remove+0x80>)
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	687a      	ldr	r2, [r7, #4]
 801ef1c:	429a      	cmp	r2, r3
 801ef1e:	d105      	bne.n	801ef2c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801ef20:	4b15      	ldr	r3, [pc, #84]	; (801ef78 <udp_remove+0x80>)
 801ef22:	681b      	ldr	r3, [r3, #0]
 801ef24:	68db      	ldr	r3, [r3, #12]
 801ef26:	4a14      	ldr	r2, [pc, #80]	; (801ef78 <udp_remove+0x80>)
 801ef28:	6013      	str	r3, [r2, #0]
 801ef2a:	e017      	b.n	801ef5c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ef2c:	4b12      	ldr	r3, [pc, #72]	; (801ef78 <udp_remove+0x80>)
 801ef2e:	681b      	ldr	r3, [r3, #0]
 801ef30:	60fb      	str	r3, [r7, #12]
 801ef32:	e010      	b.n	801ef56 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801ef34:	68fb      	ldr	r3, [r7, #12]
 801ef36:	68db      	ldr	r3, [r3, #12]
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	d009      	beq.n	801ef50 <udp_remove+0x58>
 801ef3c:	68fb      	ldr	r3, [r7, #12]
 801ef3e:	68db      	ldr	r3, [r3, #12]
 801ef40:	687a      	ldr	r2, [r7, #4]
 801ef42:	429a      	cmp	r2, r3
 801ef44:	d104      	bne.n	801ef50 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	68da      	ldr	r2, [r3, #12]
 801ef4a:	68fb      	ldr	r3, [r7, #12]
 801ef4c:	60da      	str	r2, [r3, #12]
        break;
 801ef4e:	e005      	b.n	801ef5c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ef50:	68fb      	ldr	r3, [r7, #12]
 801ef52:	68db      	ldr	r3, [r3, #12]
 801ef54:	60fb      	str	r3, [r7, #12]
 801ef56:	68fb      	ldr	r3, [r7, #12]
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	d1eb      	bne.n	801ef34 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801ef5c:	6879      	ldr	r1, [r7, #4]
 801ef5e:	2000      	movs	r0, #0
 801ef60:	f7f7 fe34 	bl	8016bcc <memp_free>
}
 801ef64:	3710      	adds	r7, #16
 801ef66:	46bd      	mov	sp, r7
 801ef68:	bd80      	pop	{r7, pc}
 801ef6a:	bf00      	nop
 801ef6c:	0802400c 	.word	0x0802400c
 801ef70:	0802439c 	.word	0x0802439c
 801ef74:	080240a4 	.word	0x080240a4
 801ef78:	2400f98c 	.word	0x2400f98c

0801ef7c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801ef7c:	b580      	push	{r7, lr}
 801ef7e:	b082      	sub	sp, #8
 801ef80:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801ef82:	2000      	movs	r0, #0
 801ef84:	f7f7 fdac 	bl	8016ae0 <memp_malloc>
 801ef88:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d007      	beq.n	801efa0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801ef90:	2220      	movs	r2, #32
 801ef92:	2100      	movs	r1, #0
 801ef94:	6878      	ldr	r0, [r7, #4]
 801ef96:	f000 f9e3 	bl	801f360 <memset>
    pcb->ttl = UDP_TTL;
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	22ff      	movs	r2, #255	; 0xff
 801ef9e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801efa0:	687b      	ldr	r3, [r7, #4]
}
 801efa2:	4618      	mov	r0, r3
 801efa4:	3708      	adds	r7, #8
 801efa6:	46bd      	mov	sp, r7
 801efa8:	bd80      	pop	{r7, pc}

0801efaa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801efaa:	b580      	push	{r7, lr}
 801efac:	b084      	sub	sp, #16
 801efae:	af00      	add	r7, sp, #0
 801efb0:	4603      	mov	r3, r0
 801efb2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801efb4:	f7ff ffe2 	bl	801ef7c <udp_new>
 801efb8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801efba:	68fb      	ldr	r3, [r7, #12]
}
 801efbc:	4618      	mov	r0, r3
 801efbe:	3710      	adds	r7, #16
 801efc0:	46bd      	mov	sp, r7
 801efc2:	bd80      	pop	{r7, pc}

0801efc4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801efc4:	b480      	push	{r7}
 801efc6:	b085      	sub	sp, #20
 801efc8:	af00      	add	r7, sp, #0
 801efca:	6078      	str	r0, [r7, #4]
 801efcc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	d01e      	beq.n	801f012 <udp_netif_ip_addr_changed+0x4e>
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	681b      	ldr	r3, [r3, #0]
 801efd8:	2b00      	cmp	r3, #0
 801efda:	d01a      	beq.n	801f012 <udp_netif_ip_addr_changed+0x4e>
 801efdc:	683b      	ldr	r3, [r7, #0]
 801efde:	2b00      	cmp	r3, #0
 801efe0:	d017      	beq.n	801f012 <udp_netif_ip_addr_changed+0x4e>
 801efe2:	683b      	ldr	r3, [r7, #0]
 801efe4:	681b      	ldr	r3, [r3, #0]
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	d013      	beq.n	801f012 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801efea:	4b0d      	ldr	r3, [pc, #52]	; (801f020 <udp_netif_ip_addr_changed+0x5c>)
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	60fb      	str	r3, [r7, #12]
 801eff0:	e00c      	b.n	801f00c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801eff2:	68fb      	ldr	r3, [r7, #12]
 801eff4:	681a      	ldr	r2, [r3, #0]
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	681b      	ldr	r3, [r3, #0]
 801effa:	429a      	cmp	r2, r3
 801effc:	d103      	bne.n	801f006 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801effe:	683b      	ldr	r3, [r7, #0]
 801f000:	681a      	ldr	r2, [r3, #0]
 801f002:	68fb      	ldr	r3, [r7, #12]
 801f004:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f006:	68fb      	ldr	r3, [r7, #12]
 801f008:	68db      	ldr	r3, [r3, #12]
 801f00a:	60fb      	str	r3, [r7, #12]
 801f00c:	68fb      	ldr	r3, [r7, #12]
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d1ef      	bne.n	801eff2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801f012:	bf00      	nop
 801f014:	3714      	adds	r7, #20
 801f016:	46bd      	mov	sp, r7
 801f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f01c:	4770      	bx	lr
 801f01e:	bf00      	nop
 801f020:	2400f98c 	.word	0x2400f98c

0801f024 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 801f024:	b580      	push	{r7, lr}
 801f026:	b082      	sub	sp, #8
 801f028:	af00      	add	r7, sp, #0
 801f02a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 801f02c:	4b04      	ldr	r3, [pc, #16]	; (801f040 <HAL_HSEM_FreeCallback+0x1c>)
 801f02e:	2201      	movs	r2, #1
 801f030:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 801f032:	2002      	movs	r0, #2
 801f034:	f7e4 fd44 	bl	8003ac0 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 801f038:	bf00      	nop
 801f03a:	3708      	adds	r7, #8
 801f03c:	46bd      	mov	sp, r7
 801f03e:	bd80      	pop	{r7, pc}
 801f040:	2400f990 	.word	0x2400f990

0801f044 <__assert_func>:
 801f044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f046:	4614      	mov	r4, r2
 801f048:	461a      	mov	r2, r3
 801f04a:	4b09      	ldr	r3, [pc, #36]	; (801f070 <__assert_func+0x2c>)
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	4605      	mov	r5, r0
 801f050:	68d8      	ldr	r0, [r3, #12]
 801f052:	b14c      	cbz	r4, 801f068 <__assert_func+0x24>
 801f054:	4b07      	ldr	r3, [pc, #28]	; (801f074 <__assert_func+0x30>)
 801f056:	9100      	str	r1, [sp, #0]
 801f058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f05c:	4906      	ldr	r1, [pc, #24]	; (801f078 <__assert_func+0x34>)
 801f05e:	462b      	mov	r3, r5
 801f060:	f000 f8e4 	bl	801f22c <fiprintf>
 801f064:	f000 ffee 	bl	8020044 <abort>
 801f068:	4b04      	ldr	r3, [pc, #16]	; (801f07c <__assert_func+0x38>)
 801f06a:	461c      	mov	r4, r3
 801f06c:	e7f3      	b.n	801f056 <__assert_func+0x12>
 801f06e:	bf00      	nop
 801f070:	24000034 	.word	0x24000034
 801f074:	08024544 	.word	0x08024544
 801f078:	08024551 	.word	0x08024551
 801f07c:	0802457f 	.word	0x0802457f

0801f080 <std>:
 801f080:	2300      	movs	r3, #0
 801f082:	b510      	push	{r4, lr}
 801f084:	4604      	mov	r4, r0
 801f086:	e9c0 3300 	strd	r3, r3, [r0]
 801f08a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f08e:	6083      	str	r3, [r0, #8]
 801f090:	8181      	strh	r1, [r0, #12]
 801f092:	6643      	str	r3, [r0, #100]	; 0x64
 801f094:	81c2      	strh	r2, [r0, #14]
 801f096:	6183      	str	r3, [r0, #24]
 801f098:	4619      	mov	r1, r3
 801f09a:	2208      	movs	r2, #8
 801f09c:	305c      	adds	r0, #92	; 0x5c
 801f09e:	f000 f95f 	bl	801f360 <memset>
 801f0a2:	4b05      	ldr	r3, [pc, #20]	; (801f0b8 <std+0x38>)
 801f0a4:	6263      	str	r3, [r4, #36]	; 0x24
 801f0a6:	4b05      	ldr	r3, [pc, #20]	; (801f0bc <std+0x3c>)
 801f0a8:	62a3      	str	r3, [r4, #40]	; 0x28
 801f0aa:	4b05      	ldr	r3, [pc, #20]	; (801f0c0 <std+0x40>)
 801f0ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f0ae:	4b05      	ldr	r3, [pc, #20]	; (801f0c4 <std+0x44>)
 801f0b0:	6224      	str	r4, [r4, #32]
 801f0b2:	6323      	str	r3, [r4, #48]	; 0x30
 801f0b4:	bd10      	pop	{r4, pc}
 801f0b6:	bf00      	nop
 801f0b8:	0801fdd9 	.word	0x0801fdd9
 801f0bc:	0801fdfb 	.word	0x0801fdfb
 801f0c0:	0801fe33 	.word	0x0801fe33
 801f0c4:	0801fe57 	.word	0x0801fe57

0801f0c8 <_cleanup_r>:
 801f0c8:	4901      	ldr	r1, [pc, #4]	; (801f0d0 <_cleanup_r+0x8>)
 801f0ca:	f000 b8c1 	b.w	801f250 <_fwalk_reent>
 801f0ce:	bf00      	nop
 801f0d0:	08020181 	.word	0x08020181

0801f0d4 <__sfmoreglue>:
 801f0d4:	b570      	push	{r4, r5, r6, lr}
 801f0d6:	2268      	movs	r2, #104	; 0x68
 801f0d8:	1e4d      	subs	r5, r1, #1
 801f0da:	4355      	muls	r5, r2
 801f0dc:	460e      	mov	r6, r1
 801f0de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f0e2:	f000 f9b1 	bl	801f448 <_malloc_r>
 801f0e6:	4604      	mov	r4, r0
 801f0e8:	b140      	cbz	r0, 801f0fc <__sfmoreglue+0x28>
 801f0ea:	2100      	movs	r1, #0
 801f0ec:	e9c0 1600 	strd	r1, r6, [r0]
 801f0f0:	300c      	adds	r0, #12
 801f0f2:	60a0      	str	r0, [r4, #8]
 801f0f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f0f8:	f000 f932 	bl	801f360 <memset>
 801f0fc:	4620      	mov	r0, r4
 801f0fe:	bd70      	pop	{r4, r5, r6, pc}

0801f100 <__sfp_lock_acquire>:
 801f100:	4801      	ldr	r0, [pc, #4]	; (801f108 <__sfp_lock_acquire+0x8>)
 801f102:	f000 b8ea 	b.w	801f2da <__retarget_lock_acquire_recursive>
 801f106:	bf00      	nop
 801f108:	2400f995 	.word	0x2400f995

0801f10c <__sfp_lock_release>:
 801f10c:	4801      	ldr	r0, [pc, #4]	; (801f114 <__sfp_lock_release+0x8>)
 801f10e:	f000 b8e5 	b.w	801f2dc <__retarget_lock_release_recursive>
 801f112:	bf00      	nop
 801f114:	2400f995 	.word	0x2400f995

0801f118 <__sinit_lock_acquire>:
 801f118:	4801      	ldr	r0, [pc, #4]	; (801f120 <__sinit_lock_acquire+0x8>)
 801f11a:	f000 b8de 	b.w	801f2da <__retarget_lock_acquire_recursive>
 801f11e:	bf00      	nop
 801f120:	2400f996 	.word	0x2400f996

0801f124 <__sinit_lock_release>:
 801f124:	4801      	ldr	r0, [pc, #4]	; (801f12c <__sinit_lock_release+0x8>)
 801f126:	f000 b8d9 	b.w	801f2dc <__retarget_lock_release_recursive>
 801f12a:	bf00      	nop
 801f12c:	2400f996 	.word	0x2400f996

0801f130 <__sinit>:
 801f130:	b510      	push	{r4, lr}
 801f132:	4604      	mov	r4, r0
 801f134:	f7ff fff0 	bl	801f118 <__sinit_lock_acquire>
 801f138:	69a3      	ldr	r3, [r4, #24]
 801f13a:	b11b      	cbz	r3, 801f144 <__sinit+0x14>
 801f13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f140:	f7ff bff0 	b.w	801f124 <__sinit_lock_release>
 801f144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f148:	6523      	str	r3, [r4, #80]	; 0x50
 801f14a:	4b13      	ldr	r3, [pc, #76]	; (801f198 <__sinit+0x68>)
 801f14c:	4a13      	ldr	r2, [pc, #76]	; (801f19c <__sinit+0x6c>)
 801f14e:	681b      	ldr	r3, [r3, #0]
 801f150:	62a2      	str	r2, [r4, #40]	; 0x28
 801f152:	42a3      	cmp	r3, r4
 801f154:	bf04      	itt	eq
 801f156:	2301      	moveq	r3, #1
 801f158:	61a3      	streq	r3, [r4, #24]
 801f15a:	4620      	mov	r0, r4
 801f15c:	f000 f820 	bl	801f1a0 <__sfp>
 801f160:	6060      	str	r0, [r4, #4]
 801f162:	4620      	mov	r0, r4
 801f164:	f000 f81c 	bl	801f1a0 <__sfp>
 801f168:	60a0      	str	r0, [r4, #8]
 801f16a:	4620      	mov	r0, r4
 801f16c:	f000 f818 	bl	801f1a0 <__sfp>
 801f170:	2200      	movs	r2, #0
 801f172:	60e0      	str	r0, [r4, #12]
 801f174:	2104      	movs	r1, #4
 801f176:	6860      	ldr	r0, [r4, #4]
 801f178:	f7ff ff82 	bl	801f080 <std>
 801f17c:	68a0      	ldr	r0, [r4, #8]
 801f17e:	2201      	movs	r2, #1
 801f180:	2109      	movs	r1, #9
 801f182:	f7ff ff7d 	bl	801f080 <std>
 801f186:	68e0      	ldr	r0, [r4, #12]
 801f188:	2202      	movs	r2, #2
 801f18a:	2112      	movs	r1, #18
 801f18c:	f7ff ff78 	bl	801f080 <std>
 801f190:	2301      	movs	r3, #1
 801f192:	61a3      	str	r3, [r4, #24]
 801f194:	e7d2      	b.n	801f13c <__sinit+0xc>
 801f196:	bf00      	nop
 801f198:	080245e0 	.word	0x080245e0
 801f19c:	0801f0c9 	.word	0x0801f0c9

0801f1a0 <__sfp>:
 801f1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1a2:	4607      	mov	r7, r0
 801f1a4:	f7ff ffac 	bl	801f100 <__sfp_lock_acquire>
 801f1a8:	4b1e      	ldr	r3, [pc, #120]	; (801f224 <__sfp+0x84>)
 801f1aa:	681e      	ldr	r6, [r3, #0]
 801f1ac:	69b3      	ldr	r3, [r6, #24]
 801f1ae:	b913      	cbnz	r3, 801f1b6 <__sfp+0x16>
 801f1b0:	4630      	mov	r0, r6
 801f1b2:	f7ff ffbd 	bl	801f130 <__sinit>
 801f1b6:	3648      	adds	r6, #72	; 0x48
 801f1b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f1bc:	3b01      	subs	r3, #1
 801f1be:	d503      	bpl.n	801f1c8 <__sfp+0x28>
 801f1c0:	6833      	ldr	r3, [r6, #0]
 801f1c2:	b30b      	cbz	r3, 801f208 <__sfp+0x68>
 801f1c4:	6836      	ldr	r6, [r6, #0]
 801f1c6:	e7f7      	b.n	801f1b8 <__sfp+0x18>
 801f1c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f1cc:	b9d5      	cbnz	r5, 801f204 <__sfp+0x64>
 801f1ce:	4b16      	ldr	r3, [pc, #88]	; (801f228 <__sfp+0x88>)
 801f1d0:	60e3      	str	r3, [r4, #12]
 801f1d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f1d6:	6665      	str	r5, [r4, #100]	; 0x64
 801f1d8:	f000 f87e 	bl	801f2d8 <__retarget_lock_init_recursive>
 801f1dc:	f7ff ff96 	bl	801f10c <__sfp_lock_release>
 801f1e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f1e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f1e8:	6025      	str	r5, [r4, #0]
 801f1ea:	61a5      	str	r5, [r4, #24]
 801f1ec:	2208      	movs	r2, #8
 801f1ee:	4629      	mov	r1, r5
 801f1f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f1f4:	f000 f8b4 	bl	801f360 <memset>
 801f1f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f1fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f200:	4620      	mov	r0, r4
 801f202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f204:	3468      	adds	r4, #104	; 0x68
 801f206:	e7d9      	b.n	801f1bc <__sfp+0x1c>
 801f208:	2104      	movs	r1, #4
 801f20a:	4638      	mov	r0, r7
 801f20c:	f7ff ff62 	bl	801f0d4 <__sfmoreglue>
 801f210:	4604      	mov	r4, r0
 801f212:	6030      	str	r0, [r6, #0]
 801f214:	2800      	cmp	r0, #0
 801f216:	d1d5      	bne.n	801f1c4 <__sfp+0x24>
 801f218:	f7ff ff78 	bl	801f10c <__sfp_lock_release>
 801f21c:	230c      	movs	r3, #12
 801f21e:	603b      	str	r3, [r7, #0]
 801f220:	e7ee      	b.n	801f200 <__sfp+0x60>
 801f222:	bf00      	nop
 801f224:	080245e0 	.word	0x080245e0
 801f228:	ffff0001 	.word	0xffff0001

0801f22c <fiprintf>:
 801f22c:	b40e      	push	{r1, r2, r3}
 801f22e:	b503      	push	{r0, r1, lr}
 801f230:	4601      	mov	r1, r0
 801f232:	ab03      	add	r3, sp, #12
 801f234:	4805      	ldr	r0, [pc, #20]	; (801f24c <fiprintf+0x20>)
 801f236:	f853 2b04 	ldr.w	r2, [r3], #4
 801f23a:	6800      	ldr	r0, [r0, #0]
 801f23c:	9301      	str	r3, [sp, #4]
 801f23e:	f000 f9a1 	bl	801f584 <_vfiprintf_r>
 801f242:	b002      	add	sp, #8
 801f244:	f85d eb04 	ldr.w	lr, [sp], #4
 801f248:	b003      	add	sp, #12
 801f24a:	4770      	bx	lr
 801f24c:	24000034 	.word	0x24000034

0801f250 <_fwalk_reent>:
 801f250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f254:	4606      	mov	r6, r0
 801f256:	4688      	mov	r8, r1
 801f258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f25c:	2700      	movs	r7, #0
 801f25e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f262:	f1b9 0901 	subs.w	r9, r9, #1
 801f266:	d505      	bpl.n	801f274 <_fwalk_reent+0x24>
 801f268:	6824      	ldr	r4, [r4, #0]
 801f26a:	2c00      	cmp	r4, #0
 801f26c:	d1f7      	bne.n	801f25e <_fwalk_reent+0xe>
 801f26e:	4638      	mov	r0, r7
 801f270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f274:	89ab      	ldrh	r3, [r5, #12]
 801f276:	2b01      	cmp	r3, #1
 801f278:	d907      	bls.n	801f28a <_fwalk_reent+0x3a>
 801f27a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f27e:	3301      	adds	r3, #1
 801f280:	d003      	beq.n	801f28a <_fwalk_reent+0x3a>
 801f282:	4629      	mov	r1, r5
 801f284:	4630      	mov	r0, r6
 801f286:	47c0      	blx	r8
 801f288:	4307      	orrs	r7, r0
 801f28a:	3568      	adds	r5, #104	; 0x68
 801f28c:	e7e9      	b.n	801f262 <_fwalk_reent+0x12>
	...

0801f290 <__libc_init_array>:
 801f290:	b570      	push	{r4, r5, r6, lr}
 801f292:	4d0d      	ldr	r5, [pc, #52]	; (801f2c8 <__libc_init_array+0x38>)
 801f294:	4c0d      	ldr	r4, [pc, #52]	; (801f2cc <__libc_init_array+0x3c>)
 801f296:	1b64      	subs	r4, r4, r5
 801f298:	10a4      	asrs	r4, r4, #2
 801f29a:	2600      	movs	r6, #0
 801f29c:	42a6      	cmp	r6, r4
 801f29e:	d109      	bne.n	801f2b4 <__libc_init_array+0x24>
 801f2a0:	4d0b      	ldr	r5, [pc, #44]	; (801f2d0 <__libc_init_array+0x40>)
 801f2a2:	4c0c      	ldr	r4, [pc, #48]	; (801f2d4 <__libc_init_array+0x44>)
 801f2a4:	f001 fa36 	bl	8020714 <_init>
 801f2a8:	1b64      	subs	r4, r4, r5
 801f2aa:	10a4      	asrs	r4, r4, #2
 801f2ac:	2600      	movs	r6, #0
 801f2ae:	42a6      	cmp	r6, r4
 801f2b0:	d105      	bne.n	801f2be <__libc_init_array+0x2e>
 801f2b2:	bd70      	pop	{r4, r5, r6, pc}
 801f2b4:	f855 3b04 	ldr.w	r3, [r5], #4
 801f2b8:	4798      	blx	r3
 801f2ba:	3601      	adds	r6, #1
 801f2bc:	e7ee      	b.n	801f29c <__libc_init_array+0xc>
 801f2be:	f855 3b04 	ldr.w	r3, [r5], #4
 801f2c2:	4798      	blx	r3
 801f2c4:	3601      	adds	r6, #1
 801f2c6:	e7f2      	b.n	801f2ae <__libc_init_array+0x1e>
 801f2c8:	0802468c 	.word	0x0802468c
 801f2cc:	0802468c 	.word	0x0802468c
 801f2d0:	0802468c 	.word	0x0802468c
 801f2d4:	08024690 	.word	0x08024690

0801f2d8 <__retarget_lock_init_recursive>:
 801f2d8:	4770      	bx	lr

0801f2da <__retarget_lock_acquire_recursive>:
 801f2da:	4770      	bx	lr

0801f2dc <__retarget_lock_release_recursive>:
 801f2dc:	4770      	bx	lr
	...

0801f2e0 <malloc>:
 801f2e0:	4b02      	ldr	r3, [pc, #8]	; (801f2ec <malloc+0xc>)
 801f2e2:	4601      	mov	r1, r0
 801f2e4:	6818      	ldr	r0, [r3, #0]
 801f2e6:	f000 b8af 	b.w	801f448 <_malloc_r>
 801f2ea:	bf00      	nop
 801f2ec:	24000034 	.word	0x24000034

0801f2f0 <memcmp>:
 801f2f0:	b510      	push	{r4, lr}
 801f2f2:	3901      	subs	r1, #1
 801f2f4:	4402      	add	r2, r0
 801f2f6:	4290      	cmp	r0, r2
 801f2f8:	d101      	bne.n	801f2fe <memcmp+0xe>
 801f2fa:	2000      	movs	r0, #0
 801f2fc:	e005      	b.n	801f30a <memcmp+0x1a>
 801f2fe:	7803      	ldrb	r3, [r0, #0]
 801f300:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f304:	42a3      	cmp	r3, r4
 801f306:	d001      	beq.n	801f30c <memcmp+0x1c>
 801f308:	1b18      	subs	r0, r3, r4
 801f30a:	bd10      	pop	{r4, pc}
 801f30c:	3001      	adds	r0, #1
 801f30e:	e7f2      	b.n	801f2f6 <memcmp+0x6>

0801f310 <memcpy>:
 801f310:	440a      	add	r2, r1
 801f312:	4291      	cmp	r1, r2
 801f314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801f318:	d100      	bne.n	801f31c <memcpy+0xc>
 801f31a:	4770      	bx	lr
 801f31c:	b510      	push	{r4, lr}
 801f31e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f322:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f326:	4291      	cmp	r1, r2
 801f328:	d1f9      	bne.n	801f31e <memcpy+0xe>
 801f32a:	bd10      	pop	{r4, pc}

0801f32c <memmove>:
 801f32c:	4288      	cmp	r0, r1
 801f32e:	b510      	push	{r4, lr}
 801f330:	eb01 0402 	add.w	r4, r1, r2
 801f334:	d902      	bls.n	801f33c <memmove+0x10>
 801f336:	4284      	cmp	r4, r0
 801f338:	4623      	mov	r3, r4
 801f33a:	d807      	bhi.n	801f34c <memmove+0x20>
 801f33c:	1e43      	subs	r3, r0, #1
 801f33e:	42a1      	cmp	r1, r4
 801f340:	d008      	beq.n	801f354 <memmove+0x28>
 801f342:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f346:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f34a:	e7f8      	b.n	801f33e <memmove+0x12>
 801f34c:	4402      	add	r2, r0
 801f34e:	4601      	mov	r1, r0
 801f350:	428a      	cmp	r2, r1
 801f352:	d100      	bne.n	801f356 <memmove+0x2a>
 801f354:	bd10      	pop	{r4, pc}
 801f356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f35a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f35e:	e7f7      	b.n	801f350 <memmove+0x24>

0801f360 <memset>:
 801f360:	4402      	add	r2, r0
 801f362:	4603      	mov	r3, r0
 801f364:	4293      	cmp	r3, r2
 801f366:	d100      	bne.n	801f36a <memset+0xa>
 801f368:	4770      	bx	lr
 801f36a:	f803 1b01 	strb.w	r1, [r3], #1
 801f36e:	e7f9      	b.n	801f364 <memset+0x4>

0801f370 <_free_r>:
 801f370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f372:	2900      	cmp	r1, #0
 801f374:	d044      	beq.n	801f400 <_free_r+0x90>
 801f376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f37a:	9001      	str	r0, [sp, #4]
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	f1a1 0404 	sub.w	r4, r1, #4
 801f382:	bfb8      	it	lt
 801f384:	18e4      	addlt	r4, r4, r3
 801f386:	f000 ffaf 	bl	80202e8 <__malloc_lock>
 801f38a:	4a1e      	ldr	r2, [pc, #120]	; (801f404 <_free_r+0x94>)
 801f38c:	9801      	ldr	r0, [sp, #4]
 801f38e:	6813      	ldr	r3, [r2, #0]
 801f390:	b933      	cbnz	r3, 801f3a0 <_free_r+0x30>
 801f392:	6063      	str	r3, [r4, #4]
 801f394:	6014      	str	r4, [r2, #0]
 801f396:	b003      	add	sp, #12
 801f398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f39c:	f000 bfaa 	b.w	80202f4 <__malloc_unlock>
 801f3a0:	42a3      	cmp	r3, r4
 801f3a2:	d908      	bls.n	801f3b6 <_free_r+0x46>
 801f3a4:	6825      	ldr	r5, [r4, #0]
 801f3a6:	1961      	adds	r1, r4, r5
 801f3a8:	428b      	cmp	r3, r1
 801f3aa:	bf01      	itttt	eq
 801f3ac:	6819      	ldreq	r1, [r3, #0]
 801f3ae:	685b      	ldreq	r3, [r3, #4]
 801f3b0:	1949      	addeq	r1, r1, r5
 801f3b2:	6021      	streq	r1, [r4, #0]
 801f3b4:	e7ed      	b.n	801f392 <_free_r+0x22>
 801f3b6:	461a      	mov	r2, r3
 801f3b8:	685b      	ldr	r3, [r3, #4]
 801f3ba:	b10b      	cbz	r3, 801f3c0 <_free_r+0x50>
 801f3bc:	42a3      	cmp	r3, r4
 801f3be:	d9fa      	bls.n	801f3b6 <_free_r+0x46>
 801f3c0:	6811      	ldr	r1, [r2, #0]
 801f3c2:	1855      	adds	r5, r2, r1
 801f3c4:	42a5      	cmp	r5, r4
 801f3c6:	d10b      	bne.n	801f3e0 <_free_r+0x70>
 801f3c8:	6824      	ldr	r4, [r4, #0]
 801f3ca:	4421      	add	r1, r4
 801f3cc:	1854      	adds	r4, r2, r1
 801f3ce:	42a3      	cmp	r3, r4
 801f3d0:	6011      	str	r1, [r2, #0]
 801f3d2:	d1e0      	bne.n	801f396 <_free_r+0x26>
 801f3d4:	681c      	ldr	r4, [r3, #0]
 801f3d6:	685b      	ldr	r3, [r3, #4]
 801f3d8:	6053      	str	r3, [r2, #4]
 801f3da:	4421      	add	r1, r4
 801f3dc:	6011      	str	r1, [r2, #0]
 801f3de:	e7da      	b.n	801f396 <_free_r+0x26>
 801f3e0:	d902      	bls.n	801f3e8 <_free_r+0x78>
 801f3e2:	230c      	movs	r3, #12
 801f3e4:	6003      	str	r3, [r0, #0]
 801f3e6:	e7d6      	b.n	801f396 <_free_r+0x26>
 801f3e8:	6825      	ldr	r5, [r4, #0]
 801f3ea:	1961      	adds	r1, r4, r5
 801f3ec:	428b      	cmp	r3, r1
 801f3ee:	bf04      	itt	eq
 801f3f0:	6819      	ldreq	r1, [r3, #0]
 801f3f2:	685b      	ldreq	r3, [r3, #4]
 801f3f4:	6063      	str	r3, [r4, #4]
 801f3f6:	bf04      	itt	eq
 801f3f8:	1949      	addeq	r1, r1, r5
 801f3fa:	6021      	streq	r1, [r4, #0]
 801f3fc:	6054      	str	r4, [r2, #4]
 801f3fe:	e7ca      	b.n	801f396 <_free_r+0x26>
 801f400:	b003      	add	sp, #12
 801f402:	bd30      	pop	{r4, r5, pc}
 801f404:	2400f998 	.word	0x2400f998

0801f408 <sbrk_aligned>:
 801f408:	b570      	push	{r4, r5, r6, lr}
 801f40a:	4e0e      	ldr	r6, [pc, #56]	; (801f444 <sbrk_aligned+0x3c>)
 801f40c:	460c      	mov	r4, r1
 801f40e:	6831      	ldr	r1, [r6, #0]
 801f410:	4605      	mov	r5, r0
 801f412:	b911      	cbnz	r1, 801f41a <sbrk_aligned+0x12>
 801f414:	f000 fcb0 	bl	801fd78 <_sbrk_r>
 801f418:	6030      	str	r0, [r6, #0]
 801f41a:	4621      	mov	r1, r4
 801f41c:	4628      	mov	r0, r5
 801f41e:	f000 fcab 	bl	801fd78 <_sbrk_r>
 801f422:	1c43      	adds	r3, r0, #1
 801f424:	d00a      	beq.n	801f43c <sbrk_aligned+0x34>
 801f426:	1cc4      	adds	r4, r0, #3
 801f428:	f024 0403 	bic.w	r4, r4, #3
 801f42c:	42a0      	cmp	r0, r4
 801f42e:	d007      	beq.n	801f440 <sbrk_aligned+0x38>
 801f430:	1a21      	subs	r1, r4, r0
 801f432:	4628      	mov	r0, r5
 801f434:	f000 fca0 	bl	801fd78 <_sbrk_r>
 801f438:	3001      	adds	r0, #1
 801f43a:	d101      	bne.n	801f440 <sbrk_aligned+0x38>
 801f43c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f440:	4620      	mov	r0, r4
 801f442:	bd70      	pop	{r4, r5, r6, pc}
 801f444:	2400f99c 	.word	0x2400f99c

0801f448 <_malloc_r>:
 801f448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f44c:	1ccd      	adds	r5, r1, #3
 801f44e:	f025 0503 	bic.w	r5, r5, #3
 801f452:	3508      	adds	r5, #8
 801f454:	2d0c      	cmp	r5, #12
 801f456:	bf38      	it	cc
 801f458:	250c      	movcc	r5, #12
 801f45a:	2d00      	cmp	r5, #0
 801f45c:	4607      	mov	r7, r0
 801f45e:	db01      	blt.n	801f464 <_malloc_r+0x1c>
 801f460:	42a9      	cmp	r1, r5
 801f462:	d905      	bls.n	801f470 <_malloc_r+0x28>
 801f464:	230c      	movs	r3, #12
 801f466:	603b      	str	r3, [r7, #0]
 801f468:	2600      	movs	r6, #0
 801f46a:	4630      	mov	r0, r6
 801f46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f470:	4e2e      	ldr	r6, [pc, #184]	; (801f52c <_malloc_r+0xe4>)
 801f472:	f000 ff39 	bl	80202e8 <__malloc_lock>
 801f476:	6833      	ldr	r3, [r6, #0]
 801f478:	461c      	mov	r4, r3
 801f47a:	bb34      	cbnz	r4, 801f4ca <_malloc_r+0x82>
 801f47c:	4629      	mov	r1, r5
 801f47e:	4638      	mov	r0, r7
 801f480:	f7ff ffc2 	bl	801f408 <sbrk_aligned>
 801f484:	1c43      	adds	r3, r0, #1
 801f486:	4604      	mov	r4, r0
 801f488:	d14d      	bne.n	801f526 <_malloc_r+0xde>
 801f48a:	6834      	ldr	r4, [r6, #0]
 801f48c:	4626      	mov	r6, r4
 801f48e:	2e00      	cmp	r6, #0
 801f490:	d140      	bne.n	801f514 <_malloc_r+0xcc>
 801f492:	6823      	ldr	r3, [r4, #0]
 801f494:	4631      	mov	r1, r6
 801f496:	4638      	mov	r0, r7
 801f498:	eb04 0803 	add.w	r8, r4, r3
 801f49c:	f000 fc6c 	bl	801fd78 <_sbrk_r>
 801f4a0:	4580      	cmp	r8, r0
 801f4a2:	d13a      	bne.n	801f51a <_malloc_r+0xd2>
 801f4a4:	6821      	ldr	r1, [r4, #0]
 801f4a6:	3503      	adds	r5, #3
 801f4a8:	1a6d      	subs	r5, r5, r1
 801f4aa:	f025 0503 	bic.w	r5, r5, #3
 801f4ae:	3508      	adds	r5, #8
 801f4b0:	2d0c      	cmp	r5, #12
 801f4b2:	bf38      	it	cc
 801f4b4:	250c      	movcc	r5, #12
 801f4b6:	4629      	mov	r1, r5
 801f4b8:	4638      	mov	r0, r7
 801f4ba:	f7ff ffa5 	bl	801f408 <sbrk_aligned>
 801f4be:	3001      	adds	r0, #1
 801f4c0:	d02b      	beq.n	801f51a <_malloc_r+0xd2>
 801f4c2:	6823      	ldr	r3, [r4, #0]
 801f4c4:	442b      	add	r3, r5
 801f4c6:	6023      	str	r3, [r4, #0]
 801f4c8:	e00e      	b.n	801f4e8 <_malloc_r+0xa0>
 801f4ca:	6822      	ldr	r2, [r4, #0]
 801f4cc:	1b52      	subs	r2, r2, r5
 801f4ce:	d41e      	bmi.n	801f50e <_malloc_r+0xc6>
 801f4d0:	2a0b      	cmp	r2, #11
 801f4d2:	d916      	bls.n	801f502 <_malloc_r+0xba>
 801f4d4:	1961      	adds	r1, r4, r5
 801f4d6:	42a3      	cmp	r3, r4
 801f4d8:	6025      	str	r5, [r4, #0]
 801f4da:	bf18      	it	ne
 801f4dc:	6059      	strne	r1, [r3, #4]
 801f4de:	6863      	ldr	r3, [r4, #4]
 801f4e0:	bf08      	it	eq
 801f4e2:	6031      	streq	r1, [r6, #0]
 801f4e4:	5162      	str	r2, [r4, r5]
 801f4e6:	604b      	str	r3, [r1, #4]
 801f4e8:	4638      	mov	r0, r7
 801f4ea:	f104 060b 	add.w	r6, r4, #11
 801f4ee:	f000 ff01 	bl	80202f4 <__malloc_unlock>
 801f4f2:	f026 0607 	bic.w	r6, r6, #7
 801f4f6:	1d23      	adds	r3, r4, #4
 801f4f8:	1af2      	subs	r2, r6, r3
 801f4fa:	d0b6      	beq.n	801f46a <_malloc_r+0x22>
 801f4fc:	1b9b      	subs	r3, r3, r6
 801f4fe:	50a3      	str	r3, [r4, r2]
 801f500:	e7b3      	b.n	801f46a <_malloc_r+0x22>
 801f502:	6862      	ldr	r2, [r4, #4]
 801f504:	42a3      	cmp	r3, r4
 801f506:	bf0c      	ite	eq
 801f508:	6032      	streq	r2, [r6, #0]
 801f50a:	605a      	strne	r2, [r3, #4]
 801f50c:	e7ec      	b.n	801f4e8 <_malloc_r+0xa0>
 801f50e:	4623      	mov	r3, r4
 801f510:	6864      	ldr	r4, [r4, #4]
 801f512:	e7b2      	b.n	801f47a <_malloc_r+0x32>
 801f514:	4634      	mov	r4, r6
 801f516:	6876      	ldr	r6, [r6, #4]
 801f518:	e7b9      	b.n	801f48e <_malloc_r+0x46>
 801f51a:	230c      	movs	r3, #12
 801f51c:	603b      	str	r3, [r7, #0]
 801f51e:	4638      	mov	r0, r7
 801f520:	f000 fee8 	bl	80202f4 <__malloc_unlock>
 801f524:	e7a1      	b.n	801f46a <_malloc_r+0x22>
 801f526:	6025      	str	r5, [r4, #0]
 801f528:	e7de      	b.n	801f4e8 <_malloc_r+0xa0>
 801f52a:	bf00      	nop
 801f52c:	2400f998 	.word	0x2400f998

0801f530 <__sfputc_r>:
 801f530:	6893      	ldr	r3, [r2, #8]
 801f532:	3b01      	subs	r3, #1
 801f534:	2b00      	cmp	r3, #0
 801f536:	b410      	push	{r4}
 801f538:	6093      	str	r3, [r2, #8]
 801f53a:	da08      	bge.n	801f54e <__sfputc_r+0x1e>
 801f53c:	6994      	ldr	r4, [r2, #24]
 801f53e:	42a3      	cmp	r3, r4
 801f540:	db01      	blt.n	801f546 <__sfputc_r+0x16>
 801f542:	290a      	cmp	r1, #10
 801f544:	d103      	bne.n	801f54e <__sfputc_r+0x1e>
 801f546:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f54a:	f000 bca9 	b.w	801fea0 <__swbuf_r>
 801f54e:	6813      	ldr	r3, [r2, #0]
 801f550:	1c58      	adds	r0, r3, #1
 801f552:	6010      	str	r0, [r2, #0]
 801f554:	7019      	strb	r1, [r3, #0]
 801f556:	4608      	mov	r0, r1
 801f558:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f55c:	4770      	bx	lr

0801f55e <__sfputs_r>:
 801f55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f560:	4606      	mov	r6, r0
 801f562:	460f      	mov	r7, r1
 801f564:	4614      	mov	r4, r2
 801f566:	18d5      	adds	r5, r2, r3
 801f568:	42ac      	cmp	r4, r5
 801f56a:	d101      	bne.n	801f570 <__sfputs_r+0x12>
 801f56c:	2000      	movs	r0, #0
 801f56e:	e007      	b.n	801f580 <__sfputs_r+0x22>
 801f570:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f574:	463a      	mov	r2, r7
 801f576:	4630      	mov	r0, r6
 801f578:	f7ff ffda 	bl	801f530 <__sfputc_r>
 801f57c:	1c43      	adds	r3, r0, #1
 801f57e:	d1f3      	bne.n	801f568 <__sfputs_r+0xa>
 801f580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f584 <_vfiprintf_r>:
 801f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f588:	460d      	mov	r5, r1
 801f58a:	b09d      	sub	sp, #116	; 0x74
 801f58c:	4614      	mov	r4, r2
 801f58e:	4698      	mov	r8, r3
 801f590:	4606      	mov	r6, r0
 801f592:	b118      	cbz	r0, 801f59c <_vfiprintf_r+0x18>
 801f594:	6983      	ldr	r3, [r0, #24]
 801f596:	b90b      	cbnz	r3, 801f59c <_vfiprintf_r+0x18>
 801f598:	f7ff fdca 	bl	801f130 <__sinit>
 801f59c:	4b89      	ldr	r3, [pc, #548]	; (801f7c4 <_vfiprintf_r+0x240>)
 801f59e:	429d      	cmp	r5, r3
 801f5a0:	d11b      	bne.n	801f5da <_vfiprintf_r+0x56>
 801f5a2:	6875      	ldr	r5, [r6, #4]
 801f5a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f5a6:	07d9      	lsls	r1, r3, #31
 801f5a8:	d405      	bmi.n	801f5b6 <_vfiprintf_r+0x32>
 801f5aa:	89ab      	ldrh	r3, [r5, #12]
 801f5ac:	059a      	lsls	r2, r3, #22
 801f5ae:	d402      	bmi.n	801f5b6 <_vfiprintf_r+0x32>
 801f5b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f5b2:	f7ff fe92 	bl	801f2da <__retarget_lock_acquire_recursive>
 801f5b6:	89ab      	ldrh	r3, [r5, #12]
 801f5b8:	071b      	lsls	r3, r3, #28
 801f5ba:	d501      	bpl.n	801f5c0 <_vfiprintf_r+0x3c>
 801f5bc:	692b      	ldr	r3, [r5, #16]
 801f5be:	b9eb      	cbnz	r3, 801f5fc <_vfiprintf_r+0x78>
 801f5c0:	4629      	mov	r1, r5
 801f5c2:	4630      	mov	r0, r6
 801f5c4:	f000 fcd0 	bl	801ff68 <__swsetup_r>
 801f5c8:	b1c0      	cbz	r0, 801f5fc <_vfiprintf_r+0x78>
 801f5ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f5cc:	07dc      	lsls	r4, r3, #31
 801f5ce:	d50e      	bpl.n	801f5ee <_vfiprintf_r+0x6a>
 801f5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f5d4:	b01d      	add	sp, #116	; 0x74
 801f5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5da:	4b7b      	ldr	r3, [pc, #492]	; (801f7c8 <_vfiprintf_r+0x244>)
 801f5dc:	429d      	cmp	r5, r3
 801f5de:	d101      	bne.n	801f5e4 <_vfiprintf_r+0x60>
 801f5e0:	68b5      	ldr	r5, [r6, #8]
 801f5e2:	e7df      	b.n	801f5a4 <_vfiprintf_r+0x20>
 801f5e4:	4b79      	ldr	r3, [pc, #484]	; (801f7cc <_vfiprintf_r+0x248>)
 801f5e6:	429d      	cmp	r5, r3
 801f5e8:	bf08      	it	eq
 801f5ea:	68f5      	ldreq	r5, [r6, #12]
 801f5ec:	e7da      	b.n	801f5a4 <_vfiprintf_r+0x20>
 801f5ee:	89ab      	ldrh	r3, [r5, #12]
 801f5f0:	0598      	lsls	r0, r3, #22
 801f5f2:	d4ed      	bmi.n	801f5d0 <_vfiprintf_r+0x4c>
 801f5f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f5f6:	f7ff fe71 	bl	801f2dc <__retarget_lock_release_recursive>
 801f5fa:	e7e9      	b.n	801f5d0 <_vfiprintf_r+0x4c>
 801f5fc:	2300      	movs	r3, #0
 801f5fe:	9309      	str	r3, [sp, #36]	; 0x24
 801f600:	2320      	movs	r3, #32
 801f602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f606:	f8cd 800c 	str.w	r8, [sp, #12]
 801f60a:	2330      	movs	r3, #48	; 0x30
 801f60c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f7d0 <_vfiprintf_r+0x24c>
 801f610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f614:	f04f 0901 	mov.w	r9, #1
 801f618:	4623      	mov	r3, r4
 801f61a:	469a      	mov	sl, r3
 801f61c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f620:	b10a      	cbz	r2, 801f626 <_vfiprintf_r+0xa2>
 801f622:	2a25      	cmp	r2, #37	; 0x25
 801f624:	d1f9      	bne.n	801f61a <_vfiprintf_r+0x96>
 801f626:	ebba 0b04 	subs.w	fp, sl, r4
 801f62a:	d00b      	beq.n	801f644 <_vfiprintf_r+0xc0>
 801f62c:	465b      	mov	r3, fp
 801f62e:	4622      	mov	r2, r4
 801f630:	4629      	mov	r1, r5
 801f632:	4630      	mov	r0, r6
 801f634:	f7ff ff93 	bl	801f55e <__sfputs_r>
 801f638:	3001      	adds	r0, #1
 801f63a:	f000 80aa 	beq.w	801f792 <_vfiprintf_r+0x20e>
 801f63e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f640:	445a      	add	r2, fp
 801f642:	9209      	str	r2, [sp, #36]	; 0x24
 801f644:	f89a 3000 	ldrb.w	r3, [sl]
 801f648:	2b00      	cmp	r3, #0
 801f64a:	f000 80a2 	beq.w	801f792 <_vfiprintf_r+0x20e>
 801f64e:	2300      	movs	r3, #0
 801f650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f658:	f10a 0a01 	add.w	sl, sl, #1
 801f65c:	9304      	str	r3, [sp, #16]
 801f65e:	9307      	str	r3, [sp, #28]
 801f660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f664:	931a      	str	r3, [sp, #104]	; 0x68
 801f666:	4654      	mov	r4, sl
 801f668:	2205      	movs	r2, #5
 801f66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f66e:	4858      	ldr	r0, [pc, #352]	; (801f7d0 <_vfiprintf_r+0x24c>)
 801f670:	f7e0 fe3e 	bl	80002f0 <memchr>
 801f674:	9a04      	ldr	r2, [sp, #16]
 801f676:	b9d8      	cbnz	r0, 801f6b0 <_vfiprintf_r+0x12c>
 801f678:	06d1      	lsls	r1, r2, #27
 801f67a:	bf44      	itt	mi
 801f67c:	2320      	movmi	r3, #32
 801f67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f682:	0713      	lsls	r3, r2, #28
 801f684:	bf44      	itt	mi
 801f686:	232b      	movmi	r3, #43	; 0x2b
 801f688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f68c:	f89a 3000 	ldrb.w	r3, [sl]
 801f690:	2b2a      	cmp	r3, #42	; 0x2a
 801f692:	d015      	beq.n	801f6c0 <_vfiprintf_r+0x13c>
 801f694:	9a07      	ldr	r2, [sp, #28]
 801f696:	4654      	mov	r4, sl
 801f698:	2000      	movs	r0, #0
 801f69a:	f04f 0c0a 	mov.w	ip, #10
 801f69e:	4621      	mov	r1, r4
 801f6a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f6a4:	3b30      	subs	r3, #48	; 0x30
 801f6a6:	2b09      	cmp	r3, #9
 801f6a8:	d94e      	bls.n	801f748 <_vfiprintf_r+0x1c4>
 801f6aa:	b1b0      	cbz	r0, 801f6da <_vfiprintf_r+0x156>
 801f6ac:	9207      	str	r2, [sp, #28]
 801f6ae:	e014      	b.n	801f6da <_vfiprintf_r+0x156>
 801f6b0:	eba0 0308 	sub.w	r3, r0, r8
 801f6b4:	fa09 f303 	lsl.w	r3, r9, r3
 801f6b8:	4313      	orrs	r3, r2
 801f6ba:	9304      	str	r3, [sp, #16]
 801f6bc:	46a2      	mov	sl, r4
 801f6be:	e7d2      	b.n	801f666 <_vfiprintf_r+0xe2>
 801f6c0:	9b03      	ldr	r3, [sp, #12]
 801f6c2:	1d19      	adds	r1, r3, #4
 801f6c4:	681b      	ldr	r3, [r3, #0]
 801f6c6:	9103      	str	r1, [sp, #12]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	bfbb      	ittet	lt
 801f6cc:	425b      	neglt	r3, r3
 801f6ce:	f042 0202 	orrlt.w	r2, r2, #2
 801f6d2:	9307      	strge	r3, [sp, #28]
 801f6d4:	9307      	strlt	r3, [sp, #28]
 801f6d6:	bfb8      	it	lt
 801f6d8:	9204      	strlt	r2, [sp, #16]
 801f6da:	7823      	ldrb	r3, [r4, #0]
 801f6dc:	2b2e      	cmp	r3, #46	; 0x2e
 801f6de:	d10c      	bne.n	801f6fa <_vfiprintf_r+0x176>
 801f6e0:	7863      	ldrb	r3, [r4, #1]
 801f6e2:	2b2a      	cmp	r3, #42	; 0x2a
 801f6e4:	d135      	bne.n	801f752 <_vfiprintf_r+0x1ce>
 801f6e6:	9b03      	ldr	r3, [sp, #12]
 801f6e8:	1d1a      	adds	r2, r3, #4
 801f6ea:	681b      	ldr	r3, [r3, #0]
 801f6ec:	9203      	str	r2, [sp, #12]
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	bfb8      	it	lt
 801f6f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f6f6:	3402      	adds	r4, #2
 801f6f8:	9305      	str	r3, [sp, #20]
 801f6fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f7e0 <_vfiprintf_r+0x25c>
 801f6fe:	7821      	ldrb	r1, [r4, #0]
 801f700:	2203      	movs	r2, #3
 801f702:	4650      	mov	r0, sl
 801f704:	f7e0 fdf4 	bl	80002f0 <memchr>
 801f708:	b140      	cbz	r0, 801f71c <_vfiprintf_r+0x198>
 801f70a:	2340      	movs	r3, #64	; 0x40
 801f70c:	eba0 000a 	sub.w	r0, r0, sl
 801f710:	fa03 f000 	lsl.w	r0, r3, r0
 801f714:	9b04      	ldr	r3, [sp, #16]
 801f716:	4303      	orrs	r3, r0
 801f718:	3401      	adds	r4, #1
 801f71a:	9304      	str	r3, [sp, #16]
 801f71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f720:	482c      	ldr	r0, [pc, #176]	; (801f7d4 <_vfiprintf_r+0x250>)
 801f722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f726:	2206      	movs	r2, #6
 801f728:	f7e0 fde2 	bl	80002f0 <memchr>
 801f72c:	2800      	cmp	r0, #0
 801f72e:	d03f      	beq.n	801f7b0 <_vfiprintf_r+0x22c>
 801f730:	4b29      	ldr	r3, [pc, #164]	; (801f7d8 <_vfiprintf_r+0x254>)
 801f732:	bb1b      	cbnz	r3, 801f77c <_vfiprintf_r+0x1f8>
 801f734:	9b03      	ldr	r3, [sp, #12]
 801f736:	3307      	adds	r3, #7
 801f738:	f023 0307 	bic.w	r3, r3, #7
 801f73c:	3308      	adds	r3, #8
 801f73e:	9303      	str	r3, [sp, #12]
 801f740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f742:	443b      	add	r3, r7
 801f744:	9309      	str	r3, [sp, #36]	; 0x24
 801f746:	e767      	b.n	801f618 <_vfiprintf_r+0x94>
 801f748:	fb0c 3202 	mla	r2, ip, r2, r3
 801f74c:	460c      	mov	r4, r1
 801f74e:	2001      	movs	r0, #1
 801f750:	e7a5      	b.n	801f69e <_vfiprintf_r+0x11a>
 801f752:	2300      	movs	r3, #0
 801f754:	3401      	adds	r4, #1
 801f756:	9305      	str	r3, [sp, #20]
 801f758:	4619      	mov	r1, r3
 801f75a:	f04f 0c0a 	mov.w	ip, #10
 801f75e:	4620      	mov	r0, r4
 801f760:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f764:	3a30      	subs	r2, #48	; 0x30
 801f766:	2a09      	cmp	r2, #9
 801f768:	d903      	bls.n	801f772 <_vfiprintf_r+0x1ee>
 801f76a:	2b00      	cmp	r3, #0
 801f76c:	d0c5      	beq.n	801f6fa <_vfiprintf_r+0x176>
 801f76e:	9105      	str	r1, [sp, #20]
 801f770:	e7c3      	b.n	801f6fa <_vfiprintf_r+0x176>
 801f772:	fb0c 2101 	mla	r1, ip, r1, r2
 801f776:	4604      	mov	r4, r0
 801f778:	2301      	movs	r3, #1
 801f77a:	e7f0      	b.n	801f75e <_vfiprintf_r+0x1da>
 801f77c:	ab03      	add	r3, sp, #12
 801f77e:	9300      	str	r3, [sp, #0]
 801f780:	462a      	mov	r2, r5
 801f782:	4b16      	ldr	r3, [pc, #88]	; (801f7dc <_vfiprintf_r+0x258>)
 801f784:	a904      	add	r1, sp, #16
 801f786:	4630      	mov	r0, r6
 801f788:	f3af 8000 	nop.w
 801f78c:	4607      	mov	r7, r0
 801f78e:	1c78      	adds	r0, r7, #1
 801f790:	d1d6      	bne.n	801f740 <_vfiprintf_r+0x1bc>
 801f792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f794:	07d9      	lsls	r1, r3, #31
 801f796:	d405      	bmi.n	801f7a4 <_vfiprintf_r+0x220>
 801f798:	89ab      	ldrh	r3, [r5, #12]
 801f79a:	059a      	lsls	r2, r3, #22
 801f79c:	d402      	bmi.n	801f7a4 <_vfiprintf_r+0x220>
 801f79e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f7a0:	f7ff fd9c 	bl	801f2dc <__retarget_lock_release_recursive>
 801f7a4:	89ab      	ldrh	r3, [r5, #12]
 801f7a6:	065b      	lsls	r3, r3, #25
 801f7a8:	f53f af12 	bmi.w	801f5d0 <_vfiprintf_r+0x4c>
 801f7ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f7ae:	e711      	b.n	801f5d4 <_vfiprintf_r+0x50>
 801f7b0:	ab03      	add	r3, sp, #12
 801f7b2:	9300      	str	r3, [sp, #0]
 801f7b4:	462a      	mov	r2, r5
 801f7b6:	4b09      	ldr	r3, [pc, #36]	; (801f7dc <_vfiprintf_r+0x258>)
 801f7b8:	a904      	add	r1, sp, #16
 801f7ba:	4630      	mov	r0, r6
 801f7bc:	f000 f880 	bl	801f8c0 <_printf_i>
 801f7c0:	e7e4      	b.n	801f78c <_vfiprintf_r+0x208>
 801f7c2:	bf00      	nop
 801f7c4:	080245a0 	.word	0x080245a0
 801f7c8:	080245c0 	.word	0x080245c0
 801f7cc:	08024580 	.word	0x08024580
 801f7d0:	080245e4 	.word	0x080245e4
 801f7d4:	080245ee 	.word	0x080245ee
 801f7d8:	00000000 	.word	0x00000000
 801f7dc:	0801f55f 	.word	0x0801f55f
 801f7e0:	080245ea 	.word	0x080245ea

0801f7e4 <_printf_common>:
 801f7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f7e8:	4616      	mov	r6, r2
 801f7ea:	4699      	mov	r9, r3
 801f7ec:	688a      	ldr	r2, [r1, #8]
 801f7ee:	690b      	ldr	r3, [r1, #16]
 801f7f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f7f4:	4293      	cmp	r3, r2
 801f7f6:	bfb8      	it	lt
 801f7f8:	4613      	movlt	r3, r2
 801f7fa:	6033      	str	r3, [r6, #0]
 801f7fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f800:	4607      	mov	r7, r0
 801f802:	460c      	mov	r4, r1
 801f804:	b10a      	cbz	r2, 801f80a <_printf_common+0x26>
 801f806:	3301      	adds	r3, #1
 801f808:	6033      	str	r3, [r6, #0]
 801f80a:	6823      	ldr	r3, [r4, #0]
 801f80c:	0699      	lsls	r1, r3, #26
 801f80e:	bf42      	ittt	mi
 801f810:	6833      	ldrmi	r3, [r6, #0]
 801f812:	3302      	addmi	r3, #2
 801f814:	6033      	strmi	r3, [r6, #0]
 801f816:	6825      	ldr	r5, [r4, #0]
 801f818:	f015 0506 	ands.w	r5, r5, #6
 801f81c:	d106      	bne.n	801f82c <_printf_common+0x48>
 801f81e:	f104 0a19 	add.w	sl, r4, #25
 801f822:	68e3      	ldr	r3, [r4, #12]
 801f824:	6832      	ldr	r2, [r6, #0]
 801f826:	1a9b      	subs	r3, r3, r2
 801f828:	42ab      	cmp	r3, r5
 801f82a:	dc26      	bgt.n	801f87a <_printf_common+0x96>
 801f82c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f830:	1e13      	subs	r3, r2, #0
 801f832:	6822      	ldr	r2, [r4, #0]
 801f834:	bf18      	it	ne
 801f836:	2301      	movne	r3, #1
 801f838:	0692      	lsls	r2, r2, #26
 801f83a:	d42b      	bmi.n	801f894 <_printf_common+0xb0>
 801f83c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f840:	4649      	mov	r1, r9
 801f842:	4638      	mov	r0, r7
 801f844:	47c0      	blx	r8
 801f846:	3001      	adds	r0, #1
 801f848:	d01e      	beq.n	801f888 <_printf_common+0xa4>
 801f84a:	6823      	ldr	r3, [r4, #0]
 801f84c:	68e5      	ldr	r5, [r4, #12]
 801f84e:	6832      	ldr	r2, [r6, #0]
 801f850:	f003 0306 	and.w	r3, r3, #6
 801f854:	2b04      	cmp	r3, #4
 801f856:	bf08      	it	eq
 801f858:	1aad      	subeq	r5, r5, r2
 801f85a:	68a3      	ldr	r3, [r4, #8]
 801f85c:	6922      	ldr	r2, [r4, #16]
 801f85e:	bf0c      	ite	eq
 801f860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f864:	2500      	movne	r5, #0
 801f866:	4293      	cmp	r3, r2
 801f868:	bfc4      	itt	gt
 801f86a:	1a9b      	subgt	r3, r3, r2
 801f86c:	18ed      	addgt	r5, r5, r3
 801f86e:	2600      	movs	r6, #0
 801f870:	341a      	adds	r4, #26
 801f872:	42b5      	cmp	r5, r6
 801f874:	d11a      	bne.n	801f8ac <_printf_common+0xc8>
 801f876:	2000      	movs	r0, #0
 801f878:	e008      	b.n	801f88c <_printf_common+0xa8>
 801f87a:	2301      	movs	r3, #1
 801f87c:	4652      	mov	r2, sl
 801f87e:	4649      	mov	r1, r9
 801f880:	4638      	mov	r0, r7
 801f882:	47c0      	blx	r8
 801f884:	3001      	adds	r0, #1
 801f886:	d103      	bne.n	801f890 <_printf_common+0xac>
 801f888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f890:	3501      	adds	r5, #1
 801f892:	e7c6      	b.n	801f822 <_printf_common+0x3e>
 801f894:	18e1      	adds	r1, r4, r3
 801f896:	1c5a      	adds	r2, r3, #1
 801f898:	2030      	movs	r0, #48	; 0x30
 801f89a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f89e:	4422      	add	r2, r4
 801f8a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f8a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f8a8:	3302      	adds	r3, #2
 801f8aa:	e7c7      	b.n	801f83c <_printf_common+0x58>
 801f8ac:	2301      	movs	r3, #1
 801f8ae:	4622      	mov	r2, r4
 801f8b0:	4649      	mov	r1, r9
 801f8b2:	4638      	mov	r0, r7
 801f8b4:	47c0      	blx	r8
 801f8b6:	3001      	adds	r0, #1
 801f8b8:	d0e6      	beq.n	801f888 <_printf_common+0xa4>
 801f8ba:	3601      	adds	r6, #1
 801f8bc:	e7d9      	b.n	801f872 <_printf_common+0x8e>
	...

0801f8c0 <_printf_i>:
 801f8c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f8c4:	7e0f      	ldrb	r7, [r1, #24]
 801f8c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f8c8:	2f78      	cmp	r7, #120	; 0x78
 801f8ca:	4691      	mov	r9, r2
 801f8cc:	4680      	mov	r8, r0
 801f8ce:	460c      	mov	r4, r1
 801f8d0:	469a      	mov	sl, r3
 801f8d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f8d6:	d807      	bhi.n	801f8e8 <_printf_i+0x28>
 801f8d8:	2f62      	cmp	r7, #98	; 0x62
 801f8da:	d80a      	bhi.n	801f8f2 <_printf_i+0x32>
 801f8dc:	2f00      	cmp	r7, #0
 801f8de:	f000 80d8 	beq.w	801fa92 <_printf_i+0x1d2>
 801f8e2:	2f58      	cmp	r7, #88	; 0x58
 801f8e4:	f000 80a3 	beq.w	801fa2e <_printf_i+0x16e>
 801f8e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f8ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f8f0:	e03a      	b.n	801f968 <_printf_i+0xa8>
 801f8f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f8f6:	2b15      	cmp	r3, #21
 801f8f8:	d8f6      	bhi.n	801f8e8 <_printf_i+0x28>
 801f8fa:	a101      	add	r1, pc, #4	; (adr r1, 801f900 <_printf_i+0x40>)
 801f8fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f900:	0801f959 	.word	0x0801f959
 801f904:	0801f96d 	.word	0x0801f96d
 801f908:	0801f8e9 	.word	0x0801f8e9
 801f90c:	0801f8e9 	.word	0x0801f8e9
 801f910:	0801f8e9 	.word	0x0801f8e9
 801f914:	0801f8e9 	.word	0x0801f8e9
 801f918:	0801f96d 	.word	0x0801f96d
 801f91c:	0801f8e9 	.word	0x0801f8e9
 801f920:	0801f8e9 	.word	0x0801f8e9
 801f924:	0801f8e9 	.word	0x0801f8e9
 801f928:	0801f8e9 	.word	0x0801f8e9
 801f92c:	0801fa79 	.word	0x0801fa79
 801f930:	0801f99d 	.word	0x0801f99d
 801f934:	0801fa5b 	.word	0x0801fa5b
 801f938:	0801f8e9 	.word	0x0801f8e9
 801f93c:	0801f8e9 	.word	0x0801f8e9
 801f940:	0801fa9b 	.word	0x0801fa9b
 801f944:	0801f8e9 	.word	0x0801f8e9
 801f948:	0801f99d 	.word	0x0801f99d
 801f94c:	0801f8e9 	.word	0x0801f8e9
 801f950:	0801f8e9 	.word	0x0801f8e9
 801f954:	0801fa63 	.word	0x0801fa63
 801f958:	682b      	ldr	r3, [r5, #0]
 801f95a:	1d1a      	adds	r2, r3, #4
 801f95c:	681b      	ldr	r3, [r3, #0]
 801f95e:	602a      	str	r2, [r5, #0]
 801f960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f968:	2301      	movs	r3, #1
 801f96a:	e0a3      	b.n	801fab4 <_printf_i+0x1f4>
 801f96c:	6820      	ldr	r0, [r4, #0]
 801f96e:	6829      	ldr	r1, [r5, #0]
 801f970:	0606      	lsls	r6, r0, #24
 801f972:	f101 0304 	add.w	r3, r1, #4
 801f976:	d50a      	bpl.n	801f98e <_printf_i+0xce>
 801f978:	680e      	ldr	r6, [r1, #0]
 801f97a:	602b      	str	r3, [r5, #0]
 801f97c:	2e00      	cmp	r6, #0
 801f97e:	da03      	bge.n	801f988 <_printf_i+0xc8>
 801f980:	232d      	movs	r3, #45	; 0x2d
 801f982:	4276      	negs	r6, r6
 801f984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f988:	485e      	ldr	r0, [pc, #376]	; (801fb04 <_printf_i+0x244>)
 801f98a:	230a      	movs	r3, #10
 801f98c:	e019      	b.n	801f9c2 <_printf_i+0x102>
 801f98e:	680e      	ldr	r6, [r1, #0]
 801f990:	602b      	str	r3, [r5, #0]
 801f992:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f996:	bf18      	it	ne
 801f998:	b236      	sxthne	r6, r6
 801f99a:	e7ef      	b.n	801f97c <_printf_i+0xbc>
 801f99c:	682b      	ldr	r3, [r5, #0]
 801f99e:	6820      	ldr	r0, [r4, #0]
 801f9a0:	1d19      	adds	r1, r3, #4
 801f9a2:	6029      	str	r1, [r5, #0]
 801f9a4:	0601      	lsls	r1, r0, #24
 801f9a6:	d501      	bpl.n	801f9ac <_printf_i+0xec>
 801f9a8:	681e      	ldr	r6, [r3, #0]
 801f9aa:	e002      	b.n	801f9b2 <_printf_i+0xf2>
 801f9ac:	0646      	lsls	r6, r0, #25
 801f9ae:	d5fb      	bpl.n	801f9a8 <_printf_i+0xe8>
 801f9b0:	881e      	ldrh	r6, [r3, #0]
 801f9b2:	4854      	ldr	r0, [pc, #336]	; (801fb04 <_printf_i+0x244>)
 801f9b4:	2f6f      	cmp	r7, #111	; 0x6f
 801f9b6:	bf0c      	ite	eq
 801f9b8:	2308      	moveq	r3, #8
 801f9ba:	230a      	movne	r3, #10
 801f9bc:	2100      	movs	r1, #0
 801f9be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f9c2:	6865      	ldr	r5, [r4, #4]
 801f9c4:	60a5      	str	r5, [r4, #8]
 801f9c6:	2d00      	cmp	r5, #0
 801f9c8:	bfa2      	ittt	ge
 801f9ca:	6821      	ldrge	r1, [r4, #0]
 801f9cc:	f021 0104 	bicge.w	r1, r1, #4
 801f9d0:	6021      	strge	r1, [r4, #0]
 801f9d2:	b90e      	cbnz	r6, 801f9d8 <_printf_i+0x118>
 801f9d4:	2d00      	cmp	r5, #0
 801f9d6:	d04d      	beq.n	801fa74 <_printf_i+0x1b4>
 801f9d8:	4615      	mov	r5, r2
 801f9da:	fbb6 f1f3 	udiv	r1, r6, r3
 801f9de:	fb03 6711 	mls	r7, r3, r1, r6
 801f9e2:	5dc7      	ldrb	r7, [r0, r7]
 801f9e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f9e8:	4637      	mov	r7, r6
 801f9ea:	42bb      	cmp	r3, r7
 801f9ec:	460e      	mov	r6, r1
 801f9ee:	d9f4      	bls.n	801f9da <_printf_i+0x11a>
 801f9f0:	2b08      	cmp	r3, #8
 801f9f2:	d10b      	bne.n	801fa0c <_printf_i+0x14c>
 801f9f4:	6823      	ldr	r3, [r4, #0]
 801f9f6:	07de      	lsls	r6, r3, #31
 801f9f8:	d508      	bpl.n	801fa0c <_printf_i+0x14c>
 801f9fa:	6923      	ldr	r3, [r4, #16]
 801f9fc:	6861      	ldr	r1, [r4, #4]
 801f9fe:	4299      	cmp	r1, r3
 801fa00:	bfde      	ittt	le
 801fa02:	2330      	movle	r3, #48	; 0x30
 801fa04:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fa08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801fa0c:	1b52      	subs	r2, r2, r5
 801fa0e:	6122      	str	r2, [r4, #16]
 801fa10:	f8cd a000 	str.w	sl, [sp]
 801fa14:	464b      	mov	r3, r9
 801fa16:	aa03      	add	r2, sp, #12
 801fa18:	4621      	mov	r1, r4
 801fa1a:	4640      	mov	r0, r8
 801fa1c:	f7ff fee2 	bl	801f7e4 <_printf_common>
 801fa20:	3001      	adds	r0, #1
 801fa22:	d14c      	bne.n	801fabe <_printf_i+0x1fe>
 801fa24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fa28:	b004      	add	sp, #16
 801fa2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa2e:	4835      	ldr	r0, [pc, #212]	; (801fb04 <_printf_i+0x244>)
 801fa30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801fa34:	6829      	ldr	r1, [r5, #0]
 801fa36:	6823      	ldr	r3, [r4, #0]
 801fa38:	f851 6b04 	ldr.w	r6, [r1], #4
 801fa3c:	6029      	str	r1, [r5, #0]
 801fa3e:	061d      	lsls	r5, r3, #24
 801fa40:	d514      	bpl.n	801fa6c <_printf_i+0x1ac>
 801fa42:	07df      	lsls	r7, r3, #31
 801fa44:	bf44      	itt	mi
 801fa46:	f043 0320 	orrmi.w	r3, r3, #32
 801fa4a:	6023      	strmi	r3, [r4, #0]
 801fa4c:	b91e      	cbnz	r6, 801fa56 <_printf_i+0x196>
 801fa4e:	6823      	ldr	r3, [r4, #0]
 801fa50:	f023 0320 	bic.w	r3, r3, #32
 801fa54:	6023      	str	r3, [r4, #0]
 801fa56:	2310      	movs	r3, #16
 801fa58:	e7b0      	b.n	801f9bc <_printf_i+0xfc>
 801fa5a:	6823      	ldr	r3, [r4, #0]
 801fa5c:	f043 0320 	orr.w	r3, r3, #32
 801fa60:	6023      	str	r3, [r4, #0]
 801fa62:	2378      	movs	r3, #120	; 0x78
 801fa64:	4828      	ldr	r0, [pc, #160]	; (801fb08 <_printf_i+0x248>)
 801fa66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fa6a:	e7e3      	b.n	801fa34 <_printf_i+0x174>
 801fa6c:	0659      	lsls	r1, r3, #25
 801fa6e:	bf48      	it	mi
 801fa70:	b2b6      	uxthmi	r6, r6
 801fa72:	e7e6      	b.n	801fa42 <_printf_i+0x182>
 801fa74:	4615      	mov	r5, r2
 801fa76:	e7bb      	b.n	801f9f0 <_printf_i+0x130>
 801fa78:	682b      	ldr	r3, [r5, #0]
 801fa7a:	6826      	ldr	r6, [r4, #0]
 801fa7c:	6961      	ldr	r1, [r4, #20]
 801fa7e:	1d18      	adds	r0, r3, #4
 801fa80:	6028      	str	r0, [r5, #0]
 801fa82:	0635      	lsls	r5, r6, #24
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	d501      	bpl.n	801fa8c <_printf_i+0x1cc>
 801fa88:	6019      	str	r1, [r3, #0]
 801fa8a:	e002      	b.n	801fa92 <_printf_i+0x1d2>
 801fa8c:	0670      	lsls	r0, r6, #25
 801fa8e:	d5fb      	bpl.n	801fa88 <_printf_i+0x1c8>
 801fa90:	8019      	strh	r1, [r3, #0]
 801fa92:	2300      	movs	r3, #0
 801fa94:	6123      	str	r3, [r4, #16]
 801fa96:	4615      	mov	r5, r2
 801fa98:	e7ba      	b.n	801fa10 <_printf_i+0x150>
 801fa9a:	682b      	ldr	r3, [r5, #0]
 801fa9c:	1d1a      	adds	r2, r3, #4
 801fa9e:	602a      	str	r2, [r5, #0]
 801faa0:	681d      	ldr	r5, [r3, #0]
 801faa2:	6862      	ldr	r2, [r4, #4]
 801faa4:	2100      	movs	r1, #0
 801faa6:	4628      	mov	r0, r5
 801faa8:	f7e0 fc22 	bl	80002f0 <memchr>
 801faac:	b108      	cbz	r0, 801fab2 <_printf_i+0x1f2>
 801faae:	1b40      	subs	r0, r0, r5
 801fab0:	6060      	str	r0, [r4, #4]
 801fab2:	6863      	ldr	r3, [r4, #4]
 801fab4:	6123      	str	r3, [r4, #16]
 801fab6:	2300      	movs	r3, #0
 801fab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fabc:	e7a8      	b.n	801fa10 <_printf_i+0x150>
 801fabe:	6923      	ldr	r3, [r4, #16]
 801fac0:	462a      	mov	r2, r5
 801fac2:	4649      	mov	r1, r9
 801fac4:	4640      	mov	r0, r8
 801fac6:	47d0      	blx	sl
 801fac8:	3001      	adds	r0, #1
 801faca:	d0ab      	beq.n	801fa24 <_printf_i+0x164>
 801facc:	6823      	ldr	r3, [r4, #0]
 801face:	079b      	lsls	r3, r3, #30
 801fad0:	d413      	bmi.n	801fafa <_printf_i+0x23a>
 801fad2:	68e0      	ldr	r0, [r4, #12]
 801fad4:	9b03      	ldr	r3, [sp, #12]
 801fad6:	4298      	cmp	r0, r3
 801fad8:	bfb8      	it	lt
 801fada:	4618      	movlt	r0, r3
 801fadc:	e7a4      	b.n	801fa28 <_printf_i+0x168>
 801fade:	2301      	movs	r3, #1
 801fae0:	4632      	mov	r2, r6
 801fae2:	4649      	mov	r1, r9
 801fae4:	4640      	mov	r0, r8
 801fae6:	47d0      	blx	sl
 801fae8:	3001      	adds	r0, #1
 801faea:	d09b      	beq.n	801fa24 <_printf_i+0x164>
 801faec:	3501      	adds	r5, #1
 801faee:	68e3      	ldr	r3, [r4, #12]
 801faf0:	9903      	ldr	r1, [sp, #12]
 801faf2:	1a5b      	subs	r3, r3, r1
 801faf4:	42ab      	cmp	r3, r5
 801faf6:	dcf2      	bgt.n	801fade <_printf_i+0x21e>
 801faf8:	e7eb      	b.n	801fad2 <_printf_i+0x212>
 801fafa:	2500      	movs	r5, #0
 801fafc:	f104 0619 	add.w	r6, r4, #25
 801fb00:	e7f5      	b.n	801faee <_printf_i+0x22e>
 801fb02:	bf00      	nop
 801fb04:	080245f5 	.word	0x080245f5
 801fb08:	08024606 	.word	0x08024606

0801fb0c <iprintf>:
 801fb0c:	b40f      	push	{r0, r1, r2, r3}
 801fb0e:	4b0a      	ldr	r3, [pc, #40]	; (801fb38 <iprintf+0x2c>)
 801fb10:	b513      	push	{r0, r1, r4, lr}
 801fb12:	681c      	ldr	r4, [r3, #0]
 801fb14:	b124      	cbz	r4, 801fb20 <iprintf+0x14>
 801fb16:	69a3      	ldr	r3, [r4, #24]
 801fb18:	b913      	cbnz	r3, 801fb20 <iprintf+0x14>
 801fb1a:	4620      	mov	r0, r4
 801fb1c:	f7ff fb08 	bl	801f130 <__sinit>
 801fb20:	ab05      	add	r3, sp, #20
 801fb22:	9a04      	ldr	r2, [sp, #16]
 801fb24:	68a1      	ldr	r1, [r4, #8]
 801fb26:	9301      	str	r3, [sp, #4]
 801fb28:	4620      	mov	r0, r4
 801fb2a:	f7ff fd2b 	bl	801f584 <_vfiprintf_r>
 801fb2e:	b002      	add	sp, #8
 801fb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb34:	b004      	add	sp, #16
 801fb36:	4770      	bx	lr
 801fb38:	24000034 	.word	0x24000034

0801fb3c <_puts_r>:
 801fb3c:	b570      	push	{r4, r5, r6, lr}
 801fb3e:	460e      	mov	r6, r1
 801fb40:	4605      	mov	r5, r0
 801fb42:	b118      	cbz	r0, 801fb4c <_puts_r+0x10>
 801fb44:	6983      	ldr	r3, [r0, #24]
 801fb46:	b90b      	cbnz	r3, 801fb4c <_puts_r+0x10>
 801fb48:	f7ff faf2 	bl	801f130 <__sinit>
 801fb4c:	69ab      	ldr	r3, [r5, #24]
 801fb4e:	68ac      	ldr	r4, [r5, #8]
 801fb50:	b913      	cbnz	r3, 801fb58 <_puts_r+0x1c>
 801fb52:	4628      	mov	r0, r5
 801fb54:	f7ff faec 	bl	801f130 <__sinit>
 801fb58:	4b2c      	ldr	r3, [pc, #176]	; (801fc0c <_puts_r+0xd0>)
 801fb5a:	429c      	cmp	r4, r3
 801fb5c:	d120      	bne.n	801fba0 <_puts_r+0x64>
 801fb5e:	686c      	ldr	r4, [r5, #4]
 801fb60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb62:	07db      	lsls	r3, r3, #31
 801fb64:	d405      	bmi.n	801fb72 <_puts_r+0x36>
 801fb66:	89a3      	ldrh	r3, [r4, #12]
 801fb68:	0598      	lsls	r0, r3, #22
 801fb6a:	d402      	bmi.n	801fb72 <_puts_r+0x36>
 801fb6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb6e:	f7ff fbb4 	bl	801f2da <__retarget_lock_acquire_recursive>
 801fb72:	89a3      	ldrh	r3, [r4, #12]
 801fb74:	0719      	lsls	r1, r3, #28
 801fb76:	d51d      	bpl.n	801fbb4 <_puts_r+0x78>
 801fb78:	6923      	ldr	r3, [r4, #16]
 801fb7a:	b1db      	cbz	r3, 801fbb4 <_puts_r+0x78>
 801fb7c:	3e01      	subs	r6, #1
 801fb7e:	68a3      	ldr	r3, [r4, #8]
 801fb80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801fb84:	3b01      	subs	r3, #1
 801fb86:	60a3      	str	r3, [r4, #8]
 801fb88:	bb39      	cbnz	r1, 801fbda <_puts_r+0x9e>
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	da38      	bge.n	801fc00 <_puts_r+0xc4>
 801fb8e:	4622      	mov	r2, r4
 801fb90:	210a      	movs	r1, #10
 801fb92:	4628      	mov	r0, r5
 801fb94:	f000 f984 	bl	801fea0 <__swbuf_r>
 801fb98:	3001      	adds	r0, #1
 801fb9a:	d011      	beq.n	801fbc0 <_puts_r+0x84>
 801fb9c:	250a      	movs	r5, #10
 801fb9e:	e011      	b.n	801fbc4 <_puts_r+0x88>
 801fba0:	4b1b      	ldr	r3, [pc, #108]	; (801fc10 <_puts_r+0xd4>)
 801fba2:	429c      	cmp	r4, r3
 801fba4:	d101      	bne.n	801fbaa <_puts_r+0x6e>
 801fba6:	68ac      	ldr	r4, [r5, #8]
 801fba8:	e7da      	b.n	801fb60 <_puts_r+0x24>
 801fbaa:	4b1a      	ldr	r3, [pc, #104]	; (801fc14 <_puts_r+0xd8>)
 801fbac:	429c      	cmp	r4, r3
 801fbae:	bf08      	it	eq
 801fbb0:	68ec      	ldreq	r4, [r5, #12]
 801fbb2:	e7d5      	b.n	801fb60 <_puts_r+0x24>
 801fbb4:	4621      	mov	r1, r4
 801fbb6:	4628      	mov	r0, r5
 801fbb8:	f000 f9d6 	bl	801ff68 <__swsetup_r>
 801fbbc:	2800      	cmp	r0, #0
 801fbbe:	d0dd      	beq.n	801fb7c <_puts_r+0x40>
 801fbc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801fbc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fbc6:	07da      	lsls	r2, r3, #31
 801fbc8:	d405      	bmi.n	801fbd6 <_puts_r+0x9a>
 801fbca:	89a3      	ldrh	r3, [r4, #12]
 801fbcc:	059b      	lsls	r3, r3, #22
 801fbce:	d402      	bmi.n	801fbd6 <_puts_r+0x9a>
 801fbd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbd2:	f7ff fb83 	bl	801f2dc <__retarget_lock_release_recursive>
 801fbd6:	4628      	mov	r0, r5
 801fbd8:	bd70      	pop	{r4, r5, r6, pc}
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	da04      	bge.n	801fbe8 <_puts_r+0xac>
 801fbde:	69a2      	ldr	r2, [r4, #24]
 801fbe0:	429a      	cmp	r2, r3
 801fbe2:	dc06      	bgt.n	801fbf2 <_puts_r+0xb6>
 801fbe4:	290a      	cmp	r1, #10
 801fbe6:	d004      	beq.n	801fbf2 <_puts_r+0xb6>
 801fbe8:	6823      	ldr	r3, [r4, #0]
 801fbea:	1c5a      	adds	r2, r3, #1
 801fbec:	6022      	str	r2, [r4, #0]
 801fbee:	7019      	strb	r1, [r3, #0]
 801fbf0:	e7c5      	b.n	801fb7e <_puts_r+0x42>
 801fbf2:	4622      	mov	r2, r4
 801fbf4:	4628      	mov	r0, r5
 801fbf6:	f000 f953 	bl	801fea0 <__swbuf_r>
 801fbfa:	3001      	adds	r0, #1
 801fbfc:	d1bf      	bne.n	801fb7e <_puts_r+0x42>
 801fbfe:	e7df      	b.n	801fbc0 <_puts_r+0x84>
 801fc00:	6823      	ldr	r3, [r4, #0]
 801fc02:	250a      	movs	r5, #10
 801fc04:	1c5a      	adds	r2, r3, #1
 801fc06:	6022      	str	r2, [r4, #0]
 801fc08:	701d      	strb	r5, [r3, #0]
 801fc0a:	e7db      	b.n	801fbc4 <_puts_r+0x88>
 801fc0c:	080245a0 	.word	0x080245a0
 801fc10:	080245c0 	.word	0x080245c0
 801fc14:	08024580 	.word	0x08024580

0801fc18 <puts>:
 801fc18:	4b02      	ldr	r3, [pc, #8]	; (801fc24 <puts+0xc>)
 801fc1a:	4601      	mov	r1, r0
 801fc1c:	6818      	ldr	r0, [r3, #0]
 801fc1e:	f7ff bf8d 	b.w	801fb3c <_puts_r>
 801fc22:	bf00      	nop
 801fc24:	24000034 	.word	0x24000034

0801fc28 <rand>:
 801fc28:	4b16      	ldr	r3, [pc, #88]	; (801fc84 <rand+0x5c>)
 801fc2a:	b510      	push	{r4, lr}
 801fc2c:	681c      	ldr	r4, [r3, #0]
 801fc2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fc30:	b9b3      	cbnz	r3, 801fc60 <rand+0x38>
 801fc32:	2018      	movs	r0, #24
 801fc34:	f7ff fb54 	bl	801f2e0 <malloc>
 801fc38:	63a0      	str	r0, [r4, #56]	; 0x38
 801fc3a:	b928      	cbnz	r0, 801fc48 <rand+0x20>
 801fc3c:	4602      	mov	r2, r0
 801fc3e:	4b12      	ldr	r3, [pc, #72]	; (801fc88 <rand+0x60>)
 801fc40:	4812      	ldr	r0, [pc, #72]	; (801fc8c <rand+0x64>)
 801fc42:	214e      	movs	r1, #78	; 0x4e
 801fc44:	f7ff f9fe 	bl	801f044 <__assert_func>
 801fc48:	4a11      	ldr	r2, [pc, #68]	; (801fc90 <rand+0x68>)
 801fc4a:	4b12      	ldr	r3, [pc, #72]	; (801fc94 <rand+0x6c>)
 801fc4c:	e9c0 2300 	strd	r2, r3, [r0]
 801fc50:	4b11      	ldr	r3, [pc, #68]	; (801fc98 <rand+0x70>)
 801fc52:	6083      	str	r3, [r0, #8]
 801fc54:	230b      	movs	r3, #11
 801fc56:	8183      	strh	r3, [r0, #12]
 801fc58:	2201      	movs	r2, #1
 801fc5a:	2300      	movs	r3, #0
 801fc5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801fc60:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801fc62:	4a0e      	ldr	r2, [pc, #56]	; (801fc9c <rand+0x74>)
 801fc64:	6920      	ldr	r0, [r4, #16]
 801fc66:	6963      	ldr	r3, [r4, #20]
 801fc68:	490d      	ldr	r1, [pc, #52]	; (801fca0 <rand+0x78>)
 801fc6a:	4342      	muls	r2, r0
 801fc6c:	fb01 2203 	mla	r2, r1, r3, r2
 801fc70:	fba0 0101 	umull	r0, r1, r0, r1
 801fc74:	1c43      	adds	r3, r0, #1
 801fc76:	eb42 0001 	adc.w	r0, r2, r1
 801fc7a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801fc7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801fc82:	bd10      	pop	{r4, pc}
 801fc84:	24000034 	.word	0x24000034
 801fc88:	08024617 	.word	0x08024617
 801fc8c:	0802462e 	.word	0x0802462e
 801fc90:	abcd330e 	.word	0xabcd330e
 801fc94:	e66d1234 	.word	0xe66d1234
 801fc98:	0005deec 	.word	0x0005deec
 801fc9c:	5851f42d 	.word	0x5851f42d
 801fca0:	4c957f2d 	.word	0x4c957f2d

0801fca4 <cleanup_glue>:
 801fca4:	b538      	push	{r3, r4, r5, lr}
 801fca6:	460c      	mov	r4, r1
 801fca8:	6809      	ldr	r1, [r1, #0]
 801fcaa:	4605      	mov	r5, r0
 801fcac:	b109      	cbz	r1, 801fcb2 <cleanup_glue+0xe>
 801fcae:	f7ff fff9 	bl	801fca4 <cleanup_glue>
 801fcb2:	4621      	mov	r1, r4
 801fcb4:	4628      	mov	r0, r5
 801fcb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fcba:	f7ff bb59 	b.w	801f370 <_free_r>
	...

0801fcc0 <_reclaim_reent>:
 801fcc0:	4b2c      	ldr	r3, [pc, #176]	; (801fd74 <_reclaim_reent+0xb4>)
 801fcc2:	681b      	ldr	r3, [r3, #0]
 801fcc4:	4283      	cmp	r3, r0
 801fcc6:	b570      	push	{r4, r5, r6, lr}
 801fcc8:	4604      	mov	r4, r0
 801fcca:	d051      	beq.n	801fd70 <_reclaim_reent+0xb0>
 801fccc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801fcce:	b143      	cbz	r3, 801fce2 <_reclaim_reent+0x22>
 801fcd0:	68db      	ldr	r3, [r3, #12]
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	d14a      	bne.n	801fd6c <_reclaim_reent+0xac>
 801fcd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fcd8:	6819      	ldr	r1, [r3, #0]
 801fcda:	b111      	cbz	r1, 801fce2 <_reclaim_reent+0x22>
 801fcdc:	4620      	mov	r0, r4
 801fcde:	f7ff fb47 	bl	801f370 <_free_r>
 801fce2:	6961      	ldr	r1, [r4, #20]
 801fce4:	b111      	cbz	r1, 801fcec <_reclaim_reent+0x2c>
 801fce6:	4620      	mov	r0, r4
 801fce8:	f7ff fb42 	bl	801f370 <_free_r>
 801fcec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801fcee:	b111      	cbz	r1, 801fcf6 <_reclaim_reent+0x36>
 801fcf0:	4620      	mov	r0, r4
 801fcf2:	f7ff fb3d 	bl	801f370 <_free_r>
 801fcf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fcf8:	b111      	cbz	r1, 801fd00 <_reclaim_reent+0x40>
 801fcfa:	4620      	mov	r0, r4
 801fcfc:	f7ff fb38 	bl	801f370 <_free_r>
 801fd00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801fd02:	b111      	cbz	r1, 801fd0a <_reclaim_reent+0x4a>
 801fd04:	4620      	mov	r0, r4
 801fd06:	f7ff fb33 	bl	801f370 <_free_r>
 801fd0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fd0c:	b111      	cbz	r1, 801fd14 <_reclaim_reent+0x54>
 801fd0e:	4620      	mov	r0, r4
 801fd10:	f7ff fb2e 	bl	801f370 <_free_r>
 801fd14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801fd16:	b111      	cbz	r1, 801fd1e <_reclaim_reent+0x5e>
 801fd18:	4620      	mov	r0, r4
 801fd1a:	f7ff fb29 	bl	801f370 <_free_r>
 801fd1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801fd20:	b111      	cbz	r1, 801fd28 <_reclaim_reent+0x68>
 801fd22:	4620      	mov	r0, r4
 801fd24:	f7ff fb24 	bl	801f370 <_free_r>
 801fd28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fd2a:	b111      	cbz	r1, 801fd32 <_reclaim_reent+0x72>
 801fd2c:	4620      	mov	r0, r4
 801fd2e:	f7ff fb1f 	bl	801f370 <_free_r>
 801fd32:	69a3      	ldr	r3, [r4, #24]
 801fd34:	b1e3      	cbz	r3, 801fd70 <_reclaim_reent+0xb0>
 801fd36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fd38:	4620      	mov	r0, r4
 801fd3a:	4798      	blx	r3
 801fd3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801fd3e:	b1b9      	cbz	r1, 801fd70 <_reclaim_reent+0xb0>
 801fd40:	4620      	mov	r0, r4
 801fd42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fd46:	f7ff bfad 	b.w	801fca4 <cleanup_glue>
 801fd4a:	5949      	ldr	r1, [r1, r5]
 801fd4c:	b941      	cbnz	r1, 801fd60 <_reclaim_reent+0xa0>
 801fd4e:	3504      	adds	r5, #4
 801fd50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fd52:	2d80      	cmp	r5, #128	; 0x80
 801fd54:	68d9      	ldr	r1, [r3, #12]
 801fd56:	d1f8      	bne.n	801fd4a <_reclaim_reent+0x8a>
 801fd58:	4620      	mov	r0, r4
 801fd5a:	f7ff fb09 	bl	801f370 <_free_r>
 801fd5e:	e7ba      	b.n	801fcd6 <_reclaim_reent+0x16>
 801fd60:	680e      	ldr	r6, [r1, #0]
 801fd62:	4620      	mov	r0, r4
 801fd64:	f7ff fb04 	bl	801f370 <_free_r>
 801fd68:	4631      	mov	r1, r6
 801fd6a:	e7ef      	b.n	801fd4c <_reclaim_reent+0x8c>
 801fd6c:	2500      	movs	r5, #0
 801fd6e:	e7ef      	b.n	801fd50 <_reclaim_reent+0x90>
 801fd70:	bd70      	pop	{r4, r5, r6, pc}
 801fd72:	bf00      	nop
 801fd74:	24000034 	.word	0x24000034

0801fd78 <_sbrk_r>:
 801fd78:	b538      	push	{r3, r4, r5, lr}
 801fd7a:	4d06      	ldr	r5, [pc, #24]	; (801fd94 <_sbrk_r+0x1c>)
 801fd7c:	2300      	movs	r3, #0
 801fd7e:	4604      	mov	r4, r0
 801fd80:	4608      	mov	r0, r1
 801fd82:	602b      	str	r3, [r5, #0]
 801fd84:	f7e1 fb5e 	bl	8001444 <_sbrk>
 801fd88:	1c43      	adds	r3, r0, #1
 801fd8a:	d102      	bne.n	801fd92 <_sbrk_r+0x1a>
 801fd8c:	682b      	ldr	r3, [r5, #0]
 801fd8e:	b103      	cbz	r3, 801fd92 <_sbrk_r+0x1a>
 801fd90:	6023      	str	r3, [r4, #0]
 801fd92:	bd38      	pop	{r3, r4, r5, pc}
 801fd94:	2400f9a0 	.word	0x2400f9a0

0801fd98 <siprintf>:
 801fd98:	b40e      	push	{r1, r2, r3}
 801fd9a:	b500      	push	{lr}
 801fd9c:	b09c      	sub	sp, #112	; 0x70
 801fd9e:	ab1d      	add	r3, sp, #116	; 0x74
 801fda0:	9002      	str	r0, [sp, #8]
 801fda2:	9006      	str	r0, [sp, #24]
 801fda4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fda8:	4809      	ldr	r0, [pc, #36]	; (801fdd0 <siprintf+0x38>)
 801fdaa:	9107      	str	r1, [sp, #28]
 801fdac:	9104      	str	r1, [sp, #16]
 801fdae:	4909      	ldr	r1, [pc, #36]	; (801fdd4 <siprintf+0x3c>)
 801fdb0:	f853 2b04 	ldr.w	r2, [r3], #4
 801fdb4:	9105      	str	r1, [sp, #20]
 801fdb6:	6800      	ldr	r0, [r0, #0]
 801fdb8:	9301      	str	r3, [sp, #4]
 801fdba:	a902      	add	r1, sp, #8
 801fdbc:	f000 fb2a 	bl	8020414 <_svfiprintf_r>
 801fdc0:	9b02      	ldr	r3, [sp, #8]
 801fdc2:	2200      	movs	r2, #0
 801fdc4:	701a      	strb	r2, [r3, #0]
 801fdc6:	b01c      	add	sp, #112	; 0x70
 801fdc8:	f85d eb04 	ldr.w	lr, [sp], #4
 801fdcc:	b003      	add	sp, #12
 801fdce:	4770      	bx	lr
 801fdd0:	24000034 	.word	0x24000034
 801fdd4:	ffff0208 	.word	0xffff0208

0801fdd8 <__sread>:
 801fdd8:	b510      	push	{r4, lr}
 801fdda:	460c      	mov	r4, r1
 801fddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fde0:	f000 fc18 	bl	8020614 <_read_r>
 801fde4:	2800      	cmp	r0, #0
 801fde6:	bfab      	itete	ge
 801fde8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fdea:	89a3      	ldrhlt	r3, [r4, #12]
 801fdec:	181b      	addge	r3, r3, r0
 801fdee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fdf2:	bfac      	ite	ge
 801fdf4:	6563      	strge	r3, [r4, #84]	; 0x54
 801fdf6:	81a3      	strhlt	r3, [r4, #12]
 801fdf8:	bd10      	pop	{r4, pc}

0801fdfa <__swrite>:
 801fdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdfe:	461f      	mov	r7, r3
 801fe00:	898b      	ldrh	r3, [r1, #12]
 801fe02:	05db      	lsls	r3, r3, #23
 801fe04:	4605      	mov	r5, r0
 801fe06:	460c      	mov	r4, r1
 801fe08:	4616      	mov	r6, r2
 801fe0a:	d505      	bpl.n	801fe18 <__swrite+0x1e>
 801fe0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe10:	2302      	movs	r3, #2
 801fe12:	2200      	movs	r2, #0
 801fe14:	f000 f9f0 	bl	80201f8 <_lseek_r>
 801fe18:	89a3      	ldrh	r3, [r4, #12]
 801fe1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fe1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fe22:	81a3      	strh	r3, [r4, #12]
 801fe24:	4632      	mov	r2, r6
 801fe26:	463b      	mov	r3, r7
 801fe28:	4628      	mov	r0, r5
 801fe2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fe2e:	f000 b889 	b.w	801ff44 <_write_r>

0801fe32 <__sseek>:
 801fe32:	b510      	push	{r4, lr}
 801fe34:	460c      	mov	r4, r1
 801fe36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe3a:	f000 f9dd 	bl	80201f8 <_lseek_r>
 801fe3e:	1c43      	adds	r3, r0, #1
 801fe40:	89a3      	ldrh	r3, [r4, #12]
 801fe42:	bf15      	itete	ne
 801fe44:	6560      	strne	r0, [r4, #84]	; 0x54
 801fe46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fe4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fe4e:	81a3      	strheq	r3, [r4, #12]
 801fe50:	bf18      	it	ne
 801fe52:	81a3      	strhne	r3, [r4, #12]
 801fe54:	bd10      	pop	{r4, pc}

0801fe56 <__sclose>:
 801fe56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe5a:	f000 b8fb 	b.w	8020054 <_close_r>

0801fe5e <strchr>:
 801fe5e:	b2c9      	uxtb	r1, r1
 801fe60:	4603      	mov	r3, r0
 801fe62:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fe66:	b11a      	cbz	r2, 801fe70 <strchr+0x12>
 801fe68:	428a      	cmp	r2, r1
 801fe6a:	d1f9      	bne.n	801fe60 <strchr+0x2>
 801fe6c:	4618      	mov	r0, r3
 801fe6e:	4770      	bx	lr
 801fe70:	2900      	cmp	r1, #0
 801fe72:	bf18      	it	ne
 801fe74:	2300      	movne	r3, #0
 801fe76:	e7f9      	b.n	801fe6c <strchr+0xe>

0801fe78 <strncpy>:
 801fe78:	b510      	push	{r4, lr}
 801fe7a:	3901      	subs	r1, #1
 801fe7c:	4603      	mov	r3, r0
 801fe7e:	b132      	cbz	r2, 801fe8e <strncpy+0x16>
 801fe80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fe84:	f803 4b01 	strb.w	r4, [r3], #1
 801fe88:	3a01      	subs	r2, #1
 801fe8a:	2c00      	cmp	r4, #0
 801fe8c:	d1f7      	bne.n	801fe7e <strncpy+0x6>
 801fe8e:	441a      	add	r2, r3
 801fe90:	2100      	movs	r1, #0
 801fe92:	4293      	cmp	r3, r2
 801fe94:	d100      	bne.n	801fe98 <strncpy+0x20>
 801fe96:	bd10      	pop	{r4, pc}
 801fe98:	f803 1b01 	strb.w	r1, [r3], #1
 801fe9c:	e7f9      	b.n	801fe92 <strncpy+0x1a>
	...

0801fea0 <__swbuf_r>:
 801fea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fea2:	460e      	mov	r6, r1
 801fea4:	4614      	mov	r4, r2
 801fea6:	4605      	mov	r5, r0
 801fea8:	b118      	cbz	r0, 801feb2 <__swbuf_r+0x12>
 801feaa:	6983      	ldr	r3, [r0, #24]
 801feac:	b90b      	cbnz	r3, 801feb2 <__swbuf_r+0x12>
 801feae:	f7ff f93f 	bl	801f130 <__sinit>
 801feb2:	4b21      	ldr	r3, [pc, #132]	; (801ff38 <__swbuf_r+0x98>)
 801feb4:	429c      	cmp	r4, r3
 801feb6:	d12b      	bne.n	801ff10 <__swbuf_r+0x70>
 801feb8:	686c      	ldr	r4, [r5, #4]
 801feba:	69a3      	ldr	r3, [r4, #24]
 801febc:	60a3      	str	r3, [r4, #8]
 801febe:	89a3      	ldrh	r3, [r4, #12]
 801fec0:	071a      	lsls	r2, r3, #28
 801fec2:	d52f      	bpl.n	801ff24 <__swbuf_r+0x84>
 801fec4:	6923      	ldr	r3, [r4, #16]
 801fec6:	b36b      	cbz	r3, 801ff24 <__swbuf_r+0x84>
 801fec8:	6923      	ldr	r3, [r4, #16]
 801feca:	6820      	ldr	r0, [r4, #0]
 801fecc:	1ac0      	subs	r0, r0, r3
 801fece:	6963      	ldr	r3, [r4, #20]
 801fed0:	b2f6      	uxtb	r6, r6
 801fed2:	4283      	cmp	r3, r0
 801fed4:	4637      	mov	r7, r6
 801fed6:	dc04      	bgt.n	801fee2 <__swbuf_r+0x42>
 801fed8:	4621      	mov	r1, r4
 801feda:	4628      	mov	r0, r5
 801fedc:	f000 f950 	bl	8020180 <_fflush_r>
 801fee0:	bb30      	cbnz	r0, 801ff30 <__swbuf_r+0x90>
 801fee2:	68a3      	ldr	r3, [r4, #8]
 801fee4:	3b01      	subs	r3, #1
 801fee6:	60a3      	str	r3, [r4, #8]
 801fee8:	6823      	ldr	r3, [r4, #0]
 801feea:	1c5a      	adds	r2, r3, #1
 801feec:	6022      	str	r2, [r4, #0]
 801feee:	701e      	strb	r6, [r3, #0]
 801fef0:	6963      	ldr	r3, [r4, #20]
 801fef2:	3001      	adds	r0, #1
 801fef4:	4283      	cmp	r3, r0
 801fef6:	d004      	beq.n	801ff02 <__swbuf_r+0x62>
 801fef8:	89a3      	ldrh	r3, [r4, #12]
 801fefa:	07db      	lsls	r3, r3, #31
 801fefc:	d506      	bpl.n	801ff0c <__swbuf_r+0x6c>
 801fefe:	2e0a      	cmp	r6, #10
 801ff00:	d104      	bne.n	801ff0c <__swbuf_r+0x6c>
 801ff02:	4621      	mov	r1, r4
 801ff04:	4628      	mov	r0, r5
 801ff06:	f000 f93b 	bl	8020180 <_fflush_r>
 801ff0a:	b988      	cbnz	r0, 801ff30 <__swbuf_r+0x90>
 801ff0c:	4638      	mov	r0, r7
 801ff0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff10:	4b0a      	ldr	r3, [pc, #40]	; (801ff3c <__swbuf_r+0x9c>)
 801ff12:	429c      	cmp	r4, r3
 801ff14:	d101      	bne.n	801ff1a <__swbuf_r+0x7a>
 801ff16:	68ac      	ldr	r4, [r5, #8]
 801ff18:	e7cf      	b.n	801feba <__swbuf_r+0x1a>
 801ff1a:	4b09      	ldr	r3, [pc, #36]	; (801ff40 <__swbuf_r+0xa0>)
 801ff1c:	429c      	cmp	r4, r3
 801ff1e:	bf08      	it	eq
 801ff20:	68ec      	ldreq	r4, [r5, #12]
 801ff22:	e7ca      	b.n	801feba <__swbuf_r+0x1a>
 801ff24:	4621      	mov	r1, r4
 801ff26:	4628      	mov	r0, r5
 801ff28:	f000 f81e 	bl	801ff68 <__swsetup_r>
 801ff2c:	2800      	cmp	r0, #0
 801ff2e:	d0cb      	beq.n	801fec8 <__swbuf_r+0x28>
 801ff30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ff34:	e7ea      	b.n	801ff0c <__swbuf_r+0x6c>
 801ff36:	bf00      	nop
 801ff38:	080245a0 	.word	0x080245a0
 801ff3c:	080245c0 	.word	0x080245c0
 801ff40:	08024580 	.word	0x08024580

0801ff44 <_write_r>:
 801ff44:	b538      	push	{r3, r4, r5, lr}
 801ff46:	4d07      	ldr	r5, [pc, #28]	; (801ff64 <_write_r+0x20>)
 801ff48:	4604      	mov	r4, r0
 801ff4a:	4608      	mov	r0, r1
 801ff4c:	4611      	mov	r1, r2
 801ff4e:	2200      	movs	r2, #0
 801ff50:	602a      	str	r2, [r5, #0]
 801ff52:	461a      	mov	r2, r3
 801ff54:	f7e0 fd5f 	bl	8000a16 <_write>
 801ff58:	1c43      	adds	r3, r0, #1
 801ff5a:	d102      	bne.n	801ff62 <_write_r+0x1e>
 801ff5c:	682b      	ldr	r3, [r5, #0]
 801ff5e:	b103      	cbz	r3, 801ff62 <_write_r+0x1e>
 801ff60:	6023      	str	r3, [r4, #0]
 801ff62:	bd38      	pop	{r3, r4, r5, pc}
 801ff64:	2400f9a0 	.word	0x2400f9a0

0801ff68 <__swsetup_r>:
 801ff68:	4b32      	ldr	r3, [pc, #200]	; (8020034 <__swsetup_r+0xcc>)
 801ff6a:	b570      	push	{r4, r5, r6, lr}
 801ff6c:	681d      	ldr	r5, [r3, #0]
 801ff6e:	4606      	mov	r6, r0
 801ff70:	460c      	mov	r4, r1
 801ff72:	b125      	cbz	r5, 801ff7e <__swsetup_r+0x16>
 801ff74:	69ab      	ldr	r3, [r5, #24]
 801ff76:	b913      	cbnz	r3, 801ff7e <__swsetup_r+0x16>
 801ff78:	4628      	mov	r0, r5
 801ff7a:	f7ff f8d9 	bl	801f130 <__sinit>
 801ff7e:	4b2e      	ldr	r3, [pc, #184]	; (8020038 <__swsetup_r+0xd0>)
 801ff80:	429c      	cmp	r4, r3
 801ff82:	d10f      	bne.n	801ffa4 <__swsetup_r+0x3c>
 801ff84:	686c      	ldr	r4, [r5, #4]
 801ff86:	89a3      	ldrh	r3, [r4, #12]
 801ff88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ff8c:	0719      	lsls	r1, r3, #28
 801ff8e:	d42c      	bmi.n	801ffea <__swsetup_r+0x82>
 801ff90:	06dd      	lsls	r5, r3, #27
 801ff92:	d411      	bmi.n	801ffb8 <__swsetup_r+0x50>
 801ff94:	2309      	movs	r3, #9
 801ff96:	6033      	str	r3, [r6, #0]
 801ff98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ff9c:	81a3      	strh	r3, [r4, #12]
 801ff9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ffa2:	e03e      	b.n	8020022 <__swsetup_r+0xba>
 801ffa4:	4b25      	ldr	r3, [pc, #148]	; (802003c <__swsetup_r+0xd4>)
 801ffa6:	429c      	cmp	r4, r3
 801ffa8:	d101      	bne.n	801ffae <__swsetup_r+0x46>
 801ffaa:	68ac      	ldr	r4, [r5, #8]
 801ffac:	e7eb      	b.n	801ff86 <__swsetup_r+0x1e>
 801ffae:	4b24      	ldr	r3, [pc, #144]	; (8020040 <__swsetup_r+0xd8>)
 801ffb0:	429c      	cmp	r4, r3
 801ffb2:	bf08      	it	eq
 801ffb4:	68ec      	ldreq	r4, [r5, #12]
 801ffb6:	e7e6      	b.n	801ff86 <__swsetup_r+0x1e>
 801ffb8:	0758      	lsls	r0, r3, #29
 801ffba:	d512      	bpl.n	801ffe2 <__swsetup_r+0x7a>
 801ffbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ffbe:	b141      	cbz	r1, 801ffd2 <__swsetup_r+0x6a>
 801ffc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ffc4:	4299      	cmp	r1, r3
 801ffc6:	d002      	beq.n	801ffce <__swsetup_r+0x66>
 801ffc8:	4630      	mov	r0, r6
 801ffca:	f7ff f9d1 	bl	801f370 <_free_r>
 801ffce:	2300      	movs	r3, #0
 801ffd0:	6363      	str	r3, [r4, #52]	; 0x34
 801ffd2:	89a3      	ldrh	r3, [r4, #12]
 801ffd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ffd8:	81a3      	strh	r3, [r4, #12]
 801ffda:	2300      	movs	r3, #0
 801ffdc:	6063      	str	r3, [r4, #4]
 801ffde:	6923      	ldr	r3, [r4, #16]
 801ffe0:	6023      	str	r3, [r4, #0]
 801ffe2:	89a3      	ldrh	r3, [r4, #12]
 801ffe4:	f043 0308 	orr.w	r3, r3, #8
 801ffe8:	81a3      	strh	r3, [r4, #12]
 801ffea:	6923      	ldr	r3, [r4, #16]
 801ffec:	b94b      	cbnz	r3, 8020002 <__swsetup_r+0x9a>
 801ffee:	89a3      	ldrh	r3, [r4, #12]
 801fff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fff8:	d003      	beq.n	8020002 <__swsetup_r+0x9a>
 801fffa:	4621      	mov	r1, r4
 801fffc:	4630      	mov	r0, r6
 801fffe:	f000 f933 	bl	8020268 <__smakebuf_r>
 8020002:	89a0      	ldrh	r0, [r4, #12]
 8020004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020008:	f010 0301 	ands.w	r3, r0, #1
 802000c:	d00a      	beq.n	8020024 <__swsetup_r+0xbc>
 802000e:	2300      	movs	r3, #0
 8020010:	60a3      	str	r3, [r4, #8]
 8020012:	6963      	ldr	r3, [r4, #20]
 8020014:	425b      	negs	r3, r3
 8020016:	61a3      	str	r3, [r4, #24]
 8020018:	6923      	ldr	r3, [r4, #16]
 802001a:	b943      	cbnz	r3, 802002e <__swsetup_r+0xc6>
 802001c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020020:	d1ba      	bne.n	801ff98 <__swsetup_r+0x30>
 8020022:	bd70      	pop	{r4, r5, r6, pc}
 8020024:	0781      	lsls	r1, r0, #30
 8020026:	bf58      	it	pl
 8020028:	6963      	ldrpl	r3, [r4, #20]
 802002a:	60a3      	str	r3, [r4, #8]
 802002c:	e7f4      	b.n	8020018 <__swsetup_r+0xb0>
 802002e:	2000      	movs	r0, #0
 8020030:	e7f7      	b.n	8020022 <__swsetup_r+0xba>
 8020032:	bf00      	nop
 8020034:	24000034 	.word	0x24000034
 8020038:	080245a0 	.word	0x080245a0
 802003c:	080245c0 	.word	0x080245c0
 8020040:	08024580 	.word	0x08024580

08020044 <abort>:
 8020044:	b508      	push	{r3, lr}
 8020046:	2006      	movs	r0, #6
 8020048:	f000 fb1e 	bl	8020688 <raise>
 802004c:	2001      	movs	r0, #1
 802004e:	f7e1 f99d 	bl	800138c <_exit>
	...

08020054 <_close_r>:
 8020054:	b538      	push	{r3, r4, r5, lr}
 8020056:	4d06      	ldr	r5, [pc, #24]	; (8020070 <_close_r+0x1c>)
 8020058:	2300      	movs	r3, #0
 802005a:	4604      	mov	r4, r0
 802005c:	4608      	mov	r0, r1
 802005e:	602b      	str	r3, [r5, #0]
 8020060:	f7e1 f9bb 	bl	80013da <_close>
 8020064:	1c43      	adds	r3, r0, #1
 8020066:	d102      	bne.n	802006e <_close_r+0x1a>
 8020068:	682b      	ldr	r3, [r5, #0]
 802006a:	b103      	cbz	r3, 802006e <_close_r+0x1a>
 802006c:	6023      	str	r3, [r4, #0]
 802006e:	bd38      	pop	{r3, r4, r5, pc}
 8020070:	2400f9a0 	.word	0x2400f9a0

08020074 <__sflush_r>:
 8020074:	898a      	ldrh	r2, [r1, #12]
 8020076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802007a:	4605      	mov	r5, r0
 802007c:	0710      	lsls	r0, r2, #28
 802007e:	460c      	mov	r4, r1
 8020080:	d458      	bmi.n	8020134 <__sflush_r+0xc0>
 8020082:	684b      	ldr	r3, [r1, #4]
 8020084:	2b00      	cmp	r3, #0
 8020086:	dc05      	bgt.n	8020094 <__sflush_r+0x20>
 8020088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802008a:	2b00      	cmp	r3, #0
 802008c:	dc02      	bgt.n	8020094 <__sflush_r+0x20>
 802008e:	2000      	movs	r0, #0
 8020090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020096:	2e00      	cmp	r6, #0
 8020098:	d0f9      	beq.n	802008e <__sflush_r+0x1a>
 802009a:	2300      	movs	r3, #0
 802009c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80200a0:	682f      	ldr	r7, [r5, #0]
 80200a2:	602b      	str	r3, [r5, #0]
 80200a4:	d032      	beq.n	802010c <__sflush_r+0x98>
 80200a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80200a8:	89a3      	ldrh	r3, [r4, #12]
 80200aa:	075a      	lsls	r2, r3, #29
 80200ac:	d505      	bpl.n	80200ba <__sflush_r+0x46>
 80200ae:	6863      	ldr	r3, [r4, #4]
 80200b0:	1ac0      	subs	r0, r0, r3
 80200b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80200b4:	b10b      	cbz	r3, 80200ba <__sflush_r+0x46>
 80200b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80200b8:	1ac0      	subs	r0, r0, r3
 80200ba:	2300      	movs	r3, #0
 80200bc:	4602      	mov	r2, r0
 80200be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80200c0:	6a21      	ldr	r1, [r4, #32]
 80200c2:	4628      	mov	r0, r5
 80200c4:	47b0      	blx	r6
 80200c6:	1c43      	adds	r3, r0, #1
 80200c8:	89a3      	ldrh	r3, [r4, #12]
 80200ca:	d106      	bne.n	80200da <__sflush_r+0x66>
 80200cc:	6829      	ldr	r1, [r5, #0]
 80200ce:	291d      	cmp	r1, #29
 80200d0:	d82c      	bhi.n	802012c <__sflush_r+0xb8>
 80200d2:	4a2a      	ldr	r2, [pc, #168]	; (802017c <__sflush_r+0x108>)
 80200d4:	40ca      	lsrs	r2, r1
 80200d6:	07d6      	lsls	r6, r2, #31
 80200d8:	d528      	bpl.n	802012c <__sflush_r+0xb8>
 80200da:	2200      	movs	r2, #0
 80200dc:	6062      	str	r2, [r4, #4]
 80200de:	04d9      	lsls	r1, r3, #19
 80200e0:	6922      	ldr	r2, [r4, #16]
 80200e2:	6022      	str	r2, [r4, #0]
 80200e4:	d504      	bpl.n	80200f0 <__sflush_r+0x7c>
 80200e6:	1c42      	adds	r2, r0, #1
 80200e8:	d101      	bne.n	80200ee <__sflush_r+0x7a>
 80200ea:	682b      	ldr	r3, [r5, #0]
 80200ec:	b903      	cbnz	r3, 80200f0 <__sflush_r+0x7c>
 80200ee:	6560      	str	r0, [r4, #84]	; 0x54
 80200f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80200f2:	602f      	str	r7, [r5, #0]
 80200f4:	2900      	cmp	r1, #0
 80200f6:	d0ca      	beq.n	802008e <__sflush_r+0x1a>
 80200f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80200fc:	4299      	cmp	r1, r3
 80200fe:	d002      	beq.n	8020106 <__sflush_r+0x92>
 8020100:	4628      	mov	r0, r5
 8020102:	f7ff f935 	bl	801f370 <_free_r>
 8020106:	2000      	movs	r0, #0
 8020108:	6360      	str	r0, [r4, #52]	; 0x34
 802010a:	e7c1      	b.n	8020090 <__sflush_r+0x1c>
 802010c:	6a21      	ldr	r1, [r4, #32]
 802010e:	2301      	movs	r3, #1
 8020110:	4628      	mov	r0, r5
 8020112:	47b0      	blx	r6
 8020114:	1c41      	adds	r1, r0, #1
 8020116:	d1c7      	bne.n	80200a8 <__sflush_r+0x34>
 8020118:	682b      	ldr	r3, [r5, #0]
 802011a:	2b00      	cmp	r3, #0
 802011c:	d0c4      	beq.n	80200a8 <__sflush_r+0x34>
 802011e:	2b1d      	cmp	r3, #29
 8020120:	d001      	beq.n	8020126 <__sflush_r+0xb2>
 8020122:	2b16      	cmp	r3, #22
 8020124:	d101      	bne.n	802012a <__sflush_r+0xb6>
 8020126:	602f      	str	r7, [r5, #0]
 8020128:	e7b1      	b.n	802008e <__sflush_r+0x1a>
 802012a:	89a3      	ldrh	r3, [r4, #12]
 802012c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020130:	81a3      	strh	r3, [r4, #12]
 8020132:	e7ad      	b.n	8020090 <__sflush_r+0x1c>
 8020134:	690f      	ldr	r7, [r1, #16]
 8020136:	2f00      	cmp	r7, #0
 8020138:	d0a9      	beq.n	802008e <__sflush_r+0x1a>
 802013a:	0793      	lsls	r3, r2, #30
 802013c:	680e      	ldr	r6, [r1, #0]
 802013e:	bf08      	it	eq
 8020140:	694b      	ldreq	r3, [r1, #20]
 8020142:	600f      	str	r7, [r1, #0]
 8020144:	bf18      	it	ne
 8020146:	2300      	movne	r3, #0
 8020148:	eba6 0807 	sub.w	r8, r6, r7
 802014c:	608b      	str	r3, [r1, #8]
 802014e:	f1b8 0f00 	cmp.w	r8, #0
 8020152:	dd9c      	ble.n	802008e <__sflush_r+0x1a>
 8020154:	6a21      	ldr	r1, [r4, #32]
 8020156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020158:	4643      	mov	r3, r8
 802015a:	463a      	mov	r2, r7
 802015c:	4628      	mov	r0, r5
 802015e:	47b0      	blx	r6
 8020160:	2800      	cmp	r0, #0
 8020162:	dc06      	bgt.n	8020172 <__sflush_r+0xfe>
 8020164:	89a3      	ldrh	r3, [r4, #12]
 8020166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802016a:	81a3      	strh	r3, [r4, #12]
 802016c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020170:	e78e      	b.n	8020090 <__sflush_r+0x1c>
 8020172:	4407      	add	r7, r0
 8020174:	eba8 0800 	sub.w	r8, r8, r0
 8020178:	e7e9      	b.n	802014e <__sflush_r+0xda>
 802017a:	bf00      	nop
 802017c:	20400001 	.word	0x20400001

08020180 <_fflush_r>:
 8020180:	b538      	push	{r3, r4, r5, lr}
 8020182:	690b      	ldr	r3, [r1, #16]
 8020184:	4605      	mov	r5, r0
 8020186:	460c      	mov	r4, r1
 8020188:	b913      	cbnz	r3, 8020190 <_fflush_r+0x10>
 802018a:	2500      	movs	r5, #0
 802018c:	4628      	mov	r0, r5
 802018e:	bd38      	pop	{r3, r4, r5, pc}
 8020190:	b118      	cbz	r0, 802019a <_fflush_r+0x1a>
 8020192:	6983      	ldr	r3, [r0, #24]
 8020194:	b90b      	cbnz	r3, 802019a <_fflush_r+0x1a>
 8020196:	f7fe ffcb 	bl	801f130 <__sinit>
 802019a:	4b14      	ldr	r3, [pc, #80]	; (80201ec <_fflush_r+0x6c>)
 802019c:	429c      	cmp	r4, r3
 802019e:	d11b      	bne.n	80201d8 <_fflush_r+0x58>
 80201a0:	686c      	ldr	r4, [r5, #4]
 80201a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80201a6:	2b00      	cmp	r3, #0
 80201a8:	d0ef      	beq.n	802018a <_fflush_r+0xa>
 80201aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80201ac:	07d0      	lsls	r0, r2, #31
 80201ae:	d404      	bmi.n	80201ba <_fflush_r+0x3a>
 80201b0:	0599      	lsls	r1, r3, #22
 80201b2:	d402      	bmi.n	80201ba <_fflush_r+0x3a>
 80201b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80201b6:	f7ff f890 	bl	801f2da <__retarget_lock_acquire_recursive>
 80201ba:	4628      	mov	r0, r5
 80201bc:	4621      	mov	r1, r4
 80201be:	f7ff ff59 	bl	8020074 <__sflush_r>
 80201c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80201c4:	07da      	lsls	r2, r3, #31
 80201c6:	4605      	mov	r5, r0
 80201c8:	d4e0      	bmi.n	802018c <_fflush_r+0xc>
 80201ca:	89a3      	ldrh	r3, [r4, #12]
 80201cc:	059b      	lsls	r3, r3, #22
 80201ce:	d4dd      	bmi.n	802018c <_fflush_r+0xc>
 80201d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80201d2:	f7ff f883 	bl	801f2dc <__retarget_lock_release_recursive>
 80201d6:	e7d9      	b.n	802018c <_fflush_r+0xc>
 80201d8:	4b05      	ldr	r3, [pc, #20]	; (80201f0 <_fflush_r+0x70>)
 80201da:	429c      	cmp	r4, r3
 80201dc:	d101      	bne.n	80201e2 <_fflush_r+0x62>
 80201de:	68ac      	ldr	r4, [r5, #8]
 80201e0:	e7df      	b.n	80201a2 <_fflush_r+0x22>
 80201e2:	4b04      	ldr	r3, [pc, #16]	; (80201f4 <_fflush_r+0x74>)
 80201e4:	429c      	cmp	r4, r3
 80201e6:	bf08      	it	eq
 80201e8:	68ec      	ldreq	r4, [r5, #12]
 80201ea:	e7da      	b.n	80201a2 <_fflush_r+0x22>
 80201ec:	080245a0 	.word	0x080245a0
 80201f0:	080245c0 	.word	0x080245c0
 80201f4:	08024580 	.word	0x08024580

080201f8 <_lseek_r>:
 80201f8:	b538      	push	{r3, r4, r5, lr}
 80201fa:	4d07      	ldr	r5, [pc, #28]	; (8020218 <_lseek_r+0x20>)
 80201fc:	4604      	mov	r4, r0
 80201fe:	4608      	mov	r0, r1
 8020200:	4611      	mov	r1, r2
 8020202:	2200      	movs	r2, #0
 8020204:	602a      	str	r2, [r5, #0]
 8020206:	461a      	mov	r2, r3
 8020208:	f7e1 f90e 	bl	8001428 <_lseek>
 802020c:	1c43      	adds	r3, r0, #1
 802020e:	d102      	bne.n	8020216 <_lseek_r+0x1e>
 8020210:	682b      	ldr	r3, [r5, #0]
 8020212:	b103      	cbz	r3, 8020216 <_lseek_r+0x1e>
 8020214:	6023      	str	r3, [r4, #0]
 8020216:	bd38      	pop	{r3, r4, r5, pc}
 8020218:	2400f9a0 	.word	0x2400f9a0

0802021c <__swhatbuf_r>:
 802021c:	b570      	push	{r4, r5, r6, lr}
 802021e:	460e      	mov	r6, r1
 8020220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020224:	2900      	cmp	r1, #0
 8020226:	b096      	sub	sp, #88	; 0x58
 8020228:	4614      	mov	r4, r2
 802022a:	461d      	mov	r5, r3
 802022c:	da08      	bge.n	8020240 <__swhatbuf_r+0x24>
 802022e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020232:	2200      	movs	r2, #0
 8020234:	602a      	str	r2, [r5, #0]
 8020236:	061a      	lsls	r2, r3, #24
 8020238:	d410      	bmi.n	802025c <__swhatbuf_r+0x40>
 802023a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802023e:	e00e      	b.n	802025e <__swhatbuf_r+0x42>
 8020240:	466a      	mov	r2, sp
 8020242:	f000 fa3d 	bl	80206c0 <_fstat_r>
 8020246:	2800      	cmp	r0, #0
 8020248:	dbf1      	blt.n	802022e <__swhatbuf_r+0x12>
 802024a:	9a01      	ldr	r2, [sp, #4]
 802024c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020250:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020254:	425a      	negs	r2, r3
 8020256:	415a      	adcs	r2, r3
 8020258:	602a      	str	r2, [r5, #0]
 802025a:	e7ee      	b.n	802023a <__swhatbuf_r+0x1e>
 802025c:	2340      	movs	r3, #64	; 0x40
 802025e:	2000      	movs	r0, #0
 8020260:	6023      	str	r3, [r4, #0]
 8020262:	b016      	add	sp, #88	; 0x58
 8020264:	bd70      	pop	{r4, r5, r6, pc}
	...

08020268 <__smakebuf_r>:
 8020268:	898b      	ldrh	r3, [r1, #12]
 802026a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802026c:	079d      	lsls	r5, r3, #30
 802026e:	4606      	mov	r6, r0
 8020270:	460c      	mov	r4, r1
 8020272:	d507      	bpl.n	8020284 <__smakebuf_r+0x1c>
 8020274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020278:	6023      	str	r3, [r4, #0]
 802027a:	6123      	str	r3, [r4, #16]
 802027c:	2301      	movs	r3, #1
 802027e:	6163      	str	r3, [r4, #20]
 8020280:	b002      	add	sp, #8
 8020282:	bd70      	pop	{r4, r5, r6, pc}
 8020284:	ab01      	add	r3, sp, #4
 8020286:	466a      	mov	r2, sp
 8020288:	f7ff ffc8 	bl	802021c <__swhatbuf_r>
 802028c:	9900      	ldr	r1, [sp, #0]
 802028e:	4605      	mov	r5, r0
 8020290:	4630      	mov	r0, r6
 8020292:	f7ff f8d9 	bl	801f448 <_malloc_r>
 8020296:	b948      	cbnz	r0, 80202ac <__smakebuf_r+0x44>
 8020298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802029c:	059a      	lsls	r2, r3, #22
 802029e:	d4ef      	bmi.n	8020280 <__smakebuf_r+0x18>
 80202a0:	f023 0303 	bic.w	r3, r3, #3
 80202a4:	f043 0302 	orr.w	r3, r3, #2
 80202a8:	81a3      	strh	r3, [r4, #12]
 80202aa:	e7e3      	b.n	8020274 <__smakebuf_r+0xc>
 80202ac:	4b0d      	ldr	r3, [pc, #52]	; (80202e4 <__smakebuf_r+0x7c>)
 80202ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80202b0:	89a3      	ldrh	r3, [r4, #12]
 80202b2:	6020      	str	r0, [r4, #0]
 80202b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80202b8:	81a3      	strh	r3, [r4, #12]
 80202ba:	9b00      	ldr	r3, [sp, #0]
 80202bc:	6163      	str	r3, [r4, #20]
 80202be:	9b01      	ldr	r3, [sp, #4]
 80202c0:	6120      	str	r0, [r4, #16]
 80202c2:	b15b      	cbz	r3, 80202dc <__smakebuf_r+0x74>
 80202c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80202c8:	4630      	mov	r0, r6
 80202ca:	f000 fa0b 	bl	80206e4 <_isatty_r>
 80202ce:	b128      	cbz	r0, 80202dc <__smakebuf_r+0x74>
 80202d0:	89a3      	ldrh	r3, [r4, #12]
 80202d2:	f023 0303 	bic.w	r3, r3, #3
 80202d6:	f043 0301 	orr.w	r3, r3, #1
 80202da:	81a3      	strh	r3, [r4, #12]
 80202dc:	89a0      	ldrh	r0, [r4, #12]
 80202de:	4305      	orrs	r5, r0
 80202e0:	81a5      	strh	r5, [r4, #12]
 80202e2:	e7cd      	b.n	8020280 <__smakebuf_r+0x18>
 80202e4:	0801f0c9 	.word	0x0801f0c9

080202e8 <__malloc_lock>:
 80202e8:	4801      	ldr	r0, [pc, #4]	; (80202f0 <__malloc_lock+0x8>)
 80202ea:	f7fe bff6 	b.w	801f2da <__retarget_lock_acquire_recursive>
 80202ee:	bf00      	nop
 80202f0:	2400f994 	.word	0x2400f994

080202f4 <__malloc_unlock>:
 80202f4:	4801      	ldr	r0, [pc, #4]	; (80202fc <__malloc_unlock+0x8>)
 80202f6:	f7fe bff1 	b.w	801f2dc <__retarget_lock_release_recursive>
 80202fa:	bf00      	nop
 80202fc:	2400f994 	.word	0x2400f994

08020300 <_realloc_r>:
 8020300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020304:	4680      	mov	r8, r0
 8020306:	4614      	mov	r4, r2
 8020308:	460e      	mov	r6, r1
 802030a:	b921      	cbnz	r1, 8020316 <_realloc_r+0x16>
 802030c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020310:	4611      	mov	r1, r2
 8020312:	f7ff b899 	b.w	801f448 <_malloc_r>
 8020316:	b92a      	cbnz	r2, 8020324 <_realloc_r+0x24>
 8020318:	f7ff f82a 	bl	801f370 <_free_r>
 802031c:	4625      	mov	r5, r4
 802031e:	4628      	mov	r0, r5
 8020320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020324:	f000 f9ee 	bl	8020704 <_malloc_usable_size_r>
 8020328:	4284      	cmp	r4, r0
 802032a:	4607      	mov	r7, r0
 802032c:	d802      	bhi.n	8020334 <_realloc_r+0x34>
 802032e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020332:	d812      	bhi.n	802035a <_realloc_r+0x5a>
 8020334:	4621      	mov	r1, r4
 8020336:	4640      	mov	r0, r8
 8020338:	f7ff f886 	bl	801f448 <_malloc_r>
 802033c:	4605      	mov	r5, r0
 802033e:	2800      	cmp	r0, #0
 8020340:	d0ed      	beq.n	802031e <_realloc_r+0x1e>
 8020342:	42bc      	cmp	r4, r7
 8020344:	4622      	mov	r2, r4
 8020346:	4631      	mov	r1, r6
 8020348:	bf28      	it	cs
 802034a:	463a      	movcs	r2, r7
 802034c:	f7fe ffe0 	bl	801f310 <memcpy>
 8020350:	4631      	mov	r1, r6
 8020352:	4640      	mov	r0, r8
 8020354:	f7ff f80c 	bl	801f370 <_free_r>
 8020358:	e7e1      	b.n	802031e <_realloc_r+0x1e>
 802035a:	4635      	mov	r5, r6
 802035c:	e7df      	b.n	802031e <_realloc_r+0x1e>

0802035e <__ssputs_r>:
 802035e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020362:	688e      	ldr	r6, [r1, #8]
 8020364:	429e      	cmp	r6, r3
 8020366:	4682      	mov	sl, r0
 8020368:	460c      	mov	r4, r1
 802036a:	4690      	mov	r8, r2
 802036c:	461f      	mov	r7, r3
 802036e:	d838      	bhi.n	80203e2 <__ssputs_r+0x84>
 8020370:	898a      	ldrh	r2, [r1, #12]
 8020372:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020376:	d032      	beq.n	80203de <__ssputs_r+0x80>
 8020378:	6825      	ldr	r5, [r4, #0]
 802037a:	6909      	ldr	r1, [r1, #16]
 802037c:	eba5 0901 	sub.w	r9, r5, r1
 8020380:	6965      	ldr	r5, [r4, #20]
 8020382:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020386:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802038a:	3301      	adds	r3, #1
 802038c:	444b      	add	r3, r9
 802038e:	106d      	asrs	r5, r5, #1
 8020390:	429d      	cmp	r5, r3
 8020392:	bf38      	it	cc
 8020394:	461d      	movcc	r5, r3
 8020396:	0553      	lsls	r3, r2, #21
 8020398:	d531      	bpl.n	80203fe <__ssputs_r+0xa0>
 802039a:	4629      	mov	r1, r5
 802039c:	f7ff f854 	bl	801f448 <_malloc_r>
 80203a0:	4606      	mov	r6, r0
 80203a2:	b950      	cbnz	r0, 80203ba <__ssputs_r+0x5c>
 80203a4:	230c      	movs	r3, #12
 80203a6:	f8ca 3000 	str.w	r3, [sl]
 80203aa:	89a3      	ldrh	r3, [r4, #12]
 80203ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80203b0:	81a3      	strh	r3, [r4, #12]
 80203b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80203b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203ba:	6921      	ldr	r1, [r4, #16]
 80203bc:	464a      	mov	r2, r9
 80203be:	f7fe ffa7 	bl	801f310 <memcpy>
 80203c2:	89a3      	ldrh	r3, [r4, #12]
 80203c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80203c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80203cc:	81a3      	strh	r3, [r4, #12]
 80203ce:	6126      	str	r6, [r4, #16]
 80203d0:	6165      	str	r5, [r4, #20]
 80203d2:	444e      	add	r6, r9
 80203d4:	eba5 0509 	sub.w	r5, r5, r9
 80203d8:	6026      	str	r6, [r4, #0]
 80203da:	60a5      	str	r5, [r4, #8]
 80203dc:	463e      	mov	r6, r7
 80203de:	42be      	cmp	r6, r7
 80203e0:	d900      	bls.n	80203e4 <__ssputs_r+0x86>
 80203e2:	463e      	mov	r6, r7
 80203e4:	6820      	ldr	r0, [r4, #0]
 80203e6:	4632      	mov	r2, r6
 80203e8:	4641      	mov	r1, r8
 80203ea:	f7fe ff9f 	bl	801f32c <memmove>
 80203ee:	68a3      	ldr	r3, [r4, #8]
 80203f0:	1b9b      	subs	r3, r3, r6
 80203f2:	60a3      	str	r3, [r4, #8]
 80203f4:	6823      	ldr	r3, [r4, #0]
 80203f6:	4433      	add	r3, r6
 80203f8:	6023      	str	r3, [r4, #0]
 80203fa:	2000      	movs	r0, #0
 80203fc:	e7db      	b.n	80203b6 <__ssputs_r+0x58>
 80203fe:	462a      	mov	r2, r5
 8020400:	f7ff ff7e 	bl	8020300 <_realloc_r>
 8020404:	4606      	mov	r6, r0
 8020406:	2800      	cmp	r0, #0
 8020408:	d1e1      	bne.n	80203ce <__ssputs_r+0x70>
 802040a:	6921      	ldr	r1, [r4, #16]
 802040c:	4650      	mov	r0, sl
 802040e:	f7fe ffaf 	bl	801f370 <_free_r>
 8020412:	e7c7      	b.n	80203a4 <__ssputs_r+0x46>

08020414 <_svfiprintf_r>:
 8020414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020418:	4698      	mov	r8, r3
 802041a:	898b      	ldrh	r3, [r1, #12]
 802041c:	061b      	lsls	r3, r3, #24
 802041e:	b09d      	sub	sp, #116	; 0x74
 8020420:	4607      	mov	r7, r0
 8020422:	460d      	mov	r5, r1
 8020424:	4614      	mov	r4, r2
 8020426:	d50e      	bpl.n	8020446 <_svfiprintf_r+0x32>
 8020428:	690b      	ldr	r3, [r1, #16]
 802042a:	b963      	cbnz	r3, 8020446 <_svfiprintf_r+0x32>
 802042c:	2140      	movs	r1, #64	; 0x40
 802042e:	f7ff f80b 	bl	801f448 <_malloc_r>
 8020432:	6028      	str	r0, [r5, #0]
 8020434:	6128      	str	r0, [r5, #16]
 8020436:	b920      	cbnz	r0, 8020442 <_svfiprintf_r+0x2e>
 8020438:	230c      	movs	r3, #12
 802043a:	603b      	str	r3, [r7, #0]
 802043c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020440:	e0d1      	b.n	80205e6 <_svfiprintf_r+0x1d2>
 8020442:	2340      	movs	r3, #64	; 0x40
 8020444:	616b      	str	r3, [r5, #20]
 8020446:	2300      	movs	r3, #0
 8020448:	9309      	str	r3, [sp, #36]	; 0x24
 802044a:	2320      	movs	r3, #32
 802044c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020450:	f8cd 800c 	str.w	r8, [sp, #12]
 8020454:	2330      	movs	r3, #48	; 0x30
 8020456:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020600 <_svfiprintf_r+0x1ec>
 802045a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802045e:	f04f 0901 	mov.w	r9, #1
 8020462:	4623      	mov	r3, r4
 8020464:	469a      	mov	sl, r3
 8020466:	f813 2b01 	ldrb.w	r2, [r3], #1
 802046a:	b10a      	cbz	r2, 8020470 <_svfiprintf_r+0x5c>
 802046c:	2a25      	cmp	r2, #37	; 0x25
 802046e:	d1f9      	bne.n	8020464 <_svfiprintf_r+0x50>
 8020470:	ebba 0b04 	subs.w	fp, sl, r4
 8020474:	d00b      	beq.n	802048e <_svfiprintf_r+0x7a>
 8020476:	465b      	mov	r3, fp
 8020478:	4622      	mov	r2, r4
 802047a:	4629      	mov	r1, r5
 802047c:	4638      	mov	r0, r7
 802047e:	f7ff ff6e 	bl	802035e <__ssputs_r>
 8020482:	3001      	adds	r0, #1
 8020484:	f000 80aa 	beq.w	80205dc <_svfiprintf_r+0x1c8>
 8020488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802048a:	445a      	add	r2, fp
 802048c:	9209      	str	r2, [sp, #36]	; 0x24
 802048e:	f89a 3000 	ldrb.w	r3, [sl]
 8020492:	2b00      	cmp	r3, #0
 8020494:	f000 80a2 	beq.w	80205dc <_svfiprintf_r+0x1c8>
 8020498:	2300      	movs	r3, #0
 802049a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802049e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80204a2:	f10a 0a01 	add.w	sl, sl, #1
 80204a6:	9304      	str	r3, [sp, #16]
 80204a8:	9307      	str	r3, [sp, #28]
 80204aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80204ae:	931a      	str	r3, [sp, #104]	; 0x68
 80204b0:	4654      	mov	r4, sl
 80204b2:	2205      	movs	r2, #5
 80204b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80204b8:	4851      	ldr	r0, [pc, #324]	; (8020600 <_svfiprintf_r+0x1ec>)
 80204ba:	f7df ff19 	bl	80002f0 <memchr>
 80204be:	9a04      	ldr	r2, [sp, #16]
 80204c0:	b9d8      	cbnz	r0, 80204fa <_svfiprintf_r+0xe6>
 80204c2:	06d0      	lsls	r0, r2, #27
 80204c4:	bf44      	itt	mi
 80204c6:	2320      	movmi	r3, #32
 80204c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80204cc:	0711      	lsls	r1, r2, #28
 80204ce:	bf44      	itt	mi
 80204d0:	232b      	movmi	r3, #43	; 0x2b
 80204d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80204d6:	f89a 3000 	ldrb.w	r3, [sl]
 80204da:	2b2a      	cmp	r3, #42	; 0x2a
 80204dc:	d015      	beq.n	802050a <_svfiprintf_r+0xf6>
 80204de:	9a07      	ldr	r2, [sp, #28]
 80204e0:	4654      	mov	r4, sl
 80204e2:	2000      	movs	r0, #0
 80204e4:	f04f 0c0a 	mov.w	ip, #10
 80204e8:	4621      	mov	r1, r4
 80204ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80204ee:	3b30      	subs	r3, #48	; 0x30
 80204f0:	2b09      	cmp	r3, #9
 80204f2:	d94e      	bls.n	8020592 <_svfiprintf_r+0x17e>
 80204f4:	b1b0      	cbz	r0, 8020524 <_svfiprintf_r+0x110>
 80204f6:	9207      	str	r2, [sp, #28]
 80204f8:	e014      	b.n	8020524 <_svfiprintf_r+0x110>
 80204fa:	eba0 0308 	sub.w	r3, r0, r8
 80204fe:	fa09 f303 	lsl.w	r3, r9, r3
 8020502:	4313      	orrs	r3, r2
 8020504:	9304      	str	r3, [sp, #16]
 8020506:	46a2      	mov	sl, r4
 8020508:	e7d2      	b.n	80204b0 <_svfiprintf_r+0x9c>
 802050a:	9b03      	ldr	r3, [sp, #12]
 802050c:	1d19      	adds	r1, r3, #4
 802050e:	681b      	ldr	r3, [r3, #0]
 8020510:	9103      	str	r1, [sp, #12]
 8020512:	2b00      	cmp	r3, #0
 8020514:	bfbb      	ittet	lt
 8020516:	425b      	neglt	r3, r3
 8020518:	f042 0202 	orrlt.w	r2, r2, #2
 802051c:	9307      	strge	r3, [sp, #28]
 802051e:	9307      	strlt	r3, [sp, #28]
 8020520:	bfb8      	it	lt
 8020522:	9204      	strlt	r2, [sp, #16]
 8020524:	7823      	ldrb	r3, [r4, #0]
 8020526:	2b2e      	cmp	r3, #46	; 0x2e
 8020528:	d10c      	bne.n	8020544 <_svfiprintf_r+0x130>
 802052a:	7863      	ldrb	r3, [r4, #1]
 802052c:	2b2a      	cmp	r3, #42	; 0x2a
 802052e:	d135      	bne.n	802059c <_svfiprintf_r+0x188>
 8020530:	9b03      	ldr	r3, [sp, #12]
 8020532:	1d1a      	adds	r2, r3, #4
 8020534:	681b      	ldr	r3, [r3, #0]
 8020536:	9203      	str	r2, [sp, #12]
 8020538:	2b00      	cmp	r3, #0
 802053a:	bfb8      	it	lt
 802053c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8020540:	3402      	adds	r4, #2
 8020542:	9305      	str	r3, [sp, #20]
 8020544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020610 <_svfiprintf_r+0x1fc>
 8020548:	7821      	ldrb	r1, [r4, #0]
 802054a:	2203      	movs	r2, #3
 802054c:	4650      	mov	r0, sl
 802054e:	f7df fecf 	bl	80002f0 <memchr>
 8020552:	b140      	cbz	r0, 8020566 <_svfiprintf_r+0x152>
 8020554:	2340      	movs	r3, #64	; 0x40
 8020556:	eba0 000a 	sub.w	r0, r0, sl
 802055a:	fa03 f000 	lsl.w	r0, r3, r0
 802055e:	9b04      	ldr	r3, [sp, #16]
 8020560:	4303      	orrs	r3, r0
 8020562:	3401      	adds	r4, #1
 8020564:	9304      	str	r3, [sp, #16]
 8020566:	f814 1b01 	ldrb.w	r1, [r4], #1
 802056a:	4826      	ldr	r0, [pc, #152]	; (8020604 <_svfiprintf_r+0x1f0>)
 802056c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020570:	2206      	movs	r2, #6
 8020572:	f7df febd 	bl	80002f0 <memchr>
 8020576:	2800      	cmp	r0, #0
 8020578:	d038      	beq.n	80205ec <_svfiprintf_r+0x1d8>
 802057a:	4b23      	ldr	r3, [pc, #140]	; (8020608 <_svfiprintf_r+0x1f4>)
 802057c:	bb1b      	cbnz	r3, 80205c6 <_svfiprintf_r+0x1b2>
 802057e:	9b03      	ldr	r3, [sp, #12]
 8020580:	3307      	adds	r3, #7
 8020582:	f023 0307 	bic.w	r3, r3, #7
 8020586:	3308      	adds	r3, #8
 8020588:	9303      	str	r3, [sp, #12]
 802058a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802058c:	4433      	add	r3, r6
 802058e:	9309      	str	r3, [sp, #36]	; 0x24
 8020590:	e767      	b.n	8020462 <_svfiprintf_r+0x4e>
 8020592:	fb0c 3202 	mla	r2, ip, r2, r3
 8020596:	460c      	mov	r4, r1
 8020598:	2001      	movs	r0, #1
 802059a:	e7a5      	b.n	80204e8 <_svfiprintf_r+0xd4>
 802059c:	2300      	movs	r3, #0
 802059e:	3401      	adds	r4, #1
 80205a0:	9305      	str	r3, [sp, #20]
 80205a2:	4619      	mov	r1, r3
 80205a4:	f04f 0c0a 	mov.w	ip, #10
 80205a8:	4620      	mov	r0, r4
 80205aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80205ae:	3a30      	subs	r2, #48	; 0x30
 80205b0:	2a09      	cmp	r2, #9
 80205b2:	d903      	bls.n	80205bc <_svfiprintf_r+0x1a8>
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d0c5      	beq.n	8020544 <_svfiprintf_r+0x130>
 80205b8:	9105      	str	r1, [sp, #20]
 80205ba:	e7c3      	b.n	8020544 <_svfiprintf_r+0x130>
 80205bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80205c0:	4604      	mov	r4, r0
 80205c2:	2301      	movs	r3, #1
 80205c4:	e7f0      	b.n	80205a8 <_svfiprintf_r+0x194>
 80205c6:	ab03      	add	r3, sp, #12
 80205c8:	9300      	str	r3, [sp, #0]
 80205ca:	462a      	mov	r2, r5
 80205cc:	4b0f      	ldr	r3, [pc, #60]	; (802060c <_svfiprintf_r+0x1f8>)
 80205ce:	a904      	add	r1, sp, #16
 80205d0:	4638      	mov	r0, r7
 80205d2:	f3af 8000 	nop.w
 80205d6:	1c42      	adds	r2, r0, #1
 80205d8:	4606      	mov	r6, r0
 80205da:	d1d6      	bne.n	802058a <_svfiprintf_r+0x176>
 80205dc:	89ab      	ldrh	r3, [r5, #12]
 80205de:	065b      	lsls	r3, r3, #25
 80205e0:	f53f af2c 	bmi.w	802043c <_svfiprintf_r+0x28>
 80205e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80205e6:	b01d      	add	sp, #116	; 0x74
 80205e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205ec:	ab03      	add	r3, sp, #12
 80205ee:	9300      	str	r3, [sp, #0]
 80205f0:	462a      	mov	r2, r5
 80205f2:	4b06      	ldr	r3, [pc, #24]	; (802060c <_svfiprintf_r+0x1f8>)
 80205f4:	a904      	add	r1, sp, #16
 80205f6:	4638      	mov	r0, r7
 80205f8:	f7ff f962 	bl	801f8c0 <_printf_i>
 80205fc:	e7eb      	b.n	80205d6 <_svfiprintf_r+0x1c2>
 80205fe:	bf00      	nop
 8020600:	080245e4 	.word	0x080245e4
 8020604:	080245ee 	.word	0x080245ee
 8020608:	00000000 	.word	0x00000000
 802060c:	0802035f 	.word	0x0802035f
 8020610:	080245ea 	.word	0x080245ea

08020614 <_read_r>:
 8020614:	b538      	push	{r3, r4, r5, lr}
 8020616:	4d07      	ldr	r5, [pc, #28]	; (8020634 <_read_r+0x20>)
 8020618:	4604      	mov	r4, r0
 802061a:	4608      	mov	r0, r1
 802061c:	4611      	mov	r1, r2
 802061e:	2200      	movs	r2, #0
 8020620:	602a      	str	r2, [r5, #0]
 8020622:	461a      	mov	r2, r3
 8020624:	f7e0 febc 	bl	80013a0 <_read>
 8020628:	1c43      	adds	r3, r0, #1
 802062a:	d102      	bne.n	8020632 <_read_r+0x1e>
 802062c:	682b      	ldr	r3, [r5, #0]
 802062e:	b103      	cbz	r3, 8020632 <_read_r+0x1e>
 8020630:	6023      	str	r3, [r4, #0]
 8020632:	bd38      	pop	{r3, r4, r5, pc}
 8020634:	2400f9a0 	.word	0x2400f9a0

08020638 <_raise_r>:
 8020638:	291f      	cmp	r1, #31
 802063a:	b538      	push	{r3, r4, r5, lr}
 802063c:	4604      	mov	r4, r0
 802063e:	460d      	mov	r5, r1
 8020640:	d904      	bls.n	802064c <_raise_r+0x14>
 8020642:	2316      	movs	r3, #22
 8020644:	6003      	str	r3, [r0, #0]
 8020646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802064a:	bd38      	pop	{r3, r4, r5, pc}
 802064c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802064e:	b112      	cbz	r2, 8020656 <_raise_r+0x1e>
 8020650:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020654:	b94b      	cbnz	r3, 802066a <_raise_r+0x32>
 8020656:	4620      	mov	r0, r4
 8020658:	f000 f830 	bl	80206bc <_getpid_r>
 802065c:	462a      	mov	r2, r5
 802065e:	4601      	mov	r1, r0
 8020660:	4620      	mov	r0, r4
 8020662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020666:	f000 b817 	b.w	8020698 <_kill_r>
 802066a:	2b01      	cmp	r3, #1
 802066c:	d00a      	beq.n	8020684 <_raise_r+0x4c>
 802066e:	1c59      	adds	r1, r3, #1
 8020670:	d103      	bne.n	802067a <_raise_r+0x42>
 8020672:	2316      	movs	r3, #22
 8020674:	6003      	str	r3, [r0, #0]
 8020676:	2001      	movs	r0, #1
 8020678:	e7e7      	b.n	802064a <_raise_r+0x12>
 802067a:	2400      	movs	r4, #0
 802067c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020680:	4628      	mov	r0, r5
 8020682:	4798      	blx	r3
 8020684:	2000      	movs	r0, #0
 8020686:	e7e0      	b.n	802064a <_raise_r+0x12>

08020688 <raise>:
 8020688:	4b02      	ldr	r3, [pc, #8]	; (8020694 <raise+0xc>)
 802068a:	4601      	mov	r1, r0
 802068c:	6818      	ldr	r0, [r3, #0]
 802068e:	f7ff bfd3 	b.w	8020638 <_raise_r>
 8020692:	bf00      	nop
 8020694:	24000034 	.word	0x24000034

08020698 <_kill_r>:
 8020698:	b538      	push	{r3, r4, r5, lr}
 802069a:	4d07      	ldr	r5, [pc, #28]	; (80206b8 <_kill_r+0x20>)
 802069c:	2300      	movs	r3, #0
 802069e:	4604      	mov	r4, r0
 80206a0:	4608      	mov	r0, r1
 80206a2:	4611      	mov	r1, r2
 80206a4:	602b      	str	r3, [r5, #0]
 80206a6:	f7e0 fe5f 	bl	8001368 <_kill>
 80206aa:	1c43      	adds	r3, r0, #1
 80206ac:	d102      	bne.n	80206b4 <_kill_r+0x1c>
 80206ae:	682b      	ldr	r3, [r5, #0]
 80206b0:	b103      	cbz	r3, 80206b4 <_kill_r+0x1c>
 80206b2:	6023      	str	r3, [r4, #0]
 80206b4:	bd38      	pop	{r3, r4, r5, pc}
 80206b6:	bf00      	nop
 80206b8:	2400f9a0 	.word	0x2400f9a0

080206bc <_getpid_r>:
 80206bc:	f7e0 be4c 	b.w	8001358 <_getpid>

080206c0 <_fstat_r>:
 80206c0:	b538      	push	{r3, r4, r5, lr}
 80206c2:	4d07      	ldr	r5, [pc, #28]	; (80206e0 <_fstat_r+0x20>)
 80206c4:	2300      	movs	r3, #0
 80206c6:	4604      	mov	r4, r0
 80206c8:	4608      	mov	r0, r1
 80206ca:	4611      	mov	r1, r2
 80206cc:	602b      	str	r3, [r5, #0]
 80206ce:	f7e0 fe90 	bl	80013f2 <_fstat>
 80206d2:	1c43      	adds	r3, r0, #1
 80206d4:	d102      	bne.n	80206dc <_fstat_r+0x1c>
 80206d6:	682b      	ldr	r3, [r5, #0]
 80206d8:	b103      	cbz	r3, 80206dc <_fstat_r+0x1c>
 80206da:	6023      	str	r3, [r4, #0]
 80206dc:	bd38      	pop	{r3, r4, r5, pc}
 80206de:	bf00      	nop
 80206e0:	2400f9a0 	.word	0x2400f9a0

080206e4 <_isatty_r>:
 80206e4:	b538      	push	{r3, r4, r5, lr}
 80206e6:	4d06      	ldr	r5, [pc, #24]	; (8020700 <_isatty_r+0x1c>)
 80206e8:	2300      	movs	r3, #0
 80206ea:	4604      	mov	r4, r0
 80206ec:	4608      	mov	r0, r1
 80206ee:	602b      	str	r3, [r5, #0]
 80206f0:	f7e0 fe8f 	bl	8001412 <_isatty>
 80206f4:	1c43      	adds	r3, r0, #1
 80206f6:	d102      	bne.n	80206fe <_isatty_r+0x1a>
 80206f8:	682b      	ldr	r3, [r5, #0]
 80206fa:	b103      	cbz	r3, 80206fe <_isatty_r+0x1a>
 80206fc:	6023      	str	r3, [r4, #0]
 80206fe:	bd38      	pop	{r3, r4, r5, pc}
 8020700:	2400f9a0 	.word	0x2400f9a0

08020704 <_malloc_usable_size_r>:
 8020704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020708:	1f18      	subs	r0, r3, #4
 802070a:	2b00      	cmp	r3, #0
 802070c:	bfbc      	itt	lt
 802070e:	580b      	ldrlt	r3, [r1, r0]
 8020710:	18c0      	addlt	r0, r0, r3
 8020712:	4770      	bx	lr

08020714 <_init>:
 8020714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020716:	bf00      	nop
 8020718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802071a:	bc08      	pop	{r3}
 802071c:	469e      	mov	lr, r3
 802071e:	4770      	bx	lr

08020720 <_fini>:
 8020720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020722:	bf00      	nop
 8020724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020726:	bc08      	pop	{r3}
 8020728:	469e      	mov	lr, r3
 802072a:	4770      	bx	lr
